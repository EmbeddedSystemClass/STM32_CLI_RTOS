
STM32_CLI_UCOS_III.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a84  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  08008c20  08008c20  00018c20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009200  08009200  00020624  2**0
                  CONTENTS
  4 .ARM          00000008  08009200  08009200  00019200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009208  08009208  00020624  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08009208  08009208  00019208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009210  08009210  00019210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000624  20000000  08009214  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000028d0  20000624  08009838  00020624  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002ef4  08009838  00022ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020624  2**0
                  CONTENTS, READONLY
 12 .debug_info   000344c0  00000000  00000000  00020654  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005e2e  00000000  00000000  00054b14  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001442e  00000000  00000000  0005a942  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001018  00000000  00000000  0006ed70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002368  00000000  00000000  0006fd88  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a110  00000000  00000000  000720f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000fd7c  00000000  00000000  0008c200  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00093a62  00000000  00000000  0009bf7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0012f9de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003974  00000000  00000000  0012fa5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000624 	.word	0x20000624
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008c04 	.word	0x08008c04

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000628 	.word	0x20000628
 80001d4:	08008c04 	.word	0x08008c04

080001d8 <CPU_IntDis>:
@              void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80001d8:	b672      	cpsid	i
        BX      LR
 80001da:	4770      	bx	lr

080001dc <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80001dc:	b662      	cpsie	i
        BX      LR
 80001de:	4770      	bx	lr

080001e0 <CPU_SR_Save>:
@                       }
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        MRS     R0, PRIMASK                     @ Set prio int mask to mask all (except faults)
 80001e0:	f3ef 8010 	mrs	r0, PRIMASK
        CPSID   I
 80001e4:	b672      	cpsid	i
        BX      LR
 80001e6:	4770      	bx	lr

080001e8 <CPU_SR_Restore>:

.thumb_func
CPU_SR_Restore:                                  @ See Note #2.
        MSR     PRIMASK, R0
 80001e8:	f380 8810 	msr	PRIMASK, r0
        BX      LR
 80001ec:	4770      	bx	lr

080001ee <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80001ee:	bf30      	wfi
        BX      LR
 80001f0:	4770      	bx	lr

080001f2 <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 80001f2:	bf20      	wfe
        BX      LR
 80001f4:	4770      	bx	lr

080001f6 <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 80001f6:	fab0 f080 	clz	r0, r0
        BX      LR
 80001fa:	4770      	bx	lr

080001fc <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 80001fc:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000200:	fab0 f080 	clz	r0, r0
        BX      LR
 8000204:	4770      	bx	lr

08000206 <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 8000206:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 800020a:	4770      	bx	lr

0800020c <OS_CPU_FP_Reg_Push>:
@              d) Update OSTCBCurPtr->StkPtr;
@********************************************************************************************************

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
OS_CPU_FP_Reg_Push:
    MRS     R1, PSP                                             @ PSP is process stack pointer
 800020c:	f3ef 8109 	mrs	r1, PSP
    CBZ     R1, OS_CPU_FP_nosave                                @ Skip FP register save the first time
 8000210:	b141      	cbz	r1, 8000224 <OS_CPU_FP_nosave>

    VMRS    R1, FPSCR
 8000212:	eef1 1a10 	vmrs	r1, fpscr
    STR R1, [R0, #-4]!
 8000216:	f840 1d04 	str.w	r1, [r0, #-4]!
    VSTMDB  R0!, {S0-S31}
 800021a:	ed20 0a20 	vstmdb	r0!, {s0-s31}
    LDR     R1, =OSTCBCurPtr
 800021e:	493e      	ldr	r1, [pc, #248]	; (8000318 <OS_CPU_PendSVHandler+0x50>)
    LDR     R2, [R1]
 8000220:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 8000222:	6010      	str	r0, [r2, #0]

08000224 <OS_CPU_FP_nosave>:
OS_CPU_FP_nosave:
    BX      LR
 8000224:	4770      	bx	lr

08000226 <OS_CPU_FP_Reg_Pop>:
@              c) Update OSTCBHighRdyPtr->StkPtr pointer of new proces stack;
@********************************************************************************************************

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
OS_CPU_FP_Reg_Pop:
    VLDMIA  R0!, {S0-S31}
 8000226:	ecb0 0a20 	vldmia	r0!, {s0-s31}
    LDMIA   R0!, {R1}
 800022a:	c802      	ldmia	r0!, {r1}
    VMSR    FPSCR, R1
 800022c:	eee1 1a10 	vmsr	fpscr, r1
    LDR     R1, =OSTCBHighRdyPtr
 8000230:	493a      	ldr	r1, [pc, #232]	; (800031c <OS_CPU_PendSVHandler+0x54>)
    LDR     R2, [R1]
 8000232:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 8000234:	6010      	str	r0, [r2, #0]
    BX      LR
 8000236:	4770      	bx	lr

08000238 <OSStartHighRdy>:
@              e) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000238:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 800023a:	f64e 5022 	movw	r0, #60706	; 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 800023e:	f2ce 0000 	movt	r0, #57344	; 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 8000242:	f240 01ff 	movw	r1, #255	; 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 8000246:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 800024a:	7001      	strb	r1, [r0, #0]

    MOV     R0, #0
 800024c:	f04f 0000 	mov.w	r0, #0
    MSR     PSP, R0
 8000250:	f380 8809 	msr	PSP, r0
    BL      OSTaskSwHook                                        @ Call OSTaskSwHook for FPU Pop
 8000254:	f002 fcf6 	bl	8002c44 <OSTaskSwHook>

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000258:	f641 00e8 	movw	r0, #6376	; 0x18e8
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 800025c:	f2c2 0000 	movt	r0, #8192	; 0x2000
    LDR     R1, [R0]
 8000260:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 8000262:	f381 8808 	msr	MSP, r1

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000266:	f642 10f0 	movw	r0, #10736	; 0x29f0
    MOVT    R0, #:upper16:OSPrioCur
 800026a:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800026e:	f642 11e4 	movw	r1, #10724	; 0x29e4
    MOVT    R1, #:upper16:OSPrioHighRdy
 8000272:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 8000276:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000278:	7002      	strb	r2, [r0, #0]

    MOVW    R5, #:lower16:OSTCBCurPtr
 800027a:	f642 25b4 	movw	r5, #10932	; 0x2ab4
    MOVT    R5, #:upper16:OSTCBCurPtr
 800027e:	f2c2 0500 	movt	r5, #8192	; 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 8000282:	f642 21c0 	movw	r1, #10944	; 0x2ac0
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000286:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 800028a:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 800028c:	602a      	str	r2, [r5, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 800028e:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 8000290:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000294:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000298:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 800029c:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 80002a0:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11}                                      @ Restore r4-11 from new process stack
 80002a4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 80002a8:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 80002aa:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 80002ae:	bc06      	pop	{r1, r2}
    CPSIE    I
 80002b0:	b662      	cpsie	i
    BX       R1
 80002b2:	4708      	bx	r1

080002b4 <OSCtxSw>:
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002b4:	481a      	ldr	r0, [pc, #104]	; (8000320 <OS_CPU_PendSVHandler+0x58>)
    LDR     R1, =NVIC_PENDSVSET
 80002b6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 80002ba:	6001      	str	r1, [r0, #0]
    BX      LR
 80002bc:	4770      	bx	lr

080002be <OSIntCtxSw>:
@              be handled when there are no more interrupts active and interrupts are enabled.
@********************************************************************************************************

.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002be:	4818      	ldr	r0, [pc, #96]	; (8000320 <OS_CPU_PendSVHandler+0x58>)
    LDR     R1, =NVIC_PENDSVSET
 80002c0:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 80002c4:	6001      	str	r1, [r0, #0]
    BX      LR
 80002c6:	4770      	bx	lr

080002c8 <OS_CPU_PendSVHandler>:
@              therefore safe to assume that context being switched out was using the process stack (PSP).
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Prevent interruption during context switch
 80002c8:	b672      	cpsid	i
    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002ca:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11}                                       @ Save remaining regs r4-11 on process stack
 80002ce:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->OSTCBStkPtr = SP;
 80002d2:	f642 25b4 	movw	r5, #10932	; 0x2ab4
    MOVT    R5, #:upper16:OSTCBCurPtr
 80002d6:	f2c2 0500 	movt	r5, #8192	; 0x2000
    LDR     R6, [R5]
 80002da:	682e      	ldr	r6, [r5, #0]
    STR     R0, [R6]                                            @ R0 is SP of process being switched out
 80002dc:	6030      	str	r0, [r6, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 80002de:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ OSTaskSwHook();
 80002e0:	f002 fcb0 	bl	8002c44 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002e4:	f642 10f0 	movw	r0, #10736	; 0x29f0
    MOVT    R0, #:upper16:OSPrioCur
 80002e8:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002ec:	f642 11e4 	movw	r1, #10724	; 0x29e4
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002f0:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 80002f4:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002f6:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                      @ OSTCBCurPtr = OSTCBHighRdyPtr;
 80002f8:	f642 21c0 	movw	r1, #10944	; 0x2ac0
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 80002fc:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 8000300:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000302:	602a      	str	r2, [r5, #0]

    ORR     LR, R4, #0xF4                                       @ Ensure exception return uses process stack
 8000304:	f044 0ef4 	orr.w	lr, r4, #244	; 0xf4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 8000308:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11}                                       @ Restore r4-11 from new process stack
 800030a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800030e:	f380 8809 	msr	PSP, r0
    CPSIE   I
 8000312:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 8000314:	4770      	bx	lr
 8000316:	0000      	.short	0x0000
    LDR     R1, =OSTCBCurPtr
 8000318:	20002ab4 	.word	0x20002ab4
    LDR     R1, =OSTCBHighRdyPtr
 800031c:	20002ac0 	.word	0x20002ac0
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 8000320:	e000ed04 	.word	0xe000ed04

08000324 <strlen>:
 8000324:	4603      	mov	r3, r0
 8000326:	f813 2b01 	ldrb.w	r2, [r3], #1
 800032a:	2a00      	cmp	r2, #0
 800032c:	d1fb      	bne.n	8000326 <strlen+0x2>
 800032e:	1a18      	subs	r0, r3, r0
 8000330:	3801      	subs	r0, #1
 8000332:	4770      	bx	lr

08000334 <__aeabi_drsub>:
 8000334:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000338:	e002      	b.n	8000340 <__adddf3>
 800033a:	bf00      	nop

0800033c <__aeabi_dsub>:
 800033c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000340 <__adddf3>:
 8000340:	b530      	push	{r4, r5, lr}
 8000342:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000346:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800034a:	ea94 0f05 	teq	r4, r5
 800034e:	bf08      	it	eq
 8000350:	ea90 0f02 	teqeq	r0, r2
 8000354:	bf1f      	itttt	ne
 8000356:	ea54 0c00 	orrsne.w	ip, r4, r0
 800035a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000362:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000366:	f000 80e2 	beq.w	800052e <__adddf3+0x1ee>
 800036a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000372:	bfb8      	it	lt
 8000374:	426d      	neglt	r5, r5
 8000376:	dd0c      	ble.n	8000392 <__adddf3+0x52>
 8000378:	442c      	add	r4, r5
 800037a:	ea80 0202 	eor.w	r2, r0, r2
 800037e:	ea81 0303 	eor.w	r3, r1, r3
 8000382:	ea82 0000 	eor.w	r0, r2, r0
 8000386:	ea83 0101 	eor.w	r1, r3, r1
 800038a:	ea80 0202 	eor.w	r2, r0, r2
 800038e:	ea81 0303 	eor.w	r3, r1, r3
 8000392:	2d36      	cmp	r5, #54	; 0x36
 8000394:	bf88      	it	hi
 8000396:	bd30      	pophi	{r4, r5, pc}
 8000398:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800039c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x70>
 80003aa:	4240      	negs	r0, r0
 80003ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80003b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003bc:	d002      	beq.n	80003c4 <__adddf3+0x84>
 80003be:	4252      	negs	r2, r2
 80003c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c4:	ea94 0f05 	teq	r4, r5
 80003c8:	f000 80a7 	beq.w	800051a <__adddf3+0x1da>
 80003cc:	f1a4 0401 	sub.w	r4, r4, #1
 80003d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d4:	db0d      	blt.n	80003f2 <__adddf3+0xb2>
 80003d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003da:	fa22 f205 	lsr.w	r2, r2, r5
 80003de:	1880      	adds	r0, r0, r2
 80003e0:	f141 0100 	adc.w	r1, r1, #0
 80003e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e8:	1880      	adds	r0, r0, r2
 80003ea:	fa43 f305 	asr.w	r3, r3, r5
 80003ee:	4159      	adcs	r1, r3
 80003f0:	e00e      	b.n	8000410 <__adddf3+0xd0>
 80003f2:	f1a5 0520 	sub.w	r5, r5, #32
 80003f6:	f10e 0e20 	add.w	lr, lr, #32
 80003fa:	2a01      	cmp	r2, #1
 80003fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000400:	bf28      	it	cs
 8000402:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000406:	fa43 f305 	asr.w	r3, r3, r5
 800040a:	18c0      	adds	r0, r0, r3
 800040c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	d507      	bpl.n	8000426 <__adddf3+0xe6>
 8000416:	f04f 0e00 	mov.w	lr, #0
 800041a:	f1dc 0c00 	rsbs	ip, ip, #0
 800041e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000422:	eb6e 0101 	sbc.w	r1, lr, r1
 8000426:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800042a:	d31b      	bcc.n	8000464 <__adddf3+0x124>
 800042c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000430:	d30c      	bcc.n	800044c <__adddf3+0x10c>
 8000432:	0849      	lsrs	r1, r1, #1
 8000434:	ea5f 0030 	movs.w	r0, r0, rrx
 8000438:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800043c:	f104 0401 	add.w	r4, r4, #1
 8000440:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000444:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000448:	f080 809a 	bcs.w	8000580 <__adddf3+0x240>
 800044c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000450:	bf08      	it	eq
 8000452:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000456:	f150 0000 	adcs.w	r0, r0, #0
 800045a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045e:	ea41 0105 	orr.w	r1, r1, r5
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000468:	4140      	adcs	r0, r0
 800046a:	eb41 0101 	adc.w	r1, r1, r1
 800046e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000472:	f1a4 0401 	sub.w	r4, r4, #1
 8000476:	d1e9      	bne.n	800044c <__adddf3+0x10c>
 8000478:	f091 0f00 	teq	r1, #0
 800047c:	bf04      	itt	eq
 800047e:	4601      	moveq	r1, r0
 8000480:	2000      	moveq	r0, #0
 8000482:	fab1 f381 	clz	r3, r1
 8000486:	bf08      	it	eq
 8000488:	3320      	addeq	r3, #32
 800048a:	f1a3 030b 	sub.w	r3, r3, #11
 800048e:	f1b3 0220 	subs.w	r2, r3, #32
 8000492:	da0c      	bge.n	80004ae <__adddf3+0x16e>
 8000494:	320c      	adds	r2, #12
 8000496:	dd08      	ble.n	80004aa <__adddf3+0x16a>
 8000498:	f102 0c14 	add.w	ip, r2, #20
 800049c:	f1c2 020c 	rsb	r2, r2, #12
 80004a0:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a4:	fa21 f102 	lsr.w	r1, r1, r2
 80004a8:	e00c      	b.n	80004c4 <__adddf3+0x184>
 80004aa:	f102 0214 	add.w	r2, r2, #20
 80004ae:	bfd8      	it	le
 80004b0:	f1c2 0c20 	rsble	ip, r2, #32
 80004b4:	fa01 f102 	lsl.w	r1, r1, r2
 80004b8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004bc:	bfdc      	itt	le
 80004be:	ea41 010c 	orrle.w	r1, r1, ip
 80004c2:	4090      	lslle	r0, r2
 80004c4:	1ae4      	subs	r4, r4, r3
 80004c6:	bfa2      	ittt	ge
 80004c8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004cc:	4329      	orrge	r1, r5
 80004ce:	bd30      	popge	{r4, r5, pc}
 80004d0:	ea6f 0404 	mvn.w	r4, r4
 80004d4:	3c1f      	subs	r4, #31
 80004d6:	da1c      	bge.n	8000512 <__adddf3+0x1d2>
 80004d8:	340c      	adds	r4, #12
 80004da:	dc0e      	bgt.n	80004fa <__adddf3+0x1ba>
 80004dc:	f104 0414 	add.w	r4, r4, #20
 80004e0:	f1c4 0220 	rsb	r2, r4, #32
 80004e4:	fa20 f004 	lsr.w	r0, r0, r4
 80004e8:	fa01 f302 	lsl.w	r3, r1, r2
 80004ec:	ea40 0003 	orr.w	r0, r0, r3
 80004f0:	fa21 f304 	lsr.w	r3, r1, r4
 80004f4:	ea45 0103 	orr.w	r1, r5, r3
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	f1c4 040c 	rsb	r4, r4, #12
 80004fe:	f1c4 0220 	rsb	r2, r4, #32
 8000502:	fa20 f002 	lsr.w	r0, r0, r2
 8000506:	fa01 f304 	lsl.w	r3, r1, r4
 800050a:	ea40 0003 	orr.w	r0, r0, r3
 800050e:	4629      	mov	r1, r5
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	fa21 f004 	lsr.w	r0, r1, r4
 8000516:	4629      	mov	r1, r5
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	f094 0f00 	teq	r4, #0
 800051e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000522:	bf06      	itte	eq
 8000524:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000528:	3401      	addeq	r4, #1
 800052a:	3d01      	subne	r5, #1
 800052c:	e74e      	b.n	80003cc <__adddf3+0x8c>
 800052e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000532:	bf18      	it	ne
 8000534:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000538:	d029      	beq.n	800058e <__adddf3+0x24e>
 800053a:	ea94 0f05 	teq	r4, r5
 800053e:	bf08      	it	eq
 8000540:	ea90 0f02 	teqeq	r0, r2
 8000544:	d005      	beq.n	8000552 <__adddf3+0x212>
 8000546:	ea54 0c00 	orrs.w	ip, r4, r0
 800054a:	bf04      	itt	eq
 800054c:	4619      	moveq	r1, r3
 800054e:	4610      	moveq	r0, r2
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	ea91 0f03 	teq	r1, r3
 8000556:	bf1e      	ittt	ne
 8000558:	2100      	movne	r1, #0
 800055a:	2000      	movne	r0, #0
 800055c:	bd30      	popne	{r4, r5, pc}
 800055e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000562:	d105      	bne.n	8000570 <__adddf3+0x230>
 8000564:	0040      	lsls	r0, r0, #1
 8000566:	4149      	adcs	r1, r1
 8000568:	bf28      	it	cs
 800056a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800056e:	bd30      	pop	{r4, r5, pc}
 8000570:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000574:	bf3c      	itt	cc
 8000576:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800057a:	bd30      	popcc	{r4, r5, pc}
 800057c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000580:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000584:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000588:	f04f 0000 	mov.w	r0, #0
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000592:	bf1a      	itte	ne
 8000594:	4619      	movne	r1, r3
 8000596:	4610      	movne	r0, r2
 8000598:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800059c:	bf1c      	itt	ne
 800059e:	460b      	movne	r3, r1
 80005a0:	4602      	movne	r2, r0
 80005a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a6:	bf06      	itte	eq
 80005a8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005ac:	ea91 0f03 	teqeq	r1, r3
 80005b0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80005b4:	bd30      	pop	{r4, r5, pc}
 80005b6:	bf00      	nop

080005b8 <__aeabi_ui2d>:
 80005b8:	f090 0f00 	teq	r0, #0
 80005bc:	bf04      	itt	eq
 80005be:	2100      	moveq	r1, #0
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005cc:	f04f 0500 	mov.w	r5, #0
 80005d0:	f04f 0100 	mov.w	r1, #0
 80005d4:	e750      	b.n	8000478 <__adddf3+0x138>
 80005d6:	bf00      	nop

080005d8 <__aeabi_i2d>:
 80005d8:	f090 0f00 	teq	r0, #0
 80005dc:	bf04      	itt	eq
 80005de:	2100      	moveq	r1, #0
 80005e0:	4770      	bxeq	lr
 80005e2:	b530      	push	{r4, r5, lr}
 80005e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005f0:	bf48      	it	mi
 80005f2:	4240      	negmi	r0, r0
 80005f4:	f04f 0100 	mov.w	r1, #0
 80005f8:	e73e      	b.n	8000478 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_f2d>:
 80005fc:	0042      	lsls	r2, r0, #1
 80005fe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000602:	ea4f 0131 	mov.w	r1, r1, rrx
 8000606:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800060a:	bf1f      	itttt	ne
 800060c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000610:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000614:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000618:	4770      	bxne	lr
 800061a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800061e:	bf08      	it	eq
 8000620:	4770      	bxeq	lr
 8000622:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000626:	bf04      	itt	eq
 8000628:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000634:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000638:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800063c:	e71c      	b.n	8000478 <__adddf3+0x138>
 800063e:	bf00      	nop

08000640 <__aeabi_ul2d>:
 8000640:	ea50 0201 	orrs.w	r2, r0, r1
 8000644:	bf08      	it	eq
 8000646:	4770      	bxeq	lr
 8000648:	b530      	push	{r4, r5, lr}
 800064a:	f04f 0500 	mov.w	r5, #0
 800064e:	e00a      	b.n	8000666 <__aeabi_l2d+0x16>

08000650 <__aeabi_l2d>:
 8000650:	ea50 0201 	orrs.w	r2, r0, r1
 8000654:	bf08      	it	eq
 8000656:	4770      	bxeq	lr
 8000658:	b530      	push	{r4, r5, lr}
 800065a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800065e:	d502      	bpl.n	8000666 <__aeabi_l2d+0x16>
 8000660:	4240      	negs	r0, r0
 8000662:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000666:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800066a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800066e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000672:	f43f aed8 	beq.w	8000426 <__adddf3+0xe6>
 8000676:	f04f 0203 	mov.w	r2, #3
 800067a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067e:	bf18      	it	ne
 8000680:	3203      	addne	r2, #3
 8000682:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000686:	bf18      	it	ne
 8000688:	3203      	addne	r2, #3
 800068a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068e:	f1c2 0320 	rsb	r3, r2, #32
 8000692:	fa00 fc03 	lsl.w	ip, r0, r3
 8000696:	fa20 f002 	lsr.w	r0, r0, r2
 800069a:	fa01 fe03 	lsl.w	lr, r1, r3
 800069e:	ea40 000e 	orr.w	r0, r0, lr
 80006a2:	fa21 f102 	lsr.w	r1, r1, r2
 80006a6:	4414      	add	r4, r2
 80006a8:	e6bd      	b.n	8000426 <__adddf3+0xe6>
 80006aa:	bf00      	nop

080006ac <__aeabi_dmul>:
 80006ac:	b570      	push	{r4, r5, r6, lr}
 80006ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80006b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006ba:	bf1d      	ittte	ne
 80006bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006c0:	ea94 0f0c 	teqne	r4, ip
 80006c4:	ea95 0f0c 	teqne	r5, ip
 80006c8:	f000 f8de 	bleq	8000888 <__aeabi_dmul+0x1dc>
 80006cc:	442c      	add	r4, r5
 80006ce:	ea81 0603 	eor.w	r6, r1, r3
 80006d2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006da:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006de:	bf18      	it	ne
 80006e0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006ec:	d038      	beq.n	8000760 <__aeabi_dmul+0xb4>
 80006ee:	fba0 ce02 	umull	ip, lr, r0, r2
 80006f2:	f04f 0500 	mov.w	r5, #0
 80006f6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006fa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006fe:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000702:	f04f 0600 	mov.w	r6, #0
 8000706:	fbe1 5603 	umlal	r5, r6, r1, r3
 800070a:	f09c 0f00 	teq	ip, #0
 800070e:	bf18      	it	ne
 8000710:	f04e 0e01 	orrne.w	lr, lr, #1
 8000714:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000718:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800071c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000720:	d204      	bcs.n	800072c <__aeabi_dmul+0x80>
 8000722:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000726:	416d      	adcs	r5, r5
 8000728:	eb46 0606 	adc.w	r6, r6, r6
 800072c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000730:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000734:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000738:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800073c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000740:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000744:	bf88      	it	hi
 8000746:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800074a:	d81e      	bhi.n	800078a <__aeabi_dmul+0xde>
 800074c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000750:	bf08      	it	eq
 8000752:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000756:	f150 0000 	adcs.w	r0, r0, #0
 800075a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075e:	bd70      	pop	{r4, r5, r6, pc}
 8000760:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000764:	ea46 0101 	orr.w	r1, r6, r1
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000774:	bfc2      	ittt	gt
 8000776:	ebd4 050c 	rsbsgt	r5, r4, ip
 800077a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077e:	bd70      	popgt	{r4, r5, r6, pc}
 8000780:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000784:	f04f 0e00 	mov.w	lr, #0
 8000788:	3c01      	subs	r4, #1
 800078a:	f300 80ab 	bgt.w	80008e4 <__aeabi_dmul+0x238>
 800078e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000792:	bfde      	ittt	le
 8000794:	2000      	movle	r0, #0
 8000796:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800079a:	bd70      	pople	{r4, r5, r6, pc}
 800079c:	f1c4 0400 	rsb	r4, r4, #0
 80007a0:	3c20      	subs	r4, #32
 80007a2:	da35      	bge.n	8000810 <__aeabi_dmul+0x164>
 80007a4:	340c      	adds	r4, #12
 80007a6:	dc1b      	bgt.n	80007e0 <__aeabi_dmul+0x134>
 80007a8:	f104 0414 	add.w	r4, r4, #20
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f305 	lsl.w	r3, r0, r5
 80007b4:	fa20 f004 	lsr.w	r0, r0, r4
 80007b8:	fa01 f205 	lsl.w	r2, r1, r5
 80007bc:	ea40 0002 	orr.w	r0, r0, r2
 80007c0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80007c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007cc:	fa21 f604 	lsr.w	r6, r1, r4
 80007d0:	eb42 0106 	adc.w	r1, r2, r6
 80007d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d8:	bf08      	it	eq
 80007da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007de:	bd70      	pop	{r4, r5, r6, pc}
 80007e0:	f1c4 040c 	rsb	r4, r4, #12
 80007e4:	f1c4 0520 	rsb	r5, r4, #32
 80007e8:	fa00 f304 	lsl.w	r3, r0, r4
 80007ec:	fa20 f005 	lsr.w	r0, r0, r5
 80007f0:	fa01 f204 	lsl.w	r2, r1, r4
 80007f4:	ea40 0002 	orr.w	r0, r0, r2
 80007f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000800:	f141 0100 	adc.w	r1, r1, #0
 8000804:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000808:	bf08      	it	eq
 800080a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080e:	bd70      	pop	{r4, r5, r6, pc}
 8000810:	f1c4 0520 	rsb	r5, r4, #32
 8000814:	fa00 f205 	lsl.w	r2, r0, r5
 8000818:	ea4e 0e02 	orr.w	lr, lr, r2
 800081c:	fa20 f304 	lsr.w	r3, r0, r4
 8000820:	fa01 f205 	lsl.w	r2, r1, r5
 8000824:	ea43 0302 	orr.w	r3, r3, r2
 8000828:	fa21 f004 	lsr.w	r0, r1, r4
 800082c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000830:	fa21 f204 	lsr.w	r2, r1, r4
 8000834:	ea20 0002 	bic.w	r0, r0, r2
 8000838:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800083c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000840:	bf08      	it	eq
 8000842:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000846:	bd70      	pop	{r4, r5, r6, pc}
 8000848:	f094 0f00 	teq	r4, #0
 800084c:	d10f      	bne.n	800086e <__aeabi_dmul+0x1c2>
 800084e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000852:	0040      	lsls	r0, r0, #1
 8000854:	eb41 0101 	adc.w	r1, r1, r1
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	bf08      	it	eq
 800085e:	3c01      	subeq	r4, #1
 8000860:	d0f7      	beq.n	8000852 <__aeabi_dmul+0x1a6>
 8000862:	ea41 0106 	orr.w	r1, r1, r6
 8000866:	f095 0f00 	teq	r5, #0
 800086a:	bf18      	it	ne
 800086c:	4770      	bxne	lr
 800086e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000872:	0052      	lsls	r2, r2, #1
 8000874:	eb43 0303 	adc.w	r3, r3, r3
 8000878:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800087c:	bf08      	it	eq
 800087e:	3d01      	subeq	r5, #1
 8000880:	d0f7      	beq.n	8000872 <__aeabi_dmul+0x1c6>
 8000882:	ea43 0306 	orr.w	r3, r3, r6
 8000886:	4770      	bx	lr
 8000888:	ea94 0f0c 	teq	r4, ip
 800088c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000890:	bf18      	it	ne
 8000892:	ea95 0f0c 	teqne	r5, ip
 8000896:	d00c      	beq.n	80008b2 <__aeabi_dmul+0x206>
 8000898:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800089c:	bf18      	it	ne
 800089e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008a2:	d1d1      	bne.n	8000848 <__aeabi_dmul+0x19c>
 80008a4:	ea81 0103 	eor.w	r1, r1, r3
 80008a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b6:	bf06      	itte	eq
 80008b8:	4610      	moveq	r0, r2
 80008ba:	4619      	moveq	r1, r3
 80008bc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008c0:	d019      	beq.n	80008f6 <__aeabi_dmul+0x24a>
 80008c2:	ea94 0f0c 	teq	r4, ip
 80008c6:	d102      	bne.n	80008ce <__aeabi_dmul+0x222>
 80008c8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008cc:	d113      	bne.n	80008f6 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	d105      	bne.n	80008e0 <__aeabi_dmul+0x234>
 80008d4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d8:	bf1c      	itt	ne
 80008da:	4610      	movne	r0, r2
 80008dc:	4619      	movne	r1, r3
 80008de:	d10a      	bne.n	80008f6 <__aeabi_dmul+0x24a>
 80008e0:	ea81 0103 	eor.w	r1, r1, r3
 80008e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008e8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008ec:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008f0:	f04f 0000 	mov.w	r0, #0
 80008f4:	bd70      	pop	{r4, r5, r6, pc}
 80008f6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008fa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008fe:	bd70      	pop	{r4, r5, r6, pc}

08000900 <__aeabi_ddiv>:
 8000900:	b570      	push	{r4, r5, r6, lr}
 8000902:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000906:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800090a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090e:	bf1d      	ittte	ne
 8000910:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000914:	ea94 0f0c 	teqne	r4, ip
 8000918:	ea95 0f0c 	teqne	r5, ip
 800091c:	f000 f8a7 	bleq	8000a6e <__aeabi_ddiv+0x16e>
 8000920:	eba4 0405 	sub.w	r4, r4, r5
 8000924:	ea81 0e03 	eor.w	lr, r1, r3
 8000928:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800092c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000930:	f000 8088 	beq.w	8000a44 <__aeabi_ddiv+0x144>
 8000934:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000938:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800093c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000940:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000944:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000948:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800094c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000950:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000954:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000958:	429d      	cmp	r5, r3
 800095a:	bf08      	it	eq
 800095c:	4296      	cmpeq	r6, r2
 800095e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000962:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000966:	d202      	bcs.n	800096e <__aeabi_ddiv+0x6e>
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	1ab6      	subs	r6, r6, r2
 8000970:	eb65 0503 	sbc.w	r5, r5, r3
 8000974:	085b      	lsrs	r3, r3, #1
 8000976:	ea4f 0232 	mov.w	r2, r2, rrx
 800097a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800097e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000982:	ebb6 0e02 	subs.w	lr, r6, r2
 8000986:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098a:	bf22      	ittt	cs
 800098c:	1ab6      	subcs	r6, r6, r2
 800098e:	4675      	movcs	r5, lr
 8000990:	ea40 000c 	orrcs.w	r0, r0, ip
 8000994:	085b      	lsrs	r3, r3, #1
 8000996:	ea4f 0232 	mov.w	r2, r2, rrx
 800099a:	ebb6 0e02 	subs.w	lr, r6, r2
 800099e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a2:	bf22      	ittt	cs
 80009a4:	1ab6      	subcs	r6, r6, r2
 80009a6:	4675      	movcs	r5, lr
 80009a8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009ac:	085b      	lsrs	r3, r3, #1
 80009ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ba:	bf22      	ittt	cs
 80009bc:	1ab6      	subcs	r6, r6, r2
 80009be:	4675      	movcs	r5, lr
 80009c0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c4:	085b      	lsrs	r3, r3, #1
 80009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d2:	bf22      	ittt	cs
 80009d4:	1ab6      	subcs	r6, r6, r2
 80009d6:	4675      	movcs	r5, lr
 80009d8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009dc:	ea55 0e06 	orrs.w	lr, r5, r6
 80009e0:	d018      	beq.n	8000a14 <__aeabi_ddiv+0x114>
 80009e2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009ea:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ee:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009f2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009fa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fe:	d1c0      	bne.n	8000982 <__aeabi_ddiv+0x82>
 8000a00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a04:	d10b      	bne.n	8000a1e <__aeabi_ddiv+0x11e>
 8000a06:	ea41 0100 	orr.w	r1, r1, r0
 8000a0a:	f04f 0000 	mov.w	r0, #0
 8000a0e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a12:	e7b6      	b.n	8000982 <__aeabi_ddiv+0x82>
 8000a14:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a18:	bf04      	itt	eq
 8000a1a:	4301      	orreq	r1, r0
 8000a1c:	2000      	moveq	r0, #0
 8000a1e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a22:	bf88      	it	hi
 8000a24:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a28:	f63f aeaf 	bhi.w	800078a <__aeabi_dmul+0xde>
 8000a2c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a30:	bf04      	itt	eq
 8000a32:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a3a:	f150 0000 	adcs.w	r0, r0, #0
 8000a3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a42:	bd70      	pop	{r4, r5, r6, pc}
 8000a44:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a48:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a4c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a50:	bfc2      	ittt	gt
 8000a52:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a56:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a5a:	bd70      	popgt	{r4, r5, r6, pc}
 8000a5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a60:	f04f 0e00 	mov.w	lr, #0
 8000a64:	3c01      	subs	r4, #1
 8000a66:	e690      	b.n	800078a <__aeabi_dmul+0xde>
 8000a68:	ea45 0e06 	orr.w	lr, r5, r6
 8000a6c:	e68d      	b.n	800078a <__aeabi_dmul+0xde>
 8000a6e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a72:	ea94 0f0c 	teq	r4, ip
 8000a76:	bf08      	it	eq
 8000a78:	ea95 0f0c 	teqeq	r5, ip
 8000a7c:	f43f af3b 	beq.w	80008f6 <__aeabi_dmul+0x24a>
 8000a80:	ea94 0f0c 	teq	r4, ip
 8000a84:	d10a      	bne.n	8000a9c <__aeabi_ddiv+0x19c>
 8000a86:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a8a:	f47f af34 	bne.w	80008f6 <__aeabi_dmul+0x24a>
 8000a8e:	ea95 0f0c 	teq	r5, ip
 8000a92:	f47f af25 	bne.w	80008e0 <__aeabi_dmul+0x234>
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	e72c      	b.n	80008f6 <__aeabi_dmul+0x24a>
 8000a9c:	ea95 0f0c 	teq	r5, ip
 8000aa0:	d106      	bne.n	8000ab0 <__aeabi_ddiv+0x1b0>
 8000aa2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa6:	f43f aefd 	beq.w	80008a4 <__aeabi_dmul+0x1f8>
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4619      	mov	r1, r3
 8000aae:	e722      	b.n	80008f6 <__aeabi_dmul+0x24a>
 8000ab0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab4:	bf18      	it	ne
 8000ab6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aba:	f47f aec5 	bne.w	8000848 <__aeabi_dmul+0x19c>
 8000abe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000ac2:	f47f af0d 	bne.w	80008e0 <__aeabi_dmul+0x234>
 8000ac6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000aca:	f47f aeeb 	bne.w	80008a4 <__aeabi_dmul+0x1f8>
 8000ace:	e712      	b.n	80008f6 <__aeabi_dmul+0x24a>

08000ad0 <__gedf2>:
 8000ad0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000ad4:	e006      	b.n	8000ae4 <__cmpdf2+0x4>
 8000ad6:	bf00      	nop

08000ad8 <__ledf2>:
 8000ad8:	f04f 0c01 	mov.w	ip, #1
 8000adc:	e002      	b.n	8000ae4 <__cmpdf2+0x4>
 8000ade:	bf00      	nop

08000ae0 <__cmpdf2>:
 8000ae0:	f04f 0c01 	mov.w	ip, #1
 8000ae4:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	bf18      	it	ne
 8000af6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000afa:	d01b      	beq.n	8000b34 <__cmpdf2+0x54>
 8000afc:	b001      	add	sp, #4
 8000afe:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b02:	bf0c      	ite	eq
 8000b04:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b08:	ea91 0f03 	teqne	r1, r3
 8000b0c:	bf02      	ittt	eq
 8000b0e:	ea90 0f02 	teqeq	r0, r2
 8000b12:	2000      	moveq	r0, #0
 8000b14:	4770      	bxeq	lr
 8000b16:	f110 0f00 	cmn.w	r0, #0
 8000b1a:	ea91 0f03 	teq	r1, r3
 8000b1e:	bf58      	it	pl
 8000b20:	4299      	cmppl	r1, r3
 8000b22:	bf08      	it	eq
 8000b24:	4290      	cmpeq	r0, r2
 8000b26:	bf2c      	ite	cs
 8000b28:	17d8      	asrcs	r0, r3, #31
 8000b2a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2e:	f040 0001 	orr.w	r0, r0, #1
 8000b32:	4770      	bx	lr
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__cmpdf2+0x64>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d107      	bne.n	8000b54 <__cmpdf2+0x74>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d1d6      	bne.n	8000afc <__cmpdf2+0x1c>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d0d3      	beq.n	8000afc <__cmpdf2+0x1c>
 8000b54:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <__aeabi_cdrcmple>:
 8000b5c:	4684      	mov	ip, r0
 8000b5e:	4610      	mov	r0, r2
 8000b60:	4662      	mov	r2, ip
 8000b62:	468c      	mov	ip, r1
 8000b64:	4619      	mov	r1, r3
 8000b66:	4663      	mov	r3, ip
 8000b68:	e000      	b.n	8000b6c <__aeabi_cdcmpeq>
 8000b6a:	bf00      	nop

08000b6c <__aeabi_cdcmpeq>:
 8000b6c:	b501      	push	{r0, lr}
 8000b6e:	f7ff ffb7 	bl	8000ae0 <__cmpdf2>
 8000b72:	2800      	cmp	r0, #0
 8000b74:	bf48      	it	mi
 8000b76:	f110 0f00 	cmnmi.w	r0, #0
 8000b7a:	bd01      	pop	{r0, pc}

08000b7c <__aeabi_dcmpeq>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff fff4 	bl	8000b6c <__aeabi_cdcmpeq>
 8000b84:	bf0c      	ite	eq
 8000b86:	2001      	moveq	r0, #1
 8000b88:	2000      	movne	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmplt>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffea 	bl	8000b6c <__aeabi_cdcmpeq>
 8000b98:	bf34      	ite	cc
 8000b9a:	2001      	movcc	r0, #1
 8000b9c:	2000      	movcs	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmple>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffe0 	bl	8000b6c <__aeabi_cdcmpeq>
 8000bac:	bf94      	ite	ls
 8000bae:	2001      	movls	r0, #1
 8000bb0:	2000      	movhi	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_dcmpge>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffce 	bl	8000b5c <__aeabi_cdrcmple>
 8000bc0:	bf94      	ite	ls
 8000bc2:	2001      	movls	r0, #1
 8000bc4:	2000      	movhi	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmpgt>:
 8000bcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd0:	f7ff ffc4 	bl	8000b5c <__aeabi_cdrcmple>
 8000bd4:	bf34      	ite	cc
 8000bd6:	2001      	movcc	r0, #1
 8000bd8:	2000      	movcs	r0, #0
 8000bda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bde:	bf00      	nop

08000be0 <__aeabi_dcmpun>:
 8000be0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be8:	d102      	bne.n	8000bf0 <__aeabi_dcmpun+0x10>
 8000bea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bee:	d10a      	bne.n	8000c06 <__aeabi_dcmpun+0x26>
 8000bf0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf8:	d102      	bne.n	8000c00 <__aeabi_dcmpun+0x20>
 8000bfa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfe:	d102      	bne.n	8000c06 <__aeabi_dcmpun+0x26>
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	f04f 0001 	mov.w	r0, #1
 8000c0a:	4770      	bx	lr

08000c0c <__aeabi_d2iz>:
 8000c0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c14:	d215      	bcs.n	8000c42 <__aeabi_d2iz+0x36>
 8000c16:	d511      	bpl.n	8000c3c <__aeabi_d2iz+0x30>
 8000c18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c20:	d912      	bls.n	8000c48 <__aeabi_d2iz+0x3c>
 8000c22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c32:	fa23 f002 	lsr.w	r0, r3, r2
 8000c36:	bf18      	it	ne
 8000c38:	4240      	negne	r0, r0
 8000c3a:	4770      	bx	lr
 8000c3c:	f04f 0000 	mov.w	r0, #0
 8000c40:	4770      	bx	lr
 8000c42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c46:	d105      	bne.n	8000c54 <__aeabi_d2iz+0x48>
 8000c48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c52:	4770      	bx	lr
 8000c54:	f04f 0000 	mov.w	r0, #0
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_d2uiz>:
 8000c5c:	004a      	lsls	r2, r1, #1
 8000c5e:	d211      	bcs.n	8000c84 <__aeabi_d2uiz+0x28>
 8000c60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c64:	d211      	bcs.n	8000c8a <__aeabi_d2uiz+0x2e>
 8000c66:	d50d      	bpl.n	8000c84 <__aeabi_d2uiz+0x28>
 8000c68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c70:	d40e      	bmi.n	8000c90 <__aeabi_d2uiz+0x34>
 8000c72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	4770      	bx	lr
 8000c84:	f04f 0000 	mov.w	r0, #0
 8000c88:	4770      	bx	lr
 8000c8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c8e:	d102      	bne.n	8000c96 <__aeabi_d2uiz+0x3a>
 8000c90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c94:	4770      	bx	lr
 8000c96:	f04f 0000 	mov.w	r0, #0
 8000c9a:	4770      	bx	lr

08000c9c <__aeabi_uldivmod>:
 8000c9c:	b953      	cbnz	r3, 8000cb4 <__aeabi_uldivmod+0x18>
 8000c9e:	b94a      	cbnz	r2, 8000cb4 <__aeabi_uldivmod+0x18>
 8000ca0:	2900      	cmp	r1, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	2800      	cmpeq	r0, #0
 8000ca6:	bf1c      	itt	ne
 8000ca8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000cac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000cb0:	f000 b972 	b.w	8000f98 <__aeabi_idiv0>
 8000cb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cbc:	f000 f806 	bl	8000ccc <__udivmoddi4>
 8000cc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc8:	b004      	add	sp, #16
 8000cca:	4770      	bx	lr

08000ccc <__udivmoddi4>:
 8000ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd0:	9e08      	ldr	r6, [sp, #32]
 8000cd2:	4604      	mov	r4, r0
 8000cd4:	4688      	mov	r8, r1
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d14b      	bne.n	8000d72 <__udivmoddi4+0xa6>
 8000cda:	428a      	cmp	r2, r1
 8000cdc:	4615      	mov	r5, r2
 8000cde:	d967      	bls.n	8000db0 <__udivmoddi4+0xe4>
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	b14a      	cbz	r2, 8000cfa <__udivmoddi4+0x2e>
 8000ce6:	f1c2 0720 	rsb	r7, r2, #32
 8000cea:	fa01 f302 	lsl.w	r3, r1, r2
 8000cee:	fa20 f707 	lsr.w	r7, r0, r7
 8000cf2:	4095      	lsls	r5, r2
 8000cf4:	ea47 0803 	orr.w	r8, r7, r3
 8000cf8:	4094      	lsls	r4, r2
 8000cfa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfe:	0c23      	lsrs	r3, r4, #16
 8000d00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d04:	fa1f fc85 	uxth.w	ip, r5
 8000d08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d10:	fb07 f10c 	mul.w	r1, r7, ip
 8000d14:	4299      	cmp	r1, r3
 8000d16:	d909      	bls.n	8000d2c <__udivmoddi4+0x60>
 8000d18:	18eb      	adds	r3, r5, r3
 8000d1a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d1e:	f080 811b 	bcs.w	8000f58 <__udivmoddi4+0x28c>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 8118 	bls.w	8000f58 <__udivmoddi4+0x28c>
 8000d28:	3f02      	subs	r7, #2
 8000d2a:	442b      	add	r3, r5
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d40:	45a4      	cmp	ip, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x8c>
 8000d44:	192c      	adds	r4, r5, r4
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 8107 	bcs.w	8000f5c <__udivmoddi4+0x290>
 8000d4e:	45a4      	cmp	ip, r4
 8000d50:	f240 8104 	bls.w	8000f5c <__udivmoddi4+0x290>
 8000d54:	3802      	subs	r0, #2
 8000d56:	442c      	add	r4, r5
 8000d58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d5c:	eba4 040c 	sub.w	r4, r4, ip
 8000d60:	2700      	movs	r7, #0
 8000d62:	b11e      	cbz	r6, 8000d6c <__udivmoddi4+0xa0>
 8000d64:	40d4      	lsrs	r4, r2
 8000d66:	2300      	movs	r3, #0
 8000d68:	e9c6 4300 	strd	r4, r3, [r6]
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d909      	bls.n	8000d8a <__udivmoddi4+0xbe>
 8000d76:	2e00      	cmp	r6, #0
 8000d78:	f000 80eb 	beq.w	8000f52 <__udivmoddi4+0x286>
 8000d7c:	2700      	movs	r7, #0
 8000d7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d82:	4638      	mov	r0, r7
 8000d84:	4639      	mov	r1, r7
 8000d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8a:	fab3 f783 	clz	r7, r3
 8000d8e:	2f00      	cmp	r7, #0
 8000d90:	d147      	bne.n	8000e22 <__udivmoddi4+0x156>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xd0>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80fa 	bhi.w	8000f90 <__udivmoddi4+0x2c4>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	4698      	mov	r8, r3
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d0e0      	beq.n	8000d6c <__udivmoddi4+0xa0>
 8000daa:	e9c6 4800 	strd	r4, r8, [r6]
 8000dae:	e7dd      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000db0:	b902      	cbnz	r2, 8000db4 <__udivmoddi4+0xe8>
 8000db2:	deff      	udf	#255	; 0xff
 8000db4:	fab2 f282 	clz	r2, r2
 8000db8:	2a00      	cmp	r2, #0
 8000dba:	f040 808f 	bne.w	8000edc <__udivmoddi4+0x210>
 8000dbe:	1b49      	subs	r1, r1, r5
 8000dc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc4:	fa1f f885 	uxth.w	r8, r5
 8000dc8:	2701      	movs	r7, #1
 8000dca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000ddc:	4299      	cmp	r1, r3
 8000dde:	d907      	bls.n	8000df0 <__udivmoddi4+0x124>
 8000de0:	18eb      	adds	r3, r5, r3
 8000de2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000de6:	d202      	bcs.n	8000dee <__udivmoddi4+0x122>
 8000de8:	4299      	cmp	r1, r3
 8000dea:	f200 80cd 	bhi.w	8000f88 <__udivmoddi4+0x2bc>
 8000dee:	4684      	mov	ip, r0
 8000df0:	1a59      	subs	r1, r3, r1
 8000df2:	b2a3      	uxth	r3, r4
 8000df4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e00:	fb08 f800 	mul.w	r8, r8, r0
 8000e04:	45a0      	cmp	r8, r4
 8000e06:	d907      	bls.n	8000e18 <__udivmoddi4+0x14c>
 8000e08:	192c      	adds	r4, r5, r4
 8000e0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e0e:	d202      	bcs.n	8000e16 <__udivmoddi4+0x14a>
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	f200 80b6 	bhi.w	8000f82 <__udivmoddi4+0x2b6>
 8000e16:	4618      	mov	r0, r3
 8000e18:	eba4 0408 	sub.w	r4, r4, r8
 8000e1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e20:	e79f      	b.n	8000d62 <__udivmoddi4+0x96>
 8000e22:	f1c7 0c20 	rsb	ip, r7, #32
 8000e26:	40bb      	lsls	r3, r7
 8000e28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e30:	fa01 f407 	lsl.w	r4, r1, r7
 8000e34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e40:	4325      	orrs	r5, r4
 8000e42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e46:	0c2c      	lsrs	r4, r5, #16
 8000e48:	fb08 3319 	mls	r3, r8, r9, r3
 8000e4c:	fa1f fa8e 	uxth.w	sl, lr
 8000e50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e54:	fb09 f40a 	mul.w	r4, r9, sl
 8000e58:	429c      	cmp	r4, r3
 8000e5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e62:	d90b      	bls.n	8000e7c <__udivmoddi4+0x1b0>
 8000e64:	eb1e 0303 	adds.w	r3, lr, r3
 8000e68:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e6c:	f080 8087 	bcs.w	8000f7e <__udivmoddi4+0x2b2>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f240 8084 	bls.w	8000f7e <__udivmoddi4+0x2b2>
 8000e76:	f1a9 0902 	sub.w	r9, r9, #2
 8000e7a:	4473      	add	r3, lr
 8000e7c:	1b1b      	subs	r3, r3, r4
 8000e7e:	b2ad      	uxth	r5, r5
 8000e80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e84:	fb08 3310 	mls	r3, r8, r0, r3
 8000e88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e90:	45a2      	cmp	sl, r4
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x1da>
 8000e94:	eb1e 0404 	adds.w	r4, lr, r4
 8000e98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e9c:	d26b      	bcs.n	8000f76 <__udivmoddi4+0x2aa>
 8000e9e:	45a2      	cmp	sl, r4
 8000ea0:	d969      	bls.n	8000f76 <__udivmoddi4+0x2aa>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	4474      	add	r4, lr
 8000ea6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	eba4 040a 	sub.w	r4, r4, sl
 8000eb2:	454c      	cmp	r4, r9
 8000eb4:	46c2      	mov	sl, r8
 8000eb6:	464b      	mov	r3, r9
 8000eb8:	d354      	bcc.n	8000f64 <__udivmoddi4+0x298>
 8000eba:	d051      	beq.n	8000f60 <__udivmoddi4+0x294>
 8000ebc:	2e00      	cmp	r6, #0
 8000ebe:	d069      	beq.n	8000f94 <__udivmoddi4+0x2c8>
 8000ec0:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec4:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ecc:	40fd      	lsrs	r5, r7
 8000ece:	40fc      	lsrs	r4, r7
 8000ed0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed8:	2700      	movs	r7, #0
 8000eda:	e747      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000edc:	f1c2 0320 	rsb	r3, r2, #32
 8000ee0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee4:	4095      	lsls	r5, r2
 8000ee6:	fa01 f002 	lsl.w	r0, r1, r2
 8000eea:	fa21 f303 	lsr.w	r3, r1, r3
 8000eee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ef2:	4338      	orrs	r0, r7
 8000ef4:	0c01      	lsrs	r1, r0, #16
 8000ef6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000efa:	fa1f f885 	uxth.w	r8, r5
 8000efe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f06:	fb07 f308 	mul.w	r3, r7, r8
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f10:	d907      	bls.n	8000f22 <__udivmoddi4+0x256>
 8000f12:	1869      	adds	r1, r5, r1
 8000f14:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f18:	d22f      	bcs.n	8000f7a <__udivmoddi4+0x2ae>
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d92d      	bls.n	8000f7a <__udivmoddi4+0x2ae>
 8000f1e:	3f02      	subs	r7, #2
 8000f20:	4429      	add	r1, r5
 8000f22:	1acb      	subs	r3, r1, r3
 8000f24:	b281      	uxth	r1, r0
 8000f26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f32:	fb00 f308 	mul.w	r3, r0, r8
 8000f36:	428b      	cmp	r3, r1
 8000f38:	d907      	bls.n	8000f4a <__udivmoddi4+0x27e>
 8000f3a:	1869      	adds	r1, r5, r1
 8000f3c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f40:	d217      	bcs.n	8000f72 <__udivmoddi4+0x2a6>
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d915      	bls.n	8000f72 <__udivmoddi4+0x2a6>
 8000f46:	3802      	subs	r0, #2
 8000f48:	4429      	add	r1, r5
 8000f4a:	1ac9      	subs	r1, r1, r3
 8000f4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f50:	e73b      	b.n	8000dca <__udivmoddi4+0xfe>
 8000f52:	4637      	mov	r7, r6
 8000f54:	4630      	mov	r0, r6
 8000f56:	e709      	b.n	8000d6c <__udivmoddi4+0xa0>
 8000f58:	4607      	mov	r7, r0
 8000f5a:	e6e7      	b.n	8000d2c <__udivmoddi4+0x60>
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	e6fb      	b.n	8000d58 <__udivmoddi4+0x8c>
 8000f60:	4541      	cmp	r1, r8
 8000f62:	d2ab      	bcs.n	8000ebc <__udivmoddi4+0x1f0>
 8000f64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f68:	eb69 020e 	sbc.w	r2, r9, lr
 8000f6c:	3801      	subs	r0, #1
 8000f6e:	4613      	mov	r3, r2
 8000f70:	e7a4      	b.n	8000ebc <__udivmoddi4+0x1f0>
 8000f72:	4660      	mov	r0, ip
 8000f74:	e7e9      	b.n	8000f4a <__udivmoddi4+0x27e>
 8000f76:	4618      	mov	r0, r3
 8000f78:	e795      	b.n	8000ea6 <__udivmoddi4+0x1da>
 8000f7a:	4667      	mov	r7, ip
 8000f7c:	e7d1      	b.n	8000f22 <__udivmoddi4+0x256>
 8000f7e:	4681      	mov	r9, r0
 8000f80:	e77c      	b.n	8000e7c <__udivmoddi4+0x1b0>
 8000f82:	3802      	subs	r0, #2
 8000f84:	442c      	add	r4, r5
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0x14c>
 8000f88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f8c:	442b      	add	r3, r5
 8000f8e:	e72f      	b.n	8000df0 <__udivmoddi4+0x124>
 8000f90:	4638      	mov	r0, r7
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xda>
 8000f94:	4637      	mov	r7, r6
 8000f96:	e6e9      	b.n	8000d6c <__udivmoddi4+0xa0>

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f9c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_InitTick+0x3c>)
 8000fa0:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <HAL_InitTick+0x40>)
 8000fa2:	7812      	ldrb	r2, [r2, #0]
 8000fa4:	681b      	ldr	r3, [r3, #0]
{
 8000fa6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fac:	fbb0 f0f2 	udiv	r0, r0, r2
 8000fb0:	fbb3 f0f0 	udiv	r0, r3, r0
 8000fb4:	f000 f8ac 	bl	8001110 <HAL_SYSTICK_Config>
 8000fb8:	b908      	cbnz	r0, 8000fbe <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fba:	2d0f      	cmp	r5, #15
 8000fbc:	d901      	bls.n	8000fc2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000fbe:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000fc0:	bd38      	pop	{r3, r4, r5, pc}
 8000fc2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fcc:	f000 f846 	bl	800105c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4b03      	ldr	r3, [pc, #12]	; (8000fe0 <HAL_InitTick+0x44>)
 8000fd2:	4620      	mov	r0, r4
 8000fd4:	601d      	str	r5, [r3, #0]
}
 8000fd6:	bd38      	pop	{r3, r4, r5, pc}
 8000fd8:	20000000 	.word	0x20000000
 8000fdc:	2000007c 	.word	0x2000007c
 8000fe0:	20000004 	.word	0x20000004

08000fe4 <HAL_Init>:
{
 8000fe4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <HAL_Init+0x30>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ff6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000ffe:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001000:	2003      	movs	r0, #3
 8001002:	f000 f80f 	bl	8001024 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001006:	2000      	movs	r0, #0
 8001008:	f7ff ffc8 	bl	8000f9c <HAL_InitTick>
  HAL_MspInit();
 800100c:	f006 fa08 	bl	8007420 <HAL_MspInit>
}
 8001010:	2000      	movs	r0, #0
 8001012:	bd08      	pop	{r3, pc}
 8001014:	40023c00 	.word	0x40023c00

08001018 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001018:	4b01      	ldr	r3, [pc, #4]	; (8001020 <HAL_GetTick+0x8>)
 800101a:	6818      	ldr	r0, [r3, #0]
}
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	200018cc 	.word	0x200018cc

08001024 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001024:	1ec3      	subs	r3, r0, #3
 8001026:	2b04      	cmp	r3, #4
{
 8001028:	b510      	push	{r4, lr}
 800102a:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800102c:	d903      	bls.n	8001036 <HAL_NVIC_SetPriorityGrouping+0x12>
 800102e:	2192      	movs	r1, #146	; 0x92
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <HAL_NVIC_SetPriorityGrouping+0x30>)
 8001032:	f004 ff45 	bl	8005ec0 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001036:	4a08      	ldr	r2, [pc, #32]	; (8001058 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8001038:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800103e:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001040:	0224      	lsls	r4, r4, #8
 8001042:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001046:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
 800104a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800104e:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8001050:	60d4      	str	r4, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001052:	bd10      	pop	{r4, pc}
 8001054:	08008c20 	.word	0x08008c20
 8001058:	e000ed00 	.word	0xe000ed00

0800105c <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800105c:	2a0f      	cmp	r2, #15
{ 
 800105e:	b570      	push	{r4, r5, r6, lr}
 8001060:	4616      	mov	r6, r2
 8001062:	4605      	mov	r5, r0
 8001064:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001066:	d834      	bhi.n	80010d2 <HAL_NVIC_SetPriority+0x76>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001068:	2c0f      	cmp	r4, #15
 800106a:	d82d      	bhi.n	80010c8 <HAL_NVIC_SetPriority+0x6c>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <HAL_NVIC_SetPriority+0x80>)
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	f1c3 0107 	rsb	r1, r3, #7
 8001078:	2904      	cmp	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107a:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800107e:	bf28      	it	cs
 8001080:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	2a06      	cmp	r2, #6
 8001084:	d917      	bls.n	80010b6 <HAL_NVIC_SetPriority+0x5a>
 8001086:	3b03      	subs	r3, #3
 8001088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800108c:	409a      	lsls	r2, r3
 800108e:	ea26 0602 	bic.w	r6, r6, r2

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001092:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001096:	408a      	lsls	r2, r1
 8001098:	ea24 0202 	bic.w	r2, r4, r2
 800109c:	409a      	lsls	r2, r3
 800109e:	4332      	orrs	r2, r6
 80010a0:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80010a2:	2d00      	cmp	r5, #0
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	db09      	blt.n	80010bc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a8:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 80010ac:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 80010b0:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80010b4:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	2600      	movs	r6, #0
 80010b8:	4633      	mov	r3, r6
 80010ba:	e7ea      	b.n	8001092 <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <HAL_NVIC_SetPriority+0x84>)
 80010be:	f005 050f 	and.w	r5, r5, #15
 80010c2:	442b      	add	r3, r5
 80010c4:	761a      	strb	r2, [r3, #24]
 80010c6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80010c8:	21ab      	movs	r1, #171	; 0xab
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <HAL_NVIC_SetPriority+0x88>)
 80010cc:	f004 fef8 	bl	8005ec0 <assert_failed>
 80010d0:	e7cc      	b.n	800106c <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010d2:	21aa      	movs	r1, #170	; 0xaa
 80010d4:	4803      	ldr	r0, [pc, #12]	; (80010e4 <HAL_NVIC_SetPriority+0x88>)
 80010d6:	f004 fef3 	bl	8005ec0 <assert_failed>
 80010da:	e7c5      	b.n	8001068 <HAL_NVIC_SetPriority+0xc>
 80010dc:	e000ed00 	.word	0xe000ed00
 80010e0:	e000ecfc 	.word	0xe000ecfc
 80010e4:	08008c20 	.word	0x08008c20

080010e8 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80010e8:	2800      	cmp	r0, #0
 80010ea:	db08      	blt.n	80010fe <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ec:	f000 011f 	and.w	r1, r0, #31
 80010f0:	2301      	movs	r3, #1
 80010f2:	0940      	lsrs	r0, r0, #5
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_NVIC_EnableIRQ+0x20>)
 80010f6:	408b      	lsls	r3, r1
 80010f8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80010fc:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80010fe:	21be      	movs	r1, #190	; 0xbe
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <HAL_NVIC_EnableIRQ+0x24>)
 8001102:	f004 bedd 	b.w	8005ec0 <assert_failed>
 8001106:	bf00      	nop
 8001108:	e000e100 	.word	0xe000e100
 800110c:	08008c20 	.word	0x08008c20

08001110 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001110:	3801      	subs	r0, #1
 8001112:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001116:	d20e      	bcs.n	8001136 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111a:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	4c08      	ldr	r4, [pc, #32]	; (8001140 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800111e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001120:	20f0      	movs	r0, #240	; 0xf0
 8001122:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001126:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001128:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800112a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800112c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112e:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001134:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001136:	2001      	movs	r0, #1
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010
 8001140:	e000ed00 	.word	0xe000ed00

08001144 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001146:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff ff66 	bl	8001018 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800114c:	2c00      	cmp	r4, #0
 800114e:	f000 80e4 	beq.w	800131a <HAL_DMA_Init+0x1d6>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001152:	6823      	ldr	r3, [r4, #0]
 8001154:	4ab1      	ldr	r2, [pc, #708]	; (800141c <HAL_DMA_Init+0x2d8>)
 8001156:	4293      	cmp	r3, r2
 8001158:	4605      	mov	r5, r0
 800115a:	d031      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 800115c:	3218      	adds	r2, #24
 800115e:	4293      	cmp	r3, r2
 8001160:	d02e      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 8001162:	3218      	adds	r2, #24
 8001164:	4293      	cmp	r3, r2
 8001166:	d02b      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 8001168:	3218      	adds	r2, #24
 800116a:	4293      	cmp	r3, r2
 800116c:	d028      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 800116e:	3218      	adds	r2, #24
 8001170:	4293      	cmp	r3, r2
 8001172:	d025      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 8001174:	3218      	adds	r2, #24
 8001176:	4293      	cmp	r3, r2
 8001178:	d022      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 800117a:	3218      	adds	r2, #24
 800117c:	4293      	cmp	r3, r2
 800117e:	d01f      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 8001180:	3218      	adds	r2, #24
 8001182:	4293      	cmp	r3, r2
 8001184:	d01c      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 8001186:	f502 7256 	add.w	r2, r2, #856	; 0x358
 800118a:	4293      	cmp	r3, r2
 800118c:	d018      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 800118e:	3218      	adds	r2, #24
 8001190:	4293      	cmp	r3, r2
 8001192:	d015      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 8001194:	3218      	adds	r2, #24
 8001196:	4293      	cmp	r3, r2
 8001198:	d012      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 800119a:	3218      	adds	r2, #24
 800119c:	4293      	cmp	r3, r2
 800119e:	d00f      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 80011a0:	3218      	adds	r2, #24
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00c      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 80011a6:	3218      	adds	r2, #24
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d009      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 80011ac:	3218      	adds	r2, #24
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d006      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 80011b2:	3218      	adds	r2, #24
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d003      	beq.n	80011c0 <HAL_DMA_Init+0x7c>
 80011b8:	21b8      	movs	r1, #184	; 0xb8
 80011ba:	4899      	ldr	r0, [pc, #612]	; (8001420 <HAL_DMA_Init+0x2dc>)
 80011bc:	f004 fe80 	bl	8005ec0 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80011c0:	6863      	ldr	r3, [r4, #4]
 80011c2:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 80011c6:	d006      	beq.n	80011d6 <HAL_DMA_Init+0x92>
 80011c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80011cc:	d003      	beq.n	80011d6 <HAL_DMA_Init+0x92>
 80011ce:	21b9      	movs	r1, #185	; 0xb9
 80011d0:	4893      	ldr	r0, [pc, #588]	; (8001420 <HAL_DMA_Init+0x2dc>)
 80011d2:	f004 fe75 	bl	8005ec0 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80011d6:	68a3      	ldr	r3, [r4, #8]
 80011d8:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 80011dc:	d002      	beq.n	80011e4 <HAL_DMA_Init+0xa0>
 80011de:	2b80      	cmp	r3, #128	; 0x80
 80011e0:	f040 80cb 	bne.w	800137a <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80011e4:	68e3      	ldr	r3, [r4, #12]
 80011e6:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80011ea:	f040 80a2 	bne.w	8001332 <HAL_DMA_Init+0x1ee>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80011ee:	6923      	ldr	r3, [r4, #16]
 80011f0:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 80011f4:	f040 8093 	bne.w	800131e <HAL_DMA_Init+0x1da>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80011f8:	6963      	ldr	r3, [r4, #20]
 80011fa:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 80011fe:	d003      	beq.n	8001208 <HAL_DMA_Init+0xc4>
 8001200:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001204:	f040 80c3 	bne.w	800138e <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001208:	69a3      	ldr	r3, [r4, #24]
 800120a:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800120e:	d003      	beq.n	8001218 <HAL_DMA_Init+0xd4>
 8001210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001214:	f040 80a7 	bne.w	8001366 <HAL_DMA_Init+0x222>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001218:	69e3      	ldr	r3, [r4, #28]
 800121a:	f033 0220 	bics.w	r2, r3, #32
 800121e:	d006      	beq.n	800122e <HAL_DMA_Init+0xea>
 8001220:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001224:	d003      	beq.n	800122e <HAL_DMA_Init+0xea>
 8001226:	21bf      	movs	r1, #191	; 0xbf
 8001228:	487d      	ldr	r0, [pc, #500]	; (8001420 <HAL_DMA_Init+0x2dc>)
 800122a:	f004 fe49 	bl	8005ec0 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800122e:	6a23      	ldr	r3, [r4, #32]
 8001230:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8001234:	d003      	beq.n	800123e <HAL_DMA_Init+0xfa>
 8001236:	21c0      	movs	r1, #192	; 0xc0
 8001238:	4879      	ldr	r0, [pc, #484]	; (8001420 <HAL_DMA_Init+0x2dc>)
 800123a:	f004 fe41 	bl	8005ec0 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800123e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001240:	2b00      	cmp	r3, #0
 8001242:	d14d      	bne.n	80012e0 <HAL_DMA_Init+0x19c>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001244:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001246:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001248:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800124c:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 800124e:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8001250:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8001254:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001258:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800125a:	e005      	b.n	8001268 <HAL_DMA_Init+0x124>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800125c:	f7ff fedc 	bl	8001018 <HAL_GetTick>
 8001260:	1b40      	subs	r0, r0, r5
 8001262:	2805      	cmp	r0, #5
 8001264:	d852      	bhi.n	800130c <HAL_DMA_Init+0x1c8>
 8001266:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	07d1      	lsls	r1, r2, #31
 800126c:	d4f6      	bmi.n	800125c <HAL_DMA_Init+0x118>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800126e:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001272:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001276:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001278:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 800127a:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800127c:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800127e:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001282:	430a      	orrs	r2, r1
 8001284:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001286:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001288:	4866      	ldr	r0, [pc, #408]	; (8001424 <HAL_DMA_Init+0x2e0>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800128a:	4332      	orrs	r2, r6
 800128c:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800128e:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001290:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001292:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001294:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001296:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800129a:	f000 8082 	beq.w	80013a2 <HAL_DMA_Init+0x25e>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800129e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012a0:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012a2:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012a6:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	485f      	ldr	r0, [pc, #380]	; (8001428 <HAL_DMA_Init+0x2e4>)
  hdma->Instance->FCR = tmp;
 80012ac:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80012ae:	3a10      	subs	r2, #16
 80012b0:	fba0 1202 	umull	r1, r2, r0, r2
 80012b4:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80012b6:	495d      	ldr	r1, [pc, #372]	; (800142c <HAL_DMA_Init+0x2e8>)
 80012b8:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80012bc:	5c89      	ldrb	r1, [r1, r2]
 80012be:	65e1      	str	r1, [r4, #92]	; 0x5c
 80012c0:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 80012c4:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80012c6:	bf88      	it	hi
 80012c8:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012ca:	223f      	movs	r2, #63	; 0x3f
 80012cc:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 80012ce:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012d0:	2100      	movs	r1, #0
 80012d2:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 80012d4:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012d6:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012d8:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80012da:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80012de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80012e0:	2b04      	cmp	r3, #4
 80012e2:	d130      	bne.n	8001346 <HAL_DMA_Init+0x202>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80012e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012e6:	2b03      	cmp	r3, #3
 80012e8:	d838      	bhi.n	800135c <HAL_DMA_Init+0x218>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80012ea:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012ec:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 80012f0:	d003      	beq.n	80012fa <HAL_DMA_Init+0x1b6>
 80012f2:	21c7      	movs	r1, #199	; 0xc7
 80012f4:	484a      	ldr	r0, [pc, #296]	; (8001420 <HAL_DMA_Init+0x2dc>)
 80012f6:	f004 fde3 	bl	8005ec0 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80012fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80012fc:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8001300:	d0a0      	beq.n	8001244 <HAL_DMA_Init+0x100>
 8001302:	21c8      	movs	r1, #200	; 0xc8
 8001304:	4846      	ldr	r0, [pc, #280]	; (8001420 <HAL_DMA_Init+0x2dc>)
 8001306:	f004 fddb 	bl	8005ec0 <assert_failed>
 800130a:	e79b      	b.n	8001244 <HAL_DMA_Init+0x100>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800130c:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800130e:	2220      	movs	r2, #32
 8001310:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001312:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001314:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800131a:	2001      	movs	r0, #1
}
 800131c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800131e:	21bc      	movs	r1, #188	; 0xbc
 8001320:	483f      	ldr	r0, [pc, #252]	; (8001420 <HAL_DMA_Init+0x2dc>)
 8001322:	f004 fdcd 	bl	8005ec0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001326:	6963      	ldr	r3, [r4, #20]
 8001328:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800132c:	f43f af6c 	beq.w	8001208 <HAL_DMA_Init+0xc4>
 8001330:	e766      	b.n	8001200 <HAL_DMA_Init+0xbc>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001332:	21bb      	movs	r1, #187	; 0xbb
 8001334:	483a      	ldr	r0, [pc, #232]	; (8001420 <HAL_DMA_Init+0x2dc>)
 8001336:	f004 fdc3 	bl	8005ec0 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800133a:	6923      	ldr	r3, [r4, #16]
 800133c:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8001340:	f43f af5a 	beq.w	80011f8 <HAL_DMA_Init+0xb4>
 8001344:	e7eb      	b.n	800131e <HAL_DMA_Init+0x1da>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001346:	21c1      	movs	r1, #193	; 0xc1
 8001348:	4835      	ldr	r0, [pc, #212]	; (8001420 <HAL_DMA_Init+0x2dc>)
 800134a:	f004 fdb9 	bl	8005ec0 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800134e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001350:	2b00      	cmp	r3, #0
 8001352:	f43f af77 	beq.w	8001244 <HAL_DMA_Init+0x100>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001356:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001358:	2b03      	cmp	r3, #3
 800135a:	d9c6      	bls.n	80012ea <HAL_DMA_Init+0x1a6>
 800135c:	21c6      	movs	r1, #198	; 0xc6
 800135e:	4830      	ldr	r0, [pc, #192]	; (8001420 <HAL_DMA_Init+0x2dc>)
 8001360:	f004 fdae 	bl	8005ec0 <assert_failed>
 8001364:	e7c1      	b.n	80012ea <HAL_DMA_Init+0x1a6>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001366:	21be      	movs	r1, #190	; 0xbe
 8001368:	482d      	ldr	r0, [pc, #180]	; (8001420 <HAL_DMA_Init+0x2dc>)
 800136a:	f004 fda9 	bl	8005ec0 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800136e:	69e3      	ldr	r3, [r4, #28]
 8001370:	f033 0220 	bics.w	r2, r3, #32
 8001374:	f43f af5b 	beq.w	800122e <HAL_DMA_Init+0xea>
 8001378:	e752      	b.n	8001220 <HAL_DMA_Init+0xdc>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800137a:	21ba      	movs	r1, #186	; 0xba
 800137c:	4828      	ldr	r0, [pc, #160]	; (8001420 <HAL_DMA_Init+0x2dc>)
 800137e:	f004 fd9f 	bl	8005ec0 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001382:	68e3      	ldr	r3, [r4, #12]
 8001384:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8001388:	f43f af31 	beq.w	80011ee <HAL_DMA_Init+0xaa>
 800138c:	e7d1      	b.n	8001332 <HAL_DMA_Init+0x1ee>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800138e:	21bd      	movs	r1, #189	; 0xbd
 8001390:	4823      	ldr	r0, [pc, #140]	; (8001420 <HAL_DMA_Init+0x2dc>)
 8001392:	f004 fd95 	bl	8005ec0 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001396:	69a3      	ldr	r3, [r4, #24]
 8001398:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800139c:	f43f af3c 	beq.w	8001218 <HAL_DMA_Init+0xd4>
 80013a0:	e736      	b.n	8001210 <HAL_DMA_Init+0xcc>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013a2:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 80013a6:	4301      	orrs	r1, r0
 80013a8:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 80013aa:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 80013ac:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80013ae:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80013b0:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013b4:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80013b8:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013ba:	2800      	cmp	r0, #0
 80013bc:	f43f af74 	beq.w	80012a8 <HAL_DMA_Init+0x164>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80013c0:	b18e      	cbz	r6, 80013e6 <HAL_DMA_Init+0x2a2>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80013c2:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80013c6:	d01a      	beq.n	80013fe <HAL_DMA_Init+0x2ba>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80013c8:	2d02      	cmp	r5, #2
 80013ca:	d905      	bls.n	80013d8 <HAL_DMA_Init+0x294>
 80013cc:	2d03      	cmp	r5, #3
 80013ce:	f47f af6b 	bne.w	80012a8 <HAL_DMA_Init+0x164>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80013d2:	01c2      	lsls	r2, r0, #7
 80013d4:	f57f af68 	bpl.w	80012a8 <HAL_DMA_Init+0x164>
        hdma->State = HAL_DMA_STATE_READY;
 80013d8:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013da:	2240      	movs	r2, #64	; 0x40
 80013dc:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 80013de:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 80013e0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80013e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 80013e6:	2d01      	cmp	r5, #1
 80013e8:	d004      	beq.n	80013f4 <HAL_DMA_Init+0x2b0>
 80013ea:	d3f2      	bcc.n	80013d2 <HAL_DMA_Init+0x28e>
 80013ec:	2d02      	cmp	r5, #2
 80013ee:	f47f af5b 	bne.w	80012a8 <HAL_DMA_Init+0x164>
 80013f2:	e7ee      	b.n	80013d2 <HAL_DMA_Init+0x28e>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80013f4:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 80013f8:	f47f af56 	bne.w	80012a8 <HAL_DMA_Init+0x164>
 80013fc:	e7ec      	b.n	80013d8 <HAL_DMA_Init+0x294>
    switch (tmp)
 80013fe:	2d03      	cmp	r5, #3
 8001400:	f63f af52 	bhi.w	80012a8 <HAL_DMA_Init+0x164>
 8001404:	a201      	add	r2, pc, #4	; (adr r2, 800140c <HAL_DMA_Init+0x2c8>)
 8001406:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800140a:	bf00      	nop
 800140c:	080013d9 	.word	0x080013d9
 8001410:	080013d3 	.word	0x080013d3
 8001414:	080013d9 	.word	0x080013d9
 8001418:	080013f5 	.word	0x080013f5
 800141c:	40026010 	.word	0x40026010
 8001420:	08008c5c 	.word	0x08008c5c
 8001424:	f010803f 	.word	0xf010803f
 8001428:	aaaaaaab 	.word	0xaaaaaaab
 800142c:	08008c94 	.word	0x08008c94

08001430 <HAL_DMA_Start_IT>:
{
 8001430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001434:	4604      	mov	r4, r0
 8001436:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001438:	1e58      	subs	r0, r3, #1
 800143a:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800143e:	4298      	cmp	r0, r3
{
 8001440:	460f      	mov	r7, r1
 8001442:	4690      	mov	r8, r2
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001444:	6da6      	ldr	r6, [r4, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001446:	d83e      	bhi.n	80014c6 <HAL_DMA_Start_IT+0x96>
  __HAL_LOCK(hdma);
 8001448:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 800144c:	2b01      	cmp	r3, #1
 800144e:	d043      	beq.n	80014d8 <HAL_DMA_Start_IT+0xa8>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001450:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  __HAL_LOCK(hdma);
 8001454:	2201      	movs	r2, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8001456:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 8001458:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 800145c:	d12d      	bne.n	80014ba <HAL_DMA_Start_IT+0x8a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800145e:	6821      	ldr	r1, [r4, #0]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001460:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    hdma->State = HAL_DMA_STATE_BUSY;
 8001462:	2202      	movs	r2, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001464:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001466:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800146a:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800146c:	680b      	ldr	r3, [r1, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800146e:	68a2      	ldr	r2, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001470:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001474:	600b      	str	r3, [r1, #0]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001476:	233f      	movs	r3, #63	; 0x3f
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001478:	2a40      	cmp	r2, #64	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800147a:	fa03 f300 	lsl.w	r3, r3, r0
  hdma->Instance->NDTR = DataLength;
 800147e:	604d      	str	r5, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8001480:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->PAR = DstAddress;
 8001482:	bf0b      	itete	eq
 8001484:	f8c1 8008 	streq.w	r8, [r1, #8]
    hdma->Instance->PAR = SrcAddress;
 8001488:	608f      	strne	r7, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 800148a:	60cf      	streq	r7, [r1, #12]
    hdma->Instance->M0AR = DstAddress;
 800148c:	f8c1 800c 	strne.w	r8, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001490:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001492:	680b      	ldr	r3, [r1, #0]
 8001494:	f043 0316 	orr.w	r3, r3, #22
 8001498:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800149a:	694b      	ldr	r3, [r1, #20]
 800149c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a0:	614b      	str	r3, [r1, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80014a2:	b11a      	cbz	r2, 80014ac <HAL_DMA_Start_IT+0x7c>
      hdma->Instance->CR  |= DMA_IT_HT;
 80014a4:	680b      	ldr	r3, [r1, #0]
 80014a6:	f043 0308 	orr.w	r3, r3, #8
 80014aa:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 80014ac:	680b      	ldr	r3, [r1, #0]
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014b4:	2000      	movs	r0, #0
}
 80014b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hdma);	  
 80014ba:	2300      	movs	r3, #0
 80014bc:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 80014c0:	2002      	movs	r0, #2
}
 80014c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80014c6:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80014ca:	4805      	ldr	r0, [pc, #20]	; (80014e0 <HAL_DMA_Start_IT+0xb0>)
 80014cc:	f004 fcf8 	bl	8005ec0 <assert_failed>
  __HAL_LOCK(hdma);
 80014d0:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d1bb      	bne.n	8001450 <HAL_DMA_Start_IT+0x20>
 80014d8:	2002      	movs	r0, #2
}
 80014da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014de:	bf00      	nop
 80014e0:	08008c5c 	.word	0x08008c5c

080014e4 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014e4:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d003      	beq.n	80014f4 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 80014f0:	2001      	movs	r0, #1
 80014f2:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 80014f4:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 80014f6:	2305      	movs	r3, #5
 80014f8:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 80014fc:	6813      	ldr	r3, [r2, #0]
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001504:	2000      	movs	r0, #0
}
 8001506:	4770      	bx	lr

08001508 <HAL_DMA_IRQHandler>:
{
 8001508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800150a:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 800150c:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150e:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8001510:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001512:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001514:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001516:	4965      	ldr	r1, [pc, #404]	; (80016ac <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001518:	2208      	movs	r2, #8
 800151a:	409a      	lsls	r2, r3
 800151c:	422a      	tst	r2, r5
{
 800151e:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8001520:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001522:	d003      	beq.n	800152c <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001524:	6801      	ldr	r1, [r0, #0]
 8001526:	6808      	ldr	r0, [r1, #0]
 8001528:	0740      	lsls	r0, r0, #29
 800152a:	d459      	bmi.n	80015e0 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800152c:	2201      	movs	r2, #1
 800152e:	409a      	lsls	r2, r3
 8001530:	422a      	tst	r2, r5
 8001532:	d003      	beq.n	800153c <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001534:	6821      	ldr	r1, [r4, #0]
 8001536:	6949      	ldr	r1, [r1, #20]
 8001538:	0608      	lsls	r0, r1, #24
 800153a:	d474      	bmi.n	8001626 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800153c:	2204      	movs	r2, #4
 800153e:	409a      	lsls	r2, r3
 8001540:	422a      	tst	r2, r5
 8001542:	d003      	beq.n	800154c <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001544:	6821      	ldr	r1, [r4, #0]
 8001546:	6809      	ldr	r1, [r1, #0]
 8001548:	0789      	lsls	r1, r1, #30
 800154a:	d466      	bmi.n	800161a <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800154c:	2210      	movs	r2, #16
 800154e:	409a      	lsls	r2, r3
 8001550:	422a      	tst	r2, r5
 8001552:	d003      	beq.n	800155c <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001554:	6821      	ldr	r1, [r4, #0]
 8001556:	6808      	ldr	r0, [r1, #0]
 8001558:	0700      	lsls	r0, r0, #28
 800155a:	d44b      	bmi.n	80015f4 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800155c:	2220      	movs	r2, #32
 800155e:	409a      	lsls	r2, r3
 8001560:	422a      	tst	r2, r5
 8001562:	d014      	beq.n	800158e <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001564:	6821      	ldr	r1, [r4, #0]
 8001566:	6808      	ldr	r0, [r1, #0]
 8001568:	06c0      	lsls	r0, r0, #27
 800156a:	d510      	bpl.n	800158e <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800156c:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800156e:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8001572:	2a05      	cmp	r2, #5
 8001574:	d063      	beq.n	800163e <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001576:	680b      	ldr	r3, [r1, #0]
 8001578:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800157c:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800157e:	d07e      	beq.n	800167e <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001580:	0319      	lsls	r1, r3, #12
 8001582:	f140 8089 	bpl.w	8001698 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8001586:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001588:	b10b      	cbz	r3, 800158e <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 800158a:	4620      	mov	r0, r4
 800158c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800158e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001590:	b323      	cbz	r3, 80015dc <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001592:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001594:	07da      	lsls	r2, r3, #31
 8001596:	d51a      	bpl.n	80015ce <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8001598:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800159a:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800159c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80015a0:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015a2:	4943      	ldr	r1, [pc, #268]	; (80016b0 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 80015a4:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80015a8:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 80015ac:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015ae:	0ab6      	lsrs	r6, r6, #10
 80015b0:	e002      	b.n	80015b8 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80015b2:	6813      	ldr	r3, [r2, #0]
 80015b4:	07db      	lsls	r3, r3, #31
 80015b6:	d504      	bpl.n	80015c2 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 80015b8:	9b01      	ldr	r3, [sp, #4]
 80015ba:	3301      	adds	r3, #1
 80015bc:	42b3      	cmp	r3, r6
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	d9f7      	bls.n	80015b2 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 80015c2:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80015c4:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80015c6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80015ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80015ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80015d0:	b123      	cbz	r3, 80015dc <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 80015d2:	4620      	mov	r0, r4
}
 80015d4:	b003      	add	sp, #12
 80015d6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 80015da:	4718      	bx	r3
}
 80015dc:	b003      	add	sp, #12
 80015de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015e0:	6808      	ldr	r0, [r1, #0]
 80015e2:	f020 0004 	bic.w	r0, r0, #4
 80015e6:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015e8:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015ea:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80015ec:	f042 0201 	orr.w	r2, r2, #1
 80015f0:	6562      	str	r2, [r4, #84]	; 0x54
 80015f2:	e79b      	b.n	800152c <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80015f4:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015f6:	680a      	ldr	r2, [r1, #0]
 80015f8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015fc:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015fe:	d118      	bne.n	8001632 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001600:	05d2      	lsls	r2, r2, #23
 8001602:	d403      	bmi.n	800160c <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001604:	680a      	ldr	r2, [r1, #0]
 8001606:	f022 0208 	bic.w	r2, r2, #8
 800160a:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 800160c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800160e:	2a00      	cmp	r2, #0
 8001610:	d0a4      	beq.n	800155c <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8001612:	4620      	mov	r0, r4
 8001614:	4790      	blx	r2
 8001616:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001618:	e7a0      	b.n	800155c <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800161a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800161c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800161e:	f042 0204 	orr.w	r2, r2, #4
 8001622:	6562      	str	r2, [r4, #84]	; 0x54
 8001624:	e792      	b.n	800154c <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001626:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001628:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800162a:	f042 0202 	orr.w	r2, r2, #2
 800162e:	6562      	str	r2, [r4, #84]	; 0x54
 8001630:	e784      	b.n	800153c <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001632:	0311      	lsls	r1, r2, #12
 8001634:	d5ea      	bpl.n	800160c <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001636:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001638:	2a00      	cmp	r2, #0
 800163a:	d1ea      	bne.n	8001612 <HAL_DMA_IRQHandler+0x10a>
 800163c:	e78e      	b.n	800155c <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800163e:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001640:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001642:	f022 0216 	bic.w	r2, r2, #22
 8001646:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001648:	694a      	ldr	r2, [r1, #20]
 800164a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800164e:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001650:	b338      	cbz	r0, 80016a2 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001652:	680a      	ldr	r2, [r1, #0]
 8001654:	f022 0208 	bic.w	r2, r2, #8
 8001658:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800165a:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 800165c:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8001662:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001664:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001666:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001668:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800166c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001670:	2900      	cmp	r1, #0
 8001672:	d0b3      	beq.n	80015dc <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8001674:	4620      	mov	r0, r4
}
 8001676:	b003      	add	sp, #12
 8001678:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 800167c:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800167e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001682:	d180      	bne.n	8001586 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001684:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8001686:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001688:	f022 0210 	bic.w	r2, r2, #16
 800168c:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 800168e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001692:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8001696:	e776      	b.n	8001586 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8001698:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800169a:	2b00      	cmp	r3, #0
 800169c:	f47f af75 	bne.w	800158a <HAL_DMA_IRQHandler+0x82>
 80016a0:	e775      	b.n	800158e <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016a2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80016a4:	2a00      	cmp	r2, #0
 80016a6:	d1d4      	bne.n	8001652 <HAL_DMA_IRQHandler+0x14a>
 80016a8:	e7d7      	b.n	800165a <HAL_DMA_IRQHandler+0x152>
 80016aa:	bf00      	nop
 80016ac:	2000007c 	.word	0x2000007c
 80016b0:	1b4e81b5 	.word	0x1b4e81b5

080016b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80016b8:	4b9c      	ldr	r3, [pc, #624]	; (800192c <HAL_GPIO_Init+0x278>)
 80016ba:	4298      	cmp	r0, r3
{
 80016bc:	b083      	sub	sp, #12
 80016be:	4683      	mov	fp, r0
 80016c0:	468a      	mov	sl, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80016c2:	d017      	beq.n	80016f4 <HAL_GPIO_Init+0x40>
 80016c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016c8:	4298      	cmp	r0, r3
 80016ca:	d013      	beq.n	80016f4 <HAL_GPIO_Init+0x40>
 80016cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016d0:	4298      	cmp	r0, r3
 80016d2:	d00f      	beq.n	80016f4 <HAL_GPIO_Init+0x40>
 80016d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016d8:	4298      	cmp	r0, r3
 80016da:	d00b      	beq.n	80016f4 <HAL_GPIO_Init+0x40>
 80016dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80016e0:	4298      	cmp	r0, r3
 80016e2:	d007      	beq.n	80016f4 <HAL_GPIO_Init+0x40>
 80016e4:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80016e8:	4298      	cmp	r0, r3
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x40>
 80016ec:	21b3      	movs	r1, #179	; 0xb3
 80016ee:	4890      	ldr	r0, [pc, #576]	; (8001930 <HAL_GPIO_Init+0x27c>)
 80016f0:	f004 fbe6 	bl	8005ec0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80016f4:	f8da 3000 	ldr.w	r3, [sl]
 80016f8:	b299      	uxth	r1, r3
 80016fa:	2900      	cmp	r1, #0
 80016fc:	f000 80b6 	beq.w	800186c <HAL_GPIO_Init+0x1b8>
 8001700:	0c1b      	lsrs	r3, r3, #16
 8001702:	041b      	lsls	r3, r3, #16
 8001704:	2b00      	cmp	r3, #0
 8001706:	f040 80b1 	bne.w	800186c <HAL_GPIO_Init+0x1b8>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800170a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d917      	bls.n	8001742 <HAL_GPIO_Init+0x8e>
 8001712:	f1a3 0111 	sub.w	r1, r3, #17
 8001716:	2901      	cmp	r1, #1
 8001718:	d913      	bls.n	8001742 <HAL_GPIO_Init+0x8e>
 800171a:	4886      	ldr	r0, [pc, #536]	; (8001934 <HAL_GPIO_Init+0x280>)
 800171c:	f423 1100 	bic.w	r1, r3, #2097152	; 0x200000
 8001720:	4281      	cmp	r1, r0
 8001722:	d00e      	beq.n	8001742 <HAL_GPIO_Init+0x8e>
 8001724:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8001728:	4283      	cmp	r3, r0
 800172a:	d00a      	beq.n	8001742 <HAL_GPIO_Init+0x8e>
 800172c:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 8001730:	4281      	cmp	r1, r0
 8001732:	d006      	beq.n	8001742 <HAL_GPIO_Init+0x8e>
 8001734:	4980      	ldr	r1, [pc, #512]	; (8001938 <HAL_GPIO_Init+0x284>)
 8001736:	428b      	cmp	r3, r1
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x8e>
 800173a:	21b5      	movs	r1, #181	; 0xb5
 800173c:	487c      	ldr	r0, [pc, #496]	; (8001930 <HAL_GPIO_Init+0x27c>)
 800173e:	f004 fbbf 	bl	8005ec0 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001742:	f8da 3008 	ldr.w	r3, [sl, #8]
 8001746:	2b02      	cmp	r3, #2
 8001748:	f200 80e5 	bhi.w	8001916 <HAL_GPIO_Init+0x262>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800174c:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8001950 <HAL_GPIO_Init+0x29c>
{
 8001750:	f04f 0800 	mov.w	r8, #0
 8001754:	e005      	b.n	8001762 <HAL_GPIO_Init+0xae>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001756:	f108 0801 	add.w	r8, r8, #1
 800175a:	f1b8 0f10 	cmp.w	r8, #16
 800175e:	f000 8082 	beq.w	8001866 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001762:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001764:	f8da 5000 	ldr.w	r5, [sl]
    ioposition = 0x01U << position;
 8001768:	fa04 f408 	lsl.w	r4, r4, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800176e:	42ac      	cmp	r4, r5
 8001770:	d1f1      	bne.n	8001756 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001772:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001776:	f022 0110 	bic.w	r1, r2, #16
 800177a:	2902      	cmp	r1, #2
 800177c:	f000 8092 	beq.w	80018a4 <HAL_GPIO_Init+0x1f0>
 8001780:	ea4f 0748 	mov.w	r7, r8, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001784:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 8001786:	f8db 0000 	ldr.w	r0, [fp]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800178a:	40be      	lsls	r6, r7
 800178c:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800178e:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001792:	4030      	ands	r0, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001794:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001796:	3901      	subs	r1, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001798:	4303      	orrs	r3, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800179a:	2901      	cmp	r1, #1
      GPIOx->MODER = temp;
 800179c:	f8cb 3000 	str.w	r3, [fp]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a0:	d969      	bls.n	8001876 <HAL_GPIO_Init+0x1c2>
      temp = GPIOx->PUPDR;
 80017a2:	f8db 100c 	ldr.w	r1, [fp, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017a6:	f8da 3008 	ldr.w	r3, [sl, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017aa:	400e      	ands	r6, r1
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ac:	fa03 f707 	lsl.w	r7, r3, r7
 80017b0:	4337      	orrs	r7, r6
      GPIOx->PUPDR = temp;
 80017b2:	f8cb 700c 	str.w	r7, [fp, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017b6:	00d7      	lsls	r7, r2, #3
 80017b8:	d5cd      	bpl.n	8001756 <HAL_GPIO_Init+0xa2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ba:	4b60      	ldr	r3, [pc, #384]	; (800193c <HAL_GPIO_Init+0x288>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017bc:	4c5b      	ldr	r4, [pc, #364]	; (800192c <HAL_GPIO_Init+0x278>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	2100      	movs	r1, #0
 80017c0:	9101      	str	r1, [sp, #4]
 80017c2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80017c4:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80017c8:	6459      	str	r1, [r3, #68]	; 0x44
 80017ca:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80017cc:	f028 0303 	bic.w	r3, r8, #3
 80017d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80017d4:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 80017d8:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 80017dc:	9101      	str	r1, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017de:	f008 0103 	and.w	r1, r8, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017e2:	9801      	ldr	r0, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80017e4:	689e      	ldr	r6, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017e6:	0089      	lsls	r1, r1, #2
 80017e8:	200f      	movs	r0, #15
 80017ea:	4088      	lsls	r0, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017ec:	45a3      	cmp	fp, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017ee:	ea26 0000 	bic.w	r0, r6, r0
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017f2:	d012      	beq.n	800181a <HAL_GPIO_Init+0x166>
 80017f4:	45cb      	cmp	fp, r9
 80017f6:	f000 8084 	beq.w	8001902 <HAL_GPIO_Init+0x24e>
 80017fa:	4c51      	ldr	r4, [pc, #324]	; (8001940 <HAL_GPIO_Init+0x28c>)
 80017fc:	45a3      	cmp	fp, r4
 80017fe:	f000 8085 	beq.w	800190c <HAL_GPIO_Init+0x258>
 8001802:	4c50      	ldr	r4, [pc, #320]	; (8001944 <HAL_GPIO_Init+0x290>)
 8001804:	45a3      	cmp	fp, r4
 8001806:	f000 808b 	beq.w	8001920 <HAL_GPIO_Init+0x26c>
 800180a:	4c4f      	ldr	r4, [pc, #316]	; (8001948 <HAL_GPIO_Init+0x294>)
 800180c:	45a3      	cmp	fp, r4
 800180e:	bf0c      	ite	eq
 8001810:	2404      	moveq	r4, #4
 8001812:	2407      	movne	r4, #7
 8001814:	fa04 f101 	lsl.w	r1, r4, r1
 8001818:	4308      	orrs	r0, r1
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181a:	494c      	ldr	r1, [pc, #304]	; (800194c <HAL_GPIO_Init+0x298>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 800181c:	6098      	str	r0, [r3, #8]
        temp = EXTI->IMR;
 800181e:	680b      	ldr	r3, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001820:	484a      	ldr	r0, [pc, #296]	; (800194c <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 8001822:	43e9      	mvns	r1, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001824:	03d6      	lsls	r6, r2, #15
          temp |= iocurrent;
 8001826:	bf4c      	ite	mi
 8001828:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 800182a:	400b      	andpl	r3, r1
        EXTI->IMR = temp;
 800182c:	6003      	str	r3, [r0, #0]

        temp = EXTI->EMR;
 800182e:	6843      	ldr	r3, [r0, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001830:	4846      	ldr	r0, [pc, #280]	; (800194c <HAL_GPIO_Init+0x298>)
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001832:	0394      	lsls	r4, r2, #14
          temp |= iocurrent;
 8001834:	bf4c      	ite	mi
 8001836:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8001838:	400b      	andpl	r3, r1
        EXTI->EMR = temp;
 800183a:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800183c:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800183e:	02d0      	lsls	r0, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001840:	4842      	ldr	r0, [pc, #264]	; (800194c <HAL_GPIO_Init+0x298>)
          temp |= iocurrent;
 8001842:	bf4c      	ite	mi
 8001844:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8001846:	400b      	andpl	r3, r1
        EXTI->RTSR = temp;
 8001848:	6083      	str	r3, [r0, #8]

        temp = EXTI->FTSR;
 800184a:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800184c:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 800184e:	bf54      	ite	pl
 8001850:	ea01 0503 	andpl.w	r5, r1, r3
        {
          temp |= iocurrent;
 8001854:	431d      	orrmi	r5, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001856:	f108 0801 	add.w	r8, r8, #1
        }
        EXTI->FTSR = temp;
 800185a:	4b3c      	ldr	r3, [pc, #240]	; (800194c <HAL_GPIO_Init+0x298>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800185c:	f1b8 0f10 	cmp.w	r8, #16
        EXTI->FTSR = temp;
 8001860:	60dd      	str	r5, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001862:	f47f af7e 	bne.w	8001762 <HAL_GPIO_Init+0xae>
      }
    }
  }
}
 8001866:	b003      	add	sp, #12
 8001868:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800186c:	21b4      	movs	r1, #180	; 0xb4
 800186e:	4830      	ldr	r0, [pc, #192]	; (8001930 <HAL_GPIO_Init+0x27c>)
 8001870:	f004 fb26 	bl	8005ec0 <assert_failed>
 8001874:	e749      	b.n	800170a <HAL_GPIO_Init+0x56>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001876:	f8da 300c 	ldr.w	r3, [sl, #12]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d838      	bhi.n	80018f0 <HAL_GPIO_Init+0x23c>
        temp = GPIOx->OSPEEDR; 
 800187e:	f8db 1008 	ldr.w	r1, [fp, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001882:	40bb      	lsls	r3, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001884:	4031      	ands	r1, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001886:	430b      	orrs	r3, r1
        GPIOx->OSPEEDR = temp;
 8001888:	f8cb 3008 	str.w	r3, [fp, #8]
        temp = GPIOx->OTYPER;
 800188c:	f8db 1004 	ldr.w	r1, [fp, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001890:	f3c2 1300 	ubfx	r3, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001894:	ea21 0104 	bic.w	r1, r1, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001898:	fa03 f408 	lsl.w	r4, r3, r8
 800189c:	430c      	orrs	r4, r1
        GPIOx->OTYPER = temp;
 800189e:	f8cb 4004 	str.w	r4, [fp, #4]
 80018a2:	e77e      	b.n	80017a2 <HAL_GPIO_Init+0xee>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80018a4:	f8da 3010 	ldr.w	r3, [sl, #16]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d91b      	bls.n	80018e4 <HAL_GPIO_Init+0x230>
 80018ac:	21c7      	movs	r1, #199	; 0xc7
 80018ae:	4820      	ldr	r0, [pc, #128]	; (8001930 <HAL_GPIO_Init+0x27c>)
 80018b0:	f004 fb06 	bl	8005ec0 <assert_failed>
 80018b4:	f8da 2004 	ldr.w	r2, [sl, #4]
 80018b8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80018bc:	f022 0110 	bic.w	r1, r2, #16
        temp = GPIOx->AFR[position >> 3U];
 80018c0:	ea4f 06d8 	mov.w	r6, r8, lsr #3
 80018c4:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018c8:	f008 0007 	and.w	r0, r8, #7
        temp = GPIOx->AFR[position >> 3U];
 80018cc:	6a37      	ldr	r7, [r6, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018ce:	0080      	lsls	r0, r0, #2
 80018d0:	f04f 0c0f 	mov.w	ip, #15
 80018d4:	fa0c fc00 	lsl.w	ip, ip, r0
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018d8:	4083      	lsls	r3, r0
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018da:	ea27 070c 	bic.w	r7, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018de:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 80018e0:	6233      	str	r3, [r6, #32]
 80018e2:	e74d      	b.n	8001780 <HAL_GPIO_Init+0xcc>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80018e4:	f249 70f7 	movw	r0, #38903	; 0x97f7
 80018e8:	40d8      	lsrs	r0, r3
 80018ea:	07c0      	lsls	r0, r0, #31
 80018ec:	d4e8      	bmi.n	80018c0 <HAL_GPIO_Init+0x20c>
 80018ee:	e7dd      	b.n	80018ac <HAL_GPIO_Init+0x1f8>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80018f0:	21da      	movs	r1, #218	; 0xda
 80018f2:	480f      	ldr	r0, [pc, #60]	; (8001930 <HAL_GPIO_Init+0x27c>)
 80018f4:	f004 fae4 	bl	8005ec0 <assert_failed>
 80018f8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80018fc:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001900:	e7bd      	b.n	800187e <HAL_GPIO_Init+0x1ca>
 8001902:	2401      	movs	r4, #1
 8001904:	fa04 f101 	lsl.w	r1, r4, r1
 8001908:	4308      	orrs	r0, r1
 800190a:	e786      	b.n	800181a <HAL_GPIO_Init+0x166>
 800190c:	2402      	movs	r4, #2
 800190e:	fa04 f101 	lsl.w	r1, r4, r1
 8001912:	4308      	orrs	r0, r1
 8001914:	e781      	b.n	800181a <HAL_GPIO_Init+0x166>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001916:	21b6      	movs	r1, #182	; 0xb6
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_GPIO_Init+0x27c>)
 800191a:	f004 fad1 	bl	8005ec0 <assert_failed>
 800191e:	e715      	b.n	800174c <HAL_GPIO_Init+0x98>
 8001920:	2403      	movs	r4, #3
 8001922:	fa04 f101 	lsl.w	r1, r4, r1
 8001926:	4308      	orrs	r0, r1
 8001928:	e777      	b.n	800181a <HAL_GPIO_Init+0x166>
 800192a:	bf00      	nop
 800192c:	40020000 	.word	0x40020000
 8001930:	08008c9c 	.word	0x08008c9c
 8001934:	10110000 	.word	0x10110000
 8001938:	10220000 	.word	0x10220000
 800193c:	40023800 	.word	0x40023800
 8001940:	40020800 	.word	0x40020800
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40013c00 	.word	0x40013c00
 8001950:	40020400 	.word	0x40020400

08001954 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001954:	b570      	push	{r4, r5, r6, lr}
 8001956:	4606      	mov	r6, r0
 8001958:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800195a:	460c      	mov	r4, r1
 800195c:	b161      	cbz	r1, 8001978 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800195e:	2d01      	cmp	r5, #1
 8001960:	d803      	bhi.n	800196a <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 8001962:	b905      	cbnz	r5, 8001966 <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001964:	0424      	lsls	r4, r4, #16
 8001966:	61b4      	str	r4, [r6, #24]
  }
}
 8001968:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800196a:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <HAL_GPIO_WritePin+0x30>)
 8001970:	f004 faa6 	bl	8005ec0 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001974:	61b4      	str	r4, [r6, #24]
}
 8001976:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8001978:	f240 119f 	movw	r1, #415	; 0x19f
 800197c:	4801      	ldr	r0, [pc, #4]	; (8001984 <HAL_GPIO_WritePin+0x30>)
 800197e:	f004 fa9f 	bl	8005ec0 <assert_failed>
 8001982:	e7ec      	b.n	800195e <HAL_GPIO_WritePin+0xa>
 8001984:	08008c9c 	.word	0x08008c9c

08001988 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001988:	b538      	push	{r3, r4, r5, lr}
 800198a:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800198c:	460c      	mov	r4, r1
 800198e:	b131      	cbz	r1, 800199e <HAL_GPIO_TogglePin+0x16>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001990:	6943      	ldr	r3, [r0, #20]
 8001992:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8001996:	bf18      	it	ne
 8001998:	6181      	strne	r1, [r0, #24]
  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800199a:	d006      	beq.n	80019aa <HAL_GPIO_TogglePin+0x22>
  }
}
 800199c:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800199e:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80019a2:	4803      	ldr	r0, [pc, #12]	; (80019b0 <HAL_GPIO_TogglePin+0x28>)
 80019a4:	f004 fa8c 	bl	8005ec0 <assert_failed>
  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80019a8:	696b      	ldr	r3, [r5, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019aa:	0424      	lsls	r4, r4, #16
 80019ac:	61ac      	str	r4, [r5, #24]
}
 80019ae:	bd38      	pop	{r3, r4, r5, pc}
 80019b0:	08008c9c 	.word	0x08008c9c

080019b4 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop

080019b8 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019b8:	4a04      	ldr	r2, [pc, #16]	; (80019cc <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80019ba:	6951      	ldr	r1, [r2, #20]
 80019bc:	4201      	tst	r1, r0
 80019be:	d100      	bne.n	80019c2 <HAL_GPIO_EXTI_IRQHandler+0xa>
 80019c0:	4770      	bx	lr
{
 80019c2:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019c4:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019c6:	f7ff fff5 	bl	80019b4 <HAL_GPIO_EXTI_Callback>
}
 80019ca:	bd08      	pop	{r3, pc}
 80019cc:	40013c00 	.word	0x40013c00

080019d0 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80019d0:	2800      	cmp	r0, #0
 80019d2:	f000 81cc 	beq.w	8001d6e <HAL_RCC_OscConfig+0x39e>
{
 80019d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80019da:	6803      	ldr	r3, [r0, #0]
 80019dc:	2b0f      	cmp	r3, #15
{
 80019de:	b082      	sub	sp, #8
 80019e0:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80019e2:	f200 8139 	bhi.w	8001c58 <HAL_RCC_OscConfig+0x288>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019e6:	07dd      	lsls	r5, r3, #31
 80019e8:	d53a      	bpl.n	8001a60 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80019ea:	6863      	ldr	r3, [r4, #4]
 80019ec:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 80019f0:	d006      	beq.n	8001a00 <HAL_RCC_OscConfig+0x30>
 80019f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019f6:	d003      	beq.n	8001a00 <HAL_RCC_OscConfig+0x30>
 80019f8:	21ed      	movs	r1, #237	; 0xed
 80019fa:	48b2      	ldr	r0, [pc, #712]	; (8001cc4 <HAL_RCC_OscConfig+0x2f4>)
 80019fc:	f004 fa60 	bl	8005ec0 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a00:	4ab1      	ldr	r2, [pc, #708]	; (8001cc8 <HAL_RCC_OscConfig+0x2f8>)
 8001a02:	6893      	ldr	r3, [r2, #8]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	f000 8175 	beq.w	8001cf8 <HAL_RCC_OscConfig+0x328>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a0e:	6893      	ldr	r3, [r2, #8]
 8001a10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	f000 816b 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x320>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a1a:	6863      	ldr	r3, [r4, #4]
 8001a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a20:	f000 8174 	beq.w	8001d0c <HAL_RCC_OscConfig+0x33c>
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a28:	f000 8204 	beq.w	8001e34 <HAL_RCC_OscConfig+0x464>
 8001a2c:	4da6      	ldr	r5, [pc, #664]	; (8001cc8 <HAL_RCC_OscConfig+0x2f8>)
 8001a2e:	682a      	ldr	r2, [r5, #0]
 8001a30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a34:	602a      	str	r2, [r5, #0]
 8001a36:	682a      	ldr	r2, [r5, #0]
 8001a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a3c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	f040 8169 	bne.w	8001d16 <HAL_RCC_OscConfig+0x346>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a44:	f7ff fae8 	bl	8001018 <HAL_GetTick>
 8001a48:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4a:	e005      	b.n	8001a58 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fae4 	bl	8001018 <HAL_GetTick>
 8001a50:	1b80      	subs	r0, r0, r6
 8001a52:	2864      	cmp	r0, #100	; 0x64
 8001a54:	f200 817d 	bhi.w	8001d52 <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a58:	682b      	ldr	r3, [r5, #0]
 8001a5a:	039b      	lsls	r3, r3, #14
 8001a5c:	d4f6      	bmi.n	8001a4c <HAL_RCC_OscConfig+0x7c>
 8001a5e:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a60:	079f      	lsls	r7, r3, #30
 8001a62:	f100 80ca 	bmi.w	8001bfa <HAL_RCC_OscConfig+0x22a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a66:	071a      	lsls	r2, r3, #28
 8001a68:	d518      	bpl.n	8001a9c <HAL_RCC_OscConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001a6a:	6963      	ldr	r3, [r4, #20]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	f200 8120 	bhi.w	8001cb2 <HAL_RCC_OscConfig+0x2e2>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	f000 810d 	beq.w	8001c92 <HAL_RCC_OscConfig+0x2c2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a78:	4b94      	ldr	r3, [pc, #592]	; (8001ccc <HAL_RCC_OscConfig+0x2fc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a7a:	4d93      	ldr	r5, [pc, #588]	; (8001cc8 <HAL_RCC_OscConfig+0x2f8>)
      __HAL_RCC_LSI_ENABLE();
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001a80:	f7ff faca 	bl	8001018 <HAL_GetTick>
 8001a84:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a86:	e005      	b.n	8001a94 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a88:	f7ff fac6 	bl	8001018 <HAL_GetTick>
 8001a8c:	1b80      	subs	r0, r0, r6
 8001a8e:	2802      	cmp	r0, #2
 8001a90:	f200 815f 	bhi.w	8001d52 <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a94:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001a96:	079b      	lsls	r3, r3, #30
 8001a98:	d5f6      	bpl.n	8001a88 <HAL_RCC_OscConfig+0xb8>
 8001a9a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a9c:	075d      	lsls	r5, r3, #29
 8001a9e:	d545      	bpl.n	8001b2c <HAL_RCC_OscConfig+0x15c>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001aa0:	68a3      	ldr	r3, [r4, #8]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d906      	bls.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
 8001aa6:	2b05      	cmp	r3, #5
 8001aa8:	d004      	beq.n	8001ab4 <HAL_RCC_OscConfig+0xe4>
 8001aaa:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8001aae:	4885      	ldr	r0, [pc, #532]	; (8001cc4 <HAL_RCC_OscConfig+0x2f4>)
 8001ab0:	f004 fa06 	bl	8005ec0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ab4:	4a84      	ldr	r2, [pc, #528]	; (8001cc8 <HAL_RCC_OscConfig+0x2f8>)
 8001ab6:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ab8:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001abc:	f040 815f 	bne.w	8001d7e <HAL_RCC_OscConfig+0x3ae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	9301      	str	r3, [sp, #4]
 8001ad2:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001ad4:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad6:	4d7e      	ldr	r5, [pc, #504]	; (8001cd0 <HAL_RCC_OscConfig+0x300>)
 8001ad8:	682a      	ldr	r2, [r5, #0]
 8001ada:	05d0      	lsls	r0, r2, #23
 8001adc:	f140 8129 	bpl.w	8001d32 <HAL_RCC_OscConfig+0x362>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae0:	68a3      	ldr	r3, [r4, #8]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	f000 814d 	beq.w	8001d82 <HAL_RCC_OscConfig+0x3b2>
 8001ae8:	2b05      	cmp	r3, #5
 8001aea:	f000 81ad 	beq.w	8001e48 <HAL_RCC_OscConfig+0x478>
 8001aee:	4d76      	ldr	r5, [pc, #472]	; (8001cc8 <HAL_RCC_OscConfig+0x2f8>)
 8001af0:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001af2:	f022 0201 	bic.w	r2, r2, #1
 8001af6:	672a      	str	r2, [r5, #112]	; 0x70
 8001af8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001afa:	f022 0204 	bic.w	r2, r2, #4
 8001afe:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	f040 8143 	bne.w	8001d8c <HAL_RCC_OscConfig+0x3bc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b06:	f7ff fa87 	bl	8001018 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0a:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b0e:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b10:	e006      	b.n	8001b20 <HAL_RCC_OscConfig+0x150>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b12:	f7ff fa81 	bl	8001018 <HAL_GetTick>
 8001b16:	eba0 0008 	sub.w	r0, r0, r8
 8001b1a:	42b8      	cmp	r0, r7
 8001b1c:	f200 8119 	bhi.w	8001d52 <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b20:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b22:	079b      	lsls	r3, r3, #30
 8001b24:	d4f5      	bmi.n	8001b12 <HAL_RCC_OscConfig+0x142>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b26:	2e00      	cmp	r6, #0
 8001b28:	f040 8155 	bne.w	8001dd6 <HAL_RCC_OscConfig+0x406>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001b2c:	69a3      	ldr	r3, [r4, #24]
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	f200 80d4 	bhi.w	8001cdc <HAL_RCC_OscConfig+0x30c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d05c      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x222>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b38:	4a63      	ldr	r2, [pc, #396]	; (8001cc8 <HAL_RCC_OscConfig+0x2f8>)
 8001b3a:	6891      	ldr	r1, [r2, #8]
 8001b3c:	f001 010c 	and.w	r1, r1, #12
 8001b40:	2908      	cmp	r1, #8
 8001b42:	f000 809c 	beq.w	8001c7e <HAL_RCC_OscConfig+0x2ae>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	f040 8163 	bne.w	8001e12 <HAL_RCC_OscConfig+0x442>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001b4c:	69e3      	ldr	r3, [r4, #28]
 8001b4e:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8001b52:	d004      	beq.n	8001b5e <HAL_RCC_OscConfig+0x18e>
 8001b54:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001b58:	485a      	ldr	r0, [pc, #360]	; (8001cc4 <HAL_RCC_OscConfig+0x2f4>)
 8001b5a:	f004 f9b1 	bl	8005ec0 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001b5e:	6a23      	ldr	r3, [r4, #32]
 8001b60:	2b3f      	cmp	r3, #63	; 0x3f
 8001b62:	f200 8150 	bhi.w	8001e06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001b66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001b68:	3b32      	subs	r3, #50	; 0x32
 8001b6a:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8001b6e:	f200 8144 	bhi.w	8001dfa <HAL_RCC_OscConfig+0x42a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001b72:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b74:	2a08      	cmp	r2, #8
 8001b76:	f200 8134 	bhi.w	8001de2 <HAL_RCC_OscConfig+0x412>
 8001b7a:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8001b7e:	40d3      	lsrs	r3, r2
 8001b80:	07d8      	lsls	r0, r3, #31
 8001b82:	f140 812e 	bpl.w	8001de2 <HAL_RCC_OscConfig+0x412>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001b86:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001b88:	3b02      	subs	r3, #2
 8001b8a:	2b0d      	cmp	r3, #13
 8001b8c:	f200 812f 	bhi.w	8001dee <HAL_RCC_OscConfig+0x41e>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b90:	4b50      	ldr	r3, [pc, #320]	; (8001cd4 <HAL_RCC_OscConfig+0x304>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b92:	4d4d      	ldr	r5, [pc, #308]	; (8001cc8 <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_PLL_DISABLE();
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b98:	f7ff fa3e 	bl	8001018 <HAL_GetTick>
 8001b9c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b9e:	e005      	b.n	8001bac <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba0:	f7ff fa3a 	bl	8001018 <HAL_GetTick>
 8001ba4:	1b80      	subs	r0, r0, r6
 8001ba6:	2802      	cmp	r0, #2
 8001ba8:	f200 80d3 	bhi.w	8001d52 <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bac:	682b      	ldr	r3, [r5, #0]
 8001bae:	0199      	lsls	r1, r3, #6
 8001bb0:	d4f6      	bmi.n	8001ba0 <HAL_RCC_OscConfig+0x1d0>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb2:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8001bb6:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001bba:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bbc:	4c42      	ldr	r4, [pc, #264]	; (8001cc8 <HAL_RCC_OscConfig+0x2f8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bbe:	4333      	orrs	r3, r6
 8001bc0:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001bc4:	0852      	lsrs	r2, r2, #1
 8001bc6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001bca:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001bcc:	4941      	ldr	r1, [pc, #260]	; (8001cd4 <HAL_RCC_OscConfig+0x304>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001bd2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bd4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bd6:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8001bd8:	f7ff fa1e 	bl	8001018 <HAL_GetTick>
 8001bdc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bde:	e005      	b.n	8001bec <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be0:	f7ff fa1a 	bl	8001018 <HAL_GetTick>
 8001be4:	1b40      	subs	r0, r0, r5
 8001be6:	2802      	cmp	r0, #2
 8001be8:	f200 80b3 	bhi.w	8001d52 <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	019a      	lsls	r2, r3, #6
 8001bf0:	d5f6      	bpl.n	8001be0 <HAL_RCC_OscConfig+0x210>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001bf2:	2000      	movs	r0, #0
}
 8001bf4:	b002      	add	sp, #8
 8001bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001bfa:	68e3      	ldr	r3, [r4, #12]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d842      	bhi.n	8001c86 <HAL_RCC_OscConfig+0x2b6>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001c00:	6923      	ldr	r3, [r4, #16]
 8001c02:	2b1f      	cmp	r3, #31
 8001c04:	f200 80b5 	bhi.w	8001d72 <HAL_RCC_OscConfig+0x3a2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c08:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <HAL_RCC_OscConfig+0x2f8>)
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	f012 0f0c 	tst.w	r2, #12
 8001c10:	d02e      	beq.n	8001c70 <HAL_RCC_OscConfig+0x2a0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c18:	2a08      	cmp	r2, #8
 8001c1a:	d026      	beq.n	8001c6a <HAL_RCC_OscConfig+0x29a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c1c:	68e3      	ldr	r3, [r4, #12]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	f000 80c8 	beq.w	8001db4 <HAL_RCC_OscConfig+0x3e4>
        __HAL_RCC_HSI_ENABLE();
 8001c24:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c26:	4d28      	ldr	r5, [pc, #160]	; (8001cc8 <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_HSI_ENABLE();
 8001c28:	2201      	movs	r2, #1
 8001c2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c2c:	f7ff f9f4 	bl	8001018 <HAL_GetTick>
 8001c30:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c32:	e005      	b.n	8001c40 <HAL_RCC_OscConfig+0x270>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c34:	f7ff f9f0 	bl	8001018 <HAL_GetTick>
 8001c38:	1b80      	subs	r0, r0, r6
 8001c3a:	2802      	cmp	r0, #2
 8001c3c:	f200 8089 	bhi.w	8001d52 <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c40:	682b      	ldr	r3, [r5, #0]
 8001c42:	0798      	lsls	r0, r3, #30
 8001c44:	d5f6      	bpl.n	8001c34 <HAL_RCC_OscConfig+0x264>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c46:	682b      	ldr	r3, [r5, #0]
 8001c48:	6922      	ldr	r2, [r4, #16]
 8001c4a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c4e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c52:	602b      	str	r3, [r5, #0]
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	e706      	b.n	8001a66 <HAL_RCC_OscConfig+0x96>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001c58:	21e8      	movs	r1, #232	; 0xe8
 8001c5a:	481a      	ldr	r0, [pc, #104]	; (8001cc4 <HAL_RCC_OscConfig+0x2f4>)
 8001c5c:	f004 f930 	bl	8005ec0 <assert_failed>
 8001c60:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c62:	07dd      	lsls	r5, r3, #31
 8001c64:	f57f aefc 	bpl.w	8001a60 <HAL_RCC_OscConfig+0x90>
 8001c68:	e6bf      	b.n	80019ea <HAL_RCC_OscConfig+0x1a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	025e      	lsls	r6, r3, #9
 8001c6e:	d4d5      	bmi.n	8001c1c <HAL_RCC_OscConfig+0x24c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <HAL_RCC_OscConfig+0x2f8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	079d      	lsls	r5, r3, #30
 8001c76:	d570      	bpl.n	8001d5a <HAL_RCC_OscConfig+0x38a>
 8001c78:	68e3      	ldr	r3, [r4, #12]
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d06d      	beq.n	8001d5a <HAL_RCC_OscConfig+0x38a>
    return HAL_ERROR;
 8001c7e:	2001      	movs	r0, #1
}
 8001c80:	b002      	add	sp, #8
 8001c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001c86:	f240 111f 	movw	r1, #287	; 0x11f
 8001c8a:	480e      	ldr	r0, [pc, #56]	; (8001cc4 <HAL_RCC_OscConfig+0x2f4>)
 8001c8c:	f004 f918 	bl	8005ec0 <assert_failed>
 8001c90:	e7b6      	b.n	8001c00 <HAL_RCC_OscConfig+0x230>
      __HAL_RCC_LSI_DISABLE();
 8001c92:	4a0e      	ldr	r2, [pc, #56]	; (8001ccc <HAL_RCC_OscConfig+0x2fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c94:	4d0c      	ldr	r5, [pc, #48]	; (8001cc8 <HAL_RCC_OscConfig+0x2f8>)
      __HAL_RCC_LSI_DISABLE();
 8001c96:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001c98:	f7ff f9be 	bl	8001018 <HAL_GetTick>
 8001c9c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c9e:	e004      	b.n	8001caa <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca0:	f7ff f9ba 	bl	8001018 <HAL_GetTick>
 8001ca4:	1b80      	subs	r0, r0, r6
 8001ca6:	2802      	cmp	r0, #2
 8001ca8:	d853      	bhi.n	8001d52 <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001caa:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001cac:	079f      	lsls	r7, r3, #30
 8001cae:	d4f7      	bmi.n	8001ca0 <HAL_RCC_OscConfig+0x2d0>
 8001cb0:	e6f3      	b.n	8001a9a <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001cb2:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001cb6:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <HAL_RCC_OscConfig+0x2f4>)
 8001cb8:	f004 f902 	bl	8005ec0 <assert_failed>
 8001cbc:	6963      	ldr	r3, [r4, #20]
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0e7      	beq.n	8001c92 <HAL_RCC_OscConfig+0x2c2>
 8001cc2:	e6d9      	b.n	8001a78 <HAL_RCC_OscConfig+0xa8>
 8001cc4:	08008cd8 	.word	0x08008cd8
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	42470e80 	.word	0x42470e80
 8001cd0:	40007000 	.word	0x40007000
 8001cd4:	42470060 	.word	0x42470060
 8001cd8:	42470000 	.word	0x42470000
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001cdc:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001ce0:	485e      	ldr	r0, [pc, #376]	; (8001e5c <HAL_RCC_OscConfig+0x48c>)
 8001ce2:	f004 f8ed 	bl	8005ec0 <assert_failed>
 8001ce6:	69a3      	ldr	r3, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f47f af25 	bne.w	8001b38 <HAL_RCC_OscConfig+0x168>
 8001cee:	e780      	b.n	8001bf2 <HAL_RCC_OscConfig+0x222>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cf0:	6853      	ldr	r3, [r2, #4]
 8001cf2:	0258      	lsls	r0, r3, #9
 8001cf4:	f57f ae91 	bpl.w	8001a1a <HAL_RCC_OscConfig+0x4a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	4b59      	ldr	r3, [pc, #356]	; (8001e60 <HAL_RCC_OscConfig+0x490>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	0399      	lsls	r1, r3, #14
 8001cfe:	f57f aeae 	bpl.w	8001a5e <HAL_RCC_OscConfig+0x8e>
 8001d02:	6863      	ldr	r3, [r4, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f47f aeaa 	bne.w	8001a5e <HAL_RCC_OscConfig+0x8e>
 8001d0a:	e7b8      	b.n	8001c7e <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0c:	4a54      	ldr	r2, [pc, #336]	; (8001e60 <HAL_RCC_OscConfig+0x490>)
 8001d0e:	6813      	ldr	r3, [r2, #0]
 8001d10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d14:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d16:	f7ff f97f 	bl	8001018 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	4d51      	ldr	r5, [pc, #324]	; (8001e60 <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 8001d1c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1e:	e004      	b.n	8001d2a <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d20:	f7ff f97a 	bl	8001018 <HAL_GetTick>
 8001d24:	1b80      	subs	r0, r0, r6
 8001d26:	2864      	cmp	r0, #100	; 0x64
 8001d28:	d813      	bhi.n	8001d52 <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	682b      	ldr	r3, [r5, #0]
 8001d2c:	039a      	lsls	r2, r3, #14
 8001d2e:	d5f7      	bpl.n	8001d20 <HAL_RCC_OscConfig+0x350>
 8001d30:	e695      	b.n	8001a5e <HAL_RCC_OscConfig+0x8e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d32:	682a      	ldr	r2, [r5, #0]
 8001d34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d38:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f96d 	bl	8001018 <HAL_GetTick>
 8001d3e:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d40:	682b      	ldr	r3, [r5, #0]
 8001d42:	05d9      	lsls	r1, r3, #23
 8001d44:	f53f aecc 	bmi.w	8001ae0 <HAL_RCC_OscConfig+0x110>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d48:	f7ff f966 	bl	8001018 <HAL_GetTick>
 8001d4c:	1bc0      	subs	r0, r0, r7
 8001d4e:	2802      	cmp	r0, #2
 8001d50:	d9f6      	bls.n	8001d40 <HAL_RCC_OscConfig+0x370>
            return HAL_TIMEOUT;
 8001d52:	2003      	movs	r0, #3
}
 8001d54:	b002      	add	sp, #8
 8001d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	4a41      	ldr	r2, [pc, #260]	; (8001e60 <HAL_RCC_OscConfig+0x490>)
 8001d5c:	6921      	ldr	r1, [r4, #16]
 8001d5e:	6813      	ldr	r3, [r2, #0]
 8001d60:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001d64:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001d68:	6013      	str	r3, [r2, #0]
 8001d6a:	6823      	ldr	r3, [r4, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6c:	e67b      	b.n	8001a66 <HAL_RCC_OscConfig+0x96>
    return HAL_ERROR;
 8001d6e:	2001      	movs	r0, #1
}
 8001d70:	4770      	bx	lr
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001d72:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001d76:	4839      	ldr	r0, [pc, #228]	; (8001e5c <HAL_RCC_OscConfig+0x48c>)
 8001d78:	f004 f8a2 	bl	8005ec0 <assert_failed>
 8001d7c:	e744      	b.n	8001c08 <HAL_RCC_OscConfig+0x238>
    FlagStatus       pwrclkchanged = RESET;
 8001d7e:	2600      	movs	r6, #0
 8001d80:	e6a9      	b.n	8001ad6 <HAL_RCC_OscConfig+0x106>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d82:	4a37      	ldr	r2, [pc, #220]	; (8001e60 <HAL_RCC_OscConfig+0x490>)
 8001d84:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d8c:	f7ff f944 	bl	8001018 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d90:	4d33      	ldr	r5, [pc, #204]	; (8001e60 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8001d92:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d94:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d98:	e005      	b.n	8001da6 <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d9a:	f7ff f93d 	bl	8001018 <HAL_GetTick>
 8001d9e:	eba0 0008 	sub.w	r0, r0, r8
 8001da2:	42b8      	cmp	r0, r7
 8001da4:	d8d5      	bhi.n	8001d52 <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001da8:	079a      	lsls	r2, r3, #30
 8001daa:	d5f6      	bpl.n	8001d9a <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 8001dac:	2e00      	cmp	r6, #0
 8001dae:	f43f aebd 	beq.w	8001b2c <HAL_RCC_OscConfig+0x15c>
 8001db2:	e010      	b.n	8001dd6 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI_DISABLE();
 8001db4:	4a2b      	ldr	r2, [pc, #172]	; (8001e64 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db6:	4d2a      	ldr	r5, [pc, #168]	; (8001e60 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_HSI_DISABLE();
 8001db8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001dba:	f7ff f92d 	bl	8001018 <HAL_GetTick>
 8001dbe:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc0:	e004      	b.n	8001dcc <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dc2:	f7ff f929 	bl	8001018 <HAL_GetTick>
 8001dc6:	1b80      	subs	r0, r0, r6
 8001dc8:	2802      	cmp	r0, #2
 8001dca:	d8c2      	bhi.n	8001d52 <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dcc:	682b      	ldr	r3, [r5, #0]
 8001dce:	0799      	lsls	r1, r3, #30
 8001dd0:	d4f7      	bmi.n	8001dc2 <HAL_RCC_OscConfig+0x3f2>
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	e647      	b.n	8001a66 <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dd6:	4a22      	ldr	r2, [pc, #136]	; (8001e60 <HAL_RCC_OscConfig+0x490>)
 8001dd8:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dde:	6413      	str	r3, [r2, #64]	; 0x40
 8001de0:	e6a4      	b.n	8001b2c <HAL_RCC_OscConfig+0x15c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001de2:	f240 11db 	movw	r1, #475	; 0x1db
 8001de6:	481d      	ldr	r0, [pc, #116]	; (8001e5c <HAL_RCC_OscConfig+0x48c>)
 8001de8:	f004 f86a 	bl	8005ec0 <assert_failed>
 8001dec:	e6cb      	b.n	8001b86 <HAL_RCC_OscConfig+0x1b6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001dee:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001df2:	481a      	ldr	r0, [pc, #104]	; (8001e5c <HAL_RCC_OscConfig+0x48c>)
 8001df4:	f004 f864 	bl	8005ec0 <assert_failed>
 8001df8:	e6ca      	b.n	8001b90 <HAL_RCC_OscConfig+0x1c0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001dfa:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8001dfe:	4817      	ldr	r0, [pc, #92]	; (8001e5c <HAL_RCC_OscConfig+0x48c>)
 8001e00:	f004 f85e 	bl	8005ec0 <assert_failed>
 8001e04:	e6b5      	b.n	8001b72 <HAL_RCC_OscConfig+0x1a2>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001e06:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001e0a:	4814      	ldr	r0, [pc, #80]	; (8001e5c <HAL_RCC_OscConfig+0x48c>)
 8001e0c:	f004 f858 	bl	8005ec0 <assert_failed>
 8001e10:	e6a9      	b.n	8001b66 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_PLL_DISABLE();
 8001e12:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <HAL_RCC_OscConfig+0x498>)
 8001e14:	2100      	movs	r1, #0
 8001e16:	6019      	str	r1, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e18:	4614      	mov	r4, r2
        tickstart = HAL_GetTick();
 8001e1a:	f7ff f8fd 	bl	8001018 <HAL_GetTick>
 8001e1e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e20:	e004      	b.n	8001e2c <HAL_RCC_OscConfig+0x45c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e22:	f7ff f8f9 	bl	8001018 <HAL_GetTick>
 8001e26:	1b40      	subs	r0, r0, r5
 8001e28:	2802      	cmp	r0, #2
 8001e2a:	d892      	bhi.n	8001d52 <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	019b      	lsls	r3, r3, #6
 8001e30:	d4f7      	bmi.n	8001e22 <HAL_RCC_OscConfig+0x452>
 8001e32:	e6de      	b.n	8001bf2 <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e34:	4b0a      	ldr	r3, [pc, #40]	; (8001e60 <HAL_RCC_OscConfig+0x490>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e3c:	601a      	str	r2, [r3, #0]
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	e766      	b.n	8001d16 <HAL_RCC_OscConfig+0x346>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <HAL_RCC_OscConfig+0x490>)
 8001e4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e4c:	f042 0204 	orr.w	r2, r2, #4
 8001e50:	671a      	str	r2, [r3, #112]	; 0x70
 8001e52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001e54:	f042 0201 	orr.w	r2, r2, #1
 8001e58:	671a      	str	r2, [r3, #112]	; 0x70
 8001e5a:	e797      	b.n	8001d8c <HAL_RCC_OscConfig+0x3bc>
 8001e5c:	08008cd8 	.word	0x08008cd8
 8001e60:	40023800 	.word	0x40023800
 8001e64:	42470000 	.word	0x42470000
 8001e68:	42470060 	.word	0x42470060

08001e6c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e6c:	4917      	ldr	r1, [pc, #92]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x60>)
{
 8001e6e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e70:	688b      	ldr	r3, [r1, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d01b      	beq.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x46>
 8001e7a:	2b08      	cmp	r3, #8
 8001e7c:	d117      	bne.n	8001eae <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e7e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e80:	684b      	ldr	r3, [r1, #4]
 8001e82:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e8a:	d114      	bne.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8c:	6849      	ldr	r1, [r1, #4]
 8001e8e:	4810      	ldr	r0, [pc, #64]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x64>)
 8001e90:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e94:	fba1 0100 	umull	r0, r1, r1, r0
 8001e98:	f7fe ff00 	bl	8000c9c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001e9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ecc <HAL_RCC_GetSysClockFreq+0x60>)
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001ea8:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001eac:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001eae:	4808      	ldr	r0, [pc, #32]	; (8001ed0 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001eb0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001eb2:	4808      	ldr	r0, [pc, #32]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001eb4:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eb6:	684b      	ldr	r3, [r1, #4]
 8001eb8:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <HAL_RCC_GetSysClockFreq+0x68>)
 8001eba:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001ebe:	fba3 0100 	umull	r0, r1, r3, r0
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f7fe feea 	bl	8000c9c <__aeabi_uldivmod>
 8001ec8:	e7e8      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x30>
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	00f42400 	.word	0x00f42400
 8001ed4:	007a1200 	.word	0x007a1200

08001ed8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001ed8:	2800      	cmp	r0, #0
 8001eda:	f000 80f0 	beq.w	80020be <HAL_RCC_ClockConfig+0x1e6>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001ede:	6803      	ldr	r3, [r0, #0]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	2b0e      	cmp	r3, #14
{
 8001ee4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ee8:	4604      	mov	r4, r0
 8001eea:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001eec:	f200 80d1 	bhi.w	8002092 <HAL_RCC_ClockConfig+0x1ba>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001ef0:	2d07      	cmp	r5, #7
 8001ef2:	f200 80c1 	bhi.w	8002078 <HAL_RCC_ClockConfig+0x1a0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef6:	4a76      	ldr	r2, [pc, #472]	; (80020d0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef8:	6813      	ldr	r3, [r2, #0]
 8001efa:	f003 030f 	and.w	r3, r3, #15
 8001efe:	42ab      	cmp	r3, r5
 8001f00:	d209      	bcs.n	8001f16 <HAL_RCC_ClockConfig+0x3e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f02:	b2eb      	uxtb	r3, r5
 8001f04:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	6813      	ldr	r3, [r2, #0]
 8001f08:	f003 030f 	and.w	r3, r3, #15
 8001f0c:	42ab      	cmp	r3, r5
 8001f0e:	d002      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x3e>
    return HAL_ERROR;
 8001f10:	2001      	movs	r0, #1
}
 8001f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f16:	6823      	ldr	r3, [r4, #0]
 8001f18:	0798      	lsls	r0, r3, #30
 8001f1a:	d52c      	bpl.n	8001f76 <HAL_RCC_ClockConfig+0x9e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f1c:	0759      	lsls	r1, r3, #29
 8001f1e:	d504      	bpl.n	8001f2a <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f20:	496c      	ldr	r1, [pc, #432]	; (80020d4 <HAL_RCC_ClockConfig+0x1fc>)
 8001f22:	688a      	ldr	r2, [r1, #8]
 8001f24:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001f28:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f2a:	071a      	lsls	r2, r3, #28
 8001f2c:	d504      	bpl.n	8001f38 <HAL_RCC_ClockConfig+0x60>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f2e:	4969      	ldr	r1, [pc, #420]	; (80020d4 <HAL_RCC_ClockConfig+0x1fc>)
 8001f30:	688a      	ldr	r2, [r1, #8]
 8001f32:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001f36:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001f38:	68a1      	ldr	r1, [r4, #8]
 8001f3a:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 8001f3e:	d014      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x92>
 8001f40:	f021 0220 	bic.w	r2, r1, #32
 8001f44:	2a90      	cmp	r2, #144	; 0x90
 8001f46:	d010      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x92>
 8001f48:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 8001f4c:	2aa0      	cmp	r2, #160	; 0xa0
 8001f4e:	d00c      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x92>
 8001f50:	f021 0210 	bic.w	r2, r1, #16
 8001f54:	2ac0      	cmp	r2, #192	; 0xc0
 8001f56:	d008      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x92>
 8001f58:	29f0      	cmp	r1, #240	; 0xf0
 8001f5a:	d006      	beq.n	8001f6a <HAL_RCC_ClockConfig+0x92>
 8001f5c:	f44f 7119 	mov.w	r1, #612	; 0x264
 8001f60:	485d      	ldr	r0, [pc, #372]	; (80020d8 <HAL_RCC_ClockConfig+0x200>)
 8001f62:	f003 ffad 	bl	8005ec0 <assert_failed>
 8001f66:	68a1      	ldr	r1, [r4, #8]
 8001f68:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f6a:	485a      	ldr	r0, [pc, #360]	; (80020d4 <HAL_RCC_ClockConfig+0x1fc>)
 8001f6c:	6882      	ldr	r2, [r0, #8]
 8001f6e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f72:	430a      	orrs	r2, r1
 8001f74:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	07df      	lsls	r7, r3, #31
 8001f78:	d528      	bpl.n	8001fcc <HAL_RCC_ClockConfig+0xf4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001f7a:	6863      	ldr	r3, [r4, #4]
 8001f7c:	2b03      	cmp	r3, #3
 8001f7e:	f200 8097 	bhi.w	80020b0 <HAL_RCC_ClockConfig+0x1d8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	f000 808e 	beq.w	80020a4 <HAL_RCC_ClockConfig+0x1cc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f88:	1e9a      	subs	r2, r3, #2
 8001f8a:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f8c:	4a51      	ldr	r2, [pc, #324]	; (80020d4 <HAL_RCC_ClockConfig+0x1fc>)
 8001f8e:	6812      	ldr	r2, [r2, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f90:	f240 8099 	bls.w	80020c6 <HAL_RCC_ClockConfig+0x1ee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f94:	0791      	lsls	r1, r2, #30
 8001f96:	d5bb      	bpl.n	8001f10 <HAL_RCC_ClockConfig+0x38>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f98:	4e4e      	ldr	r6, [pc, #312]	; (80020d4 <HAL_RCC_ClockConfig+0x1fc>)
 8001f9a:	68b2      	ldr	r2, [r6, #8]
 8001f9c:	f022 0203 	bic.w	r2, r2, #3
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001fa4:	f7ff f838 	bl	8001018 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa8:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001fac:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fae:	e006      	b.n	8001fbe <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fb0:	f7ff f832 	bl	8001018 <HAL_GetTick>
 8001fb4:	eba0 0008 	sub.w	r0, r0, r8
 8001fb8:	42b8      	cmp	r0, r7
 8001fba:	f200 8082 	bhi.w	80020c2 <HAL_RCC_ClockConfig+0x1ea>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fbe:	68b3      	ldr	r3, [r6, #8]
 8001fc0:	6862      	ldr	r2, [r4, #4]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
 8001fc6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001fca:	d1f1      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xd8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fcc:	4a40      	ldr	r2, [pc, #256]	; (80020d0 <HAL_RCC_ClockConfig+0x1f8>)
 8001fce:	6813      	ldr	r3, [r2, #0]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	42ab      	cmp	r3, r5
 8001fd6:	d906      	bls.n	8001fe6 <HAL_RCC_ClockConfig+0x10e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fd8:	b2eb      	uxtb	r3, r5
 8001fda:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fdc:	6813      	ldr	r3, [r2, #0]
 8001fde:	f003 030f 	and.w	r3, r3, #15
 8001fe2:	42ab      	cmp	r3, r5
 8001fe4:	d194      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x38>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe6:	6823      	ldr	r3, [r4, #0]
 8001fe8:	075a      	lsls	r2, r3, #29
 8001fea:	d518      	bpl.n	800201e <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001fec:	68e1      	ldr	r1, [r4, #12]
 8001fee:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8001ff2:	d00e      	beq.n	8002012 <HAL_RCC_ClockConfig+0x13a>
 8001ff4:	f421 6200 	bic.w	r2, r1, #2048	; 0x800
 8001ff8:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x13a>
 8001ffe:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 8002002:	d006      	beq.n	8002012 <HAL_RCC_ClockConfig+0x13a>
 8002004:	f240 21a9 	movw	r1, #681	; 0x2a9
 8002008:	4833      	ldr	r0, [pc, #204]	; (80020d8 <HAL_RCC_ClockConfig+0x200>)
 800200a:	f003 ff59 	bl	8005ec0 <assert_failed>
 800200e:	68e1      	ldr	r1, [r4, #12]
 8002010:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002012:	4830      	ldr	r0, [pc, #192]	; (80020d4 <HAL_RCC_ClockConfig+0x1fc>)
 8002014:	6882      	ldr	r2, [r0, #8]
 8002016:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 800201a:	430a      	orrs	r2, r1
 800201c:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800201e:	071b      	lsls	r3, r3, #28
 8002020:	d518      	bpl.n	8002054 <HAL_RCC_ClockConfig+0x17c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002022:	6922      	ldr	r2, [r4, #16]
 8002024:	f432 5380 	bics.w	r3, r2, #4096	; 0x1000
 8002028:	d00d      	beq.n	8002046 <HAL_RCC_ClockConfig+0x16e>
 800202a:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800202e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002032:	d008      	beq.n	8002046 <HAL_RCC_ClockConfig+0x16e>
 8002034:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8002038:	d005      	beq.n	8002046 <HAL_RCC_ClockConfig+0x16e>
 800203a:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 800203e:	4826      	ldr	r0, [pc, #152]	; (80020d8 <HAL_RCC_ClockConfig+0x200>)
 8002040:	f003 ff3e 	bl	8005ec0 <assert_failed>
 8002044:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002046:	4923      	ldr	r1, [pc, #140]	; (80020d4 <HAL_RCC_ClockConfig+0x1fc>)
 8002048:	688b      	ldr	r3, [r1, #8]
 800204a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800204e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002052:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002054:	f7ff ff0a 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
 8002058:	4b1e      	ldr	r3, [pc, #120]	; (80020d4 <HAL_RCC_ClockConfig+0x1fc>)
 800205a:	4920      	ldr	r1, [pc, #128]	; (80020dc <HAL_RCC_ClockConfig+0x204>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	4a20      	ldr	r2, [pc, #128]	; (80020e0 <HAL_RCC_ClockConfig+0x208>)
 8002060:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002064:	5ccb      	ldrb	r3, [r1, r3]
 8002066:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 800206a:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800206c:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800206e:	f7fe ff95 	bl	8000f9c <HAL_InitTick>
  return HAL_OK;
 8002072:	2000      	movs	r0, #0
}
 8002074:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 8002078:	f240 2141 	movw	r1, #577	; 0x241
 800207c:	4816      	ldr	r0, [pc, #88]	; (80020d8 <HAL_RCC_ClockConfig+0x200>)
 800207e:	f003 ff1f 	bl	8005ec0 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002082:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <HAL_RCC_ClockConfig+0x1f8>)
 8002084:	6813      	ldr	r3, [r2, #0]
 8002086:	f003 030f 	and.w	r3, r3, #15
 800208a:	42ab      	cmp	r3, r5
 800208c:	f4ff af39 	bcc.w	8001f02 <HAL_RCC_ClockConfig+0x2a>
 8002090:	e741      	b.n	8001f16 <HAL_RCC_ClockConfig+0x3e>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8002092:	f44f 7110 	mov.w	r1, #576	; 0x240
 8002096:	4810      	ldr	r0, [pc, #64]	; (80020d8 <HAL_RCC_ClockConfig+0x200>)
 8002098:	f003 ff12 	bl	8005ec0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800209c:	2d07      	cmp	r5, #7
 800209e:	f67f af2a 	bls.w	8001ef6 <HAL_RCC_ClockConfig+0x1e>
 80020a2:	e7e9      	b.n	8002078 <HAL_RCC_ClockConfig+0x1a0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a4:	4a0b      	ldr	r2, [pc, #44]	; (80020d4 <HAL_RCC_ClockConfig+0x1fc>)
 80020a6:	6812      	ldr	r2, [r2, #0]
 80020a8:	0396      	lsls	r6, r2, #14
 80020aa:	f53f af75 	bmi.w	8001f98 <HAL_RCC_ClockConfig+0xc0>
 80020ae:	e72f      	b.n	8001f10 <HAL_RCC_ClockConfig+0x38>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80020b0:	f240 216b 	movw	r1, #619	; 0x26b
 80020b4:	4808      	ldr	r0, [pc, #32]	; (80020d8 <HAL_RCC_ClockConfig+0x200>)
 80020b6:	f003 ff03 	bl	8005ec0 <assert_failed>
 80020ba:	6863      	ldr	r3, [r4, #4]
 80020bc:	e761      	b.n	8001f82 <HAL_RCC_ClockConfig+0xaa>
    return HAL_ERROR;
 80020be:	2001      	movs	r0, #1
}
 80020c0:	4770      	bx	lr
        return HAL_TIMEOUT;
 80020c2:	2003      	movs	r0, #3
 80020c4:	e725      	b.n	8001f12 <HAL_RCC_ClockConfig+0x3a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c6:	0190      	lsls	r0, r2, #6
 80020c8:	f53f af66 	bmi.w	8001f98 <HAL_RCC_ClockConfig+0xc0>
 80020cc:	e720      	b.n	8001f10 <HAL_RCC_ClockConfig+0x38>
 80020ce:	bf00      	nop
 80020d0:	40023c00 	.word	0x40023c00
 80020d4:	40023800 	.word	0x40023800
 80020d8:	08008cd8 	.word	0x08008cd8
 80020dc:	08009080 	.word	0x08009080
 80020e0:	2000007c 	.word	0x2000007c

080020e4 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80020e6:	4a05      	ldr	r2, [pc, #20]	; (80020fc <HAL_RCC_GetPCLK1Freq+0x18>)
 80020e8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80020ea:	4905      	ldr	r1, [pc, #20]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80020ec:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80020f0:	6808      	ldr	r0, [r1, #0]
 80020f2:	5cd3      	ldrb	r3, [r2, r3]
}
 80020f4:	40d8      	lsrs	r0, r3
 80020f6:	4770      	bx	lr
 80020f8:	40023800 	.word	0x40023800
 80020fc:	08009090 	.word	0x08009090
 8002100:	2000007c 	.word	0x2000007c

08002104 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002104:	4b04      	ldr	r3, [pc, #16]	; (8002118 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002106:	4a05      	ldr	r2, [pc, #20]	; (800211c <HAL_RCC_GetPCLK2Freq+0x18>)
 8002108:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800210a:	4905      	ldr	r1, [pc, #20]	; (8002120 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800210c:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002110:	6808      	ldr	r0, [r1, #0]
 8002112:	5cd3      	ldrb	r3, [r2, r3]
}
 8002114:	40d8      	lsrs	r0, r3
 8002116:	4770      	bx	lr
 8002118:	40023800 	.word	0x40023800
 800211c:	08009090 	.word	0x08009090
 8002120:	2000007c 	.word	0x2000007c

08002124 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002124:	2800      	cmp	r0, #0
 8002126:	f000 8107 	beq.w	8002338 <HAL_UART_Init+0x214>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800212a:	6982      	ldr	r2, [r0, #24]
{
 800212c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002130:	4604      	mov	r4, r0
 8002132:	6803      	ldr	r3, [r0, #0]
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002134:	2a00      	cmp	r2, #0
 8002136:	f000 80eb 	beq.w	8002310 <HAL_UART_Init+0x1ec>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800213a:	49d7      	ldr	r1, [pc, #860]	; (8002498 <HAL_UART_Init+0x374>)
 800213c:	428b      	cmp	r3, r1
 800213e:	f000 81f1 	beq.w	8002524 <HAL_UART_Init+0x400>
 8002142:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 8002146:	428b      	cmp	r3, r1
 8002148:	f000 81ec 	beq.w	8002524 <HAL_UART_Init+0x400>
 800214c:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 8002150:	428b      	cmp	r3, r1
 8002152:	f000 81e7 	beq.w	8002524 <HAL_UART_Init+0x400>
 8002156:	f240 1149 	movw	r1, #329	; 0x149
 800215a:	48d0      	ldr	r0, [pc, #832]	; (800249c <HAL_UART_Init+0x378>)
 800215c:	f003 feb0 	bl	8005ec0 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002160:	69a2      	ldr	r2, [r4, #24]
 8002162:	2a00      	cmp	r2, #0
 8002164:	f040 81de 	bne.w	8002524 <HAL_UART_Init+0x400>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002168:	68a3      	ldr	r3, [r4, #8]
 800216a:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 800216e:	d004      	beq.n	800217a <HAL_UART_Init+0x56>
 8002170:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8002174:	48c9      	ldr	r0, [pc, #804]	; (800249c <HAL_UART_Init+0x378>)
 8002176:	f003 fea3 	bl	8005ec0 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 800217a:	69e3      	ldr	r3, [r4, #28]
 800217c:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8002180:	d004      	beq.n	800218c <HAL_UART_Init+0x68>
 8002182:	f240 1151 	movw	r1, #337	; 0x151
 8002186:	48c5      	ldr	r0, [pc, #788]	; (800249c <HAL_UART_Init+0x378>)
 8002188:	f003 fe9a 	bl	8005ec0 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 800218c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002190:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 8172 	beq.w	800247e <HAL_UART_Init+0x35a>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800219a:	2324      	movs	r3, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800219c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800219e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021a2:	68d3      	ldr	r3, [r2, #12]
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80021a4:	6860      	ldr	r0, [r4, #4]
 80021a6:	49be      	ldr	r1, [pc, #760]	; (80024a0 <HAL_UART_Init+0x37c>)
  __HAL_UART_DISABLE(huart);
 80021a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80021ac:	4288      	cmp	r0, r1
  __HAL_UART_DISABLE(huart);
 80021ae:	60d3      	str	r3, [r2, #12]
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80021b0:	f200 815f 	bhi.w	8002472 <HAL_UART_Init+0x34e>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80021b4:	68e3      	ldr	r3, [r4, #12]
 80021b6:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80021ba:	d004      	beq.n	80021c6 <HAL_UART_Init+0xa2>
 80021bc:	f640 31e6 	movw	r1, #3046	; 0xbe6
 80021c0:	48b6      	ldr	r0, [pc, #728]	; (800249c <HAL_UART_Init+0x378>)
 80021c2:	f003 fe7d 	bl	8005ec0 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80021c6:	6923      	ldr	r3, [r4, #16]
 80021c8:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80021cc:	d003      	beq.n	80021d6 <HAL_UART_Init+0xb2>
 80021ce:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80021d2:	f040 815a 	bne.w	800248a <HAL_UART_Init+0x366>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80021d6:	6960      	ldr	r0, [r4, #20]
 80021d8:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80021dc:	4218      	tst	r0, r3
 80021de:	d100      	bne.n	80021e2 <HAL_UART_Init+0xbe>
 80021e0:	b928      	cbnz	r0, 80021ee <HAL_UART_Init+0xca>
 80021e2:	48ae      	ldr	r0, [pc, #696]	; (800249c <HAL_UART_Init+0x378>)
 80021e4:	f640 31e8 	movw	r1, #3048	; 0xbe8
 80021e8:	f003 fe6a 	bl	8005ec0 <assert_failed>
 80021ec:	6960      	ldr	r0, [r4, #20]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021ee:	6822      	ldr	r2, [r4, #0]
 80021f0:	68e5      	ldr	r5, [r4, #12]
 80021f2:	6911      	ldr	r1, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 80021f4:	68a3      	ldr	r3, [r4, #8]
 80021f6:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f8:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80021fc:	4329      	orrs	r1, r5
 80021fe:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002200:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002202:	69e5      	ldr	r5, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002204:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002208:	4333      	orrs	r3, r6
 800220a:	f021 010c 	bic.w	r1, r1, #12
 800220e:	432b      	orrs	r3, r5
 8002210:	430b      	orrs	r3, r1
 8002212:	4303      	orrs	r3, r0
 8002214:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002216:	6953      	ldr	r3, [r2, #20]
 8002218:	69a1      	ldr	r1, [r4, #24]
 800221a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800221e:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002220:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002224:	6153      	str	r3, [r2, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002226:	4b9c      	ldr	r3, [pc, #624]	; (8002498 <HAL_UART_Init+0x374>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002228:	f000 8088 	beq.w	800233c <HAL_UART_Init+0x218>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800222c:	429a      	cmp	r2, r3
 800222e:	f000 80e2 	beq.w	80023f6 <HAL_UART_Init+0x2d2>
 8002232:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002236:	429a      	cmp	r2, r3
 8002238:	f000 80dd 	beq.w	80023f6 <HAL_UART_Init+0x2d2>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800223c:	f7ff ff52 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 8002240:	4f98      	ldr	r7, [pc, #608]	; (80024a4 <HAL_UART_Init+0x380>)
 8002242:	6863      	ldr	r3, [r4, #4]
 8002244:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002248:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002252:	fba7 2303 	umull	r2, r3, r7, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	011d      	lsls	r5, r3, #4
 800225a:	f7ff ff43 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 800225e:	6866      	ldr	r6, [r4, #4]
 8002260:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002264:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002268:	00b6      	lsls	r6, r6, #2
 800226a:	fbb0 f6f6 	udiv	r6, r0, r6
 800226e:	f7ff ff39 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 8002272:	6863      	ldr	r3, [r4, #4]
 8002274:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002278:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002282:	fba7 2303 	umull	r2, r3, r7, r3
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	f04f 0964 	mov.w	r9, #100	; 0x64
 800228c:	fb09 6313 	mls	r3, r9, r3, r6
 8002290:	011b      	lsls	r3, r3, #4
 8002292:	3332      	adds	r3, #50	; 0x32
 8002294:	fba7 2303 	umull	r2, r3, r7, r3
 8002298:	095b      	lsrs	r3, r3, #5
 800229a:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 800229e:	f7ff ff21 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80022a2:	6862      	ldr	r2, [r4, #4]
 80022a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022a8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022ac:	0093      	lsls	r3, r2, #2
 80022ae:	fbb0 f8f3 	udiv	r8, r0, r3
 80022b2:	f7ff ff17 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80022b6:	e9d4 2100 	ldrd	r2, r1, [r4]
 80022ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022be:	008b      	lsls	r3, r1, #2
 80022c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80022c8:	fba7 1303 	umull	r1, r3, r7, r3
 80022cc:	095b      	lsrs	r3, r3, #5
 80022ce:	fb09 8313 	mls	r3, r9, r3, r8
 80022d2:	011b      	lsls	r3, r3, #4
 80022d4:	3332      	adds	r3, #50	; 0x32
 80022d6:	fba7 1303 	umull	r1, r3, r7, r3
 80022da:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80022de:	4333      	orrs	r3, r6
 80022e0:	442b      	add	r3, r5
 80022e2:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e4:	6913      	ldr	r3, [r2, #16]
 80022e6:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80022ea:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022ec:	6953      	ldr	r3, [r2, #20]
 80022ee:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80022f2:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80022f4:	68d3      	ldr	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022f6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80022f8:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80022fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80022fe:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002300:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002302:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002304:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002308:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 800230c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002310:	4a61      	ldr	r2, [pc, #388]	; (8002498 <HAL_UART_Init+0x374>)
 8002312:	4293      	cmp	r3, r2
 8002314:	f43f af28 	beq.w	8002168 <HAL_UART_Init+0x44>
 8002318:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 800231c:	4293      	cmp	r3, r2
 800231e:	f43f af23 	beq.w	8002168 <HAL_UART_Init+0x44>
 8002322:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8002326:	4293      	cmp	r3, r2
 8002328:	f43f af1e 	beq.w	8002168 <HAL_UART_Init+0x44>
 800232c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8002330:	485a      	ldr	r0, [pc, #360]	; (800249c <HAL_UART_Init+0x378>)
 8002332:	f003 fdc5 	bl	8005ec0 <assert_failed>
 8002336:	e717      	b.n	8002168 <HAL_UART_Init+0x44>
    return HAL_ERROR;
 8002338:	2001      	movs	r0, #1
}
 800233a:	4770      	bx	lr
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800233c:	429a      	cmp	r2, r3
 800233e:	f000 80b3 	beq.w	80024a8 <HAL_UART_Init+0x384>
 8002342:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002346:	429a      	cmp	r2, r3
 8002348:	f000 80ae 	beq.w	80024a8 <HAL_UART_Init+0x384>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800234c:	f7ff feca 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 8002350:	4f54      	ldr	r7, [pc, #336]	; (80024a4 <HAL_UART_Init+0x380>)
 8002352:	6863      	ldr	r3, [r4, #4]
 8002354:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002358:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002362:	fba7 2303 	umull	r2, r3, r7, r3
 8002366:	095b      	lsrs	r3, r3, #5
 8002368:	011e      	lsls	r6, r3, #4
 800236a:	f7ff febb 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 800236e:	6865      	ldr	r5, [r4, #4]
 8002370:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002374:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002378:	006d      	lsls	r5, r5, #1
 800237a:	fbb0 f5f5 	udiv	r5, r0, r5
 800237e:	f7ff feb1 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 8002382:	6863      	ldr	r3, [r4, #4]
 8002384:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002388:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002392:	fba7 2303 	umull	r2, r3, r7, r3
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	f04f 0964 	mov.w	r9, #100	; 0x64
 800239c:	fb09 5313 	mls	r3, r9, r3, r5
 80023a0:	00db      	lsls	r3, r3, #3
 80023a2:	3332      	adds	r3, #50	; 0x32
 80023a4:	fba7 2303 	umull	r2, r3, r7, r3
 80023a8:	091b      	lsrs	r3, r3, #4
 80023aa:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 80023ae:	f7ff fe99 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80023b2:	6862      	ldr	r2, [r4, #4]
 80023b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023bc:	0053      	lsls	r3, r2, #1
 80023be:	fbb0 f8f3 	udiv	r8, r0, r3
 80023c2:	f7ff fe8f 	bl	80020e4 <HAL_RCC_GetPCLK1Freq>
 80023c6:	e9d4 2100 	ldrd	r2, r1, [r4]
 80023ca:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023ce:	004b      	lsls	r3, r1, #1
 80023d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023d4:	fbb0 f3f3 	udiv	r3, r0, r3
 80023d8:	fba7 1303 	umull	r1, r3, r7, r3
 80023dc:	095b      	lsrs	r3, r3, #5
 80023de:	fb09 8313 	mls	r3, r9, r3, r8
 80023e2:	00db      	lsls	r3, r3, #3
 80023e4:	3332      	adds	r3, #50	; 0x32
 80023e6:	fba7 1303 	umull	r1, r3, r7, r3
 80023ea:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80023ee:	4433      	add	r3, r6
 80023f0:	442b      	add	r3, r5
 80023f2:	6093      	str	r3, [r2, #8]
 80023f4:	e776      	b.n	80022e4 <HAL_UART_Init+0x1c0>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80023f6:	f7ff fe85 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 80023fa:	4f2a      	ldr	r7, [pc, #168]	; (80024a4 <HAL_UART_Init+0x380>)
 80023fc:	6863      	ldr	r3, [r4, #4]
 80023fe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002402:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	fbb0 f3f3 	udiv	r3, r0, r3
 800240c:	fba7 2303 	umull	r2, r3, r7, r3
 8002410:	095b      	lsrs	r3, r3, #5
 8002412:	011d      	lsls	r5, r3, #4
 8002414:	f7ff fe76 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 8002418:	6866      	ldr	r6, [r4, #4]
 800241a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800241e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002422:	00b6      	lsls	r6, r6, #2
 8002424:	fbb0 f6f6 	udiv	r6, r0, r6
 8002428:	f7ff fe6c 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 800242c:	6863      	ldr	r3, [r4, #4]
 800242e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002432:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	fbb0 f3f3 	udiv	r3, r0, r3
 800243c:	fba7 2303 	umull	r2, r3, r7, r3
 8002440:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	fb09 6313 	mls	r3, r9, r3, r6
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	3332      	adds	r3, #50	; 0x32
 800244e:	fba7 2303 	umull	r2, r3, r7, r3
 8002452:	095b      	lsrs	r3, r3, #5
 8002454:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8002458:	f7ff fe54 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 800245c:	6862      	ldr	r2, [r4, #4]
 800245e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002462:	0093      	lsls	r3, r2, #2
 8002464:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002468:	fbb0 f8f3 	udiv	r8, r0, r3
 800246c:	f7ff fe4a 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 8002470:	e721      	b.n	80022b6 <HAL_UART_Init+0x192>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002472:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8002476:	4809      	ldr	r0, [pc, #36]	; (800249c <HAL_UART_Init+0x378>)
 8002478:	f003 fd22 	bl	8005ec0 <assert_failed>
 800247c:	e69a      	b.n	80021b4 <HAL_UART_Init+0x90>
    huart->Lock = HAL_UNLOCKED;
 800247e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8002482:	4620      	mov	r0, r4
 8002484:	f005 f8c4 	bl	8007610 <HAL_UART_MspInit>
 8002488:	e687      	b.n	800219a <HAL_UART_Init+0x76>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800248a:	f640 31e7 	movw	r1, #3047	; 0xbe7
 800248e:	4803      	ldr	r0, [pc, #12]	; (800249c <HAL_UART_Init+0x378>)
 8002490:	f003 fd16 	bl	8005ec0 <assert_failed>
 8002494:	e69f      	b.n	80021d6 <HAL_UART_Init+0xb2>
 8002496:	bf00      	nop
 8002498:	40011000 	.word	0x40011000
 800249c:	08008d10 	.word	0x08008d10
 80024a0:	00a037a0 	.word	0x00a037a0
 80024a4:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80024a8:	f7ff fe2c 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 80024ac:	4f25      	ldr	r7, [pc, #148]	; (8002544 <HAL_UART_Init+0x420>)
 80024ae:	6863      	ldr	r3, [r4, #4]
 80024b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80024be:	fba7 2303 	umull	r2, r3, r7, r3
 80024c2:	095b      	lsrs	r3, r3, #5
 80024c4:	011e      	lsls	r6, r3, #4
 80024c6:	f7ff fe1d 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 80024ca:	6865      	ldr	r5, [r4, #4]
 80024cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024d4:	006d      	lsls	r5, r5, #1
 80024d6:	fbb0 f5f5 	udiv	r5, r0, r5
 80024da:	f7ff fe13 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 80024de:	6863      	ldr	r3, [r4, #4]
 80024e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024e8:	005b      	lsls	r3, r3, #1
 80024ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ee:	fba7 2303 	umull	r2, r3, r7, r3
 80024f2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	fb09 5313 	mls	r3, r9, r3, r5
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	3332      	adds	r3, #50	; 0x32
 8002500:	fba7 2303 	umull	r2, r3, r7, r3
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 800250a:	f7ff fdfb 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 800250e:	6862      	ldr	r2, [r4, #4]
 8002510:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002514:	0053      	lsls	r3, r2, #1
 8002516:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800251a:	fbb0 f8f3 	udiv	r8, r0, r3
 800251e:	f7ff fdf1 	bl	8002104 <HAL_RCC_GetPCLK2Freq>
 8002522:	e750      	b.n	80023c6 <HAL_UART_Init+0x2a2>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002524:	f422 7300 	bic.w	r3, r2, #512	; 0x200
 8002528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800252c:	f43f ae1c 	beq.w	8002168 <HAL_UART_Init+0x44>
 8002530:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002534:	f43f ae18 	beq.w	8002168 <HAL_UART_Init+0x44>
 8002538:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 800253c:	4802      	ldr	r0, [pc, #8]	; (8002548 <HAL_UART_Init+0x424>)
 800253e:	f003 fcbf 	bl	8005ec0 <assert_failed>
 8002542:	e611      	b.n	8002168 <HAL_UART_Init+0x44>
 8002544:	51eb851f 	.word	0x51eb851f
 8002548:	08008d10 	.word	0x08008d10

0800254c <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 800254c:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002550:	2b20      	cmp	r3, #32
 8002552:	d12d      	bne.n	80025b0 <HAL_UART_Transmit_DMA+0x64>
{
 8002554:	b570      	push	{r4, r5, r6, lr}
    if ((pData == NULL) || (Size == 0U))
 8002556:	b349      	cbz	r1, 80025ac <HAL_UART_Transmit_DMA+0x60>
 8002558:	b342      	cbz	r2, 80025ac <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 800255a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 800255e:	2b01      	cmp	r3, #1
 8002560:	d028      	beq.n	80025b4 <HAL_UART_Transmit_DMA+0x68>
 8002562:	4604      	mov	r4, r0
 8002564:	2601      	movs	r6, #1
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002566:	6b00      	ldr	r0, [r0, #48]	; 0x30
    __HAL_LOCK(huart);
 8002568:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
 800256c:	4613      	mov	r3, r2
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256e:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002570:	2621      	movs	r6, #33	; 0x21
    huart->TxXferCount = Size;
 8002572:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002574:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002576:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800257a:	4e0f      	ldr	r6, [pc, #60]	; (80025b8 <HAL_UART_Transmit_DMA+0x6c>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800257c:	6822      	ldr	r2, [r4, #0]
    huart->TxXferSize = Size;
 800257e:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8002580:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002582:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002584:	4e0d      	ldr	r6, [pc, #52]	; (80025bc <HAL_UART_Transmit_DMA+0x70>)
 8002586:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002588:	4e0d      	ldr	r6, [pc, #52]	; (80025c0 <HAL_UART_Transmit_DMA+0x74>)
    huart->hdmatx->XferAbortCallback = NULL;
 800258a:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800258c:	64c6      	str	r6, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800258e:	3204      	adds	r2, #4
 8002590:	f7fe ff4e 	bl	8001430 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002594:	6823      	ldr	r3, [r4, #0]
 8002596:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800259a:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800259c:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 800259e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80025a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 80025a6:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80025a8:	615a      	str	r2, [r3, #20]
}
 80025aa:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80025ac:	2001      	movs	r0, #1
}
 80025ae:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80025b0:	2002      	movs	r0, #2
}
 80025b2:	4770      	bx	lr
    return HAL_BUSY;
 80025b4:	2002      	movs	r0, #2
}
 80025b6:	bd70      	pop	{r4, r5, r6, pc}
 80025b8:	0800265d 	.word	0x0800265d
 80025bc:	08002689 	.word	0x08002689
 80025c0:	08002751 	.word	0x08002751

080025c4 <HAL_UART_Receive_DMA>:
{
 80025c4:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80025c6:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 80025ca:	2c20      	cmp	r4, #32
{
 80025cc:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 80025ce:	d138      	bne.n	8002642 <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 80025d0:	2900      	cmp	r1, #0
 80025d2:	d039      	beq.n	8002648 <HAL_UART_Receive_DMA+0x84>
 80025d4:	2a00      	cmp	r2, #0
 80025d6:	d037      	beq.n	8002648 <HAL_UART_Receive_DMA+0x84>
    __HAL_LOCK(huart);
 80025d8:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d030      	beq.n	8002642 <HAL_UART_Receive_DMA+0x7e>
 80025e0:	4604      	mov	r4, r0
 80025e2:	2601      	movs	r6, #1
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80025e4:	6b40      	ldr	r0, [r0, #52]	; 0x34
    __HAL_LOCK(huart);
 80025e6:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ea:	2500      	movs	r5, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025ec:	2622      	movs	r6, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ee:	63e5      	str	r5, [r4, #60]	; 0x3c
 80025f0:	4613      	mov	r3, r2
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025f2:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
 80025f6:	460a      	mov	r2, r1
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80025f8:	4e15      	ldr	r6, [pc, #84]	; (8002650 <HAL_UART_Receive_DMA+0x8c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80025fa:	6821      	ldr	r1, [r4, #0]
    huart->pRxBuffPtr = pData;
 80025fc:	62a2      	str	r2, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 80025fe:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002600:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002602:	4e14      	ldr	r6, [pc, #80]	; (8002654 <HAL_UART_Receive_DMA+0x90>)
 8002604:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002606:	4e14      	ldr	r6, [pc, #80]	; (8002658 <HAL_UART_Receive_DMA+0x94>)
    huart->hdmarx->XferAbortCallback = NULL;
 8002608:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800260a:	64c6      	str	r6, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800260c:	3104      	adds	r1, #4
 800260e:	f7fe ff0f 	bl	8001430 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8002612:	6823      	ldr	r3, [r4, #0]
 8002614:	9501      	str	r5, [sp, #4]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	9201      	str	r2, [sp, #4]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	9201      	str	r2, [sp, #4]
 800261e:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002620:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 8002622:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800262a:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800262c:	695a      	ldr	r2, [r3, #20]
 800262e:	f042 0201 	orr.w	r2, r2, #1
 8002632:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002634:	695a      	ldr	r2, [r3, #20]
    return HAL_OK;
 8002636:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002638:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800263c:	615a      	str	r2, [r3, #20]
}
 800263e:	b002      	add	sp, #8
 8002640:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8002642:	2002      	movs	r0, #2
}
 8002644:	b002      	add	sp, #8
 8002646:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002648:	2001      	movs	r0, #1
}
 800264a:	b002      	add	sp, #8
 800264c:	bd70      	pop	{r4, r5, r6, pc}
 800264e:	bf00      	nop
 8002650:	08002699 	.word	0x08002699
 8002654:	08002741 	.word	0x08002741
 8002658:	08002751 	.word	0x08002751

0800265c <UART_DMATransmitCplt>:
{
 800265c:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800265e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002660:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002668:	d10a      	bne.n	8002680 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800266a:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 800266c:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800266e:	6953      	ldr	r3, [r2, #20]
 8002670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002674:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002676:	68d3      	ldr	r3, [r2, #12]
 8002678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800267c:	60d3      	str	r3, [r2, #12]
}
 800267e:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002680:	f003 faa6 	bl	8005bd0 <HAL_UART_TxCpltCallback>
}
 8002684:	bd08      	pop	{r3, pc}
 8002686:	bf00      	nop

08002688 <UART_DMATxHalfCplt>:
{
 8002688:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 800268a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800268c:	f003 fab6 	bl	8005bfc <HAL_UART_TxHalfCpltCallback>
}
 8002690:	bd08      	pop	{r3, pc}
 8002692:	bf00      	nop

08002694 <HAL_UART_RxCpltCallback>:
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop

08002698 <UART_DMAReceiveCplt>:
{
 8002698:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800269a:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800269c:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80026a4:	d110      	bne.n	80026c8 <UART_DMAReceiveCplt+0x30>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026a6:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 80026a8:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026aa:	68d3      	ldr	r3, [r2, #12]
 80026ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80026b0:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026b2:	6953      	ldr	r3, [r2, #20]
 80026b4:	f023 0301 	bic.w	r3, r3, #1
 80026b8:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ba:	6953      	ldr	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80026bc:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026c2:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80026c4:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80026c8:	f7ff ffe4 	bl	8002694 <HAL_UART_RxCpltCallback>
}
 80026cc:	bd08      	pop	{r3, pc}
 80026ce:	bf00      	nop

080026d0 <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80026d0:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80026d2:	6884      	ldr	r4, [r0, #8]
 80026d4:	6901      	ldr	r1, [r0, #16]
 80026d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80026d8:	6802      	ldr	r2, [r0, #0]
 80026da:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80026de:	d020      	beq.n	8002722 <UART_Receive_IT.part.1+0x52>
 80026e0:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80026e2:	6852      	ldr	r2, [r2, #4]
 80026e4:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80026e6:	b9c9      	cbnz	r1, 800271c <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80026e8:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80026ea:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80026ec:	3b01      	subs	r3, #1
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80026f2:	b98b      	cbnz	r3, 8002718 <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80026f4:	6802      	ldr	r2, [r0, #0]
 80026f6:	68d1      	ldr	r1, [r2, #12]
 80026f8:	f021 0120 	bic.w	r1, r1, #32
 80026fc:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80026fe:	68d1      	ldr	r1, [r2, #12]
 8002700:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002704:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002706:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002708:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800270a:	f021 0101 	bic.w	r1, r1, #1
 800270e:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002710:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002714:	f7ff ffbe 	bl	8002694 <HAL_UART_RxCpltCallback>
}
 8002718:	2000      	movs	r0, #0
 800271a:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800271c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002720:	e7e2      	b.n	80026e8 <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002722:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002724:	b929      	cbnz	r1, 8002732 <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002726:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800272a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 800272e:	6283      	str	r3, [r0, #40]	; 0x28
 8002730:	e7db      	b.n	80026ea <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8002738:	6283      	str	r3, [r0, #40]	; 0x28
 800273a:	e7d6      	b.n	80026ea <UART_Receive_IT.part.1+0x1a>

0800273c <HAL_UART_RxHalfCpltCallback>:
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop

08002740 <UART_DMARxHalfCplt>:
{
 8002740:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8002742:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002744:	f7ff fffa 	bl	800273c <HAL_UART_RxHalfCpltCallback>
}
 8002748:	bd08      	pop	{r3, pc}
 800274a:	bf00      	nop

0800274c <HAL_UART_ErrorCallback>:
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop

08002750 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002750:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8002752:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002754:	6803      	ldr	r3, [r0, #0]
 8002756:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002758:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 800275c:	2a21      	cmp	r2, #33	; 0x21
 800275e:	d01b      	beq.n	8002798 <UART_DMAError+0x48>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002760:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002762:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8002766:	2a22      	cmp	r2, #34	; 0x22
 8002768:	d006      	beq.n	8002778 <UART_DMAError+0x28>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800276a:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800276c:	f043 0310 	orr.w	r3, r3, #16
 8002770:	63c3      	str	r3, [r0, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002772:	f7ff ffeb 	bl	800274c <HAL_UART_ErrorCallback>
}
 8002776:	bd08      	pop	{r3, pc}
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002778:	064a      	lsls	r2, r1, #25
 800277a:	d5f6      	bpl.n	800276a <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 800277c:	2200      	movs	r2, #0
 800277e:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002786:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002788:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 800278a:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002792:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
 8002796:	e7e8      	b.n	800276a <UART_DMAError+0x1a>
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002798:	0609      	lsls	r1, r1, #24
 800279a:	d5e1      	bpl.n	8002760 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 800279c:	2200      	movs	r2, #0
 800279e:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80027a0:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80027a2:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80027a4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80027a8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80027aa:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 80027ae:	e7d7      	b.n	8002760 <UART_DMAError+0x10>

080027b0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80027b0:	6803      	ldr	r3, [r0, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
{
 80027b4:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80027b6:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027b8:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027ba:	6959      	ldr	r1, [r3, #20]
{
 80027bc:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80027be:	d049      	beq.n	8002854 <HAL_UART_IRQHandler+0xa4>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80027c0:	f011 0101 	ands.w	r1, r1, #1
 80027c4:	d04f      	beq.n	8002866 <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80027c6:	07d6      	lsls	r6, r2, #31
 80027c8:	d505      	bpl.n	80027d6 <HAL_UART_IRQHandler+0x26>
 80027ca:	05e8      	lsls	r0, r5, #23
 80027cc:	d503      	bpl.n	80027d6 <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027ce:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80027d0:	f040 0001 	orr.w	r0, r0, #1
 80027d4:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027d6:	0756      	lsls	r6, r2, #29
 80027d8:	f002 0002 	and.w	r0, r2, #2
 80027dc:	d575      	bpl.n	80028ca <HAL_UART_IRQHandler+0x11a>
 80027de:	b161      	cbz	r1, 80027fa <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027e0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80027e2:	f041 0102 	orr.w	r1, r1, #2
 80027e6:	63e1      	str	r1, [r4, #60]	; 0x3c
 80027e8:	f002 0608 	and.w	r6, r2, #8
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027ec:	2800      	cmp	r0, #0
 80027ee:	d171      	bne.n	80028d4 <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027f0:	b11e      	cbz	r6, 80027fa <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027f2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80027f4:	f041 0108 	orr.w	r1, r1, #8
 80027f8:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027fa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80027fc:	2900      	cmp	r1, #0
 80027fe:	d031      	beq.n	8002864 <HAL_UART_IRQHandler+0xb4>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002800:	0696      	lsls	r6, r2, #26
 8002802:	d501      	bpl.n	8002808 <HAL_UART_IRQHandler+0x58>
 8002804:	06a8      	lsls	r0, r5, #26
 8002806:	d473      	bmi.n	80028f0 <HAL_UART_IRQHandler+0x140>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002808:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800280a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800280c:	0709      	lsls	r1, r1, #28
 800280e:	d402      	bmi.n	8002816 <HAL_UART_IRQHandler+0x66>
 8002810:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002814:	d079      	beq.n	800290a <HAL_UART_IRQHandler+0x15a>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002816:	68da      	ldr	r2, [r3, #12]
 8002818:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800281c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800281e:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002820:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002822:	f022 0201 	bic.w	r2, r2, #1
 8002826:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002828:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	0652      	lsls	r2, r2, #25
 8002830:	d55a      	bpl.n	80028e8 <HAL_UART_IRQHandler+0x138>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002832:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002834:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800283a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800283c:	2800      	cmp	r0, #0
 800283e:	d053      	beq.n	80028e8 <HAL_UART_IRQHandler+0x138>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002840:	4b3a      	ldr	r3, [pc, #232]	; (800292c <HAL_UART_IRQHandler+0x17c>)
 8002842:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002844:	f7fe fe4e 	bl	80014e4 <HAL_DMA_Abort_IT>
 8002848:	b160      	cbz	r0, 8002864 <HAL_UART_IRQHandler+0xb4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800284a:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800284c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002850:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002852:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002854:	0696      	lsls	r6, r2, #26
 8002856:	d509      	bpl.n	800286c <HAL_UART_IRQHandler+0xbc>
 8002858:	06a9      	lsls	r1, r5, #26
 800285a:	d507      	bpl.n	800286c <HAL_UART_IRQHandler+0xbc>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800285c:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002860:	2b22      	cmp	r3, #34	; 0x22
 8002862:	d04e      	beq.n	8002902 <HAL_UART_IRQHandler+0x152>
}
 8002864:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002866:	f415 7f90 	tst.w	r5, #288	; 0x120
 800286a:	d1ac      	bne.n	80027c6 <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800286c:	0616      	lsls	r6, r2, #24
 800286e:	d40e      	bmi.n	800288e <HAL_UART_IRQHandler+0xde>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002870:	0651      	lsls	r1, r2, #25
 8002872:	d5f7      	bpl.n	8002864 <HAL_UART_IRQHandler+0xb4>
 8002874:	066a      	lsls	r2, r5, #25
 8002876:	d5f5      	bpl.n	8002864 <HAL_UART_IRQHandler+0xb4>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002878:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800287a:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800287c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002880:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8002882:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8002884:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002888:	f003 f9a2 	bl	8005bd0 <HAL_UART_TxCpltCallback>
}
 800288c:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800288e:	0628      	lsls	r0, r5, #24
 8002890:	d5ee      	bpl.n	8002870 <HAL_UART_IRQHandler+0xc0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002892:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8002896:	2a21      	cmp	r2, #33	; 0x21
 8002898:	d1e4      	bne.n	8002864 <HAL_UART_IRQHandler+0xb4>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800289a:	68a1      	ldr	r1, [r4, #8]
 800289c:	6a22      	ldr	r2, [r4, #32]
 800289e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80028a2:	d037      	beq.n	8002914 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80028a4:	1c51      	adds	r1, r2, #1
 80028a6:	6221      	str	r1, [r4, #32]
 80028a8:	7812      	ldrb	r2, [r2, #0]
 80028aa:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80028ac:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80028ae:	3a01      	subs	r2, #1
 80028b0:	b292      	uxth	r2, r2
 80028b2:	84e2      	strh	r2, [r4, #38]	; 0x26
 80028b4:	2a00      	cmp	r2, #0
 80028b6:	d1d5      	bne.n	8002864 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80028b8:	68da      	ldr	r2, [r3, #12]
 80028ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028be:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80028c0:	68da      	ldr	r2, [r3, #12]
 80028c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028c6:	60da      	str	r2, [r3, #12]
}
 80028c8:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028ca:	b140      	cbz	r0, 80028de <HAL_UART_IRQHandler+0x12e>
 80028cc:	2900      	cmp	r1, #0
 80028ce:	d094      	beq.n	80027fa <HAL_UART_IRQHandler+0x4a>
 80028d0:	f002 0608 	and.w	r6, r2, #8
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80028d6:	f041 0104 	orr.w	r1, r1, #4
 80028da:	63e1      	str	r1, [r4, #60]	; 0x3c
 80028dc:	e788      	b.n	80027f0 <HAL_UART_IRQHandler+0x40>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028de:	0710      	lsls	r0, r2, #28
 80028e0:	d58b      	bpl.n	80027fa <HAL_UART_IRQHandler+0x4a>
 80028e2:	2900      	cmp	r1, #0
 80028e4:	d185      	bne.n	80027f2 <HAL_UART_IRQHandler+0x42>
 80028e6:	e788      	b.n	80027fa <HAL_UART_IRQHandler+0x4a>
            HAL_UART_ErrorCallback(huart);
 80028e8:	4620      	mov	r0, r4
 80028ea:	f7ff ff2f 	bl	800274c <HAL_UART_ErrorCallback>
}
 80028ee:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028f0:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 80028f4:	2a22      	cmp	r2, #34	; 0x22
 80028f6:	d187      	bne.n	8002808 <HAL_UART_IRQHandler+0x58>
 80028f8:	4620      	mov	r0, r4
 80028fa:	f7ff fee9 	bl	80026d0 <UART_Receive_IT.part.1>
 80028fe:	6823      	ldr	r3, [r4, #0]
 8002900:	e782      	b.n	8002808 <HAL_UART_IRQHandler+0x58>
}
 8002902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002906:	f7ff bee3 	b.w	80026d0 <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 800290a:	4620      	mov	r0, r4
 800290c:	f7ff ff1e 	bl	800274c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002910:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 8002912:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002914:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002916:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002918:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800291c:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800291e:	b910      	cbnz	r0, 8002926 <HAL_UART_IRQHandler+0x176>
        huart->pTxBuffPtr += 2U;
 8002920:	3202      	adds	r2, #2
 8002922:	6222      	str	r2, [r4, #32]
 8002924:	e7c2      	b.n	80028ac <HAL_UART_IRQHandler+0xfc>
        huart->pTxBuffPtr += 1U;
 8002926:	3201      	adds	r2, #1
 8002928:	6222      	str	r2, [r4, #32]
 800292a:	e7bf      	b.n	80028ac <HAL_UART_IRQHandler+0xfc>
 800292c:	08002931 	.word	0x08002931

08002930 <UART_DMAAbortOnError>:
{
 8002930:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002932:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002934:	2200      	movs	r2, #0
 8002936:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8002938:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 800293a:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 800293c:	f7ff ff06 	bl	800274c <HAL_UART_ErrorCallback>
}
 8002940:	bd08      	pop	{r3, pc}
 8002942:	bf00      	nop

08002944 <CPU_TS_TmrInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrInit (void)
{
 8002944:	b538      	push	{r3, r4, r5, lr}
    return HAL_RCC_GetSysClockFreq();
 8002946:	f7ff fa91 	bl	8001e6c <HAL_RCC_GetSysClockFreq>
    CPU_INT32U  fclk_freq;


    fclk_freq = BSP_CPU_ClkFreq();

    BSP_REG_DEM_CR     |= (CPU_INT32U)BSP_BIT_DEM_CR_TRCENA;    /* Enable Cortex-M4's DWT CYCCNT reg.                   */
 800294a:	4908      	ldr	r1, [pc, #32]	; (800296c <CPU_TS_TmrInit+0x28>)
    BSP_REG_DWT_CYCCNT  = (CPU_INT32U)0u;
 800294c:	4c08      	ldr	r4, [pc, #32]	; (8002970 <CPU_TS_TmrInit+0x2c>)
    BSP_REG_DEM_CR     |= (CPU_INT32U)BSP_BIT_DEM_CR_TRCENA;    /* Enable Cortex-M4's DWT CYCCNT reg.                   */
 800294e:	680b      	ldr	r3, [r1, #0]
    BSP_REG_DWT_CR     |= (CPU_INT32U)BSP_BIT_DWT_CR_CYCCNTENA;
 8002950:	4a08      	ldr	r2, [pc, #32]	; (8002974 <CPU_TS_TmrInit+0x30>)
    BSP_REG_DEM_CR     |= (CPU_INT32U)BSP_BIT_DEM_CR_TRCENA;    /* Enable Cortex-M4's DWT CYCCNT reg.                   */
 8002952:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    BSP_REG_DWT_CYCCNT  = (CPU_INT32U)0u;
 8002956:	2500      	movs	r5, #0
    BSP_REG_DEM_CR     |= (CPU_INT32U)BSP_BIT_DEM_CR_TRCENA;    /* Enable Cortex-M4's DWT CYCCNT reg.                   */
 8002958:	600b      	str	r3, [r1, #0]
    BSP_REG_DWT_CYCCNT  = (CPU_INT32U)0u;
 800295a:	6025      	str	r5, [r4, #0]
    BSP_REG_DWT_CR     |= (CPU_INT32U)BSP_BIT_DWT_CR_CYCCNTENA;
 800295c:	6813      	ldr	r3, [r2, #0]
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6013      	str	r3, [r2, #0]

    CPU_TS_TmrFreqSet((CPU_TS_TMR_FREQ)fclk_freq);
}
 8002964:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    CPU_TS_TmrFreqSet((CPU_TS_TMR_FREQ)fclk_freq);
 8002968:	f000 b822 	b.w	80029b0 <CPU_TS_TmrFreqSet>
 800296c:	e000edfc 	.word	0xe000edfc
 8002970:	e0001004 	.word	0xe0001004
 8002974:	e0001000 	.word	0xe0001000

08002978 <CPU_TS_TmrRd>:
CPU_TS_TMR  CPU_TS_TmrRd (void)
{
    CPU_TS_TMR  ts_tmr_cnts;


    ts_tmr_cnts = (CPU_TS_TMR)BSP_REG_DWT_CYCCNT;
 8002978:	4b01      	ldr	r3, [pc, #4]	; (8002980 <CPU_TS_TmrRd+0x8>)
 800297a:	6818      	ldr	r0, [r3, #0]

    return (ts_tmr_cnts);
}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e0001004 	.word	0xe0001004

08002984 <CPU_Init>:
#endif


                                                                /* ----------------- INIT CPU TS TMR ------------------ */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
    CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <CPU_Init+0x24>)
{
 8002986:	b510      	push	{r4, lr}
    CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
 8002988:	2200      	movs	r2, #0
 800298a:	601a      	str	r2, [r3, #0]
    CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
 800298c:	f7ff ffda 	bl	8002944 <CPU_TS_TmrInit>
    CPU_CRITICAL_ENTER();
 8002990:	f7fd fc26 	bl	80001e0 <CPU_SR_Save>
    Mem_Clr((void     *)&CPU_Name[0],
 8002994:	2110      	movs	r1, #16
    CPU_CRITICAL_ENTER();
 8002996:	4604      	mov	r4, r0
    Mem_Clr((void     *)&CPU_Name[0],
 8002998:	4804      	ldr	r0, [pc, #16]	; (80029ac <CPU_Init+0x28>)
 800299a:	f000 f815 	bl	80029c8 <Mem_Clr>
    CPU_CRITICAL_EXIT();
 800299e:	4620      	mov	r0, r4
}
 80029a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CPU_CRITICAL_EXIT();
 80029a4:	f7fd bc20 	b.w	80001e8 <CPU_SR_Restore>
 80029a8:	200018d0 	.word	0x200018d0
 80029ac:	200018d4 	.word	0x200018d4

080029b0 <CPU_TS_TmrFreqSet>:
    CPU_TS_TmrFreq_Hz = freq_hz;
 80029b0:	4b01      	ldr	r3, [pc, #4]	; (80029b8 <CPU_TS_TmrFreqSet+0x8>)
 80029b2:	6018      	str	r0, [r3, #0]
}
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	200018d0 	.word	0x200018d0

080029bc <Mem_Init>:

void  Mem_Init (void)
{

                                                                /* ------------------ INIT SEG LIST ------------------- */
    Mem_SegHeadPtr = DEF_NULL;
 80029bc:	4b01      	ldr	r3, [pc, #4]	; (80029c4 <Mem_Init+0x8>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]
        if (err != LIB_MEM_ERR_NONE) {
            CPU_SW_EXCEPTION(;);
        }
    }
#endif
}
 80029c2:	4770      	bx	lr
 80029c4:	200018e4 	.word	0x200018e4

080029c8 <Mem_Clr>:

    size_rem      =  size;
    mem_align_mod = (CPU_INT08U)((CPU_ADDR)pmem % sizeof(CPU_ALIGN));   /* See Note #3.                                 */

    pmem_08 = (CPU_INT08U *)pmem;
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 80029c8:	f010 0203 	ands.w	r2, r0, #3
{
 80029cc:	b570      	push	{r4, r5, r6, lr}
 80029ce:	4603      	mov	r3, r0
 80029d0:	460c      	mov	r4, r1
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 80029d2:	d02f      	beq.n	8002a34 <Mem_Clr+0x6c>
        i = mem_align_mod;
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 80029d4:	b369      	cbz	r1, 8002a32 <Mem_Clr+0x6a>
               (i        < sizeof(CPU_ALIGN ))) {               /* ... until next CPU_ALIGN word boundary.              */
           *pmem_08++ = data_val;
 80029d6:	2100      	movs	r1, #0
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 80029d8:	1e66      	subs	r6, r4, #1
           *pmem_08++ = data_val;
 80029da:	7001      	strb	r1, [r0, #0]
            size_rem -= sizeof(CPU_INT08U);
            i++;
 80029dc:	f102 0501 	add.w	r5, r2, #1
           *pmem_08++ = data_val;
 80029e0:	f100 0001 	add.w	r0, r0, #1
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 80029e4:	d025      	beq.n	8002a32 <Mem_Clr+0x6a>
 80029e6:	2d04      	cmp	r5, #4
 80029e8:	d027      	beq.n	8002a3a <Mem_Clr+0x72>
 80029ea:	1ea5      	subs	r5, r4, #2
           *pmem_08++ = data_val;
 80029ec:	7059      	strb	r1, [r3, #1]
 80029ee:	f103 0002 	add.w	r0, r3, #2
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 80029f2:	d01e      	beq.n	8002a32 <Mem_Clr+0x6a>
 80029f4:	2a02      	cmp	r2, #2
 80029f6:	d022      	beq.n	8002a3e <Mem_Clr+0x76>
 80029f8:	3c03      	subs	r4, #3
           *pmem_08++ = data_val;
 80029fa:	7099      	strb	r1, [r3, #2]
 80029fc:	f103 0003 	add.w	r0, r3, #3
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8002a00:	d017      	beq.n	8002a32 <Mem_Clr+0x6a>
        }
    }

    pmem_align = (CPU_ALIGN *)pmem_08;                          /* See Note #2.                                         */
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8002a02:	2c03      	cmp	r4, #3
           *pmem_08++ = data_val;
 8002a04:	4603      	mov	r3, r0
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8002a06:	d90d      	bls.n	8002a24 <Mem_Clr+0x5c>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
 8002a08:	1f25      	subs	r5, r4, #4
 8002a0a:	f025 0503 	bic.w	r5, r5, #3
 8002a0e:	3504      	adds	r5, #4
 8002a10:	4618      	mov	r0, r3
 8002a12:	462a      	mov	r2, r5
 8002a14:	2100      	movs	r1, #0
 8002a16:	f004 fede 	bl	80077d6 <memset>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	f004 0403 	and.w	r4, r4, #3
 8002a20:	442b      	add	r3, r5
        size_rem    -= sizeof(CPU_ALIGN);
    }

    pmem_08 = (CPU_INT08U *)pmem_align;
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8002a22:	b134      	cbz	r4, 8002a32 <Mem_Clr+0x6a>
 8002a24:	4622      	mov	r2, r4
 8002a26:	4618      	mov	r0, r3
 8002a28:	2100      	movs	r1, #0
}
 8002a2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002a2e:	f004 bed2 	b.w	80077d6 <memset>
 8002a32:	bd70      	pop	{r4, r5, r6, pc}
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8002a34:	2903      	cmp	r1, #3
 8002a36:	d8e7      	bhi.n	8002a08 <Mem_Clr+0x40>
 8002a38:	e7f3      	b.n	8002a22 <Mem_Clr+0x5a>
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8002a3a:	4634      	mov	r4, r6
 8002a3c:	e7e1      	b.n	8002a02 <Mem_Clr+0x3a>
 8002a3e:	462c      	mov	r4, r5
 8002a40:	e7df      	b.n	8002a02 <Mem_Clr+0x3a>
 8002a42:	bf00      	nop

08002a44 <OSIdleTaskHook>:
*/

void  OSIdleTaskHook (void)
{
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8002a44:	4b02      	ldr	r3, [pc, #8]	; (8002a50 <OSIdleTaskHook+0xc>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	b103      	cbz	r3, 8002a4c <OSIdleTaskHook+0x8>
        (*OS_AppIdleTaskHookPtr)();
 8002a4a:	4718      	bx	r3
    }
#endif
}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	20002ca0 	.word	0x20002ca0

08002a54 <OSInitHook>:
*/

void  OSInitHook (void)
{
                                                                    /* 8-byte align the ISR stack.                            */    
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 8002a54:	4a05      	ldr	r2, [pc, #20]	; (8002a6c <OSInitHook+0x18>)
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <OSInitHook+0x1c>)
 8002a58:	6811      	ldr	r1, [r2, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8002a5c:	4a05      	ldr	r2, [pc, #20]	; (8002a74 <OSInitHook+0x20>)
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 8002a5e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8002a62:	f023 0307 	bic.w	r3, r3, #7
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	08008d50 	.word	0x08008d50
 8002a70:	08008d4c 	.word	0x08008d4c
 8002a74:	200018e8 	.word	0x200018e8

08002a78 <OSStatTaskHook>:
*/

void  OSStatTaskHook (void)
{
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppStatTaskHookPtr != (OS_APP_HOOK_VOID)0) {
 8002a78:	4b02      	ldr	r3, [pc, #8]	; (8002a84 <OSStatTaskHook+0xc>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	b103      	cbz	r3, 8002a80 <OSStatTaskHook+0x8>
        (*OS_AppStatTaskHookPtr)();
 8002a7e:	4718      	bx	r3
    }
#endif
}
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	20002cbc 	.word	0x20002cbc

08002a88 <OSTaskCreateHook>:
*/

void  OSTaskCreateHook (OS_TCB  *p_tcb)
{
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskCreateHookPtr != (OS_APP_HOOK_TCB)0) {
 8002a88:	4b02      	ldr	r3, [pc, #8]	; (8002a94 <OSTaskCreateHook+0xc>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	b103      	cbz	r3, 8002a90 <OSTaskCreateHook+0x8>
        (*OS_AppTaskCreateHookPtr)(p_tcb);
 8002a8e:	4718      	bx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	200029ec 	.word	0x200029ec

08002a98 <OSTaskReturnHook>:
*/

void  OSTaskReturnHook (OS_TCB  *p_tcb)
{
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskReturnHookPtr != (OS_APP_HOOK_TCB)0) {
 8002a98:	4b02      	ldr	r3, [pc, #8]	; (8002aa4 <OSTaskReturnHook+0xc>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	b103      	cbz	r3, 8002aa0 <OSTaskReturnHook+0x8>
        (*OS_AppTaskReturnHookPtr)(p_tcb);
 8002a9e:	4718      	bx	r3
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	20002854 	.word	0x20002854

08002aa8 <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 8002aa8:	b470      	push	{r4, r5, r6}
 8002aaa:	9c03      	ldr	r4, [sp, #12]
 8002aac:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    CPU_STK    *p_stk;

    
    (void)opt;                                                  /* Prevent compiler warning                               */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                     */
 8002ab0:	eb02 0284 	add.w	r2, r2, r4, lsl #2
                                                                /* Align the stack to 8-bytes.                            */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8);
 8002ab4:	f022 0207 	bic.w	r2, r2, #7
                                                                /* Registers stacked as if auto-saved on exception        */
    *--p_stk = (CPU_STK)0x01000000u;                            /* xPSR                                                   */
    *--p_stk = (CPU_STK)p_task;                                 /* Entry Point                                            */
    *--p_stk = (CPU_STK)OS_TaskReturn;                          /* R14 (LR)                                               */
 8002ab8:	4c5c      	ldr	r4, [pc, #368]	; (8002c2c <OSTaskStkInit+0x184>)
    *--p_stk = (CPU_STK)0x12121212u;                            /* R12                                                    */
    *--p_stk = (CPU_STK)0x03030303u;                            /* R3                                                     */
    *--p_stk = (CPU_STK)0x02020202u;                            /* R2                                                     */
    *--p_stk = (CPU_STK)p_stk_limit;                            /* R1                                                     */
 8002aba:	f842 3c1c 	str.w	r3, [r2, #-28]
    *--p_stk = (CPU_STK)p_arg;                                  /* R0 : argument                                          */
 8002abe:	f842 1c20 	str.w	r1, [r2, #-32]
    *--p_stk = (CPU_STK)0x02020202u;                            /* R2                                                     */
 8002ac2:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
    *--p_stk = (CPU_STK)0x03030303u;                            /* R3                                                     */
 8002ac6:	f04f 3103 	mov.w	r1, #50529027	; 0x3030303
    *--p_stk = (CPU_STK)p_task;                                 /* Entry Point                                            */
 8002aca:	f842 0c08 	str.w	r0, [r2, #-8]
    *--p_stk = (CPU_STK)0x03030303u;                            /* R3                                                     */
 8002ace:	f842 1c14 	str.w	r1, [r2, #-20]
    *--p_stk = (CPU_STK)0x12121212u;                            /* R12                                                    */
 8002ad2:	f04f 3012 	mov.w	r0, #303174162	; 0x12121212
                                                                /* Remaining registers saved on process stack             */
    *--p_stk = (CPU_STK)0x11111111u;                            /* R11                                                    */
    *--p_stk = (CPU_STK)0x10101010u;                            /* R10                                                    */
    *--p_stk = (CPU_STK)0x09090909u;                            /* R9                                                     */
 8002ad6:	f04f 3109 	mov.w	r1, #151587081	; 0x9090909
    *--p_stk = (CPU_STK)0x02020202u;                            /* R2                                                     */
 8002ada:	f842 3c18 	str.w	r3, [r2, #-24]
    *--p_stk = (CPU_STK)0x08080808u;                            /* R8                                                     */
 8002ade:	f04f 3308 	mov.w	r3, #134744072	; 0x8080808
    *--p_stk = (CPU_STK)OS_TaskReturn;                          /* R14 (LR)                                               */
 8002ae2:	f842 4c0c 	str.w	r4, [r2, #-12]
    *--p_stk = (CPU_STK)0x12121212u;                            /* R12                                                    */
 8002ae6:	f842 0c10 	str.w	r0, [r2, #-16]
    *--p_stk = (CPU_STK)0x11111111u;                            /* R11                                                    */
 8002aea:	f04f 3411 	mov.w	r4, #286331153	; 0x11111111
    *--p_stk = (CPU_STK)0x10101010u;                            /* R10                                                    */
 8002aee:	f04f 3010 	mov.w	r0, #269488144	; 0x10101010
    *--p_stk = (CPU_STK)0x09090909u;                            /* R9                                                     */
 8002af2:	f842 1c2c 	str.w	r1, [r2, #-44]
    *--p_stk = (CPU_STK)0x08080808u;                            /* R8                                                     */
 8002af6:	f842 3c30 	str.w	r3, [r2, #-48]
    *--p_stk = (CPU_STK)0x07070707u;                            /* R7                                                     */
    *--p_stk = (CPU_STK)0x06060606u;                            /* R6                                                     */
    *--p_stk = (CPU_STK)0x05050505u;                            /* R5                                                     */
 8002afa:	f04f 3105 	mov.w	r1, #84215045	; 0x5050505
    *--p_stk = (CPU_STK)0x04040404u;                            /* R4                                                     */
 8002afe:	f04f 3304 	mov.w	r3, #67372036	; 0x4040404
    *--p_stk = (CPU_STK)0x01000000u;                            /* xPSR                                                   */
 8002b02:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    *--p_stk = (CPU_STK)0x11111111u;                            /* R11                                                    */
 8002b06:	f842 4c24 	str.w	r4, [r2, #-36]
    *--p_stk = (CPU_STK)0x10101010u;                            /* R10                                                    */
 8002b0a:	f842 0c28 	str.w	r0, [r2, #-40]
    *--p_stk = (CPU_STK)0x07070707u;                            /* R7                                                     */
 8002b0e:	f04f 3407 	mov.w	r4, #117901063	; 0x7070707
    *--p_stk = (CPU_STK)0x06060606u;                            /* R6                                                     */
 8002b12:	f04f 3006 	mov.w	r0, #101058054	; 0x6060606
    *--p_stk = (CPU_STK)0x04040404u;                            /* R4                                                     */
 8002b16:	e942 3110 	strd	r3, r1, [r2, #-64]	; 0x40
    
#if (OS_CPU_ARM_FP_EN == DEF_ENABLED)
    if ((opt & OS_OPT_TASK_SAVE_FP) != (OS_OPT)0) {
 8002b1a:	076b      	lsls	r3, r5, #29
    *--p_stk = (CPU_STK)0x01000000u;                            /* xPSR                                                   */
 8002b1c:	f842 6c04 	str.w	r6, [r2, #-4]
    *--p_stk = (CPU_STK)0x06060606u;                            /* R6                                                     */
 8002b20:	e942 040e 	strd	r0, r4, [r2, #-56]	; 0x38
    if ((opt & OS_OPT_TASK_SAVE_FP) != (OS_OPT)0) {
 8002b24:	d57d      	bpl.n	8002c22 <OSTaskStkInit+0x17a>
        *--p_stk = (CPU_STK)0x02000000u;                        /* FPSCR                                                  */
 8002b26:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
                                                                /* Initialize S0-S31 floating point registers             */
        *--p_stk = (CPU_STK)0x41F80000u;                        /* S31                                                    */
 8002b2a:	4941      	ldr	r1, [pc, #260]	; (8002c30 <OSTaskStkInit+0x188>)
        *--p_stk = (CPU_STK)0x41F00000u;                        /* S30                                                    */
 8002b2c:	4b41      	ldr	r3, [pc, #260]	; (8002c34 <OSTaskStkInit+0x18c>)
        *--p_stk = (CPU_STK)0x41E80000u;                        /* S29                                                    */
 8002b2e:	4d42      	ldr	r5, [pc, #264]	; (8002c38 <OSTaskStkInit+0x190>)
        *--p_stk = (CPU_STK)0x41E00000u;                        /* S28                                                    */
 8002b30:	4c42      	ldr	r4, [pc, #264]	; (8002c3c <OSTaskStkInit+0x194>)
        *--p_stk = (CPU_STK)0x02000000u;                        /* FPSCR                                                  */
 8002b32:	f842 0c44 	str.w	r0, [r2, #-68]
        *--p_stk = (CPU_STK)0x41D80000u;                        /* S27                                                    */
 8002b36:	4842      	ldr	r0, [pc, #264]	; (8002c40 <OSTaskStkInit+0x198>)
        *--p_stk = (CPU_STK)0x41F80000u;                        /* S31                                                    */
 8002b38:	f842 1c48 	str.w	r1, [r2, #-72]
        *--p_stk = (CPU_STK)0x41F00000u;                        /* S30                                                    */
 8002b3c:	f842 3c4c 	str.w	r3, [r2, #-76]
        *--p_stk = (CPU_STK)0x41D00000u;                        /* S26                                                    */
 8002b40:	f5a1 1120 	sub.w	r1, r1, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41C80000u;                        /* S25                                                    */
 8002b44:	f5a3 1320 	sub.w	r3, r3, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41E80000u;                        /* S29                                                    */
 8002b48:	f842 5c50 	str.w	r5, [r2, #-80]
        *--p_stk = (CPU_STK)0x41E00000u;                        /* S28                                                    */
 8002b4c:	f842 4c54 	str.w	r4, [r2, #-84]
        *--p_stk = (CPU_STK)0x41C00000u;                        /* S24                                                    */
 8002b50:	f5a5 1520 	sub.w	r5, r5, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41B80000u;                        /* S23                                                    */
 8002b54:	f5a4 1420 	sub.w	r4, r4, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41D80000u;                        /* S27                                                    */
 8002b58:	f842 0c58 	str.w	r0, [r2, #-88]
        *--p_stk = (CPU_STK)0x41D00000u;                        /* S26                                                    */
 8002b5c:	f842 1c5c 	str.w	r1, [r2, #-92]
        *--p_stk = (CPU_STK)0x41B00000u;                        /* S22                                                    */
 8002b60:	f5a0 1020 	sub.w	r0, r0, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41A80000u;                        /* S21                                                    */
 8002b64:	f5a1 1120 	sub.w	r1, r1, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41C80000u;                        /* S25                                                    */
 8002b68:	f842 3c60 	str.w	r3, [r2, #-96]
        *--p_stk = (CPU_STK)0x41A00000u;                        /* S20                                                    */
 8002b6c:	f5a3 1320 	sub.w	r3, r3, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41C00000u;                        /* S24                                                    */
 8002b70:	f842 5c64 	str.w	r5, [r2, #-100]
        *--p_stk = (CPU_STK)0x41B80000u;                        /* S23                                                    */
 8002b74:	f842 4c68 	str.w	r4, [r2, #-104]
        *--p_stk = (CPU_STK)0x41980000u;                        /* S19                                                    */
 8002b78:	f5a5 1520 	sub.w	r5, r5, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41900000u;                        /* S18                                                    */
 8002b7c:	f5a4 1420 	sub.w	r4, r4, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41B00000u;                        /* S22                                                    */
 8002b80:	f842 0c6c 	str.w	r0, [r2, #-108]
        *--p_stk = (CPU_STK)0x41A80000u;                        /* S21                                                    */
 8002b84:	f842 1c70 	str.w	r1, [r2, #-112]
        *--p_stk = (CPU_STK)0x41880000u;                        /* S17                                                    */
 8002b88:	f5a0 1020 	sub.w	r0, r0, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41800000u;                        /* S16                                                    */
 8002b8c:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
        *--p_stk = (CPU_STK)0x41A00000u;                        /* S20                                                    */
 8002b90:	f842 3c74 	str.w	r3, [r2, #-116]
        *--p_stk = (CPU_STK)0x41700000u;                        /* S15                                                    */
 8002b94:	f5a3 1340 	sub.w	r3, r3, #3145728	; 0x300000
        *--p_stk = (CPU_STK)0x41980000u;                        /* S19                                                    */
 8002b98:	f842 5c78 	str.w	r5, [r2, #-120]
        *--p_stk = (CPU_STK)0x41900000u;                        /* S18                                                    */
 8002b9c:	f842 4c7c 	str.w	r4, [r2, #-124]
        *--p_stk = (CPU_STK)0x41600000u;                        /* S14                                                    */
 8002ba0:	f5a5 1560 	sub.w	r5, r5, #3670016	; 0x380000
        *--p_stk = (CPU_STK)0x41500000u;                        /* S13                                                    */
 8002ba4:	f5a4 0480 	sub.w	r4, r4, #4194304	; 0x400000
        *--p_stk = (CPU_STK)0x41880000u;                        /* S17                                                    */
 8002ba8:	f842 0c80 	str.w	r0, [r2, #-128]
        *--p_stk = (CPU_STK)0x41800000u;                        /* S16                                                    */
 8002bac:	f842 1c84 	str.w	r1, [r2, #-132]
        *--p_stk = (CPU_STK)0x41400000u;                        /* S12                                                    */
 8002bb0:	f5a0 0090 	sub.w	r0, r0, #4718592	; 0x480000
        *--p_stk = (CPU_STK)0x41300000u;                        /* S11                                                    */
 8002bb4:	f5a1 01a0 	sub.w	r1, r1, #5242880	; 0x500000
        *--p_stk = (CPU_STK)0x41700000u;                        /* S15                                                    */
 8002bb8:	f842 3c88 	str.w	r3, [r2, #-136]
        *--p_stk = (CPU_STK)0x41200000u;                        /* S10                                                    */
 8002bbc:	f5a3 03a0 	sub.w	r3, r3, #5242880	; 0x500000
        *--p_stk = (CPU_STK)0x41600000u;                        /* S14                                                    */
 8002bc0:	f842 5c8c 	str.w	r5, [r2, #-140]
        *--p_stk = (CPU_STK)0x41500000u;                        /* S13                                                    */
 8002bc4:	f842 4c90 	str.w	r4, [r2, #-144]
        *--p_stk = (CPU_STK)0x41100000u;                        /* S9                                                     */
 8002bc8:	f5a5 05a0 	sub.w	r5, r5, #5242880	; 0x500000
        *--p_stk = (CPU_STK)0x41000000u;                        /* S8                                                     */
 8002bcc:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
        *--p_stk = (CPU_STK)0x41400000u;                        /* S12                                                    */
 8002bd0:	f842 0c94 	str.w	r0, [r2, #-148]
        *--p_stk = (CPU_STK)0x41300000u;                        /* S11                                                    */
 8002bd4:	f842 1c98 	str.w	r1, [r2, #-152]
        *--p_stk = (CPU_STK)0x40E00000u;                        /* S7                                                     */
 8002bd8:	f5a0 00c0 	sub.w	r0, r0, #6291456	; 0x600000
        *--p_stk = (CPU_STK)0x40C00000u;                        /* S6                                                     */
 8002bdc:	f5a1 01e0 	sub.w	r1, r1, #7340032	; 0x700000
        *--p_stk = (CPU_STK)0x41200000u;                        /* S10                                                    */
 8002be0:	f842 3c9c 	str.w	r3, [r2, #-156]
        *--p_stk = (CPU_STK)0x40A00000u;                        /* S5                                                     */
 8002be4:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
        *--p_stk = (CPU_STK)0x41100000u;                        /* S9                                                     */
 8002be8:	f842 5ca0 	str.w	r5, [r2, #-160]
        *--p_stk = (CPU_STK)0x41000000u;                        /* S8                                                     */
 8002bec:	f842 4ca4 	str.w	r4, [r2, #-164]
        *--p_stk = (CPU_STK)0x40800000u;                        /* S4                                                     */
 8002bf0:	f04f 4581 	mov.w	r5, #1082130432	; 0x40800000
        *--p_stk = (CPU_STK)0x40400000u;                        /* S3                                                     */
 8002bf4:	f5a4 0440 	sub.w	r4, r4, #12582912	; 0xc00000
        *--p_stk = (CPU_STK)0x40E00000u;                        /* S7                                                     */
 8002bf8:	f842 0ca8 	str.w	r0, [r2, #-168]
        *--p_stk = (CPU_STK)0x40C00000u;                        /* S6                                                     */
 8002bfc:	f842 1cac 	str.w	r1, [r2, #-172]
        *--p_stk = (CPU_STK)0x40000000u;                        /* S2                                                     */
 8002c00:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
        *--p_stk = (CPU_STK)0x40A00000u;                        /* S5                                                     */
 8002c04:	f842 3cb0 	str.w	r3, [r2, #-176]
        *--p_stk = (CPU_STK)0x3F800000u;                        /* S1                                                     */
 8002c08:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        *--p_stk = (CPU_STK)0x00000000u;                        /* S0                                                     */
 8002c0c:	2300      	movs	r3, #0
        *--p_stk = (CPU_STK)0x40400000u;                        /* S3                                                     */
 8002c0e:	e942 452e 	strd	r4, r5, [r2, #-184]	; 0xb8
        *--p_stk = (CPU_STK)0x3F800000u;                        /* S1                                                     */
 8002c12:	e942 1030 	strd	r1, r0, [r2, #-192]	; 0xc0
        *--p_stk = (CPU_STK)0x00000000u;                        /* S0                                                     */
 8002c16:	f1a2 00c4 	sub.w	r0, r2, #196	; 0xc4
 8002c1a:	f842 3cc4 	str.w	r3, [r2, #-196]
    }
#endif    

    return (p_stk);
}
 8002c1e:	bc70      	pop	{r4, r5, r6}
 8002c20:	4770      	bx	lr
    *--p_stk = (CPU_STK)0x04040404u;                            /* R4                                                     */
 8002c22:	f1a2 0040 	sub.w	r0, r2, #64	; 0x40
}
 8002c26:	bc70      	pop	{r4, r5, r6}
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	08004471 	.word	0x08004471
 8002c30:	41f80000 	.word	0x41f80000
 8002c34:	41f00000 	.word	0x41f00000
 8002c38:	41e80000 	.word	0x41e80000
 8002c3c:	41e00000 	.word	0x41e00000
 8002c40:	41d80000 	.word	0x41d80000

08002c44 <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 8002c44:	b538      	push	{r3, r4, r5, lr}
    CPU_TS  int_dis_time;
#endif

    
#if (OS_CPU_ARM_FP_EN == DEF_ENABLED)
    if ((OSTCBCurPtr->Opt & OS_OPT_TASK_SAVE_FP) != (OS_OPT)0) {
 8002c46:	4d14      	ldr	r5, [pc, #80]	; (8002c98 <OSTaskSwHook+0x54>)
 8002c48:	682b      	ldr	r3, [r5, #0]
 8002c4a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002c4e:	0751      	lsls	r1, r2, #29
 8002c50:	d41a      	bmi.n	8002c88 <OSTaskSwHook+0x44>
        OS_CPU_FP_Reg_Push(OSTCBCurPtr->StkPtr);
    }

    if ((OSTCBHighRdyPtr->Opt & OS_OPT_TASK_SAVE_FP) != (OS_OPT)0) {
 8002c52:	4c12      	ldr	r4, [pc, #72]	; (8002c9c <OSTaskSwHook+0x58>)
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002c5a:	0752      	lsls	r2, r2, #29
 8002c5c:	d418      	bmi.n	8002c90 <OSTaskSwHook+0x4c>
        OS_CPU_FP_Reg_Pop(OSTCBHighRdyPtr->StkPtr);
    }
#endif    

#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTaskSwHookPtr != (OS_APP_HOOK_VOID)0) {
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <OSTaskSwHook+0x5c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	b103      	cbz	r3, 8002c66 <OSTaskSwHook+0x22>
        (*OS_AppTaskSwHookPtr)();
 8002c64:	4798      	blx	r3
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Record the event.                                      */
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 8002c66:	f7ff fe87 	bl	8002978 <CPU_TS_TmrRd>
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 8002c6a:	682b      	ldr	r3, [r5, #0]
 8002c6c:	6821      	ldr	r1, [r4, #0]
 8002c6e:	428b      	cmp	r3, r1
 8002c70:	d007      	beq.n	8002c82 <OSTaskSwHook+0x3e>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8002c72:	e9d3 2425 	ldrd	r2, r4, [r3, #148]	; 0x94
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 8002c76:	1a82      	subs	r2, r0, r2
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8002c78:	4414      	add	r4, r2
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 8002c7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8002c7e:	f8c3 4098 	str.w	r4, [r3, #152]	; 0x98
    }

    OSTCBHighRdyPtr->CyclesStart = ts;
 8002c82:	f8c1 0094 	str.w	r0, [r1, #148]	; 0x94
    if (OSTCBCurPtr->SchedLockTimeMax < OSSchedLockTimeMaxCur) {
        OSTCBCurPtr->SchedLockTimeMax = OSSchedLockTimeMaxCur;
    }
    OSSchedLockTimeMaxCur = (CPU_TS)0;                      /* Reset the per-task value                               */
#endif
}
 8002c86:	bd38      	pop	{r3, r4, r5, pc}
        OS_CPU_FP_Reg_Push(OSTCBCurPtr->StkPtr);
 8002c88:	6818      	ldr	r0, [r3, #0]
 8002c8a:	f7fd fabf 	bl	800020c <OS_CPU_FP_Reg_Push>
 8002c8e:	e7e0      	b.n	8002c52 <OSTaskSwHook+0xe>
        OS_CPU_FP_Reg_Pop(OSTCBHighRdyPtr->StkPtr);
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	f7fd fac8 	bl	8000226 <OS_CPU_FP_Reg_Pop>
 8002c96:	e7e2      	b.n	8002c5e <OSTaskSwHook+0x1a>
 8002c98:	20002ab4 	.word	0x20002ab4
 8002c9c:	20002ac0 	.word	0x20002ac0
 8002ca0:	20002cac 	.word	0x20002cac

08002ca4 <OSTimeTickHook>:
*/

void  OSTimeTickHook (void)
{
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppTimeTickHookPtr != (OS_APP_HOOK_VOID)0) {
 8002ca4:	4b02      	ldr	r3, [pc, #8]	; (8002cb0 <OSTimeTickHook+0xc>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b103      	cbz	r3, 8002cac <OSTimeTickHook+0x8>
        (*OS_AppTimeTickHookPtr)();
 8002caa:	4718      	bx	r3
    }
#endif
}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20002ad0 	.word	0x20002ad0

08002cb4 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M4 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8002cb4:	b508      	push	{r3, lr}
    CPU_SR_ALLOC();


    CPU_CRITICAL_ENTER();
 8002cb6:	f7fd fa93 	bl	80001e0 <CPU_SR_Save>
    OSIntNestingCtr++;                                      /* Tell uC/OS-III that we are starting an ISR             */
 8002cba:	4a06      	ldr	r2, [pc, #24]	; (8002cd4 <OS_CPU_SysTickHandler+0x20>)
 8002cbc:	7813      	ldrb	r3, [r2, #0]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	7013      	strb	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 8002cc2:	f7fd fa91 	bl	80001e8 <CPU_SR_Restore>

    OSTimeTick();                                           /* Call uC/OS-III's OSTimeTick()                          */
 8002cc6:	f001 ff41 	bl	8004b4c <OSTimeTick>

    OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
}
 8002cca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
 8002cce:	f000 b829 	b.w	8002d24 <OSIntExit>
 8002cd2:	bf00      	nop
 8002cd4:	20002adc 	.word	0x20002adc

08002cd8 <OSCfg_Init>:
    (void)&OSCfg_TmrTaskStkBasePtr;
    (void)&OSCfg_TmrTaskStkLimit;
    (void)&OSCfg_TmrTaskStkSize;
    (void)&OSCfg_TmrTaskStkSizeRAM;
#endif
}
 8002cd8:	4770      	bx	lr
 8002cda:	bf00      	nop

08002cdc <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/

void  OS_IdleTask (void  *p_arg)
{
 8002cdc:	b538      	push	{r3, r4, r5, lr}
 8002cde:	4d07      	ldr	r5, [pc, #28]	; (8002cfc <OS_IdleTask+0x20>)
 8002ce0:	4c07      	ldr	r4, [pc, #28]	; (8002d00 <OS_IdleTask+0x24>)


    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */

    while (DEF_ON) {
        CPU_CRITICAL_ENTER();
 8002ce2:	f7fd fa7d 	bl	80001e0 <CPU_SR_Save>
        OSIdleTaskCtr++;
 8002ce6:	682a      	ldr	r2, [r5, #0]
#if OS_CFG_STAT_TASK_EN > 0u
        OSStatTaskCtr++;
 8002ce8:	6823      	ldr	r3, [r4, #0]
        OSIdleTaskCtr++;
 8002cea:	3201      	adds	r2, #1
        OSStatTaskCtr++;
 8002cec:	3301      	adds	r3, #1
        OSIdleTaskCtr++;
 8002cee:	602a      	str	r2, [r5, #0]
        OSStatTaskCtr++;
 8002cf0:	6023      	str	r3, [r4, #0]
#endif
        CPU_CRITICAL_EXIT();
 8002cf2:	f7fd fa79 	bl	80001e8 <CPU_SR_Restore>

        OSIdleTaskHook();                                   /* Call user definable HOOK                               */
 8002cf6:	f7ff fea5 	bl	8002a44 <OSIdleTaskHook>
 8002cfa:	e7f2      	b.n	8002ce2 <OS_IdleTask+0x6>
 8002cfc:	20002cb4 	.word	0x20002cb4
 8002d00:	2000285c 	.word	0x2000285c

08002d04 <OSIntEnter>:
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
 8002d04:	4b05      	ldr	r3, [pc, #20]	; (8002d1c <OSIntEnter+0x18>)
 8002d06:	781b      	ldrb	r3, [r3, #0]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d105      	bne.n	8002d18 <OSIntEnter+0x14>
    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
 8002d0c:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <OSIntEnter+0x1c>)
 8002d0e:	7813      	ldrb	r3, [r2, #0]
 8002d10:	2bf9      	cmp	r3, #249	; 0xf9
    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
 8002d12:	bf9c      	itt	ls
 8002d14:	3301      	addls	r3, #1
 8002d16:	7013      	strbls	r3, [r2, #0]
}
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20002861 	.word	0x20002861
 8002d20:	20002adc 	.word	0x20002adc

08002d24 <OSIntExit>:
{
 8002d24:	b538      	push	{r3, r4, r5, lr}
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
 8002d26:	4b18      	ldr	r3, [pc, #96]	; (8002d88 <OSIntExit+0x64>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d000      	beq.n	8002d30 <OSIntExit+0xc>
}
 8002d2e:	bd38      	pop	{r3, r4, r5, pc}
    CPU_INT_DIS();
 8002d30:	f7fd fa56 	bl	80001e0 <CPU_SR_Save>
    if (OSIntNestingCtr == (OS_NESTING_CTR)0) {             /* Prevent OSIntNestingCtr from wrapping                  */
 8002d34:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <OSIntExit+0x68>)
 8002d36:	7813      	ldrb	r3, [r2, #0]
    CPU_INT_DIS();
 8002d38:	4604      	mov	r4, r0
    if (OSIntNestingCtr == (OS_NESTING_CTR)0) {             /* Prevent OSIntNestingCtr from wrapping                  */
 8002d3a:	b30b      	cbz	r3, 8002d80 <OSIntExit+0x5c>
    OSIntNestingCtr--;
 8002d3c:	3b01      	subs	r3, #1
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	7013      	strb	r3, [r2, #0]
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8002d42:	b9eb      	cbnz	r3, 8002d80 <OSIntExit+0x5c>
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler still locked?                                */
 8002d44:	4b12      	ldr	r3, [pc, #72]	; (8002d90 <OSIntExit+0x6c>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	b9d3      	cbnz	r3, 8002d80 <OSIntExit+0x5c>
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
 8002d4a:	f000 ff27 	bl	8003b9c <OS_PrioGetHighest>
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
 8002d4e:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <OSIntExit+0x70>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8002d50:	4a11      	ldr	r2, [pc, #68]	; (8002d98 <OSIntExit+0x74>)
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
 8002d52:	4d12      	ldr	r5, [pc, #72]	; (8002d9c <OSIntExit+0x78>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8002d54:	6812      	ldr	r2, [r2, #0]
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
 8002d56:	7028      	strb	r0, [r5, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
 8002d58:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002d5c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d60:	490f      	ldr	r1, [pc, #60]	; (8002da0 <OSIntExit+0x7c>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8002d62:	4293      	cmp	r3, r2
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
 8002d64:	600b      	str	r3, [r1, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8002d66:	d00a      	beq.n	8002d7e <OSIntExit+0x5a>
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 8002d68:	480e      	ldr	r0, [pc, #56]	; (8002da4 <OSIntExit+0x80>)
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
 8002d6a:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 8002d6e:	6802      	ldr	r2, [r0, #0]
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
 8002d70:	3101      	adds	r1, #1
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 8002d72:	3201      	adds	r2, #1
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
 8002d74:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 8002d78:	6002      	str	r2, [r0, #0]
    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */
 8002d7a:	f7fd faa0 	bl	80002be <OSIntCtxSw>
    CPU_INT_EN();
 8002d7e:	4620      	mov	r0, r4
}
 8002d80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    CPU_INT_EN();
 8002d84:	f7fd ba30 	b.w	80001e8 <CPU_SR_Restore>
 8002d88:	20002861 	.word	0x20002861
 8002d8c:	20002adc 	.word	0x20002adc
 8002d90:	20002850 	.word	0x20002850
 8002d94:	20002864 	.word	0x20002864
 8002d98:	20002ab4 	.word	0x20002ab4
 8002d9c:	200029e4 	.word	0x200029e4
 8002da0:	20002ac0 	.word	0x20002ac0
 8002da4:	20002ad8 	.word	0x20002ad8

08002da8 <OSSched>:
{
 8002da8:	b538      	push	{r3, r4, r5, lr}
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8002daa:	4b17      	ldr	r3, [pc, #92]	; (8002e08 <OSSched+0x60>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	b913      	cbnz	r3, 8002db6 <OSSched+0xe>
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
 8002db0:	4b16      	ldr	r3, [pc, #88]	; (8002e0c <OSSched+0x64>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	b103      	cbz	r3, 8002db8 <OSSched+0x10>
}
 8002db6:	bd38      	pop	{r3, r4, r5, pc}
    CPU_INT_DIS();
 8002db8:	f7fd fa12 	bl	80001e0 <CPU_SR_Save>
 8002dbc:	4604      	mov	r4, r0
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8002dbe:	f000 feed 	bl	8003b9c <OS_PrioGetHighest>
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002dc2:	4b13      	ldr	r3, [pc, #76]	; (8002e10 <OSSched+0x68>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8002dc4:	4a13      	ldr	r2, [pc, #76]	; (8002e14 <OSSched+0x6c>)
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8002dc6:	4d14      	ldr	r5, [pc, #80]	; (8002e18 <OSSched+0x70>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8002dc8:	6812      	ldr	r2, [r2, #0]
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8002dca:	7028      	strb	r0, [r5, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002dcc:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002dd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002dd4:	4911      	ldr	r1, [pc, #68]	; (8002e1c <OSSched+0x74>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8002dd6:	4293      	cmp	r3, r2
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002dd8:	600b      	str	r3, [r1, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8002dda:	d010      	beq.n	8002dfe <OSSched+0x56>
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8002ddc:	4810      	ldr	r0, [pc, #64]	; (8002e20 <OSSched+0x78>)
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8002dde:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8002de2:	6802      	ldr	r2, [r0, #0]
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8002de4:	3101      	adds	r1, #1
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8002de6:	3201      	adds	r2, #1
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8002de8:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8002dec:	6002      	str	r2, [r0, #0]
    OS_TASK_SW();                                           /* Perform a task level context switch                    */
 8002dee:	f7fd fa61 	bl	80002b4 <OSCtxSw>
    CPU_INT_EN();
 8002df2:	4620      	mov	r0, r4
 8002df4:	f7fd f9f8 	bl	80001e8 <CPU_SR_Restore>
    OS_TASK_SW_SYNC();
 8002df8:	f3bf 8f6f 	isb	sy
}
 8002dfc:	bd38      	pop	{r3, r4, r5, pc}
        CPU_INT_EN();                                       /* Yes ... no need to context switch                      */
 8002dfe:	4620      	mov	r0, r4
}
 8002e00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        CPU_INT_EN();                                       /* Yes ... no need to context switch                      */
 8002e04:	f7fd b9f0 	b.w	80001e8 <CPU_SR_Restore>
 8002e08:	20002adc 	.word	0x20002adc
 8002e0c:	20002850 	.word	0x20002850
 8002e10:	20002864 	.word	0x20002864
 8002e14:	20002ab4 	.word	0x20002ab4
 8002e18:	200029e4 	.word	0x200029e4
 8002e1c:	20002ac0 	.word	0x20002ac0
 8002e20:	20002ad8 	.word	0x20002ad8

08002e24 <OSSchedLock>:
{
 8002e24:	b538      	push	{r3, r4, r5, lr}
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 8002e26:	4b0d      	ldr	r3, [pc, #52]	; (8002e5c <OSSchedLock+0x38>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d003      	beq.n	8002e36 <OSSchedLock+0x12>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8002e2e:	f645 6389 	movw	r3, #24201	; 0x5e89
 8002e32:	8003      	strh	r3, [r0, #0]
}
 8002e34:	bd38      	pop	{r3, r4, r5, pc}
    if (OSSchedLockNestingCtr >= (OS_NESTING_CTR)250u) {    /* Prevent OSSchedLockNestingCtr overflowing              */
 8002e36:	4d0a      	ldr	r5, [pc, #40]	; (8002e60 <OSSchedLock+0x3c>)
 8002e38:	782b      	ldrb	r3, [r5, #0]
 8002e3a:	2bf9      	cmp	r3, #249	; 0xf9
 8002e3c:	d903      	bls.n	8002e46 <OSSchedLock+0x22>
       *p_err = OS_ERR_LOCK_NESTING_OVF;
 8002e3e:	f245 2309 	movw	r3, #21001	; 0x5209
 8002e42:	8003      	strh	r3, [r0, #0]
}
 8002e44:	bd38      	pop	{r3, r4, r5, pc}
 8002e46:	4604      	mov	r4, r0
    CPU_CRITICAL_ENTER();
 8002e48:	f7fd f9ca 	bl	80001e0 <CPU_SR_Save>
    OSSchedLockNestingCtr++;                                /* Increment lock nesting level                           */
 8002e4c:	782b      	ldrb	r3, [r5, #0]
 8002e4e:	3301      	adds	r3, #1
 8002e50:	702b      	strb	r3, [r5, #0]
    CPU_CRITICAL_EXIT();
 8002e52:	f7fd f9c9 	bl	80001e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8002e56:	2300      	movs	r3, #0
 8002e58:	8023      	strh	r3, [r4, #0]
}
 8002e5a:	bd38      	pop	{r3, r4, r5, pc}
 8002e5c:	20002861 	.word	0x20002861
 8002e60:	20002850 	.word	0x20002850

08002e64 <OSSchedUnlock>:
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Make sure multitasking is running                      */
 8002e64:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <OSSchedUnlock+0x9c>)
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d003      	beq.n	8002e74 <OSSchedUnlock+0x10>
       *p_err = OS_ERR_OS_NOT_RUNNING;
 8002e6c:	f645 6389 	movw	r3, #24201	; 0x5e89
 8002e70:	8003      	strh	r3, [r0, #0]
 8002e72:	4770      	bx	lr
{
 8002e74:	b570      	push	{r4, r5, r6, lr}
    if (OSSchedLockNestingCtr == (OS_NESTING_CTR)0) {       /* See if the scheduler is locked                         */
 8002e76:	4d23      	ldr	r5, [pc, #140]	; (8002f04 <OSSchedUnlock+0xa0>)
 8002e78:	782b      	ldrb	r3, [r5, #0]
 8002e7a:	b91b      	cbnz	r3, 8002e84 <OSSchedUnlock+0x20>
       *p_err = OS_ERR_SCHED_NOT_LOCKED;
 8002e7c:	f646 5364 	movw	r3, #28004	; 0x6d64
 8002e80:	8003      	strh	r3, [r0, #0]
}
 8002e82:	bd70      	pop	{r4, r5, r6, pc}
 8002e84:	4604      	mov	r4, r0
    CPU_CRITICAL_ENTER();
 8002e86:	f7fd f9ab 	bl	80001e0 <CPU_SR_Save>
    OSSchedLockNestingCtr--;                                /* Decrement lock nesting level                           */
 8002e8a:	782b      	ldrb	r3, [r5, #0]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	702b      	strb	r3, [r5, #0]
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {
 8002e92:	bb5b      	cbnz	r3, 8002eec <OSSchedUnlock+0x88>
    CPU_CRITICAL_EXIT();                                    /* Scheduler should be re-enabled                         */
 8002e94:	f7fd f9a8 	bl	80001e8 <CPU_SR_Restore>
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <OSSchedUnlock+0xa4>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	bb1b      	cbnz	r3, 8002ee6 <OSSchedUnlock+0x82>
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
 8002e9e:	782b      	ldrb	r3, [r5, #0]
 8002ea0:	bb0b      	cbnz	r3, 8002ee6 <OSSchedUnlock+0x82>
    CPU_INT_DIS();
 8002ea2:	f7fd f99d 	bl	80001e0 <CPU_SR_Save>
 8002ea6:	4605      	mov	r5, r0
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8002ea8:	f000 fe78 	bl	8003b9c <OS_PrioGetHighest>
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002eac:	4b17      	ldr	r3, [pc, #92]	; (8002f0c <OSSchedUnlock+0xa8>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8002eae:	4a18      	ldr	r2, [pc, #96]	; (8002f10 <OSSchedUnlock+0xac>)
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8002eb0:	4918      	ldr	r1, [pc, #96]	; (8002f14 <OSSchedUnlock+0xb0>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8002eb2:	6812      	ldr	r2, [r2, #0]
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8002eb4:	7008      	strb	r0, [r1, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002eb6:	eb00 0640 	add.w	r6, r0, r0, lsl #1
 8002eba:	4917      	ldr	r1, [pc, #92]	; (8002f18 <OSSchedUnlock+0xb4>)
 8002ebc:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8002ec0:	600b      	str	r3, [r1, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d018      	beq.n	8002ef8 <OSSchedUnlock+0x94>
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8002ec6:	4815      	ldr	r0, [pc, #84]	; (8002f1c <OSSchedUnlock+0xb8>)
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8002ec8:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8002ecc:	6802      	ldr	r2, [r0, #0]
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8002ece:	3101      	adds	r1, #1
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8002ed0:	3201      	adds	r2, #1
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8002ed2:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8002ed6:	6002      	str	r2, [r0, #0]
    OS_TASK_SW();                                           /* Perform a task level context switch                    */
 8002ed8:	f7fd f9ec 	bl	80002b4 <OSCtxSw>
    CPU_INT_EN();
 8002edc:	4628      	mov	r0, r5
 8002ede:	f7fd f983 	bl	80001e8 <CPU_SR_Restore>
    OS_TASK_SW_SYNC();
 8002ee2:	f3bf 8f6f 	isb	sy
   *p_err = OS_ERR_NONE;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	8023      	strh	r3, [r4, #0]
}
 8002eea:	bd70      	pop	{r4, r5, r6, pc}
        CPU_CRITICAL_EXIT();                                /* Scheduler is still locked                              */
 8002eec:	f7fd f97c 	bl	80001e8 <CPU_SR_Restore>
       *p_err = OS_ERR_SCHED_LOCKED;
 8002ef0:	f646 5363 	movw	r3, #28003	; 0x6d63
 8002ef4:	8023      	strh	r3, [r4, #0]
}
 8002ef6:	bd70      	pop	{r4, r5, r6, pc}
        CPU_INT_EN();                                       /* Yes ... no need to context switch                      */
 8002ef8:	4628      	mov	r0, r5
 8002efa:	f7fd f975 	bl	80001e8 <CPU_SR_Restore>
 8002efe:	e7f2      	b.n	8002ee6 <OSSchedUnlock+0x82>
 8002f00:	20002861 	.word	0x20002861
 8002f04:	20002850 	.word	0x20002850
 8002f08:	20002adc 	.word	0x20002adc
 8002f0c:	20002864 	.word	0x20002864
 8002f10:	20002ab4 	.word	0x20002ab4
 8002f14:	200029e4 	.word	0x200029e4
 8002f18:	20002ac0 	.word	0x20002ac0
 8002f1c:	20002ad8 	.word	0x20002ad8

08002f20 <OSStart>:
{
 8002f20:	b538      	push	{r3, r4, r5, lr}
    if (OSRunning == OS_STATE_OS_STOPPED) {
 8002f22:	4d0f      	ldr	r5, [pc, #60]	; (8002f60 <OSStart+0x40>)
 8002f24:	782b      	ldrb	r3, [r5, #0]
 8002f26:	b11b      	cbz	r3, 8002f30 <OSStart+0x10>
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
 8002f28:	f645 638a 	movw	r3, #24202	; 0x5e8a
 8002f2c:	8003      	strh	r3, [r0, #0]
}
 8002f2e:	bd38      	pop	{r3, r4, r5, pc}
 8002f30:	4604      	mov	r4, r0
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
 8002f32:	f000 fe33 	bl	8003b9c <OS_PrioGetHighest>
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002f36:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <OSStart+0x44>)
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
 8002f38:	4a0b      	ldr	r2, [pc, #44]	; (8002f68 <OSStart+0x48>)
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002f3a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
 8002f3e:	7010      	strb	r0, [r2, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002f40:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
        OSPrioCur       = OSPrioHighRdy;
 8002f44:	4909      	ldr	r1, [pc, #36]	; (8002f6c <OSStart+0x4c>)
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <OSStart+0x50>)
        OSPrioCur       = OSPrioHighRdy;
 8002f48:	7008      	strb	r0, [r1, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 8002f4a:	490a      	ldr	r1, [pc, #40]	; (8002f74 <OSStart+0x54>)
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002f4c:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 8002f4e:	2201      	movs	r2, #1
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 8002f50:	600b      	str	r3, [r1, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 8002f52:	702a      	strb	r2, [r5, #0]
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
 8002f54:	f7fd f970 	bl	8000238 <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
 8002f58:	f643 2399 	movw	r3, #15001	; 0x3a99
 8002f5c:	8023      	strh	r3, [r4, #0]
}
 8002f5e:	bd38      	pop	{r3, r4, r5, pc}
 8002f60:	20002861 	.word	0x20002861
 8002f64:	20002864 	.word	0x20002864
 8002f68:	200029e4 	.word	0x200029e4
 8002f6c:	200029f0 	.word	0x200029f0
 8002f70:	20002ac0 	.word	0x20002ac0
 8002f74:	20002ab4 	.word	0x20002ab4

08002f78 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8002f78:	b570      	push	{r4, r5, r6, lr}
    }
#endif

    OSIdleTaskCtr = (OS_IDLE_CTR)0;
                                                            /* ---------------- CREATE THE IDLE TASK ---------------- */
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
 8002f7a:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <OS_IdleTaskInit+0x3c>)
 8002f7c:	4a0e      	ldr	r2, [pc, #56]	; (8002fb8 <OS_IdleTaskInit+0x40>)
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	; (8002fbc <OS_IdleTaskInit+0x44>)
 8002f80:	680e      	ldr	r6, [r1, #0]
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
    OSIdleTaskCtr = (OS_IDLE_CTR)0;
 8002f86:	4d0e      	ldr	r5, [pc, #56]	; (8002fc0 <OS_IdleTaskInit+0x48>)
{
 8002f88:	b08a      	sub	sp, #40	; 0x28
    OSIdleTaskCtr = (OS_IDLE_CTR)0;
 8002f8a:	2400      	movs	r4, #0
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
 8002f8c:	9203      	str	r2, [sp, #12]
 8002f8e:	210b      	movs	r1, #11
 8002f90:	221f      	movs	r2, #31
 8002f92:	9008      	str	r0, [sp, #32]
 8002f94:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8002f98:	9107      	str	r1, [sp, #28]
 8002f9a:	9200      	str	r2, [sp, #0]
 8002f9c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002fa0:	9404      	str	r4, [sp, #16]
 8002fa2:	4623      	mov	r3, r4
 8002fa4:	4a07      	ldr	r2, [pc, #28]	; (8002fc4 <OS_IdleTaskInit+0x4c>)
 8002fa6:	4908      	ldr	r1, [pc, #32]	; (8002fc8 <OS_IdleTaskInit+0x50>)
 8002fa8:	4808      	ldr	r0, [pc, #32]	; (8002fcc <OS_IdleTaskInit+0x54>)
    OSIdleTaskCtr = (OS_IDLE_CTR)0;
 8002faa:	602c      	str	r4, [r5, #0]
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
 8002fac:	f001 f834 	bl	8004018 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8002fb0:	b00a      	add	sp, #40	; 0x28
 8002fb2:	bd70      	pop	{r4, r5, r6, pc}
 8002fb4:	08008d58 	.word	0x08008d58
 8002fb8:	08008d5c 	.word	0x08008d5c
 8002fbc:	08008d54 	.word	0x08008d54
 8002fc0:	20002cb4 	.word	0x20002cb4
 8002fc4:	08002cdd 	.word	0x08002cdd
 8002fc8:	08008da4 	.word	0x08008da4
 8002fcc:	20002ba8 	.word	0x20002ba8

08002fd0 <OSInit>:
{
 8002fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fd2:	4605      	mov	r5, r0
    OSInitHook();                                           /* Call port specific initialization code                 */
 8002fd4:	f7ff fd3e 	bl	8002a54 <OSInitHook>
    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
 8002fd8:	4b3e      	ldr	r3, [pc, #248]	; (80030d4 <OSInit+0x104>)
    OSSchedLockNestingCtr           = (OS_NESTING_CTR)0;    /* Clear the scheduling lock counter                      */
 8002fda:	4c3f      	ldr	r4, [pc, #252]	; (80030d8 <OSInit+0x108>)
    OSTCBCurPtr                     = (OS_TCB *)0;          /* Initialize OS_TCB pointers to a known state            */
 8002fdc:	483f      	ldr	r0, [pc, #252]	; (80030dc <OSInit+0x10c>)
    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
 8002fde:	681a      	ldr	r2, [r3, #0]
    OSTCBHighRdyPtr                 = (OS_TCB *)0;
 8002fe0:	4b3f      	ldr	r3, [pc, #252]	; (80030e0 <OSInit+0x110>)
    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
 8002fe2:	4f40      	ldr	r7, [pc, #256]	; (80030e4 <OSInit+0x114>)
    OSRunning                       =  OS_STATE_OS_STOPPED; /* Indicate that multitasking not started                 */
 8002fe4:	4e40      	ldr	r6, [pc, #256]	; (80030e8 <OSInit+0x118>)
    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
 8002fe6:	2100      	movs	r1, #0
    OSSchedLockNestingCtr           = (OS_NESTING_CTR)0;    /* Clear the scheduling lock counter                      */
 8002fe8:	7021      	strb	r1, [r4, #0]
    OSTCBCurPtr                     = (OS_TCB *)0;          /* Initialize OS_TCB pointers to a known state            */
 8002fea:	6001      	str	r1, [r0, #0]
    OSTCBHighRdyPtr                 = (OS_TCB *)0;
 8002fec:	6019      	str	r1, [r3, #0]
    OSPrioCur                       = (OS_PRIO)0;           /* Initialize priority variables to a known state         */
 8002fee:	4c3f      	ldr	r4, [pc, #252]	; (80030ec <OSInit+0x11c>)
    OSPrioHighRdy                   = (OS_PRIO)0;
 8002ff0:	483f      	ldr	r0, [pc, #252]	; (80030f0 <OSInit+0x120>)
    OSPrioSaved                     = (OS_PRIO)0;
 8002ff2:	4b40      	ldr	r3, [pc, #256]	; (80030f4 <OSInit+0x124>)
    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
 8002ff4:	7039      	strb	r1, [r7, #0]
    OSRunning                       =  OS_STATE_OS_STOPPED; /* Indicate that multitasking not started                 */
 8002ff6:	7031      	strb	r1, [r6, #0]
    OSPrioCur                       = (OS_PRIO)0;           /* Initialize priority variables to a known state         */
 8002ff8:	7021      	strb	r1, [r4, #0]
    OSPrioHighRdy                   = (OS_PRIO)0;
 8002ffa:	7001      	strb	r1, [r0, #0]
    OSPrioSaved                     = (OS_PRIO)0;
 8002ffc:	7019      	strb	r1, [r3, #0]
    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
 8002ffe:	b12a      	cbz	r2, 800300c <OSInit+0x3c>
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
 8003000:	4b3d      	ldr	r3, [pc, #244]	; (80030f8 <OSInit+0x128>)
 8003002:	6818      	ldr	r0, [r3, #0]
        if (p_stk != (CPU_STK *)0) {
 8003004:	b110      	cbz	r0, 800300c <OSInit+0x3c>
 8003006:	0092      	lsls	r2, r2, #2
 8003008:	f004 fbe5 	bl	80077d6 <memset>
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 800300c:	4a3b      	ldr	r2, [pc, #236]	; (80030fc <OSInit+0x12c>)
    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 800300e:	4b3c      	ldr	r3, [pc, #240]	; (8003100 <OSInit+0x130>)
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 8003010:	493c      	ldr	r1, [pc, #240]	; (8003104 <OSInit+0x134>)
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 8003012:	483d      	ldr	r0, [pc, #244]	; (8003108 <OSInit+0x138>)
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;          /* Clear application hook pointers                        */
 8003014:	4f3d      	ldr	r7, [pc, #244]	; (800310c <OSInit+0x13c>)
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 8003016:	4e3e      	ldr	r6, [pc, #248]	; (8003110 <OSInit+0x140>)
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;          /* Clear application hook pointers                        */
 8003018:	2400      	movs	r4, #0
    OS_AppTaskReturnHookPtr = (OS_APP_HOOK_TCB )0;
 800301a:	6014      	str	r4, [r2, #0]
    OS_AppIdleTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 800301c:	601c      	str	r4, [r3, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 800301e:	4a3d      	ldr	r2, [pc, #244]	; (8003114 <OSInit+0x144>)
    OSTaskRegNextAvailID    = (OS_REG_ID)0;
 8003020:	4b3d      	ldr	r3, [pc, #244]	; (8003118 <OSInit+0x148>)
    OS_AppTaskSwHookPtr     = (OS_APP_HOOK_VOID)0;
 8003022:	600c      	str	r4, [r1, #0]
    OSTaskRegNextAvailID    = (OS_REG_ID)0;
 8003024:	701c      	strb	r4, [r3, #0]
    OS_AppTaskCreateHookPtr = (OS_APP_HOOK_TCB )0;          /* Clear application hook pointers                        */
 8003026:	603c      	str	r4, [r7, #0]
    OS_AppTaskDelHookPtr    = (OS_APP_HOOK_TCB )0;
 8003028:	6034      	str	r4, [r6, #0]
    OS_AppStatTaskHookPtr   = (OS_APP_HOOK_VOID)0;
 800302a:	6004      	str	r4, [r0, #0]
    OS_AppTimeTickHookPtr   = (OS_APP_HOOK_VOID)0;
 800302c:	6014      	str	r4, [r2, #0]
    OS_PrioInit();                                          /* Initialize the priority bitmap table                   */
 800302e:	f000 fdaf 	bl	8003b90 <OS_PrioInit>
 8003032:	4b3a      	ldr	r3, [pc, #232]	; (800311c <OSInit+0x14c>)
 8003034:	f503 71c0 	add.w	r1, r3, #384	; 0x180



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
        p_rdy_list = &OSRdyList[i];
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
 8003038:	811c      	strh	r4, [r3, #8]
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
 800303a:	e9c3 4400 	strd	r4, r4, [r3]
 800303e:	330c      	adds	r3, #12
    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 8003040:	428b      	cmp	r3, r1
 8003042:	d1f9      	bne.n	8003038 <OSInit+0x68>
    OS_FlagInit(p_err);
 8003044:	4628      	mov	r0, r5
 8003046:	f000 fba5 	bl	8003794 <OS_FlagInit>
    if (*p_err != OS_ERR_NONE) {
 800304a:	882b      	ldrh	r3, [r5, #0]
 800304c:	b103      	cbz	r3, 8003050 <OSInit+0x80>
}
 800304e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OS_MemInit(p_err);
 8003050:	4628      	mov	r0, r5
 8003052:	f000 fbab 	bl	80037ac <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 8003056:	882b      	ldrh	r3, [r5, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f8      	bne.n	800304e <OSInit+0x7e>
    OS_MsgPoolInit(p_err);
 800305c:	4628      	mov	r0, r5
 800305e:	f000 fbb1 	bl	80037c4 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 8003062:	882b      	ldrh	r3, [r5, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f2      	bne.n	800304e <OSInit+0x7e>
    OS_MutexInit(p_err);
 8003068:	4628      	mov	r0, r5
 800306a:	f000 fd75 	bl	8003b58 <OS_MutexInit>
    if (*p_err != OS_ERR_NONE) {
 800306e:	882b      	ldrh	r3, [r5, #0]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ec      	bne.n	800304e <OSInit+0x7e>
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
 8003074:	4628      	mov	r0, r5
 8003076:	f000 fdd3 	bl	8003c20 <OS_QInit>
    if (*p_err != OS_ERR_NONE) {
 800307a:	882b      	ldrh	r3, [r5, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d1e6      	bne.n	800304e <OSInit+0x7e>
    OS_SemInit(p_err);
 8003080:	4628      	mov	r0, r5
 8003082:	f000 fdd9 	bl	8003c38 <OS_SemInit>
    if (*p_err != OS_ERR_NONE) {
 8003086:	882b      	ldrh	r3, [r5, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e0      	bne.n	800304e <OSInit+0x7e>
    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
 800308c:	4628      	mov	r0, r5
 800308e:	f001 f9dd 	bl	800444c <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8003092:	882b      	ldrh	r3, [r5, #0]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1da      	bne.n	800304e <OSInit+0x7e>
    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
 8003098:	4628      	mov	r0, r5
 800309a:	f7ff ff6d 	bl	8002f78 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 800309e:	882b      	ldrh	r3, [r5, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1d4      	bne.n	800304e <OSInit+0x7e>
    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
 80030a4:	4628      	mov	r0, r5
 80030a6:	f001 fb91 	bl	80047cc <OS_TickTaskInit>
    if (*p_err != OS_ERR_NONE) {
 80030aa:	882b      	ldrh	r3, [r5, #0]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1ce      	bne.n	800304e <OSInit+0x7e>
    OS_StatTaskInit(p_err);
 80030b0:	4628      	mov	r0, r5
 80030b2:	f000 ff5b 	bl	8003f6c <OS_StatTaskInit>
    if (*p_err != OS_ERR_NONE) {
 80030b6:	882b      	ldrh	r3, [r5, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1c8      	bne.n	800304e <OSInit+0x7e>
    OS_TmrInit(p_err);
 80030bc:	4628      	mov	r0, r5
 80030be:	f001 fdd5 	bl	8004c6c <OS_TmrInit>
    if (*p_err != OS_ERR_NONE) {
 80030c2:	882b      	ldrh	r3, [r5, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d1c2      	bne.n	800304e <OSInit+0x7e>
    OS_Dbg_Init();
 80030c8:	f000 fb62 	bl	8003790 <OS_Dbg_Init>
}
 80030cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    OSCfg_Init();
 80030d0:	f7ff be02 	b.w	8002cd8 <OSCfg_Init>
 80030d4:	08008d50 	.word	0x08008d50
 80030d8:	20002850 	.word	0x20002850
 80030dc:	20002ab4 	.word	0x20002ab4
 80030e0:	20002ac0 	.word	0x20002ac0
 80030e4:	20002adc 	.word	0x20002adc
 80030e8:	20002861 	.word	0x20002861
 80030ec:	200029f0 	.word	0x200029f0
 80030f0:	200029e4 	.word	0x200029e4
 80030f4:	20002abc 	.word	0x20002abc
 80030f8:	08008d4c 	.word	0x08008d4c
 80030fc:	20002854 	.word	0x20002854
 8003100:	20002ca0 	.word	0x20002ca0
 8003104:	20002cac 	.word	0x20002cac
 8003108:	20002cbc 	.word	0x20002cbc
 800310c:	200029ec 	.word	0x200029ec
 8003110:	20002acc 	.word	0x20002acc
 8003114:	20002ad0 	.word	0x20002ad0
 8003118:	20002860 	.word	0x20002860
 800311c:	20002864 	.word	0x20002864

08003120 <OS_Pend>:
{
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    OSTCBCurPtr->PendOn     = pending_on;                    /* Resource not available, wait until it is              */
 8003122:	4f55      	ldr	r7, [pc, #340]	; (8003278 <OS_Pend+0x158>)
 8003124:	683c      	ldr	r4, [r7, #0]
    OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
 8003126:	f04f 0c00 	mov.w	ip, #0
{
 800312a:	4606      	mov	r6, r0
 800312c:	460d      	mov	r5, r1
    OSTCBCurPtr->PendOn     = pending_on;                    /* Resource not available, wait until it is              */
 800312e:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
 8003132:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
    if (timeout > (OS_TICK)0) {                             /* Add task to tick list if timeout non zero               */
 8003136:	2b00      	cmp	r3, #0
 8003138:	d163      	bne.n	8003202 <OS_Pend+0xe2>
        OS_TickListInsert(&OSTickListTimeout, p_tcb, timeout);
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 800313a:	2302      	movs	r3, #2
 800313c:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    p_tcb1     = p_tcb->PrevPtr;                            /* Point to next and previous OS_TCB in the list          */
 8003140:	6921      	ldr	r1, [r4, #16]
    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8003142:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    p_tcb2     = p_tcb->NextPtr;
 8003146:	68e3      	ldr	r3, [r4, #12]
    if (p_tcb1 == (OS_TCB *)0) {                            /* Was the OS_TCB to remove was at the head?              */
 8003148:	b1e9      	cbz	r1, 8003186 <OS_Pend+0x66>
        p_rdy_list->NbrEntries--;                           /* No,  one less entry                                    */
 800314a:	4a4c      	ldr	r2, [pc, #304]	; (800327c <OS_Pend+0x15c>)
 800314c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003150:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8003154:	8902      	ldrh	r2, [r0, #8]
 8003156:	3a01      	subs	r2, #1
 8003158:	8102      	strh	r2, [r0, #8]
        p_tcb1->NextPtr = p_tcb2;
 800315a:	60cb      	str	r3, [r1, #12]
        if (p_tcb2 == (OS_TCB *)0) {
 800315c:	2b00      	cmp	r3, #0
 800315e:	d05d      	beq.n	800321c <OS_Pend+0xfc>
            p_tcb2->PrevPtr     = p_tcb1;
 8003160:	6119      	str	r1, [r3, #16]
    p_tcb->PrevPtr = (OS_TCB *)0;
 8003162:	2200      	movs	r2, #0
 8003164:	683b      	ldr	r3, [r7, #0]
    p_tcb->NextPtr = (OS_TCB *)0;
 8003166:	e9c4 2203 	strd	r2, r2, [r4, #12]
    if (p_obj != (OS_PEND_OBJ *)0) {                         /* Add the current task to the pend list ...             */
 800316a:	bb1d      	cbnz	r5, 80031b4 <OS_Pend+0x94>
        switch (p_tcb->PendOn) {
 800316c:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
        OSTCBCurPtr->PendDataTblEntries = (OS_OBJ_QTY    )0; /* If no object being pended on the clear these fields   */
 8003170:	f8a3 5046 	strh.w	r5, [r3, #70]	; 0x46
        switch (p_tcb->PendOn) {
 8003174:	2a02      	cmp	r2, #2
        OSTCBCurPtr->PendDataTblPtr     = (OS_PEND_DATA *)0; /* ... in the TCB                                        */
 8003176:	631d      	str	r5, [r3, #48]	; 0x30
        switch (p_tcb->PendOn) {
 8003178:	d065      	beq.n	8003246 <OS_Pend+0x126>
 800317a:	2a07      	cmp	r2, #7
 800317c:	d14a      	bne.n	8003214 <OS_Pend+0xf4>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
 800317e:	4a40      	ldr	r2, [pc, #256]	; (8003280 <OS_Pend+0x160>)
 8003180:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 8003184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (p_tcb2 == (OS_TCB *)0) {                        /* Yes, was it the only OS_TCB?                           */
 8003186:	2b00      	cmp	r3, #0
 8003188:	d061      	beq.n	800324e <OS_Pend+0x12e>
            p_rdy_list->NbrEntries--;                       /*      No,  one less entry                               */
 800318a:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 800327c <OS_Pend+0x15c>
 800318e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003192:	0080      	lsls	r0, r0, #2
 8003194:	eb0c 0e00 	add.w	lr, ip, r0
 8003198:	f8be 2008 	ldrh.w	r2, [lr, #8]
 800319c:	3a01      	subs	r2, #1
 800319e:	f8ae 2008 	strh.w	r2, [lr, #8]
    p_tcb->PrevPtr = (OS_TCB *)0;
 80031a2:	2200      	movs	r2, #0
            p_tcb2->PrevPtr        = (OS_TCB   *)0;         /*           adjust back link of new list head            */
 80031a4:	6119      	str	r1, [r3, #16]
            p_rdy_list->HeadPtr    = p_tcb2;                /*           adjust OS_RDY_LIST's new head                */
 80031a6:	f84c 3000 	str.w	r3, [ip, r0]
 80031aa:	683b      	ldr	r3, [r7, #0]
    p_tcb->NextPtr = (OS_TCB *)0;
 80031ac:	e9c4 2203 	strd	r2, r2, [r4, #12]
    if (p_obj != (OS_PEND_OBJ *)0) {                         /* Add the current task to the pend list ...             */
 80031b0:	2d00      	cmp	r5, #0
 80031b2:	d0db      	beq.n	800316c <OS_Pend+0x4c>
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {                   /* CASE 0: Insert when there are no entries     */
 80031b4:	8a28      	ldrh	r0, [r5, #16]
        p_pend_data->PendObjPtr = p_obj;                     /* Save the pointer to the object pending on             */
 80031b6:	60f5      	str	r5, [r6, #12]
    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
 80031b8:	2101      	movs	r1, #1
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;
 80031ba:	631e      	str	r6, [r3, #48]	; 0x30
    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
 80031bc:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
        p_pend_data_tbl->PrevPtr    = (OS_PEND_DATA *)0;
 80031c0:	e9c6 2200 	strd	r2, r2, [r6]
        p_pend_data_tbl->RdyMsgPtr  = (void         *)0;
 80031c4:	e9c6 2204 	strd	r2, r2, [r6, #16]
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
 80031c8:	8332      	strh	r2, [r6, #24]
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
 80031ca:	61f2      	str	r2, [r6, #28]
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
 80031cc:	60b3      	str	r3, [r6, #8]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {                   /* CASE 0: Insert when there are no entries     */
 80031ce:	b338      	cbz	r0, 8003220 <OS_Pend+0x100>
        p_pend_data_next = p_pend_list->HeadPtr;
 80031d0:	68aa      	ldr	r2, [r5, #8]
    prio  = p_tcb->Prio;
 80031d2:	f893 4037 	ldrb.w	r4, [r3, #55]	; 0x37
 80031d6:	6891      	ldr	r1, [r2, #8]
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
 80031d8:	3001      	adds	r0, #1
 80031da:	8228      	strh	r0, [r5, #16]
            if (prio < p_tcb_next->Prio) {
 80031dc:	f891 0037 	ldrb.w	r0, [r1, #55]	; 0x37
 80031e0:	42a0      	cmp	r0, r4
 80031e2:	d905      	bls.n	80031f0 <OS_Pend+0xd0>
 80031e4:	e028      	b.n	8003238 <OS_Pend+0x118>
 80031e6:	6890      	ldr	r0, [r2, #8]
 80031e8:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 80031ec:	42a0      	cmp	r0, r4
 80031ee:	d823      	bhi.n	8003238 <OS_Pend+0x118>
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
 80031f0:	6852      	ldr	r2, [r2, #4]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 80031f2:	2a00      	cmp	r2, #0
 80031f4:	d1f7      	bne.n	80031e6 <OS_Pend+0xc6>
            p_pend_data_prev          = p_pend_list->TailPtr;
 80031f6:	68e8      	ldr	r0, [r5, #12]
            p_pend_data->PrevPtr      = p_pend_data_prev;
 80031f8:	e9c6 0200 	strd	r0, r2, [r6]
            p_pend_data_prev->NextPtr = p_pend_data;
 80031fc:	6046      	str	r6, [r0, #4]
            p_pend_list->TailPtr      = p_pend_data;
 80031fe:	60ee      	str	r6, [r5, #12]
 8003200:	e014      	b.n	800322c <OS_Pend+0x10c>
        OS_TickListInsert(&OSTickListTimeout, p_tcb, timeout);
 8003202:	461a      	mov	r2, r3
 8003204:	4621      	mov	r1, r4
 8003206:	481f      	ldr	r0, [pc, #124]	; (8003284 <OS_Pend+0x164>)
 8003208:	f001 fb30 	bl	800486c <OS_TickListInsert>
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 8003212:	e795      	b.n	8003140 <OS_Pend+0x20>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
 8003214:	4a1c      	ldr	r2, [pc, #112]	; (8003288 <OS_Pend+0x168>)
 8003216:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800321a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            p_rdy_list->TailPtr = p_tcb1;                   /*      Removing the TCB at the tail, adj the tail ptr    */
 800321c:	6041      	str	r1, [r0, #4]
 800321e:	e7a0      	b.n	8003162 <OS_Pend+0x42>
        p_pend_list->NbrEntries = (OS_OBJ_QTY)1;                      /*         This is the first entry              */
 8003220:	8229      	strh	r1, [r5, #16]
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
 8003222:	e9c6 0000 	strd	r0, r0, [r6]
        p_pend_list->TailPtr    = p_pend_data;
 8003226:	e9c5 6602 	strd	r6, r6, [r5, #8]
 800322a:	4619      	mov	r1, r3
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
 800322c:	6a0a      	ldr	r2, [r1, #32]
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                /* Task pending on this object ... save name in TCB       */
 800322e:	6869      	ldr	r1, [r5, #4]
 8003230:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
 8003234:	61ea      	str	r2, [r5, #28]
}
 8003236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (p_pend_data_next->PrevPtr == (OS_PEND_DATA *)0) {     /*         Is new TCB highest priority?         */
 8003238:	6810      	ldr	r0, [r2, #0]
 800323a:	b1b0      	cbz	r0, 800326a <OS_Pend+0x14a>
                p_pend_data->NextPtr       = p_pend_data_next;
 800323c:	e9c6 0200 	strd	r0, r2, [r6]
                p_pend_data_prev->NextPtr  = p_pend_data;
 8003240:	6046      	str	r6, [r0, #4]
                p_pend_data_next->PrevPtr  = p_pend_data;
 8003242:	6016      	str	r6, [r2, #0]
 8003244:	e7f2      	b.n	800322c <OS_Pend+0x10c>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
 8003246:	4a11      	ldr	r2, [pc, #68]	; (800328c <OS_Pend+0x16c>)
 8003248:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
}
 800324c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 800324e:	f8df c02c 	ldr.w	ip, [pc, #44]	; 800327c <OS_Pend+0x15c>
 8003252:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 8003256:	0092      	lsls	r2, r2, #2
 8003258:	eb0c 0102 	add.w	r1, ip, r2
            p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 800325c:	f84c 3002 	str.w	r3, [ip, r2]
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 8003260:	810b      	strh	r3, [r1, #8]
            p_rdy_list->TailPtr    = (OS_TCB   *)0;
 8003262:	604b      	str	r3, [r1, #4]
            OS_PrioRemove(p_tcb->Prio);
 8003264:	f000 fcc6 	bl	8003bf4 <OS_PrioRemove>
 8003268:	e77b      	b.n	8003162 <OS_Pend+0x42>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
 800326a:	6016      	str	r6, [r2, #0]
                p_pend_list->HeadPtr       = p_pend_data;
 800326c:	4619      	mov	r1, r3
                p_pend_data->NextPtr       = p_pend_data_next;
 800326e:	e9c6 0200 	strd	r0, r2, [r6]
                p_pend_list->HeadPtr       = p_pend_data;
 8003272:	60ae      	str	r6, [r5, #8]
 8003274:	e7da      	b.n	800322c <OS_Pend+0x10c>
 8003276:	bf00      	nop
 8003278:	20002ab4 	.word	0x20002ab4
 800327c:	20002864 	.word	0x20002864
 8003280:	08008dc0 	.word	0x08008dc0
 8003284:	20002db0 	.word	0x20002db0
 8003288:	08008dcc 	.word	0x08008dcc
 800328c:	08008db8 	.word	0x08008db8

08003290 <OS_PendListChangePrio>:
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */
 8003290:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
 8003294:	6b02      	ldr	r2, [r0, #48]	; 0x30
    while (n_pend_list > 0u) {
 8003296:	2b00      	cmp	r3, #0
 8003298:	d043      	beq.n	8003322 <OS_PendListChangePrio+0x92>
 800329a:	3b01      	subs	r3, #1
{
 800329c:	b4f0      	push	{r4, r5, r6, r7}
 800329e:	b29b      	uxth	r3, r3
 80032a0:	f102 0740 	add.w	r7, r2, #64	; 0x40
 80032a4:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 80032a8:	3220      	adds	r2, #32
    p_pend_data->NextPtr = (OS_PEND_DATA *)0;
 80032aa:	2600      	movs	r6, #0
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 80032ac:	f852 1c14 	ldr.w	r1, [r2, #-20]
        if (p_pend_list->NbrEntries > 1u) {                         /* Only move if multiple entries in the list      */
 80032b0:	8a08      	ldrh	r0, [r1, #16]
 80032b2:	2801      	cmp	r0, #1
 80032b4:	f1a2 0520 	sub.w	r5, r2, #32
 80032b8:	d91c      	bls.n	80032f4 <OS_PendListChangePrio+0x64>
 80032ba:	e952 3408 	ldrd	r3, r4, [r2, #-32]
    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 80032be:	b1f3      	cbz	r3, 80032fe <OS_PendListChangePrio+0x6e>
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 80032c0:	605c      	str	r4, [r3, #4]
    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 80032c2:	b33c      	cbz	r4, 8003314 <OS_PendListChangePrio+0x84>
        p_next->PrevPtr      = p_prev;
 80032c4:	6023      	str	r3, [r4, #0]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 80032c6:	e942 6608 	strd	r6, r6, [r2, #-32]
    prio  = p_tcb->Prio;
 80032ca:	f852 4c18 	ldr.w	r4, [r2, #-24]
        p_pend_data_next = p_pend_list->HeadPtr;
 80032ce:	688b      	ldr	r3, [r1, #8]
    prio  = p_tcb->Prio;
 80032d0:	f894 4037 	ldrb.w	r4, [r4, #55]	; 0x37
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
 80032d4:	8208      	strh	r0, [r1, #16]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 80032d6:	b913      	cbnz	r3, 80032de <OS_PendListChangePrio+0x4e>
 80032d8:	e014      	b.n	8003304 <OS_PendListChangePrio+0x74>
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
 80032da:	685b      	ldr	r3, [r3, #4]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 80032dc:	b193      	cbz	r3, 8003304 <OS_PendListChangePrio+0x74>
            if (prio < p_tcb_next->Prio) {
 80032de:	6898      	ldr	r0, [r3, #8]
 80032e0:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 80032e4:	42a0      	cmp	r0, r4
 80032e6:	d9f8      	bls.n	80032da <OS_PendListChangePrio+0x4a>
            if (p_pend_data_next->PrevPtr == (OS_PEND_DATA *)0) {     /*         Is new TCB highest priority?         */
 80032e8:	6818      	ldr	r0, [r3, #0]
 80032ea:	b1a8      	cbz	r0, 8003318 <OS_PendListChangePrio+0x88>
                p_pend_data->NextPtr       = p_pend_data_next;
 80032ec:	e942 0308 	strd	r0, r3, [r2, #-32]
                p_pend_data_prev->NextPtr  = p_pend_data;
 80032f0:	6045      	str	r5, [r0, #4]
                p_pend_data_next->PrevPtr  = p_pend_data;
 80032f2:	601d      	str	r5, [r3, #0]
 80032f4:	3220      	adds	r2, #32
    while (n_pend_list > 0u) {
 80032f6:	42ba      	cmp	r2, r7
 80032f8:	d1d8      	bne.n	80032ac <OS_PendListChangePrio+0x1c>
}
 80032fa:	bcf0      	pop	{r4, r5, r6, r7}
 80032fc:	4770      	bx	lr
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 80032fe:	6023      	str	r3, [r4, #0]
        p_pend_list->HeadPtr = p_next;
 8003300:	608c      	str	r4, [r1, #8]
 8003302:	e7e0      	b.n	80032c6 <OS_PendListChangePrio+0x36>
            p_pend_data->NextPtr      = (OS_PEND_DATA *)0;            /*         ... insert at the tail.              */
 8003304:	f842 6c1c 	str.w	r6, [r2, #-28]
            p_pend_data_prev          = p_pend_list->TailPtr;
 8003308:	68cb      	ldr	r3, [r1, #12]
            p_pend_data->PrevPtr      = p_pend_data_prev;
 800330a:	f842 3c20 	str.w	r3, [r2, #-32]
            p_pend_data_prev->NextPtr = p_pend_data;
 800330e:	605d      	str	r5, [r3, #4]
            p_pend_list->TailPtr      = p_pend_data;
 8003310:	60cd      	str	r5, [r1, #12]
 8003312:	e7ef      	b.n	80032f4 <OS_PendListChangePrio+0x64>
        p_pend_list->TailPtr = p_prev;
 8003314:	60cb      	str	r3, [r1, #12]
 8003316:	e7d6      	b.n	80032c6 <OS_PendListChangePrio+0x36>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
 8003318:	601d      	str	r5, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 800331a:	e942 0308 	strd	r0, r3, [r2, #-32]
                p_pend_list->HeadPtr       = p_pend_data;
 800331e:	608d      	str	r5, [r1, #8]
 8003320:	e7e8      	b.n	80032f4 <OS_PendListChangePrio+0x64>
 8003322:	4770      	bx	lr

08003324 <OS_PendListInit>:
    p_pend_list->HeadPtr    = (OS_PEND_DATA *)0;
 8003324:	2300      	movs	r3, #0
    p_pend_list->TailPtr    = (OS_PEND_DATA *)0;
 8003326:	e9c0 3300 	strd	r3, r3, [r0]
    p_pend_list->NbrEntries = (OS_OBJ_QTY    )0;
 800332a:	8103      	strh	r3, [r0, #8]
}
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop

08003330 <OS_PendListRemove>:
{
 8003330:	b4f0      	push	{r4, r5, r6, r7}
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 8003332:	f8b0 7046 	ldrh.w	r7, [r0, #70]	; 0x46
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 8003336:	6b03      	ldr	r3, [r0, #48]	; 0x30
    while (n_pend_list > (OS_OBJ_QTY)0) {
 8003338:	b307      	cbz	r7, 800337c <OS_PendListRemove+0x4c>
 800333a:	3f01      	subs	r7, #1
 800333c:	b2ba      	uxth	r2, r7
 800333e:	f103 0740 	add.w	r7, r3, #64	; 0x40
 8003342:	eb07 1742 	add.w	r7, r7, r2, lsl #5
 8003346:	3320      	adds	r3, #32
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
 8003348:	2400      	movs	r4, #0
 800334a:	e00c      	b.n	8003366 <OS_PendListRemove+0x36>
 800334c:	e953 5608 	ldrd	r5, r6, [r3, #-32]
    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 8003350:	b18d      	cbz	r5, 8003376 <OS_PendListRemove+0x46>
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 8003352:	606e      	str	r6, [r5, #4]
    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 8003354:	b1c6      	cbz	r6, 8003388 <OS_PendListRemove+0x58>
        p_next->PrevPtr      = p_prev;
 8003356:	6035      	str	r5, [r6, #0]
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
 8003358:	3a01      	subs	r2, #1
 800335a:	820a      	strh	r2, [r1, #16]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 800335c:	e943 4408 	strd	r4, r4, [r3, #-32]
 8003360:	3320      	adds	r3, #32
    while (n_pend_list > (OS_OBJ_QTY)0) {
 8003362:	42bb      	cmp	r3, r7
 8003364:	d00a      	beq.n	800337c <OS_PendListRemove+0x4c>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 8003366:	f853 1c14 	ldr.w	r1, [r3, #-20]
    if (p_pend_list->NbrEntries == 1u) {
 800336a:	8a0a      	ldrh	r2, [r1, #16]
 800336c:	2a01      	cmp	r2, #1
 800336e:	d1ed      	bne.n	800334c <OS_PendListRemove+0x1c>
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
 8003370:	e9c1 4402 	strd	r4, r4, [r1, #8]
 8003374:	e7f0      	b.n	8003358 <OS_PendListRemove+0x28>
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 8003376:	6035      	str	r5, [r6, #0]
        p_pend_list->HeadPtr = p_next;
 8003378:	608e      	str	r6, [r1, #8]
 800337a:	e7ed      	b.n	8003358 <OS_PendListRemove+0x28>
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
 800337c:	2300      	movs	r3, #0
 800337e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
 8003382:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003384:	bcf0      	pop	{r4, r5, r6, r7}
 8003386:	4770      	bx	lr
        p_pend_list->TailPtr = p_prev;
 8003388:	60cd      	str	r5, [r1, #12]
 800338a:	e7e5      	b.n	8003358 <OS_PendListRemove+0x28>

0800338c <OS_Post>:
{
 800338c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (p_tcb->TaskState) {
 800338e:	f891 5036 	ldrb.w	r5, [r1, #54]	; 0x36
{
 8003392:	460c      	mov	r4, r1
    switch (p_tcb->TaskState) {
 8003394:	1ea9      	subs	r1, r5, #2
{
 8003396:	469c      	mov	ip, r3
    switch (p_tcb->TaskState) {
 8003398:	2905      	cmp	r1, #5
 800339a:	d838      	bhi.n	800340e <OS_Post+0x82>
 800339c:	e8df f001 	tbb	[pc, r1]
 80033a0:	37373838 	.word	0x37373838
 80033a4:	6c6c      	.short	0x6c6c
             if (p_obj != (OS_PEND_OBJ *)0) {
 80033a6:	b178      	cbz	r0, 80033c8 <OS_Post+0x3c>
    p_pend_data       =  p_pend_list->HeadPtr;
 80033a8:	6882      	ldr	r2, [r0, #8]
    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");          /* Remove name of object pended on for readied task       */
 80033aa:	499d      	ldr	r1, [pc, #628]	; (8003620 <OS_Post+0x294>)
 80033ac:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
 80033b6:	6323      	str	r3, [r4, #48]	; 0x30
    if (p_pend_data  != (OS_PEND_DATA *)0) {
 80033b8:	2a00      	cmp	r2, #0
 80033ba:	f000 812d 	beq.w	8003618 <OS_Post+0x28c>
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
 80033be:	6893      	ldr	r3, [r2, #8]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	61c3      	str	r3, [r0, #28]
 80033c4:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 80033c8:	2d03      	cmp	r5, #3
 80033ca:	f000 80fa 	beq.w	80035c2 <OS_Post+0x236>
    OS_PrioInsert(p_tcb->Prio);
 80033ce:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
 80033d2:	f000 fbfb 	bl	8003bcc <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
 80033d6:	4a93      	ldr	r2, [pc, #588]	; (8003624 <OS_Post+0x298>)
 80033d8:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80033dc:	7812      	ldrb	r2, [r2, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	f000 80a7 	beq.w	8003532 <OS_Post+0x1a6>
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 80033e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80033e8:	498f      	ldr	r1, [pc, #572]	; (8003628 <OS_Post+0x29c>)
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	18c8      	adds	r0, r1, r3
 80033ee:	8902      	ldrh	r2, [r0, #8]
 80033f0:	2a00      	cmp	r2, #0
 80033f2:	f000 808d 	beq.w	8003510 <OS_Post+0x184>
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
 80033f6:	58cd      	ldr	r5, [r1, r3]
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 80033f8:	3201      	adds	r2, #1
 80033fa:	8102      	strh	r2, [r0, #8]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
 80033fc:	2200      	movs	r2, #0
 80033fe:	e9c4 5203 	strd	r5, r2, [r4, #12]
        p_tcb2->PrevPtr        = p_tcb;
 8003402:	612c      	str	r4, [r5, #16]
        p_rdy_list->HeadPtr    = p_tcb;
 8003404:	50cc      	str	r4, [r1, r3]
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 8003406:	2300      	movs	r3, #0
 8003408:	86a3      	strh	r3, [r4, #52]	; 0x34
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 800340a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800340e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 8003410:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 8003414:	2903      	cmp	r1, #3
 8003416:	f000 809b 	beq.w	8003550 <OS_Post+0x1c4>
                 p_tcb->TS      = ts;
 800341a:	9b06      	ldr	r3, [sp, #24]
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 800341c:	65a2      	str	r2, [r4, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 800341e:	f8a4 c05c 	strh.w	ip, [r4, #92]	; 0x5c
                 p_tcb->TS      = ts;
 8003422:	64a3      	str	r3, [r4, #72]	; 0x48
             if (p_obj != (OS_PEND_OBJ *)0) {
 8003424:	2800      	cmp	r0, #0
 8003426:	d0cf      	beq.n	80033c8 <OS_Post+0x3c>
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 8003428:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
    while (n_pend_list > (OS_OBJ_QTY)0) {
 800342c:	2f00      	cmp	r7, #0
 800342e:	d0bb      	beq.n	80033a8 <OS_Post+0x1c>
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 8003430:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003432:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8003436:	fa1f f38c 	uxth.w	r3, ip
 800343a:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800343e:	eb0c 1c43 	add.w	ip, ip, r3, lsl #5
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
 8003442:	2500      	movs	r5, #0
 8003444:	f101 0320 	add.w	r3, r1, #32
 8003448:	e00e      	b.n	8003468 <OS_Post+0xdc>
 800344a:	e953 6708 	ldrd	r6, r7, [r3, #-32]
    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 800344e:	2e00      	cmp	r6, #0
 8003450:	d065      	beq.n	800351e <OS_Post+0x192>
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 8003452:	6077      	str	r7, [r6, #4]
    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 8003454:	2f00      	cmp	r7, #0
 8003456:	d06a      	beq.n	800352e <OS_Post+0x1a2>
        p_next->PrevPtr      = p_prev;
 8003458:	603e      	str	r6, [r7, #0]
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
 800345a:	3a01      	subs	r2, #1
 800345c:	820a      	strh	r2, [r1, #16]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 800345e:	e943 5508 	strd	r5, r5, [r3, #-32]
 8003462:	3320      	adds	r3, #32
    while (n_pend_list > (OS_OBJ_QTY)0) {
 8003464:	4563      	cmp	r3, ip
 8003466:	d09f      	beq.n	80033a8 <OS_Post+0x1c>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 8003468:	f853 1c14 	ldr.w	r1, [r3, #-20]
    if (p_pend_list->NbrEntries == 1u) {
 800346c:	8a0a      	ldrh	r2, [r1, #16]
 800346e:	2a01      	cmp	r2, #1
 8003470:	d1eb      	bne.n	800344a <OS_Post+0xbe>
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
 8003472:	e9c1 5502 	strd	r5, r5, [r1, #8]
 8003476:	e7f0      	b.n	800345a <OS_Post+0xce>
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 8003478:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800347c:	2903      	cmp	r1, #3
 800347e:	f000 8084 	beq.w	800358a <OS_Post+0x1fe>
                 p_tcb->TS      = ts;
 8003482:	9b06      	ldr	r3, [sp, #24]
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 8003484:	65a2      	str	r2, [r4, #88]	; 0x58
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 8003486:	f8a4 c05c 	strh.w	ip, [r4, #92]	; 0x5c
                 p_tcb->TS      = ts;
 800348a:	64a3      	str	r3, [r4, #72]	; 0x48
             if (p_obj != (OS_PEND_OBJ *)0) {
 800348c:	2800      	cmp	r0, #0
 800348e:	d037      	beq.n	8003500 <OS_Post+0x174>
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 8003490:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
    while (n_pend_list > (OS_OBJ_QTY)0) {
 8003494:	b327      	cbz	r7, 80034e0 <OS_Post+0x154>
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 8003496:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003498:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800349c:	fa1f f38c 	uxth.w	r3, ip
 80034a0:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80034a4:	eb0c 1c43 	add.w	ip, ip, r3, lsl #5
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
 80034a8:	2500      	movs	r5, #0
 80034aa:	f101 0320 	add.w	r3, r1, #32
 80034ae:	e00e      	b.n	80034ce <OS_Post+0x142>
 80034b0:	e953 6708 	ldrd	r6, r7, [r3, #-32]
    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 80034b4:	2e00      	cmp	r6, #0
 80034b6:	d035      	beq.n	8003524 <OS_Post+0x198>
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 80034b8:	6077      	str	r7, [r6, #4]
    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 80034ba:	2f00      	cmp	r7, #0
 80034bc:	d035      	beq.n	800352a <OS_Post+0x19e>
        p_next->PrevPtr      = p_prev;
 80034be:	603e      	str	r6, [r7, #0]
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
 80034c0:	3a01      	subs	r2, #1
 80034c2:	820a      	strh	r2, [r1, #16]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 80034c4:	e943 5508 	strd	r5, r5, [r3, #-32]
 80034c8:	3320      	adds	r3, #32
    while (n_pend_list > (OS_OBJ_QTY)0) {
 80034ca:	4563      	cmp	r3, ip
 80034cc:	d008      	beq.n	80034e0 <OS_Post+0x154>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 80034ce:	f853 1c14 	ldr.w	r1, [r3, #-20]
    if (p_pend_list->NbrEntries == 1u) {
 80034d2:	8a0a      	ldrh	r2, [r1, #16]
 80034d4:	2a01      	cmp	r2, #1
 80034d6:	d1eb      	bne.n	80034b0 <OS_Post+0x124>
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
 80034d8:	e9c1 5502 	strd	r5, r5, [r1, #8]
 80034dc:	e7f0      	b.n	80034c0 <OS_Post+0x134>
             if (p_obj != (OS_PEND_OBJ *)0) {
 80034de:	b178      	cbz	r0, 8003500 <OS_Post+0x174>
    p_pend_data       =  p_pend_list->HeadPtr;
 80034e0:	6882      	ldr	r2, [r0, #8]
    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");          /* Remove name of object pended on for readied task       */
 80034e2:	494f      	ldr	r1, [pc, #316]	; (8003620 <OS_Post+0x294>)
 80034e4:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
 80034ee:	6323      	str	r3, [r4, #48]	; 0x30
    if (p_pend_data  != (OS_PEND_DATA *)0) {
 80034f0:	2a00      	cmp	r2, #0
 80034f2:	f000 808d 	beq.w	8003610 <OS_Post+0x284>
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
 80034f6:	6893      	ldr	r3, [r2, #8]
 80034f8:	6a1b      	ldr	r3, [r3, #32]
 80034fa:	61c3      	str	r3, [r0, #28]
 80034fc:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8003500:	2d07      	cmp	r5, #7
 8003502:	d062      	beq.n	80035ca <OS_Post+0x23e>
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 8003504:	2200      	movs	r2, #0
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 8003506:	2304      	movs	r3, #4
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 8003508:	86a2      	strh	r2, [r4, #52]	; 0x34
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 800350a:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 800350e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8003510:	2501      	movs	r5, #1
 8003512:	8105      	strh	r5, [r0, #8]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
 8003514:	e9c4 2203 	strd	r2, r2, [r4, #12]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8003518:	50cc      	str	r4, [r1, r3]
        p_rdy_list->TailPtr    =  p_tcb;
 800351a:	6044      	str	r4, [r0, #4]
 800351c:	e773      	b.n	8003406 <OS_Post+0x7a>
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 800351e:	603e      	str	r6, [r7, #0]
        p_pend_list->HeadPtr = p_next;
 8003520:	608f      	str	r7, [r1, #8]
 8003522:	e79a      	b.n	800345a <OS_Post+0xce>
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 8003524:	603e      	str	r6, [r7, #0]
        p_pend_list->HeadPtr = p_next;
 8003526:	608f      	str	r7, [r1, #8]
 8003528:	e7ca      	b.n	80034c0 <OS_Post+0x134>
        p_pend_list->TailPtr = p_prev;
 800352a:	60ce      	str	r6, [r1, #12]
 800352c:	e7c8      	b.n	80034c0 <OS_Post+0x134>
 800352e:	60ce      	str	r6, [r1, #12]
 8003530:	e793      	b.n	800345a <OS_Post+0xce>
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 8003532:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003536:	483c      	ldr	r0, [pc, #240]	; (8003628 <OS_Post+0x29c>)
 8003538:	0092      	lsls	r2, r2, #2
 800353a:	1883      	adds	r3, r0, r2
 800353c:	8919      	ldrh	r1, [r3, #8]
 800353e:	2900      	cmp	r1, #0
 8003540:	d147      	bne.n	80035d2 <OS_Post+0x246>
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8003542:	2501      	movs	r5, #1
 8003544:	811d      	strh	r5, [r3, #8]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
 8003546:	e9c4 1103 	strd	r1, r1, [r4, #12]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 800354a:	5084      	str	r4, [r0, r2]
        p_rdy_list->TailPtr     = p_tcb;
 800354c:	605c      	str	r4, [r3, #4]
 800354e:	e75a      	b.n	8003406 <OS_Post+0x7a>
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 8003550:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 8003554:	6b21      	ldr	r1, [r4, #48]	; 0x30
    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 8003556:	2f00      	cmp	r7, #0
 8003558:	f43f af25 	beq.w	80033a6 <OS_Post+0x1a>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 800355c:	68ce      	ldr	r6, [r1, #12]
 800355e:	42b0      	cmp	r0, r6
 8003560:	d04b      	beq.n	80035fa <OS_Post+0x26e>
 8003562:	f107 3eff 	add.w	lr, r7, #4294967295	; 0xffffffff
 8003566:	fa1f fe8e 	uxth.w	lr, lr
 800356a:	f10e 0e01 	add.w	lr, lr, #1
 800356e:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 8003572:	460e      	mov	r6, r1
 8003574:	e002      	b.n	800357c <OS_Post+0x1f0>
 8003576:	68f3      	ldr	r3, [r6, #12]
 8003578:	4298      	cmp	r0, r3
 800357a:	d03f      	beq.n	80035fc <OS_Post+0x270>
        p_pend_data++;
 800357c:	3620      	adds	r6, #32
    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 800357e:	4576      	cmp	r6, lr
 8003580:	d1f9      	bne.n	8003576 <OS_Post+0x1ea>
             if (p_obj != (OS_PEND_OBJ *)0) {
 8003582:	2800      	cmp	r0, #0
 8003584:	f47f af55 	bne.w	8003432 <OS_Post+0xa6>
 8003588:	e71e      	b.n	80033c8 <OS_Post+0x3c>
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 800358a:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 800358e:	6b21      	ldr	r1, [r4, #48]	; 0x30
    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 8003590:	2f00      	cmp	r7, #0
 8003592:	d0a4      	beq.n	80034de <OS_Post+0x152>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 8003594:	68ce      	ldr	r6, [r1, #12]
 8003596:	42b0      	cmp	r0, r6
 8003598:	d024      	beq.n	80035e4 <OS_Post+0x258>
 800359a:	f107 3eff 	add.w	lr, r7, #4294967295	; 0xffffffff
 800359e:	fa1f fe8e 	uxth.w	lr, lr
 80035a2:	f10e 0e01 	add.w	lr, lr, #1
 80035a6:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 80035aa:	460e      	mov	r6, r1
 80035ac:	e002      	b.n	80035b4 <OS_Post+0x228>
 80035ae:	68f3      	ldr	r3, [r6, #12]
 80035b0:	4298      	cmp	r0, r3
 80035b2:	d018      	beq.n	80035e6 <OS_Post+0x25a>
        p_pend_data++;
 80035b4:	3620      	adds	r6, #32
    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 80035b6:	4576      	cmp	r6, lr
 80035b8:	d1f9      	bne.n	80035ae <OS_Post+0x222>
             if (p_obj != (OS_PEND_OBJ *)0) {
 80035ba:	2800      	cmp	r0, #0
 80035bc:	f47f af6c 	bne.w	8003498 <OS_Post+0x10c>
 80035c0:	e79e      	b.n	8003500 <OS_Post+0x174>
                 OS_TickListRemove(p_tcb);                       /* Remove from tick list                             */
 80035c2:	4620      	mov	r0, r4
 80035c4:	f001 f9f6 	bl	80049b4 <OS_TickListRemove>
 80035c8:	e701      	b.n	80033ce <OS_Post+0x42>
                 OS_TickListRemove(p_tcb);                       /* Cancel any timeout                                */
 80035ca:	4620      	mov	r0, r4
 80035cc:	f001 f9f2 	bl	80049b4 <OS_TickListRemove>
 80035d0:	e798      	b.n	8003504 <OS_Post+0x178>
        p_tcb2                  = p_rdy_list->TailPtr;
 80035d2:	685a      	ldr	r2, [r3, #4]
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 80035d4:	3101      	adds	r1, #1
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 80035d6:	2000      	movs	r0, #0
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 80035d8:	8119      	strh	r1, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 80035da:	e9c4 0203 	strd	r0, r2, [r4, #12]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
 80035de:	60d4      	str	r4, [r2, #12]
        p_rdy_list->TailPtr     = p_tcb;
 80035e0:	605c      	str	r4, [r3, #4]
 80035e2:	e710      	b.n	8003406 <OS_Post+0x7a>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 80035e4:	460e      	mov	r6, r1
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 80035e6:	9b06      	ldr	r3, [sp, #24]
            p_pend_data->RdyMsgSize = msg_size;                     /*      store the size of the message posted      */
 80035e8:	f8a6 c018 	strh.w	ip, [r6, #24]
            p_pend_data->RdyMsgPtr  = p_void;                       /*      store the message posted                  */
 80035ec:	e9c6 0204 	strd	r0, r2, [r6, #16]
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 80035f0:	61f3      	str	r3, [r6, #28]
             if (p_obj != (OS_PEND_OBJ *)0) {
 80035f2:	2800      	cmp	r0, #0
 80035f4:	f47f af50 	bne.w	8003498 <OS_Post+0x10c>
 80035f8:	e782      	b.n	8003500 <OS_Post+0x174>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 80035fa:	460e      	mov	r6, r1
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 80035fc:	9b06      	ldr	r3, [sp, #24]
            p_pend_data->RdyMsgSize = msg_size;                     /*      store the size of the message posted      */
 80035fe:	f8a6 c018 	strh.w	ip, [r6, #24]
            p_pend_data->RdyMsgPtr  = p_void;                       /*      store the message posted                  */
 8003602:	e9c6 0204 	strd	r0, r2, [r6, #16]
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 8003606:	61f3      	str	r3, [r6, #28]
             if (p_obj != (OS_PEND_OBJ *)0) {
 8003608:	2800      	cmp	r0, #0
 800360a:	f47f af12 	bne.w	8003432 <OS_Post+0xa6>
 800360e:	e6db      	b.n	80033c8 <OS_Post+0x3c>
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
 8003610:	61c1      	str	r1, [r0, #28]
 8003612:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
 8003616:	e773      	b.n	8003500 <OS_Post+0x174>
 8003618:	61c1      	str	r1, [r0, #28]
 800361a:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
 800361e:	e6d3      	b.n	80033c8 <OS_Post+0x3c>
 8003620:	08008dcc 	.word	0x08008dcc
 8003624:	200029f0 	.word	0x200029f0
 8003628:	20002864 	.word	0x20002864

0800362c <OS_RdyListInsert>:
{
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	4604      	mov	r4, r0
    OS_PrioInsert(p_tcb->Prio);
 8003630:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8003634:	f000 faca 	bl	8003bcc <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
 8003638:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <OS_RdyListInsert+0x74>)
 800363a:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 800363e:	7812      	ldrb	r2, [r2, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d016      	beq.n	8003672 <OS_RdyListInsert+0x46>
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 8003644:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003648:	4916      	ldr	r1, [pc, #88]	; (80036a4 <OS_RdyListInsert+0x78>)
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	18c8      	adds	r0, r1, r3
 800364e:	8902      	ldrh	r2, [r0, #8]
 8003650:	b142      	cbz	r2, 8003664 <OS_RdyListInsert+0x38>
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
 8003652:	58cd      	ldr	r5, [r1, r3]
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 8003654:	3201      	adds	r2, #1
 8003656:	8102      	strh	r2, [r0, #8]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
 8003658:	2200      	movs	r2, #0
 800365a:	e9c4 5203 	strd	r5, r2, [r4, #12]
        p_tcb2->PrevPtr        = p_tcb;
 800365e:	612c      	str	r4, [r5, #16]
        p_rdy_list->HeadPtr    = p_tcb;
 8003660:	50cc      	str	r4, [r1, r3]
}
 8003662:	bd38      	pop	{r3, r4, r5, pc}
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8003664:	2501      	movs	r5, #1
 8003666:	8105      	strh	r5, [r0, #8]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
 8003668:	e9c4 2203 	strd	r2, r2, [r4, #12]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 800366c:	50cc      	str	r4, [r1, r3]
        p_rdy_list->TailPtr    =  p_tcb;
 800366e:	6044      	str	r4, [r0, #4]
}
 8003670:	bd38      	pop	{r3, r4, r5, pc}
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 8003672:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003676:	480b      	ldr	r0, [pc, #44]	; (80036a4 <OS_RdyListInsert+0x78>)
 8003678:	0092      	lsls	r2, r2, #2
 800367a:	1883      	adds	r3, r0, r2
 800367c:	8919      	ldrh	r1, [r3, #8]
 800367e:	b931      	cbnz	r1, 800368e <OS_RdyListInsert+0x62>
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8003680:	2501      	movs	r5, #1
 8003682:	811d      	strh	r5, [r3, #8]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
 8003684:	e9c4 1103 	strd	r1, r1, [r4, #12]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8003688:	5084      	str	r4, [r0, r2]
        p_rdy_list->TailPtr     = p_tcb;
 800368a:	605c      	str	r4, [r3, #4]
}
 800368c:	bd38      	pop	{r3, r4, r5, pc}
        p_tcb2                  = p_rdy_list->TailPtr;
 800368e:	685a      	ldr	r2, [r3, #4]
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 8003690:	3101      	adds	r1, #1
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 8003692:	2000      	movs	r0, #0
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 8003694:	8119      	strh	r1, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 8003696:	e9c4 0203 	strd	r0, r2, [r4, #12]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
 800369a:	60d4      	str	r4, [r2, #12]
        p_rdy_list->TailPtr     = p_tcb;
 800369c:	605c      	str	r4, [r3, #4]
}
 800369e:	bd38      	pop	{r3, r4, r5, pc}
 80036a0:	200029f0 	.word	0x200029f0
 80036a4:	20002864 	.word	0x20002864

080036a8 <OS_RdyListInsertHead>:
    p_rdy_list = &OSRdyList[p_tcb->Prio];
 80036a8:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 80036ac:	490c      	ldr	r1, [pc, #48]	; (80036e0 <OS_RdyListInsertHead+0x38>)
 80036ae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80036b2:	009b      	lsls	r3, r3, #2
{
 80036b4:	b430      	push	{r4, r5}
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 80036b6:	18cc      	adds	r4, r1, r3
 80036b8:	8922      	ldrh	r2, [r4, #8]
 80036ba:	b14a      	cbz	r2, 80036d0 <OS_RdyListInsertHead+0x28>
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
 80036bc:	58cd      	ldr	r5, [r1, r3]
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 80036be:	3201      	adds	r2, #1
 80036c0:	8122      	strh	r2, [r4, #8]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
 80036c2:	2200      	movs	r2, #0
 80036c4:	e9c0 5203 	strd	r5, r2, [r0, #12]
        p_tcb2->PrevPtr        = p_tcb;
 80036c8:	6128      	str	r0, [r5, #16]
        p_rdy_list->HeadPtr    = p_tcb;
 80036ca:	50c8      	str	r0, [r1, r3]
}
 80036cc:	bc30      	pop	{r4, r5}
 80036ce:	4770      	bx	lr
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 80036d0:	2501      	movs	r5, #1
 80036d2:	8125      	strh	r5, [r4, #8]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
 80036d4:	e9c0 2203 	strd	r2, r2, [r0, #12]
        p_rdy_list->TailPtr    =  p_tcb;
 80036d8:	6060      	str	r0, [r4, #4]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 80036da:	50c8      	str	r0, [r1, r3]
}
 80036dc:	bc30      	pop	{r4, r5}
 80036de:	4770      	bx	lr
 80036e0:	20002864 	.word	0x20002864

080036e4 <OS_RdyListInsertTail>:
    p_rdy_list = &OSRdyList[p_tcb->Prio];
 80036e4:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
{
 80036e8:	b430      	push	{r4, r5}
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 80036ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80036ee:	4c0b      	ldr	r4, [pc, #44]	; (800371c <OS_RdyListInsertTail+0x38>)
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	18e2      	adds	r2, r4, r3
 80036f4:	8911      	ldrh	r1, [r2, #8]
 80036f6:	b149      	cbz	r1, 800370c <OS_RdyListInsertTail+0x28>
        p_tcb2                  = p_rdy_list->TailPtr;
 80036f8:	6853      	ldr	r3, [r2, #4]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 80036fa:	2400      	movs	r4, #0
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 80036fc:	3101      	adds	r1, #1
 80036fe:	8111      	strh	r1, [r2, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 8003700:	e9c0 4303 	strd	r4, r3, [r0, #12]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
 8003704:	60d8      	str	r0, [r3, #12]
}
 8003706:	bc30      	pop	{r4, r5}
        p_rdy_list->TailPtr     = p_tcb;
 8003708:	6050      	str	r0, [r2, #4]
}
 800370a:	4770      	bx	lr
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 800370c:	2501      	movs	r5, #1
 800370e:	8115      	strh	r5, [r2, #8]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
 8003710:	e9c0 1103 	strd	r1, r1, [r0, #12]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8003714:	50e0      	str	r0, [r4, r3]
        p_rdy_list->TailPtr     = p_tcb;
 8003716:	6050      	str	r0, [r2, #4]
}
 8003718:	bc30      	pop	{r4, r5}
 800371a:	4770      	bx	lr
 800371c:	20002864 	.word	0x20002864

08003720 <OS_RdyListRemove>:
{
 8003720:	b570      	push	{r4, r5, r6, lr}
    p_tcb1     = p_tcb->PrevPtr;                            /* Point to next and previous OS_TCB in the list          */
 8003722:	6901      	ldr	r1, [r0, #16]
{
 8003724:	4604      	mov	r4, r0
    p_rdy_list = &OSRdyList[p_tcb->Prio];
 8003726:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
    p_tcb2     = p_tcb->NextPtr;
 800372a:	68e3      	ldr	r3, [r4, #12]
    if (p_tcb1 == (OS_TCB *)0) {                            /* Was the OS_TCB to remove was at the head?              */
 800372c:	b171      	cbz	r1, 800374c <OS_RdyListRemove+0x2c>
        p_rdy_list->NbrEntries--;                           /* No,  one less entry                                    */
 800372e:	4a17      	ldr	r2, [pc, #92]	; (800378c <OS_RdyListRemove+0x6c>)
 8003730:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003734:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8003738:	8902      	ldrh	r2, [r0, #8]
 800373a:	3a01      	subs	r2, #1
 800373c:	8102      	strh	r2, [r0, #8]
        p_tcb1->NextPtr = p_tcb2;
 800373e:	60cb      	str	r3, [r1, #12]
        if (p_tcb2 == (OS_TCB *)0) {
 8003740:	b19b      	cbz	r3, 800376a <OS_RdyListRemove+0x4a>
            p_tcb2->PrevPtr     = p_tcb1;
 8003742:	6119      	str	r1, [r3, #16]
    p_tcb->PrevPtr = (OS_TCB *)0;
 8003744:	2300      	movs	r3, #0
    p_tcb->NextPtr = (OS_TCB *)0;
 8003746:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 800374a:	bd70      	pop	{r4, r5, r6, pc}
        if (p_tcb2 == (OS_TCB *)0) {                        /* Yes, was it the only OS_TCB?                           */
 800374c:	b193      	cbz	r3, 8003774 <OS_RdyListRemove+0x54>
            p_rdy_list->NbrEntries--;                       /*      No,  one less entry                               */
 800374e:	4d0f      	ldr	r5, [pc, #60]	; (800378c <OS_RdyListRemove+0x6c>)
 8003750:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003754:	0080      	lsls	r0, r0, #2
 8003756:	182e      	adds	r6, r5, r0
 8003758:	8932      	ldrh	r2, [r6, #8]
 800375a:	3a01      	subs	r2, #1
 800375c:	8132      	strh	r2, [r6, #8]
            p_tcb2->PrevPtr        = (OS_TCB   *)0;         /*           adjust back link of new list head            */
 800375e:	6119      	str	r1, [r3, #16]
            p_rdy_list->HeadPtr    = p_tcb2;                /*           adjust OS_RDY_LIST's new head                */
 8003760:	502b      	str	r3, [r5, r0]
    p_tcb->PrevPtr = (OS_TCB *)0;
 8003762:	2300      	movs	r3, #0
    p_tcb->NextPtr = (OS_TCB *)0;
 8003764:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 8003768:	bd70      	pop	{r4, r5, r6, pc}
    p_tcb->PrevPtr = (OS_TCB *)0;
 800376a:	2300      	movs	r3, #0
            p_rdy_list->TailPtr = p_tcb1;                   /*      Removing the TCB at the tail, adj the tail ptr    */
 800376c:	6041      	str	r1, [r0, #4]
    p_tcb->NextPtr = (OS_TCB *)0;
 800376e:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 8003772:	bd70      	pop	{r4, r5, r6, pc}
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 8003774:	4d05      	ldr	r5, [pc, #20]	; (800378c <OS_RdyListRemove+0x6c>)
 8003776:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800377a:	0092      	lsls	r2, r2, #2
 800377c:	18a9      	adds	r1, r5, r2
            p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 800377e:	50ab      	str	r3, [r5, r2]
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 8003780:	810b      	strh	r3, [r1, #8]
            p_rdy_list->TailPtr    = (OS_TCB   *)0;
 8003782:	604b      	str	r3, [r1, #4]
            OS_PrioRemove(p_tcb->Prio);
 8003784:	f000 fa36 	bl	8003bf4 <OS_PrioRemove>
 8003788:	e7dc      	b.n	8003744 <OS_RdyListRemove+0x24>
 800378a:	bf00      	nop
 800378c:	20002864 	.word	0x20002864

08003790 <OS_Dbg_Init>:
    p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;

    p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
    p_temp16 = p_temp16;
    p_temp32 = p_temp32;
}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop

08003794 <OS_FlagInit>:
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 8003794:	4903      	ldr	r1, [pc, #12]	; (80037a4 <OS_FlagInit+0x10>)
#endif

    OSFlagQty        = (OS_OBJ_QTY   )0;
 8003796:	4a04      	ldr	r2, [pc, #16]	; (80037a8 <OS_FlagInit+0x14>)
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 8003798:	2300      	movs	r3, #0
 800379a:	600b      	str	r3, [r1, #0]
    OSFlagQty        = (OS_OBJ_QTY   )0;
 800379c:	8013      	strh	r3, [r2, #0]
   *p_err            = OS_ERR_NONE;
 800379e:	8003      	strh	r3, [r0, #0]
}
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20002cc4 	.word	0x20002cc4
 80037a8:	20002cc0 	.word	0x20002cc0

080037ac <OS_MemInit>:
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMemDbgListPtr = (OS_MEM   *)0;
 80037ac:	4903      	ldr	r1, [pc, #12]	; (80037bc <OS_MemInit+0x10>)
#endif

    OSMemQty        = (OS_OBJ_QTY)0;
 80037ae:	4a04      	ldr	r2, [pc, #16]	; (80037c0 <OS_MemInit+0x14>)
    OSMemDbgListPtr = (OS_MEM   *)0;
 80037b0:	2300      	movs	r3, #0
 80037b2:	600b      	str	r3, [r1, #0]
    OSMemQty        = (OS_OBJ_QTY)0;
 80037b4:	8013      	strh	r3, [r2, #0]
   *p_err           = OS_ERR_NONE;
 80037b6:	8003      	strh	r3, [r0, #0]
}
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	20002c6c 	.word	0x20002c6c
 80037c0:	20002cca 	.word	0x20002cca

080037c4 <OS_MsgPoolInit>:
#endif

    p_msg1 = OSCfg_MsgPoolBasePtr;
    p_msg2 = OSCfg_MsgPoolBasePtr;
    p_msg2++;
    loops  = OSCfg_MsgPoolSize - 1u;
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <OS_MsgPoolInit+0x54>)
    p_msg1 = OSCfg_MsgPoolBasePtr;
 80037c6:	4a15      	ldr	r2, [pc, #84]	; (800381c <OS_MsgPoolInit+0x58>)
{
 80037c8:	b470      	push	{r4, r5, r6}
    loops  = OSCfg_MsgPoolSize - 1u;
 80037ca:	881e      	ldrh	r6, [r3, #0]
    p_msg1 = OSCfg_MsgPoolBasePtr;
 80037cc:	6815      	ldr	r5, [r2, #0]
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 80037ce:	2e01      	cmp	r6, #1
 80037d0:	d020      	beq.n	8003814 <OS_MsgPoolInit+0x50>
 80037d2:	1eb1      	subs	r1, r6, #2
 80037d4:	b289      	uxth	r1, r1
 80037d6:	1c8c      	adds	r4, r1, #2
 80037d8:	f105 0310 	add.w	r3, r5, #16
 80037dc:	eb05 1404 	add.w	r4, r5, r4, lsl #4
        p_msg1->NextPtr = p_msg2;
        p_msg1->MsgPtr  = (void      *)0;
 80037e0:	2200      	movs	r2, #0
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 80037e2:	f823 2c08 	strh.w	r2, [r3, #-8]
        p_msg1->MsgTS   = (CPU_TS     )0u;
 80037e6:	f843 2c04 	str.w	r2, [r3, #-4]
        p_msg1->MsgPtr  = (void      *)0;
 80037ea:	e943 3204 	strd	r3, r2, [r3, #-16]
        p_msg1++;
        p_msg2++;
 80037ee:	3310      	adds	r3, #16
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 80037f0:	42a3      	cmp	r3, r4
 80037f2:	d1f6      	bne.n	80037e2 <OS_MsgPoolInit+0x1e>
 80037f4:	1c4b      	adds	r3, r1, #1
 80037f6:	eb05 1303 	add.w	r3, r5, r3, lsl #4
    p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
    p_msg1->MsgPtr  = (void      *)0;
    p_msg1->MsgSize = (OS_MSG_SIZE)0u;
    p_msg1->MsgTS   = (CPU_TS     )0u;

    OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
 80037fa:	4909      	ldr	r1, [pc, #36]	; (8003820 <OS_MsgPoolInit+0x5c>)
    p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
 80037fc:	2200      	movs	r2, #0
    p_msg1->MsgPtr  = (void      *)0;
 80037fe:	e9c3 2200 	strd	r2, r2, [r3]
    p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 8003802:	811a      	strh	r2, [r3, #8]
    OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
 8003804:	600d      	str	r5, [r1, #0]
    OSMsgPool.NbrFree    =  OSCfg_MsgPoolSize;
 8003806:	808e      	strh	r6, [r1, #4]
    p_msg1->MsgTS   = (CPU_TS     )0u;
 8003808:	60da      	str	r2, [r3, #12]
    OSMsgPool.NbrUsed    = (OS_MSG_QTY)0;
 800380a:	80ca      	strh	r2, [r1, #6]
#if OS_CFG_DBG_EN > 0u
    OSMsgPool.NbrUsedMax = (OS_MSG_QTY)0;
 800380c:	810a      	strh	r2, [r1, #8]
#endif
   *p_err                =  OS_ERR_NONE;
}
 800380e:	bc70      	pop	{r4, r5, r6}
   *p_err                =  OS_ERR_NONE;
 8003810:	8002      	strh	r2, [r0, #0]
}
 8003812:	4770      	bx	lr
    p_msg1 = OSCfg_MsgPoolBasePtr;
 8003814:	462b      	mov	r3, r5
 8003816:	e7f0      	b.n	80037fa <OS_MsgPoolInit+0x36>
 8003818:	08008d64 	.word	0x08008d64
 800381c:	08008d60 	.word	0x08008d60
 8003820:	20002b9c 	.word	0x20002b9c

08003824 <OS_MsgQInit>:

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
    p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
    p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
 8003824:	2300      	movs	r3, #0
    p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
 8003826:	8101      	strh	r1, [r0, #8]
    p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
 8003828:	8143      	strh	r3, [r0, #10]
#if OS_CFG_DBG_EN > 0u
    p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
 800382a:	8183      	strh	r3, [r0, #12]
#endif
    p_msg_q->InPtr          = (OS_MSG   *)0;
    p_msg_q->OutPtr         = (OS_MSG   *)0;
 800382c:	e9c0 3300 	strd	r3, r3, [r0]
}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop

08003834 <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX  *p_mutex,
                     CPU_CHAR  *p_name,
                     OS_ERR    *p_err)
{
 8003834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003838:	4604      	mov	r4, r0
 800383a:	4688      	mov	r8, r1
 800383c:	4616      	mov	r6, r2
       *p_err = OS_ERR_OBJ_PTR_NULL;
        return;
    }
#endif

    OS_CRITICAL_ENTER();
 800383e:	f7fc fccf 	bl	80001e0 <CPU_SR_Save>
#if OS_OBJ_TYPE_REQ > 0u
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;        /* Mark the data structure as a mutex                     */
 8003842:	4b11      	ldr	r3, [pc, #68]	; (8003888 <OSMutexCreate+0x54>)
#if OS_CFG_DBG_EN > 0u
    p_mutex->NamePtr           =  p_name;
#else
    (void)&p_name;
#endif
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX     *)0;
 8003844:	2500      	movs	r5, #0
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;        /* Mark the data structure as a mutex                     */
 8003846:	e9c4 3800 	strd	r3, r8, [r4]
    OS_CRITICAL_ENTER();
 800384a:	4607      	mov	r7, r0
    p_mutex->OwnerTCBPtr       = (OS_TCB       *)0;
 800384c:	e9c4 5508 	strd	r5, r5, [r4, #32]
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)0;         /* Mutex is available                                     */
 8003850:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    p_mutex->TS                = (CPU_TS        )0;
 8003854:	62e5      	str	r5, [r4, #44]	; 0x2c
    OS_PendListInit(&p_mutex->PendList);                    /* Initialize the waiting list                            */
 8003856:	f104 0008 	add.w	r0, r4, #8
 800385a:	f7ff fd63 	bl	8003324 <OS_PendListInit>
#if OS_CFG_DBG_EN > 0u
void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
{
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 800385e:	490b      	ldr	r1, [pc, #44]	; (800388c <OSMutexCreate+0x58>)
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 8003860:	4a0b      	ldr	r2, [pc, #44]	; (8003890 <OSMutexCreate+0x5c>)
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 8003862:	680b      	ldr	r3, [r1, #0]
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
 8003864:	6165      	str	r5, [r4, #20]
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
 8003866:	e9c4 3206 	strd	r3, r2, [r4, #24]
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 800386a:	b103      	cbz	r3, 800386e <OSMutexCreate+0x3a>
    } else {
        p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
        OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
 800386c:	615c      	str	r4, [r3, #20]
    OSMutexQty++;
 800386e:	4a09      	ldr	r2, [pc, #36]	; (8003894 <OSMutexCreate+0x60>)
    }
    OSMutexDbgListPtr                 =  p_mutex;
 8003870:	600c      	str	r4, [r1, #0]
    OSMutexQty++;
 8003872:	8813      	ldrh	r3, [r2, #0]
    OS_CRITICAL_EXIT_NO_SCHED();
 8003874:	4638      	mov	r0, r7
    OSMutexQty++;
 8003876:	3301      	adds	r3, #1
 8003878:	8013      	strh	r3, [r2, #0]
    OS_CRITICAL_EXIT_NO_SCHED();
 800387a:	f7fc fcb5 	bl	80001e8 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 800387e:	2300      	movs	r3, #0
 8003880:	8033      	strh	r3, [r6, #0]
}
 8003882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003886:	bf00      	nop
 8003888:	5854554d 	.word	0x5854554d
 800388c:	20002da0 	.word	0x20002da0
 8003890:	08008dcc 	.word	0x08008dcc
 8003894:	20002ccc 	.word	0x20002ccc

08003898 <OSMutexPend>:
{
 8003898:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 800389c:	4c5b      	ldr	r4, [pc, #364]	; (8003a0c <OSMutexPend+0x174>)
 800389e:	6805      	ldr	r5, [r0, #0]
 80038a0:	42a5      	cmp	r5, r4
{
 80038a2:	b089      	sub	sp, #36	; 0x24
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 80038a4:	d006      	beq.n	80038b4 <OSMutexPend+0x1c>
       *p_err = OS_ERR_OBJ_TYPE;
 80038a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80038a8:	f645 53c4 	movw	r3, #24004	; 0x5dc4
 80038ac:	8013      	strh	r3, [r2, #0]
}
 80038ae:	b009      	add	sp, #36	; 0x24
 80038b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038b4:	461f      	mov	r7, r3
 80038b6:	4616      	mov	r6, r2
 80038b8:	460d      	mov	r5, r1
 80038ba:	4604      	mov	r4, r0
    if (p_ts != (CPU_TS *)0) {
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d046      	beq.n	800394e <OSMutexPend+0xb6>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 80038c0:	2300      	movs	r3, #0
 80038c2:	603b      	str	r3, [r7, #0]
    CPU_CRITICAL_ENTER();
 80038c4:	f7fc fc8c 	bl	80001e0 <CPU_SR_Save>
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 80038c8:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    CPU_CRITICAL_ENTER();
 80038cc:	4680      	mov	r8, r0
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 80038ce:	b353      	cbz	r3, 8003926 <OSMutexPend+0x8e>
    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {              /* See if current task is already the owner of the mutex  */
 80038d0:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8003a14 <OSMutexPend+0x17c>
 80038d4:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80038d6:	f8d9 2000 	ldr.w	r2, [r9]
 80038da:	4290      	cmp	r0, r2
 80038dc:	d045      	beq.n	800396a <OSMutexPend+0xd2>
    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 80038de:	0433      	lsls	r3, r6, #16
 80038e0:	f100 8087 	bmi.w	80039f2 <OSMutexPend+0x15a>
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 80038e4:	4b4a      	ldr	r3, [pc, #296]	; (8003a10 <OSMutexPend+0x178>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d17a      	bne.n	80039e2 <OSMutexPend+0x14a>
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                  /* See if mutex owner has a lower priority than current   */
 80038ec:	f892 1037 	ldrb.w	r1, [r2, #55]	; 0x37
 80038f0:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 80038f4:	428b      	cmp	r3, r1
 80038f6:	d848      	bhi.n	800398a <OSMutexPend+0xf2>
    OS_Pend(&pend_data,                                     /* Block task pending on Mutex                            */
 80038f8:	462b      	mov	r3, r5
 80038fa:	2204      	movs	r2, #4
 80038fc:	4621      	mov	r1, r4
 80038fe:	4668      	mov	r0, sp
 8003900:	f7ff fc0e 	bl	8003120 <OS_Pend>
    OS_CRITICAL_EXIT_NO_SCHED();
 8003904:	4640      	mov	r0, r8
 8003906:	f7fc fc6f 	bl	80001e8 <CPU_SR_Restore>
    OSSched();                                              /* Find the next highest priority task ready to run       */
 800390a:	f7ff fa4d 	bl	8002da8 <OSSched>
    CPU_CRITICAL_ENTER();
 800390e:	f7fc fc67 	bl	80001e0 <CPU_SR_Save>
    switch (OSTCBCurPtr->PendStatus) {
 8003912:	f8d9 2000 	ldr.w	r2, [r9]
 8003916:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 800391a:	2b03      	cmp	r3, #3
 800391c:	d871      	bhi.n	8003a02 <OSMutexPend+0x16a>
 800391e:	e8df f003 	tbb	[pc, r3]
 8003922:	4951      	.short	0x4951
 8003924:	3741      	.short	0x3741
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 8003926:	4b3b      	ldr	r3, [pc, #236]	; (8003a14 <OSMutexPend+0x17c>)
           *p_ts  = p_mutex->TS;
 8003928:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6263      	str	r3, [r4, #36]	; 0x24
        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 800392e:	2101      	movs	r1, #1
 8003930:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
           *p_ts  = p_mutex->TS;
 8003934:	603a      	str	r2, [r7, #0]
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 8003936:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003938:	6222      	str	r2, [r4, #32]
        CPU_CRITICAL_EXIT();
 800393a:	4640      	mov	r0, r8
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 800393c:	63dc      	str	r4, [r3, #60]	; 0x3c
        CPU_CRITICAL_EXIT();
 800393e:	f7fc fc53 	bl	80001e8 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 8003942:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003944:	2300      	movs	r3, #0
 8003946:	8013      	strh	r3, [r2, #0]
}
 8003948:	b009      	add	sp, #36	; 0x24
 800394a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    CPU_CRITICAL_ENTER();
 800394e:	f7fc fc47 	bl	80001e0 <CPU_SR_Save>
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 8003952:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    CPU_CRITICAL_ENTER();
 8003956:	4680      	mov	r8, r0
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1b9      	bne.n	80038d0 <OSMutexPend+0x38>
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 800395c:	4b2d      	ldr	r3, [pc, #180]	; (8003a14 <OSMutexPend+0x17c>)
        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 800395e:	2201      	movs	r2, #1
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	6263      	str	r3, [r4, #36]	; 0x24
        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8003964:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 8003968:	e7e5      	b.n	8003936 <OSMutexPend+0x9e>
        if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)-1) {
 800396a:	2bff      	cmp	r3, #255	; 0xff
 800396c:	d031      	beq.n	80039d2 <OSMutexPend+0x13a>
        p_mutex->OwnerNestingCtr++;
 800396e:	3301      	adds	r3, #1
 8003970:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        if (p_ts != (CPU_TS *)0) {
 8003974:	b10f      	cbz	r7, 800397a <OSMutexPend+0xe2>
           *p_ts  = p_mutex->TS;
 8003976:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003978:	603b      	str	r3, [r7, #0]
        CPU_CRITICAL_EXIT();
 800397a:	4640      	mov	r0, r8
 800397c:	f7fc fc34 	bl	80001e8 <CPU_SR_Restore>
       *p_err = OS_ERR_MUTEX_OWNER;                         /* Indicate that current task already owns the mutex      */
 8003980:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003982:	f245 7382 	movw	r3, #22402	; 0x5782
 8003986:	8013      	strh	r3, [r2, #0]
        return;
 8003988:	e791      	b.n	80038ae <OSMutexPend+0x16>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 800398a:	f000 fde1 	bl	8004550 <OS_TaskChangePrio>
 800398e:	e7b3      	b.n	80038f8 <OSMutexPend+0x60>
             if (p_ts != (CPU_TS *)0) {
 8003990:	b10f      	cbz	r7, 8003996 <OSMutexPend+0xfe>
                *p_ts  = (CPU_TS  )0;
 8003992:	2300      	movs	r3, #0
 8003994:	603b      	str	r3, [r7, #0]
            *p_err = OS_ERR_TIMEOUT;
 8003996:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003998:	f247 23d9 	movw	r3, #29401	; 0x72d9
 800399c:	8013      	strh	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 800399e:	f7fc fc23 	bl	80001e8 <CPU_SR_Restore>
 80039a2:	e784      	b.n	80038ae <OSMutexPend+0x16>
             if (p_ts != (CPU_TS *)0) {
 80039a4:	b10f      	cbz	r7, 80039aa <OSMutexPend+0x112>
                *p_ts  = OSTCBCurPtr->TS;
 80039a6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80039a8:	603b      	str	r3, [r7, #0]
            *p_err = OS_ERR_OBJ_DEL;
 80039aa:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039ac:	f645 53c2 	movw	r3, #24002	; 0x5dc2
 80039b0:	8013      	strh	r3, [r2, #0]
             break;
 80039b2:	e7f4      	b.n	800399e <OSMutexPend+0x106>
             if (p_ts != (CPU_TS *)0) {
 80039b4:	b10f      	cbz	r7, 80039ba <OSMutexPend+0x122>
                *p_ts  = OSTCBCurPtr->TS;
 80039b6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80039b8:	603b      	str	r3, [r7, #0]
            *p_err = OS_ERR_PEND_ABORT;
 80039ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039bc:	f246 13a9 	movw	r3, #25001	; 0x61a9
 80039c0:	8013      	strh	r3, [r2, #0]
             break;
 80039c2:	e7ec      	b.n	800399e <OSMutexPend+0x106>
             if (p_ts != (CPU_TS *)0) {
 80039c4:	b10f      	cbz	r7, 80039ca <OSMutexPend+0x132>
                *p_ts  = OSTCBCurPtr->TS;
 80039c6:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80039c8:	603b      	str	r3, [r7, #0]
            *p_err = OS_ERR_NONE;
 80039ca:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039cc:	2300      	movs	r3, #0
 80039ce:	8013      	strh	r3, [r2, #0]
             break;
 80039d0:	e7e5      	b.n	800399e <OSMutexPend+0x106>
            CPU_CRITICAL_EXIT();
 80039d2:	4640      	mov	r0, r8
 80039d4:	f7fc fc08 	bl	80001e8 <CPU_SR_Restore>
           *p_err = OS_ERR_MUTEX_OVF;
 80039d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039da:	f245 7384 	movw	r3, #22404	; 0x5784
 80039de:	8013      	strh	r3, [r2, #0]
            return;
 80039e0:	e765      	b.n	80038ae <OSMutexPend+0x16>
            CPU_CRITICAL_EXIT();
 80039e2:	4640      	mov	r0, r8
 80039e4:	f7fc fc00 	bl	80001e8 <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 80039e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039ea:	f646 5363 	movw	r3, #28003	; 0x6d63
 80039ee:	8013      	strh	r3, [r2, #0]
            return;
 80039f0:	e75d      	b.n	80038ae <OSMutexPend+0x16>
        CPU_CRITICAL_EXIT();
 80039f2:	4640      	mov	r0, r8
 80039f4:	f7fc fbf8 	bl	80001e8 <CPU_SR_Restore>
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 80039f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039fa:	f246 13b0 	movw	r3, #25008	; 0x61b0
 80039fe:	8013      	strh	r3, [r2, #0]
        return;
 8003a00:	e755      	b.n	80038ae <OSMutexPend+0x16>
            *p_err = OS_ERR_STATUS_INVALID;
 8003a02:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a04:	f646 632e 	movw	r3, #28206	; 0x6e2e
 8003a08:	8013      	strh	r3, [r2, #0]
             break;
 8003a0a:	e7c8      	b.n	800399e <OSMutexPend+0x106>
 8003a0c:	5854554d 	.word	0x5854554d
 8003a10:	20002850 	.word	0x20002850
 8003a14:	20002ab4 	.word	0x20002ab4

08003a18 <OSMutexPost>:
{
 8003a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 8003a1c:	4b4b      	ldr	r3, [pc, #300]	; (8003b4c <OSMutexPost+0x134>)
 8003a1e:	6804      	ldr	r4, [r0, #0]
 8003a20:	429c      	cmp	r4, r3
{
 8003a22:	b082      	sub	sp, #8
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 8003a24:	d005      	beq.n	8003a32 <OSMutexPost+0x1a>
       *p_err = OS_ERR_OBJ_TYPE;
 8003a26:	f645 53c4 	movw	r3, #24004	; 0x5dc4
 8003a2a:	8013      	strh	r3, [r2, #0]
}
 8003a2c:	b002      	add	sp, #8
 8003a2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a32:	4604      	mov	r4, r0
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
 8003a34:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8003b54 <OSMutexPost+0x13c>
 8003a38:	4615      	mov	r5, r2
 8003a3a:	460e      	mov	r6, r1
    CPU_CRITICAL_ENTER();
 8003a3c:	f7fc fbd0 	bl	80001e0 <CPU_SR_Save>
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
 8003a40:	f8d9 3000 	ldr.w	r3, [r9]
 8003a44:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a46:	429a      	cmp	r2, r3
    CPU_CRITICAL_ENTER();
 8003a48:	4607      	mov	r7, r0
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
 8003a4a:	d007      	beq.n	8003a5c <OSMutexPost+0x44>
        CPU_CRITICAL_EXIT();
 8003a4c:	f7fc fbcc 	bl	80001e8 <CPU_SR_Restore>
       *p_err = OS_ERR_MUTEX_NOT_OWNER;
 8003a50:	f245 7381 	movw	r3, #22401	; 0x5781
 8003a54:	802b      	strh	r3, [r5, #0]
}
 8003a56:	b002      	add	sp, #8
 8003a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ts          = OS_TS_GET();                              /* Get timestamp                                          */
 8003a5c:	f7fe ff8c 	bl	8002978 <CPU_TS_TmrRd>
    p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
 8003a60:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    p_mutex->TS = ts;
 8003a64:	62e0      	str	r0, [r4, #44]	; 0x2c
    p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
 8003a66:	3b01      	subs	r3, #1
 8003a68:	b2db      	uxtb	r3, r3
    ts          = OS_TS_GET();                              /* Get timestamp                                          */
 8003a6a:	4680      	mov	r8, r0
    p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
 8003a6c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if (p_mutex->OwnerNestingCtr > (OS_NESTING_CTR)0) {     /* Are we done with all nestings?                         */
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d149      	bne.n	8003b08 <OSMutexPost+0xf0>
    OS_MutexGrpRemove(OSTCBCurPtr, p_mutex);                /* Remove mutex from owner's group                        */
 8003a74:	f8d9 0000 	ldr.w	r0, [r9]

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8003a78:	6bc2      	ldr	r2, [r0, #60]	; 0x3c

    while(*pp_mutex != p_mutex) {
 8003a7a:	42a2      	cmp	r2, r4
 8003a7c:	d103      	bne.n	8003a86 <OSMutexPost+0x6e>
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8003a7e:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8003a82:	e006      	b.n	8003a92 <OSMutexPost+0x7a>
    while(*pp_mutex != p_mutex) {
 8003a84:	461a      	mov	r2, r3
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8003a86:	6a13      	ldr	r3, [r2, #32]
    while(*pp_mutex != p_mutex) {
 8003a88:	429c      	cmp	r4, r3
 8003a8a:	d1fb      	bne.n	8003a84 <OSMutexPost+0x6c>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8003a8c:	f102 0120 	add.w	r1, r2, #32
 8003a90:	4622      	mov	r2, r4
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on mutex?                             */
 8003a92:	f8b4 a010 	ldrh.w	sl, [r4, #16]
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 8003a96:	6a13      	ldr	r3, [r2, #32]
 8003a98:	600b      	str	r3, [r1, #0]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on mutex?                             */
 8003a9a:	f1ba 0f00 	cmp.w	sl, #0
 8003a9e:	d03a      	beq.n	8003b16 <OSMutexPost+0xfe>
    if (OSTCBCurPtr->Prio != OSTCBCurPtr->BasePrio) {       /* Has owner inherited a priority?                        */
 8003aa0:	f890 e037 	ldrb.w	lr, [r0, #55]	; 0x37
 8003aa4:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8003aa8:	45e6      	cmp	lr, ip
 8003aaa:	d013      	beq.n	8003ad4 <OSMutexPost+0xbc>
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8003aac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    OS_PRIO        highest_prio;
    OS_PRIO        prio;
    OS_PEND_DATA  *p_head;


    highest_prio = OS_CFG_PRIO_MAX - 1u;
 8003aae:	211f      	movs	r1, #31
    pp_mutex = &p_tcb->MutexGrpHeadPtr;

    while(*pp_mutex != (OS_MUTEX *)0) {
 8003ab0:	b153      	cbz	r3, 8003ac8 <OSMutexPost+0xb0>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 8003ab2:	689a      	ldr	r2, [r3, #8]
        if (p_head!= (OS_PEND_DATA *)0) {
 8003ab4:	b12a      	cbz	r2, 8003ac2 <OSMutexPost+0xaa>
            prio = p_head->TCBPtr->Prio;
 8003ab6:	6892      	ldr	r2, [r2, #8]
 8003ab8:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 8003abc:	4291      	cmp	r1, r2
 8003abe:	bf28      	it	cs
 8003ac0:	4611      	movcs	r1, r2
            if(prio < highest_prio) {
                highest_prio = prio;
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
    while(*pp_mutex != (OS_MUTEX *)0) {
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1f4      	bne.n	8003ab2 <OSMutexPost+0x9a>
        prio_new = prio_new > OSTCBCurPtr->BasePrio ? OSTCBCurPtr->BasePrio : prio_new;
 8003ac8:	458c      	cmp	ip, r1
 8003aca:	bf28      	it	cs
 8003acc:	468c      	movcs	ip, r1
        if (prio_new > OSTCBCurPtr->Prio) {
 8003ace:	45e6      	cmp	lr, ip
        prio_new = prio_new > OSTCBCurPtr->BasePrio ? OSTCBCurPtr->BasePrio : prio_new;
 8003ad0:	46e2      	mov	sl, ip
        if (prio_new > OSTCBCurPtr->Prio) {
 8003ad2:	d32a      	bcc.n	8003b2a <OSMutexPost+0x112>
    p_tcb                      = p_pend_list->HeadPtr->TCBPtr;
 8003ad4:	68a2      	ldr	r2, [r4, #8]
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8003ad6:	2301      	movs	r3, #1
    p_tcb                      = p_pend_list->HeadPtr->TCBPtr;
 8003ad8:	6891      	ldr	r1, [r2, #8]
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8003ada:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 8003ade:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8003ae0:	6222      	str	r2, [r4, #32]
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8003ae2:	2300      	movs	r3, #0
    p_mutex->OwnerTCBPtr       = p_tcb;                     /* Give mutex to new owner                                */
 8003ae4:	6261      	str	r1, [r4, #36]	; 0x24
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8003ae6:	461a      	mov	r2, r3
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 8003ae8:	63cc      	str	r4, [r1, #60]	; 0x3c
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8003aea:	4620      	mov	r0, r4
 8003aec:	f8cd 8000 	str.w	r8, [sp]
 8003af0:	f7ff fc4c 	bl	800338c <OS_Post>
    OS_CRITICAL_EXIT_NO_SCHED();
 8003af4:	4638      	mov	r0, r7
 8003af6:	f7fc fb77 	bl	80001e8 <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 8003afa:	0433      	lsls	r3, r6, #16
 8003afc:	d401      	bmi.n	8003b02 <OSMutexPost+0xea>
        OSSched();                                          /* Run the scheduler                                      */
 8003afe:	f7ff f953 	bl	8002da8 <OSSched>
   *p_err = OS_ERR_NONE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	802b      	strh	r3, [r5, #0]
 8003b06:	e791      	b.n	8003a2c <OSMutexPost+0x14>
        OS_CRITICAL_EXIT();                                 /* No                                                     */
 8003b08:	4638      	mov	r0, r7
 8003b0a:	f7fc fb6d 	bl	80001e8 <CPU_SR_Restore>
       *p_err = OS_ERR_MUTEX_NESTING;
 8003b0e:	f245 7383 	movw	r3, #22403	; 0x5783
 8003b12:	802b      	strh	r3, [r5, #0]
        return;
 8003b14:	e78a      	b.n	8003a2c <OSMutexPost+0x14>
        p_mutex->OwnerTCBPtr     = (OS_TCB       *)0;       /* No                                                     */
 8003b16:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
        p_mutex->OwnerNestingCtr = (OS_NESTING_CTR)0;
 8003b1a:	f884 a028 	strb.w	sl, [r4, #40]	; 0x28
        OS_CRITICAL_EXIT();
 8003b1e:	4638      	mov	r0, r7
 8003b20:	f7fc fb62 	bl	80001e8 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 8003b24:	f8a5 a000 	strh.w	sl, [r5]
        return;
 8003b28:	e780      	b.n	8003a2c <OSMutexPost+0x14>
            OS_RdyListRemove(OSTCBCurPtr);
 8003b2a:	f7ff fdf9 	bl	8003720 <OS_RdyListRemove>
            OSTCBCurPtr->Prio = prio_new;                   /* Lower owner's priority back to its original one        */
 8003b2e:	f8d9 3000 	ldr.w	r3, [r9]
            OS_PrioInsert(prio_new);
 8003b32:	4650      	mov	r0, sl
            OSTCBCurPtr->Prio = prio_new;                   /* Lower owner's priority back to its original one        */
 8003b34:	f883 a037 	strb.w	sl, [r3, #55]	; 0x37
            OS_PrioInsert(prio_new);
 8003b38:	f000 f848 	bl	8003bcc <OS_PrioInsert>
            OS_RdyListInsertTail(OSTCBCurPtr);              /* Insert owner in ready list at new priority             */
 8003b3c:	f8d9 0000 	ldr.w	r0, [r9]
 8003b40:	f7ff fdd0 	bl	80036e4 <OS_RdyListInsertTail>
            OSPrioCur         = prio_new;
 8003b44:	4b02      	ldr	r3, [pc, #8]	; (8003b50 <OSMutexPost+0x138>)
 8003b46:	f883 a000 	strb.w	sl, [r3]
 8003b4a:	e7c3      	b.n	8003ad4 <OSMutexPost+0xbc>
 8003b4c:	5854554d 	.word	0x5854554d
 8003b50:	200029f0 	.word	0x200029f0
 8003b54:	20002ab4 	.word	0x20002ab4

08003b58 <OS_MutexInit>:
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 8003b58:	4903      	ldr	r1, [pc, #12]	; (8003b68 <OS_MutexInit+0x10>)
    OSMutexQty        = (OS_OBJ_QTY)0;
 8003b5a:	4a04      	ldr	r2, [pc, #16]	; (8003b6c <OS_MutexInit+0x14>)
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	600b      	str	r3, [r1, #0]
    OSMutexQty        = (OS_OBJ_QTY)0;
 8003b60:	8013      	strh	r3, [r2, #0]
   *p_err             =  OS_ERR_NONE;
 8003b62:	8003      	strh	r3, [r0, #0]
}
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20002da0 	.word	0x20002da0
 8003b6c:	20002ccc 	.word	0x20002ccc

08003b70 <OS_MutexGrpPrioFindHighest>:
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8003b70:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    highest_prio = OS_CFG_PRIO_MAX - 1u;
 8003b72:	201f      	movs	r0, #31
    while(*pp_mutex != (OS_MUTEX *)0) {
 8003b74:	b15b      	cbz	r3, 8003b8e <OS_MutexGrpPrioFindHighest+0x1e>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 8003b76:	689a      	ldr	r2, [r3, #8]
        if (p_head!= (OS_PEND_DATA *)0) {
 8003b78:	b12a      	cbz	r2, 8003b86 <OS_MutexGrpPrioFindHighest+0x16>
            prio = p_head->TCBPtr->Prio;
 8003b7a:	6892      	ldr	r2, [r2, #8]
 8003b7c:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 8003b80:	4290      	cmp	r0, r2
 8003b82:	bf28      	it	cs
 8003b84:	4610      	movcs	r0, r2
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8003b86:	6a1b      	ldr	r3, [r3, #32]
    while(*pp_mutex != (OS_MUTEX *)0) {
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1f4      	bne.n	8003b76 <OS_MutexGrpPrioFindHighest+0x6>
 8003b8c:	4770      	bx	lr
    }

    return (highest_prio);
}
 8003b8e:	4770      	bx	lr

08003b90 <OS_PrioInit>:
    CPU_DATA  i;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
         OSPrioTbl[i] = (CPU_DATA)0;
 8003b90:	4b01      	ldr	r3, [pc, #4]	; (8003b98 <OS_PrioInit+0x8>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
    }
}
 8003b96:	4770      	bx	lr
 8003b98:	2000284c 	.word	0x2000284c

08003b9c <OS_PrioGetHighest>:
    OS_PRIO    prio;


    prio  = (OS_PRIO)0;
    p_tbl = &OSPrioTbl[0];
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 8003b9c:	4b0a      	ldr	r3, [pc, #40]	; (8003bc8 <OS_PrioGetHighest+0x2c>)
 8003b9e:	6818      	ldr	r0, [r3, #0]
{
 8003ba0:	b510      	push	{r4, lr}
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 8003ba2:	b958      	cbnz	r0, 8003bbc <OS_PrioGetHighest+0x20>
    prio  = (OS_PRIO)0;
 8003ba4:	4604      	mov	r4, r0
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 8003ba6:	f853 0f04 	ldr.w	r0, [r3, #4]!
        prio += DEF_INT_CPU_NBR_BITS;                       /* Compute the step of each CPU_DATA entry                */
 8003baa:	3420      	adds	r4, #32
 8003bac:	b2e4      	uxtb	r4, r4
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d0f9      	beq.n	8003ba6 <OS_PrioGetHighest+0xa>
        p_tbl++;
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
 8003bb2:	f7fc fb20 	bl	80001f6 <CPU_CntLeadZeros>
 8003bb6:	4420      	add	r0, r4
    return (prio);
}
 8003bb8:	b2c0      	uxtb	r0, r0
 8003bba:	bd10      	pop	{r4, pc}
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
 8003bbc:	f7fc fb1b 	bl	80001f6 <CPU_CntLeadZeros>
    prio  = (OS_PRIO)0;
 8003bc0:	2400      	movs	r4, #0
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
 8003bc2:	4420      	add	r0, r4
}
 8003bc4:	b2c0      	uxtb	r0, r0
 8003bc6:	bd10      	pop	{r4, pc}
 8003bc8:	2000284c 	.word	0x2000284c

08003bcc <OS_PrioInsert>:

    ix             = prio / DEF_INT_CPU_NBR_BITS;
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
    bit            = 1u;
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
    OSPrioTbl[ix] |= bit;
 8003bcc:	0941      	lsrs	r1, r0, #5
 8003bce:	4a08      	ldr	r2, [pc, #32]	; (8003bf0 <OS_PrioInsert+0x24>)
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 8003bd0:	f000 001f 	and.w	r0, r0, #31
{
 8003bd4:	b410      	push	{r4}
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8003bd6:	f1c0 001f 	rsb	r0, r0, #31
    OSPrioTbl[ix] |= bit;
 8003bda:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8003bde:	2301      	movs	r3, #1
 8003be0:	fa03 f000 	lsl.w	r0, r3, r0
    OSPrioTbl[ix] |= bit;
 8003be4:	4320      	orrs	r0, r4
 8003be6:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
}
 8003bea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	2000284c 	.word	0x2000284c

08003bf4 <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 8003bf4:	b410      	push	{r4}

    ix             = prio / DEF_INT_CPU_NBR_BITS;
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
    bit            = 1u;
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
    OSPrioTbl[ix] &= ~bit;
 8003bf6:	4909      	ldr	r1, [pc, #36]	; (8003c1c <OS_PrioRemove+0x28>)
 8003bf8:	0944      	lsrs	r4, r0, #5
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 8003bfa:	f000 001f 	and.w	r0, r0, #31
    OSPrioTbl[ix] &= ~bit;
 8003bfe:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8003c02:	f1c0 001f 	rsb	r0, r0, #31
 8003c06:	2201      	movs	r2, #1
 8003c08:	fa02 f000 	lsl.w	r0, r2, r0
    OSPrioTbl[ix] &= ~bit;
 8003c0c:	ea23 0300 	bic.w	r3, r3, r0
 8003c10:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
}
 8003c14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	2000284c 	.word	0x2000284c

08003c20 <OS_QInit>:
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSQDbgListPtr = (OS_Q *)0;
 8003c20:	4903      	ldr	r1, [pc, #12]	; (8003c30 <OS_QInit+0x10>)
#endif

    OSQQty        = (OS_OBJ_QTY)0;
 8003c22:	4a04      	ldr	r2, [pc, #16]	; (8003c34 <OS_QInit+0x14>)
    OSQDbgListPtr = (OS_Q *)0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	600b      	str	r3, [r1, #0]
    OSQQty        = (OS_OBJ_QTY)0;
 8003c28:	8013      	strh	r3, [r2, #0]
   *p_err         = OS_ERR_NONE;
 8003c2a:	8003      	strh	r3, [r0, #0]
}
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	20002c64 	.word	0x20002c64
 8003c34:	20002ab8 	.word	0x20002ab8

08003c38 <OS_SemInit>:
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSSemDbgListPtr = (OS_SEM *)0;
 8003c38:	4903      	ldr	r1, [pc, #12]	; (8003c48 <OS_SemInit+0x10>)
#endif

    OSSemQty        = (OS_OBJ_QTY)0;
 8003c3a:	4a04      	ldr	r2, [pc, #16]	; (8003c4c <OS_SemInit+0x14>)
    OSSemDbgListPtr = (OS_SEM *)0;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	600b      	str	r3, [r1, #0]
    OSSemQty        = (OS_OBJ_QTY)0;
 8003c40:	8013      	strh	r3, [r2, #0]
   *p_err           = OS_ERR_NONE;
 8003c42:	8003      	strh	r3, [r0, #0]
}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	200029e8 	.word	0x200029e8
 8003c4c:	20002c68 	.word	0x20002c68

08003c50 <OSStatReset>:
* Returns    : none
************************************************************************************************************************
*/

void  OSStatReset (OS_ERR  *p_err)
{
 8003c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    OSIntQNbrEntriesMax   = (OS_OBJ_QTY)0;                  /* Reset the queue maximum number of entries              */
#endif

#if OS_CFG_STAT_TASK_EN > 0u
    OSStatTaskCPUUsageMax = 0u;
    OSStatTaskTimeMax     = (CPU_TS)0;
 8003c52:	4c20      	ldr	r4, [pc, #128]	; (8003cd4 <OSStatReset+0x84>)
    OSStatTaskCPUUsageMax = 0u;
 8003c54:	4e20      	ldr	r6, [pc, #128]	; (8003cd8 <OSStatReset+0x88>)
{
 8003c56:	4607      	mov	r7, r0
    CPU_CRITICAL_ENTER();
 8003c58:	f7fc fac2 	bl	80001e0 <CPU_SR_Save>
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    OSSchedLockTimeMax    = (CPU_TS)0;                      /* Reset the maximum scheduler lock time                  */
#endif

#if ((OS_MSG_EN > 0u) && (OS_CFG_DBG_EN > 0u))
    OSMsgPool.NbrUsedMax  = 0u;
 8003c5c:	4b1f      	ldr	r3, [pc, #124]	; (8003cdc <OSStatReset+0x8c>)
    OSTickTaskTimeMax     = (CPU_TS)0;
 8003c5e:	4920      	ldr	r1, [pc, #128]	; (8003ce0 <OSStatReset+0x90>)
    OSTmrTaskTimeMax      = (CPU_TS)0;
 8003c60:	4a20      	ldr	r2, [pc, #128]	; (8003ce4 <OSStatReset+0x94>)
    OSStatTaskCPUUsageMax = 0u;
 8003c62:	2500      	movs	r5, #0
    OSMsgPool.NbrUsedMax  = 0u;
 8003c64:	811d      	strh	r5, [r3, #8]
    OSStatTaskTimeMax     = (CPU_TS)0;
 8003c66:	6025      	str	r5, [r4, #0]
    OSTickTaskTimeMax     = (CPU_TS)0;
 8003c68:	600d      	str	r5, [r1, #0]
    OSTmrTaskTimeMax      = (CPU_TS)0;
 8003c6a:	6015      	str	r5, [r2, #0]
    OSStatTaskCPUUsageMax = 0u;
 8003c6c:	8035      	strh	r5, [r6, #0]
#endif
    CPU_CRITICAL_EXIT();
 8003c6e:	f7fc fabb 	bl	80001e8 <CPU_SR_Restore>

#if OS_CFG_DBG_EN > 0u
    CPU_CRITICAL_ENTER();
 8003c72:	f7fc fab5 	bl	80001e0 <CPU_SR_Save>
    p_tcb = OSTaskDbgListPtr;
 8003c76:	4b1c      	ldr	r3, [pc, #112]	; (8003ce8 <OSStatReset+0x98>)
 8003c78:	681c      	ldr	r4, [r3, #0]
    CPU_CRITICAL_EXIT();
 8003c7a:	f7fc fab5 	bl	80001e8 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 8003c7e:	b1b4      	cbz	r4, 8003cae <OSStatReset+0x5e>
        CPU_CRITICAL_ENTER();
 8003c80:	f7fc faae 	bl	80001e0 <CPU_SR_Save>
        p_tcb->SchedLockTimeMax = (CPU_TS      )0;
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
#if OS_CFG_TASK_Q_EN > 0u
        p_tcb->MsgQPendTimeMax  = (CPU_TS      )0;
 8003c84:	6765      	str	r5, [r4, #116]	; 0x74
#endif
        p_tcb->SemPendTimeMax   = (CPU_TS      )0;
 8003c86:	f8c4 50a4 	str.w	r5, [r4, #164]	; 0xa4
        p_tcb->CtxSwCtr         = (OS_CTR      )0;
        p_tcb->CPUUsage         = (OS_CPU_USAGE)0;
 8003c8a:	e9c4 5522 	strd	r5, r5, [r4, #136]	; 0x88
        p_tcb->CPUUsageMax      = (OS_CPU_USAGE)0;
        p_tcb->CyclesTotal      = (OS_CYCLES   )0;
        p_tcb->CyclesTotalPrev  = (OS_CYCLES   )0;
 8003c8e:	e9c4 5526 	strd	r5, r5, [r4, #152]	; 0x98
        CPU_CRITICAL_ENTER();
 8003c92:	4606      	mov	r6, r0
        p_tcb->CyclesStart      =  OS_TS_GET();
 8003c94:	f7fe fe70 	bl	8002978 <CPU_TS_TmrRd>
#endif

#if OS_CFG_TASK_Q_EN > 0u
        p_msg_q                 = &p_tcb->MsgQ;
        p_msg_q->NbrEntriesMax  = (OS_MSG_QTY  )0;
 8003c98:	f8a4 506c 	strh.w	r5, [r4, #108]	; 0x6c
        p_tcb->CyclesStart      =  OS_TS_GET();
 8003c9c:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
#endif
        p_tcb                   = p_tcb->DbgNextPtr;
 8003ca0:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
        CPU_CRITICAL_EXIT();
 8003ca4:	4630      	mov	r0, r6
 8003ca6:	f7fc fa9f 	bl	80001e8 <CPU_SR_Restore>
    while (p_tcb != (OS_TCB *)0) {                          /* Reset per-Task statistics                              */
 8003caa:	2c00      	cmp	r4, #0
 8003cac:	d1e8      	bne.n	8003c80 <OSStatReset+0x30>
    }
#endif

#if (OS_CFG_Q_EN > 0u) && (OS_CFG_DBG_EN > 0u)
    CPU_CRITICAL_ENTER();
 8003cae:	f7fc fa97 	bl	80001e0 <CPU_SR_Save>
    p_q = OSQDbgListPtr;
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <OSStatReset+0x9c>)
 8003cb4:	681c      	ldr	r4, [r3, #0]
    CPU_CRITICAL_EXIT();
 8003cb6:	f7fc fa97 	bl	80001e8 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 8003cba:	b144      	cbz	r4, 8003cce <OSStatReset+0x7e>
        CPU_CRITICAL_ENTER();
        p_msg_q                = &p_q->MsgQ;
        p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
 8003cbc:	2500      	movs	r5, #0
        CPU_CRITICAL_ENTER();
 8003cbe:	f7fc fa8f 	bl	80001e0 <CPU_SR_Save>
        p_msg_q->NbrEntriesMax = (OS_MSG_QTY)0;
 8003cc2:	85a5      	strh	r5, [r4, #44]	; 0x2c
        p_q                    = p_q->DbgNextPtr;
 8003cc4:	69a4      	ldr	r4, [r4, #24]
        CPU_CRITICAL_EXIT();
 8003cc6:	f7fc fa8f 	bl	80001e8 <CPU_SR_Restore>
    while (p_q != (OS_Q *)0) {                              /* Reset message queues statistics                        */
 8003cca:	2c00      	cmp	r4, #0
 8003ccc:	d1f7      	bne.n	8003cbe <OSStatReset+0x6e>
    }
#endif

   *p_err = OS_ERR_NONE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	803b      	strh	r3, [r7, #0]
}
 8003cd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003cd4:	20002858 	.word	0x20002858
 8003cd8:	20002aba 	.word	0x20002aba
 8003cdc:	20002b9c 	.word	0x20002b9c
 8003ce0:	20002d94 	.word	0x20002d94
 8003ce4:	20002ac8 	.word	0x20002ac8
 8003ce8:	20002ac4 	.word	0x20002ac4
 8003cec:	20002c64 	.word	0x20002c64

08003cf0 <OS_StatTask>:
*              4) This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTask (void  *p_arg)
{
 8003cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    CPU_SR_ALLOC();



    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */
    while (OSStatTaskRdy != DEF_TRUE) {
 8003cf4:	4d8a      	ldr	r5, [pc, #552]	; (8003f20 <OS_StatTask+0x230>)
 8003cf6:	4a8b      	ldr	r2, [pc, #556]	; (8003f24 <OS_StatTask+0x234>)
 8003cf8:	782b      	ldrb	r3, [r5, #0]
 8003cfa:	6814      	ldr	r4, [r2, #0]
 8003cfc:	2b01      	cmp	r3, #1
{
 8003cfe:	b085      	sub	sp, #20
    while (OSStatTaskRdy != DEF_TRUE) {
 8003d00:	d00b      	beq.n	8003d1a <OS_StatTask+0x2a>
 8003d02:	0067      	lsls	r7, r4, #1
 8003d04:	f10d 060e 	add.w	r6, sp, #14
        OSTimeDly(2u * OSCfg_StatTaskRate_Hz,               /* Wait until statistic task is ready                     */
 8003d08:	4632      	mov	r2, r6
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	4638      	mov	r0, r7
 8003d0e:	f000 fe7b 	bl	8004a08 <OSTimeDly>
    while (OSStatTaskRdy != DEF_TRUE) {
 8003d12:	782b      	ldrb	r3, [r5, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d1f7      	bne.n	8003d08 <OS_StatTask+0x18>
 8003d18:	e001      	b.n	8003d1e <OS_StatTask+0x2e>
 8003d1a:	f10d 060e 	add.w	r6, sp, #14
                  OS_OPT_TIME_DLY,
                  &err);
    }
    OSStatReset(&err);                                      /* Reset statistics                                       */
 8003d1e:	4630      	mov	r0, r6
 8003d20:	f7ff ff96 	bl	8003c50 <OSStatReset>

    dly = (OS_TICK)0;                                       /* Compute statistic task sleep delay                     */
    if (OSCfg_TickRate_Hz > OSCfg_StatTaskRate_Hz) {
 8003d24:	4b80      	ldr	r3, [pc, #512]	; (8003f28 <OS_StatTask+0x238>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	42a3      	cmp	r3, r4
 8003d2a:	d903      	bls.n	8003d34 <OS_StatTask+0x44>
        dly = (OS_TICK)(OSCfg_TickRate_Hz / OSCfg_StatTaskRate_Hz);
 8003d2c:	fbb3 f2f4 	udiv	r2, r3, r4
 8003d30:	9201      	str	r2, [sp, #4]
    }
    if (dly == (OS_TICK)0) {
 8003d32:	b922      	cbnz	r2, 8003d3e <OS_StatTask+0x4e>
        dly =  (OS_TICK)(OSCfg_TickRate_Hz / (OS_RATE_HZ)10);
 8003d34:	4a7d      	ldr	r2, [pc, #500]	; (8003f2c <OS_StatTask+0x23c>)
 8003d36:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3a:	08db      	lsrs	r3, r3, #3
 8003d3c:	9301      	str	r3, [sp, #4]
 8003d3e:	f8df b224 	ldr.w	fp, [pc, #548]	; 8003f64 <OS_StatTask+0x274>
 8003d42:	f8df a224 	ldr.w	sl, [pc, #548]	; 8003f68 <OS_StatTask+0x278>
        OSIntDisTimeMax = CPU_IntDisMeasMaxGet();
#endif

        CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
        OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
        OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
 8003d46:	2700      	movs	r7, #0
        ts_start        = OS_TS_GET();
 8003d48:	f7fe fe16 	bl	8002978 <CPU_TS_TmrRd>
        OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
 8003d4c:	4c78      	ldr	r4, [pc, #480]	; (8003f30 <OS_StatTask+0x240>)
        ts_start        = OS_TS_GET();
 8003d4e:	9000      	str	r0, [sp, #0]
        CPU_CRITICAL_ENTER();                               /* ----------------- OVERALL CPU USAGE ------------------ */
 8003d50:	f7fc fa46 	bl	80001e0 <CPU_SR_Save>
        OSStatTaskCtrRun   = OSStatTaskCtr;                 /* Obtain the of the stat counter for the past .1 second  */
 8003d54:	f8db 3000 	ldr.w	r3, [fp]
 8003d58:	6023      	str	r3, [r4, #0]
        OSStatTaskCtr      = (OS_TICK)0;                    /* Reset the stat counter for the next .1 second          */
 8003d5a:	f8cb 7000 	str.w	r7, [fp]
        CPU_CRITICAL_EXIT();
 8003d5e:	f7fc fa43 	bl	80001e8 <CPU_SR_Restore>

        if (OSStatTaskCtrMax > OSStatTaskCtrRun) {          /* Compute CPU Usage with best resolution                 */
 8003d62:	4b74      	ldr	r3, [pc, #464]	; (8003f34 <OS_StatTask+0x244>)
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	f240 8086 	bls.w	8003e7a <OS_StatTask+0x18a>
            if (OSStatTaskCtrMax < 400000u) {                                        /*            1 to       400,000 */
 8003d6e:	4972      	ldr	r1, [pc, #456]	; (8003f38 <OS_StatTask+0x248>)
 8003d70:	428a      	cmp	r2, r1
 8003d72:	f200 808c 	bhi.w	8003e8e <OS_StatTask+0x19e>
 8003d76:	f242 7110 	movw	r1, #10000	; 0x2710
 8003d7a:	fb01 f303 	mul.w	r3, r1, r3
                ctr_mult =     1u;
                ctr_div  = 10000u;
            }
            ctr_max            = OSStatTaskCtrMax / ctr_div;
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 8003d7e:	496f      	ldr	r1, [pc, #444]	; (8003f3c <OS_StatTask+0x24c>)
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
 8003d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d84:	f5c3 531c 	rsb	r3, r3, #9984	; 0x2700
 8003d88:	3310      	adds	r3, #16
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 8003d8a:	880a      	ldrh	r2, [r1, #0]
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
 8003d8c:	486c      	ldr	r0, [pc, #432]	; (8003f40 <OS_StatTask+0x250>)
 8003d8e:	b29b      	uxth	r3, r3
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 8003d90:	429a      	cmp	r2, r3
            OSStatTaskCPUUsage = (OS_CPU_USAGE)((OS_TICK)10000u - ctr_mult * OSStatTaskCtrRun / ctr_max);
 8003d92:	8003      	strh	r3, [r0, #0]
            if (OSStatTaskCPUUsageMax < OSStatTaskCPUUsage) {
 8003d94:	d200      	bcs.n	8003d98 <OS_StatTask+0xa8>
                OSStatTaskCPUUsageMax = OSStatTaskCPUUsage;
 8003d96:	800b      	strh	r3, [r1, #0]
            }
        } else {
            OSStatTaskCPUUsage = (OS_CPU_USAGE)0u;
        }

        OSStatTaskHook();                                   /* Invoke user definable hook                             */
 8003d98:	f7fe fe6e 	bl	8002a78 <OSStatTaskHook>

#if OS_CFG_DBG_EN > 0u
#if OS_CFG_TASK_PROFILE_EN > 0u
        cycles_total = (OS_CYCLES)0;

        CPU_CRITICAL_ENTER();
 8003d9c:	f7fc fa20 	bl	80001e0 <CPU_SR_Save>
        p_tcb = OSTaskDbgListPtr;
 8003da0:	4b68      	ldr	r3, [pc, #416]	; (8003f44 <OS_StatTask+0x254>)
 8003da2:	681c      	ldr	r4, [r3, #0]
        CPU_CRITICAL_EXIT();
 8003da4:	f7fc fa20 	bl	80001e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 8003da8:	2c00      	cmp	r4, #0
 8003daa:	d069      	beq.n	8003e80 <OS_StatTask+0x190>
        cycles_total = (OS_CYCLES)0;
 8003dac:	2500      	movs	r5, #0
            OS_CRITICAL_ENTER();
 8003dae:	f7fc fa17 	bl	80001e0 <CPU_SR_Save>
            p_tcb->CyclesTotalPrev =  p_tcb->CyclesTotal;   /* Save accumulated # cycles into a temp variable         */
 8003db2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
            p_tcb->CyclesTotal     = (OS_CYCLES)0;          /* Reset total cycles for task for next run               */
 8003db6:	e9c4 7326 	strd	r7, r3, [r4, #152]	; 0x98
            OS_CRITICAL_EXIT();
 8003dba:	f7fc fa15 	bl	80001e8 <CPU_SR_Restore>

            cycles_total          += p_tcb->CyclesTotalPrev;/* Perform sum of all task # cycles                       */
 8003dbe:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 8003dc2:	441d      	add	r5, r3

            CPU_CRITICAL_ENTER();
 8003dc4:	f7fc fa0c 	bl	80001e0 <CPU_SR_Save>
            p_tcb                  = p_tcb->DbgNextPtr;
 8003dc8:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
            CPU_CRITICAL_EXIT();
 8003dcc:	f7fc fa0c 	bl	80001e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {                      /* ----------------- TOTAL CYCLES COUNT ----------------- */
 8003dd0:	2c00      	cmp	r4, #0
 8003dd2:	d1ec      	bne.n	8003dae <OS_StatTask+0xbe>
#endif


#if OS_CFG_TASK_PROFILE_EN > 0u
                                                            /* ------------- INDIVIDUAL TASK CPU USAGE -------------- */
        if (cycles_total > (OS_CYCLES)0u) {                                          /* 'cycles_total' scaling ...    */
 8003dd4:	2d00      	cmp	r5, #0
 8003dd6:	d053      	beq.n	8003e80 <OS_StatTask+0x190>
            if (cycles_total < 400000u) {                                            /*            1 to       400,000 */
 8003dd8:	4b57      	ldr	r3, [pc, #348]	; (8003f38 <OS_StatTask+0x248>)
 8003dda:	429d      	cmp	r5, r3
 8003ddc:	d954      	bls.n	8003e88 <OS_StatTask+0x198>
                cycles_mult = 10000u;
                cycles_div  =     1u;
            } else if (cycles_total <   4000000u) {                                  /*      400,000 to     4,000,000 */
 8003dde:	4b5a      	ldr	r3, [pc, #360]	; (8003f48 <OS_StatTask+0x258>)
 8003de0:	429d      	cmp	r5, r3
 8003de2:	d871      	bhi.n	8003ec8 <OS_StatTask+0x1d8>
 8003de4:	4b51      	ldr	r3, [pc, #324]	; (8003f2c <OS_StatTask+0x23c>)
 8003de6:	fba3 3505 	umull	r3, r5, r3, r5
 8003dea:	08ed      	lsrs	r5, r5, #3
                cycles_mult =  1000u;
 8003dec:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
        } else {
            cycles_mult = 0u;
            cycles_max  = 1u;
        }
#endif
        CPU_CRITICAL_ENTER();
 8003df0:	f7fc f9f6 	bl	80001e0 <CPU_SR_Save>
        p_tcb = OSTaskDbgListPtr;
 8003df4:	4b53      	ldr	r3, [pc, #332]	; (8003f44 <OS_StatTask+0x254>)
 8003df6:	681c      	ldr	r4, [r3, #0]
        CPU_CRITICAL_EXIT();
 8003df8:	f7fc f9f6 	bl	80001e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 8003dfc:	b34c      	cbz	r4, 8003e52 <OS_StatTask+0x162>
 8003dfe:	f242 7910 	movw	r9, #10000	; 0x2710
 8003e02:	e00a      	b.n	8003e1a <OS_StatTask+0x12a>
            if (usage > 10000u) {
                usage = 10000u;
            }
            p_tcb->CPUUsage = usage;
            if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
                p_tcb->CPUUsageMax = usage;
 8003e04:	f8a4 c08a 	strh.w	ip, [r4, #138]	; 0x8a
            }
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
            OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
 8003e08:	f000 fada 	bl	80043c0 <OSTaskStkChk>
                         &p_tcb->StkFree,
                         &p_tcb->StkUsed,
                         &err);
#endif

            CPU_CRITICAL_ENTER();
 8003e0c:	f7fc f9e8 	bl	80001e0 <CPU_SR_Save>
            p_tcb = p_tcb->DbgNextPtr;
 8003e10:	f8d4 40b4 	ldr.w	r4, [r4, #180]	; 0xb4
            CPU_CRITICAL_EXIT();
 8003e14:	f7fc f9e8 	bl	80001e8 <CPU_SR_Restore>
        while (p_tcb != (OS_TCB *)0) {
 8003e18:	b1dc      	cbz	r4, 8003e52 <OS_StatTask+0x162>
            usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
 8003e1a:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
            if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
 8003e1e:	f8b4 e08a 	ldrh.w	lr, [r4, #138]	; 0x8a
            usage = (OS_CPU_USAGE)(cycles_mult * p_tcb->CyclesTotalPrev / cycles_max);
 8003e22:	fb03 fc08 	mul.w	ip, r3, r8
 8003e26:	fbbc fcf5 	udiv	ip, ip, r5
 8003e2a:	fa1f fc8c 	uxth.w	ip, ip
 8003e2e:	45cc      	cmp	ip, r9
 8003e30:	bf28      	it	cs
 8003e32:	46cc      	movcs	ip, r9
            if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
 8003e34:	45e6      	cmp	lr, ip
            OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
 8003e36:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 8003e3a:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 8003e3e:	4620      	mov	r0, r4
 8003e40:	4633      	mov	r3, r6
            p_tcb->CPUUsage = usage;
 8003e42:	f8a4 c088 	strh.w	ip, [r4, #136]	; 0x88
            if (p_tcb->CPUUsageMax < usage) {               /* Detect peak CPU usage                                  */
 8003e46:	d3dd      	bcc.n	8003e04 <OS_StatTask+0x114>
            OSTaskStkChk( p_tcb,                            /* Compute stack usage of active tasks only               */
 8003e48:	f104 02a8 	add.w	r2, r4, #168	; 0xa8
 8003e4c:	f104 01ac 	add.w	r1, r4, #172	; 0xac
 8003e50:	e7da      	b.n	8003e08 <OS_StatTask+0x118>
        }
#endif

        if (OSStatResetFlag == DEF_TRUE) {                  /* Check if need to reset statistics                      */
 8003e52:	4b3e      	ldr	r3, [pc, #248]	; (8003f4c <OS_StatTask+0x25c>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b01      	cmp	r3, #1
 8003e58:	d025      	beq.n	8003ea6 <OS_StatTask+0x1b6>
            OSStatResetFlag  = DEF_FALSE;
            OSStatReset(&err);
        }

        ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
 8003e5a:	f7fe fd8d 	bl	8002978 <CPU_TS_TmrRd>
 8003e5e:	9a00      	ldr	r2, [sp, #0]
        if (OSStatTaskTimeMax < ts_end) {
 8003e60:	f8da 3000 	ldr.w	r3, [sl]
        ts_end = OS_TS_GET() - ts_start;                    /* Measure execution time of statistic task               */
 8003e64:	1a80      	subs	r0, r0, r2
        if (OSStatTaskTimeMax < ts_end) {
 8003e66:	4283      	cmp	r3, r0
            OSStatTaskTimeMax = ts_end;
 8003e68:	bf38      	it	cc
 8003e6a:	f8ca 0000 	strcc.w	r0, [sl]
        }

        OSTimeDly(dly,
 8003e6e:	4632      	mov	r2, r6
 8003e70:	2100      	movs	r1, #0
 8003e72:	9801      	ldr	r0, [sp, #4]
 8003e74:	f000 fdc8 	bl	8004a08 <OSTimeDly>
        ts_start        = OS_TS_GET();
 8003e78:	e766      	b.n	8003d48 <OS_StatTask+0x58>
            OSStatTaskCPUUsage = (OS_CPU_USAGE)0u;
 8003e7a:	4b31      	ldr	r3, [pc, #196]	; (8003f40 <OS_StatTask+0x250>)
 8003e7c:	801f      	strh	r7, [r3, #0]
 8003e7e:	e78b      	b.n	8003d98 <OS_StatTask+0xa8>
            cycles_max  = 1u;
 8003e80:	2501      	movs	r5, #1
            cycles_mult = 0u;
 8003e82:	f04f 0800 	mov.w	r8, #0
 8003e86:	e7b3      	b.n	8003df0 <OS_StatTask+0x100>
                cycles_mult = 10000u;
 8003e88:	f242 7810 	movw	r8, #10000	; 0x2710
 8003e8c:	e7b0      	b.n	8003df0 <OS_StatTask+0x100>
            } else if (OSStatTaskCtrMax <   4000000u) {                              /*      400,000 to     4,000,000 */
 8003e8e:	492e      	ldr	r1, [pc, #184]	; (8003f48 <OS_StatTask+0x258>)
 8003e90:	428a      	cmp	r2, r1
 8003e92:	d80e      	bhi.n	8003eb2 <OS_StatTask+0x1c2>
 8003e94:	4925      	ldr	r1, [pc, #148]	; (8003f2c <OS_StatTask+0x23c>)
 8003e96:	fba1 1202 	umull	r1, r2, r1, r2
 8003e9a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003e9e:	08d2      	lsrs	r2, r2, #3
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	e76b      	b.n	8003d7e <OS_StatTask+0x8e>
            OSStatResetFlag  = DEF_FALSE;
 8003ea6:	4b29      	ldr	r3, [pc, #164]	; (8003f4c <OS_StatTask+0x25c>)
            OSStatReset(&err);
 8003ea8:	4630      	mov	r0, r6
            OSStatResetFlag  = DEF_FALSE;
 8003eaa:	701f      	strb	r7, [r3, #0]
            OSStatReset(&err);
 8003eac:	f7ff fed0 	bl	8003c50 <OSStatReset>
 8003eb0:	e7d3      	b.n	8003e5a <OS_StatTask+0x16a>
            } else if (OSStatTaskCtrMax <  40000000u) {                              /*    4,000,000 to    40,000,000 */
 8003eb2:	4927      	ldr	r1, [pc, #156]	; (8003f50 <OS_StatTask+0x260>)
 8003eb4:	428a      	cmp	r2, r1
 8003eb6:	d811      	bhi.n	8003edc <OS_StatTask+0x1ec>
 8003eb8:	4926      	ldr	r1, [pc, #152]	; (8003f54 <OS_StatTask+0x264>)
 8003eba:	fba1 1202 	umull	r1, r2, r1, r2
 8003ebe:	2164      	movs	r1, #100	; 0x64
 8003ec0:	0952      	lsrs	r2, r2, #5
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	e75a      	b.n	8003d7e <OS_StatTask+0x8e>
            } else if (cycles_total <  40000000u) {                                  /*    4,000,000 to    40,000,000 */
 8003ec8:	4b21      	ldr	r3, [pc, #132]	; (8003f50 <OS_StatTask+0x260>)
 8003eca:	429d      	cmp	r5, r3
 8003ecc:	d80e      	bhi.n	8003eec <OS_StatTask+0x1fc>
 8003ece:	4b21      	ldr	r3, [pc, #132]	; (8003f54 <OS_StatTask+0x264>)
 8003ed0:	fba3 3505 	umull	r3, r5, r3, r5
 8003ed4:	096d      	lsrs	r5, r5, #5
                cycles_mult =   100u;
 8003ed6:	f04f 0864 	mov.w	r8, #100	; 0x64
 8003eda:	e789      	b.n	8003df0 <OS_StatTask+0x100>
            } else if (OSStatTaskCtrMax < 400000000u) {                              /*   40,000,000 to   400,000,000 */
 8003edc:	491e      	ldr	r1, [pc, #120]	; (8003f58 <OS_StatTask+0x268>)
 8003ede:	428a      	cmp	r2, r1
 8003ee0:	d90e      	bls.n	8003f00 <OS_StatTask+0x210>
 8003ee2:	491e      	ldr	r1, [pc, #120]	; (8003f5c <OS_StatTask+0x26c>)
 8003ee4:	fba1 1202 	umull	r1, r2, r1, r2
 8003ee8:	0b52      	lsrs	r2, r2, #13
 8003eea:	e748      	b.n	8003d7e <OS_StatTask+0x8e>
            } else if (cycles_total < 400000000u) {                                  /*   40,000,000 to   400,000,000 */
 8003eec:	4b1a      	ldr	r3, [pc, #104]	; (8003f58 <OS_StatTask+0x268>)
 8003eee:	429d      	cmp	r5, r3
 8003ef0:	d90e      	bls.n	8003f10 <OS_StatTask+0x220>
 8003ef2:	4b1a      	ldr	r3, [pc, #104]	; (8003f5c <OS_StatTask+0x26c>)
 8003ef4:	fba3 3505 	umull	r3, r5, r3, r5
 8003ef8:	0b6d      	lsrs	r5, r5, #13
                cycles_mult =     1u;
 8003efa:	f04f 0801 	mov.w	r8, #1
 8003efe:	e777      	b.n	8003df0 <OS_StatTask+0x100>
 8003f00:	4917      	ldr	r1, [pc, #92]	; (8003f60 <OS_StatTask+0x270>)
 8003f02:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003f06:	fba1 1202 	umull	r1, r2, r1, r2
 8003f0a:	005b      	lsls	r3, r3, #1
 8003f0c:	0992      	lsrs	r2, r2, #6
 8003f0e:	e736      	b.n	8003d7e <OS_StatTask+0x8e>
 8003f10:	4b13      	ldr	r3, [pc, #76]	; (8003f60 <OS_StatTask+0x270>)
 8003f12:	fba3 3505 	umull	r3, r5, r3, r5
 8003f16:	09ad      	lsrs	r5, r5, #6
                cycles_mult =    10u;
 8003f18:	f04f 080a 	mov.w	r8, #10
 8003f1c:	e768      	b.n	8003df0 <OS_StatTask+0x100>
 8003f1e:	bf00      	nop
 8003f20:	200029e5 	.word	0x200029e5
 8003f24:	08008d68 	.word	0x08008d68
 8003f28:	08008d7c 	.word	0x08008d7c
 8003f2c:	cccccccd 	.word	0xcccccccd
 8003f30:	20002cb8 	.word	0x20002cb8
 8003f34:	20002ca4 	.word	0x20002ca4
 8003f38:	00061a7f 	.word	0x00061a7f
 8003f3c:	20002aba 	.word	0x20002aba
 8003f40:	20002ad4 	.word	0x20002ad4
 8003f44:	20002ac4 	.word	0x20002ac4
 8003f48:	003d08ff 	.word	0x003d08ff
 8003f4c:	20002cc8 	.word	0x20002cc8
 8003f50:	026259ff 	.word	0x026259ff
 8003f54:	51eb851f 	.word	0x51eb851f
 8003f58:	17d783ff 	.word	0x17d783ff
 8003f5c:	d1b71759 	.word	0xd1b71759
 8003f60:	10624dd3 	.word	0x10624dd3
 8003f64:	2000285c 	.word	0x2000285c
 8003f68:	20002858 	.word	0x20002858

08003f6c <OS_StatTaskInit>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_StatTaskInit (OS_ERR  *p_err)
{
 8003f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    OSStatTaskCtrMax = (OS_TICK)0;
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
    OSStatResetFlag  = DEF_FALSE;

                                                            /* ---------------- CREATE THE STAT TASK ---------------- */
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 8003f6e:	4b1d      	ldr	r3, [pc, #116]	; (8003fe4 <OS_StatTaskInit+0x78>)
    OSStatTaskCtr    = (OS_TICK)0;
 8003f70:	4f1d      	ldr	r7, [pc, #116]	; (8003fe8 <OS_StatTaskInit+0x7c>)
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 8003f72:	681a      	ldr	r2, [r3, #0]
    OSStatTaskCtrRun = (OS_TICK)0;
 8003f74:	4e1d      	ldr	r6, [pc, #116]	; (8003fec <OS_StatTaskInit+0x80>)
    OSStatTaskCtrMax = (OS_TICK)0;
 8003f76:	4d1e      	ldr	r5, [pc, #120]	; (8003ff0 <OS_StatTaskInit+0x84>)
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
 8003f78:	4c1e      	ldr	r4, [pc, #120]	; (8003ff4 <OS_StatTaskInit+0x88>)
    OSStatResetFlag  = DEF_FALSE;
 8003f7a:	491f      	ldr	r1, [pc, #124]	; (8003ff8 <OS_StatTaskInit+0x8c>)
    OSStatTaskCtr    = (OS_TICK)0;
 8003f7c:	2300      	movs	r3, #0
{
 8003f7e:	b08b      	sub	sp, #44	; 0x2c
    OSStatTaskCtr    = (OS_TICK)0;
 8003f80:	603b      	str	r3, [r7, #0]
    OSStatTaskCtrRun = (OS_TICK)0;
 8003f82:	6033      	str	r3, [r6, #0]
    OSStatTaskCtrMax = (OS_TICK)0;
 8003f84:	602b      	str	r3, [r5, #0]
    OSStatTaskRdy    = OS_STATE_NOT_RDY;                    /* Statistic task is not ready                            */
 8003f86:	7023      	strb	r3, [r4, #0]
    OSStatResetFlag  = DEF_FALSE;
 8003f88:	700b      	strb	r3, [r1, #0]
    if (OSCfg_StatTaskStkBasePtr == (CPU_STK *)0) {
 8003f8a:	b19a      	cbz	r2, 8003fb4 <OS_StatTaskInit+0x48>
       *p_err = OS_ERR_STAT_STK_INVALID;
        return;
    }

    if (OSCfg_StatTaskStkSize < OSCfg_StkSizeMin) {
 8003f8c:	491b      	ldr	r1, [pc, #108]	; (8003ffc <OS_StatTaskInit+0x90>)
 8003f8e:	4c1c      	ldr	r4, [pc, #112]	; (8004000 <OS_StatTaskInit+0x94>)
 8003f90:	6809      	ldr	r1, [r1, #0]
 8003f92:	6824      	ldr	r4, [r4, #0]
 8003f94:	42a1      	cmp	r1, r4
 8003f96:	d308      	bcc.n	8003faa <OS_StatTaskInit+0x3e>
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
        return;
    }

    if (OSCfg_StatTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8003f98:	4c1a      	ldr	r4, [pc, #104]	; (8004004 <OS_StatTaskInit+0x98>)
 8003f9a:	7824      	ldrb	r4, [r4, #0]
 8003f9c:	2c1e      	cmp	r4, #30
 8003f9e:	d90e      	bls.n	8003fbe <OS_StatTaskInit+0x52>
       *p_err = OS_ERR_STAT_PRIO_INVALID;
 8003fa0:	f646 632a 	movw	r3, #28202	; 0x6e2a
 8003fa4:	8003      	strh	r3, [r0, #0]
                 (OS_MSG_QTY  )0,
                 (OS_TICK     )0,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                 (OS_ERR     *)p_err);
}
 8003fa6:	b00b      	add	sp, #44	; 0x2c
 8003fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *p_err = OS_ERR_STAT_STK_SIZE_INVALID;
 8003faa:	f646 632c 	movw	r3, #28204	; 0x6e2c
 8003fae:	8003      	strh	r3, [r0, #0]
}
 8003fb0:	b00b      	add	sp, #44	; 0x2c
 8003fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
       *p_err = OS_ERR_STAT_STK_INVALID;
 8003fb4:	f646 632b 	movw	r3, #28203	; 0x6e2b
 8003fb8:	8003      	strh	r3, [r0, #0]
}
 8003fba:	b00b      	add	sp, #44	; 0x2c
 8003fbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    OSTaskCreate((OS_TCB     *)&OSStatTaskTCB,
 8003fbe:	4d12      	ldr	r5, [pc, #72]	; (8004008 <OS_StatTaskInit+0x9c>)
 8003fc0:	9008      	str	r0, [sp, #32]
 8003fc2:	682d      	ldr	r5, [r5, #0]
 8003fc4:	9103      	str	r1, [sp, #12]
 8003fc6:	2003      	movs	r0, #3
 8003fc8:	e9cd 4200 	strd	r4, r2, [sp]
 8003fcc:	9007      	str	r0, [sp, #28]
 8003fce:	9306      	str	r3, [sp, #24]
 8003fd0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003fd4:	9502      	str	r5, [sp, #8]
 8003fd6:	4a0d      	ldr	r2, [pc, #52]	; (800400c <OS_StatTaskInit+0xa0>)
 8003fd8:	490d      	ldr	r1, [pc, #52]	; (8004010 <OS_StatTaskInit+0xa4>)
 8003fda:	480e      	ldr	r0, [pc, #56]	; (8004014 <OS_StatTaskInit+0xa8>)
 8003fdc:	f000 f81c 	bl	8004018 <OSTaskCreate>
}
 8003fe0:	b00b      	add	sp, #44	; 0x2c
 8003fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe4:	08008d6c 	.word	0x08008d6c
 8003fe8:	2000285c 	.word	0x2000285c
 8003fec:	20002cb8 	.word	0x20002cb8
 8003ff0:	20002ca4 	.word	0x20002ca4
 8003ff4:	200029e5 	.word	0x200029e5
 8003ff8:	20002cc8 	.word	0x20002cc8
 8003ffc:	08008d74 	.word	0x08008d74
 8004000:	08008d78 	.word	0x08008d78
 8004004:	08008d66 	.word	0x08008d66
 8004008:	08008d70 	.word	0x08008d70
 800400c:	08003cf1 	.word	0x08003cf1
 8004010:	08008dd0 	.word	0x08008dd0
 8004014:	20002cd0 	.word	0x20002cd0

08004018 <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 8004018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800401c:	b089      	sub	sp, #36	; 0x24
 800401e:	e9dd 7613 	ldrd	r7, r6, [sp, #76]	; 0x4c
 8004022:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 8004026:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8004028:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 800402c:	f8bd b058 	ldrh.w	fp, [sp, #88]	; 0x58
 8004030:	9402      	str	r4, [sp, #8]
            return;
        }
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 8004032:	2d1f      	cmp	r5, #31
{
 8004034:	f8bd 9064 	ldrh.w	r9, [sp, #100]	; 0x64
 8004038:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 800403c:	d109      	bne.n	8004052 <OSTaskCreate+0x3a>
        if (p_tcb != &OSIdleTaskTCB) {
 800403e:	4c5b      	ldr	r4, [pc, #364]	; (80041ac <OSTaskCreate+0x194>)
 8004040:	42a0      	cmp	r0, r4
 8004042:	d006      	beq.n	8004052 <OSTaskCreate+0x3a>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TASK_CREATE_FAILED(p_tcb);             /* Record the event.                                      */
#endif
           *p_err = OS_ERR_PRIO_INVALID;                    /* Not allowed to use same priority as idle task          */
 8004044:	f246 2373 	movw	r3, #25203	; 0x6273
 8004048:	f8a8 3000 	strh.w	r3, [r8]
    }

    OS_CRITICAL_EXIT_NO_SCHED();

    OSSched();
}
 800404c:	b009      	add	sp, #36	; 0x24
 800404e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004052:	4604      	mov	r4, r0
 8004054:	e9cd 2303 	strd	r2, r3, [sp, #12]
#if OS_CFG_TASK_PROFILE_EN > 0u
    CPU_TS      ts;
#endif


    p_tcb->StkPtr             = (CPU_STK       *)0;
 8004058:	2300      	movs	r3, #0
    p_tcb->TickNextPtr        = (OS_TCB        *)0;
    p_tcb->TickPrevPtr        = (OS_TCB        *)0;
    p_tcb->TickListPtr        = (OS_TICK_LIST  *)0;

#if OS_CFG_DBG_EN > 0u
    p_tcb->NamePtr            = (CPU_CHAR      *)((void *)"?Task");
 800405a:	4a55      	ldr	r2, [pc, #340]	; (80041b0 <OSTaskCreate+0x198>)
    p_tcb->StkPtr             = (CPU_STK       *)0;
 800405c:	6003      	str	r3, [r0, #0]
 800405e:	9106      	str	r1, [sp, #24]
    p_tcb->MsgPtr             = (void          *)0;
    p_tcb->MsgSize            = (OS_MSG_SIZE    )0u;
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,
 8004060:	3060      	adds	r0, #96	; 0x60
 8004062:	4619      	mov	r1, r3
    p_tcb->NamePtr            = (CPU_CHAR      *)((void *)"?Task");
 8004064:	6222      	str	r2, [r4, #32]
    p_tcb->ExtPtr             = (void          *)0;
 8004066:	e9c4 3301 	strd	r3, r3, [r4, #4]
    p_tcb->PrevPtr            = (OS_TCB        *)0;
 800406a:	e9c4 3303 	strd	r3, r3, [r4, #12]
    p_tcb->TickPrevPtr        = (OS_TCB        *)0;
 800406e:	e9c4 3305 	strd	r3, r3, [r4, #20]
    p_tcb->TickListPtr        = (OS_TICK_LIST  *)0;
 8004072:	61e3      	str	r3, [r4, #28]
    p_tcb->TaskEntryAddr      = (OS_TASK_PTR    )0;
 8004074:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA  *)0;
 8004078:	e9c4 330b 	strd	r3, r3, [r4, #44]	; 0x2c
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY     )0u;
 800407c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    p_tcb->TS                 = (CPU_TS         )0u;
 8004080:	64a3      	str	r3, [r4, #72]	; 0x48
    p_tcb->MsgPtr             = (void          *)0;
 8004082:	65a3      	str	r3, [r4, #88]	; 0x58
    p_tcb->MsgSize            = (OS_MSG_SIZE    )0u;
 8004084:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    OS_MsgQInit(&p_tcb->MsgQ,
 8004088:	9005      	str	r0, [sp, #20]
 800408a:	9307      	str	r3, [sp, #28]
 800408c:	f7ff fbca 	bl	8003824 <OS_MsgQInit>
                (OS_MSG_QTY)0u);
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->MsgQPendTime       = (CPU_TS         )0u;
 8004090:	9b07      	ldr	r3, [sp, #28]
    p_tcb->MsgQPendTimeMax    = (CPU_TS         )0u;
#endif
#endif

#if OS_CFG_FLAG_EN > 0u
    p_tcb->FlagsPend          = (OS_FLAGS       )0u;
 8004092:	67e3      	str	r3, [r4, #124]	; 0x7c
    p_tcb->MsgQPendTimeMax    = (CPU_TS         )0u;
 8004094:	e9c4 331c 	strd	r3, r3, [r4, #112]	; 0x70
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
 8004098:	f8a4 3084 	strh.w	r3, [r4, #132]	; 0x84
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
 800409c:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
        p_tcb->RegTbl[reg_id] = (OS_REG)0u;
 80040a0:	67a3      	str	r3, [r4, #120]	; 0x78
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]    = (OS_TLS)0;
    }
#endif

    p_tcb->SemCtr             = (OS_SEM_CTR     )0u;
 80040a2:	64e3      	str	r3, [r4, #76]	; 0x4c
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->SemPendTime        = (CPU_TS         )0u;
    p_tcb->SemPendTimeMax     = (CPU_TS         )0u;
 80040a4:	e9c4 3328 	strd	r3, r3, [r4, #160]	; 0xa0
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize            = (CPU_STK_SIZE   )0u;
 80040a8:	6423      	str	r3, [r4, #64]	; 0x40
#endif


#if OS_CFG_TASK_SUSPEND_EN > 0u
    p_tcb->SuspendCtr         = (OS_NESTING_CTR )0u;
 80040aa:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
#endif

#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
    p_tcb->StkFree            = (CPU_STK_SIZE   )0u;
    p_tcb->StkUsed            = (CPU_STK_SIZE   )0u;
 80040ae:	e9c4 332a 	strd	r3, r3, [r4, #168]	; 0xa8
#endif

    p_tcb->Opt                = (OS_OPT         )0u;
 80040b2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44

    p_tcb->TickRemain         = (OS_TICK        )0u;
    p_tcb->TickCtrPrev        = (OS_TICK        )0u;
 80040b6:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->CPUUsage           = (OS_CPU_USAGE   )0u;
    p_tcb->CPUUsageMax        = (OS_CPU_USAGE   )0u;
    p_tcb->CtxSwCtr           = (OS_CTX_SW_CTR  )0u;
 80040ba:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
    p_tcb->CyclesDelta        = (CPU_TS         )0u;
 80040be:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    ts                        = OS_TS_GET();                /* Read the current timestamp and save                    */
 80040c2:	f7fe fc59 	bl	8002978 <CPU_TS_TmrRd>
#endif
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    p_tcb->SchedLockTimeMax   = (CPU_TS         )0u;
#endif

    p_tcb->PendOn             = (OS_STATE       )OS_TASK_PEND_ON_NOTHING;
 80040c6:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    p_tcb->CyclesTotal        = (OS_CYCLES      )0u;
 80040ca:	9b07      	ldr	r3, [sp, #28]
    p_tcb->PendOn             = (OS_STATE       )OS_TASK_PEND_ON_NOTHING;
 80040cc:	6362      	str	r2, [r4, #52]	; 0x34
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
 80040ce:	f009 0203 	and.w	r2, r9, #3
    p_tcb->PendStatus         = (OS_STATUS      )OS_STATUS_PEND_OK;
    p_tcb->TaskState          = (OS_STATE       )OS_TASK_STATE_RDY;

    p_tcb->Prio               = (OS_PRIO        )OS_PRIO_INIT;
#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio           = (OS_PRIO        )OS_PRIO_INIT;
 80040d2:	f04f 0c20 	mov.w	ip, #32
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->DbgPrevPtr         = (OS_TCB        *)0;
    p_tcb->DbgNextPtr         = (OS_TCB        *)0;
    p_tcb->DbgNamePtr         = (CPU_CHAR      *)((void *)" ");
 80040d6:	4937      	ldr	r1, [pc, #220]	; (80041b4 <OSTaskCreate+0x19c>)
    p_tcb->CyclesStart        = ts;
 80040d8:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
 80040dc:	2a03      	cmp	r2, #3
    p_tcb->CyclesTotal        = (OS_CYCLES      )0u;
 80040de:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
    p_tcb->MutexGrpHeadPtr    = (OS_MUTEX      *)0;
 80040e2:	63e3      	str	r3, [r4, #60]	; 0x3c
    p_tcb->DbgNextPtr         = (OS_TCB        *)0;
 80040e4:	e9c4 332c 	strd	r3, r3, [r4, #176]	; 0xb0
    p_tcb->BasePrio           = (OS_PRIO        )OS_PRIO_INIT;
 80040e8:	f884 c038 	strb.w	ip, [r4, #56]	; 0x38
    p_tcb->DbgNamePtr         = (CPU_CHAR      *)((void *)" ");
 80040ec:	f8c4 10b8 	str.w	r1, [r4, #184]	; 0xb8
   *p_err = OS_ERR_NONE;
 80040f0:	f8a8 3000 	strh.w	r3, [r8]
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
 80040f4:	d050      	beq.n	8004198 <OSTaskCreate+0x180>
    p_stk_limit = p_stk_base + stk_limit;
 80040f6:	eb07 0686 	add.w	r6, r7, r6, lsl #2
    p_sp = OSTaskStkInit(p_task,
 80040fa:	463a      	mov	r2, r7
 80040fc:	4633      	mov	r3, r6
 80040fe:	e9dd 0103 	ldrd	r0, r1, [sp, #12]
 8004102:	e9cd a900 	strd	sl, r9, [sp]
 8004106:	f7fe fccf 	bl	8002aa8 <OSTaskStkInit>
    p_tcb->TaskEntryAddr = p_task;                          /* Save task entry point address                          */
 800410a:	9b03      	ldr	r3, [sp, #12]
 800410c:	62a3      	str	r3, [r4, #40]	; 0x28
    p_tcb->TaskEntryArg  = p_arg;                           /* Save task entry argument                               */
 800410e:	9b04      	ldr	r3, [sp, #16]
 8004110:	62e3      	str	r3, [r4, #44]	; 0x2c
    p_tcb->NamePtr       = p_name;                          /* Save task name                                         */
 8004112:	9b06      	ldr	r3, [sp, #24]
 8004114:	6223      	str	r3, [r4, #32]
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
 8004116:	f04f 0800 	mov.w	r8, #0
    p_tcb->ExtPtr        = p_ext;                           /* Save pointer to TCB extension                          */
 800411a:	9b02      	ldr	r3, [sp, #8]
 800411c:	6063      	str	r3, [r4, #4]
    OS_MsgQInit(&p_tcb->MsgQ,                               /* Initialize the task's message queue                    */
 800411e:	4659      	mov	r1, fp
    p_tcb->StkPtr        = p_sp;                            /* Save the new top-of-stack pointer                      */
 8004120:	6020      	str	r0, [r4, #0]
    p_tcb->Prio          = prio;                            /* Save the task's priority                               */
 8004122:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
    p_tcb->BasePrio      = prio;                            /* Set the base priority                                  */
 8004126:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    OS_MsgQInit(&p_tcb->MsgQ,                               /* Initialize the task's message queue                    */
 800412a:	9805      	ldr	r0, [sp, #20]
    p_tcb->StkLimitPtr   = p_stk_limit;                     /* Save the stack limit pointer                           */
 800412c:	60a6      	str	r6, [r4, #8]
    p_tcb->StkBasePtr    = p_stk_base;                      /* Save pointer to the base address of the stack          */
 800412e:	6267      	str	r7, [r4, #36]	; 0x24
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
 8004130:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
    p_tcb->Opt           = opt;                             /* Save task options                                      */
 8004134:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
 8004138:	f8c4 8078 	str.w	r8, [r4, #120]	; 0x78
    OS_MsgQInit(&p_tcb->MsgQ,                               /* Initialize the task's message queue                    */
 800413c:	f7ff fb72 	bl	8003824 <OS_MsgQInit>
    OSTaskCreateHook(p_tcb);                                /* Call user defined hook                                 */
 8004140:	4620      	mov	r0, r4
 8004142:	f7fe fca1 	bl	8002a88 <OSTaskCreateHook>
    OS_CRITICAL_ENTER();
 8004146:	f7fc f84b 	bl	80001e0 <CPU_SR_Save>
 800414a:	4605      	mov	r5, r0
    OS_PrioInsert(p_tcb->Prio);
 800414c:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
 8004150:	f7ff fd3c 	bl	8003bcc <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 8004154:	4620      	mov	r0, r4
 8004156:	f7ff fac5 	bl	80036e4 <OS_RdyListInsertTail>
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 800415a:	4917      	ldr	r1, [pc, #92]	; (80041b8 <OSTaskCreate+0x1a0>)
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
 800415c:	f8c4 80b0 	str.w	r8, [r4, #176]	; 0xb0
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 8004160:	680b      	ldr	r3, [r1, #0]
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 8004162:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 8004166:	b10b      	cbz	r3, 800416c <OSTaskCreate+0x154>
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
 8004168:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 800416c:	4a13      	ldr	r2, [pc, #76]	; (80041bc <OSTaskCreate+0x1a4>)
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 800416e:	4814      	ldr	r0, [pc, #80]	; (80041c0 <OSTaskCreate+0x1a8>)
    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 8004170:	8813      	ldrh	r3, [r2, #0]
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 8004172:	7800      	ldrb	r0, [r0, #0]
    OSTaskDbgListPtr                 =  p_tcb;
 8004174:	600c      	str	r4, [r1, #0]
    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 8004176:	3301      	adds	r3, #1
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 8004178:	2801      	cmp	r0, #1
    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 800417a:	8013      	strh	r3, [r2, #0]
        OS_CRITICAL_EXIT();
 800417c:	4628      	mov	r0, r5
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 800417e:	d004      	beq.n	800418a <OSTaskCreate+0x172>
}
 8004180:	b009      	add	sp, #36	; 0x24
 8004182:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        OS_CRITICAL_EXIT();
 8004186:	f7fc b82f 	b.w	80001e8 <CPU_SR_Restore>
    OS_CRITICAL_EXIT_NO_SCHED();
 800418a:	f7fc f82d 	bl	80001e8 <CPU_SR_Restore>
}
 800418e:	b009      	add	sp, #36	; 0x24
 8004190:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    OSSched();
 8004194:	f7fe be08 	b.w	8002da8 <OSSched>
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 8004198:	f1ba 0f00 	cmp.w	sl, #0
 800419c:	d0ab      	beq.n	80040f6 <OSTaskCreate+0xde>
 800419e:	4619      	mov	r1, r3
 80041a0:	ea4f 028a 	mov.w	r2, sl, lsl #2
 80041a4:	4638      	mov	r0, r7
 80041a6:	f003 fb16 	bl	80077d6 <memset>
 80041aa:	e7a4      	b.n	80040f6 <OSTaskCreate+0xde>
 80041ac:	20002ba8 	.word	0x20002ba8
 80041b0:	08008de4 	.word	0x08008de4
 80041b4:	08008dcc 	.word	0x08008dcc
 80041b8:	20002ac4 	.word	0x20002ac4
 80041bc:	20002ade 	.word	0x20002ade
 80041c0:	20002861 	.word	0x20002861

080041c4 <OSTaskSemPend>:
{
 80041c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80041c8:	4682      	mov	sl, r0
 80041ca:	4689      	mov	r9, r1
 80041cc:	461e      	mov	r6, r3
    if (p_ts != (CPU_TS *)0) {
 80041ce:	4617      	mov	r7, r2
 80041d0:	b322      	cbz	r2, 800421c <OSTaskSemPend+0x58>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 80041d2:	2300      	movs	r3, #0
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 80041d4:	f8df 8114 	ldr.w	r8, [pc, #276]	; 80042ec <OSTaskSemPend+0x128>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 80041d8:	6013      	str	r3, [r2, #0]
    CPU_CRITICAL_ENTER();
 80041da:	f7fc f801 	bl	80001e0 <CPU_SR_Save>
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 80041de:	f8d8 3000 	ldr.w	r3, [r8]
 80041e2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    CPU_CRITICAL_ENTER();
 80041e4:	4605      	mov	r5, r0
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 80041e6:	b314      	cbz	r4, 800422e <OSTaskSemPend+0x6a>
        OSTCBCurPtr->SemCtr--;
 80041e8:	3c01      	subs	r4, #1
           *p_ts  = OSTCBCurPtr->TS;
 80041ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        OSTCBCurPtr->SemCtr--;
 80041ec:	64dc      	str	r4, [r3, #76]	; 0x4c
           *p_ts  = OSTCBCurPtr->TS;
 80041ee:	603a      	str	r2, [r7, #0]
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 80041f0:	f7fe fbc2 	bl	8002978 <CPU_TS_TmrRd>
 80041f4:	f8d8 2000 	ldr.w	r2, [r8]
 80041f8:	6c93      	ldr	r3, [r2, #72]	; 0x48
        if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 80041fa:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 80041fe:	1ac0      	subs	r0, r0, r3
        if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8004200:	4288      	cmp	r0, r1
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8004202:	f8c2 00a0 	str.w	r0, [r2, #160]	; 0xa0
            OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 8004206:	bf88      	it	hi
 8004208:	f8c2 00a4 	strhi.w	r0, [r2, #164]	; 0xa4
        CPU_CRITICAL_EXIT();
 800420c:	4628      	mov	r0, r5
 800420e:	f7fb ffeb 	bl	80001e8 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 8004212:	2300      	movs	r3, #0
 8004214:	8033      	strh	r3, [r6, #0]
}
 8004216:	4620      	mov	r0, r4
 8004218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 800421c:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 80042ec <OSTaskSemPend+0x128>
    CPU_CRITICAL_ENTER();
 8004220:	f7fb ffde 	bl	80001e0 <CPU_SR_Save>
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 8004224:	f8d8 3000 	ldr.w	r3, [r8]
 8004228:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    CPU_CRITICAL_ENTER();
 800422a:	4605      	mov	r5, r0
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 800422c:	bb14      	cbnz	r4, 8004274 <OSTaskSemPend+0xb0>
    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 800422e:	f419 4f00 	tst.w	r9, #32768	; 0x8000
 8004232:	d122      	bne.n	800427a <OSTaskSemPend+0xb6>
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8004234:	4b2c      	ldr	r3, [pc, #176]	; (80042e8 <OSTaskSemPend+0x124>)
 8004236:	781c      	ldrb	r4, [r3, #0]
 8004238:	bba4      	cbnz	r4, 80042a4 <OSTaskSemPend+0xe0>
    OS_Pend((OS_PEND_DATA *)0,                              /* Block task pending on Signal                           */
 800423a:	4653      	mov	r3, sl
 800423c:	2207      	movs	r2, #7
 800423e:	4621      	mov	r1, r4
 8004240:	4620      	mov	r0, r4
 8004242:	f7fe ff6d 	bl	8003120 <OS_Pend>
    OS_CRITICAL_EXIT_NO_SCHED();
 8004246:	4628      	mov	r0, r5
 8004248:	f7fb ffce 	bl	80001e8 <CPU_SR_Restore>
    OSSched();                                              /* Find next highest priority task ready to run           */
 800424c:	f7fe fdac 	bl	8002da8 <OSSched>
    CPU_CRITICAL_ENTER();
 8004250:	f7fb ffc6 	bl	80001e0 <CPU_SR_Save>
    switch (OSTCBCurPtr->PendStatus) {                      /* See if we timed-out or aborted                         */
 8004254:	f8d8 3000 	ldr.w	r3, [r8]
 8004258:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 800425c:	2a01      	cmp	r2, #1
    CPU_CRITICAL_ENTER();
 800425e:	4605      	mov	r5, r0
    switch (OSTCBCurPtr->PendStatus) {                      /* See if we timed-out or aborted                         */
 8004260:	d013      	beq.n	800428a <OSTaskSemPend+0xc6>
 8004262:	d32d      	bcc.n	80042c0 <OSTaskSemPend+0xfc>
 8004264:	2a03      	cmp	r2, #3
 8004266:	d127      	bne.n	80042b8 <OSTaskSemPend+0xf4>
             if (p_ts != (CPU_TS *)0) {
 8004268:	b107      	cbz	r7, 800426c <OSTaskSemPend+0xa8>
                *p_ts  = (CPU_TS  )0;
 800426a:	603c      	str	r4, [r7, #0]
            *p_err = OS_ERR_TIMEOUT;                        /* Indicate that we didn't get event within TO            */
 800426c:	f247 22d9 	movw	r2, #29401	; 0x72d9
 8004270:	8032      	strh	r2, [r6, #0]
             break;
 8004272:	e010      	b.n	8004296 <OSTaskSemPend+0xd2>
        OSTCBCurPtr->SemCtr--;
 8004274:	3c01      	subs	r4, #1
 8004276:	64dc      	str	r4, [r3, #76]	; 0x4c
 8004278:	e7ba      	b.n	80041f0 <OSTaskSemPend+0x2c>
        CPU_CRITICAL_EXIT();        
 800427a:	4628      	mov	r0, r5
 800427c:	f7fb ffb4 	bl	80001e8 <CPU_SR_Restore>
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 8004280:	f246 13b0 	movw	r3, #25008	; 0x61b0
 8004284:	8033      	strh	r3, [r6, #0]
        return ((OS_SEM_CTR)0);
 8004286:	2400      	movs	r4, #0
 8004288:	e7c5      	b.n	8004216 <OSTaskSemPend+0x52>
             if (p_ts != (CPU_TS *)0) {
 800428a:	b10f      	cbz	r7, 8004290 <OSTaskSemPend+0xcc>
                *p_ts  =  OSTCBCurPtr->TS;
 800428c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800428e:	603a      	str	r2, [r7, #0]
            *p_err = OS_ERR_PEND_ABORT;                     /* Indicate that we aborted                               */
 8004290:	f246 12a9 	movw	r2, #25001	; 0x61a9
 8004294:	8032      	strh	r2, [r6, #0]
    ctr = OSTCBCurPtr->SemCtr;
 8004296:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    CPU_CRITICAL_EXIT();
 8004298:	4628      	mov	r0, r5
 800429a:	f7fb ffa5 	bl	80001e8 <CPU_SR_Restore>
}
 800429e:	4620      	mov	r0, r4
 80042a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            CPU_CRITICAL_EXIT();
 80042a4:	4628      	mov	r0, r5
 80042a6:	f7fb ff9f 	bl	80001e8 <CPU_SR_Restore>
            return ((OS_SEM_CTR)0);
 80042aa:	2400      	movs	r4, #0
           *p_err = OS_ERR_SCHED_LOCKED;
 80042ac:	f646 5363 	movw	r3, #28003	; 0x6d63
 80042b0:	8033      	strh	r3, [r6, #0]
}
 80042b2:	4620      	mov	r0, r4
 80042b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            *p_err = OS_ERR_STATUS_INVALID;
 80042b8:	f646 622e 	movw	r2, #28206	; 0x6e2e
 80042bc:	8032      	strh	r2, [r6, #0]
             break;
 80042be:	e7ea      	b.n	8004296 <OSTaskSemPend+0xd2>
             if (p_ts != (CPU_TS *)0) {
 80042c0:	b17f      	cbz	r7, 80042e2 <OSTaskSemPend+0x11e>
                *p_ts                    =  OSTCBCurPtr->TS;
 80042c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042c4:	603b      	str	r3, [r7, #0]
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 80042c6:	f7fe fb57 	bl	8002978 <CPU_TS_TmrRd>
 80042ca:	f8d8 3000 	ldr.w	r3, [r8]
 80042ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 80042d0:	f8d3 10a4 	ldr.w	r1, [r3, #164]	; 0xa4
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 80042d4:	1a80      	subs	r0, r0, r2
                if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 80042d6:	4288      	cmp	r0, r1
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 80042d8:	f8c3 00a0 	str.w	r0, [r3, #160]	; 0xa0
                    OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 80042dc:	bf88      	it	hi
 80042de:	f8c3 00a4 	strhi.w	r0, [r3, #164]	; 0xa4
            *p_err = OS_ERR_NONE;
 80042e2:	2200      	movs	r2, #0
 80042e4:	8032      	strh	r2, [r6, #0]
             break;
 80042e6:	e7d6      	b.n	8004296 <OSTaskSemPend+0xd2>
 80042e8:	20002850 	.word	0x20002850
 80042ec:	20002ab4 	.word	0x20002ab4

080042f0 <OSTaskSemPost>:
{
 80042f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042f4:	b082      	sub	sp, #8
 80042f6:	4688      	mov	r8, r1
 80042f8:	4616      	mov	r6, r2
 80042fa:	4604      	mov	r4, r0
    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 80042fc:	f7fe fb3c 	bl	8002978 <CPU_TS_TmrRd>
 8004300:	4681      	mov	r9, r0
    OS_SEM_CTR  ctr;
    CPU_SR_ALLOC();



    OS_CRITICAL_ENTER();
 8004302:	f7fb ff6d 	bl	80001e0 <CPU_SR_Save>
 8004306:	4607      	mov	r7, r0
    if (p_tcb == (OS_TCB *)0) {                             /* Post signal to 'self'?                                 */
 8004308:	b354      	cbz	r4, 8004360 <OSTaskSemPost+0x70>
        p_tcb = OSTCBCurPtr;
    }
    p_tcb->TS = ts;
   *p_err     = OS_ERR_NONE;                                /* Assume we won't have any errors                        */
 800430a:	2500      	movs	r5, #0
    p_tcb->TS = ts;
 800430c:	f8c4 9048 	str.w	r9, [r4, #72]	; 0x48
   *p_err     = OS_ERR_NONE;                                /* Assume we won't have any errors                        */
 8004310:	8035      	strh	r5, [r6, #0]
    switch (p_tcb->TaskState) {
 8004312:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8004316:	2b07      	cmp	r3, #7
 8004318:	d807      	bhi.n	800432a <OSTaskSemPost+0x3a>
 800431a:	2201      	movs	r2, #1
 800431c:	409a      	lsls	r2, r3
 800431e:	f012 0acc 	ands.w	sl, r2, #204	; 0xcc
 8004322:	d10d      	bne.n	8004340 <OSTaskSemPost+0x50>
 8004324:	f012 0f33 	tst.w	r2, #51	; 0x33
 8004328:	d11d      	bne.n	8004366 <OSTaskSemPost+0x76>
                 OS_CRITICAL_EXIT();
             }
             break;

        default:
             OS_CRITICAL_EXIT();
 800432a:	4638      	mov	r0, r7
 800432c:	f7fb ff5c 	bl	80001e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 8004330:	f646 632d 	movw	r3, #28205	; 0x6e2d
 8004334:	8033      	strh	r3, [r6, #0]
             ctr   = (OS_SEM_CTR)0;
 8004336:	2500      	movs	r5, #0
}
 8004338:	4628      	mov	r0, r5
 800433a:	b002      	add	sp, #8
 800433c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
             if (p_tcb->PendOn == OS_TASK_PEND_ON_TASK_SEM) {   /* Is task signaled waiting for a signal?             */
 8004340:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8004344:	2b07      	cmp	r3, #7
 8004346:	d017      	beq.n	8004378 <OSTaskSemPost+0x88>
                          if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 8004348:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	d026      	beq.n	800439c <OSTaskSemPost+0xac>
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
 800434e:	1c5d      	adds	r5, r3, #1
                 OS_CRITICAL_EXIT();
 8004350:	4638      	mov	r0, r7
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
 8004352:	64e5      	str	r5, [r4, #76]	; 0x4c
                 OS_CRITICAL_EXIT();
 8004354:	f7fb ff48 	bl	80001e8 <CPU_SR_Restore>
}
 8004358:	4628      	mov	r0, r5
 800435a:	b002      	add	sp, #8
 800435c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_tcb = OSTCBCurPtr;
 8004360:	4b16      	ldr	r3, [pc, #88]	; (80043bc <OSTaskSemPost+0xcc>)
 8004362:	681c      	ldr	r4, [r3, #0]
 8004364:	e7d1      	b.n	800430a <OSTaskSemPost+0x1a>
                      if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 8004366:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8004368:	1c69      	adds	r1, r5, #1
 800436a:	d01e      	beq.n	80043aa <OSTaskSemPost+0xba>
             p_tcb->SemCtr++;                               /* Task signaled is not pending on anything               */
 800436c:	3501      	adds	r5, #1
 800436e:	64e5      	str	r5, [r4, #76]	; 0x4c
             OS_CRITICAL_EXIT();
 8004370:	4638      	mov	r0, r7
 8004372:	f7fb ff39 	bl	80001e8 <CPU_SR_Restore>
 8004376:	e7df      	b.n	8004338 <OSTaskSemPost+0x48>
                 OS_Post((OS_PEND_OBJ *)0,                      /*      Task is pending on signal                     */
 8004378:	462b      	mov	r3, r5
 800437a:	462a      	mov	r2, r5
 800437c:	4628      	mov	r0, r5
 800437e:	4621      	mov	r1, r4
 8004380:	f8cd 9000 	str.w	r9, [sp]
 8004384:	f7ff f802 	bl	800338c <OS_Post>
                 OS_CRITICAL_EXIT_NO_SCHED();
 8004388:	4638      	mov	r0, r7
                 ctr = p_tcb->SemCtr;
 800438a:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
                 OS_CRITICAL_EXIT_NO_SCHED();
 800438c:	f7fb ff2c 	bl	80001e8 <CPU_SR_Restore>
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 8004390:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8004394:	d1d0      	bne.n	8004338 <OSTaskSemPost+0x48>
                     OSSched();                                 /* Run the scheduler                                  */
 8004396:	f7fe fd07 	bl	8002da8 <OSSched>
 800439a:	e7cd      	b.n	8004338 <OSTaskSemPost+0x48>
                              OS_CRITICAL_EXIT();
 800439c:	4638      	mov	r0, r7
 800439e:	f7fb ff23 	bl	80001e8 <CPU_SR_Restore>
                             *p_err = OS_ERR_SEM_OVF;
 80043a2:	f646 53c5 	movw	r3, #28101	; 0x6dc5
 80043a6:	8033      	strh	r3, [r6, #0]
 80043a8:	e7c6      	b.n	8004338 <OSTaskSemPost+0x48>
                          OS_CRITICAL_EXIT();
 80043aa:	4638      	mov	r0, r7
 80043ac:	f7fb ff1c 	bl	80001e8 <CPU_SR_Restore>
                         *p_err = OS_ERR_SEM_OVF;
 80043b0:	f646 53c5 	movw	r3, #28101	; 0x6dc5
                          return ((OS_SEM_CTR)0);
 80043b4:	4655      	mov	r5, sl
                         *p_err = OS_ERR_SEM_OVF;
 80043b6:	8033      	strh	r3, [r6, #0]
 80043b8:	e7be      	b.n	8004338 <OSTaskSemPost+0x48>
 80043ba:	bf00      	nop
 80043bc:	20002ab4 	.word	0x20002ab4

080043c0 <OSTaskStkChk>:
{
 80043c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043c4:	4604      	mov	r4, r0
 80043c6:	b082      	sub	sp, #8
 80043c8:	460f      	mov	r7, r1
 80043ca:	4616      	mov	r6, r2
 80043cc:	461d      	mov	r5, r3
    CPU_CRITICAL_ENTER();
 80043ce:	f7fb ff07 	bl	80001e0 <CPU_SR_Save>
    if (p_tcb == (OS_TCB *)0) {                             /* Check the stack of the current task?                   */
 80043d2:	b32c      	cbz	r4, 8004420 <OSTaskStkChk+0x60>
    if (p_tcb->StkPtr == (CPU_STK*)0) {                     /* Make sure task exist                                   */
 80043d4:	6823      	ldr	r3, [r4, #0]
 80043d6:	b343      	cbz	r3, 800442a <OSTaskStkChk+0x6a>
    if ((p_tcb->Opt & OS_OPT_TASK_STK_CHK) == (OS_OPT)0) {  /* Make sure stack checking option is set                 */
 80043d8:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
 80043dc:	f013 0801 	ands.w	r8, r3, #1
 80043e0:	d012      	beq.n	8004408 <OSTaskStkChk+0x48>
    CPU_CRITICAL_EXIT();
 80043e2:	f7fb ff01 	bl	80001e8 <CPU_SR_Restore>
    p_stk = p_tcb->StkBasePtr;                              /* Start at the lowest memory and go up                   */
 80043e6:	6a62      	ldr	r2, [r4, #36]	; 0x24
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 80043e8:	6813      	ldr	r3, [r2, #0]
 80043ea:	bb53      	cbnz	r3, 8004442 <OSTaskStkChk+0x82>
 80043ec:	f852 1f04 	ldr.w	r1, [r2, #4]!
        free_stk++;
 80043f0:	3301      	adds	r3, #1
    while (*p_stk == (CPU_STK)0) {                          /* Compute the number of zero entries on the stk          */
 80043f2:	2900      	cmp	r1, #0
 80043f4:	d0fa      	beq.n	80043ec <OSTaskStkChk+0x2c>
   *p_free = free_stk;
 80043f6:	603b      	str	r3, [r7, #0]
   *p_used = (p_tcb->StkSize - free_stk);                   /* Compute number of entries used on the stack            */
 80043f8:	6c22      	ldr	r2, [r4, #64]	; 0x40
   *p_err  = OS_ERR_NONE;
 80043fa:	2100      	movs	r1, #0
   *p_used = (p_tcb->StkSize - free_stk);                   /* Compute number of entries used on the stack            */
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	6033      	str	r3, [r6, #0]
   *p_err  = OS_ERR_NONE;
 8004400:	8029      	strh	r1, [r5, #0]
}
 8004402:	b002      	add	sp, #8
 8004404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        CPU_CRITICAL_EXIT();
 8004408:	f7fb feee 	bl	80001e8 <CPU_SR_Restore>
       *p_err  =  OS_ERR_TASK_OPT;
 800440c:	f247 1354 	movw	r3, #29012	; 0x7154
       *p_free = (CPU_STK_SIZE)0;
 8004410:	f8c7 8000 	str.w	r8, [r7]
       *p_used = (CPU_STK_SIZE)0;
 8004414:	f8c6 8000 	str.w	r8, [r6]
       *p_err  =  OS_ERR_TASK_OPT;
 8004418:	802b      	strh	r3, [r5, #0]
}
 800441a:	b002      	add	sp, #8
 800441c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        p_tcb = OSTCBCurPtr;                                /* Yes                                                    */
 8004420:	4b09      	ldr	r3, [pc, #36]	; (8004448 <OSTaskStkChk+0x88>)
 8004422:	681c      	ldr	r4, [r3, #0]
    if (p_tcb->StkPtr == (CPU_STK*)0) {                     /* Make sure task exist                                   */
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1d6      	bne.n	80043d8 <OSTaskStkChk+0x18>
 800442a:	9301      	str	r3, [sp, #4]
        CPU_CRITICAL_EXIT();
 800442c:	f7fb fedc 	bl	80001e8 <CPU_SR_Restore>
       *p_free = (CPU_STK_SIZE)0;
 8004430:	9b01      	ldr	r3, [sp, #4]
 8004432:	603b      	str	r3, [r7, #0]
       *p_err  =  OS_ERR_TASK_NOT_EXIST;
 8004434:	f247 1252 	movw	r2, #29010	; 0x7152
       *p_used = (CPU_STK_SIZE)0;
 8004438:	6033      	str	r3, [r6, #0]
       *p_err  =  OS_ERR_TASK_NOT_EXIST;
 800443a:	802a      	strh	r2, [r5, #0]
}
 800443c:	b002      	add	sp, #8
 800443e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    free_stk  = 0u;
 8004442:	2300      	movs	r3, #0
 8004444:	e7d7      	b.n	80043f6 <OSTaskStkChk+0x36>
 8004446:	bf00      	nop
 8004448:	20002ab4 	.word	0x20002ab4

0800444c <OS_TaskInit>:
{
 800444c:	b410      	push	{r4}
    OSTaskQty        = (OS_OBJ_QTY   )0;                    /* Clear the number of tasks                              */
 800444e:	4905      	ldr	r1, [pc, #20]	; (8004464 <OS_TaskInit+0x18>)
    OSTaskDbgListPtr = (OS_TCB      *)0;
 8004450:	4c05      	ldr	r4, [pc, #20]	; (8004468 <OS_TaskInit+0x1c>)
    OSTaskCtxSwCtr   = (OS_CTX_SW_CTR)0;                    /* Clear the context switch counter                       */
 8004452:	4a06      	ldr	r2, [pc, #24]	; (800446c <OS_TaskInit+0x20>)
    OSTaskDbgListPtr = (OS_TCB      *)0;
 8004454:	2300      	movs	r3, #0
 8004456:	6023      	str	r3, [r4, #0]
    OSTaskQty        = (OS_OBJ_QTY   )0;                    /* Clear the number of tasks                              */
 8004458:	800b      	strh	r3, [r1, #0]
    OSTaskCtxSwCtr   = (OS_CTX_SW_CTR)0;                    /* Clear the context switch counter                       */
 800445a:	6013      	str	r3, [r2, #0]
}
 800445c:	f85d 4b04 	ldr.w	r4, [sp], #4
   *p_err            = OS_ERR_NONE;
 8004460:	8003      	strh	r3, [r0, #0]
}
 8004462:	4770      	bx	lr
 8004464:	20002ade 	.word	0x20002ade
 8004468:	20002ac4 	.word	0x20002ac4
 800446c:	20002ad8 	.word	0x20002ad8

08004470 <OS_TaskReturn>:
{
 8004470:	b500      	push	{lr}
    OSTaskReturnHook(OSTCBCurPtr);                          /* Call hook to let user decide on what to do             */
 8004472:	4b07      	ldr	r3, [pc, #28]	; (8004490 <OS_TaskReturn+0x20>)
{
 8004474:	b083      	sub	sp, #12
    OSTaskReturnHook(OSTCBCurPtr);                          /* Call hook to let user decide on what to do             */
 8004476:	6818      	ldr	r0, [r3, #0]
 8004478:	f7fe fb0e 	bl	8002a98 <OSTaskReturnHook>
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <OS_TaskReturn+0x24>)
 800447e:	681c      	ldr	r4, [r3, #0]
        OSTimeDly((OS_TICK )OSCfg_TickRate_Hz,
 8004480:	f10d 0206 	add.w	r2, sp, #6
 8004484:	2100      	movs	r1, #0
 8004486:	4620      	mov	r0, r4
 8004488:	f000 fabe 	bl	8004a08 <OSTimeDly>
 800448c:	e7f8      	b.n	8004480 <OS_TaskReturn+0x10>
 800448e:	bf00      	nop
 8004490:	20002ab4 	.word	0x20002ab4
 8004494:	08008d7c 	.word	0x08008d7c

08004498 <OS_TaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	4604      	mov	r4, r0
 800449c:	460d      	mov	r5, r1
    CPU_SR_ALLOC();


    CPU_CRITICAL_ENTER();
 800449e:	f7fb fe9f 	bl	80001e0 <CPU_SR_Save>
    if (p_tcb == (OS_TCB *)0) {                             /* See if specified to suspend self                       */
        p_tcb = OSTCBCurPtr;
 80044a2:	4b29      	ldr	r3, [pc, #164]	; (8004548 <OS_TaskSuspend+0xb0>)
    CPU_CRITICAL_ENTER();
 80044a4:	4606      	mov	r6, r0
    if (p_tcb == (OS_TCB *)0) {                             /* See if specified to suspend self                       */
 80044a6:	b174      	cbz	r4, 80044c6 <OS_TaskSuspend+0x2e>
    }

    if (p_tcb == OSTCBCurPtr) {
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	42a3      	cmp	r3, r4
 80044ac:	d00c      	beq.n	80044c8 <OS_TaskSuspend+0x30>
           *p_err = OS_ERR_SCHED_LOCKED;
            return;
        }
    }

   *p_err = OS_ERR_NONE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	802b      	strh	r3, [r5, #0]
    switch (p_tcb->TaskState) {
 80044b2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80044b6:	2b07      	cmp	r3, #7
 80044b8:	d83e      	bhi.n	8004538 <OS_TaskSuspend+0xa0>
 80044ba:	e8df f003 	tbb	[pc, r3]
 80044be:	2c1c      	.short	0x2c1c
 80044c0:	10103b39 	.word	0x10103b39
 80044c4:	1010      	.short	0x1010
        p_tcb = OSTCBCurPtr;
 80044c6:	681c      	ldr	r4, [r3, #0]
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't suspend when the scheduler is locked             */
 80044c8:	4b20      	ldr	r3, [pc, #128]	; (800454c <OS_TaskSuspend+0xb4>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ee      	beq.n	80044ae <OS_TaskSuspend+0x16>
            CPU_CRITICAL_EXIT();
 80044d0:	4630      	mov	r0, r6
 80044d2:	f7fb fe89 	bl	80001e8 <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 80044d6:	f646 5363 	movw	r3, #28003	; 0x6d63
 80044da:	802b      	strh	r3, [r5, #0]
            *p_err = OS_ERR_STATE_INVALID;
             return;
    }

    OSSched();
}
 80044dc:	bd70      	pop	{r4, r5, r6, pc}
             p_tcb->SuspendCtr++;
 80044de:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
 80044e2:	3301      	adds	r3, #1
             CPU_CRITICAL_EXIT();
 80044e4:	4630      	mov	r0, r6
             p_tcb->SuspendCtr++;
 80044e6:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 80044ea:	f7fb fe7d 	bl	80001e8 <CPU_SR_Restore>
}
 80044ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    OSSched();
 80044f2:	f7fe bc59 	b.w	8002da8 <OSSched>
             p_tcb->TaskState  =  OS_TASK_STATE_SUSPENDED;
 80044f6:	2204      	movs	r2, #4
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80044f8:	2301      	movs	r3, #1
             p_tcb->TaskState  =  OS_TASK_STATE_SUSPENDED;
 80044fa:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80044fe:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
             OS_RdyListRemove(p_tcb);
 8004502:	4620      	mov	r0, r4
 8004504:	f7ff f90c 	bl	8003720 <OS_RdyListRemove>
             OS_CRITICAL_EXIT_NO_SCHED();
 8004508:	4630      	mov	r0, r6
 800450a:	f7fb fe6d 	bl	80001e8 <CPU_SR_Restore>
}
 800450e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    OSSched();
 8004512:	f7fe bc49 	b.w	8002da8 <OSSched>
             p_tcb->TaskState  = OS_TASK_STATE_DLY_SUSPENDED;
 8004516:	2205      	movs	r2, #5
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8004518:	2301      	movs	r3, #1
             CPU_CRITICAL_EXIT();
 800451a:	4630      	mov	r0, r6
             p_tcb->TaskState  = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED;
 800451c:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8004520:	f884 3086 	strb.w	r3, [r4, #134]	; 0x86
             CPU_CRITICAL_EXIT();
 8004524:	f7fb fe60 	bl	80001e8 <CPU_SR_Restore>
}
 8004528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    OSSched();
 800452c:	f7fe bc3c 	b.w	8002da8 <OSSched>
             p_tcb->TaskState  = OS_TASK_STATE_PEND_SUSPENDED;
 8004530:	2206      	movs	r2, #6
 8004532:	e7f1      	b.n	8004518 <OS_TaskSuspend+0x80>
             p_tcb->TaskState  = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED;
 8004534:	2207      	movs	r2, #7
 8004536:	e7ef      	b.n	8004518 <OS_TaskSuspend+0x80>
             CPU_CRITICAL_EXIT();
 8004538:	4630      	mov	r0, r6
 800453a:	f7fb fe55 	bl	80001e8 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 800453e:	f646 632d 	movw	r3, #28205	; 0x6e2d
 8004542:	802b      	strh	r3, [r5, #0]
}
 8004544:	bd70      	pop	{r4, r5, r6, pc}
 8004546:	bf00      	nop
 8004548:	20002ab4 	.word	0x20002ab4
 800454c:	20002850 	.word	0x20002850

08004550 <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	f890 6037 	ldrb.w	r6, [r0, #55]	; 0x37
 8004556:	4604      	mov	r4, r0
 8004558:	460d      	mov	r5, r1
 800455a:	2701      	movs	r7, #1
    do {
        p_tcb_owner = (OS_TCB *)0;
#if OS_CFG_MUTEX_EN > 0
        prio_cur    = p_tcb->Prio;
#endif
        switch (p_tcb->TaskState) {
 800455c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8004560:	2b07      	cmp	r3, #7
                          OS_PendListChangePrio(p_tcb);
                          break;

                     case OS_TASK_PEND_ON_MUTEX:
#if OS_CFG_MUTEX_EN > 0
                          OS_PendListChangePrio(p_tcb);
 8004562:	4620      	mov	r0, r4
 8004564:	fa07 f203 	lsl.w	r2, r7, r3
 8004568:	d81a      	bhi.n	80045a0 <OS_TaskChangePrio+0x50>
 800456a:	f012 0fcc 	tst.w	r2, #204	; 0xcc
 800456e:	d02c      	beq.n	80045ca <OS_TaskChangePrio+0x7a>
                 switch (p_tcb->PendOn) {                   /* What to do depends on what we are pending on           */
 8004570:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 8004574:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
 8004578:	2b06      	cmp	r3, #6
 800457a:	fa07 f203 	lsl.w	r2, r7, r3
 800457e:	d80f      	bhi.n	80045a0 <OS_TaskChangePrio+0x50>
 8004580:	f012 0f6a 	tst.w	r2, #106	; 0x6a
 8004584:	d136      	bne.n	80045f4 <OS_TaskChangePrio+0xa4>
 8004586:	06d3      	lsls	r3, r2, #27
 8004588:	d50a      	bpl.n	80045a0 <OS_TaskChangePrio+0x50>
                          OS_PendListChangePrio(p_tcb);
 800458a:	f7fe fe81 	bl	8003290 <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 800458e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004590:	68db      	ldr	r3, [r3, #12]
                          if (prio_cur > prio_new) {         /* Are we increasing the priority?                        */
 8004592:	42b5      	cmp	r5, r6
                          p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 8004594:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                          if (prio_cur > prio_new) {         /* Are we increasing the priority?                        */
 8004596:	d204      	bcs.n	80045a2 <OS_TaskChangePrio+0x52>
                              if (p_tcb_owner->Prio <= prio_new) {/* Yes, do we need to give this prio to the owner?   */
 8004598:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 800459c:	42ae      	cmp	r6, r5
 800459e:	d8dd      	bhi.n	800455c <OS_TaskChangePrio+0xc>
            default:
                 return;
        }
        p_tcb = p_tcb_owner;
    } while (p_tcb != (OS_TCB *)0);
}
 80045a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                              if (p_tcb_owner->Prio == prio_cur) {/* No, is it required to check for a lower prio?     */
 80045a2:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 80045a6:	42b3      	cmp	r3, r6
 80045a8:	d001      	beq.n	80045ae <OS_TaskChangePrio+0x5e>
 80045aa:	461e      	mov	r6, r3
 80045ac:	e7d6      	b.n	800455c <OS_TaskChangePrio+0xc>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 80045ae:	4620      	mov	r0, r4
 80045b0:	f7ff fade 	bl	8003b70 <OS_MutexGrpPrioFindHighest>
                                  prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 80045b4:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
                                  if (prio_new == p_tcb_owner->Prio) {
 80045b8:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
                                  prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 80045bc:	4285      	cmp	r5, r0
 80045be:	bf28      	it	cs
 80045c0:	4605      	movcs	r5, r0
 80045c2:	b2ed      	uxtb	r5, r5
                                  if (prio_new == p_tcb_owner->Prio) {
 80045c4:	42ae      	cmp	r6, r5
 80045c6:	d1c9      	bne.n	800455c <OS_TaskChangePrio+0xc>
}
 80045c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045ca:	f012 0f32 	tst.w	r2, #50	; 0x32
 80045ce:	d115      	bne.n	80045fc <OS_TaskChangePrio+0xac>
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e5      	bne.n	80045a0 <OS_TaskChangePrio+0x50>
                 OS_RdyListRemove(p_tcb);                   /* Remove from current priority                           */
 80045d4:	f7ff f8a4 	bl	8003720 <OS_RdyListRemove>
                 OS_PrioInsert(p_tcb->Prio);
 80045d8:	4628      	mov	r0, r5
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 80045da:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
                 OS_PrioInsert(p_tcb->Prio);
 80045de:	f7ff faf5 	bl	8003bcc <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 80045e2:	4b0a      	ldr	r3, [pc, #40]	; (800460c <OS_TaskChangePrio+0xbc>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	42a3      	cmp	r3, r4
                     OS_RdyListInsertHead(p_tcb);
 80045e8:	4620      	mov	r0, r4
                 if (p_tcb == OSTCBCurPtr) {
 80045ea:	d00a      	beq.n	8004602 <OS_TaskChangePrio+0xb2>
}
 80045ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                     OS_RdyListInsertTail(p_tcb);
 80045f0:	f7ff b878 	b.w	80036e4 <OS_RdyListInsertTail>
}
 80045f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                          OS_PendListChangePrio(p_tcb);
 80045f8:	f7fe be4a 	b.w	8003290 <OS_PendListChangePrio>
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 80045fc:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
}
 8004600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004602:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                     OS_RdyListInsertHead(p_tcb);
 8004606:	f7ff b84f 	b.w	80036a8 <OS_RdyListInsertHead>
 800460a:	bf00      	nop
 800460c:	20002ab4 	.word	0x20002ab4

08004610 <OS_TickTask>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTask (void  *p_arg)
{
 8004610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004614:	4e69      	ldr	r6, [pc, #420]	; (80047bc <OS_TickTask+0x1ac>)
 8004616:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 80047c8 <OS_TickTask+0x1b8>
 800461a:	b087      	sub	sp, #28


    (void)&p_arg;                                               /* Prevent compiler warning                             */

    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK  )0,
 800461c:	f04f 0800 	mov.w	r8, #0
 8004620:	2200      	movs	r2, #0
 8004622:	f10d 0316 	add.w	r3, sp, #22
 8004626:	4611      	mov	r1, r2
 8004628:	4610      	mov	r0, r2
 800462a:	f7ff fdcb 	bl	80041c4 <OSTaskSemPend>
                            (OS_OPT   )OS_OPT_PEND_BLOCKING,
                            (CPU_TS  *)0,
                            (OS_ERR  *)&err);                   /* Wait for signal from tick interrupt                  */
        if (err == OS_ERR_NONE) {
 800462e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d1f4      	bne.n	8004620 <OS_TickTask+0x10>
            OS_CRITICAL_ENTER();
 8004636:	f7fb fdd3 	bl	80001e0 <CPU_SR_Save>
            OSTickCtr++;                                        /* Keep track of the number of ticks                    */
 800463a:	4a61      	ldr	r2, [pc, #388]	; (80047c0 <OS_TickTask+0x1b0>)
 800463c:	6813      	ldr	r3, [r2, #0]
 800463e:	3301      	adds	r3, #1
 8004640:	6013      	str	r3, [r2, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TICK_INCREMENT(OSTickCtr);                 /* Record the event.                                    */
#endif
            OS_CRITICAL_EXIT();
 8004642:	f7fb fdd1 	bl	80001e8 <CPU_SR_Restore>
#endif
    CPU_SR_ALLOC();

                                                              
                                                                        
    OS_CRITICAL_ENTER();
 8004646:	f7fb fdcb 	bl	80001e0 <CPU_SR_Save>
 800464a:	4607      	mov	r7, r0
    ts_start    = OS_TS_GET();
 800464c:	f7fe f994 	bl	8002978 <CPU_TS_TmrRd>
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
#endif
    p_list      = &OSTickListDly;
    p_tcb       = p_list->TCB_Ptr;                                      
 8004650:	6834      	ldr	r4, [r6, #0]
    ts_start    = OS_TS_GET();
 8004652:	4682      	mov	sl, r0
    if (p_tcb != (OS_TCB *)0) {
 8004654:	2c00      	cmp	r4, #0
 8004656:	f000 80ae 	beq.w	80047b6 <OS_TickTask+0x1a6>
        p_tcb->TickRemain--;
 800465a:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800465c:	3d01      	subs	r5, #1
 800465e:	6525      	str	r5, [r4, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 8004660:	b17d      	cbz	r5, 8004682 <OS_TickTask+0x72>
 8004662:	e0a8      	b.n	80047b6 <OS_TickTask+0x1a6>
            nbr_updated++;											    /* Keep track of the number of TCBs updated          */
#endif
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
                p_tcb->TaskState = OS_TASK_STATE_RDY;
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
            } else if (p_tcb->TaskState == OS_TASK_STATE_DLY_SUSPENDED) {
 8004664:	2b05      	cmp	r3, #5
                p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 8004666:	bf04      	itt	eq
 8004668:	2304      	moveq	r3, #4
 800466a:	f884 3036 	strbeq.w	r3, [r4, #54]	; 0x36
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 800466e:	6964      	ldr	r4, [r4, #20]
 8004670:	6034      	str	r4, [r6, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
            if (p_tcb == (OS_TCB *)0) {
 8004672:	b1ac      	cbz	r4, 80046a0 <OS_TickTask+0x90>
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
#endif
                break;
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 8004674:	88b3      	ldrh	r3, [r6, #4]
        while (p_tcb->TickRemain == 0u) {
 8004676:	6d22      	ldr	r2, [r4, #80]	; 0x50
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8004678:	f8c4 8018 	str.w	r8, [r4, #24]
                p_list->NbrEntries--;
 800467c:	3b01      	subs	r3, #1
 800467e:	80b3      	strh	r3, [r6, #4]
        while (p_tcb->TickRemain == 0u) {
 8004680:	b97a      	cbnz	r2, 80046a2 <OS_TickTask+0x92>
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
 8004682:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
            nbr_updated++;											    /* Keep track of the number of TCBs updated          */
 8004686:	3501      	adds	r5, #1
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
 8004688:	2b01      	cmp	r3, #1
            nbr_updated++;											    /* Keep track of the number of TCBs updated          */
 800468a:	b2ad      	uxth	r5, r5
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
 800468c:	d1ea      	bne.n	8004664 <OS_TickTask+0x54>
                p_tcb->TaskState = OS_TASK_STATE_RDY;
 800468e:	f884 8036 	strb.w	r8, [r4, #54]	; 0x36
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 8004692:	4620      	mov	r0, r4
 8004694:	f7fe ffca 	bl	800362c <OS_RdyListInsert>
            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8004698:	6964      	ldr	r4, [r4, #20]
 800469a:	6034      	str	r4, [r6, #0]
            if (p_tcb == (OS_TCB *)0) {
 800469c:	2c00      	cmp	r4, #0
 800469e:	d1e9      	bne.n	8004674 <OS_TickTask+0x64>
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 80046a0:	80b4      	strh	r4, [r6, #4]
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 80046a2:	80f5      	strh	r5, [r6, #6]
#endif
    ts_delta_dly       = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 80046a4:	f7fe f968 	bl	8002978 <CPU_TS_TmrRd>
 80046a8:	9003      	str	r0, [sp, #12]
    OS_CRITICAL_EXIT();
 80046aa:	4638      	mov	r0, r7
 80046ac:	f7fb fd9c 	bl	80001e8 <CPU_SR_Restore>
#endif
    CPU_SR_ALLOC();

                                                              
                                                                        
    OS_CRITICAL_ENTER();                                                /* ======= UPDATE TASKS WAITING WITH TIMEOUT ======= */
 80046b0:	f7fb fd96 	bl	80001e0 <CPU_SR_Save>
 80046b4:	9001      	str	r0, [sp, #4]
    ts_start    = OS_TS_GET();
 80046b6:	f7fe f95f 	bl	8002978 <CPU_TS_TmrRd>
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
#endif
    p_list      = &OSTickListTimeout;
    p_tcb       = p_list->TCB_Ptr;                                  
 80046ba:	f8db 5000 	ldr.w	r5, [fp]
    ts_start    = OS_TS_GET();
 80046be:	9002      	str	r0, [sp, #8]
    if (p_tcb != (OS_TCB *)0) {
 80046c0:	2d00      	cmp	r5, #0
 80046c2:	d049      	beq.n	8004758 <OS_TickTask+0x148>
        p_tcb->TickRemain--;
 80046c4:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 80046c6:	3c01      	subs	r4, #1
 80046c8:	652c      	str	r4, [r5, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 80046ca:	2c00      	cmp	r4, #0
 80046cc:	d144      	bne.n	8004758 <OS_TickTask+0x148>
            } else if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {

                p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
            }
            p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;                 /* Indicate pend timed out                           */
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */
 80046ce:	f44f 7740 	mov.w	r7, #768	; 0x300
 80046d2:	e020      	b.n	8004716 <OS_TickTask+0x106>
            } else if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 80046d4:	2b07      	cmp	r3, #7
                p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 80046d6:	bf04      	itt	eq
 80046d8:	2304      	moveq	r3, #4
 80046da:	f885 3036 	strbeq.w	r3, [r5, #54]	; 0x36
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */
 80046de:	86af      	strh	r7, [r5, #52]	; 0x34

#if OS_CFG_MUTEX_EN > 0u
            if(p_tcb_owner != (OS_TCB *)0) {
 80046e0:	f1b9 0f00 	cmp.w	r9, #0
 80046e4:	d009      	beq.n	80046fa <OS_TickTask+0xea>
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 80046e6:	f899 3037 	ldrb.w	r3, [r9, #55]	; 0x37
 80046ea:	f899 2038 	ldrb.w	r2, [r9, #56]	; 0x38
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d003      	beq.n	80046fa <OS_TickTask+0xea>
 80046f2:	f895 2037 	ldrb.w	r2, [r5, #55]	; 0x37
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d045      	beq.n	8004786 <OS_TickTask+0x176>
                    }
                }
            }
#endif

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 80046fa:	696d      	ldr	r5, [r5, #20]
 80046fc:	f8cb 5000 	str.w	r5, [fp]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
            if (p_tcb == (OS_TCB *)0) {
 8004700:	2d00      	cmp	r5, #0
 8004702:	d055      	beq.n	80047b0 <OS_TickTask+0x1a0>
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
#endif
                break;
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 8004704:	f8bb 3004 	ldrh.w	r3, [fp, #4]
        while (p_tcb->TickRemain == 0u) {
 8004708:	6d2a      	ldr	r2, [r5, #80]	; 0x50
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 800470a:	f8c5 8018 	str.w	r8, [r5, #24]
                p_list->NbrEntries--;
 800470e:	3b01      	subs	r3, #1
 8004710:	f8ab 3004 	strh.w	r3, [fp, #4]
        while (p_tcb->TickRemain == 0u) {
 8004714:	bb0a      	cbnz	r2, 800475a <OS_TickTask+0x14a>
            if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 8004716:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800471a:	2b04      	cmp	r3, #4
                p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 800471c:	bf02      	ittt	eq
 800471e:	6b2b      	ldreq	r3, [r5, #48]	; 0x30
 8004720:	68db      	ldreq	r3, [r3, #12]
 8004722:	f8d3 9024 	ldreq.w	r9, [r3, #36]	; 0x24
            p_tcb->MsgPtr  = (void      *)0;
 8004726:	f8c5 8058 	str.w	r8, [r5, #88]	; 0x58
            p_tcb->MsgSize = (OS_MSG_SIZE)0u;
 800472a:	f8a5 805c 	strh.w	r8, [r5, #92]	; 0x5c
            p_tcb_owner = (OS_TCB *)0;
 800472e:	bf18      	it	ne
 8004730:	f04f 0900 	movne.w	r9, #0
            p_tcb->TS      = OS_TS_GET();
 8004734:	f7fe f920 	bl	8002978 <CPU_TS_TmrRd>
 8004738:	64a8      	str	r0, [r5, #72]	; 0x48
            OS_PendListRemove(p_tcb);                                   /* Remove from wait list                             */
 800473a:	4628      	mov	r0, r5
 800473c:	f7fe fdf8 	bl	8003330 <OS_PendListRemove>
            if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8004740:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
            nbr_updated++;
 8004744:	3401      	adds	r4, #1
            if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8004746:	2b03      	cmp	r3, #3
            nbr_updated++;
 8004748:	b2a4      	uxth	r4, r4
            if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 800474a:	d1c3      	bne.n	80046d4 <OS_TickTask+0xc4>
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 800474c:	4628      	mov	r0, r5
 800474e:	f7fe ff6d 	bl	800362c <OS_RdyListInsert>
                p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8004752:	f885 8036 	strb.w	r8, [r5, #54]	; 0x36
 8004756:	e7c2      	b.n	80046de <OS_TickTask+0xce>
    nbr_updated = (OS_OBJ_QTY)0u;
 8004758:	2400      	movs	r4, #0
 800475a:	9b03      	ldr	r3, [sp, #12]
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 800475c:	f8ab 4006 	strh.w	r4, [fp, #6]
 8004760:	eba3 050a 	sub.w	r5, r3, sl
#endif
    ts_delta_timeout   = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 8004764:	f7fe f908 	bl	8002978 <CPU_TS_TmrRd>
 8004768:	4604      	mov	r4, r0
    OS_CRITICAL_EXIT();                                                 /* ------------------------------------------------- */
 800476a:	9801      	ldr	r0, [sp, #4]
 800476c:	f7fb fd3c 	bl	80001e8 <CPU_SR_Restore>
            ts_delta         = ts_delta_dly + ts_delta_timeout; /* Compute total execution time of list updates         */
 8004770:	9b02      	ldr	r3, [sp, #8]
 8004772:	1aed      	subs	r5, r5, r3
            if (OSTickTaskTimeMax < ts_delta) {
 8004774:	4b13      	ldr	r3, [pc, #76]	; (80047c4 <OS_TickTask+0x1b4>)
 8004776:	681b      	ldr	r3, [r3, #0]
            ts_delta         = ts_delta_dly + ts_delta_timeout; /* Compute total execution time of list updates         */
 8004778:	442c      	add	r4, r5
            if (OSTickTaskTimeMax < ts_delta) {
 800477a:	42a3      	cmp	r3, r4
 800477c:	f4bf af50 	bcs.w	8004620 <OS_TickTask+0x10>
                OSTickTaskTimeMax = ts_delta;
 8004780:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <OS_TickTask+0x1b4>)
 8004782:	601c      	str	r4, [r3, #0]
 8004784:	e74a      	b.n	800461c <OS_TickTask+0xc>
                    prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8004786:	4648      	mov	r0, r9
 8004788:	f7ff f9f2 	bl	8003b70 <OS_MutexGrpPrioFindHighest>
                    prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 800478c:	f899 1038 	ldrb.w	r1, [r9, #56]	; 0x38
                    if(prio_new != p_tcb_owner->Prio) {
 8004790:	f899 3037 	ldrb.w	r3, [r9, #55]	; 0x37
                    prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 8004794:	4281      	cmp	r1, r0
 8004796:	bf28      	it	cs
 8004798:	4601      	movcs	r1, r0
 800479a:	b2c9      	uxtb	r1, r1
                    if(prio_new != p_tcb_owner->Prio) {
 800479c:	428b      	cmp	r3, r1
 800479e:	d0ac      	beq.n	80046fa <OS_TickTask+0xea>
                        OS_TaskChangePrio(p_tcb_owner, prio_new);
 80047a0:	4648      	mov	r0, r9
 80047a2:	f7ff fed5 	bl	8004550 <OS_TaskChangePrio>
            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 80047a6:	696d      	ldr	r5, [r5, #20]
 80047a8:	f8cb 5000 	str.w	r5, [fp]
            if (p_tcb == (OS_TCB *)0) {
 80047ac:	2d00      	cmp	r5, #0
 80047ae:	d1a9      	bne.n	8004704 <OS_TickTask+0xf4>
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 80047b0:	f8ab 5004 	strh.w	r5, [fp, #4]
 80047b4:	e7d1      	b.n	800475a <OS_TickTask+0x14a>
    nbr_updated = (OS_OBJ_QTY)0u;
 80047b6:	2500      	movs	r5, #0
 80047b8:	e773      	b.n	80046a2 <OS_TickTask+0x92>
 80047ba:	bf00      	nop
 80047bc:	20002da4 	.word	0x20002da4
 80047c0:	20002ca8 	.word	0x20002ca8
 80047c4:	20002d94 	.word	0x20002d94
 80047c8:	20002db0 	.word	0x20002db0

080047cc <OS_TickTaskInit>:
{
 80047cc:	b530      	push	{r4, r5, lr}
    if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
 80047ce:	4b1c      	ldr	r3, [pc, #112]	; (8004840 <OS_TickTaskInit+0x74>)
    OSTickCtr                    = (OS_TICK)0u;                         /* Clear the tick counter                            */
 80047d0:	4d1c      	ldr	r5, [pc, #112]	; (8004844 <OS_TickTaskInit+0x78>)
    if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
 80047d2:	681c      	ldr	r4, [r3, #0]
    OSTickListDly.TCB_Ptr        = (OS_TCB   *)0;
 80047d4:	491c      	ldr	r1, [pc, #112]	; (8004848 <OS_TickTaskInit+0x7c>)
    OSTickListTimeout.TCB_Ptr    = (OS_TCB   *)0;
 80047d6:	4a1d      	ldr	r2, [pc, #116]	; (800484c <OS_TickTaskInit+0x80>)
    OSTickCtr                    = (OS_TICK)0u;                         /* Clear the tick counter                            */
 80047d8:	2300      	movs	r3, #0
{
 80047da:	b08b      	sub	sp, #44	; 0x2c
    OSTickCtr                    = (OS_TICK)0u;                         /* Clear the tick counter                            */
 80047dc:	602b      	str	r3, [r5, #0]
    OSTickListDly.NbrEntries     = (OS_OBJ_QTY)0;
 80047de:	e9c1 3300 	strd	r3, r3, [r1]
    OSTickListTimeout.NbrEntries = (OS_OBJ_QTY)0;
 80047e2:	e9c2 3300 	strd	r3, r3, [r2]
    if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
 80047e6:	b19c      	cbz	r4, 8004810 <OS_TickTaskInit+0x44>
    if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
 80047e8:	4a19      	ldr	r2, [pc, #100]	; (8004850 <OS_TickTaskInit+0x84>)
 80047ea:	491a      	ldr	r1, [pc, #104]	; (8004854 <OS_TickTaskInit+0x88>)
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	6809      	ldr	r1, [r1, #0]
 80047f0:	428a      	cmp	r2, r1
 80047f2:	d308      	bcc.n	8004806 <OS_TickTaskInit+0x3a>
    if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {                 /* Only one task at the 'Idle Task' priority         */
 80047f4:	4918      	ldr	r1, [pc, #96]	; (8004858 <OS_TickTaskInit+0x8c>)
 80047f6:	7809      	ldrb	r1, [r1, #0]
 80047f8:	291e      	cmp	r1, #30
 80047fa:	d90e      	bls.n	800481a <OS_TickTaskInit+0x4e>
       *p_err = OS_ERR_TICK_PRIO_INVALID;
 80047fc:	f247 2311 	movw	r3, #29201	; 0x7211
 8004800:	8003      	strh	r3, [r0, #0]
}
 8004802:	b00b      	add	sp, #44	; 0x2c
 8004804:	bd30      	pop	{r4, r5, pc}
       *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
 8004806:	f247 2313 	movw	r3, #29203	; 0x7213
 800480a:	8003      	strh	r3, [r0, #0]
}
 800480c:	b00b      	add	sp, #44	; 0x2c
 800480e:	bd30      	pop	{r4, r5, pc}
       *p_err = OS_ERR_TICK_STK_INVALID;
 8004810:	f247 2312 	movw	r3, #29202	; 0x7212
 8004814:	8003      	strh	r3, [r0, #0]
}
 8004816:	b00b      	add	sp, #44	; 0x2c
 8004818:	bd30      	pop	{r4, r5, pc}
    OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
 800481a:	4d10      	ldr	r5, [pc, #64]	; (800485c <OS_TickTaskInit+0x90>)
 800481c:	9008      	str	r0, [sp, #32]
 800481e:	682d      	ldr	r5, [r5, #0]
 8004820:	9203      	str	r2, [sp, #12]
 8004822:	200b      	movs	r0, #11
 8004824:	e9cd 1400 	strd	r1, r4, [sp]
 8004828:	9007      	str	r0, [sp, #28]
 800482a:	9306      	str	r3, [sp, #24]
 800482c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004830:	9502      	str	r5, [sp, #8]
 8004832:	4a0b      	ldr	r2, [pc, #44]	; (8004860 <OS_TickTaskInit+0x94>)
 8004834:	490b      	ldr	r1, [pc, #44]	; (8004864 <OS_TickTaskInit+0x98>)
 8004836:	480c      	ldr	r0, [pc, #48]	; (8004868 <OS_TickTaskInit+0x9c>)
 8004838:	f7ff fbee 	bl	8004018 <OSTaskCreate>
}
 800483c:	b00b      	add	sp, #44	; 0x2c
 800483e:	bd30      	pop	{r4, r5, pc}
 8004840:	08008d84 	.word	0x08008d84
 8004844:	20002ca8 	.word	0x20002ca8
 8004848:	20002da4 	.word	0x20002da4
 800484c:	20002db0 	.word	0x20002db0
 8004850:	08008d8c 	.word	0x08008d8c
 8004854:	08008d78 	.word	0x08008d78
 8004858:	08008d80 	.word	0x08008d80
 800485c:	08008d88 	.word	0x08008d88
 8004860:	08004611 	.word	0x08004611
 8004864:	08008dec 	.word	0x08008dec
 8004868:	200029f4 	.word	0x200029f4

0800486c <OS_TickListInsert>:
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 800486c:	6803      	ldr	r3, [r0, #0]
{
 800486e:	b470      	push	{r4, r5, r6}
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 8004870:	b90b      	cbnz	r3, 8004876 <OS_TickListInsert+0xa>
 8004872:	e022      	b.n	80048ba <OS_TickListInsert+0x4e>
 8004874:	462b      	mov	r3, r5
            if (remain <= p_tcb2->TickRemain) {
 8004876:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8004878:	4294      	cmp	r4, r2
 800487a:	d20d      	bcs.n	8004898 <OS_TickListInsert+0x2c>
                p_tcb2  = p_tcb2->TickNextPtr;
 800487c:	695d      	ldr	r5, [r3, #20]
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
 800487e:	1b12      	subs	r2, r2, r4
        while (p_tcb2 != (OS_TCB *)0) {
 8004880:	2d00      	cmp	r5, #0
 8004882:	d1f7      	bne.n	8004874 <OS_TickListInsert+0x8>
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8004884:	8884      	ldrh	r4, [r0, #4]
        p_tcb->TickRemain   = remain;                       
 8004886:	650a      	str	r2, [r1, #80]	; 0x50
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8004888:	1c62      	adds	r2, r4, #1
        p_tcb->TickNextPtr  = (OS_TCB *)0;    
 800488a:	e9c1 5305 	strd	r5, r3, [r1, #20]
        p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;                   /*           Link the list to the TCB                */
 800488e:	61c8      	str	r0, [r1, #28]
}
 8004890:	bc70      	pop	{r4, r5, r6}
        p_tcb1->TickNextPtr = p_tcb;
 8004892:	6159      	str	r1, [r3, #20]
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8004894:	8082      	strh	r2, [r0, #4]
}
 8004896:	4770      	bx	lr
 8004898:	8884      	ldrh	r4, [r0, #4]
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 800489a:	699d      	ldr	r5, [r3, #24]
                    p_tcb->TickRemain   = remain;                       /*      Yes, Store remaining time                    */                                          
 800489c:	650a      	str	r2, [r1, #80]	; 0x50
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 800489e:	6d1e      	ldr	r6, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = (OS_TCB *)0;
 80048a0:	618d      	str	r5, [r1, #24]
 80048a2:	3401      	adds	r4, #1
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 80048a4:	1ab2      	subs	r2, r6, r2
                    p_tcb->TickNextPtr  = p_tcb2;    
 80048a6:	614b      	str	r3, [r1, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           Link TCB to this list                   */
 80048a8:	61c8      	str	r0, [r1, #28]
 80048aa:	b2a4      	uxth	r4, r4
                    p_tcb2->TickPrevPtr = p_tcb;
 80048ac:	6199      	str	r1, [r3, #24]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 80048ae:	651a      	str	r2, [r3, #80]	; 0x50
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 80048b0:	b165      	cbz	r5, 80048cc <OS_TickListInsert+0x60>
                    p_tcb1->TickNextPtr = p_tcb;
 80048b2:	6169      	str	r1, [r5, #20]
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 80048b4:	8084      	strh	r4, [r0, #4]
}
 80048b6:	bc70      	pop	{r4, r5, r6}
 80048b8:	4770      	bx	lr
        p_list->NbrEntries = 1u;                                        /*      List contains 1 entry                        */
 80048ba:	2401      	movs	r4, #1
        p_tcb->TickRemain  = time;                                      /* Yes, Store time in TCB                            */
 80048bc:	650a      	str	r2, [r1, #80]	; 0x50
        p_tcb->TickPrevPtr = (OS_TCB *)0;
 80048be:	e9c1 3305 	strd	r3, r3, [r1, #20]
        p_tcb->TickListPtr = (OS_TICK_LIST *)p_list;                    /*      Link to this list                            */
 80048c2:	61c8      	str	r0, [r1, #28]
        p_list->NbrEntries = 1u;                                        /*      List contains 1 entry                        */
 80048c4:	8084      	strh	r4, [r0, #4]
        p_list->TCB_Ptr    = p_tcb;                                     /*      Point to TCB of task to place in the list    */
 80048c6:	6001      	str	r1, [r0, #0]
}
 80048c8:	bc70      	pop	{r4, r5, r6}
 80048ca:	4770      	bx	lr
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 80048cc:	8084      	strh	r4, [r0, #4]
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
 80048ce:	6001      	str	r1, [r0, #0]
}
 80048d0:	bc70      	pop	{r4, r5, r6}
 80048d2:	4770      	bx	lr

080048d4 <OS_TickListInsertDly>:
    if (opt == OS_OPT_TIME_MATCH) {                                     /* MATCH to absolute OSTickCtr value mode            */
 80048d4:	2a04      	cmp	r2, #4
{
 80048d6:	b4f0      	push	{r4, r5, r6, r7}
    if (opt == OS_OPT_TIME_MATCH) {                                     /* MATCH to absolute OSTickCtr value mode            */
 80048d8:	d02e      	beq.n	8004938 <OS_TickListInsertDly+0x64>
    } else if (opt == OS_OPT_TIME_PERIODIC) {                           /* PERIODIC mode.                                    */
 80048da:	2a08      	cmp	r2, #8
 80048dc:	d01c      	beq.n	8004918 <OS_TickListInsertDly+0x44>
    } else if (time > (OS_TICK)0u) {                                    /* RELATIVE time delay mode                          */
 80048de:	2900      	cmp	r1, #0
 80048e0:	d031      	beq.n	8004946 <OS_TickListInsertDly+0x72>
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 80048e2:	4e32      	ldr	r6, [pc, #200]	; (80049ac <OS_TickListInsertDly+0xd8>)
 80048e4:	6832      	ldr	r2, [r6, #0]
    p_tcb->TaskState = OS_TASK_STATE_DLY;
 80048e6:	2401      	movs	r4, #1
 80048e8:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 80048ec:	b90a      	cbnz	r2, 80048f2 <OS_TickListInsertDly+0x1e>
 80048ee:	e049      	b.n	8004984 <OS_TickListInsertDly+0xb0>
        while (p_tcb2 != (OS_TCB *)0) {
 80048f0:	462a      	mov	r2, r5
            if (remain <= p_tcb2->TickRemain) {
 80048f2:	6d14      	ldr	r4, [r2, #80]	; 0x50
 80048f4:	428c      	cmp	r4, r1
 80048f6:	d22d      	bcs.n	8004954 <OS_TickListInsertDly+0x80>
                p_tcb2  = p_tcb2->TickNextPtr;
 80048f8:	6955      	ldr	r5, [r2, #20]
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
 80048fa:	1b09      	subs	r1, r1, r4
        while (p_tcb2 != (OS_TCB *)0) {
 80048fc:	2d00      	cmp	r5, #0
 80048fe:	d1f7      	bne.n	80048f0 <OS_TickListInsertDly+0x1c>
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8004900:	88b4      	ldrh	r4, [r6, #4]
        p_tcb->TickRemain   = remain;                       
 8004902:	6501      	str	r1, [r0, #80]	; 0x50
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8004904:	1c61      	adds	r1, r4, #1
        p_tcb->TickNextPtr  = (OS_TCB *)0;    
 8004906:	e9c0 5205 	strd	r5, r2, [r0, #20]
        p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;                   /*           Link the list to the TCB                */
 800490a:	61c6      	str	r6, [r0, #28]
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 800490c:	80b1      	strh	r1, [r6, #4]
        p_tcb1->TickNextPtr = p_tcb;
 800490e:	6150      	str	r0, [r2, #20]
   *p_err = OS_ERR_NONE;
 8004910:	2200      	movs	r2, #0
 8004912:	801a      	strh	r2, [r3, #0]
}
 8004914:	bcf0      	pop	{r4, r5, r6, r7}
 8004916:	4770      	bx	lr
        if ((OSTickCtr - p_tcb->TickCtrPrev) > time) {
 8004918:	4a25      	ldr	r2, [pc, #148]	; (80049b0 <OS_TickListInsertDly+0xdc>)
 800491a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	1b54      	subs	r4, r2, r5
 8004920:	428c      	cmp	r4, r1
 8004922:	d827      	bhi.n	8004974 <OS_TickListInsertDly+0xa0>
            remain = time - (OSTickCtr - p_tcb->TickCtrPrev);
 8004924:	1aaa      	subs	r2, r5, r2
 8004926:	440a      	add	r2, r1
            if ((remain > OS_TICK_TH_RDY) ||                            /* If delay time has already passed, ...             */
 8004928:	1e56      	subs	r6, r2, #1
 800492a:	f116 1f01 	cmn.w	r6, #65537	; 0x10001
 800492e:	d830      	bhi.n	8004992 <OS_TickListInsertDly+0xbe>
            p_tcb->TickCtrPrev += time;
 8004930:	4429      	add	r1, r5
 8004932:	6541      	str	r1, [r0, #84]	; 0x54
 8004934:	4611      	mov	r1, r2
 8004936:	e7d4      	b.n	80048e2 <OS_TickListInsertDly+0xe>
        remain = time - OSTickCtr;
 8004938:	4a1d      	ldr	r2, [pc, #116]	; (80049b0 <OS_TickListInsertDly+0xdc>)
 800493a:	6812      	ldr	r2, [r2, #0]
 800493c:	1a89      	subs	r1, r1, r2
        if ((remain > OS_TICK_TH_RDY) ||                                /* If delay already occurred, ...                    */
 800493e:	1e4a      	subs	r2, r1, #1
 8004940:	f112 1f01 	cmn.w	r2, #65537	; 0x10001
 8004944:	d9cd      	bls.n	80048e2 <OS_TickListInsertDly+0xe>
            p_tcb->TickRemain = (OS_TICK)0u;
 8004946:	2100      	movs	r1, #0
           *p_err             =  OS_ERR_TIME_ZERO_DLY;                  /* ... do NOT delay.                                 */
 8004948:	f247 227e 	movw	r2, #29310	; 0x727e
            p_tcb->TickRemain = (OS_TICK)0u;
 800494c:	6501      	str	r1, [r0, #80]	; 0x50
}
 800494e:	bcf0      	pop	{r4, r5, r6, r7}
           *p_err             =  OS_ERR_TIME_ZERO_DLY;                  /* ... do NOT delay.                                 */
 8004950:	801a      	strh	r2, [r3, #0]
}
 8004952:	4770      	bx	lr
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 8004954:	6995      	ldr	r5, [r2, #24]
 8004956:	88b4      	ldrh	r4, [r6, #4]
                    p_tcb->TickRemain   = remain;                       /*      Yes, Store remaining time                    */                                          
 8004958:	6501      	str	r1, [r0, #80]	; 0x50
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 800495a:	6d17      	ldr	r7, [r2, #80]	; 0x50
                    p_tcb->TickPrevPtr  = (OS_TCB *)0;
 800495c:	6185      	str	r5, [r0, #24]
 800495e:	3401      	adds	r4, #1
 8004960:	b2a4      	uxth	r4, r4
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 8004962:	1a79      	subs	r1, r7, r1
                    p_tcb->TickNextPtr  = p_tcb2;    
 8004964:	6142      	str	r2, [r0, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           Link TCB to this list                   */
 8004966:	61c6      	str	r6, [r0, #28]
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 8004968:	b13d      	cbz	r5, 800497a <OS_TickListInsertDly+0xa6>
                    p_tcb2->TickPrevPtr = p_tcb;
 800496a:	6190      	str	r0, [r2, #24]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 800496c:	6511      	str	r1, [r2, #80]	; 0x50
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 800496e:	80b4      	strh	r4, [r6, #4]
                    p_tcb1->TickNextPtr = p_tcb;
 8004970:	6168      	str	r0, [r5, #20]
 8004972:	e7cd      	b.n	8004910 <OS_TickListInsertDly+0x3c>
            p_tcb->TickCtrPrev = OSTickCtr + time;
 8004974:	440a      	add	r2, r1
 8004976:	6542      	str	r2, [r0, #84]	; 0x54
 8004978:	e7b3      	b.n	80048e2 <OS_TickListInsertDly+0xe>
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
 800497a:	6030      	str	r0, [r6, #0]
                    p_tcb2->TickPrevPtr = p_tcb;
 800497c:	6190      	str	r0, [r2, #24]
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 800497e:	80b4      	strh	r4, [r6, #4]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 8004980:	6511      	str	r1, [r2, #80]	; 0x50
 8004982:	e7c5      	b.n	8004910 <OS_TickListInsertDly+0x3c>
        p_tcb->TickRemain  = time;                                      /* Yes, Store time in TCB                            */
 8004984:	6501      	str	r1, [r0, #80]	; 0x50
        p_tcb->TickPrevPtr = (OS_TCB *)0;
 8004986:	e9c0 2205 	strd	r2, r2, [r0, #20]
        p_tcb->TickListPtr = (OS_TICK_LIST *)p_list;                    /*      Link to this list                            */
 800498a:	61c6      	str	r6, [r0, #28]
        p_list->TCB_Ptr    = p_tcb;                                     /*      Point to TCB of task to place in the list    */
 800498c:	6030      	str	r0, [r6, #0]
        p_list->NbrEntries = 1u;                                        /*      List contains 1 entry                        */
 800498e:	80b4      	strh	r4, [r6, #4]
 8004990:	e7be      	b.n	8004910 <OS_TickListInsertDly+0x3c>
                p_tcb->TickCtrPrev += time + time * ((OSTickCtr - p_tcb->TickCtrPrev) / time); /* Try to recover the period  */
 8004992:	fbb4 f4f1 	udiv	r4, r4, r1
 8004996:	fb04 1101 	mla	r1, r4, r1, r1
 800499a:	4429      	add	r1, r5
                p_tcb->TickRemain   = (OS_TICK)0u;
 800499c:	2400      	movs	r4, #0
               *p_err               =  OS_ERR_TIME_ZERO_DLY;            /* ... do NOT delay.                                 */
 800499e:	f247 227e 	movw	r2, #29310	; 0x727e
                p_tcb->TickRemain   = (OS_TICK)0u;
 80049a2:	e9c0 4114 	strd	r4, r1, [r0, #80]	; 0x50
               *p_err               =  OS_ERR_TIME_ZERO_DLY;            /* ... do NOT delay.                                 */
 80049a6:	801a      	strh	r2, [r3, #0]
                return;
 80049a8:	e7b4      	b.n	8004914 <OS_TickListInsertDly+0x40>
 80049aa:	bf00      	nop
 80049ac:	20002da4 	.word	0x20002da4
 80049b0:	20002ca8 	.word	0x20002ca8

080049b4 <OS_TickListRemove>:
    p_list = (OS_TICK_LIST *)p_tcb->TickListPtr;
 80049b4:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
{
 80049b8:	b470      	push	{r4, r5, r6}
    p_tcb2  = p_tcb->TickNextPtr;
 80049ba:	6943      	ldr	r3, [r0, #20]
    if (p_tcb1 == (OS_TCB *)0) {
 80049bc:	b182      	cbz	r2, 80049e0 <OS_TickListRemove+0x2c>
        p_tcb1->TickNextPtr = p_tcb2;    
 80049be:	6153      	str	r3, [r2, #20]
        if (p_tcb2 != (OS_TCB *)0) {
 80049c0:	b123      	cbz	r3, 80049cc <OS_TickListRemove+0x18>
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta list              */
 80049c2:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80049c4:	6d1c      	ldr	r4, [r3, #80]	; 0x50
            p_tcb2->TickPrevPtr = p_tcb1;
 80049c6:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta list              */
 80049c8:	442c      	add	r4, r5
 80049ca:	651c      	str	r4, [r3, #80]	; 0x50
        p_list->NbrEntries--;
 80049cc:	888a      	ldrh	r2, [r1, #4]
        p_tcb->TickPrevPtr  = (OS_TCB       *)0;
 80049ce:	2300      	movs	r3, #0
        p_list->NbrEntries--;
 80049d0:	3a01      	subs	r2, #1
        p_tcb->TickPrevPtr  = (OS_TCB       *)0;
 80049d2:	6183      	str	r3, [r0, #24]
        p_list->NbrEntries--;
 80049d4:	808a      	strh	r2, [r1, #4]
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
 80049d6:	6143      	str	r3, [r0, #20]
        p_tcb->TickRemain   = (OS_TICK       )0u;
 80049d8:	6503      	str	r3, [r0, #80]	; 0x50
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 80049da:	61c3      	str	r3, [r0, #28]
}
 80049dc:	bc70      	pop	{r4, r5, r6}
 80049de:	4770      	bx	lr
        if (p_tcb2 == (OS_TCB *)0) {                                    /* Remove ONLY entry in the list?                    */
 80049e0:	b16b      	cbz	r3, 80049fe <OS_TickListRemove+0x4a>
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta                   */
 80049e2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80049e4:	6d06      	ldr	r6, [r0, #80]	; 0x50
            p_list->NbrEntries--;
 80049e6:	888c      	ldrh	r4, [r1, #4]
            p_tcb2->TickPrevPtr = (OS_TCB       *)0;
 80049e8:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta                   */
 80049ea:	4435      	add	r5, r6
            p_list->NbrEntries--;
 80049ec:	3c01      	subs	r4, #1
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta                   */
 80049ee:	651d      	str	r5, [r3, #80]	; 0x50
            p_list->NbrEntries--;
 80049f0:	808c      	strh	r4, [r1, #4]
            p_list->TCB_Ptr    = p_tcb2;
 80049f2:	600b      	str	r3, [r1, #0]
}
 80049f4:	bc70      	pop	{r4, r5, r6}
            p_tcb->TickNextPtr  = (OS_TCB       *)0;
 80049f6:	6142      	str	r2, [r0, #20]
            p_tcb->TickRemain   = (OS_TICK       )0u;
 80049f8:	6502      	str	r2, [r0, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 80049fa:	61c2      	str	r2, [r0, #28]
}
 80049fc:	4770      	bx	lr
            p_list->TCB_Ptr    = (OS_TCB        *)0;
 80049fe:	600b      	str	r3, [r1, #0]
            p_list->NbrEntries = (OS_OBJ_QTY    )0u;
 8004a00:	808b      	strh	r3, [r1, #4]
            p_tcb->TickRemain   = (OS_TICK       )0u;
 8004a02:	6503      	str	r3, [r0, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 8004a04:	61c3      	str	r3, [r0, #28]
 8004a06:	e7e9      	b.n	80049dc <OS_TickListRemove+0x28>

08004a08 <OSTimeDly>:
       *p_err = OS_ERR_TIME_DLY_ISR;
        return;
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8004a08:	4b1d      	ldr	r3, [pc, #116]	; (8004a80 <OSTimeDly+0x78>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	bb23      	cbnz	r3, 8004a58 <OSTimeDly+0x50>
       *p_err = OS_ERR_SCHED_LOCKED;
        return;
    }

    switch (opt) {
 8004a0e:	2908      	cmp	r1, #8
 8004a10:	d831      	bhi.n	8004a76 <OSTimeDly+0x6e>
 8004a12:	e8df f001 	tbb	[pc, r1]
 8004a16:	3025      	.short	0x3025
 8004a18:	30053025 	.word	0x30053025
 8004a1c:	3030      	.short	0x3030
 8004a1e:	25          	.byte	0x25
 8004a1f:	00          	.byte	0x00
{
 8004a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a24:	4614      	mov	r4, r2
 8004a26:	460d      	mov	r5, r1
 8004a28:	4606      	mov	r6, r0
        default:
            *p_err = OS_ERR_OPT_INVALID;
             return;
    }

    OS_CRITICAL_ENTER();
 8004a2a:	f7fb fbd9 	bl	80001e0 <CPU_SR_Save>
    OS_TickListInsertDly(OSTCBCurPtr,
 8004a2e:	4f15      	ldr	r7, [pc, #84]	; (8004a84 <OSTimeDly+0x7c>)
 8004a30:	462a      	mov	r2, r5
    OS_CRITICAL_ENTER();
 8004a32:	4680      	mov	r8, r0
    OS_TickListInsertDly(OSTCBCurPtr,
 8004a34:	4631      	mov	r1, r6
 8004a36:	6838      	ldr	r0, [r7, #0]
 8004a38:	4623      	mov	r3, r4
 8004a3a:	f7ff ff4b 	bl	80048d4 <OS_TickListInsertDly>
                         dly,
                         opt,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 8004a3e:	8825      	ldrh	r5, [r4, #0]
 8004a40:	b9a5      	cbnz	r5, 8004a6c <OSTimeDly+0x64>
         return;
    }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_DLY(dly);                                 /* Record the event.                                      */
#endif
    OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                    */
 8004a42:	6838      	ldr	r0, [r7, #0]
 8004a44:	f7fe fe6c 	bl	8003720 <OS_RdyListRemove>
    OS_CRITICAL_EXIT_NO_SCHED();
 8004a48:	4640      	mov	r0, r8
 8004a4a:	f7fb fbcd 	bl	80001e8 <CPU_SR_Restore>
    OSSched();                                              /* Find next task to run!                                 */
 8004a4e:	f7fe f9ab 	bl	8002da8 <OSSched>
   *p_err = OS_ERR_NONE;
 8004a52:	8025      	strh	r5, [r4, #0]
}
 8004a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       *p_err = OS_ERR_SCHED_LOCKED;
 8004a58:	f646 5363 	movw	r3, #28003	; 0x6d63
 8004a5c:	8013      	strh	r3, [r2, #0]
        return;
 8004a5e:	4770      	bx	lr
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
 8004a60:	2800      	cmp	r0, #0
 8004a62:	d1dd      	bne.n	8004a20 <OSTimeDly+0x18>
                *p_err = OS_ERR_TIME_ZERO_DLY;
 8004a64:	f247 237e 	movw	r3, #29310	; 0x727e
 8004a68:	8013      	strh	r3, [r2, #0]
                 return;
 8004a6a:	4770      	bx	lr
         OS_CRITICAL_EXIT_NO_SCHED();
 8004a6c:	4640      	mov	r0, r8
}
 8004a6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
         OS_CRITICAL_EXIT_NO_SCHED();
 8004a72:	f7fb bbb9 	b.w	80001e8 <CPU_SR_Restore>
            *p_err = OS_ERR_OPT_INVALID;
 8004a76:	f645 6325 	movw	r3, #24101	; 0x5e25
 8004a7a:	8013      	strh	r3, [r2, #0]
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	20002850 	.word	0x20002850
 8004a84:	20002ab4 	.word	0x20002ab4

08004a88 <OSTimeDlyHMSM>:
                     CPU_INT16U   minutes,
                     CPU_INT16U   seconds,
                     CPU_INT32U   milli,
                     OS_OPT       opt,
                     OS_ERR      *p_err)
{
 8004a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
       *p_err = OS_ERR_TIME_DLY_ISR;
        return;
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8004a8c:	4d2b      	ldr	r5, [pc, #172]	; (8004b3c <OSTimeDlyHMSM+0xb4>)
{
 8004a8e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8004a92:	782e      	ldrb	r6, [r5, #0]
{
 8004a94:	9d07      	ldr	r5, [sp, #28]
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8004a96:	bb5e      	cbnz	r6, 8004af0 <OSTimeDlyHMSM+0x68>
       *p_err = OS_ERR_SCHED_LOCKED;
        return;
    }

    opt_time = opt & OS_OPT_TIME_MASK;                      /* Retrieve time options only.                            */
 8004a98:	f004 040e 	and.w	r4, r4, #14
    switch (opt_time) {
 8004a9c:	2c08      	cmp	r4, #8
 8004a9e:	d82c      	bhi.n	8004afa <OSTimeDlyHMSM+0x72>
 8004aa0:	e8df f004 	tbb	[pc, r4]
 8004aa4:	2b052b05 	.word	0x2b052b05
 8004aa8:	2b2b2b09 	.word	0x2b2b2b09
 8004aac:	05          	.byte	0x05
 8004aad:	00          	.byte	0x00
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (milli == (CPU_INT32U)0u) {                 /* Make sure we didn't specify a 0 delay                  */
 8004aae:	b913      	cbnz	r3, 8004ab6 <OSTimeDlyHMSM+0x2e>
                 if (seconds == (CPU_INT16U)0u) {
 8004ab0:	b90a      	cbnz	r2, 8004ab6 <OSTimeDlyHMSM+0x2e>
                     if (minutes == (CPU_INT16U)0u) {
 8004ab2:	b901      	cbnz	r1, 8004ab6 <OSTimeDlyHMSM+0x2e>
                         if (hours == (CPU_INT16U)0u) {
 8004ab4:	b1b8      	cbz	r0, 8004ae6 <OSTimeDlyHMSM+0x5e>
    }
#endif

                                                            /* Compute the total number of clock ticks required..     */
                                                            /* .. (rounded to the nearest tick)                       */
    tick_rate = OSCfg_TickRate_Hz;
 8004ab6:	4e22      	ldr	r6, [pc, #136]	; (8004b40 <OSTimeDlyHMSM+0xb8>)
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
              + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
 8004ab8:	4f22      	ldr	r7, [pc, #136]	; (8004b44 <OSTimeDlyHMSM+0xbc>)
    tick_rate = OSCfg_TickRate_Hz;
 8004aba:	6836      	ldr	r6, [r6, #0]
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 8004abc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 8004ac0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8004ac4:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8004ac8:	fb02 1000 	mla	r0, r2, r0, r1
              + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
 8004acc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8004ad0:	fbb1 f1f6 	udiv	r1, r1, r6
 8004ad4:	4419      	add	r1, r3
 8004ad6:	fb06 f101 	mul.w	r1, r6, r1
 8004ada:	fba7 3101 	umull	r3, r1, r7, r1
 8004ade:	0989      	lsrs	r1, r1, #6
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 8004ae0:	fb06 1600 	mla	r6, r6, r0, r1

    if (ticks > (OS_TICK)0u) {
 8004ae4:	b976      	cbnz	r6, 8004b04 <OSTimeDlyHMSM+0x7c>
                            *p_err = OS_ERR_TIME_ZERO_DLY;
 8004ae6:	f247 237e 	movw	r3, #29310	; 0x727e
 8004aea:	802b      	strh	r3, [r5, #0]
        OSSched();                                          /* Find next task to run!                                 */
       *p_err = OS_ERR_NONE;
    } else {
       *p_err = OS_ERR_TIME_ZERO_DLY;
    }
}
 8004aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       *p_err = OS_ERR_SCHED_LOCKED;
 8004af0:	f646 5363 	movw	r3, #28003	; 0x6d63
 8004af4:	802b      	strh	r3, [r5, #0]
}
 8004af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *p_err = OS_ERR_OPT_INVALID;
 8004afa:	f645 6325 	movw	r3, #24101	; 0x5e25
 8004afe:	802b      	strh	r3, [r5, #0]
}
 8004b00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        OS_CRITICAL_ENTER();
 8004b04:	f7fb fb6c 	bl	80001e0 <CPU_SR_Save>
        OS_TickListInsertDly(OSTCBCurPtr,
 8004b08:	4f0f      	ldr	r7, [pc, #60]	; (8004b48 <OSTimeDlyHMSM+0xc0>)
 8004b0a:	4622      	mov	r2, r4
        OS_CRITICAL_ENTER();
 8004b0c:	4680      	mov	r8, r0
        OS_TickListInsertDly(OSTCBCurPtr,
 8004b0e:	4631      	mov	r1, r6
 8004b10:	6838      	ldr	r0, [r7, #0]
 8004b12:	462b      	mov	r3, r5
 8004b14:	f7ff fede 	bl	80048d4 <OS_TickListInsertDly>
        if (*p_err != OS_ERR_NONE) {
 8004b18:	882c      	ldrh	r4, [r5, #0]
 8004b1a:	b124      	cbz	r4, 8004b26 <OSTimeDlyHMSM+0x9e>
             OS_CRITICAL_EXIT_NO_SCHED();
 8004b1c:	4640      	mov	r0, r8
}
 8004b1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
             OS_CRITICAL_EXIT_NO_SCHED();
 8004b22:	f7fb bb61 	b.w	80001e8 <CPU_SR_Restore>
        OS_RdyListRemove(OSTCBCurPtr);                      /* Remove current task from ready list                    */
 8004b26:	6838      	ldr	r0, [r7, #0]
 8004b28:	f7fe fdfa 	bl	8003720 <OS_RdyListRemove>
        OS_CRITICAL_EXIT_NO_SCHED();
 8004b2c:	4640      	mov	r0, r8
 8004b2e:	f7fb fb5b 	bl	80001e8 <CPU_SR_Restore>
        OSSched();                                          /* Find next task to run!                                 */
 8004b32:	f7fe f939 	bl	8002da8 <OSSched>
       *p_err = OS_ERR_NONE;
 8004b36:	802c      	strh	r4, [r5, #0]
 8004b38:	e7d8      	b.n	8004aec <OSTimeDlyHMSM+0x64>
 8004b3a:	bf00      	nop
 8004b3c:	20002850 	.word	0x20002850
 8004b40:	08008d7c 	.word	0x08008d7c
 8004b44:	10624dd3 	.word	0x10624dd3
 8004b48:	20002ab4 	.word	0x20002ab4

08004b4c <OSTimeTick>:
* Returns    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 8004b4c:	b500      	push	{lr}
 8004b4e:	b083      	sub	sp, #12
#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    CPU_TS  ts;
#endif


    OSTimeTickHook();                                       /* Call user definable hook                               */
 8004b50:	f7fe f8a8 	bl	8002ca4 <OSTimeTickHook>
                (CPU_TS     ) ts,
                (OS_ERR    *)&err);

#else

   (void)OSTaskSemPost((OS_TCB *)&OSTickTaskTCB,            /* Signal tick task                                       */
 8004b54:	2100      	movs	r1, #0
 8004b56:	f10d 0206 	add.w	r2, sp, #6
 8004b5a:	4809      	ldr	r0, [pc, #36]	; (8004b80 <OSTimeTick+0x34>)
 8004b5c:	f7ff fbc8 	bl	80042f0 <OSTaskSemPost>
#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);
#endif

#if OS_CFG_TMR_EN > 0u
    OSTmrUpdateCtr--;
 8004b60:	4b08      	ldr	r3, [pc, #32]	; (8004b84 <OSTimeTick+0x38>)
 8004b62:	6819      	ldr	r1, [r3, #0]
 8004b64:	3901      	subs	r1, #1
 8004b66:	6019      	str	r1, [r3, #0]
    if (OSTmrUpdateCtr == (OS_CTR)0u) {
 8004b68:	b939      	cbnz	r1, 8004b7a <OSTimeTick+0x2e>
        OSTmrUpdateCtr = OSTmrUpdateCnt;
 8004b6a:	4a07      	ldr	r2, [pc, #28]	; (8004b88 <OSTimeTick+0x3c>)
        OSTaskSemPost((OS_TCB *)&OSTmrTaskTCB,              /* Signal timer task                                      */
 8004b6c:	4807      	ldr	r0, [pc, #28]	; (8004b8c <OSTimeTick+0x40>)
        OSTmrUpdateCtr = OSTmrUpdateCnt;
 8004b6e:	6812      	ldr	r2, [r2, #0]
 8004b70:	601a      	str	r2, [r3, #0]
        OSTaskSemPost((OS_TCB *)&OSTmrTaskTCB,              /* Signal timer task                                      */
 8004b72:	f10d 0206 	add.w	r2, sp, #6
 8004b76:	f7ff fbbb 	bl	80042f0 <OSTaskSemPost>
                      (OS_ERR *)&err);
    }
#endif

#endif
}
 8004b7a:	b003      	add	sp, #12
 8004b7c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b80:	200029f4 	.word	0x200029f4
 8004b84:	20002dac 	.word	0x20002dac
 8004b88:	20002d9c 	.word	0x20002d9c
 8004b8c:	20002ae0 	.word	0x20002ae0

08004b90 <OS_TmrTask>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_TmrTask (void  *p_arg)
{
 8004b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c60 <OS_TmrTask+0xd0>
 8004b98:	4e2f      	ldr	r6, [pc, #188]	; (8004c58 <OS_TmrTask+0xc8>)
 8004b9a:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8004c64 <OS_TmrTask+0xd4>
 8004b9e:	f8df b0c8 	ldr.w	fp, [pc, #200]	; 8004c68 <OS_TmrTask+0xd8>
 8004ba2:	b089      	sub	sp, #36	; 0x24



    (void)&p_arg;                                                /* Not using 'p_arg', prevent compiler warning       */
    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK )0,                         /* Wait for signal indicating time to update tmrs    */
 8004ba4:	2700      	movs	r7, #0
 8004ba6:	2100      	movs	r1, #0
 8004ba8:	4608      	mov	r0, r1
 8004baa:	ab05      	add	r3, sp, #20
 8004bac:	aa06      	add	r2, sp, #24
 8004bae:	f7ff fb09 	bl	80041c4 <OSTaskSemPend>
    OS_ERR  err;
#if OS_CFG_MUTEX_EN > 0u
    CPU_TS  ts;


    OSMutexPend(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f10d 0316 	add.w	r3, sp, #22
 8004bb8:	4611      	mov	r1, r2
 8004bba:	9300      	str	r3, [sp, #0]
 8004bbc:	4827      	ldr	r0, [pc, #156]	; (8004c5c <OS_TmrTask+0xcc>)
 8004bbe:	ab07      	add	r3, sp, #28
 8004bc0:	f7fe fe6a 	bl	8003898 <OSMutexPend>
        ts_start = OS_TS_GET();
 8004bc4:	f7fd fed8 	bl	8002978 <CPU_TS_TmrRd>
        OSTmrTickCtr++;                                          /* Increment the current time                        */
 8004bc8:	f8da 2000 	ldr.w	r2, [sl]
        p_tmr    = OSTmrListPtr;
 8004bcc:	6835      	ldr	r5, [r6, #0]
        ts_start = OS_TS_GET();
 8004bce:	9003      	str	r0, [sp, #12]
        OSTmrTickCtr++;                                          /* Increment the current time                        */
 8004bd0:	3201      	adds	r2, #1
 8004bd2:	f8ca 2000 	str.w	r2, [sl]
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 8004bd6:	b35d      	cbz	r5, 8004c30 <OS_TmrTask+0xa0>
                    p_tmr->State = OS_TMR_STATE_COMPLETED;       /* Indicate that the timer has completed             */
 8004bd8:	f04f 0903 	mov.w	r9, #3
 8004bdc:	e00b      	b.n	8004bf6 <OS_TmrTask+0x66>
                    p_tmr->Remain = p_tmr->Period;               /* Reload the time remaining                         */
 8004bde:	6a2b      	ldr	r3, [r5, #32]
 8004be0:	61ab      	str	r3, [r5, #24]
                p_fnct = p_tmr->CallbackPtr;                     /* Execute callback function if available            */
 8004be2:	68ab      	ldr	r3, [r5, #8]
                if (p_fnct != (OS_TMR_CALLBACK_PTR)0) {
 8004be4:	b113      	cbz	r3, 8004bec <OS_TmrTask+0x5c>
                    (*p_fnct)((void *)p_tmr,
 8004be6:	68e9      	ldr	r1, [r5, #12]
 8004be8:	4628      	mov	r0, r5
 8004bea:	4798      	blx	r3
            OSSchedUnlock(&err);
 8004bec:	a805      	add	r0, sp, #20
 8004bee:	f7fe f939 	bl	8002e64 <OSSchedUnlock>
        while (p_tmr != (OS_TMR *)0) {                           /* Update all the timers in the list                 */
 8004bf2:	4625      	mov	r5, r4
 8004bf4:	b1e4      	cbz	r4, 8004c30 <OS_TmrTask+0xa0>
            OSSchedLock(&err);
 8004bf6:	a805      	add	r0, sp, #20
 8004bf8:	f7fe f914 	bl	8002e24 <OSSchedLock>
            p_tmr->Remain--;
 8004bfc:	69ab      	ldr	r3, [r5, #24]
            p_tmr_next = p_tmr->NextPtr;
 8004bfe:	692c      	ldr	r4, [r5, #16]
            p_tmr->Remain--;
 8004c00:	3b01      	subs	r3, #1
 8004c02:	61ab      	str	r3, [r5, #24]
            if (p_tmr->Remain == 0) {
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f1      	bne.n	8004bec <OS_TmrTask+0x5c>
                if (p_tmr->Opt == OS_OPT_TMR_PERIODIC) {
 8004c08:	8caa      	ldrh	r2, [r5, #36]	; 0x24
 8004c0a:	2a02      	cmp	r2, #2
 8004c0c:	d0e7      	beq.n	8004bde <OS_TmrTask+0x4e>
    if (OSTmrListPtr == p_tmr) {                            /* See if timer to remove is at the beginning of list     */
 8004c0e:	6832      	ldr	r2, [r6, #0]
 8004c10:	42aa      	cmp	r2, r5
 8004c12:	d01d      	beq.n	8004c50 <OS_TmrTask+0xc0>
        p_tmr1          = (OS_TMR *)p_tmr->PrevPtr;         /* Remove timer from somewhere in the list                */
 8004c14:	696b      	ldr	r3, [r5, #20]
        p_tmr1->NextPtr = p_tmr2;
 8004c16:	611c      	str	r4, [r3, #16]
        if (p_tmr2 != (OS_TMR *)0) {
 8004c18:	b104      	cbz	r4, 8004c1c <OS_TmrTask+0x8c>
            p_tmr2->PrevPtr = (OS_TMR *)p_tmr1;
 8004c1a:	6163      	str	r3, [r4, #20]
    OSTmrListEntries--;
 8004c1c:	f8b8 3000 	ldrh.w	r3, [r8]
    p_tmr->NextPtr = (OS_TMR *)0;
 8004c20:	612f      	str	r7, [r5, #16]
    OSTmrListEntries--;
 8004c22:	3b01      	subs	r3, #1
    p_tmr->PrevPtr = (OS_TMR *)0;
 8004c24:	616f      	str	r7, [r5, #20]
                    p_tmr->State = OS_TMR_STATE_COMPLETED;       /* Indicate that the timer has completed             */
 8004c26:	f885 9026 	strb.w	r9, [r5, #38]	; 0x26
    OSTmrListEntries--;
 8004c2a:	f8a8 3000 	strh.w	r3, [r8]
 8004c2e:	e7d8      	b.n	8004be2 <OS_TmrTask+0x52>
        ts_delta = OS_TS_GET() - ts_start;                      /* Measure execution time of timer task              */
 8004c30:	f7fd fea2 	bl	8002978 <CPU_TS_TmrRd>
 8004c34:	9a03      	ldr	r2, [sp, #12]
        if (OSTmrTaskTimeMax < ts_delta) {
 8004c36:	f8db 3000 	ldr.w	r3, [fp]
        ts_delta = OS_TS_GET() - ts_start;                      /* Measure execution time of timer task              */
 8004c3a:	1a80      	subs	r0, r0, r2
        if (OSTmrTaskTimeMax < ts_delta) {
 8004c3c:	4283      	cmp	r3, r0
            OSTmrTaskTimeMax = ts_delta;
 8004c3e:	bf38      	it	cc
 8004c40:	f8cb 0000 	strcc.w	r0, [fp]
{
    OS_ERR  err;


#if OS_CFG_MUTEX_EN > 0u
    OSMutexPost(&OSTmrMutex,                                /* Use a mutex to protect the timers                      */
 8004c44:	aa07      	add	r2, sp, #28
 8004c46:	2100      	movs	r1, #0
 8004c48:	4804      	ldr	r0, [pc, #16]	; (8004c5c <OS_TmrTask+0xcc>)
 8004c4a:	f7fe fee5 	bl	8003a18 <OSMutexPost>
 8004c4e:	e7aa      	b.n	8004ba6 <OS_TmrTask+0x16>
        OSTmrListPtr = (OS_TMR *)p_tmr1;
 8004c50:	6034      	str	r4, [r6, #0]
        if (p_tmr1 != (OS_TMR *)0) {
 8004c52:	2c00      	cmp	r4, #0
 8004c54:	d1e1      	bne.n	8004c1a <OS_TmrTask+0x8a>
 8004c56:	e7e1      	b.n	8004c1c <OS_TmrTask+0x8c>
 8004c58:	20002d8c 	.word	0x20002d8c
 8004c5c:	20002c70 	.word	0x20002c70
 8004c60:	20002ab0 	.word	0x20002ab0
 8004c64:	20002d98 	.word	0x20002d98
 8004c68:	20002ac8 	.word	0x20002ac8

08004c6c <OS_TmrInit>:
{
 8004c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (OSCfg_TmrTaskRate_Hz > (OS_RATE_HZ)0) {
 8004c6e:	4b29      	ldr	r3, [pc, #164]	; (8004d14 <OS_TmrInit+0xa8>)
    OSTmrDbgListPtr = (OS_TMR *)0;
 8004c70:	4f29      	ldr	r7, [pc, #164]	; (8004d18 <OS_TmrInit+0xac>)
    if (OSCfg_TmrTaskRate_Hz > (OS_RATE_HZ)0) {
 8004c72:	6819      	ldr	r1, [r3, #0]
    OSTmrListPtr        = (OS_TMR *)0;                      /* Create an empty timer list                             */
 8004c74:	4e29      	ldr	r6, [pc, #164]	; (8004d1c <OS_TmrInit+0xb0>)
    OSTmrListEntries    = 0u;
 8004c76:	4d2a      	ldr	r5, [pc, #168]	; (8004d20 <OS_TmrInit+0xb4>)
 8004c78:	4b2a      	ldr	r3, [pc, #168]	; (8004d24 <OS_TmrInit+0xb8>)
    OSTmrDbgListPtr = (OS_TMR *)0;
 8004c7a:	2200      	movs	r2, #0
{
 8004c7c:	b08b      	sub	sp, #44	; 0x2c
 8004c7e:	4604      	mov	r4, r0
    OSTmrDbgListPtr = (OS_TMR *)0;
 8004c80:	603a      	str	r2, [r7, #0]
    OSTmrListPtr        = (OS_TMR *)0;                      /* Create an empty timer list                             */
 8004c82:	6032      	str	r2, [r6, #0]
    OSTmrListEntries    = 0u;
 8004c84:	802a      	strh	r2, [r5, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
    if (OSCfg_TmrTaskRate_Hz > (OS_RATE_HZ)0) {
 8004c88:	b319      	cbz	r1, 8004cd2 <OS_TmrInit+0x66>
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / OSCfg_TmrTaskRate_Hz;
 8004c8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c8e:	4926      	ldr	r1, [pc, #152]	; (8004d28 <OS_TmrInit+0xbc>)
    OSTmrUpdateCtr      = OSTmrUpdateCnt;
 8004c90:	4a26      	ldr	r2, [pc, #152]	; (8004d2c <OS_TmrInit+0xc0>)
    OSTmrTickCtr        = (OS_TICK)0;
 8004c92:	4827      	ldr	r0, [pc, #156]	; (8004d30 <OS_TmrInit+0xc4>)
    OSTmrTaskTimeMax    = (CPU_TS)0;
 8004c94:	4e27      	ldr	r6, [pc, #156]	; (8004d34 <OS_TmrInit+0xc8>)
 8004c96:	600b      	str	r3, [r1, #0]
    OSTmrTickCtr        = (OS_TICK)0;
 8004c98:	2500      	movs	r5, #0
    OSTmrUpdateCtr      = OSTmrUpdateCnt;
 8004c9a:	6013      	str	r3, [r2, #0]
    OSTmrTickCtr        = (OS_TICK)0;
 8004c9c:	6005      	str	r5, [r0, #0]
    OSMutexCreate(&OSTmrMutex,                              /* Use a mutex to protect the timers                      */
 8004c9e:	4622      	mov	r2, r4
 8004ca0:	4925      	ldr	r1, [pc, #148]	; (8004d38 <OS_TmrInit+0xcc>)
 8004ca2:	4826      	ldr	r0, [pc, #152]	; (8004d3c <OS_TmrInit+0xd0>)
    OSTmrTaskTimeMax    = (CPU_TS)0;
 8004ca4:	6035      	str	r5, [r6, #0]
    OSMutexCreate(&OSTmrMutex,                              /* Use a mutex to protect the timers                      */
 8004ca6:	f7fe fdc5 	bl	8003834 <OSMutexCreate>
    if (*p_err != OS_ERR_NONE) {
 8004caa:	8823      	ldrh	r3, [r4, #0]
 8004cac:	b97b      	cbnz	r3, 8004cce <OS_TmrInit+0x62>
    if (OSCfg_TmrTaskStkBasePtr == (CPU_STK*)0) {
 8004cae:	4a24      	ldr	r2, [pc, #144]	; (8004d40 <OS_TmrInit+0xd4>)
 8004cb0:	6812      	ldr	r2, [r2, #0]
 8004cb2:	b19a      	cbz	r2, 8004cdc <OS_TmrInit+0x70>
    if (OSCfg_TmrTaskStkSize < OSCfg_StkSizeMin) {
 8004cb4:	4923      	ldr	r1, [pc, #140]	; (8004d44 <OS_TmrInit+0xd8>)
 8004cb6:	4824      	ldr	r0, [pc, #144]	; (8004d48 <OS_TmrInit+0xdc>)
 8004cb8:	6809      	ldr	r1, [r1, #0]
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	4281      	cmp	r1, r0
 8004cbe:	d324      	bcc.n	8004d0a <OS_TmrInit+0x9e>
    if (OSCfg_TmrTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {
 8004cc0:	4822      	ldr	r0, [pc, #136]	; (8004d4c <OS_TmrInit+0xe0>)
 8004cc2:	7800      	ldrb	r0, [r0, #0]
 8004cc4:	281e      	cmp	r0, #30
 8004cc6:	d90e      	bls.n	8004ce6 <OS_TmrInit+0x7a>
       *p_err = OS_ERR_TMR_PRIO_INVALID;
 8004cc8:	f247 3346 	movw	r3, #29510	; 0x7346
 8004ccc:	8023      	strh	r3, [r4, #0]
}
 8004cce:	b00b      	add	sp, #44	; 0x2c
 8004cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
        OSTmrUpdateCnt  = OSCfg_TickRate_Hz / (OS_RATE_HZ)10;
 8004cd2:	4a1f      	ldr	r2, [pc, #124]	; (8004d50 <OS_TmrInit+0xe4>)
 8004cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd8:	08db      	lsrs	r3, r3, #3
 8004cda:	e7d8      	b.n	8004c8e <OS_TmrInit+0x22>
       *p_err = OS_ERR_TMR_STK_INVALID;
 8004cdc:	f247 3347 	movw	r3, #29511	; 0x7347
 8004ce0:	8023      	strh	r3, [r4, #0]
}
 8004ce2:	b00b      	add	sp, #44	; 0x2c
 8004ce4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    OSTaskCreate((OS_TCB     *)&OSTmrTaskTCB,
 8004ce6:	4d1b      	ldr	r5, [pc, #108]	; (8004d54 <OS_TmrInit+0xe8>)
 8004ce8:	9408      	str	r4, [sp, #32]
 8004cea:	682d      	ldr	r5, [r5, #0]
 8004cec:	9103      	str	r1, [sp, #12]
 8004cee:	240b      	movs	r4, #11
 8004cf0:	e9cd 0200 	strd	r0, r2, [sp]
 8004cf4:	9306      	str	r3, [sp, #24]
 8004cf6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004cfa:	9502      	str	r5, [sp, #8]
 8004cfc:	9407      	str	r4, [sp, #28]
 8004cfe:	4a16      	ldr	r2, [pc, #88]	; (8004d58 <OS_TmrInit+0xec>)
 8004d00:	4916      	ldr	r1, [pc, #88]	; (8004d5c <OS_TmrInit+0xf0>)
 8004d02:	4817      	ldr	r0, [pc, #92]	; (8004d60 <OS_TmrInit+0xf4>)
 8004d04:	f7ff f988 	bl	8004018 <OSTaskCreate>
 8004d08:	e7e1      	b.n	8004cce <OS_TmrInit+0x62>
       *p_err = OS_ERR_TMR_STK_SIZE_INVALID;
 8004d0a:	f247 3348 	movw	r3, #29512	; 0x7348
 8004d0e:	8023      	strh	r3, [r4, #0]
}
 8004d10:	b00b      	add	sp, #44	; 0x2c
 8004d12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d14:	08008d94 	.word	0x08008d94
 8004d18:	20002d90 	.word	0x20002d90
 8004d1c:	20002d8c 	.word	0x20002d8c
 8004d20:	20002d98 	.word	0x20002d98
 8004d24:	08008d7c 	.word	0x08008d7c
 8004d28:	20002d9c 	.word	0x20002d9c
 8004d2c:	20002dac 	.word	0x20002dac
 8004d30:	20002ab0 	.word	0x20002ab0
 8004d34:	20002ac8 	.word	0x20002ac8
 8004d38:	08008e00 	.word	0x08008e00
 8004d3c:	20002c70 	.word	0x20002c70
 8004d40:	08008d98 	.word	0x08008d98
 8004d44:	08008da0 	.word	0x08008da0
 8004d48:	08008d78 	.word	0x08008d78
 8004d4c:	08008d90 	.word	0x08008d90
 8004d50:	cccccccd 	.word	0xcccccccd
 8004d54:	08008d9c 	.word	0x08008d9c
 8004d58:	08004b91 	.word	0x08004b91
 8004d5c:	08008e10 	.word	0x08008e10
 8004d60:	20002ae0 	.word	0x20002ae0

08004d64 <Help_Callback>:
    }



uint8_t Help_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 8004d64:	b538      	push	{r3, r4, r5, lr}

    static uint16_t count = 0;

    CLI_Command_t* command_list_ptr = Cammand_List[count];
 8004d66:	4d0a      	ldr	r5, [pc, #40]	; (8004d90 <Help_Callback+0x2c>)
 8004d68:	4b0a      	ldr	r3, [pc, #40]	; (8004d94 <Help_Callback+0x30>)
 8004d6a:	882c      	ldrh	r4, [r5, #0]

    strncpy(cli_tx_out_buffer, command_list_ptr->CLI_Command_Description, max_buffer_len);
 8004d6c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8004d70:	4608      	mov	r0, r1
 8004d72:	6859      	ldr	r1, [r3, #4]
 8004d74:	f002 fd52 	bl	800781c <strncpy>

    count++;
    if (count < Command_Count)
 8004d78:	4b07      	ldr	r3, [pc, #28]	; (8004d98 <Help_Callback+0x34>)
    count++;
 8004d7a:	3401      	adds	r4, #1
    if (count < Command_Count)
 8004d7c:	881b      	ldrh	r3, [r3, #0]
    count++;
 8004d7e:	b2a4      	uxth	r4, r4
    if (count < Command_Count)
 8004d80:	42a3      	cmp	r3, r4
	{
	return 1; //call again to generate next output
	}

    count = 0;
 8004d82:	bf98      	it	ls
 8004d84:	2000      	movls	r0, #0
    count++;
 8004d86:	802c      	strh	r4, [r5, #0]
	return 1; //call again to generate next output
 8004d88:	bf8c      	ite	hi
 8004d8a:	2001      	movhi	r0, #1
    count = 0;
 8004d8c:	8028      	strhls	r0, [r5, #0]

    return 0; // operation complete do not call again

    }
 8004d8e:	bd38      	pop	{r3, r4, r5, pc}
 8004d90:	2000070a 	.word	0x2000070a
 8004d94:	20000640 	.word	0x20000640
 8004d98:	20000708 	.word	0x20000708

08004d9c <CLI_Add_Cammand>:
    {
 8004d9c:	b570      	push	{r4, r5, r6, lr}
    if (Command_Count < MAX_COMMANDS)
 8004d9e:	4e09      	ldr	r6, [pc, #36]	; (8004dc4 <CLI_Add_Cammand+0x28>)
 8004da0:	8835      	ldrh	r5, [r6, #0]
 8004da2:	2d31      	cmp	r5, #49	; 0x31
 8004da4:	d80b      	bhi.n	8004dbe <CLI_Add_Cammand+0x22>
 8004da6:	4604      	mov	r4, r0
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 8004da8:	6800      	ldr	r0, [r0, #0]
 8004daa:	f7fb fabb 	bl	8000324 <strlen>
	Cammand_List[Command_Count] = command_def;
 8004dae:	4a06      	ldr	r2, [pc, #24]	; (8004dc8 <CLI_Add_Cammand+0x2c>)
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 8004db0:	8120      	strh	r0, [r4, #8]
	Command_Count++;
 8004db2:	1c6b      	adds	r3, r5, #1
	Cammand_List[Command_Count] = command_def;
 8004db4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
	Command_Count++;
 8004db8:	8033      	strh	r3, [r6, #0]
	return 1; // command added successful
 8004dba:	2001      	movs	r0, #1
    }
 8004dbc:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8004dbe:	2000      	movs	r0, #0
    }
 8004dc0:	bd70      	pop	{r4, r5, r6, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000708 	.word	0x20000708
 8004dc8:	20000640 	.word	0x20000640

08004dcc <CLI_Process_Cammand>:
    for (uint16_t i = 0; i < Command_Count; i++)
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <CLI_Process_Cammand+0x6c>)
    {
 8004dce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (uint16_t i = 0; i < Command_Count; i++)
 8004dd2:	881f      	ldrh	r7, [r3, #0]
    {
 8004dd4:	4606      	mov	r6, r0
 8004dd6:	4688      	mov	r8, r1
 8004dd8:	4691      	mov	r9, r2
    for (uint16_t i = 0; i < Command_Count; i++)
 8004dda:	b1a7      	cbz	r7, 8004e06 <CLI_Process_Cammand+0x3a>
 8004ddc:	4c17      	ldr	r4, [pc, #92]	; (8004e3c <CLI_Process_Cammand+0x70>)
 8004dde:	3f01      	subs	r7, #1
 8004de0:	b2bb      	uxth	r3, r7
 8004de2:	1d27      	adds	r7, r4, #4
 8004de4:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	command_list_ptr = Cammand_List[i];
 8004de8:	f854 5b04 	ldr.w	r5, [r4], #4
	if ((cli_in_buffer[cmd_len] == ' ')
 8004dec:	892b      	ldrh	r3, [r5, #8]
	    if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command,
 8004dee:	461a      	mov	r2, r3
		|| (cli_in_buffer[cmd_len] == 0x00))
 8004df0:	5cf3      	ldrb	r3, [r6, r3]
 8004df2:	f013 0fdf 	tst.w	r3, #223	; 0xdf
	    if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command,
 8004df6:	4630      	mov	r0, r6
		|| (cli_in_buffer[cmd_len] == 0x00))
 8004df8:	d103      	bne.n	8004e02 <CLI_Process_Cammand+0x36>
	    if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command,
 8004dfa:	6829      	ldr	r1, [r5, #0]
 8004dfc:	f002 fcfc 	bl	80077f8 <strncmp>
 8004e00:	b188      	cbz	r0, 8004e26 <CLI_Process_Cammand+0x5a>
    for (uint16_t i = 0; i < Command_Count; i++)
 8004e02:	42a7      	cmp	r7, r4
 8004e04:	d1f0      	bne.n	8004de8 <CLI_Process_Cammand+0x1c>
	strncpy(cli_tx_out_buffer, cli_in_buffer, max_buffer_len);
 8004e06:	464a      	mov	r2, r9
 8004e08:	4631      	mov	r1, r6
 8004e0a:	4640      	mov	r0, r8
 8004e0c:	f002 fd06 	bl	800781c <strncpy>
	strcat(cli_tx_out_buffer, CMD_Not_Recognized_Sring);
 8004e10:	4640      	mov	r0, r8
 8004e12:	f7fb fa87 	bl	8000324 <strlen>
 8004e16:	2251      	movs	r2, #81	; 0x51
 8004e18:	4440      	add	r0, r8
 8004e1a:	4909      	ldr	r1, [pc, #36]	; (8004e40 <CLI_Process_Cammand+0x74>)
 8004e1c:	f002 fcd0 	bl	80077c0 <memcpy>
    }
 8004e20:	2000      	movs	r0, #0
 8004e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (command_list_ptr->CLI_Callback != NULL)
 8004e26:	68eb      	ldr	r3, [r5, #12]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f9      	beq.n	8004e20 <CLI_Process_Cammand+0x54>
		xreturn = command_list_ptr->CLI_Callback(
 8004e2c:	464a      	mov	r2, r9
 8004e2e:	4641      	mov	r1, r8
 8004e30:	4630      	mov	r0, r6
    }
 8004e32:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		xreturn = command_list_ptr->CLI_Callback(
 8004e36:	4718      	bx	r3
 8004e38:	20000708 	.word	0x20000708
 8004e3c:	20000640 	.word	0x20000640
 8004e40:	08008e28 	.word	0x08008e28

08004e44 <CLI_Get_Parameter>:
    {
 8004e44:	b470      	push	{r4, r5, r6}
    *param_number_len = 0;
 8004e46:	2400      	movs	r4, #0
 8004e48:	8014      	strh	r4, [r2, #0]
    while (uxParametersFound < param_number)
 8004e4a:	b1a1      	cbz	r1, 8004e76 <CLI_Get_Parameter+0x32>
 8004e4c:	1e4e      	subs	r6, r1, #1
 8004e4e:	7803      	ldrb	r3, [r0, #0]
 8004e50:	b2b6      	uxth	r6, r6
	while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) != ' '))
 8004e52:	b91b      	cbnz	r3, 8004e5c <CLI_Get_Parameter+0x18>
 8004e54:	e00f      	b.n	8004e76 <CLI_Get_Parameter+0x32>
 8004e56:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004e5a:	b163      	cbz	r3, 8004e76 <CLI_Get_Parameter+0x32>
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d1fa      	bne.n	8004e56 <CLI_Get_Parameter+0x12>
	while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) == ' '))
 8004e60:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d0fb      	beq.n	8004e60 <CLI_Get_Parameter+0x1c>
	if (*cli_in_buffer != 0x00)
 8004e68:	b12b      	cbz	r3, 8004e76 <CLI_Get_Parameter+0x32>
	    if (uxParametersFound == param_number)
 8004e6a:	42b4      	cmp	r4, r6
 8004e6c:	d006      	beq.n	8004e7c <CLI_Get_Parameter+0x38>
 8004e6e:	3401      	adds	r4, #1
    while (uxParametersFound < param_number)
 8004e70:	b2a5      	uxth	r5, r4
 8004e72:	42a9      	cmp	r1, r5
 8004e74:	d8ed      	bhi.n	8004e52 <CLI_Get_Parameter+0xe>
		    pcReturn = NULL;
 8004e76:	2000      	movs	r0, #0
    }
 8004e78:	bc70      	pop	{r4, r5, r6}
 8004e7a:	4770      	bx	lr
		while (((*cli_in_buffer) != 0x00)
 8004e7c:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8004e80:	d0f9      	beq.n	8004e76 <CLI_Get_Parameter+0x32>
	    cli_in_buffer++;
 8004e82:	4604      	mov	r4, r0
		while (((*cli_in_buffer) != 0x00)
 8004e84:	2101      	movs	r1, #1
 8004e86:	e000      	b.n	8004e8a <CLI_Get_Parameter+0x46>
 8004e88:	4619      	mov	r1, r3
		    (*param_number_len)++;
 8004e8a:	8011      	strh	r1, [r2, #0]
		while (((*cli_in_buffer) != 0x00)
 8004e8c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8004e90:	1c4b      	adds	r3, r1, #1
 8004e92:	f015 0fdf 	tst.w	r5, #223	; 0xdf
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	d1f6      	bne.n	8004e88 <CLI_Get_Parameter+0x44>
		if (*param_number_len == 0)
 8004e9a:	2900      	cmp	r1, #0
 8004e9c:	d0eb      	beq.n	8004e76 <CLI_Get_Parameter+0x32>
    }
 8004e9e:	bc70      	pop	{r4, r5, r6}
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop

08004ea4 <CLI_Add_Help_Cammand>:
    // require only if generated output in callback is larger than output buffer
    // to split generated output
	};

void CLI_Add_Help_Cammand()
    {
 8004ea4:	b570      	push	{r4, r5, r6, lr}
    if (Command_Count < MAX_COMMANDS)
 8004ea6:	4d07      	ldr	r5, [pc, #28]	; (8004ec4 <CLI_Add_Help_Cammand+0x20>)
 8004ea8:	882c      	ldrh	r4, [r5, #0]
 8004eaa:	2c31      	cmp	r4, #49	; 0x31
 8004eac:	d809      	bhi.n	8004ec2 <CLI_Add_Help_Cammand+0x1e>
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 8004eae:	4e06      	ldr	r6, [pc, #24]	; (8004ec8 <CLI_Add_Help_Cammand+0x24>)
 8004eb0:	6830      	ldr	r0, [r6, #0]
 8004eb2:	f7fb fa37 	bl	8000324 <strlen>
	Cammand_List[Command_Count] = command_def;
 8004eb6:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <CLI_Add_Help_Cammand+0x28>)
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 8004eb8:	8130      	strh	r0, [r6, #8]
	Cammand_List[Command_Count] = command_def;
 8004eba:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
	Command_Count++;
 8004ebe:	3401      	adds	r4, #1
 8004ec0:	802c      	strh	r4, [r5, #0]
    CLI_Add_Cammand(&Help_Defination);
    }
 8004ec2:	bd70      	pop	{r4, r5, r6, pc}
 8004ec4:	20000708 	.word	0x20000708
 8004ec8:	20000008 	.word	0x20000008
 8004ecc:	20000640 	.word	0x20000640

08004ed0 <UART_Print_Task>:
                  &os_err);

    }

static  void  UART_Print_Task (void *p_arg)
{
 8004ed0:	b500      	push	{lr}
 8004ed2:	b085      	sub	sp, #20
    OS_ERR  os_err;

    OSMutexPend(&CLI_UART_Mutex,0,OS_OPT_PEND_BLOCKING,0,&os_err);
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	f10d 040e 	add.w	r4, sp, #14
 8004eda:	461a      	mov	r2, r3
 8004edc:	4619      	mov	r1, r3
 8004ede:	4808      	ldr	r0, [pc, #32]	; (8004f00 <UART_Print_Task+0x30>)
 8004ee0:	9400      	str	r4, [sp, #0]
 8004ee2:	f7fe fcd9 	bl	8003898 <OSMutexPend>

    CLI_UART_Send_String("\r\nSTM32 CLI over uart demo.\r\nCalculator app\r\n");
 8004ee6:	4807      	ldr	r0, [pc, #28]	; (8004f04 <UART_Print_Task+0x34>)
 8004ee8:	f000 fd72 	bl	80059d0 <CLI_UART_Send_String>

    OSMutexPost(&CLI_UART_Mutex,OS_OPT_POST_NONE,&os_err);
 8004eec:	2100      	movs	r1, #0
 8004eee:	4804      	ldr	r0, [pc, #16]	; (8004f00 <UART_Print_Task+0x30>)
 8004ef0:	4622      	mov	r2, r4
 8004ef2:	f7fe fd91 	bl	8003a18 <OSMutexPost>

    OS_TaskSuspend((OS_TCB*)&UART_Task_TCB,&os_err);
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	4803      	ldr	r0, [pc, #12]	; (8004f08 <UART_Print_Task+0x38>)
 8004efa:	f7ff facd 	bl	8004498 <OS_TaskSuspend>
 8004efe:	e7fe      	b.n	8004efe <UART_Print_Task+0x2e>
 8004f00:	20002db8 	.word	0x20002db8
 8004f04:	08008ee0 	.word	0x08008ee0
 8004f08:	20000b0c 	.word	0x20000b0c

08004f0c <Add_Callback>:
    {
 8004f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f10:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 8004f12:	ad06      	add	r5, sp, #24
 8004f14:	2300      	movs	r3, #0
    int32_t sum = 0;
 8004f16:	4698      	mov	r8, r3
    uint16_t param_len = 0;
 8004f18:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 8004f1c:	461c      	mov	r4, r3
    char str_to_int[11] = "0";
 8004f1e:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 8004f20:	2301      	movs	r3, #1
    {
 8004f22:	4606      	mov	r6, r0
 8004f24:	468a      	mov	sl, r1
    uint8_t is_command_valid = 1;
 8004f26:	9301      	str	r3, [sp, #4]
    char str_to_int[11] = "0";
 8004f28:	f04f 0930 	mov.w	r9, #48	; 0x30
	param_number++; //param number, starting from first
 8004f2c:	1c63      	adds	r3, r4, #1
 8004f2e:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 8004f32:	4659      	mov	r1, fp
 8004f34:	462a      	mov	r2, r5
 8004f36:	4630      	mov	r0, r6
 8004f38:	f7ff ff84 	bl	8004e44 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	d07d      	beq.n	800503c <Add_Callback+0x130>
    char str_to_int[11] = "0";
 8004f40:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8004f44:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 8004f48:	7802      	ldrb	r2, [r0, #0]
 8004f4a:	2a2d      	cmp	r2, #45	; 0x2d
 8004f4c:	bf03      	ittte	eq
 8004f4e:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 8004f50:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 8004f54:	3001      	addeq	r0, #1
    if (*param == '-')
 8004f56:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 8004f58:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004f5c:	d067      	beq.n	800502e <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004f5e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004f62:	2909      	cmp	r1, #9
 8004f64:	d85f      	bhi.n	8005026 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004f66:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 8004f6a:	7842      	ldrb	r2, [r0, #1]
 8004f6c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004f70:	d05d      	beq.n	800502e <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004f72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004f76:	2909      	cmp	r1, #9
 8004f78:	d855      	bhi.n	8005026 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004f7a:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 8004f7e:	7882      	ldrb	r2, [r0, #2]
 8004f80:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004f84:	d053      	beq.n	800502e <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004f86:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004f8a:	2909      	cmp	r1, #9
 8004f8c:	d84b      	bhi.n	8005026 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004f8e:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 8004f92:	78c2      	ldrb	r2, [r0, #3]
 8004f94:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004f98:	d049      	beq.n	800502e <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004f9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004f9e:	2909      	cmp	r1, #9
 8004fa0:	d841      	bhi.n	8005026 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004fa2:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 8004fa6:	7902      	ldrb	r2, [r0, #4]
 8004fa8:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004fac:	d03f      	beq.n	800502e <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004fae:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004fb2:	2909      	cmp	r1, #9
 8004fb4:	d837      	bhi.n	8005026 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004fb6:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 8004fba:	7942      	ldrb	r2, [r0, #5]
 8004fbc:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004fc0:	d035      	beq.n	800502e <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004fc2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004fc6:	2909      	cmp	r1, #9
 8004fc8:	d82d      	bhi.n	8005026 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004fca:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 8004fce:	7982      	ldrb	r2, [r0, #6]
 8004fd0:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004fd4:	d02b      	beq.n	800502e <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004fd6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004fda:	2909      	cmp	r1, #9
 8004fdc:	d823      	bhi.n	8005026 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004fde:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 8004fe2:	79c2      	ldrb	r2, [r0, #7]
 8004fe4:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004fe8:	d021      	beq.n	800502e <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004fea:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004fee:	2909      	cmp	r1, #9
 8004ff0:	d819      	bhi.n	8005026 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004ff2:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 8004ff6:	7a02      	ldrb	r2, [r0, #8]
 8004ff8:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004ffc:	d017      	beq.n	800502e <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004ffe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005002:	2909      	cmp	r1, #9
 8005004:	d80f      	bhi.n	8005026 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8005006:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 800500a:	7a42      	ldrb	r2, [r0, #9]
 800500c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005010:	d00d      	beq.n	800502e <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8005012:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005016:	2909      	cmp	r1, #9
 8005018:	d805      	bhi.n	8005026 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 800501a:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 800501e:	7a82      	ldrb	r2, [r0, #10]
 8005020:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005024:	d003      	beq.n	800502e <Add_Callback+0x122>
		is_command_valid = 0;
 8005026:	2300      	movs	r3, #0
 8005028:	9301      	str	r3, [sp, #4]
 800502a:	465c      	mov	r4, fp
 800502c:	e77e      	b.n	8004f2c <Add_Callback+0x20>
	*value = sign * atoi(str_to_int);
 800502e:	a803      	add	r0, sp, #12
 8005030:	f002 fb97 	bl	8007762 <atoi>
		sum += tmp;
 8005034:	fb04 8800 	mla	r8, r4, r0, r8
		is_command_valid = 0;
 8005038:	465c      	mov	r4, fp
 800503a:	e777      	b.n	8004f2c <Add_Callback+0x20>
    if (!param_count)
 800503c:	b10c      	cbz	r4, 8005042 <Add_Callback+0x136>
    if (is_command_valid)
 800503e:	9b01      	ldr	r3, [sp, #4]
 8005040:	b9eb      	cbnz	r3, 800507e <Add_Callback+0x172>
    strcat(cli_tx_out_buffer, cmd1);
 8005042:	4650      	mov	r0, sl
 8005044:	f7fb f96e 	bl	8000324 <strlen>
 8005048:	4c11      	ldr	r4, [pc, #68]	; (8005090 <Add_Callback+0x184>)
 800504a:	4605      	mov	r5, r0
 800504c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800504e:	eb0a 0705 	add.w	r7, sl, r5
 8005052:	f84a 0005 	str.w	r0, [sl, r5]
 8005056:	8824      	ldrh	r4, [r4, #0]
 8005058:	6079      	str	r1, [r7, #4]
 800505a:	f105 0012 	add.w	r0, r5, #18
 800505e:	60ba      	str	r2, [r7, #8]
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 8005064:	4450      	add	r0, sl
 8005066:	4631      	mov	r1, r6
 8005068:	f002 fbbd 	bl	80077e6 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 800506c:	4b09      	ldr	r3, [pc, #36]	; (8005094 <Add_Callback+0x188>)
 800506e:	881a      	ldrh	r2, [r3, #0]
 8005070:	789b      	ldrb	r3, [r3, #2]
 8005072:	8002      	strh	r2, [r0, #0]
 8005074:	7083      	strb	r3, [r0, #2]
    }
 8005076:	2000      	movs	r0, #0
 8005078:	b007      	add	sp, #28
 800507a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) sum);
 800507e:	4642      	mov	r2, r8
 8005080:	4650      	mov	r0, sl
 8005082:	4905      	ldr	r1, [pc, #20]	; (8005098 <Add_Callback+0x18c>)
 8005084:	f002 f98c 	bl	80073a0 <sprintf_>
    }
 8005088:	2000      	movs	r0, #0
 800508a:	b007      	add	sp, #28
 800508c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005090:	08008ebc 	.word	0x08008ebc
 8005094:	08008eb8 	.word	0x08008eb8
 8005098:	08008eb4 	.word	0x08008eb4

0800509c <Mul_Callback>:
    {
 800509c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050a0:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 80050a2:	ad06      	add	r5, sp, #24
 80050a4:	2300      	movs	r3, #0
    int32_t rslt = 1;
 80050a6:	f04f 0801 	mov.w	r8, #1
    uint16_t param_len = 0;
 80050aa:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 80050ae:	461c      	mov	r4, r3
    {
 80050b0:	4606      	mov	r6, r0
 80050b2:	468a      	mov	sl, r1
    char str_to_int[11] = "0";
 80050b4:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 80050b6:	f8cd 8004 	str.w	r8, [sp, #4]
    char str_to_int[11] = "0";
 80050ba:	f04f 0930 	mov.w	r9, #48	; 0x30
	param_number++; //param number, starting from first
 80050be:	1c63      	adds	r3, r4, #1
 80050c0:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 80050c4:	4659      	mov	r1, fp
 80050c6:	462a      	mov	r2, r5
 80050c8:	4630      	mov	r0, r6
 80050ca:	f7ff febb 	bl	8004e44 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 80050ce:	2800      	cmp	r0, #0
 80050d0:	d07f      	beq.n	80051d2 <Mul_Callback+0x136>
    char str_to_int[11] = "0";
 80050d2:	e9cd 9703 	strd	r9, r7, [sp, #12]
 80050d6:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 80050da:	7802      	ldrb	r2, [r0, #0]
 80050dc:	2a2d      	cmp	r2, #45	; 0x2d
 80050de:	bf03      	ittte	eq
 80050e0:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 80050e2:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 80050e6:	3001      	addeq	r0, #1
    if (*param == '-')
 80050e8:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 80050ea:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80050ee:	d067      	beq.n	80051c0 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80050f0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80050f4:	2909      	cmp	r1, #9
 80050f6:	d85f      	bhi.n	80051b8 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 80050f8:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 80050fc:	7842      	ldrb	r2, [r0, #1]
 80050fe:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005102:	d05d      	beq.n	80051c0 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005104:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005108:	2909      	cmp	r1, #9
 800510a:	d855      	bhi.n	80051b8 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 800510c:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 8005110:	7882      	ldrb	r2, [r0, #2]
 8005112:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005116:	d053      	beq.n	80051c0 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005118:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800511c:	2909      	cmp	r1, #9
 800511e:	d84b      	bhi.n	80051b8 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005120:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 8005124:	78c2      	ldrb	r2, [r0, #3]
 8005126:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800512a:	d049      	beq.n	80051c0 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 800512c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005130:	2909      	cmp	r1, #9
 8005132:	d841      	bhi.n	80051b8 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005134:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 8005138:	7902      	ldrb	r2, [r0, #4]
 800513a:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800513e:	d03f      	beq.n	80051c0 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005140:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005144:	2909      	cmp	r1, #9
 8005146:	d837      	bhi.n	80051b8 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005148:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 800514c:	7942      	ldrb	r2, [r0, #5]
 800514e:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005152:	d035      	beq.n	80051c0 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005154:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005158:	2909      	cmp	r1, #9
 800515a:	d82d      	bhi.n	80051b8 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 800515c:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 8005160:	7982      	ldrb	r2, [r0, #6]
 8005162:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005166:	d02b      	beq.n	80051c0 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005168:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800516c:	2909      	cmp	r1, #9
 800516e:	d823      	bhi.n	80051b8 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005170:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 8005174:	79c2      	ldrb	r2, [r0, #7]
 8005176:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800517a:	d021      	beq.n	80051c0 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 800517c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005180:	2909      	cmp	r1, #9
 8005182:	d819      	bhi.n	80051b8 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005184:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 8005188:	7a02      	ldrb	r2, [r0, #8]
 800518a:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800518e:	d017      	beq.n	80051c0 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005190:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005194:	2909      	cmp	r1, #9
 8005196:	d80f      	bhi.n	80051b8 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005198:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 800519c:	7a42      	ldrb	r2, [r0, #9]
 800519e:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80051a2:	d00d      	beq.n	80051c0 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80051a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80051a8:	2909      	cmp	r1, #9
 80051aa:	d805      	bhi.n	80051b8 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 80051ac:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 80051b0:	7a82      	ldrb	r2, [r0, #10]
 80051b2:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80051b6:	d003      	beq.n	80051c0 <Mul_Callback+0x124>
		is_command_valid = 0;
 80051b8:	2300      	movs	r3, #0
 80051ba:	9301      	str	r3, [sp, #4]
 80051bc:	465c      	mov	r4, fp
 80051be:	e77e      	b.n	80050be <Mul_Callback+0x22>
	*value = sign * atoi(str_to_int);
 80051c0:	a803      	add	r0, sp, #12
 80051c2:	f002 face 	bl	8007762 <atoi>
 80051c6:	fb04 f000 	mul.w	r0, r4, r0
		rslt *= tmp;
 80051ca:	fb00 f808 	mul.w	r8, r0, r8
		is_command_valid = 0;
 80051ce:	465c      	mov	r4, fp
 80051d0:	e775      	b.n	80050be <Mul_Callback+0x22>
    if (!param_count)
 80051d2:	b10c      	cbz	r4, 80051d8 <Mul_Callback+0x13c>
    if (is_command_valid)
 80051d4:	9b01      	ldr	r3, [sp, #4]
 80051d6:	b9eb      	cbnz	r3, 8005214 <Mul_Callback+0x178>
    strcat(cli_tx_out_buffer, cmd1);
 80051d8:	4650      	mov	r0, sl
 80051da:	f7fb f8a3 	bl	8000324 <strlen>
 80051de:	4c12      	ldr	r4, [pc, #72]	; (8005228 <Mul_Callback+0x18c>)
 80051e0:	4605      	mov	r5, r0
 80051e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e4:	eb0a 0705 	add.w	r7, sl, r5
 80051e8:	f84a 0005 	str.w	r0, [sl, r5]
 80051ec:	8824      	ldrh	r4, [r4, #0]
 80051ee:	6079      	str	r1, [r7, #4]
 80051f0:	f105 0012 	add.w	r0, r5, #18
 80051f4:	60ba      	str	r2, [r7, #8]
 80051f6:	60fb      	str	r3, [r7, #12]
 80051f8:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 80051fa:	4450      	add	r0, sl
 80051fc:	4631      	mov	r1, r6
 80051fe:	f002 faf2 	bl	80077e6 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 8005202:	4b0a      	ldr	r3, [pc, #40]	; (800522c <Mul_Callback+0x190>)
 8005204:	881a      	ldrh	r2, [r3, #0]
 8005206:	789b      	ldrb	r3, [r3, #2]
 8005208:	8002      	strh	r2, [r0, #0]
 800520a:	7083      	strb	r3, [r0, #2]
    }
 800520c:	2000      	movs	r0, #0
 800520e:	b007      	add	sp, #28
 8005210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 8005214:	4642      	mov	r2, r8
 8005216:	4650      	mov	r0, sl
 8005218:	4905      	ldr	r1, [pc, #20]	; (8005230 <Mul_Callback+0x194>)
 800521a:	f002 f8c1 	bl	80073a0 <sprintf_>
    }
 800521e:	2000      	movs	r0, #0
 8005220:	b007      	add	sp, #28
 8005222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005226:	bf00      	nop
 8005228:	08008ebc 	.word	0x08008ebc
 800522c:	08008eb8 	.word	0x08008eb8
 8005230:	08008eb4 	.word	0x08008eb4

08005234 <Div_Callback>:
    {
 8005234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005238:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 800523a:	ad06      	add	r5, sp, #24
 800523c:	2300      	movs	r3, #0
    int32_t rslt = 1;
 800523e:	f04f 0801 	mov.w	r8, #1
    uint16_t param_len = 0;
 8005242:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 8005246:	461c      	mov	r4, r3
    {
 8005248:	4606      	mov	r6, r0
 800524a:	468a      	mov	sl, r1
    char str_to_int[11] = "0";
 800524c:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 800524e:	f8cd 8004 	str.w	r8, [sp, #4]
    char str_to_int[11] = "0";
 8005252:	f04f 0930 	mov.w	r9, #48	; 0x30
	param_number++; //param number, starting from first
 8005256:	1c63      	adds	r3, r4, #1
 8005258:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 800525c:	4659      	mov	r1, fp
 800525e:	462a      	mov	r2, r5
 8005260:	4630      	mov	r0, r6
 8005262:	f7ff fdef 	bl	8004e44 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 8005266:	2800      	cmp	r0, #0
 8005268:	f000 8083 	beq.w	8005372 <Div_Callback+0x13e>
    char str_to_int[11] = "0";
 800526c:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8005270:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 8005274:	7802      	ldrb	r2, [r0, #0]
 8005276:	2a2d      	cmp	r2, #45	; 0x2d
 8005278:	bf03      	ittte	eq
 800527a:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 800527c:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 8005280:	3001      	addeq	r0, #1
    if (*param == '-')
 8005282:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 8005284:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005288:	d067      	beq.n	800535a <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 800528a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800528e:	2909      	cmp	r1, #9
 8005290:	d85f      	bhi.n	8005352 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8005292:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 8005296:	7842      	ldrb	r2, [r0, #1]
 8005298:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800529c:	d05d      	beq.n	800535a <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 800529e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80052a2:	2909      	cmp	r1, #9
 80052a4:	d855      	bhi.n	8005352 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 80052a6:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 80052aa:	7882      	ldrb	r2, [r0, #2]
 80052ac:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80052b0:	d053      	beq.n	800535a <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 80052b2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80052b6:	2909      	cmp	r1, #9
 80052b8:	d84b      	bhi.n	8005352 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 80052ba:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 80052be:	78c2      	ldrb	r2, [r0, #3]
 80052c0:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80052c4:	d049      	beq.n	800535a <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 80052c6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80052ca:	2909      	cmp	r1, #9
 80052cc:	d841      	bhi.n	8005352 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 80052ce:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 80052d2:	7902      	ldrb	r2, [r0, #4]
 80052d4:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80052d8:	d03f      	beq.n	800535a <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 80052da:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80052de:	2909      	cmp	r1, #9
 80052e0:	d837      	bhi.n	8005352 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 80052e2:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 80052e6:	7942      	ldrb	r2, [r0, #5]
 80052e8:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80052ec:	d035      	beq.n	800535a <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 80052ee:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80052f2:	2909      	cmp	r1, #9
 80052f4:	d82d      	bhi.n	8005352 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 80052f6:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 80052fa:	7982      	ldrb	r2, [r0, #6]
 80052fc:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005300:	d02b      	beq.n	800535a <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8005302:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005306:	2909      	cmp	r1, #9
 8005308:	d823      	bhi.n	8005352 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 800530a:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 800530e:	79c2      	ldrb	r2, [r0, #7]
 8005310:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005314:	d021      	beq.n	800535a <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8005316:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800531a:	2909      	cmp	r1, #9
 800531c:	d819      	bhi.n	8005352 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 800531e:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 8005322:	7a02      	ldrb	r2, [r0, #8]
 8005324:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005328:	d017      	beq.n	800535a <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 800532a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800532e:	2909      	cmp	r1, #9
 8005330:	d80f      	bhi.n	8005352 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8005332:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 8005336:	7a42      	ldrb	r2, [r0, #9]
 8005338:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800533c:	d00d      	beq.n	800535a <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 800533e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005342:	2909      	cmp	r1, #9
 8005344:	d805      	bhi.n	8005352 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8005346:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 800534a:	7a82      	ldrb	r2, [r0, #10]
 800534c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005350:	d003      	beq.n	800535a <Div_Callback+0x126>
		is_command_valid = 0;
 8005352:	2300      	movs	r3, #0
 8005354:	9301      	str	r3, [sp, #4]
	param_number++; //param number, starting from first
 8005356:	465c      	mov	r4, fp
 8005358:	e77d      	b.n	8005256 <Div_Callback+0x22>
	*value = sign * atoi(str_to_int);
 800535a:	a803      	add	r0, sp, #12
 800535c:	f002 fa01 	bl	8007762 <atoi>
		if (param_count == 1)
 8005360:	f1bb 0f01 	cmp.w	fp, #1
	*value = sign * atoi(str_to_int);
 8005364:	fb04 f000 	mul.w	r0, r4, r0
		if (param_count == 1)
 8005368:	d025      	beq.n	80053b6 <Div_Callback+0x182>
		    rslt /= tmp;
 800536a:	fb98 f8f0 	sdiv	r8, r8, r0
	param_number++; //param number, starting from first
 800536e:	465c      	mov	r4, fp
 8005370:	e771      	b.n	8005256 <Div_Callback+0x22>
    if (param_count != 2)
 8005372:	2c02      	cmp	r4, #2
 8005374:	d101      	bne.n	800537a <Div_Callback+0x146>
    if (is_command_valid)
 8005376:	9b01      	ldr	r3, [sp, #4]
 8005378:	bb03      	cbnz	r3, 80053bc <Div_Callback+0x188>
    strcat(cli_tx_out_buffer, cmd1);
 800537a:	4650      	mov	r0, sl
 800537c:	f7fa ffd2 	bl	8000324 <strlen>
 8005380:	4c13      	ldr	r4, [pc, #76]	; (80053d0 <Div_Callback+0x19c>)
 8005382:	4605      	mov	r5, r0
 8005384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005386:	eb0a 0705 	add.w	r7, sl, r5
 800538a:	f84a 0005 	str.w	r0, [sl, r5]
 800538e:	8824      	ldrh	r4, [r4, #0]
 8005390:	6079      	str	r1, [r7, #4]
 8005392:	f105 0012 	add.w	r0, r5, #18
 8005396:	60ba      	str	r2, [r7, #8]
 8005398:	60fb      	str	r3, [r7, #12]
 800539a:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 800539c:	4450      	add	r0, sl
 800539e:	4631      	mov	r1, r6
 80053a0:	f002 fa21 	bl	80077e6 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 80053a4:	4b0b      	ldr	r3, [pc, #44]	; (80053d4 <Div_Callback+0x1a0>)
 80053a6:	881a      	ldrh	r2, [r3, #0]
 80053a8:	789b      	ldrb	r3, [r3, #2]
 80053aa:	8002      	strh	r2, [r0, #0]
 80053ac:	7083      	strb	r3, [r0, #2]
    }
 80053ae:	2000      	movs	r0, #0
 80053b0:	b007      	add	sp, #28
 80053b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*value = sign * atoi(str_to_int);
 80053b6:	4680      	mov	r8, r0
	param_number++; //param number, starting from first
 80053b8:	465c      	mov	r4, fp
 80053ba:	e74c      	b.n	8005256 <Div_Callback+0x22>
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 80053bc:	4642      	mov	r2, r8
 80053be:	4650      	mov	r0, sl
 80053c0:	4905      	ldr	r1, [pc, #20]	; (80053d8 <Div_Callback+0x1a4>)
 80053c2:	f001 ffed 	bl	80073a0 <sprintf_>
    }
 80053c6:	2000      	movs	r0, #0
 80053c8:	b007      	add	sp, #28
 80053ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ce:	bf00      	nop
 80053d0:	08008ebc 	.word	0x08008ebc
 80053d4:	08008eb8 	.word	0x08008eb8
 80053d8:	08008eb4 	.word	0x08008eb4

080053dc <Sqrt_Callback>:
    {
 80053dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e0:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 80053e2:	ad06      	add	r5, sp, #24
 80053e4:	2300      	movs	r3, #0
    int32_t rslt = 1;
 80053e6:	f04f 0a01 	mov.w	sl, #1
    uint16_t param_len = 0;
 80053ea:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 80053ee:	461c      	mov	r4, r3
    {
 80053f0:	4606      	mov	r6, r0
 80053f2:	4689      	mov	r9, r1
    char str_to_int[11] = "0";
 80053f4:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 80053f6:	f8cd a004 	str.w	sl, [sp, #4]
    char str_to_int[11] = "0";
 80053fa:	f04f 0830 	mov.w	r8, #48	; 0x30
	param_number++; //param number, starting from first
 80053fe:	1c63      	adds	r3, r4, #1
 8005400:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 8005404:	4659      	mov	r1, fp
 8005406:	462a      	mov	r2, r5
 8005408:	4630      	mov	r0, r6
 800540a:	f7ff fd1b 	bl	8004e44 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 800540e:	2800      	cmp	r0, #0
 8005410:	f000 8089 	beq.w	8005526 <Sqrt_Callback+0x14a>
    char str_to_int[11] = "0";
 8005414:	e9cd 8703 	strd	r8, r7, [sp, #12]
 8005418:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 800541c:	7802      	ldrb	r2, [r0, #0]
 800541e:	2a2d      	cmp	r2, #45	; 0x2d
 8005420:	bf03      	ittte	eq
 8005422:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 8005424:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 8005428:	3001      	addeq	r0, #1
    if (*param == '-')
 800542a:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 800542c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005430:	d067      	beq.n	8005502 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8005432:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005436:	2909      	cmp	r1, #9
 8005438:	d85f      	bhi.n	80054fa <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 800543a:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 800543e:	7842      	ldrb	r2, [r0, #1]
 8005440:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005444:	d05d      	beq.n	8005502 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8005446:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800544a:	2909      	cmp	r1, #9
 800544c:	d855      	bhi.n	80054fa <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 800544e:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 8005452:	7882      	ldrb	r2, [r0, #2]
 8005454:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005458:	d053      	beq.n	8005502 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 800545a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800545e:	2909      	cmp	r1, #9
 8005460:	d84b      	bhi.n	80054fa <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 8005462:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 8005466:	78c2      	ldrb	r2, [r0, #3]
 8005468:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800546c:	d049      	beq.n	8005502 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 800546e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005472:	2909      	cmp	r1, #9
 8005474:	d841      	bhi.n	80054fa <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 8005476:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 800547a:	7902      	ldrb	r2, [r0, #4]
 800547c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005480:	d03f      	beq.n	8005502 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8005482:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005486:	2909      	cmp	r1, #9
 8005488:	d837      	bhi.n	80054fa <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 800548a:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 800548e:	7942      	ldrb	r2, [r0, #5]
 8005490:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005494:	d035      	beq.n	8005502 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8005496:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800549a:	2909      	cmp	r1, #9
 800549c:	d82d      	bhi.n	80054fa <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 800549e:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 80054a2:	7982      	ldrb	r2, [r0, #6]
 80054a4:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80054a8:	d02b      	beq.n	8005502 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 80054aa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80054ae:	2909      	cmp	r1, #9
 80054b0:	d823      	bhi.n	80054fa <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 80054b2:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 80054b6:	79c2      	ldrb	r2, [r0, #7]
 80054b8:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80054bc:	d021      	beq.n	8005502 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 80054be:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80054c2:	2909      	cmp	r1, #9
 80054c4:	d819      	bhi.n	80054fa <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 80054c6:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 80054ca:	7a02      	ldrb	r2, [r0, #8]
 80054cc:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80054d0:	d017      	beq.n	8005502 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 80054d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80054d6:	2909      	cmp	r1, #9
 80054d8:	d80f      	bhi.n	80054fa <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 80054da:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 80054de:	7a42      	ldrb	r2, [r0, #9]
 80054e0:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80054e4:	d00d      	beq.n	8005502 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 80054e6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80054ea:	2909      	cmp	r1, #9
 80054ec:	d805      	bhi.n	80054fa <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 80054ee:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 80054f2:	7a82      	ldrb	r2, [r0, #10]
 80054f4:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80054f8:	d003      	beq.n	8005502 <Sqrt_Callback+0x126>
		is_command_valid = 0;
 80054fa:	2300      	movs	r3, #0
 80054fc:	9301      	str	r3, [sp, #4]
 80054fe:	465c      	mov	r4, fp
 8005500:	e77d      	b.n	80053fe <Sqrt_Callback+0x22>
	*value = sign * atoi(str_to_int);
 8005502:	a803      	add	r0, sp, #12
 8005504:	f002 f92d 	bl	8007762 <atoi>
		rslt = sqrt(tmp);
 8005508:	fb04 f000 	mul.w	r0, r4, r0
 800550c:	f7fb f864 	bl	80005d8 <__aeabi_i2d>
 8005510:	ec41 0b10 	vmov	d0, r0, r1
 8005514:	f002 fc36 	bl	8007d84 <sqrt>
 8005518:	ec51 0b10 	vmov	r0, r1, d0
 800551c:	f7fb fb76 	bl	8000c0c <__aeabi_d2iz>
		is_command_valid = 0;
 8005520:	465c      	mov	r4, fp
		rslt = sqrt(tmp);
 8005522:	4682      	mov	sl, r0
 8005524:	e76b      	b.n	80053fe <Sqrt_Callback+0x22>
    if (param_count != 1)
 8005526:	2c01      	cmp	r4, #1
 8005528:	d101      	bne.n	800552e <Sqrt_Callback+0x152>
    if (is_command_valid)
 800552a:	9b01      	ldr	r3, [sp, #4]
 800552c:	b9eb      	cbnz	r3, 800556a <Sqrt_Callback+0x18e>
    strcat(cli_tx_out_buffer, cmd1);
 800552e:	4648      	mov	r0, r9
 8005530:	f7fa fef8 	bl	8000324 <strlen>
 8005534:	4c11      	ldr	r4, [pc, #68]	; (800557c <Sqrt_Callback+0x1a0>)
 8005536:	4605      	mov	r5, r0
 8005538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800553a:	eb09 0705 	add.w	r7, r9, r5
 800553e:	f849 0005 	str.w	r0, [r9, r5]
 8005542:	8824      	ldrh	r4, [r4, #0]
 8005544:	6079      	str	r1, [r7, #4]
 8005546:	f105 0012 	add.w	r0, r5, #18
 800554a:	60ba      	str	r2, [r7, #8]
 800554c:	60fb      	str	r3, [r7, #12]
 800554e:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 8005550:	4448      	add	r0, r9
 8005552:	4631      	mov	r1, r6
 8005554:	f002 f947 	bl	80077e6 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 8005558:	4b09      	ldr	r3, [pc, #36]	; (8005580 <Sqrt_Callback+0x1a4>)
 800555a:	881a      	ldrh	r2, [r3, #0]
 800555c:	789b      	ldrb	r3, [r3, #2]
 800555e:	8002      	strh	r2, [r0, #0]
 8005560:	7083      	strb	r3, [r0, #2]
    }
 8005562:	2000      	movs	r0, #0
 8005564:	b007      	add	sp, #28
 8005566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 800556a:	4652      	mov	r2, sl
 800556c:	4648      	mov	r0, r9
 800556e:	4905      	ldr	r1, [pc, #20]	; (8005584 <Sqrt_Callback+0x1a8>)
 8005570:	f001 ff16 	bl	80073a0 <sprintf_>
    }
 8005574:	2000      	movs	r0, #0
 8005576:	b007      	add	sp, #28
 8005578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557c:	08008ebc 	.word	0x08008ebc
 8005580:	08008eb8 	.word	0x08008eb8
 8005584:	08008eb4 	.word	0x08008eb4

08005588 <Sub_Callback>:
    {
 8005588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 800558e:	ad06      	add	r5, sp, #24
 8005590:	2300      	movs	r3, #0
    int32_t rslt = 0;
 8005592:	4698      	mov	r8, r3
    uint16_t param_len = 0;
 8005594:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 8005598:	461c      	mov	r4, r3
    char str_to_int[11] = "0";
 800559a:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 800559c:	2301      	movs	r3, #1
    {
 800559e:	4606      	mov	r6, r0
 80055a0:	468a      	mov	sl, r1
    uint8_t is_command_valid = 1;
 80055a2:	9301      	str	r3, [sp, #4]
    char str_to_int[11] = "0";
 80055a4:	f04f 0930 	mov.w	r9, #48	; 0x30
	param_number++; //param number, starting from first
 80055a8:	1c63      	adds	r3, r4, #1
 80055aa:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 80055ae:	4659      	mov	r1, fp
 80055b0:	462a      	mov	r2, r5
 80055b2:	4630      	mov	r0, r6
 80055b4:	f7ff fc46 	bl	8004e44 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 80055b8:	2800      	cmp	r0, #0
 80055ba:	f000 8083 	beq.w	80056c4 <Sub_Callback+0x13c>
    char str_to_int[11] = "0";
 80055be:	e9cd 9703 	strd	r9, r7, [sp, #12]
 80055c2:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 80055c6:	7802      	ldrb	r2, [r0, #0]
 80055c8:	2a2d      	cmp	r2, #45	; 0x2d
 80055ca:	bf03      	ittte	eq
 80055cc:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 80055ce:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 80055d2:	3001      	addeq	r0, #1
    if (*param == '-')
 80055d4:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 80055d6:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80055da:	d067      	beq.n	80056ac <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80055dc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80055e0:	2909      	cmp	r1, #9
 80055e2:	d85f      	bhi.n	80056a4 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 80055e4:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 80055e8:	7842      	ldrb	r2, [r0, #1]
 80055ea:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80055ee:	d05d      	beq.n	80056ac <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80055f0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80055f4:	2909      	cmp	r1, #9
 80055f6:	d855      	bhi.n	80056a4 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 80055f8:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 80055fc:	7882      	ldrb	r2, [r0, #2]
 80055fe:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005602:	d053      	beq.n	80056ac <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005604:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005608:	2909      	cmp	r1, #9
 800560a:	d84b      	bhi.n	80056a4 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 800560c:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 8005610:	78c2      	ldrb	r2, [r0, #3]
 8005612:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005616:	d049      	beq.n	80056ac <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005618:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800561c:	2909      	cmp	r1, #9
 800561e:	d841      	bhi.n	80056a4 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005620:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 8005624:	7902      	ldrb	r2, [r0, #4]
 8005626:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800562a:	d03f      	beq.n	80056ac <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 800562c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005630:	2909      	cmp	r1, #9
 8005632:	d837      	bhi.n	80056a4 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005634:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 8005638:	7942      	ldrb	r2, [r0, #5]
 800563a:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800563e:	d035      	beq.n	80056ac <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005640:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005644:	2909      	cmp	r1, #9
 8005646:	d82d      	bhi.n	80056a4 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005648:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 800564c:	7982      	ldrb	r2, [r0, #6]
 800564e:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005652:	d02b      	beq.n	80056ac <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005654:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005658:	2909      	cmp	r1, #9
 800565a:	d823      	bhi.n	80056a4 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 800565c:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 8005660:	79c2      	ldrb	r2, [r0, #7]
 8005662:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005666:	d021      	beq.n	80056ac <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005668:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800566c:	2909      	cmp	r1, #9
 800566e:	d819      	bhi.n	80056a4 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005670:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 8005674:	7a02      	ldrb	r2, [r0, #8]
 8005676:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800567a:	d017      	beq.n	80056ac <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 800567c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005680:	2909      	cmp	r1, #9
 8005682:	d80f      	bhi.n	80056a4 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005684:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 8005688:	7a42      	ldrb	r2, [r0, #9]
 800568a:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800568e:	d00d      	beq.n	80056ac <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005690:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005694:	2909      	cmp	r1, #9
 8005696:	d805      	bhi.n	80056a4 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005698:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 800569c:	7a82      	ldrb	r2, [r0, #10]
 800569e:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80056a2:	d003      	beq.n	80056ac <Sub_Callback+0x124>
		is_command_valid = 0;
 80056a4:	2300      	movs	r3, #0
 80056a6:	9301      	str	r3, [sp, #4]
	param_number++; //param number, starting from first
 80056a8:	465c      	mov	r4, fp
 80056aa:	e77d      	b.n	80055a8 <Sub_Callback+0x20>
	*value = sign * atoi(str_to_int);
 80056ac:	a803      	add	r0, sp, #12
 80056ae:	f002 f858 	bl	8007762 <atoi>
		if (param_count == 1)
 80056b2:	f1bb 0f01 	cmp.w	fp, #1
	*value = sign * atoi(str_to_int);
 80056b6:	fb04 f000 	mul.w	r0, r4, r0
		if (param_count == 1)
 80056ba:	d024      	beq.n	8005706 <Sub_Callback+0x17e>
		    rslt -= tmp;
 80056bc:	eba8 0800 	sub.w	r8, r8, r0
	param_number++; //param number, starting from first
 80056c0:	465c      	mov	r4, fp
 80056c2:	e771      	b.n	80055a8 <Sub_Callback+0x20>
    if (!param_count)
 80056c4:	b10c      	cbz	r4, 80056ca <Sub_Callback+0x142>
    if (is_command_valid)
 80056c6:	9b01      	ldr	r3, [sp, #4]
 80056c8:	bb03      	cbnz	r3, 800570c <Sub_Callback+0x184>
    strcat(cli_tx_out_buffer, cmd1);
 80056ca:	4650      	mov	r0, sl
 80056cc:	f7fa fe2a 	bl	8000324 <strlen>
 80056d0:	4c13      	ldr	r4, [pc, #76]	; (8005720 <Sub_Callback+0x198>)
 80056d2:	4605      	mov	r5, r0
 80056d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80056d6:	eb0a 0705 	add.w	r7, sl, r5
 80056da:	f84a 0005 	str.w	r0, [sl, r5]
 80056de:	8824      	ldrh	r4, [r4, #0]
 80056e0:	6079      	str	r1, [r7, #4]
 80056e2:	f105 0012 	add.w	r0, r5, #18
 80056e6:	60ba      	str	r2, [r7, #8]
 80056e8:	60fb      	str	r3, [r7, #12]
 80056ea:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 80056ec:	4450      	add	r0, sl
 80056ee:	4631      	mov	r1, r6
 80056f0:	f002 f879 	bl	80077e6 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <Sub_Callback+0x19c>)
 80056f6:	881a      	ldrh	r2, [r3, #0]
 80056f8:	789b      	ldrb	r3, [r3, #2]
 80056fa:	8002      	strh	r2, [r0, #0]
 80056fc:	7083      	strb	r3, [r0, #2]
    }
 80056fe:	2000      	movs	r0, #0
 8005700:	b007      	add	sp, #28
 8005702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*value = sign * atoi(str_to_int);
 8005706:	4680      	mov	r8, r0
	param_number++; //param number, starting from first
 8005708:	465c      	mov	r4, fp
 800570a:	e74d      	b.n	80055a8 <Sub_Callback+0x20>
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 800570c:	4642      	mov	r2, r8
 800570e:	4650      	mov	r0, sl
 8005710:	4905      	ldr	r1, [pc, #20]	; (8005728 <Sub_Callback+0x1a0>)
 8005712:	f001 fe45 	bl	80073a0 <sprintf_>
    }
 8005716:	2000      	movs	r0, #0
 8005718:	b007      	add	sp, #28
 800571a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571e:	bf00      	nop
 8005720:	08008ebc 	.word	0x08008ebc
 8005724:	08008eb8 	.word	0x08008eb8
 8005728:	08008eb4 	.word	0x08008eb4

0800572c <Pow_Callback>:
    {
 800572c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005730:	b089      	sub	sp, #36	; 0x24
    uint16_t param_len = 0;
 8005732:	ae08      	add	r6, sp, #32
 8005734:	2300      	movs	r3, #0
    int32_t rslt = 1;
 8005736:	f04f 0901 	mov.w	r9, #1
    uint16_t param_len = 0;
 800573a:	f826 3d0e 	strh.w	r3, [r6, #-14]!
    uint8_t param_number = 0;
 800573e:	461d      	mov	r5, r3
    {
 8005740:	4607      	mov	r7, r0
 8005742:	468b      	mov	fp, r1
    char str_to_int[11] = "0";
 8005744:	4698      	mov	r8, r3
    uint8_t is_command_valid = 1;
 8005746:	f8cd 9004 	str.w	r9, [sp, #4]
    char str_to_int[11] = "0";
 800574a:	f04f 0a30 	mov.w	sl, #48	; 0x30
	param_number++; //param number, starting from first
 800574e:	1c6c      	adds	r4, r5, #1
 8005750:	b2e4      	uxtb	r4, r4
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 8005752:	4621      	mov	r1, r4
 8005754:	4632      	mov	r2, r6
 8005756:	4638      	mov	r0, r7
 8005758:	f7ff fb74 	bl	8004e44 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 800575c:	2800      	cmp	r0, #0
 800575e:	f000 8092 	beq.w	8005886 <Pow_Callback+0x15a>
    char str_to_int[11] = "0";
 8005762:	e9cd a805 	strd	sl, r8, [sp, #20]
 8005766:	f8cd 801b 	str.w	r8, [sp, #27]
    if (*param == '-')
 800576a:	7803      	ldrb	r3, [r0, #0]
 800576c:	2b2d      	cmp	r3, #45	; 0x2d
 800576e:	bf03      	ittte	eq
 8005770:	7843      	ldrbeq	r3, [r0, #1]
	param++;
 8005772:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
 8005776:	3001      	addeq	r0, #1
    if (*param == '-')
 8005778:	2501      	movne	r5, #1
    while (*param != '\0' && *param != ' ')
 800577a:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 800577e:	d067      	beq.n	8005850 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005780:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005784:	2a09      	cmp	r2, #9
 8005786:	d85f      	bhi.n	8005848 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005788:	f88d 3014 	strb.w	r3, [sp, #20]
    while (*param != '\0' && *param != ' ')
 800578c:	7843      	ldrb	r3, [r0, #1]
 800578e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8005792:	d05d      	beq.n	8005850 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005794:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005798:	2a09      	cmp	r2, #9
 800579a:	d855      	bhi.n	8005848 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 800579c:	f88d 3015 	strb.w	r3, [sp, #21]
    while (*param != '\0' && *param != ' ')
 80057a0:	7883      	ldrb	r3, [r0, #2]
 80057a2:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80057a6:	d053      	beq.n	8005850 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80057a8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80057ac:	2a09      	cmp	r2, #9
 80057ae:	d84b      	bhi.n	8005848 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 80057b0:	f88d 3016 	strb.w	r3, [sp, #22]
    while (*param != '\0' && *param != ' ')
 80057b4:	78c3      	ldrb	r3, [r0, #3]
 80057b6:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80057ba:	d049      	beq.n	8005850 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80057bc:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80057c0:	2a09      	cmp	r2, #9
 80057c2:	d841      	bhi.n	8005848 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 80057c4:	f88d 3017 	strb.w	r3, [sp, #23]
    while (*param != '\0' && *param != ' ')
 80057c8:	7903      	ldrb	r3, [r0, #4]
 80057ca:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80057ce:	d03f      	beq.n	8005850 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80057d0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80057d4:	2a09      	cmp	r2, #9
 80057d6:	d837      	bhi.n	8005848 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 80057d8:	f88d 3018 	strb.w	r3, [sp, #24]
    while (*param != '\0' && *param != ' ')
 80057dc:	7943      	ldrb	r3, [r0, #5]
 80057de:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80057e2:	d035      	beq.n	8005850 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80057e4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80057e8:	2a09      	cmp	r2, #9
 80057ea:	d82d      	bhi.n	8005848 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 80057ec:	f88d 3019 	strb.w	r3, [sp, #25]
    while (*param != '\0' && *param != ' ')
 80057f0:	7983      	ldrb	r3, [r0, #6]
 80057f2:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80057f6:	d02b      	beq.n	8005850 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80057f8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80057fc:	2a09      	cmp	r2, #9
 80057fe:	d823      	bhi.n	8005848 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005800:	f88d 301a 	strb.w	r3, [sp, #26]
    while (*param != '\0' && *param != ' ')
 8005804:	79c3      	ldrb	r3, [r0, #7]
 8005806:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 800580a:	d021      	beq.n	8005850 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 800580c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005810:	2a09      	cmp	r2, #9
 8005812:	d819      	bhi.n	8005848 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005814:	f88d 301b 	strb.w	r3, [sp, #27]
    while (*param != '\0' && *param != ' ')
 8005818:	7a03      	ldrb	r3, [r0, #8]
 800581a:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 800581e:	d017      	beq.n	8005850 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005820:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005824:	2a09      	cmp	r2, #9
 8005826:	d80f      	bhi.n	8005848 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005828:	f88d 301c 	strb.w	r3, [sp, #28]
    while (*param != '\0' && *param != ' ')
 800582c:	7a43      	ldrb	r3, [r0, #9]
 800582e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8005832:	d00d      	beq.n	8005850 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005834:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005838:	2a09      	cmp	r2, #9
 800583a:	d805      	bhi.n	8005848 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 800583c:	f88d 301d 	strb.w	r3, [sp, #29]
    while (*param != '\0' && *param != ' ')
 8005840:	7a83      	ldrb	r3, [r0, #10]
 8005842:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8005846:	d003      	beq.n	8005850 <Pow_Callback+0x124>
		is_command_valid = 0;
 8005848:	2300      	movs	r3, #0
 800584a:	9301      	str	r3, [sp, #4]
	param_number++; //param number, starting from first
 800584c:	4625      	mov	r5, r4
 800584e:	e77e      	b.n	800574e <Pow_Callback+0x22>
	*value = sign * atoi(str_to_int);
 8005850:	a805      	add	r0, sp, #20
 8005852:	f001 ff86 	bl	8007762 <atoi>
		if (param_count == 1)
 8005856:	2c01      	cmp	r4, #1
	*value = sign * atoi(str_to_int);
 8005858:	fb05 f000 	mul.w	r0, r5, r0
		if (param_count == 1)
 800585c:	d035      	beq.n	80058ca <Pow_Callback+0x19e>
		    rslt = pow(rslt, tmp);
 800585e:	f7fa febb 	bl	80005d8 <__aeabi_i2d>
 8005862:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005866:	4648      	mov	r0, r9
 8005868:	f7fa feb6 	bl	80005d8 <__aeabi_i2d>
 800586c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005870:	ec41 0b10 	vmov	d0, r0, r1
 8005874:	f002 f916 	bl	8007aa4 <pow>
 8005878:	ec51 0b10 	vmov	r0, r1, d0
 800587c:	f7fb f9c6 	bl	8000c0c <__aeabi_d2iz>
	param_number++; //param number, starting from first
 8005880:	4625      	mov	r5, r4
		    rslt = pow(rslt, tmp);
 8005882:	4681      	mov	r9, r0
 8005884:	e763      	b.n	800574e <Pow_Callback+0x22>
    if (param_count != 2)
 8005886:	2d02      	cmp	r5, #2
 8005888:	d101      	bne.n	800588e <Pow_Callback+0x162>
    if (is_command_valid)
 800588a:	9b01      	ldr	r3, [sp, #4]
 800588c:	bb03      	cbnz	r3, 80058d0 <Pow_Callback+0x1a4>
    strcat(cli_tx_out_buffer, cmd1);
 800588e:	4658      	mov	r0, fp
 8005890:	f7fa fd48 	bl	8000324 <strlen>
 8005894:	4c13      	ldr	r4, [pc, #76]	; (80058e4 <Pow_Callback+0x1b8>)
 8005896:	4605      	mov	r5, r0
 8005898:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800589a:	eb0b 0605 	add.w	r6, fp, r5
 800589e:	f84b 0005 	str.w	r0, [fp, r5]
 80058a2:	8824      	ldrh	r4, [r4, #0]
 80058a4:	6071      	str	r1, [r6, #4]
 80058a6:	f105 0012 	add.w	r0, r5, #18
 80058aa:	60b2      	str	r2, [r6, #8]
 80058ac:	60f3      	str	r3, [r6, #12]
 80058ae:	8234      	strh	r4, [r6, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 80058b0:	4458      	add	r0, fp
 80058b2:	4639      	mov	r1, r7
 80058b4:	f001 ff97 	bl	80077e6 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 80058b8:	4b0b      	ldr	r3, [pc, #44]	; (80058e8 <Pow_Callback+0x1bc>)
 80058ba:	881a      	ldrh	r2, [r3, #0]
 80058bc:	789b      	ldrb	r3, [r3, #2]
 80058be:	8002      	strh	r2, [r0, #0]
 80058c0:	7083      	strb	r3, [r0, #2]
    }
 80058c2:	2000      	movs	r0, #0
 80058c4:	b009      	add	sp, #36	; 0x24
 80058c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*value = sign * atoi(str_to_int);
 80058ca:	4681      	mov	r9, r0
	param_number++; //param number, starting from first
 80058cc:	4625      	mov	r5, r4
 80058ce:	e73e      	b.n	800574e <Pow_Callback+0x22>
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 80058d0:	464a      	mov	r2, r9
 80058d2:	4658      	mov	r0, fp
 80058d4:	4905      	ldr	r1, [pc, #20]	; (80058ec <Pow_Callback+0x1c0>)
 80058d6:	f001 fd63 	bl	80073a0 <sprintf_>
    }
 80058da:	2000      	movs	r0, #0
 80058dc:	b009      	add	sp, #36	; 0x24
 80058de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e2:	bf00      	nop
 80058e4:	08008ebc 	.word	0x08008ebc
 80058e8:	08008eb8 	.word	0x08008eb8
 80058ec:	08008eb4 	.word	0x08008eb4

080058f0 <CLI_Add_All_Commands>:
    {
 80058f0:	b500      	push	{lr}
    CLI_Add_Cammand(&Add_Defination);
 80058f2:	4816      	ldr	r0, [pc, #88]	; (800594c <CLI_Add_All_Commands+0x5c>)
    {
 80058f4:	b08d      	sub	sp, #52	; 0x34
    CLI_Add_Cammand(&Add_Defination);
 80058f6:	f7ff fa51 	bl	8004d9c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Sub_Defination);
 80058fa:	4815      	ldr	r0, [pc, #84]	; (8005950 <CLI_Add_All_Commands+0x60>)
 80058fc:	f7ff fa4e 	bl	8004d9c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Mul_Defination);
 8005900:	4814      	ldr	r0, [pc, #80]	; (8005954 <CLI_Add_All_Commands+0x64>)
 8005902:	f7ff fa4b 	bl	8004d9c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Div_Defination);
 8005906:	4814      	ldr	r0, [pc, #80]	; (8005958 <CLI_Add_All_Commands+0x68>)
 8005908:	f7ff fa48 	bl	8004d9c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Pow_Defination);
 800590c:	4813      	ldr	r0, [pc, #76]	; (800595c <CLI_Add_All_Commands+0x6c>)
 800590e:	f7ff fa45 	bl	8004d9c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Sqrt_Defination);
 8005912:	4813      	ldr	r0, [pc, #76]	; (8005960 <CLI_Add_All_Commands+0x70>)
 8005914:	f7ff fa42 	bl	8004d9c <CLI_Add_Cammand>
    OSTaskCreate(&UART_Task_TCB,                               /* Create the startup task                              */
 8005918:	4b12      	ldr	r3, [pc, #72]	; (8005964 <CLI_Add_All_Commands+0x74>)
 800591a:	9301      	str	r3, [sp, #4]
 800591c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800591e:	9302      	str	r3, [sp, #8]
 8005920:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 8005924:	2300      	movs	r3, #0
 8005926:	2203      	movs	r2, #3
 8005928:	f44f 7180 	mov.w	r1, #256	; 0x100
 800592c:	e9cd 2007 	strd	r2, r0, [sp, #28]
 8005930:	9200      	str	r2, [sp, #0]
 8005932:	e9cd 1303 	strd	r1, r3, [sp, #12]
 8005936:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800593a:	4a0b      	ldr	r2, [pc, #44]	; (8005968 <CLI_Add_All_Commands+0x78>)
 800593c:	490b      	ldr	r1, [pc, #44]	; (800596c <CLI_Add_All_Commands+0x7c>)
 800593e:	480c      	ldr	r0, [pc, #48]	; (8005970 <CLI_Add_All_Commands+0x80>)
 8005940:	f7fe fb6a 	bl	8004018 <OSTaskCreate>
    }
 8005944:	b00d      	add	sp, #52	; 0x34
 8005946:	f85d fb04 	ldr.w	pc, [sp], #4
 800594a:	bf00      	nop
 800594c:	20000018 	.word	0x20000018
 8005950:	20000068 	.word	0x20000068
 8005954:	20000038 	.word	0x20000038
 8005958:	20000028 	.word	0x20000028
 800595c:	20000048 	.word	0x20000048
 8005960:	20000058 	.word	0x20000058
 8005964:	2000070c 	.word	0x2000070c
 8005968:	08004ed1 	.word	0x08004ed1
 800596c:	08008ed0 	.word	0x08008ed0
 8005970:	20000b0c 	.word	0x20000b0c

08005974 <CLI_UART_Thread_Add>:
OS_MUTEX CLI_UART_Mutex;



void CLI_UART_Thread_Add()
    {
 8005974:	b510      	push	{r4, lr}
 8005976:	b08c      	sub	sp, #48	; 0x30

    OS_ERR  os_err;

    OSMutexCreate((OS_MUTEX*)&CLI_UART_Mutex,
 8005978:	f10d 042e 	add.w	r4, sp, #46	; 0x2e
 800597c:	4622      	mov	r2, r4
 800597e:	490e      	ldr	r1, [pc, #56]	; (80059b8 <CLI_UART_Thread_Add+0x44>)
 8005980:	480e      	ldr	r0, [pc, #56]	; (80059bc <CLI_UART_Thread_Add+0x48>)
 8005982:	f7fd ff57 	bl	8003834 <OSMutexCreate>
		  (CPU_CHAR*)"CLI_UART_Mutex",
		  (OS_ERR*	) &os_err);


    OSTaskCreate(&CLI_UART_Task_TCB,
 8005986:	4b0e      	ldr	r3, [pc, #56]	; (80059c0 <CLI_UART_Thread_Add+0x4c>)
 8005988:	9408      	str	r4, [sp, #32]
 800598a:	f8d3 40cc 	ldr.w	r4, [r3, #204]	; 0xcc
 800598e:	9301      	str	r3, [sp, #4]
 8005990:	2003      	movs	r0, #3
 8005992:	2300      	movs	r3, #0
 8005994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005998:	220a      	movs	r2, #10
 800599a:	e9cd 3006 	strd	r3, r0, [sp, #24]
 800599e:	9103      	str	r1, [sp, #12]
 80059a0:	9200      	str	r2, [sp, #0]
 80059a2:	9402      	str	r4, [sp, #8]
 80059a4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80059a8:	4a06      	ldr	r2, [pc, #24]	; (80059c4 <CLI_UART_Thread_Add+0x50>)
 80059aa:	4907      	ldr	r1, [pc, #28]	; (80059c8 <CLI_UART_Thread_Add+0x54>)
 80059ac:	4807      	ldr	r0, [pc, #28]	; (80059cc <CLI_UART_Thread_Add+0x58>)
 80059ae:	f7fe fb33 	bl	8004018 <OSTaskCreate>
                  0u,
                  0u,
                  0u,
                  (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                  &os_err);
    }
 80059b2:	b00c      	add	sp, #48	; 0x30
 80059b4:	bd10      	pop	{r4, pc}
 80059b6:	bf00      	nop
 80059b8:	08008ff4 	.word	0x08008ff4
 80059bc:	20002db8 	.word	0x20002db8
 80059c0:	20000cc8 	.word	0x20000cc8
 80059c4:	08005a15 	.word	0x08005a15
 80059c8:	08009004 	.word	0x08009004
 80059cc:	200014c8 	.word	0x200014c8

080059d0 <CLI_UART_Send_String>:

void CLI_UART_Send_Char(const char data)
    {
    CLI_UART->Instance->DR = (data);
 80059d0:	4b08      	ldr	r3, [pc, #32]	; (80059f4 <CLI_UART_Send_String+0x24>)
    while (__HAL_UART_GET_FLAG(CLI_UART,UART_FLAG_TC) == 0)
	;
    }

void CLI_UART_Send_String(const char* data)
    {
 80059d2:	b410      	push	{r4}
    CLI_UART->Instance->DR = (data);
 80059d4:	681c      	ldr	r4, [r3, #0]
 80059d6:	1e41      	subs	r1, r0, #1
 80059d8:	307f      	adds	r0, #127	; 0x7f
    uint16_t count = 0;
    while (*data)
 80059da:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80059de:	b133      	cbz	r3, 80059ee <CLI_UART_Send_String+0x1e>
    CLI_UART->Instance->DR = (data);
 80059e0:	6822      	ldr	r2, [r4, #0]
 80059e2:	6053      	str	r3, [r2, #4]
    while (__HAL_UART_GET_FLAG(CLI_UART,UART_FLAG_TC) == 0)
 80059e4:	6813      	ldr	r3, [r2, #0]
 80059e6:	065b      	lsls	r3, r3, #25
 80059e8:	d5fc      	bpl.n	80059e4 <CLI_UART_Send_String+0x14>
	{
	CLI_UART_Send_Char(*data++);
	count++;
	if (count == OUTPUT_BUFFER_SIZE)
 80059ea:	4281      	cmp	r1, r0
 80059ec:	d1f5      	bne.n	80059da <CLI_UART_Send_String+0xa>
	    {
	    break;
	    }
	}
    }
 80059ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059f2:	4770      	bx	lr
 80059f4:	20000078 	.word	0x20000078

080059f8 <CLI_UART_Send_String_DMA>:

void CLI_UART_Send_String_DMA(const char* data)
    {
 80059f8:	b510      	push	{r4, lr}
 80059fa:	4604      	mov	r4, r0
    HAL_UART_Transmit_DMA(CLI_UART, (uint8_t*) data, strlen(data));
 80059fc:	f7fa fc92 	bl	8000324 <strlen>
 8005a00:	4b03      	ldr	r3, [pc, #12]	; (8005a10 <CLI_UART_Send_String_DMA+0x18>)
 8005a02:	b282      	uxth	r2, r0
 8005a04:	4621      	mov	r1, r4
 8005a06:	6818      	ldr	r0, [r3, #0]
    }
 8005a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit_DMA(CLI_UART, (uint8_t*) data, strlen(data));
 8005a0c:	f7fc bd9e 	b.w	800254c <HAL_UART_Transmit_DMA>
 8005a10:	20000078 	.word	0x20000078

08005a14 <CLI_UART_Task>:
    sprintf(int_to_str, "%0.2f", num);
    CLI_UART_Send_String(int_to_str);
    }

static void CLI_UART_Task(void* argument)
    {
 8005a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a18:	b085      	sub	sp, #20
    OS_ERR  os_err;

    //static uint8_t rx_char_count; // function variable, must be static in polling mode
    uint8_t rx_char_count = 0; // task variable need not to be static
    uint8_t call_again = 0;
    char rx_char = 0;
 8005a1a:	2400      	movs	r4, #0
    CLI_Add_All_Commands();

    Ring_Buffer_Init(&UART_Ring_Buffer_Handle, UART_DMA_RX_Buffer,
    UART_RING_BUFFER_SIZE);

    HAL_UART_Receive_DMA(CLI_UART, (uint8_t*) UART_DMA_RX_Buffer,
 8005a1c:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8005bcc <CLI_UART_Task+0x1b8>
    char rx_char = 0;
 8005a20:	f88d 400d 	strb.w	r4, [sp, #13]
    CLI_Add_Help_Cammand();
 8005a24:	f7ff fa3e 	bl	8004ea4 <CLI_Add_Help_Cammand>
    CLI_Add_All_Commands();
 8005a28:	f7ff ff62 	bl	80058f0 <CLI_Add_All_Commands>
    Ring_Buffer_Init(&UART_Ring_Buffer_Handle, UART_DMA_RX_Buffer,
 8005a2c:	2280      	movs	r2, #128	; 0x80
 8005a2e:	495f      	ldr	r1, [pc, #380]	; (8005bac <CLI_UART_Task+0x198>)
 8005a30:	485f      	ldr	r0, [pc, #380]	; (8005bb0 <CLI_UART_Task+0x19c>)
 8005a32:	4d60      	ldr	r5, [pc, #384]	; (8005bb4 <CLI_UART_Task+0x1a0>)
 8005a34:	4f60      	ldr	r7, [pc, #384]	; (8005bb8 <CLI_UART_Task+0x1a4>)

	/*data is written to buffer via uart DMA in background*/
	/* need to update Write_Index manually */
	UPDATE_RING_BUFFER();

	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8005a36:	4e5e      	ldr	r6, [pc, #376]	; (8005bb0 <CLI_UART_Task+0x19c>)
	    else //else update command buffer
		{

		if (!rx_char_count)
		    {
		    memset(CLI_CMD_Buffer, 0x00, INPUT_BUFFER_SIZE); //reset cmd buffer
 8005a38:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8005bc4 <CLI_UART_Task+0x1b0>
    Ring_Buffer_Init(&UART_Ring_Buffer_Handle, UART_DMA_RX_Buffer,
 8005a3c:	f001 fcc6 	bl	80073cc <Ring_Buffer_Init>
    HAL_UART_Receive_DMA(CLI_UART, (uint8_t*) UART_DMA_RX_Buffer,
 8005a40:	495a      	ldr	r1, [pc, #360]	; (8005bac <CLI_UART_Task+0x198>)
 8005a42:	f8da 0000 	ldr.w	r0, [sl]
 8005a46:	2280      	movs	r2, #128	; 0x80
 8005a48:	f7fc fdbc 	bl	80025c4 <HAL_UART_Receive_DMA>
    __HAL_UART_ENABLE_IT(CLI_UART, UART_IT_IDLE);
 8005a4c:	f8da 3000 	ldr.w	r3, [sl]
    OSMutexPend(&CLI_UART_Mutex, 0, OS_OPT_PEND_BLOCKING, 0, &os_err);
 8005a50:	485a      	ldr	r0, [pc, #360]	; (8005bbc <CLI_UART_Task+0x1a8>)
    __HAL_UART_ENABLE_IT(CLI_UART, UART_IT_IDLE);
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	68d3      	ldr	r3, [r2, #12]
    OSMutexPend(&CLI_UART_Mutex, 0, OS_OPT_PEND_BLOCKING, 0, &os_err);
 8005a56:	f10d 090e 	add.w	r9, sp, #14
    __HAL_UART_ENABLE_IT(CLI_UART, UART_IT_IDLE);
 8005a5a:	f043 0310 	orr.w	r3, r3, #16
 8005a5e:	60d3      	str	r3, [r2, #12]
    OSMutexPend(&CLI_UART_Mutex, 0, OS_OPT_PEND_BLOCKING, 0, &os_err);
 8005a60:	4621      	mov	r1, r4
 8005a62:	4623      	mov	r3, r4
 8005a64:	4622      	mov	r2, r4
 8005a66:	f8cd 9000 	str.w	r9, [sp]
 8005a6a:	f7fd ff15 	bl	8003898 <OSMutexPend>
    CLI_UART_Send_String_DMA(pcWelcomeMessage);
 8005a6e:	4854      	ldr	r0, [pc, #336]	; (8005bc0 <CLI_UART_Task+0x1ac>)
 8005a70:	f7ff ffc2 	bl	80059f8 <CLI_UART_Send_String_DMA>
    OSTaskSemPend(0, OS_OPT_PEND_BLOCKING, 0, &os_err);
 8005a74:	464b      	mov	r3, r9
 8005a76:	4622      	mov	r2, r4
 8005a78:	4621      	mov	r1, r4
 8005a7a:	4620      	mov	r0, r4
 8005a7c:	f7fe fba2 	bl	80041c4 <OSTaskSemPend>
	OSMutexPost(&CLI_UART_Mutex, OS_OPT_POST_NONE, &os_err);
 8005a80:	464a      	mov	r2, r9
 8005a82:	2100      	movs	r1, #0
 8005a84:	484d      	ldr	r0, [pc, #308]	; (8005bbc <CLI_UART_Task+0x1a8>)
 8005a86:	f7fd ffc7 	bl	8003a18 <OSMutexPost>
	OSTaskSemPend(0, OS_OPT_PEND_BLOCKING, 0, &os_err);
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	4611      	mov	r1, r2
 8005a8e:	464b      	mov	r3, r9
 8005a90:	4610      	mov	r0, r2
 8005a92:	f7fe fb97 	bl	80041c4 <OSTaskSemPend>
	OSMutexPend(&CLI_UART_Mutex, 0, OS_OPT_PEND_BLOCKING, 0, &os_err);
 8005a96:	2300      	movs	r3, #0
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4619      	mov	r1, r3
 8005a9c:	f8cd 9000 	str.w	r9, [sp]
 8005aa0:	4846      	ldr	r0, [pc, #280]	; (8005bbc <CLI_UART_Task+0x1a8>)
 8005aa2:	f7fd fef9 	bl	8003898 <OSMutexPend>
	UPDATE_RING_BUFFER();
 8005aa6:	f8da 3000 	ldr.w	r3, [sl]
 8005aaa:	4a41      	ldr	r2, [pc, #260]	; (8005bb0 <CLI_UART_Task+0x19c>)
 8005aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8005ab6:	8093      	strh	r3, [r2, #4]
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8005ab8:	4630      	mov	r0, r6
 8005aba:	f001 fca7 	bl	800740c <Ring_Buffer_Get_Count>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d0de      	beq.n	8005a80 <CLI_UART_Task+0x6c>
	    Ring_Buffer_Get_Char(&UART_Ring_Buffer_Handle, &rx_char);
 8005ac2:	f10d 010d 	add.w	r1, sp, #13
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f001 fc86 	bl	80073d8 <Ring_Buffer_Get_Char>
	    if (rx_char == '\r')
 8005acc:	f89d b00d 	ldrb.w	fp, [sp, #13]
 8005ad0:	f1bb 0f0d 	cmp.w	fp, #13
 8005ad4:	d02b      	beq.n	8005b2e <CLI_UART_Task+0x11a>
		if (!rx_char_count)
 8005ad6:	b1b4      	cbz	r4, 8005b06 <CLI_UART_Task+0xf2>
		    }

		if ((rx_char == '\b') || (rx_char == 0x7F)) // backspace or delete
 8005ad8:	f1bb 0f08 	cmp.w	fp, #8
 8005adc:	d020      	beq.n	8005b20 <CLI_UART_Task+0x10c>
 8005ade:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
 8005ae2:	d01d      	beq.n	8005b20 <CLI_UART_Task+0x10c>
			}
		    }
		else
		    {
		    // accumulate characters in input buffer
		    if ((rx_char >= ' ') && (rx_char <= '~'))
 8005ae4:	f1ab 0320 	sub.w	r3, fp, #32
 8005ae8:	2b5e      	cmp	r3, #94	; 0x5e
 8005aea:	d8e5      	bhi.n	8005ab8 <CLI_UART_Task+0xa4>
			{
			if (rx_char_count < INPUT_BUFFER_SIZE)
 8005aec:	0623      	lsls	r3, r4, #24
 8005aee:	d4e3      	bmi.n	8005ab8 <CLI_UART_Task+0xa4>
			    {
			    CLI_CMD_Buffer[rx_char_count] = rx_char;
 8005af0:	4a34      	ldr	r2, [pc, #208]	; (8005bc4 <CLI_UART_Task+0x1b0>)
			    rx_char_count++;
 8005af2:	1c63      	adds	r3, r4, #1
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8005af4:	4630      	mov	r0, r6
			    CLI_CMD_Buffer[rx_char_count] = rx_char;
 8005af6:	f802 b004 	strb.w	fp, [r2, r4]
			    rx_char_count++;
 8005afa:	b2dc      	uxtb	r4, r3
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8005afc:	f001 fc86 	bl	800740c <Ring_Buffer_Get_Count>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	d1de      	bne.n	8005ac2 <CLI_UART_Task+0xae>
 8005b04:	e7bc      	b.n	8005a80 <CLI_UART_Task+0x6c>
		    memset(CLI_CMD_Buffer, 0x00, INPUT_BUFFER_SIZE); //reset cmd buffer
 8005b06:	2280      	movs	r2, #128	; 0x80
 8005b08:	4621      	mov	r1, r4
 8005b0a:	4640      	mov	r0, r8
 8005b0c:	f001 fe63 	bl	80077d6 <memset>
		if ((rx_char == '\b') || (rx_char == 0x7F)) // backspace or delete
 8005b10:	f1bb 0f08 	cmp.w	fp, #8
 8005b14:	d002      	beq.n	8005b1c <CLI_UART_Task+0x108>
 8005b16:	f1bb 0f7f 	cmp.w	fp, #127	; 0x7f
 8005b1a:	d141      	bne.n	8005ba0 <CLI_UART_Task+0x18c>
		rx_char_count = 0; //reset CLI_CMD_Buffer index
 8005b1c:	2400      	movs	r4, #0
 8005b1e:	e7cb      	b.n	8005ab8 <CLI_UART_Task+0xa4>
			rx_char_count--;
 8005b20:	3c01      	subs	r4, #1
 8005b22:	b2e4      	uxtb	r4, r4
			CLI_CMD_Buffer[rx_char_count] = '\0';
 8005b24:	4b27      	ldr	r3, [pc, #156]	; (8005bc4 <CLI_UART_Task+0x1b0>)
 8005b26:	f04f 0200 	mov.w	r2, #0
 8005b2a:	551a      	strb	r2, [r3, r4]
 8005b2c:	e7c4      	b.n	8005ab8 <CLI_UART_Task+0xa4>
		Ring_Buffer_Get_Char(&UART_Ring_Buffer_Handle, &rx_char); //remove \n, if there is
 8005b2e:	f10d 010d 	add.w	r1, sp, #13
 8005b32:	4630      	mov	r0, r6
 8005b34:	f001 fc50 	bl	80073d8 <Ring_Buffer_Get_Char>
		Ring_Buffer_Flush(&UART_Ring_Buffer_Handle); //reset ring buffer
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f001 fc63 	bl	8007404 <Ring_Buffer_Flush>
		    memset(CLI_Output_Buffer, 0x00, OUTPUT_BUFFER_SIZE); //reset output buffer
 8005b3e:	2280      	movs	r2, #128	; 0x80
 8005b40:	2100      	movs	r1, #0
 8005b42:	4628      	mov	r0, r5
 8005b44:	f001 fe47 	bl	80077d6 <memset>
		    call_again = CLI_Process_Cammand(CLI_CMD_Buffer,
 8005b48:	2280      	movs	r2, #128	; 0x80
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	4640      	mov	r0, r8
 8005b4e:	f7ff f93d 	bl	8004dcc <CLI_Process_Cammand>
		    if (CLI_Output_Buffer[0] != '\0')
 8005b52:	782b      	ldrb	r3, [r5, #0]
		    call_again = CLI_Process_Cammand(CLI_CMD_Buffer,
 8005b54:	4604      	mov	r4, r0
		    if (CLI_Output_Buffer[0] != '\0')
 8005b56:	b98b      	cbnz	r3, 8005b7c <CLI_UART_Task+0x168>
		while (call_again);
 8005b58:	2c00      	cmp	r4, #0
 8005b5a:	d1f0      	bne.n	8005b3e <CLI_UART_Task+0x12a>
    CLI_UART->Instance->DR = (data);
 8005b5c:	f8da 3000 	ldr.w	r3, [sl]
 8005b60:	4919      	ldr	r1, [pc, #100]	; (8005bc8 <CLI_UART_Task+0x1b4>)
 8005b62:	681a      	ldr	r2, [r3, #0]
    while (*data)
 8005b64:	230a      	movs	r3, #10
    CLI_UART->Instance->DR = (data);
 8005b66:	6053      	str	r3, [r2, #4]
    while (__HAL_UART_GET_FLAG(CLI_UART,UART_FLAG_TC) == 0)
 8005b68:	6813      	ldr	r3, [r2, #0]
 8005b6a:	0658      	lsls	r0, r3, #25
 8005b6c:	d5fc      	bpl.n	8005b68 <CLI_UART_Task+0x154>
	if (count == OUTPUT_BUFFER_SIZE)
 8005b6e:	428f      	cmp	r7, r1
 8005b70:	d0d4      	beq.n	8005b1c <CLI_UART_Task+0x108>
    while (*data)
 8005b72:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1f5      	bne.n	8005b66 <CLI_UART_Task+0x152>
 8005b7a:	e7cf      	b.n	8005b1c <CLI_UART_Task+0x108>
    HAL_UART_Transmit_DMA(CLI_UART, (uint8_t*) data, strlen(data));
 8005b7c:	4628      	mov	r0, r5
 8005b7e:	f7fa fbd1 	bl	8000324 <strlen>
 8005b82:	4629      	mov	r1, r5
 8005b84:	b282      	uxth	r2, r0
 8005b86:	f8da 0000 	ldr.w	r0, [sl]
 8005b8a:	f7fc fcdf 	bl	800254c <HAL_UART_Transmit_DMA>
			OSTaskSemPend(0, OS_OPT_PEND_BLOCKING, 0, &os_err);
 8005b8e:	2200      	movs	r2, #0
 8005b90:	464b      	mov	r3, r9
 8005b92:	4611      	mov	r1, r2
 8005b94:	4610      	mov	r0, r2
 8005b96:	f7fe fb15 	bl	80041c4 <OSTaskSemPend>
		while (call_again);
 8005b9a:	2c00      	cmp	r4, #0
 8005b9c:	d1cf      	bne.n	8005b3e <CLI_UART_Task+0x12a>
 8005b9e:	e7dd      	b.n	8005b5c <CLI_UART_Task+0x148>
		    if ((rx_char >= ' ') && (rx_char <= '~'))
 8005ba0:	f1ab 0320 	sub.w	r3, fp, #32
 8005ba4:	2b5e      	cmp	r3, #94	; 0x5e
 8005ba6:	d9a3      	bls.n	8005af0 <CLI_UART_Task+0xdc>
 8005ba8:	e786      	b.n	8005ab8 <CLI_UART_Task+0xa4>
 8005baa:	bf00      	nop
 8005bac:	20001584 	.word	0x20001584
 8005bb0:	20001604 	.word	0x20001604
 8005bb4:	20000c48 	.word	0x20000c48
 8005bb8:	08009093 	.word	0x08009093
 8005bbc:	20002db8 	.word	0x20002db8
 8005bc0:	08008fb8 	.word	0x08008fb8
 8005bc4:	20000bc8 	.word	0x20000bc8
 8005bc8:	08009014 	.word	0x08009014
 8005bcc:	20000078 	.word	0x20000078

08005bd0 <HAL_UART_TxCpltCallback>:
         // the interrupt has ended
         OSIntExit();
    }

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
    {
 8005bd0:	b510      	push	{r4, lr}
 8005bd2:	b082      	sub	sp, #8
         CPU_CRITICAL_ENTER();
 8005bd4:	f7fa fb04 	bl	80001e0 <CPU_SR_Save>
 8005bd8:	4604      	mov	r4, r0
         OSIntEnter();
 8005bda:	f7fd f893 	bl	8002d04 <OSIntEnter>
         OSTaskSemPost(&CLI_UART_Task_TCB, OS_OPT_POST_NONE, &os_err);
 8005bde:	f10d 0206 	add.w	r2, sp, #6
 8005be2:	2100      	movs	r1, #0
 8005be4:	4804      	ldr	r0, [pc, #16]	; (8005bf8 <HAL_UART_TxCpltCallback+0x28>)
 8005be6:	f7fe fb83 	bl	80042f0 <OSTaskSemPost>
         CPU_CRITICAL_EXIT();
 8005bea:	4620      	mov	r0, r4
 8005bec:	f7fa fafc 	bl	80001e8 <CPU_SR_Restore>
         OSIntExit();
 8005bf0:	f7fd f898 	bl	8002d24 <OSIntExit>
    CLI_UART_Task_Wakeup();
    }
 8005bf4:	b002      	add	sp, #8
 8005bf6:	bd10      	pop	{r4, pc}
 8005bf8:	200014c8 	.word	0x200014c8

08005bfc <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
    {

    }
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop

08005c00 <CLI_UART_RX_ISR>:

void CLI_UART_RX_ISR()
    {

    uint8_t interrupt_source =  __HAL_UART_GET_FLAG(&huart2, UART_FLAG_IDLE);
 8005c00:	4b11      	ldr	r3, [pc, #68]	; (8005c48 <CLI_UART_RX_ISR+0x48>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681b      	ldr	r3, [r3, #0]

    if (interrupt_source)
 8005c06:	06db      	lsls	r3, r3, #27
 8005c08:	d400      	bmi.n	8005c0c <CLI_UART_RX_ISR+0xc>
 8005c0a:	4770      	bx	lr
    {
 8005c0c:	b530      	push	{r4, r5, lr}
	{

	__HAL_UART_CLEAR_IDLEFLAG(CLI_UART);
 8005c0e:	4b0f      	ldr	r3, [pc, #60]	; (8005c4c <CLI_UART_RX_ISR+0x4c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
    {
 8005c12:	b083      	sub	sp, #12
	__HAL_UART_CLEAR_IDLEFLAG(CLI_UART);
 8005c14:	2400      	movs	r4, #0
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	9401      	str	r4, [sp, #4]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	9201      	str	r2, [sp, #4]
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	9301      	str	r3, [sp, #4]
 8005c22:	9b01      	ldr	r3, [sp, #4]
         CPU_CRITICAL_ENTER();
 8005c24:	f7fa fadc 	bl	80001e0 <CPU_SR_Save>
 8005c28:	4605      	mov	r5, r0
         OSIntEnter();
 8005c2a:	f7fd f86b 	bl	8002d04 <OSIntEnter>
         OSTaskSemPost(&CLI_UART_Task_TCB, OS_OPT_POST_NONE, &os_err);
 8005c2e:	4621      	mov	r1, r4
 8005c30:	f10d 0202 	add.w	r2, sp, #2
 8005c34:	4806      	ldr	r0, [pc, #24]	; (8005c50 <CLI_UART_RX_ISR+0x50>)
 8005c36:	f7fe fb5b 	bl	80042f0 <OSTaskSemPost>
         CPU_CRITICAL_EXIT();
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	f7fa fad4 	bl	80001e8 <CPU_SR_Restore>
         OSIntExit();
 8005c40:	f7fd f870 	bl	8002d24 <OSIntExit>

	 CLI_UART_Task_Wakeup();

	}
    }
 8005c44:	b003      	add	sp, #12
 8005c46:	bd30      	pop	{r4, r5, pc}
 8005c48:	20002ea8 	.word	0x20002ea8
 8005c4c:	20000078 	.word	0x20000078
 8005c50:	200014c8 	.word	0x200014c8

08005c54 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8005c54:	b510      	push	{r4, lr}
 8005c56:	b082      	sub	sp, #8
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005c58:	2400      	movs	r4, #0
 8005c5a:	4b0f      	ldr	r3, [pc, #60]	; (8005c98 <MX_DMA_Init+0x44>)
 8005c5c:	9401      	str	r4, [sp, #4]
 8005c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c60:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005c64:	631a      	str	r2, [r3, #48]	; 0x30
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005c6c:	4622      	mov	r2, r4
 8005c6e:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005c70:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005c72:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005c74:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005c76:	f7fb f9f1 	bl	800105c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005c7a:	2010      	movs	r0, #16
 8005c7c:	f7fb fa34 	bl	80010e8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8005c80:	4622      	mov	r2, r4
 8005c82:	4621      	mov	r1, r4
 8005c84:	2011      	movs	r0, #17
 8005c86:	f7fb f9e9 	bl	800105c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005c8a:	2011      	movs	r0, #17

}
 8005c8c:	b002      	add	sp, #8
 8005c8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005c92:	f7fb ba29 	b.w	80010e8 <HAL_NVIC_EnableIRQ>
 8005c96:	bf00      	nop
 8005c98:	40023800 	.word	0x40023800

08005c9c <MX_GPIO_Init>:
     PB3   ------> SPI1_SCK
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8005c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ca0:	2400      	movs	r4, #0
{
 8005ca2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ca4:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8005ca8:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cac:	4b51      	ldr	r3, [pc, #324]	; (8005df4 <MX_GPIO_Init+0x158>)
 8005cae:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005cb0:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L6470_CS_GPIO_Port, L6470_CS_Pin, GPIO_PIN_SET);
 8005cb4:	4e50      	ldr	r6, [pc, #320]	; (8005df8 <MX_GPIO_Init+0x15c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L6470_RST_STBY_GPIO_Port, L6470_RST_STBY_Pin, GPIO_PIN_RESET);
 8005cb6:	4d51      	ldr	r5, [pc, #324]	; (8005dfc <MX_GPIO_Init+0x160>)

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|L6470_Flag_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005cb8:	4f51      	ldr	r7, [pc, #324]	; (8005e00 <MX_GPIO_Init+0x164>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005cba:	f042 0204 	orr.w	r2, r2, #4
 8005cbe:	631a      	str	r2, [r3, #48]	; 0x30
 8005cc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cc2:	f002 0204 	and.w	r2, r2, #4
 8005cc6:	9201      	str	r2, [sp, #4]
 8005cc8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005cca:	9402      	str	r4, [sp, #8]
 8005ccc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005cd2:	631a      	str	r2, [r3, #48]	; 0x30
 8005cd4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cd6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005cda:	9202      	str	r2, [sp, #8]
 8005cdc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cde:	9403      	str	r4, [sp, #12]
 8005ce0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ce2:	f042 0201 	orr.w	r2, r2, #1
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30
 8005ce8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cea:	f002 0201 	and.w	r2, r2, #1
 8005cee:	9203      	str	r2, [sp, #12]
 8005cf0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005cf2:	9404      	str	r4, [sp, #16]
 8005cf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cf6:	f042 0202 	orr.w	r2, r2, #2
 8005cfa:	631a      	str	r2, [r3, #48]	; 0x30
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	f003 0302 	and.w	r3, r3, #2
 8005d02:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(L6470_CS_GPIO_Port, L6470_CS_Pin, GPIO_PIN_SET);
 8005d04:	4630      	mov	r0, r6
 8005d06:	2201      	movs	r2, #1
 8005d08:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005d0a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(L6470_CS_GPIO_Port, L6470_CS_Pin, GPIO_PIN_SET);
 8005d0c:	f7fb fe22 	bl	8001954 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8005d10:	4622      	mov	r2, r4
 8005d12:	4630      	mov	r0, r6
 8005d14:	2120      	movs	r1, #32
 8005d16:	f7fb fe1d 	bl	8001954 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L6470_RST_STBY_GPIO_Port, L6470_RST_STBY_Pin, GPIO_PIN_RESET);
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	2120      	movs	r1, #32
 8005d20:	f7fb fe18 	bl	8001954 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005d24:	4b37      	ldr	r3, [pc, #220]	; (8005e04 <MX_GPIO_Init+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d26:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = B1_Pin|L6470_Flag_INT_Pin;
 8005d28:	f242 0202 	movw	r2, #8194	; 0x2002
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d2c:	a905      	add	r1, sp, #20
 8005d2e:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8005d30:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005d34:	f7fb fcbe 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L6470_BUSY_SYNC_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005d38:	4b33      	ldr	r3, [pc, #204]	; (8005e08 <MX_GPIO_Init+0x16c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d3a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = L6470_BUSY_SYNC_INT_Pin;
 8005d3c:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_Init(L6470_BUSY_SYNC_INT_GPIO_Port, &GPIO_InitStruct);
 8005d40:	4638      	mov	r0, r7
 8005d42:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005d44:	e9cd 8305 	strd	r8, r3, [sp, #20]
  HAL_GPIO_Init(L6470_BUSY_SYNC_INT_GPIO_Port, &GPIO_InitStruct);
 8005d48:	f7fb fcb4 	bl	80016b4 <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = L6470_CS_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d4c:	a905      	add	r1, sp, #20
 8005d4e:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = L6470_CS_Pin|LD2_Pin;
 8005d50:	2330      	movs	r3, #48	; 0x30

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005d52:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = L6470_CS_Pin|LD2_Pin;
 8005d54:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d56:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d5a:	e9cd 8406 	strd	r8, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d5e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d60:	f7fb fca8 	bl	80016b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d64:	4630      	mov	r0, r6
 8005d66:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005d68:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005d6a:	2605      	movs	r6, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d6c:	e9cd 3905 	strd	r3, r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d70:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005d72:	e9cd 7608 	strd	r7, r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d76:	f7fb fc9d 	bl	80016b4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d7a:	a905      	add	r1, sp, #20
 8005d7c:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005d7e:	2308      	movs	r3, #8
 8005d80:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d82:	e9cd 9406 	strd	r9, r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005d86:	e9cd 7608 	strd	r7, r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005d8a:	f7fb fc93 	bl	80016b4 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L6470_RST_STBY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(L6470_RST_STBY_GPIO_Port, &GPIO_InitStruct);
 8005d8e:	a905      	add	r1, sp, #20
 8005d90:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = L6470_RST_STBY_Pin;
 8005d92:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005d94:	2311      	movs	r3, #17
 8005d96:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d9a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(L6470_RST_STBY_GPIO_Port, &GPIO_InitStruct);
 8005d9e:	f7fb fc89 	bl	80016b4 <HAL_GPIO_Init>
  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005da2:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005da4:	a905      	add	r1, sp, #20
 8005da6:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005da8:	2212      	movs	r2, #18
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005daa:	f44f 7540 	mov.w	r5, #768	; 0x300
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005dae:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005db0:	e9cd 5205 	strd	r5, r2, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005db4:	e9cd 8707 	strd	r8, r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005db8:	f7fb fc7c 	bl	80016b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005dbc:	4622      	mov	r2, r4
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	2006      	movs	r0, #6
 8005dc2:	f7fb f94b 	bl	800105c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8005dc6:	2006      	movs	r0, #6
 8005dc8:	f7fb f98e 	bl	80010e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8005dcc:	4622      	mov	r2, r4
 8005dce:	4621      	mov	r1, r4
 8005dd0:	2007      	movs	r0, #7
 8005dd2:	f7fb f943 	bl	800105c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8005dd6:	2007      	movs	r0, #7
 8005dd8:	f7fb f986 	bl	80010e8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005ddc:	4622      	mov	r2, r4
 8005dde:	4621      	mov	r1, r4
 8005de0:	2028      	movs	r0, #40	; 0x28
 8005de2:	f7fb f93b 	bl	800105c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005de6:	2028      	movs	r0, #40	; 0x28
 8005de8:	f7fb f97e 	bl	80010e8 <HAL_NVIC_EnableIRQ>

}
 8005dec:	b00b      	add	sp, #44	; 0x2c
 8005dee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005df2:	bf00      	nop
 8005df4:	40023800 	.word	0x40023800
 8005df8:	40020000 	.word	0x40020000
 8005dfc:	40020400 	.word	0x40020400
 8005e00:	40020800 	.word	0x40020800
 8005e04:	10210000 	.word	0x10210000
 8005e08:	10110000 	.word	0x10110000

08005e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005e0c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e0e:	2400      	movs	r4, #0
{
 8005e10:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e12:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8005e16:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e1a:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8005e1e:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e22:	4b1d      	ldr	r3, [pc, #116]	; (8005e98 <SystemClock_Config+0x8c>)
 8005e24:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005e26:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005e28:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e2a:	6c19      	ldr	r1, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e2c:	4a1b      	ldr	r2, [pc, #108]	; (8005e9c <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8005e2e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8005e32:	6419      	str	r1, [r3, #64]	; 0x40
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e3a:	9301      	str	r3, [sp, #4]
 8005e3c:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e3e:	9402      	str	r4, [sp, #8]
 8005e40:	6813      	ldr	r3, [r2, #0]
 8005e42:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8005e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e4a:	6013      	str	r3, [r2, #0]
 8005e4c:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005e4e:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005e54:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005e56:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005e58:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005e5a:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005e5c:	f44f 71a8 	mov.w	r1, #336	; 0x150
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8005e60:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005e62:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005e64:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8005e66:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005e68:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e6a:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005e6c:	2307      	movs	r3, #7
 8005e6e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005e72:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005e74:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e76:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e78:	f7fb fdaa 	bl	80019d0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e7c:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005e82:	a803      	add	r0, sp, #12
 8005e84:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e86:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005e8a:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e8c:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005e8e:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005e90:	f7fc f822 	bl	8001ed8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8005e94:	b015      	add	sp, #84	; 0x54
 8005e96:	bd30      	pop	{r4, r5, pc}
 8005e98:	40023800 	.word	0x40023800
 8005e9c:	40007000 	.word	0x40007000

08005ea0 <main>:
{
 8005ea0:	b508      	push	{r3, lr}
  ucos_main();
 8005ea2:	f001 fb65 	bl	8007570 <ucos_main>
  HAL_Init();
 8005ea6:	f7fb f89d 	bl	8000fe4 <HAL_Init>
  SystemClock_Config();
 8005eaa:	f7ff ffaf 	bl	8005e0c <SystemClock_Config>
  MX_GPIO_Init();
 8005eae:	f7ff fef5 	bl	8005c9c <MX_GPIO_Init>
  MX_DMA_Init();
 8005eb2:	f7ff fecf 	bl	8005c54 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005eb6:	f001 fb8f 	bl	80075d8 <MX_USART2_UART_Init>
 8005eba:	e7fe      	b.n	8005eba <main+0x1a>

08005ebc <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop

08005ec0 <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop

08005ec4 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8005ec4:	429a      	cmp	r2, r3
    ((char*)buffer)[idx] = character;
 8005ec6:	bf38      	it	cc
 8005ec8:	5488      	strbcc	r0, [r1, r2]
  }
}
 8005eca:	4770      	bx	lr

08005ecc <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop

08005ed0 <_ntoa_format>:
}


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	4698      	mov	r8, r3
 8005ed8:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8005eda:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8005edc:	f89d e038 	ldrb.w	lr, [sp, #56]	; 0x38
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8005ee0:	f015 0302 	ands.w	r3, r5, #2
{
 8005ee4:	e9dd c910 	ldrd	ip, r9, [sp, #64]	; 0x40
 8005ee8:	4606      	mov	r6, r0
 8005eea:	460f      	mov	r7, r1
 8005eec:	4692      	mov	sl, r2
  if (!(flags & FLAGS_LEFT)) {
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	d126      	bne.n	8005f40 <_ntoa_format+0x70>
 8005ef2:	f005 0101 	and.w	r1, r5, #1
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005ef6:	f1b9 0f00 	cmp.w	r9, #0
 8005efa:	d131      	bne.n	8005f60 <_ntoa_format+0x90>
      width--;
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005efc:	4564      	cmp	r4, ip
 8005efe:	d20e      	bcs.n	8005f1e <_ntoa_format+0x4e>
 8005f00:	2c1f      	cmp	r4, #31
 8005f02:	f200 80f0 	bhi.w	80060e6 <_ntoa_format+0x216>
 8005f06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f08:	1e63      	subs	r3, r4, #1
 8005f0a:	4413      	add	r3, r2
      buf[len++] = '0';
 8005f0c:	2230      	movs	r2, #48	; 0x30
 8005f0e:	e001      	b.n	8005f14 <_ntoa_format+0x44>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f10:	2c20      	cmp	r4, #32
 8005f12:	d004      	beq.n	8005f1e <_ntoa_format+0x4e>
      buf[len++] = '0';
 8005f14:	3401      	adds	r4, #1
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f16:	45a4      	cmp	ip, r4
      buf[len++] = '0';
 8005f18:	f803 2f01 	strb.w	r2, [r3, #1]!
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f1c:	d8f8      	bhi.n	8005f10 <_ntoa_format+0x40>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f1e:	b179      	cbz	r1, 8005f40 <_ntoa_format+0x70>
 8005f20:	45a1      	cmp	r9, r4
 8005f22:	d90d      	bls.n	8005f40 <_ntoa_format+0x70>
 8005f24:	2c1f      	cmp	r4, #31
 8005f26:	d82e      	bhi.n	8005f86 <_ntoa_format+0xb6>
 8005f28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f2a:	1e63      	subs	r3, r4, #1
 8005f2c:	4413      	add	r3, r2
      buf[len++] = '0';
 8005f2e:	2230      	movs	r2, #48	; 0x30
 8005f30:	e001      	b.n	8005f36 <_ntoa_format+0x66>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f32:	2c20      	cmp	r4, #32
 8005f34:	d027      	beq.n	8005f86 <_ntoa_format+0xb6>
      buf[len++] = '0';
 8005f36:	3401      	adds	r4, #1
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f38:	454c      	cmp	r4, r9
      buf[len++] = '0';
 8005f3a:	f803 2f01 	strb.w	r2, [r3, #1]!
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f3e:	d1f8      	bne.n	8005f32 <_ntoa_format+0x62>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8005f40:	06ea      	lsls	r2, r5, #27
 8005f42:	d53b      	bpl.n	8005fbc <_ntoa_format+0xec>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8005f44:	056b      	lsls	r3, r5, #21
 8005f46:	d426      	bmi.n	8005f96 <_ntoa_format+0xc6>
 8005f48:	bb0c      	cbnz	r4, 8005f8e <_ntoa_format+0xbe>
      len--;
      if (len && (base == 16U)) {
        len--;
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f4c:	2b10      	cmp	r3, #16
 8005f4e:	f000 80be 	beq.w	80060ce <_ntoa_format+0x1fe>
      buf[len++] = 'x';
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
      buf[len++] = 'X';
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f52:	2b02      	cmp	r3, #2
 8005f54:	d12d      	bne.n	8005fb2 <_ntoa_format+0xe2>
      buf[len++] = 'b';
 8005f56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005f58:	2362      	movs	r3, #98	; 0x62
 8005f5a:	7013      	strb	r3, [r2, #0]
 8005f5c:	2401      	movs	r4, #1
 8005f5e:	e028      	b.n	8005fb2 <_ntoa_format+0xe2>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005f60:	2900      	cmp	r1, #0
 8005f62:	f000 8086 	beq.w	8006072 <_ntoa_format+0x1a2>
 8005f66:	f1be 0f00 	cmp.w	lr, #0
 8005f6a:	d102      	bne.n	8005f72 <_ntoa_format+0xa2>
 8005f6c:	f015 0f0c 	tst.w	r5, #12
 8005f70:	d001      	beq.n	8005f76 <_ntoa_format+0xa6>
      width--;
 8005f72:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f76:	4564      	cmp	r4, ip
 8005f78:	d2d2      	bcs.n	8005f20 <_ntoa_format+0x50>
 8005f7a:	2c1f      	cmp	r4, #31
 8005f7c:	d9c3      	bls.n	8005f06 <_ntoa_format+0x36>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f7e:	f1b9 0f20 	cmp.w	r9, #32
 8005f82:	d97c      	bls.n	800607e <_ntoa_format+0x1ae>
 8005f84:	2420      	movs	r4, #32
  if (flags & FLAGS_HASH) {
 8005f86:	06e8      	lsls	r0, r5, #27
 8005f88:	d52a      	bpl.n	8005fe0 <_ntoa_format+0x110>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8005f8a:	056a      	lsls	r2, r5, #21
 8005f8c:	d403      	bmi.n	8005f96 <_ntoa_format+0xc6>
 8005f8e:	45a4      	cmp	ip, r4
 8005f90:	d077      	beq.n	8006082 <_ntoa_format+0x1b2>
 8005f92:	454c      	cmp	r4, r9
 8005f94:	d075      	beq.n	8006082 <_ntoa_format+0x1b2>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f96:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005f98:	2b10      	cmp	r3, #16
 8005f9a:	d048      	beq.n	800602e <_ntoa_format+0x15e>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8005f9c:	2b02      	cmp	r3, #2
 8005f9e:	d106      	bne.n	8005fae <_ntoa_format+0xde>
 8005fa0:	2c1f      	cmp	r4, #31
 8005fa2:	d848      	bhi.n	8006036 <_ntoa_format+0x166>
 8005fa4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fa6:	4423      	add	r3, r4
      buf[len++] = 'b';
 8005fa8:	2262      	movs	r2, #98	; 0x62
 8005faa:	3401      	adds	r4, #1
 8005fac:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8005fae:	2c1f      	cmp	r4, #31
 8005fb0:	d841      	bhi.n	8006036 <_ntoa_format+0x166>
 8005fb2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fb4:	4423      	add	r3, r4
      buf[len++] = '0';
 8005fb6:	2230      	movs	r2, #48	; 0x30
 8005fb8:	3401      	adds	r4, #1
 8005fba:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8005fbc:	2c1f      	cmp	r4, #31
 8005fbe:	d83a      	bhi.n	8006036 <_ntoa_format+0x166>
    if (negative) {
 8005fc0:	f1be 0f00 	cmp.w	lr, #0
 8005fc4:	d108      	bne.n	8005fd8 <_ntoa_format+0x108>
      buf[len++] = '-';
    }
    else if (flags & FLAGS_PLUS) {
 8005fc6:	076a      	lsls	r2, r5, #29
 8005fc8:	d44e      	bmi.n	8006068 <_ntoa_format+0x198>
      buf[len++] = '+';  // ignore the space if the '+' exists
    }
    else if (flags & FLAGS_SPACE) {
 8005fca:	072b      	lsls	r3, r5, #28
 8005fcc:	d533      	bpl.n	8006036 <_ntoa_format+0x166>
      buf[len++] = ' ';
 8005fce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fd0:	2320      	movs	r3, #32
 8005fd2:	5513      	strb	r3, [r2, r4]
 8005fd4:	3401      	adds	r4, #1
 8005fd6:	e003      	b.n	8005fe0 <_ntoa_format+0x110>
      buf[len++] = '-';
 8005fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005fda:	232d      	movs	r3, #45	; 0x2d
 8005fdc:	5513      	strb	r3, [r2, r4]
 8005fde:	3401      	adds	r4, #1
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8005fe0:	07ab      	lsls	r3, r5, #30
 8005fe2:	d02a      	beq.n	800603a <_ntoa_format+0x16a>
 8005fe4:	4655      	mov	r5, sl
 8005fe6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005fe8:	eb03 0b04 	add.w	fp, r3, r4
 8005fec:	442c      	add	r4, r5
    out(buf[--len], buffer, idx++, maxlen);
 8005fee:	1c69      	adds	r1, r5, #1
 8005ff0:	462a      	mov	r2, r5
 8005ff2:	4643      	mov	r3, r8
 8005ff4:	460d      	mov	r5, r1
 8005ff6:	f81b 0d01 	ldrb.w	r0, [fp, #-1]!
 8005ffa:	4639      	mov	r1, r7
 8005ffc:	47b0      	blx	r6
  while (len) {
 8005ffe:	42a5      	cmp	r5, r4
 8006000:	d1f5      	bne.n	8005fee <_ntoa_format+0x11e>
  if (flags & FLAGS_LEFT) {
 8006002:	9b01      	ldr	r3, [sp, #4]
 8006004:	b173      	cbz	r3, 8006024 <_ntoa_format+0x154>
    while (idx - start_idx < width) {
 8006006:	eba4 030a 	sub.w	r3, r4, sl
 800600a:	454b      	cmp	r3, r9
 800600c:	d20a      	bcs.n	8006024 <_ntoa_format+0x154>
      out(' ', buffer, idx++, maxlen);
 800600e:	1c61      	adds	r1, r4, #1
 8006010:	4622      	mov	r2, r4
 8006012:	4643      	mov	r3, r8
 8006014:	460c      	mov	r4, r1
 8006016:	2020      	movs	r0, #32
 8006018:	4639      	mov	r1, r7
 800601a:	47b0      	blx	r6
    while (idx - start_idx < width) {
 800601c:	eba4 030a 	sub.w	r3, r4, sl
 8006020:	454b      	cmp	r3, r9
 8006022:	d3f4      	bcc.n	800600e <_ntoa_format+0x13e>
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 8006024:	4620      	mov	r0, r4
 8006026:	b003      	add	sp, #12
 8006028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        len--;
 800602c:	3c02      	subs	r4, #2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800602e:	06a9      	lsls	r1, r5, #26
 8006030:	d537      	bpl.n	80060a2 <_ntoa_format+0x1d2>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006032:	2c1f      	cmp	r4, #31
 8006034:	d945      	bls.n	80060c2 <_ntoa_format+0x1f2>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8006036:	07ad      	lsls	r5, r5, #30
 8006038:	d112      	bne.n	8006060 <_ntoa_format+0x190>
    for (size_t i = len; i < width; i++) {
 800603a:	454c      	cmp	r4, r9
 800603c:	d210      	bcs.n	8006060 <_ntoa_format+0x190>
 800603e:	eb0a 0b09 	add.w	fp, sl, r9
 8006042:	ebab 0b04 	sub.w	fp, fp, r4
 8006046:	4652      	mov	r2, sl
      out(' ', buffer, idx++, maxlen);
 8006048:	1c55      	adds	r5, r2, #1
 800604a:	4643      	mov	r3, r8
 800604c:	4639      	mov	r1, r7
 800604e:	2020      	movs	r0, #32
 8006050:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 8006052:	45ab      	cmp	fp, r5
 8006054:	462a      	mov	r2, r5
 8006056:	d1f7      	bne.n	8006048 <_ntoa_format+0x178>
  while (len) {
 8006058:	2c00      	cmp	r4, #0
 800605a:	d1c4      	bne.n	8005fe6 <_ntoa_format+0x116>
 800605c:	462c      	mov	r4, r5
 800605e:	e7d0      	b.n	8006002 <_ntoa_format+0x132>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8006060:	4655      	mov	r5, sl
  while (len) {
 8006062:	2c00      	cmp	r4, #0
 8006064:	d1bf      	bne.n	8005fe6 <_ntoa_format+0x116>
 8006066:	e7f9      	b.n	800605c <_ntoa_format+0x18c>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8006068:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800606a:	232b      	movs	r3, #43	; 0x2b
 800606c:	5513      	strb	r3, [r2, r4]
 800606e:	3401      	adds	r4, #1
 8006070:	e7b6      	b.n	8005fe0 <_ntoa_format+0x110>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006072:	4564      	cmp	r4, ip
 8006074:	f4bf af64 	bcs.w	8005f40 <_ntoa_format+0x70>
 8006078:	2c1f      	cmp	r4, #31
 800607a:	f67f af44 	bls.w	8005f06 <_ntoa_format+0x36>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800607e:	2420      	movs	r4, #32
 8006080:	e75e      	b.n	8005f40 <_ntoa_format+0x70>
      if (len && (base == 16U)) {
 8006082:	1e63      	subs	r3, r4, #1
 8006084:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006086:	d114      	bne.n	80060b2 <_ntoa_format+0x1e2>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8006088:	2a10      	cmp	r2, #16
 800608a:	d017      	beq.n	80060bc <_ntoa_format+0x1ec>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800608c:	2a02      	cmp	r2, #2
 800608e:	f43f af62 	beq.w	8005f56 <_ntoa_format+0x86>
      buf[len++] = '0';
 8006092:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006094:	2330      	movs	r3, #48	; 0x30
 8006096:	7013      	strb	r3, [r2, #0]
 8006098:	2401      	movs	r4, #1
    if (negative) {
 800609a:	f1be 0f00 	cmp.w	lr, #0
 800609e:	d092      	beq.n	8005fc6 <_ntoa_format+0xf6>
 80060a0:	e79a      	b.n	8005fd8 <_ntoa_format+0x108>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80060a2:	2c1f      	cmp	r4, #31
 80060a4:	d89c      	bhi.n	8005fe0 <_ntoa_format+0x110>
 80060a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060a8:	4423      	add	r3, r4
      buf[len++] = 'x';
 80060aa:	2278      	movs	r2, #120	; 0x78
 80060ac:	3401      	adds	r4, #1
 80060ae:	701a      	strb	r2, [r3, #0]
 80060b0:	e77d      	b.n	8005fae <_ntoa_format+0xde>
      if (len && (base == 16U)) {
 80060b2:	2a10      	cmp	r2, #16
 80060b4:	d0ba      	beq.n	800602c <_ntoa_format+0x15c>
 80060b6:	461c      	mov	r4, r3
 80060b8:	4613      	mov	r3, r2
 80060ba:	e76f      	b.n	8005f9c <_ntoa_format+0xcc>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80060bc:	06a9      	lsls	r1, r5, #26
 80060be:	d50d      	bpl.n	80060dc <_ntoa_format+0x20c>
 80060c0:	461c      	mov	r4, r3
 80060c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060c4:	4423      	add	r3, r4
      buf[len++] = 'X';
 80060c6:	2258      	movs	r2, #88	; 0x58
 80060c8:	3401      	adds	r4, #1
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	e76f      	b.n	8005fae <_ntoa_format+0xde>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80060ce:	06a8      	lsls	r0, r5, #26
 80060d0:	d504      	bpl.n	80060dc <_ntoa_format+0x20c>
      buf[len++] = 'X';
 80060d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060d4:	2358      	movs	r3, #88	; 0x58
 80060d6:	7013      	strb	r3, [r2, #0]
 80060d8:	2401      	movs	r4, #1
 80060da:	e76a      	b.n	8005fb2 <_ntoa_format+0xe2>
      buf[len++] = 'x';
 80060dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060de:	2378      	movs	r3, #120	; 0x78
 80060e0:	7013      	strb	r3, [r2, #0]
 80060e2:	2401      	movs	r4, #1
 80060e4:	e765      	b.n	8005fb2 <_ntoa_format+0xe2>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80060e6:	2420      	movs	r4, #32
 80060e8:	e719      	b.n	8005f1e <_ntoa_format+0x4e>
 80060ea:	bf00      	nop
 80060ec:	0000      	movs	r0, r0
	...

080060f0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 80060f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060f4:	b093      	sub	sp, #76	; 0x4c
 80060f6:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	; 0x70
 80060fa:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 80060fc:	9402      	str	r4, [sp, #8]
 80060fe:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 8006100:	9401      	str	r4, [sp, #4]
 8006102:	4606      	mov	r6, r0
 8006104:	460f      	mov	r7, r1
 8006106:	4691      	mov	r9, r2
 8006108:	4698      	mov	r8, r3
 800610a:	9c20      	ldr	r4, [sp, #128]	; 0x80
 800610c:	9400      	str	r4, [sp, #0]
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
  if (value < -DBL_MAX)
 800610e:	4650      	mov	r0, sl
 8006110:	4659      	mov	r1, fp
 8006112:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006116:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800611a:	f7fa fd39 	bl	8000b90 <__aeabi_dcmplt>
 800611e:	2800      	cmp	r0, #0
 8006120:	f040 814a 	bne.w	80063b8 <_ftoa+0x2c8>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  if (value > DBL_MAX)
 8006124:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006128:	4bb3      	ldr	r3, [pc, #716]	; (80063f8 <_ftoa+0x308>)
 800612a:	4650      	mov	r0, sl
 800612c:	4659      	mov	r1, fp
 800612e:	f7fa fd4d 	bl	8000bcc <__aeabi_dcmpgt>
 8006132:	2800      	cmp	r0, #0
 8006134:	f040 80ec 	bne.w	8006310 <_ftoa+0x220>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8006138:	a3a9      	add	r3, pc, #676	; (adr r3, 80063e0 <_ftoa+0x2f0>)
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	4650      	mov	r0, sl
 8006140:	4659      	mov	r1, fp
 8006142:	f7fa fd43 	bl	8000bcc <__aeabi_dcmpgt>
 8006146:	2800      	cmp	r0, #0
 8006148:	f040 8125 	bne.w	8006396 <_ftoa+0x2a6>
 800614c:	a3a6      	add	r3, pc, #664	; (adr r3, 80063e8 <_ftoa+0x2f8>)
 800614e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006152:	4650      	mov	r0, sl
 8006154:	4659      	mov	r1, fp
 8006156:	f7fa fd1b 	bl	8000b90 <__aeabi_dcmplt>
 800615a:	2800      	cmp	r0, #0
 800615c:	f040 811b 	bne.w	8006396 <_ftoa+0x2a6>
#endif
  }

  // test for negative
  bool negative = false;
  if (value < 0) {
 8006160:	2200      	movs	r2, #0
 8006162:	2300      	movs	r3, #0
 8006164:	4650      	mov	r0, sl
 8006166:	4659      	mov	r1, fp
 8006168:	f7fa fd12 	bl	8000b90 <__aeabi_dcmplt>
 800616c:	2800      	cmp	r0, #0
 800616e:	f040 8207 	bne.w	8006580 <_ftoa+0x490>
  bool negative = false;
 8006172:	9009      	str	r0, [sp, #36]	; 0x24
 8006174:	4623      	mov	r3, r4
    negative = true;
    value = 0 - value;
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8006176:	f413 6580 	ands.w	r5, r3, #1024	; 0x400
 800617a:	f040 81c5 	bne.w	8006508 <_ftoa+0x418>
 800617e:	ed9f 7b9c 	vldr	d7, [pc, #624]	; 80063f0 <_ftoa+0x300>
 8006182:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006186:	ab0a      	add	r3, sp, #40	; 0x28
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8006188:	2406      	movs	r4, #6
 800618a:	9303      	str	r3, [sp, #12]
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    buf[len++] = '0';
    prec--;
  }

  int whole = (int)value;
 800618c:	4659      	mov	r1, fp
 800618e:	4650      	mov	r0, sl
 8006190:	f7fa fd3c 	bl	8000c0c <__aeabi_d2iz>
 8006194:	9008      	str	r0, [sp, #32]
  double tmp = (value - whole) * pow10[prec];
 8006196:	f7fa fa1f 	bl	80005d8 <__aeabi_i2d>
 800619a:	4602      	mov	r2, r0
 800619c:	460b      	mov	r3, r1
 800619e:	4650      	mov	r0, sl
 80061a0:	4659      	mov	r1, fp
 80061a2:	f7fa f8cb 	bl	800033c <__aeabi_dsub>
 80061a6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061aa:	f7fa fa7f 	bl	80006ac <__aeabi_dmul>
 80061ae:	e9cd 0106 	strd	r0, r1, [sp, #24]
  unsigned long frac = (unsigned long)tmp;
 80061b2:	f7fa fd53 	bl	8000c5c <__aeabi_d2uiz>
 80061b6:	9002      	str	r0, [sp, #8]
  diff = tmp - frac;
 80061b8:	f7fa f9fe 	bl	80005b8 <__aeabi_ui2d>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061c4:	f7fa f8ba 	bl	800033c <__aeabi_dsub>

  if (diff > 0.5) {
 80061c8:	2200      	movs	r2, #0
 80061ca:	4b8c      	ldr	r3, [pc, #560]	; (80063fc <_ftoa+0x30c>)
  diff = tmp - frac;
 80061cc:	e9cd 0106 	strd	r0, r1, [sp, #24]
  if (diff > 0.5) {
 80061d0:	f7fa fcfc 	bl	8000bcc <__aeabi_dcmpgt>
 80061d4:	2800      	cmp	r0, #0
 80061d6:	f000 81b5 	beq.w	8006544 <_ftoa+0x454>
    ++frac;
 80061da:	9b02      	ldr	r3, [sp, #8]
 80061dc:	3301      	adds	r3, #1
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80061de:	4618      	mov	r0, r3
    ++frac;
 80061e0:	9302      	str	r3, [sp, #8]
    if (frac >= pow10[prec]) {
 80061e2:	f7fa f9e9 	bl	80005b8 <__aeabi_ui2d>
 80061e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80061ea:	f7fa fce5 	bl	8000bb8 <__aeabi_dcmpge>
 80061ee:	2800      	cmp	r0, #0
 80061f0:	f040 81c0 	bne.w	8006574 <_ftoa+0x484>
  else if ((frac == 0U) || (frac & 1U)) {
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
  }

  if (prec == 0U) {
 80061f4:	2c00      	cmp	r4, #0
 80061f6:	f040 8133 	bne.w	8006460 <_ftoa+0x370>
    diff = value - (double)whole;
 80061fa:	9c08      	ldr	r4, [sp, #32]
 80061fc:	4620      	mov	r0, r4
 80061fe:	f7fa f9eb 	bl	80005d8 <__aeabi_i2d>
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	4650      	mov	r0, sl
 8006208:	4659      	mov	r1, fp
 800620a:	f7fa f897 	bl	800033c <__aeabi_dsub>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800620e:	2200      	movs	r2, #0
 8006210:	4b7a      	ldr	r3, [pc, #488]	; (80063fc <_ftoa+0x30c>)
 8006212:	f7fa fcd1 	bl	8000bb8 <__aeabi_dcmpge>
 8006216:	2800      	cmp	r0, #0
 8006218:	f040 81a5 	bne.w	8006566 <_ftoa+0x476>
      buf[len++] = '.';
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800621c:	2d20      	cmp	r5, #32
 800621e:	f000 814b 	beq.w	80064b8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8006222:	9908      	ldr	r1, [sp, #32]
 8006224:	4876      	ldr	r0, [pc, #472]	; (8006400 <_ftoa+0x310>)
 8006226:	17cb      	asrs	r3, r1, #31
 8006228:	fb80 4201 	smull	r4, r2, r0, r1
 800622c:	ebc3 03a2 	rsb	r3, r3, r2, asr #2
 8006230:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8006234:	eba1 0b42 	sub.w	fp, r1, r2, lsl #1
 8006238:	aa12      	add	r2, sp, #72	; 0x48
 800623a:	442a      	add	r2, r5
 800623c:	f10b 0b30 	add.w	fp, fp, #48	; 0x30
 8006240:	f802 bc20 	strb.w	fp, [r2, #-32]
 8006244:	3501      	adds	r5, #1
    if (!(whole /= 10)) {
 8006246:	b1ab      	cbz	r3, 8006274 <_ftoa+0x184>
 8006248:	9a03      	ldr	r2, [sp, #12]
 800624a:	1951      	adds	r1, r2, r5
    buf[len++] = (char)(48 + (whole % 10));
 800624c:	fb80 2403 	smull	r2, r4, r0, r3
 8006250:	17da      	asrs	r2, r3, #31
 8006252:	ebc2 02a4 	rsb	r2, r2, r4, asr #2
 8006256:	eb02 0482 	add.w	r4, r2, r2, lsl #2
 800625a:	eba3 0344 	sub.w	r3, r3, r4, lsl #1
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800625e:	2d20      	cmp	r5, #32
    buf[len++] = (char)(48 + (whole % 10));
 8006260:	f103 0330 	add.w	r3, r3, #48	; 0x30
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006264:	f000 8128 	beq.w	80064b8 <_ftoa+0x3c8>
    buf[len++] = (char)(48 + (whole % 10));
 8006268:	f801 3b01 	strb.w	r3, [r1], #1
 800626c:	3501      	adds	r5, #1
    if (!(whole /= 10)) {
 800626e:	4613      	mov	r3, r2
 8006270:	2a00      	cmp	r2, #0
 8006272:	d1eb      	bne.n	800624c <_ftoa+0x15c>
      break;
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8006274:	9b00      	ldr	r3, [sp, #0]
 8006276:	f003 0303 	and.w	r3, r3, #3
 800627a:	2b01      	cmp	r3, #1
 800627c:	f000 8124 	beq.w	80064c8 <_ftoa+0x3d8>
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
      buf[len++] = '0';
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006280:	2d20      	cmp	r5, #32
 8006282:	d009      	beq.n	8006298 <_ftoa+0x1a8>
    if (negative) {
 8006284:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006286:	2a00      	cmp	r2, #0
 8006288:	f000 8181 	beq.w	800658e <_ftoa+0x49e>
      buf[len++] = '-';
 800628c:	aa12      	add	r2, sp, #72	; 0x48
 800628e:	442a      	add	r2, r5
 8006290:	212d      	movs	r1, #45	; 0x2d
 8006292:	3501      	adds	r5, #1
 8006294:	f802 1c20 	strb.w	r1, [r2, #-32]
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8006298:	2b00      	cmp	r3, #0
 800629a:	f040 8133 	bne.w	8006504 <_ftoa+0x414>
    for (size_t i = len; i < width; i++) {
 800629e:	9b01      	ldr	r3, [sp, #4]
 80062a0:	429d      	cmp	r5, r3
 80062a2:	f080 812f 	bcs.w	8006504 <_ftoa+0x414>
 80062a6:	eb09 0a03 	add.w	sl, r9, r3
 80062aa:	ebaa 0a05 	sub.w	sl, sl, r5
 80062ae:	464a      	mov	r2, r9
      out(' ', buffer, idx++, maxlen);
 80062b0:	1c54      	adds	r4, r2, #1
 80062b2:	4643      	mov	r3, r8
 80062b4:	4639      	mov	r1, r7
 80062b6:	2020      	movs	r0, #32
 80062b8:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 80062ba:	4554      	cmp	r4, sl
 80062bc:	4622      	mov	r2, r4
 80062be:	d1f7      	bne.n	80062b0 <_ftoa+0x1c0>
 80062c0:	9b03      	ldr	r3, [sp, #12]
 80062c2:	9502      	str	r5, [sp, #8]
 80062c4:	eb03 0a05 	add.w	sl, r3, r5
 80062c8:	4622      	mov	r2, r4
 80062ca:	469b      	mov	fp, r3
    out(buf[--len], buffer, idx++, maxlen);
 80062cc:	f81a 0d01 	ldrb.w	r0, [sl, #-1]!
 80062d0:	4643      	mov	r3, r8
 80062d2:	4639      	mov	r1, r7
 80062d4:	1c55      	adds	r5, r2, #1
 80062d6:	47b0      	blx	r6
  while (len) {
 80062d8:	45d3      	cmp	fp, sl
    out(buf[--len], buffer, idx++, maxlen);
 80062da:	462a      	mov	r2, r5
  while (len) {
 80062dc:	d1f6      	bne.n	80062cc <_ftoa+0x1dc>
  if (flags & FLAGS_LEFT) {
 80062de:	9b00      	ldr	r3, [sp, #0]
 80062e0:	9d02      	ldr	r5, [sp, #8]
 80062e2:	079b      	lsls	r3, r3, #30
 80062e4:	442c      	add	r4, r5
 80062e6:	d50f      	bpl.n	8006308 <_ftoa+0x218>
    while (idx - start_idx < width) {
 80062e8:	9d01      	ldr	r5, [sp, #4]
 80062ea:	eba4 0309 	sub.w	r3, r4, r9
 80062ee:	42ab      	cmp	r3, r5
 80062f0:	d20a      	bcs.n	8006308 <_ftoa+0x218>
      out(' ', buffer, idx++, maxlen);
 80062f2:	1c61      	adds	r1, r4, #1
 80062f4:	4622      	mov	r2, r4
 80062f6:	4643      	mov	r3, r8
 80062f8:	460c      	mov	r4, r1
 80062fa:	2020      	movs	r0, #32
 80062fc:	4639      	mov	r1, r7
 80062fe:	47b0      	blx	r6
    while (idx - start_idx < width) {
 8006300:	eba4 0309 	sub.w	r3, r4, r9
 8006304:	429d      	cmp	r5, r3
 8006306:	d8f4      	bhi.n	80062f2 <_ftoa+0x202>
      buf[len++] = ' ';
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
}
 8006308:	4620      	mov	r0, r4
 800630a:	b013      	add	sp, #76	; 0x4c
 800630c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8006310:	f004 0304 	and.w	r3, r4, #4
 8006314:	4a3b      	ldr	r2, [pc, #236]	; (8006404 <_ftoa+0x314>)
 8006316:	4d3c      	ldr	r5, [pc, #240]	; (8006408 <_ftoa+0x318>)
 8006318:	2b00      	cmp	r3, #0
 800631a:	4621      	mov	r1, r4
 800631c:	bf0a      	itet	eq
 800631e:	4615      	moveq	r5, r2
 8006320:	2404      	movne	r4, #4
 8006322:	2403      	moveq	r4, #3
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8006324:	0788      	lsls	r0, r1, #30
 8006326:	d111      	bne.n	800634c <_ftoa+0x25c>
    for (size_t i = len; i < width; i++) {
 8006328:	9b01      	ldr	r3, [sp, #4]
 800632a:	429c      	cmp	r4, r3
 800632c:	d20e      	bcs.n	800634c <_ftoa+0x25c>
 800632e:	eb03 0b09 	add.w	fp, r3, r9
 8006332:	ebab 0b04 	sub.w	fp, fp, r4
 8006336:	464a      	mov	r2, r9
      out(' ', buffer, idx++, maxlen);
 8006338:	f102 0a01 	add.w	sl, r2, #1
 800633c:	4643      	mov	r3, r8
 800633e:	4639      	mov	r1, r7
 8006340:	2020      	movs	r0, #32
 8006342:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 8006344:	45da      	cmp	sl, fp
 8006346:	4652      	mov	r2, sl
 8006348:	d1f6      	bne.n	8006338 <_ftoa+0x248>
 800634a:	e000      	b.n	800634e <_ftoa+0x25e>
 800634c:	46ca      	mov	sl, r9
 800634e:	4425      	add	r5, r4
 8006350:	4454      	add	r4, sl
    out(buf[--len], buffer, idx++, maxlen);
 8006352:	f10a 0101 	add.w	r1, sl, #1
 8006356:	4652      	mov	r2, sl
 8006358:	4643      	mov	r3, r8
 800635a:	468a      	mov	sl, r1
 800635c:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 8006360:	4639      	mov	r1, r7
 8006362:	47b0      	blx	r6
  while (len) {
 8006364:	45a2      	cmp	sl, r4
 8006366:	d1f4      	bne.n	8006352 <_ftoa+0x262>
  if (flags & FLAGS_LEFT) {
 8006368:	9b00      	ldr	r3, [sp, #0]
 800636a:	0799      	lsls	r1, r3, #30
 800636c:	d5cc      	bpl.n	8006308 <_ftoa+0x218>
    while (idx - start_idx < width) {
 800636e:	9d01      	ldr	r5, [sp, #4]
 8006370:	eba4 0309 	sub.w	r3, r4, r9
 8006374:	42ab      	cmp	r3, r5
 8006376:	d2c7      	bcs.n	8006308 <_ftoa+0x218>
      out(' ', buffer, idx++, maxlen);
 8006378:	1c61      	adds	r1, r4, #1
 800637a:	4622      	mov	r2, r4
 800637c:	4643      	mov	r3, r8
 800637e:	460c      	mov	r4, r1
 8006380:	2020      	movs	r0, #32
 8006382:	4639      	mov	r1, r7
 8006384:	47b0      	blx	r6
    while (idx - start_idx < width) {
 8006386:	eba4 0309 	sub.w	r3, r4, r9
 800638a:	429d      	cmp	r5, r3
 800638c:	d8f4      	bhi.n	8006378 <_ftoa+0x288>
}
 800638e:	4620      	mov	r0, r4
 8006390:	b013      	add	sp, #76	; 0x4c
 8006392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8006396:	9b00      	ldr	r3, [sp, #0]
 8006398:	9320      	str	r3, [sp, #128]	; 0x80
 800639a:	9b01      	ldr	r3, [sp, #4]
 800639c:	931f      	str	r3, [sp, #124]	; 0x7c
 800639e:	9b02      	ldr	r3, [sp, #8]
 80063a0:	931e      	str	r3, [sp, #120]	; 0x78
 80063a2:	464a      	mov	r2, r9
 80063a4:	4643      	mov	r3, r8
 80063a6:	4639      	mov	r1, r7
 80063a8:	4630      	mov	r0, r6
 80063aa:	e9cd ab1c 	strd	sl, fp, [sp, #112]	; 0x70
}
 80063ae:	b013      	add	sp, #76	; 0x4c
 80063b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80063b4:	f000 b934 	b.w	8006620 <_etoa>
 80063b8:	4623      	mov	r3, r4
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 80063ba:	079b      	lsls	r3, r3, #30
 80063bc:	d126      	bne.n	800640c <_ftoa+0x31c>
    for (size_t i = len; i < width; i++) {
 80063be:	9b01      	ldr	r3, [sp, #4]
 80063c0:	2b04      	cmp	r3, #4
 80063c2:	d923      	bls.n	800640c <_ftoa+0x31c>
 80063c4:	f1a9 0504 	sub.w	r5, r9, #4
 80063c8:	441d      	add	r5, r3
 80063ca:	464a      	mov	r2, r9
      out(' ', buffer, idx++, maxlen);
 80063cc:	1c54      	adds	r4, r2, #1
 80063ce:	4643      	mov	r3, r8
 80063d0:	4639      	mov	r1, r7
 80063d2:	2020      	movs	r0, #32
 80063d4:	47b0      	blx	r6
    for (size_t i = len; i < width; i++) {
 80063d6:	42ac      	cmp	r4, r5
 80063d8:	4622      	mov	r2, r4
 80063da:	d1f7      	bne.n	80063cc <_ftoa+0x2dc>
 80063dc:	e017      	b.n	800640e <_ftoa+0x31e>
 80063de:	bf00      	nop
 80063e0:	00000000 	.word	0x00000000
 80063e4:	41cdcd65 	.word	0x41cdcd65
 80063e8:	00000000 	.word	0x00000000
 80063ec:	c1cdcd65 	.word	0xc1cdcd65
 80063f0:	00000000 	.word	0x00000000
 80063f4:	412e8480 	.word	0x412e8480
 80063f8:	7fefffff 	.word	0x7fefffff
 80063fc:	3fe00000 	.word	0x3fe00000
 8006400:	66666667 	.word	0x66666667
 8006404:	08009020 	.word	0x08009020
 8006408:	08009018 	.word	0x08009018
 800640c:	464c      	mov	r4, r9
 800640e:	4d7f      	ldr	r5, [pc, #508]	; (800660c <_ftoa+0x51c>)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8006410:	4622      	mov	r2, r4
 8006412:	f1a5 0b04 	sub.w	fp, r5, #4
    out(buf[--len], buffer, idx++, maxlen);
 8006416:	f815 0d01 	ldrb.w	r0, [r5, #-1]!
 800641a:	4643      	mov	r3, r8
 800641c:	4639      	mov	r1, r7
 800641e:	f102 0a01 	add.w	sl, r2, #1
 8006422:	47b0      	blx	r6
  while (len) {
 8006424:	45ab      	cmp	fp, r5
    out(buf[--len], buffer, idx++, maxlen);
 8006426:	4652      	mov	r2, sl
  while (len) {
 8006428:	d1f5      	bne.n	8006416 <_ftoa+0x326>
  if (flags & FLAGS_LEFT) {
 800642a:	9b00      	ldr	r3, [sp, #0]
 800642c:	079d      	lsls	r5, r3, #30
 800642e:	f104 0404 	add.w	r4, r4, #4
 8006432:	f57f af69 	bpl.w	8006308 <_ftoa+0x218>
    while (idx - start_idx < width) {
 8006436:	9d01      	ldr	r5, [sp, #4]
 8006438:	eba4 0309 	sub.w	r3, r4, r9
 800643c:	429d      	cmp	r5, r3
 800643e:	f67f af63 	bls.w	8006308 <_ftoa+0x218>
      out(' ', buffer, idx++, maxlen);
 8006442:	1c61      	adds	r1, r4, #1
 8006444:	4622      	mov	r2, r4
 8006446:	4643      	mov	r3, r8
 8006448:	460c      	mov	r4, r1
 800644a:	2020      	movs	r0, #32
 800644c:	4639      	mov	r1, r7
 800644e:	47b0      	blx	r6
    while (idx - start_idx < width) {
 8006450:	eba4 0309 	sub.w	r3, r4, r9
 8006454:	429d      	cmp	r5, r3
 8006456:	d8f4      	bhi.n	8006442 <_ftoa+0x352>
}
 8006458:	4620      	mov	r0, r4
 800645a:	b013      	add	sp, #76	; 0x4c
 800645c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8006460:	2d20      	cmp	r5, #32
 8006462:	d029      	beq.n	80064b8 <_ftoa+0x3c8>
      buf[len++] = (char)(48U + (frac % 10U));
 8006464:	9802      	ldr	r0, [sp, #8]
 8006466:	4a6a      	ldr	r2, [pc, #424]	; (8006610 <_ftoa+0x520>)
 8006468:	fba2 1300 	umull	r1, r3, r2, r0
 800646c:	08db      	lsrs	r3, r3, #3
 800646e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8006472:	eba0 0a41 	sub.w	sl, r0, r1, lsl #1
 8006476:	a912      	add	r1, sp, #72	; 0x48
 8006478:	4429      	add	r1, r5
 800647a:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
      --count;
 800647e:	3c01      	subs	r4, #1
      buf[len++] = (char)(48U + (frac % 10U));
 8006480:	f801 ac20 	strb.w	sl, [r1, #-32]
 8006484:	3501      	adds	r5, #1
      if (!(frac /= 10U)) {
 8006486:	2b00      	cmp	r3, #0
 8006488:	f000 808b 	beq.w	80065a2 <_ftoa+0x4b2>
      buf[len++] = (char)(48U + (frac % 10U));
 800648c:	4694      	mov	ip, r2
 800648e:	9a03      	ldr	r2, [sp, #12]
 8006490:	1950      	adds	r0, r2, r5
 8006492:	e006      	b.n	80064a2 <_ftoa+0x3b2>
 8006494:	f800 3b01 	strb.w	r3, [r0], #1
      --count;
 8006498:	3c01      	subs	r4, #1
      buf[len++] = (char)(48U + (frac % 10U));
 800649a:	3501      	adds	r5, #1
      if (!(frac /= 10U)) {
 800649c:	4613      	mov	r3, r2
 800649e:	2a00      	cmp	r2, #0
 80064a0:	d07f      	beq.n	80065a2 <_ftoa+0x4b2>
      buf[len++] = (char)(48U + (frac % 10U));
 80064a2:	fbac 1203 	umull	r1, r2, ip, r3
 80064a6:	08d2      	lsrs	r2, r2, #3
 80064a8:	eb02 0182 	add.w	r1, r2, r2, lsl #2
 80064ac:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80064b0:	2d20      	cmp	r5, #32
      buf[len++] = (char)(48U + (frac % 10U));
 80064b2:	f103 0330 	add.w	r3, r3, #48	; 0x30
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80064b6:	d1ed      	bne.n	8006494 <_ftoa+0x3a4>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 80064b8:	9b00      	ldr	r3, [sp, #0]
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	2b01      	cmp	r3, #1
 80064c0:	f04f 0520 	mov.w	r5, #32
 80064c4:	f47f aee8 	bne.w	8006298 <_ftoa+0x1a8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80064c8:	9b01      	ldr	r3, [sp, #4]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 8081 	beq.w	80065d2 <_ftoa+0x4e2>
 80064d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064d2:	b91b      	cbnz	r3, 80064dc <_ftoa+0x3ec>
 80064d4:	9b00      	ldr	r3, [sp, #0]
 80064d6:	f013 0f0c 	tst.w	r3, #12
 80064da:	d002      	beq.n	80064e2 <_ftoa+0x3f2>
      width--;
 80064dc:	9b01      	ldr	r3, [sp, #4]
 80064de:	3b01      	subs	r3, #1
 80064e0:	9301      	str	r3, [sp, #4]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80064e2:	9b01      	ldr	r3, [sp, #4]
 80064e4:	42ab      	cmp	r3, r5
 80064e6:	d974      	bls.n	80065d2 <_ftoa+0x4e2>
 80064e8:	2d20      	cmp	r5, #32
 80064ea:	d00b      	beq.n	8006504 <_ftoa+0x414>
 80064ec:	9a03      	ldr	r2, [sp, #12]
 80064ee:	4619      	mov	r1, r3
 80064f0:	1e6b      	subs	r3, r5, #1
 80064f2:	4413      	add	r3, r2
      buf[len++] = '0';
 80064f4:	2230      	movs	r2, #48	; 0x30
 80064f6:	3501      	adds	r5, #1
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80064f8:	428d      	cmp	r5, r1
      buf[len++] = '0';
 80064fa:	f803 2f01 	strb.w	r2, [r3, #1]!
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80064fe:	d067      	beq.n	80065d0 <_ftoa+0x4e0>
 8006500:	2d20      	cmp	r5, #32
 8006502:	d1f8      	bne.n	80064f6 <_ftoa+0x406>
    for (size_t i = len; i < width; i++) {
 8006504:	464c      	mov	r4, r9
 8006506:	e6db      	b.n	80062c0 <_ftoa+0x1d0>
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8006508:	9b02      	ldr	r3, [sp, #8]
 800650a:	2b09      	cmp	r3, #9
 800650c:	d972      	bls.n	80065f4 <_ftoa+0x504>
 800650e:	4619      	mov	r1, r3
    buf[len++] = '0';
 8006510:	ab12      	add	r3, sp, #72	; 0x48
 8006512:	2230      	movs	r2, #48	; 0x30
 8006514:	f803 2d20 	strb.w	r2, [r3, #-32]!
    prec--;
 8006518:	1e4c      	subs	r4, r1, #1
    buf[len++] = '0';
 800651a:	9303      	str	r3, [sp, #12]
 800651c:	3909      	subs	r1, #9
 800651e:	2501      	movs	r5, #1
 8006520:	e006      	b.n	8006530 <_ftoa+0x440>
 8006522:	3501      	adds	r5, #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8006524:	2d20      	cmp	r5, #32
    buf[len++] = '0';
 8006526:	f803 2f01 	strb.w	r2, [r3, #1]!
    prec--;
 800652a:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800652e:	d001      	beq.n	8006534 <_ftoa+0x444>
 8006530:	42a9      	cmp	r1, r5
 8006532:	d1f6      	bne.n	8006522 <_ftoa+0x432>
 8006534:	4b37      	ldr	r3, [pc, #220]	; (8006614 <_ftoa+0x524>)
 8006536:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800653a:	ed93 7b00 	vldr	d7, [r3]
 800653e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006542:	e623      	b.n	800618c <_ftoa+0x9c>
  else if (diff < 0.5) {
 8006544:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006548:	2200      	movs	r2, #0
 800654a:	4b33      	ldr	r3, [pc, #204]	; (8006618 <_ftoa+0x528>)
 800654c:	f7fa fb20 	bl	8000b90 <__aeabi_dcmplt>
 8006550:	2800      	cmp	r0, #0
 8006552:	f47f ae4f 	bne.w	80061f4 <_ftoa+0x104>
  else if ((frac == 0U) || (frac & 1U)) {
 8006556:	9b02      	ldr	r3, [sp, #8]
 8006558:	b113      	cbz	r3, 8006560 <_ftoa+0x470>
 800655a:	07da      	lsls	r2, r3, #31
 800655c:	f57f ae4a 	bpl.w	80061f4 <_ftoa+0x104>
    ++frac;
 8006560:	3301      	adds	r3, #1
 8006562:	9302      	str	r3, [sp, #8]
 8006564:	e646      	b.n	80061f4 <_ftoa+0x104>
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8006566:	07e0      	lsls	r0, r4, #31
 8006568:	f57f ae58 	bpl.w	800621c <_ftoa+0x12c>
      ++whole;
 800656c:	4623      	mov	r3, r4
 800656e:	3301      	adds	r3, #1
 8006570:	9308      	str	r3, [sp, #32]
 8006572:	e653      	b.n	800621c <_ftoa+0x12c>
      ++whole;
 8006574:	9b08      	ldr	r3, [sp, #32]
 8006576:	3301      	adds	r3, #1
 8006578:	9308      	str	r3, [sp, #32]
      frac = 0;
 800657a:	2300      	movs	r3, #0
 800657c:	9302      	str	r3, [sp, #8]
 800657e:	e639      	b.n	80061f4 <_ftoa+0x104>
    value = 0 - value;
 8006580:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006584:	469b      	mov	fp, r3
    negative = true;
 8006586:	2301      	movs	r3, #1
 8006588:	9309      	str	r3, [sp, #36]	; 0x24
 800658a:	4623      	mov	r3, r4
 800658c:	e5f3      	b.n	8006176 <_ftoa+0x86>
    else if (flags & FLAGS_PLUS) {
 800658e:	9a00      	ldr	r2, [sp, #0]
 8006590:	0751      	lsls	r1, r2, #29
 8006592:	d525      	bpl.n	80065e0 <_ftoa+0x4f0>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8006594:	aa12      	add	r2, sp, #72	; 0x48
 8006596:	442a      	add	r2, r5
 8006598:	212b      	movs	r1, #43	; 0x2b
 800659a:	3501      	adds	r5, #1
 800659c:	f802 1c20 	strb.w	r1, [r2, #-32]
 80065a0:	e67a      	b.n	8006298 <_ftoa+0x1a8>
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80065a2:	2d20      	cmp	r5, #32
 80065a4:	d088      	beq.n	80064b8 <_ftoa+0x3c8>
 80065a6:	b164      	cbz	r4, 80065c2 <_ftoa+0x4d2>
 80065a8:	9a03      	ldr	r2, [sp, #12]
 80065aa:	1e6b      	subs	r3, r5, #1
 80065ac:	4413      	add	r3, r2
 80065ae:	442c      	add	r4, r5
      buf[len++] = '0';
 80065b0:	2230      	movs	r2, #48	; 0x30
 80065b2:	3501      	adds	r5, #1
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80065b4:	2d20      	cmp	r5, #32
      buf[len++] = '0';
 80065b6:	f803 2f01 	strb.w	r2, [r3, #1]!
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80065ba:	f43f af7d 	beq.w	80064b8 <_ftoa+0x3c8>
 80065be:	42a5      	cmp	r5, r4
 80065c0:	d1f7      	bne.n	80065b2 <_ftoa+0x4c2>
      buf[len++] = '.';
 80065c2:	ab12      	add	r3, sp, #72	; 0x48
 80065c4:	442b      	add	r3, r5
 80065c6:	222e      	movs	r2, #46	; 0x2e
 80065c8:	3501      	adds	r5, #1
 80065ca:	f803 2c20 	strb.w	r2, [r3, #-32]
 80065ce:	e625      	b.n	800621c <_ftoa+0x12c>
      buf[len++] = '0';
 80065d0:	9d01      	ldr	r5, [sp, #4]
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80065d2:	2d20      	cmp	r5, #32
 80065d4:	bf18      	it	ne
 80065d6:	2301      	movne	r3, #1
 80065d8:	f47f ae54 	bne.w	8006284 <_ftoa+0x194>
    for (size_t i = len; i < width; i++) {
 80065dc:	464c      	mov	r4, r9
 80065de:	e66f      	b.n	80062c0 <_ftoa+0x1d0>
    else if (flags & FLAGS_SPACE) {
 80065e0:	0712      	lsls	r2, r2, #28
 80065e2:	f57f ae59 	bpl.w	8006298 <_ftoa+0x1a8>
      buf[len++] = ' ';
 80065e6:	aa12      	add	r2, sp, #72	; 0x48
 80065e8:	442a      	add	r2, r5
 80065ea:	2120      	movs	r1, #32
 80065ec:	3501      	adds	r5, #1
 80065ee:	f802 1c20 	strb.w	r1, [r2, #-32]
 80065f2:	e651      	b.n	8006298 <_ftoa+0x1a8>
 80065f4:	461c      	mov	r4, r3
 80065f6:	4b07      	ldr	r3, [pc, #28]	; (8006614 <_ftoa+0x524>)
 80065f8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80065fc:	ed93 7b00 	vldr	d7, [r3]
 8006600:	ab0a      	add	r3, sp, #40	; 0x28
 8006602:	ed8d 7b04 	vstr	d7, [sp, #16]
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8006606:	2500      	movs	r5, #0
 8006608:	9303      	str	r3, [sp, #12]
 800660a:	e5bf      	b.n	800618c <_ftoa+0x9c>
 800660c:	08009028 	.word	0x08009028
 8006610:	cccccccd 	.word	0xcccccccd
 8006614:	08009030 	.word	0x08009030
 8006618:	3fe00000 	.word	0x3fe00000
 800661c:	00000000 	.word	0x00000000

08006620 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8006620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006624:	b099      	sub	sp, #100	; 0x64
 8006626:	4607      	mov	r7, r0
 8006628:	460c      	mov	r4, r1
 800662a:	4693      	mov	fp, r2
 800662c:	461d      	mov	r5, r3
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800662e:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8006632:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006636:	4bbc      	ldr	r3, [pc, #752]	; (8006928 <_etoa+0x308>)
 8006638:	f7fa fac8 	bl	8000bcc <__aeabi_dcmpgt>
 800663c:	2800      	cmp	r0, #0
 800663e:	f040 81bc 	bne.w	80069ba <_etoa+0x39a>
 8006642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006646:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 800664a:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 800664e:	f7fa fa9f 	bl	8000b90 <__aeabi_dcmplt>
 8006652:	4682      	mov	sl, r0
 8006654:	2800      	cmp	r0, #0
 8006656:	f040 81b0 	bne.w	80069ba <_etoa+0x39a>
 800665a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800665c:	9308      	str	r3, [sp, #32]
 800665e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006660:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006664:	9309      	str	r3, [sp, #36]	; 0x24
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8006666:	f3c3 500a 	ubfx	r0, r3, #20, #11
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 800666a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800666c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8006670:	930f      	str	r3, [sp, #60]	; 0x3c
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8006672:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8006676:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006678:	bf08      	it	eq
 800667a:	2306      	moveq	r3, #6
 800667c:	9324      	str	r3, [sp, #144]	; 0x90
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 800667e:	f7f9 ffab 	bl	80005d8 <__aeabi_i2d>
 8006682:	a395      	add	r3, pc, #596	; (adr r3, 80068d8 <_etoa+0x2b8>)
 8006684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006688:	f7fa f810 	bl	80006ac <__aeabi_dmul>
 800668c:	4680      	mov	r8, r0
 800668e:	4689      	mov	r9, r1
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8006690:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006694:	4ba5      	ldr	r3, [pc, #660]	; (800692c <_etoa+0x30c>)
 8006696:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800669a:	4019      	ands	r1, r3
 800669c:	460b      	mov	r3, r1
 800669e:	4010      	ands	r0, r2
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80066a0:	49a3      	ldr	r1, [pc, #652]	; (8006930 <_etoa+0x310>)
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80066a2:	4602      	mov	r2, r0
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 80066a4:	2000      	movs	r0, #0
 80066a6:	4310      	orrs	r0, r2
 80066a8:	4319      	orrs	r1, r3
 80066aa:	2200      	movs	r2, #0
 80066ac:	4ba1      	ldr	r3, [pc, #644]	; (8006934 <_etoa+0x314>)
 80066ae:	f7f9 fe45 	bl	800033c <__aeabi_dsub>
 80066b2:	a38b      	add	r3, pc, #556	; (adr r3, 80068e0 <_etoa+0x2c0>)
 80066b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b8:	f7f9 fff8 	bl	80006ac <__aeabi_dmul>
 80066bc:	a38a      	add	r3, pc, #552	; (adr r3, 80068e8 <_etoa+0x2c8>)
 80066be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c2:	f7f9 fe3d 	bl	8000340 <__adddf3>
 80066c6:	4602      	mov	r2, r0
 80066c8:	460b      	mov	r3, r1
 80066ca:	4640      	mov	r0, r8
 80066cc:	4649      	mov	r1, r9
 80066ce:	f7f9 fe37 	bl	8000340 <__adddf3>
 80066d2:	f7fa fa9b 	bl	8000c0c <__aeabi_d2iz>
 80066d6:	900e      	str	r0, [sp, #56]	; 0x38
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80066d8:	f7f9 ff7e 	bl	80005d8 <__aeabi_i2d>
 80066dc:	a384      	add	r3, pc, #528	; (adr r3, 80068f0 <_etoa+0x2d0>)
 80066de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066e2:	4680      	mov	r8, r0
 80066e4:	4689      	mov	r9, r1
 80066e6:	f7f9 ffe1 	bl	80006ac <__aeabi_dmul>
 80066ea:	2200      	movs	r2, #0
 80066ec:	4b92      	ldr	r3, [pc, #584]	; (8006938 <_etoa+0x318>)
 80066ee:	f7f9 fe27 	bl	8000340 <__adddf3>
 80066f2:	f7fa fa8b 	bl	8000c0c <__aeabi_d2iz>
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80066f6:	a380      	add	r3, pc, #512	; (adr r3, 80068f8 <_etoa+0x2d8>)
 80066f8:	e9d3 2300 	ldrd	r2, r3, [r3]
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80066fc:	4606      	mov	r6, r0
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80066fe:	4649      	mov	r1, r9
 8006700:	4640      	mov	r0, r8
 8006702:	f7f9 ffd3 	bl	80006ac <__aeabi_dmul>
 8006706:	4680      	mov	r8, r0
 8006708:	4630      	mov	r0, r6
 800670a:	4689      	mov	r9, r1
 800670c:	f7f9 ff64 	bl	80005d8 <__aeabi_i2d>
 8006710:	a37b      	add	r3, pc, #492	; (adr r3, 8006900 <_etoa+0x2e0>)
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f7f9 ffc9 	bl	80006ac <__aeabi_dmul>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4640      	mov	r0, r8
 8006720:	4649      	mov	r1, r9
 8006722:	f7f9 fe0b 	bl	800033c <__aeabi_dsub>
 8006726:	4680      	mov	r8, r0
 8006728:	4689      	mov	r9, r1
  const double z2 = z * z;
 800672a:	4602      	mov	r2, r0
 800672c:	460b      	mov	r3, r1
 800672e:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
 8006732:	f7f9 ffbb 	bl	80006ac <__aeabi_dmul>
 8006736:	4680      	mov	r8, r0
 8006738:	4689      	mov	r9, r1
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800673a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800673e:	4602      	mov	r2, r0
 8006740:	460b      	mov	r3, r1
 8006742:	f7f9 fdfd 	bl	8000340 <__adddf3>
 8006746:	a370      	add	r3, pc, #448	; (adr r3, 8006908 <_etoa+0x2e8>)
 8006748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006750:	4640      	mov	r0, r8
 8006752:	4649      	mov	r1, r9
 8006754:	f7f9 ffaa 	bl	80006ac <__aeabi_dmul>
 8006758:	2200      	movs	r2, #0
 800675a:	4b78      	ldr	r3, [pc, #480]	; (800693c <_etoa+0x31c>)
 800675c:	f7f9 fdf0 	bl	8000340 <__adddf3>
 8006760:	4602      	mov	r2, r0
 8006762:	460b      	mov	r3, r1
 8006764:	4640      	mov	r0, r8
 8006766:	4649      	mov	r1, r9
 8006768:	f7fa f8ca 	bl	8000900 <__aeabi_ddiv>
 800676c:	2200      	movs	r2, #0
 800676e:	4b74      	ldr	r3, [pc, #464]	; (8006940 <_etoa+0x320>)
 8006770:	f7f9 fde6 	bl	8000340 <__adddf3>
 8006774:	4602      	mov	r2, r0
 8006776:	460b      	mov	r3, r1
 8006778:	4640      	mov	r0, r8
 800677a:	4649      	mov	r1, r9
 800677c:	f7fa f8c0 	bl	8000900 <__aeabi_ddiv>
 8006780:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006784:	4689      	mov	r9, r1
 8006786:	4680      	mov	r8, r0
 8006788:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800678c:	2000      	movs	r0, #0
 800678e:	f7f9 fdd5 	bl	800033c <__aeabi_dsub>
 8006792:	4602      	mov	r2, r0
 8006794:	460b      	mov	r3, r1
 8006796:	4640      	mov	r0, r8
 8006798:	4649      	mov	r1, r9
 800679a:	f7f9 fdd1 	bl	8000340 <__adddf3>
 800679e:	4602      	mov	r2, r0
 80067a0:	460b      	mov	r3, r1
 80067a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80067a6:	f7fa f8ab 	bl	8000900 <__aeabi_ddiv>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80067aa:	f206 36ff 	addw	r6, r6, #1023	; 0x3ff
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80067ae:	2200      	movs	r2, #0
 80067b0:	4b5f      	ldr	r3, [pc, #380]	; (8006930 <_etoa+0x310>)
 80067b2:	f7f9 fdc5 	bl	8000340 <__adddf3>
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 80067b6:	4652      	mov	r2, sl
 80067b8:	0533      	lsls	r3, r6, #20
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80067ba:	f7f9 ff77 	bl	80006ac <__aeabi_dmul>
  // correct for rounding errors
  if (value < conv.F) {
 80067be:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 80067c2:	4681      	mov	r9, r0
 80067c4:	468a      	mov	sl, r1
  if (value < conv.F) {
 80067c6:	f7fa fa01 	bl	8000bcc <__aeabi_dcmpgt>
 80067ca:	b158      	cbz	r0, 80067e4 <_etoa+0x1c4>
    expval--;
    conv.F /= 10;
 80067cc:	4648      	mov	r0, r9
 80067ce:	4651      	mov	r1, sl
 80067d0:	a34f      	add	r3, pc, #316	; (adr r3, 8006910 <_etoa+0x2f0>)
 80067d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d6:	f7f9 ff69 	bl	80006ac <__aeabi_dmul>
    expval--;
 80067da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80067dc:	3b01      	subs	r3, #1
    conv.F /= 10;
 80067de:	4681      	mov	r9, r0
 80067e0:	468a      	mov	sl, r1
    expval--;
 80067e2:	930e      	str	r3, [sp, #56]	; 0x38
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80067e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80067e6:	9a26      	ldr	r2, [sp, #152]	; 0x98
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 80067e8:	3363      	adds	r3, #99	; 0x63
 80067ea:	2bc6      	cmp	r3, #198	; 0xc6
 80067ec:	bf8c      	ite	hi
 80067ee:	2605      	movhi	r6, #5
 80067f0:	2604      	movls	r6, #4
  if (flags & FLAGS_ADAPT_EXP) {
 80067f2:	0513      	lsls	r3, r2, #20
 80067f4:	d518      	bpl.n	8006828 <_etoa+0x208>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80067f6:	a348      	add	r3, pc, #288	; (adr r3, 8006918 <_etoa+0x2f8>)
 80067f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006800:	f7fa f9da 	bl	8000bb8 <__aeabi_dcmpge>
 8006804:	b148      	cbz	r0, 800681a <_etoa+0x1fa>
 8006806:	a346      	add	r3, pc, #280	; (adr r3, 8006920 <_etoa+0x300>)
 8006808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800680c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006810:	f7fa f9be 	bl	8000b90 <__aeabi_dcmplt>
 8006814:	2800      	cmp	r0, #0
 8006816:	f040 80ee 	bne.w	80069f6 <_etoa+0x3d6>
      minwidth = 0U;
      expval   = 0;
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800681a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800681c:	b123      	cbz	r3, 8006828 <_etoa+0x208>
 800681e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006820:	b113      	cbz	r3, 8006828 <_etoa+0x208>
        --prec;
 8006822:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006824:	3b01      	subs	r3, #1
 8006826:	9324      	str	r3, [sp, #144]	; 0x90
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
  if (width > minwidth) {
 8006828:	9b25      	ldr	r3, [sp, #148]	; 0x94
 800682a:	42b3      	cmp	r3, r6
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800682c:	bf88      	it	hi
 800682e:	eba3 0806 	subhi.w	r8, r3, r6
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8006832:	9b26      	ldr	r3, [sp, #152]	; 0x98
    fwidth = 0U;
 8006834:	bf98      	it	ls
 8006836:	f04f 0800 	movls.w	r8, #0
  if ((flags & FLAGS_LEFT) && minwidth) {
 800683a:	f013 0302 	ands.w	r3, r3, #2
 800683e:	930a      	str	r3, [sp, #40]	; 0x28
 8006840:	d003      	beq.n	800684a <_etoa+0x22a>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8006842:	2e00      	cmp	r6, #0
 8006844:	bf18      	it	ne
 8006846:	f04f 0800 	movne.w	r8, #0
  }

  // rescale the float value
  if (expval) {
 800684a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800684c:	2b00      	cmp	r3, #0
 800684e:	f040 80c9 	bne.w	80069e4 <_etoa+0x3c4>
    value /= conv.F;
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8006852:	e9dd 0122 	ldrd	r0, r1, [sp, #136]	; 0x88
 8006856:	2200      	movs	r2, #0
 8006858:	2300      	movs	r3, #0
 800685a:	f7fa f999 	bl	8000b90 <__aeabi_dcmplt>
 800685e:	b130      	cbz	r0, 800686e <_etoa+0x24e>
 8006860:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006864:	4602      	mov	r2, r0
 8006866:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800686a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800686e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006870:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006872:	f8cd 800c 	str.w	r8, [sp, #12]
 8006876:	ed9d 7b08 	vldr	d7, [sp, #32]
 800687a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800687e:	9202      	str	r2, [sp, #8]
 8006880:	9304      	str	r3, [sp, #16]
 8006882:	ed8d 7b00 	vstr	d7, [sp]
 8006886:	462b      	mov	r3, r5
 8006888:	465a      	mov	r2, fp
 800688a:	4621      	mov	r1, r4
 800688c:	4638      	mov	r0, r7
 800688e:	f7ff fc2f 	bl	80060f0 <_ftoa>
 8006892:	4680      	mov	r8, r0

  // output the exponent part
  if (minwidth) {
 8006894:	2e00      	cmp	r6, #0
 8006896:	f000 80a1 	beq.w	80069dc <_etoa+0x3bc>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 800689a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800689c:	f013 0f20 	tst.w	r3, #32
 80068a0:	bf0c      	ite	eq
 80068a2:	2065      	moveq	r0, #101	; 0x65
 80068a4:	2045      	movne	r0, #69	; 0x45
 80068a6:	4642      	mov	r2, r8
 80068a8:	462b      	mov	r3, r5
 80068aa:	4621      	mov	r1, r4
 80068ac:	47b8      	blx	r7
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80068ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      const char digit = (char)(value % base);
 80068b0:	f8df e090 	ldr.w	lr, [pc, #144]	; 8006944 <_etoa+0x324>
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80068b4:	2a00      	cmp	r2, #0
 80068b6:	4613      	mov	r3, r2
 80068b8:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
 80068bc:	bfb8      	it	lt
 80068be:	4253      	neglt	r3, r2
 80068c0:	f106 39ff 	add.w	r9, r6, #4294967295	; 0xffffffff
 80068c4:	ea4f 7cd2 	mov.w	ip, r2, lsr #31
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80068c8:	f108 0801 	add.w	r8, r8, #1
 80068cc:	4650      	mov	r0, sl
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80068ce:	2200      	movs	r2, #0
 80068d0:	461e      	mov	r6, r3
 80068d2:	e03b      	b.n	800694c <_etoa+0x32c>
 80068d4:	f3af 8000 	nop.w
 80068d8:	509f79fb 	.word	0x509f79fb
 80068dc:	3fd34413 	.word	0x3fd34413
 80068e0:	636f4361 	.word	0x636f4361
 80068e4:	3fd287a7 	.word	0x3fd287a7
 80068e8:	8b60c8b3 	.word	0x8b60c8b3
 80068ec:	3fc68a28 	.word	0x3fc68a28
 80068f0:	0979a371 	.word	0x0979a371
 80068f4:	400a934f 	.word	0x400a934f
 80068f8:	bbb55516 	.word	0xbbb55516
 80068fc:	40026bb1 	.word	0x40026bb1
 8006900:	fefa39ef 	.word	0xfefa39ef
 8006904:	3fe62e42 	.word	0x3fe62e42
 8006908:	92492492 	.word	0x92492492
 800690c:	3fb24924 	.word	0x3fb24924
 8006910:	9999999a 	.word	0x9999999a
 8006914:	3fb99999 	.word	0x3fb99999
 8006918:	eb1c432d 	.word	0xeb1c432d
 800691c:	3f1a36e2 	.word	0x3f1a36e2
 8006920:	00000000 	.word	0x00000000
 8006924:	412e8480 	.word	0x412e8480
 8006928:	7fefffff 	.word	0x7fefffff
 800692c:	000fffff 	.word	0x000fffff
 8006930:	3ff00000 	.word	0x3ff00000
 8006934:	3ff80000 	.word	0x3ff80000
 8006938:	3fe00000 	.word	0x3fe00000
 800693c:	40240000 	.word	0x40240000
 8006940:	40180000 	.word	0x40180000
 8006944:	cccccccd 	.word	0xcccccccd
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006948:	2a20      	cmp	r2, #32
 800694a:	d00d      	beq.n	8006968 <_etoa+0x348>
      const char digit = (char)(value % base);
 800694c:	fbae 3106 	umull	r3, r1, lr, r6
 8006950:	08c9      	lsrs	r1, r1, #3
 8006952:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8006956:	eba6 0343 	sub.w	r3, r6, r3, lsl #1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800695a:	3330      	adds	r3, #48	; 0x30
 800695c:	3201      	adds	r2, #1
 800695e:	f800 3b01 	strb.w	r3, [r0], #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006962:	460e      	mov	r6, r1
 8006964:	2900      	cmp	r1, #0
 8006966:	d1ef      	bne.n	8006948 <_etoa+0x328>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006968:	2105      	movs	r1, #5
 800696a:	2000      	movs	r0, #0
 800696c:	230a      	movs	r3, #10
 800696e:	e9cd 3003 	strd	r3, r0, [sp, #12]
 8006972:	e9cd a200 	strd	sl, r2, [sp]
 8006976:	9106      	str	r1, [sp, #24]
 8006978:	4642      	mov	r2, r8
 800697a:	462b      	mov	r3, r5
 800697c:	f8cd 9014 	str.w	r9, [sp, #20]
 8006980:	f8cd c008 	str.w	ip, [sp, #8]
 8006984:	4621      	mov	r1, r4
 8006986:	4638      	mov	r0, r7
 8006988:	f7ff faa2 	bl	8005ed0 <_ntoa_format>
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 800698c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 800698e:	4680      	mov	r8, r0
    if (flags & FLAGS_LEFT) {
 8006990:	b323      	cbz	r3, 80069dc <_etoa+0x3bc>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8006992:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8006994:	eba0 030b 	sub.w	r3, r0, fp
 8006998:	429a      	cmp	r2, r3
 800699a:	d91f      	bls.n	80069dc <_etoa+0x3bc>
 800699c:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80069a0:	4602      	mov	r2, r0
 80069a2:	1c56      	adds	r6, r2, #1
 80069a4:	462b      	mov	r3, r5
 80069a6:	4621      	mov	r1, r4
 80069a8:	2020      	movs	r0, #32
 80069aa:	47b8      	blx	r7
 80069ac:	eba6 030b 	sub.w	r3, r6, fp
 80069b0:	4598      	cmp	r8, r3
 80069b2:	4632      	mov	r2, r6
 80069b4:	d8f5      	bhi.n	80069a2 <_etoa+0x382>
 80069b6:	46b0      	mov	r8, r6
 80069b8:	e010      	b.n	80069dc <_etoa+0x3bc>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80069ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069bc:	9304      	str	r3, [sp, #16]
 80069be:	ed9d 7b22 	vldr	d7, [sp, #136]	; 0x88
 80069c2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 80069c4:	9303      	str	r3, [sp, #12]
 80069c6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80069c8:	9302      	str	r3, [sp, #8]
 80069ca:	ed8d 7b00 	vstr	d7, [sp]
 80069ce:	462b      	mov	r3, r5
 80069d0:	465a      	mov	r2, fp
 80069d2:	4621      	mov	r1, r4
 80069d4:	4638      	mov	r0, r7
 80069d6:	f7ff fb8b 	bl	80060f0 <_ftoa>
 80069da:	4680      	mov	r8, r0
    }
  }
  return idx;
}
 80069dc:	4640      	mov	r0, r8
 80069de:	b019      	add	sp, #100	; 0x64
 80069e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    value /= conv.F;
 80069e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80069e8:	464a      	mov	r2, r9
 80069ea:	4653      	mov	r3, sl
 80069ec:	f7f9 ff88 	bl	8000900 <__aeabi_ddiv>
 80069f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80069f4:	e72d      	b.n	8006852 <_etoa+0x232>
      if ((int)prec > expval) {
 80069f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80069f8:	9924      	ldr	r1, [sp, #144]	; 0x90
 80069fa:	428b      	cmp	r3, r1
 80069fc:	461a      	mov	r2, r3
        prec = (unsigned)((int)prec - expval - 1);
 80069fe:	bfbd      	ittte	lt
 8006a00:	460a      	movlt	r2, r1
 8006a02:	eba2 0c03 	sublt.w	ip, r2, r3
 8006a06:	f10c 33ff 	addlt.w	r3, ip, #4294967295	; 0xffffffff
        prec = 0;
 8006a0a:	2300      	movge	r3, #0
 8006a0c:	9324      	str	r3, [sp, #144]	; 0x90
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8006a0e:	9b26      	ldr	r3, [sp, #152]	; 0x98
      minwidth = 0U;
 8006a10:	2600      	movs	r6, #0
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8006a12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a16:	9326      	str	r3, [sp, #152]	; 0x98
      expval   = 0;
 8006a18:	960e      	str	r6, [sp, #56]	; 0x38
 8006a1a:	e705      	b.n	8006828 <_etoa+0x208>

08006a1c <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8006a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a20:	b099      	sub	sp, #100	; 0x64
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
 8006a22:	4d97      	ldr	r5, [pc, #604]	; (8006c80 <_vsnprintf+0x264>)
 8006a24:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8006a26:	9409      	str	r4, [sp, #36]	; 0x24
{
 8006a28:	4691      	mov	r9, r2
 8006a2a:	461c      	mov	r4, r3
    out = _out_null;
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	bf14      	ite	ne
 8006a30:	4680      	movne	r8, r0
 8006a32:	46a8      	moveq	r8, r5
 8006a34:	468a      	mov	sl, r1
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
 8006a36:	f04f 0b00 	mov.w	fp, #0
  while (*format)
 8006a3a:	7820      	ldrb	r0, [r4, #0]
 8006a3c:	b160      	cbz	r0, 8006a58 <_vsnprintf+0x3c>
    if (*format != '%') {
 8006a3e:	2825      	cmp	r0, #37	; 0x25
 8006a40:	f104 0401 	add.w	r4, r4, #1
 8006a44:	d015      	beq.n	8006a72 <_vsnprintf+0x56>
      out(*format, buffer, idx++, maxlen);
 8006a46:	465a      	mov	r2, fp
 8006a48:	464b      	mov	r3, r9
 8006a4a:	4651      	mov	r1, sl
 8006a4c:	47c0      	blx	r8
  while (*format)
 8006a4e:	7820      	ldrb	r0, [r4, #0]
      out(*format, buffer, idx++, maxlen);
 8006a50:	f10b 0b01 	add.w	fp, fp, #1
  while (*format)
 8006a54:	2800      	cmp	r0, #0
 8006a56:	d1f2      	bne.n	8006a3e <_vsnprintf+0x22>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8006a58:	45cb      	cmp	fp, r9
 8006a5a:	bf2c      	ite	cs
 8006a5c:	f109 32ff 	addcs.w	r2, r9, #4294967295	; 0xffffffff
 8006a60:	465a      	movcc	r2, fp
 8006a62:	464b      	mov	r3, r9
 8006a64:	4651      	mov	r1, sl
 8006a66:	2000      	movs	r0, #0
 8006a68:	47c0      	blx	r8

  // return written chars without terminating \0
  return (int)idx;
}
 8006a6a:	4658      	mov	r0, fp
 8006a6c:	b019      	add	sp, #100	; 0x64
 8006a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    flags = 0U;
 8006a72:	2100      	movs	r1, #0
      switch (*format) {
 8006a74:	4623      	mov	r3, r4
 8006a76:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006a7a:	f1a0 0220 	sub.w	r2, r0, #32
 8006a7e:	461d      	mov	r5, r3
 8006a80:	2a10      	cmp	r2, #16
 8006a82:	d81e      	bhi.n	8006ac2 <_vsnprintf+0xa6>
 8006a84:	e8df f002 	tbb	[pc, r2]
 8006a88:	191d1d15 	.word	0x191d1d15
 8006a8c:	1d1d1d1d 	.word	0x1d1d1d1d
 8006a90:	0d1d1d1d 	.word	0x0d1d1d1d
 8006a94:	1d1d111d 	.word	0x1d1d111d
 8006a98:	09          	.byte	0x09
 8006a99:	00          	.byte	0x00
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8006a9a:	f041 0101 	orr.w	r1, r1, #1
 8006a9e:	461c      	mov	r4, r3
 8006aa0:	e7e8      	b.n	8006a74 <_vsnprintf+0x58>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8006aa2:	f041 0104 	orr.w	r1, r1, #4
 8006aa6:	461c      	mov	r4, r3
 8006aa8:	e7e4      	b.n	8006a74 <_vsnprintf+0x58>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8006aaa:	f041 0102 	orr.w	r1, r1, #2
 8006aae:	461c      	mov	r4, r3
 8006ab0:	e7e0      	b.n	8006a74 <_vsnprintf+0x58>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8006ab2:	f041 0108 	orr.w	r1, r1, #8
 8006ab6:	461c      	mov	r4, r3
 8006ab8:	e7dc      	b.n	8006a74 <_vsnprintf+0x58>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8006aba:	f041 0110 	orr.w	r1, r1, #16
 8006abe:	461c      	mov	r4, r3
 8006ac0:	e7d8      	b.n	8006a74 <_vsnprintf+0x58>
    if (_is_digit(*format)) {
 8006ac2:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8006ac6:	2a09      	cmp	r2, #9
 8006ac8:	f240 81c1 	bls.w	8006e4e <_vsnprintf+0x432>
    else if (*format == '*') {
 8006acc:	282a      	cmp	r0, #42	; 0x2a
 8006ace:	f000 81e2 	beq.w	8006e96 <_vsnprintf+0x47a>
    width = 0U;
 8006ad2:	2700      	movs	r7, #0
    if (*format == '.') {
 8006ad4:	282e      	cmp	r0, #46	; 0x2e
 8006ad6:	f000 81cf 	beq.w	8006e78 <_vsnprintf+0x45c>
    precision = 0U;
 8006ada:	2300      	movs	r3, #0
 8006adc:	930a      	str	r3, [sp, #40]	; 0x28
    switch (*format) {
 8006ade:	f1a0 0368 	sub.w	r3, r0, #104	; 0x68
 8006ae2:	2b12      	cmp	r3, #18
 8006ae4:	f200 821a 	bhi.w	8006f1c <_vsnprintf+0x500>
 8006ae8:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006aec:	0218007f 	.word	0x0218007f
 8006af0:	0218007a 	.word	0x0218007a
 8006af4:	02180072 	.word	0x02180072
 8006af8:	02180218 	.word	0x02180218
 8006afc:	02180218 	.word	0x02180218
 8006b00:	02180218 	.word	0x02180218
 8006b04:	02180013 	.word	0x02180013
 8006b08:	02180218 	.word	0x02180218
 8006b0c:	02180218 	.word	0x02180218
 8006b10:	0013      	.short	0x0013
 8006b12:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8006b14:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8006b18:	1c6c      	adds	r4, r5, #1
    switch (*format) {
 8006b1a:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 8006b1e:	2b53      	cmp	r3, #83	; 0x53
 8006b20:	f200 818e 	bhi.w	8006e40 <_vsnprintf+0x424>
 8006b24:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006b28:	018c00ae 	.word	0x018c00ae
 8006b2c:	018c018c 	.word	0x018c018c
 8006b30:	018c018c 	.word	0x018c018c
 8006b34:	018c018c 	.word	0x018c018c
 8006b38:	018c018c 	.word	0x018c018c
 8006b3c:	018c018c 	.word	0x018c018c
 8006b40:	018c018c 	.word	0x018c018c
 8006b44:	018c018c 	.word	0x018c018c
 8006b48:	018c018c 	.word	0x018c018c
 8006b4c:	018c018c 	.word	0x018c018c
 8006b50:	018c018c 	.word	0x018c018c
 8006b54:	018c018c 	.word	0x018c018c
 8006b58:	018c018c 	.word	0x018c018c
 8006b5c:	018c018c 	.word	0x018c018c
 8006b60:	018c018c 	.word	0x018c018c
 8006b64:	018c018c 	.word	0x018c018c
 8006b68:	017201d8 	.word	0x017201d8
 8006b6c:	018c01d8 	.word	0x018c01d8
 8006b70:	018c018c 	.word	0x018c018c
 8006b74:	018c018c 	.word	0x018c018c
 8006b78:	018c018c 	.word	0x018c018c
 8006b7c:	018c018c 	.word	0x018c018c
 8006b80:	018c018c 	.word	0x018c018c
 8006b84:	018c018c 	.word	0x018c018c
 8006b88:	018c018c 	.word	0x018c018c
 8006b8c:	0107018c 	.word	0x0107018c
 8006b90:	018c018c 	.word	0x018c018c
 8006b94:	018c018c 	.word	0x018c018c
 8006b98:	018c018c 	.word	0x018c018c
 8006b9c:	018c018c 	.word	0x018c018c
 8006ba0:	0107018c 	.word	0x0107018c
 8006ba4:	010700e8 	.word	0x010700e8
 8006ba8:	017201d8 	.word	0x017201d8
 8006bac:	018c01d8 	.word	0x018c01d8
 8006bb0:	018c0107 	.word	0x018c0107
 8006bb4:	018c018c 	.word	0x018c018c
 8006bb8:	018c018c 	.word	0x018c018c
 8006bbc:	00b70107 	.word	0x00b70107
 8006bc0:	018c018c 	.word	0x018c018c
 8006bc4:	018c0069 	.word	0x018c0069
 8006bc8:	018c0107 	.word	0x018c0107
 8006bcc:	0107018c 	.word	0x0107018c
        if (*format == 'l') {
 8006bd0:	7860      	ldrb	r0, [r4, #1]
 8006bd2:	286c      	cmp	r0, #108	; 0x6c
 8006bd4:	d19e      	bne.n	8006b14 <_vsnprintf+0xf8>
 8006bd6:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_LONG_LONG;
 8006bd8:	f441 7140 	orr.w	r1, r1, #768	; 0x300
 8006bdc:	3403      	adds	r4, #3
 8006bde:	e79c      	b.n	8006b1a <_vsnprintf+0xfe>
 8006be0:	7860      	ldrb	r0, [r4, #1]
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8006be2:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8006be6:	1c6c      	adds	r4, r5, #1
        break;
 8006be8:	e797      	b.n	8006b1a <_vsnprintf+0xfe>
        if (*format == 'h') {
 8006bea:	7860      	ldrb	r0, [r4, #1]
 8006bec:	2868      	cmp	r0, #104	; 0x68
 8006bee:	f000 8227 	beq.w	8007040 <_vsnprintf+0x624>
        flags |= FLAGS_SHORT;
 8006bf2:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 8006bf6:	1c6c      	adds	r4, r5, #1
 8006bf8:	e78f      	b.n	8006b1a <_vsnprintf+0xfe>
        const char* p = va_arg(va, char*);
 8006bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bfc:	681d      	ldr	r5, [r3, #0]
 8006bfe:	461a      	mov	r2, r3
 8006c00:	3304      	adds	r3, #4
 8006c02:	930c      	str	r3, [sp, #48]	; 0x30
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8006c04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c06:	7828      	ldrb	r0, [r5, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	f000 8189 	beq.w	8006f20 <_vsnprintf+0x504>
  for (s = str; *s && maxsize--; ++s);
 8006c0e:	2800      	cmp	r0, #0
 8006c10:	f000 83bb 	beq.w	800738a <_vsnprintf+0x96e>
 8006c14:	f103 3cff 	add.w	ip, r3, #4294967295	; 0xffffffff
 8006c18:	462e      	mov	r6, r5
 8006c1a:	e002      	b.n	8006c22 <_vsnprintf+0x206>
 8006c1c:	eb13 0f0c 	cmn.w	r3, ip
 8006c20:	d006      	beq.n	8006c30 <_vsnprintf+0x214>
 8006c22:	f816 2f01 	ldrb.w	r2, [r6, #1]!
 8006c26:	f1c6 0301 	rsb	r3, r6, #1
 8006c2a:	442b      	add	r3, r5
 8006c2c:	2a00      	cmp	r2, #0
 8006c2e:	d1f5      	bne.n	8006c1c <_vsnprintf+0x200>
 8006c30:	1b76      	subs	r6, r6, r5
        if (flags & FLAGS_PRECISION) {
 8006c32:	f411 6380 	ands.w	r3, r1, #1024	; 0x400
 8006c36:	9309      	str	r3, [sp, #36]	; 0x24
 8006c38:	d003      	beq.n	8006c42 <_vsnprintf+0x226>
          l = (l < precision ? l : precision);
 8006c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c3c:	429e      	cmp	r6, r3
 8006c3e:	bf28      	it	cs
 8006c40:	461e      	movcs	r6, r3
        if (!(flags & FLAGS_LEFT)) {
 8006c42:	f011 0302 	ands.w	r3, r1, #2
 8006c46:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c48:	f000 8210 	beq.w	800706c <_vsnprintf+0x650>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	f000 81fc 	beq.w	800704a <_vsnprintf+0x62e>
 8006c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	f040 82e9 	bne.w	800722c <_vsnprintf+0x810>
          out(*(p++), buffer, idx++, maxlen);
 8006c5a:	465a      	mov	r2, fp
 8006c5c:	464b      	mov	r3, r9
 8006c5e:	4651      	mov	r1, sl
 8006c60:	47c0      	blx	r8
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006c62:	f815 0f01 	ldrb.w	r0, [r5, #1]!
          out(*(p++), buffer, idx++, maxlen);
 8006c66:	f10b 0b01 	add.w	fp, fp, #1
 8006c6a:	465a      	mov	r2, fp
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8006c6c:	2800      	cmp	r0, #0
 8006c6e:	d1f5      	bne.n	8006c5c <_vsnprintf+0x240>
        if (flags & FLAGS_LEFT) {
 8006c70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	f040 81e9 	bne.w	800704a <_vsnprintf+0x62e>
        const char* p = va_arg(va, char*);
 8006c78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006c7a:	9309      	str	r3, [sp, #36]	; 0x24
        break;
 8006c7c:	e6dd      	b.n	8006a3a <_vsnprintf+0x1e>
 8006c7e:	bf00      	nop
 8006c80:	08005ecd 	.word	0x08005ecd
        out('%', buffer, idx++, maxlen);
 8006c84:	f10b 0501 	add.w	r5, fp, #1
 8006c88:	465a      	mov	r2, fp
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	4651      	mov	r1, sl
 8006c8e:	2025      	movs	r0, #37	; 0x25
 8006c90:	46ab      	mov	fp, r5
 8006c92:	47c0      	blx	r8
        break;
 8006c94:	e6d1      	b.n	8006a3a <_vsnprintf+0x1e>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8006c96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c98:	6813      	ldr	r3, [r2, #0]
 8006c9a:	1d15      	adds	r5, r2, #4
  if (!value) {
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 8146 	beq.w	8006f2e <_vsnprintf+0x512>
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8006ca2:	f041 0021 	orr.w	r0, r1, #33	; 0x21
 8006ca6:	aa10      	add	r2, sp, #64	; 0x40
 8006ca8:	920c      	str	r2, [sp, #48]	; 0x30
 8006caa:	4616      	mov	r6, r2
          while (l++ < width) {
 8006cac:	2100      	movs	r1, #0
 8006cae:	e001      	b.n	8006cb4 <_vsnprintf+0x298>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006cb0:	2920      	cmp	r1, #32
 8006cb2:	d00c      	beq.n	8006cce <_vsnprintf+0x2b2>
      const char digit = (char)(value % base);
 8006cb4:	f003 070f 	and.w	r7, r3, #15
 8006cb8:	b2fa      	uxtb	r2, r7
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006cba:	2f09      	cmp	r7, #9
 8006cbc:	bf94      	ite	ls
 8006cbe:	3230      	addls	r2, #48	; 0x30
 8006cc0:	3237      	addhi	r2, #55	; 0x37
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006cc2:	091b      	lsrs	r3, r3, #4
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006cc4:	f101 0101 	add.w	r1, r1, #1
 8006cc8:	f806 2b01 	strb.w	r2, [r6], #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006ccc:	d1f0      	bne.n	8006cb0 <_vsnprintf+0x294>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006cce:	2208      	movs	r2, #8
 8006cd0:	9205      	str	r2, [sp, #20]
 8006cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006cd4:	9204      	str	r2, [sp, #16]
 8006cd6:	2210      	movs	r2, #16
 8006cd8:	2300      	movs	r3, #0
 8006cda:	9203      	str	r2, [sp, #12]
 8006cdc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006cde:	9006      	str	r0, [sp, #24]
 8006ce0:	9101      	str	r1, [sp, #4]
 8006ce2:	9200      	str	r2, [sp, #0]
 8006ce4:	9302      	str	r3, [sp, #8]
 8006ce6:	465a      	mov	r2, fp
 8006ce8:	464b      	mov	r3, r9
 8006cea:	4651      	mov	r1, sl
 8006cec:	4640      	mov	r0, r8
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8006cee:	9509      	str	r5, [sp, #36]	; 0x24
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006cf0:	f7ff f8ee 	bl	8005ed0 <_ntoa_format>
 8006cf4:	4683      	mov	fp, r0
        break;
 8006cf6:	e6a0      	b.n	8006a3a <_vsnprintf+0x1e>
 8006cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cfa:	3304      	adds	r3, #4
 8006cfc:	f10b 0601 	add.w	r6, fp, #1
 8006d00:	930a      	str	r3, [sp, #40]	; 0x28
        if (!(flags & FLAGS_LEFT)) {
 8006d02:	078b      	lsls	r3, r1, #30
 8006d04:	4635      	mov	r5, r6
 8006d06:	f140 8176 	bpl.w	8006ff6 <_vsnprintf+0x5da>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8006d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d0c:	465a      	mov	r2, fp
 8006d0e:	7818      	ldrb	r0, [r3, #0]
 8006d10:	4651      	mov	r1, sl
 8006d12:	464b      	mov	r3, r9
 8006d14:	47c0      	blx	r8
          while (l++ < width) {
 8006d16:	2f01      	cmp	r7, #1
 8006d18:	d909      	bls.n	8006d2e <_vsnprintf+0x312>
 8006d1a:	445f      	add	r7, fp
            out(' ', buffer, idx++, maxlen);
 8006d1c:	1c69      	adds	r1, r5, #1
 8006d1e:	462a      	mov	r2, r5
 8006d20:	464b      	mov	r3, r9
 8006d22:	460d      	mov	r5, r1
 8006d24:	2020      	movs	r0, #32
 8006d26:	4651      	mov	r1, sl
 8006d28:	47c0      	blx	r8
          while (l++ < width) {
 8006d2a:	42bd      	cmp	r5, r7
 8006d2c:	d1f6      	bne.n	8006d1c <_vsnprintf+0x300>
 8006d2e:	46ab      	mov	fp, r5
        break;
 8006d30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d32:	9309      	str	r3, [sp, #36]	; 0x24
 8006d34:	e681      	b.n	8006a3a <_vsnprintf+0x1e>
        if (*format == 'x' || *format == 'X') {
 8006d36:	2878      	cmp	r0, #120	; 0x78
 8006d38:	f000 8104 	beq.w	8006f44 <_vsnprintf+0x528>
 8006d3c:	2858      	cmp	r0, #88	; 0x58
 8006d3e:	f000 81ad 	beq.w	800709c <_vsnprintf+0x680>
        else if (*format == 'o') {
 8006d42:	286f      	cmp	r0, #111	; 0x6f
 8006d44:	f000 8217 	beq.w	8007176 <_vsnprintf+0x75a>
        else if (*format == 'b') {
 8006d48:	2862      	cmp	r0, #98	; 0x62
 8006d4a:	f000 82c7 	beq.w	80072dc <_vsnprintf+0x8c0>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8006d4e:	f021 0310 	bic.w	r3, r1, #16
        if ((*format != 'i') && (*format != 'd')) {
 8006d52:	2869      	cmp	r0, #105	; 0x69
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8006d54:	930b      	str	r3, [sp, #44]	; 0x2c
        if ((*format != 'i') && (*format != 'd')) {
 8006d56:	f040 8320 	bne.w	800739a <_vsnprintf+0x97e>
        if (flags & FLAGS_PRECISION) {
 8006d5a:	054a      	lsls	r2, r1, #21
 8006d5c:	f100 8209 	bmi.w	8007172 <_vsnprintf+0x756>
 8006d60:	f401 7300 	and.w	r3, r1, #512	; 0x200
          base = 10U;
 8006d64:	260a      	movs	r6, #10
          if (flags & FLAGS_LONG_LONG) {
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f040 81a1 	bne.w	80070ae <_vsnprintf+0x692>
 8006d6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d6e:	f102 0e04 	add.w	lr, r2, #4
          else if (flags & FLAGS_LONG) {
 8006d72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006d74:	f412 7180 	ands.w	r1, r2, #256	; 0x100
 8006d78:	f040 8273 	bne.w	8007262 <_vsnprintf+0x846>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8006d7c:	0650      	lsls	r0, r2, #25
 8006d7e:	f140 8268 	bpl.w	8007252 <_vsnprintf+0x836>
 8006d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d84:	781a      	ldrb	r2, [r3, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8006d86:	ea82 73e2 	eor.w	r3, r2, r2, asr #31
 8006d8a:	0fd0      	lsrs	r0, r2, #31
 8006d8c:	eba3 73e2 	sub.w	r3, r3, r2, asr #31
 8006d90:	9009      	str	r0, [sp, #36]	; 0x24
  if (!value) {
 8006d92:	b932      	cbnz	r2, 8006da2 <_vsnprintf+0x386>
    flags &= ~FLAGS_HASH;
 8006d94:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006d96:	f020 0210 	bic.w	r2, r0, #16
 8006d9a:	920b      	str	r2, [sp, #44]	; 0x2c
  if (!(flags & FLAGS_PRECISION) || value) {
 8006d9c:	0542      	lsls	r2, r0, #21
 8006d9e:	f100 82dc 	bmi.w	800735a <_vsnprintf+0x93e>
 8006da2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006da4:	f012 0f20 	tst.w	r2, #32
 8006da8:	aa10      	add	r2, sp, #64	; 0x40
 8006daa:	920c      	str	r2, [sp, #48]	; 0x30
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006dac:	bf14      	ite	ne
 8006dae:	f04f 0c37 	movne.w	ip, #55	; 0x37
 8006db2:	f04f 0c57 	moveq.w	ip, #87	; 0x57
 8006db6:	4615      	mov	r5, r2
 8006db8:	e001      	b.n	8006dbe <_vsnprintf+0x3a2>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006dba:	2920      	cmp	r1, #32
 8006dbc:	d011      	beq.n	8006de2 <_vsnprintf+0x3c6>
      const char digit = (char)(value % base);
 8006dbe:	fbb3 f2f6 	udiv	r2, r3, r6
 8006dc2:	fb06 3312 	mls	r3, r6, r2, r3
 8006dc6:	b2d8      	uxtb	r0, r3
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006dc8:	2b09      	cmp	r3, #9
 8006dca:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006dce:	bf88      	it	hi
 8006dd0:	eb00 030c 	addhi.w	r3, r0, ip
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	f805 3b01 	strb.w	r3, [r5], #1
 8006dda:	3101      	adds	r1, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006ddc:	4613      	mov	r3, r2
 8006dde:	2a00      	cmp	r2, #0
 8006de0:	d1eb      	bne.n	8006dba <_vsnprintf+0x39e>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006de4:	e9cd 7305 	strd	r7, r3, [sp, #20]
 8006de8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006dea:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8006dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006df0:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8006df4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	465a      	mov	r2, fp
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	4651      	mov	r1, sl
 8006dfe:	4640      	mov	r0, r8
 8006e00:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8006e04:	f7ff f864 	bl	8005ed0 <_ntoa_format>
 8006e08:	4683      	mov	fp, r0
 8006e0a:	e616      	b.n	8006a3a <_vsnprintf+0x1e>
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8006e0c:	2846      	cmp	r0, #70	; 0x46
 8006e0e:	bf08      	it	eq
 8006e10:	f041 0120 	orreq.w	r1, r1, #32
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8006e14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006e18:	9302      	str	r3, [sp, #8]
 8006e1a:	e9cd 7103 	strd	r7, r1, [sp, #12]
 8006e1e:	3507      	adds	r5, #7
 8006e20:	f025 0507 	bic.w	r5, r5, #7
 8006e24:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006e28:	465a      	mov	r2, fp
 8006e2a:	e9cd 0100 	strd	r0, r1, [sp]
 8006e2e:	464b      	mov	r3, r9
 8006e30:	4651      	mov	r1, sl
 8006e32:	4640      	mov	r0, r8
 8006e34:	3508      	adds	r5, #8
 8006e36:	9509      	str	r5, [sp, #36]	; 0x24
 8006e38:	f7ff f95a 	bl	80060f0 <_ftoa>
 8006e3c:	4683      	mov	fp, r0
        break;
 8006e3e:	e5fc      	b.n	8006a3a <_vsnprintf+0x1e>
        out(*format, buffer, idx++, maxlen);
 8006e40:	465a      	mov	r2, fp
 8006e42:	464b      	mov	r3, r9
 8006e44:	4651      	mov	r1, sl
 8006e46:	47c0      	blx	r8
 8006e48:	f10b 0b01 	add.w	fp, fp, #1
        break;
 8006e4c:	e5f5      	b.n	8006a3a <_vsnprintf+0x1e>
  unsigned int i = 0U;
 8006e4e:	2700      	movs	r7, #0
 8006e50:	e001      	b.n	8006e56 <_vsnprintf+0x43a>
  while (_is_digit(**str)) {
 8006e52:	461c      	mov	r4, r3
 8006e54:	3301      	adds	r3, #1
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8006e56:	eb07 0787 	add.w	r7, r7, r7, lsl #2
 8006e5a:	eb00 0747 	add.w	r7, r0, r7, lsl #1
  while (_is_digit(**str)) {
 8006e5e:	7818      	ldrb	r0, [r3, #0]
 8006e60:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8006e64:	2a09      	cmp	r2, #9
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8006e66:	f1a7 0730 	sub.w	r7, r7, #48	; 0x30
  while (_is_digit(**str)) {
 8006e6a:	d9f2      	bls.n	8006e52 <_vsnprintf+0x436>
    if (*format == '.') {
 8006e6c:	282e      	cmp	r0, #46	; 0x2e
 8006e6e:	f104 0502 	add.w	r5, r4, #2
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8006e72:	461c      	mov	r4, r3
    if (*format == '.') {
 8006e74:	f47f ae31 	bne.w	8006ada <_vsnprintf+0xbe>
      if (_is_digit(*format)) {
 8006e78:	7860      	ldrb	r0, [r4, #1]
 8006e7a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006e7e:	2b09      	cmp	r3, #9
      flags |= FLAGS_PRECISION;
 8006e80:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
      if (_is_digit(*format)) {
 8006e84:	d915      	bls.n	8006eb2 <_vsnprintf+0x496>
      else if (*format == '*') {
 8006e86:	282a      	cmp	r0, #42	; 0x2a
 8006e88:	f000 80cf 	beq.w	800702a <_vsnprintf+0x60e>
    precision = 0U;
 8006e8c:	2300      	movs	r3, #0
      format++;
 8006e8e:	462c      	mov	r4, r5
    precision = 0U;
 8006e90:	930a      	str	r3, [sp, #40]	; 0x28
      else if (*format == '*') {
 8006e92:	3501      	adds	r5, #1
 8006e94:	e623      	b.n	8006ade <_vsnprintf+0xc2>
      const int w = va_arg(va, int);
 8006e96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e98:	7860      	ldrb	r0, [r4, #1]
 8006e9a:	6817      	ldr	r7, [r2, #0]
 8006e9c:	3204      	adds	r2, #4
      if (w < 0) {
 8006e9e:	2f00      	cmp	r7, #0
 8006ea0:	f104 0502 	add.w	r5, r4, #2
        flags |= FLAGS_LEFT;    // reverse padding
 8006ea4:	bfbc      	itt	lt
 8006ea6:	f041 0102 	orrlt.w	r1, r1, #2
        width = (unsigned int)-w;
 8006eaa:	427f      	neglt	r7, r7
      const int w = va_arg(va, int);
 8006eac:	9209      	str	r2, [sp, #36]	; 0x24
 8006eae:	461c      	mov	r4, r3
 8006eb0:	e610      	b.n	8006ad4 <_vsnprintf+0xb8>
  unsigned int i = 0U;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	e000      	b.n	8006eb8 <_vsnprintf+0x49c>
  while (_is_digit(**str)) {
 8006eb6:	4625      	mov	r5, r4
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8006eb8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006ebc:	eb00 0343 	add.w	r3, r0, r3, lsl #1
  while (_is_digit(**str)) {
 8006ec0:	7868      	ldrb	r0, [r5, #1]
 8006ec2:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
 8006ec6:	2a09      	cmp	r2, #9
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8006ec8:	f1a3 0330 	sub.w	r3, r3, #48	; 0x30
 8006ecc:	f105 0401 	add.w	r4, r5, #1
  while (_is_digit(**str)) {
 8006ed0:	d9f1      	bls.n	8006eb6 <_vsnprintf+0x49a>
 8006ed2:	930a      	str	r3, [sp, #40]	; 0x28
 8006ed4:	3502      	adds	r5, #2
 8006ed6:	e602      	b.n	8006ade <_vsnprintf+0xc2>
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8006ed8:	f000 03df 	and.w	r3, r0, #223	; 0xdf
 8006edc:	2b47      	cmp	r3, #71	; 0x47
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8006ede:	bf04      	itt	eq
 8006ee0:	f000 00fd 	andeq.w	r0, r0, #253	; 0xfd
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8006ee4:	f441 6100 	orreq.w	r1, r1, #2048	; 0x800
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8006ee8:	2845      	cmp	r0, #69	; 0x45
 8006eea:	bf08      	it	eq
 8006eec:	f041 0120 	orreq.w	r1, r1, #32
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8006ef0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006ef2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ef4:	9302      	str	r3, [sp, #8]
 8006ef6:	e9cd 7103 	strd	r7, r1, [sp, #12]
 8006efa:	3507      	adds	r5, #7
 8006efc:	f025 0507 	bic.w	r5, r5, #7
 8006f00:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006f04:	465a      	mov	r2, fp
 8006f06:	e9cd 0100 	strd	r0, r1, [sp]
 8006f0a:	464b      	mov	r3, r9
 8006f0c:	4651      	mov	r1, sl
 8006f0e:	4640      	mov	r0, r8
 8006f10:	3508      	adds	r5, #8
 8006f12:	9509      	str	r5, [sp, #36]	; 0x24
 8006f14:	f7ff fb84 	bl	8006620 <_etoa>
 8006f18:	4683      	mov	fp, r0
        break;
 8006f1a:	e58e      	b.n	8006a3a <_vsnprintf+0x1e>
    switch (*format) {
 8006f1c:	462c      	mov	r4, r5
 8006f1e:	e5fc      	b.n	8006b1a <_vsnprintf+0xfe>
  for (s = str; *s && maxsize--; ++s);
 8006f20:	461e      	mov	r6, r3
 8006f22:	2800      	cmp	r0, #0
 8006f24:	f43f ae85 	beq.w	8006c32 <_vsnprintf+0x216>
 8006f28:	f06f 0c01 	mvn.w	ip, #1
 8006f2c:	e674      	b.n	8006c18 <_vsnprintf+0x1fc>
    flags &= ~FLAGS_HASH;
 8006f2e:	f021 0010 	bic.w	r0, r1, #16
  if (!(flags & FLAGS_PRECISION) || value) {
 8006f32:	054e      	lsls	r6, r1, #21
    flags &= ~FLAGS_HASH;
 8006f34:	f040 0021 	orr.w	r0, r0, #33	; 0x21
  if (!(flags & FLAGS_PRECISION) || value) {
 8006f38:	f57f aeb5 	bpl.w	8006ca6 <_vsnprintf+0x28a>
  size_t len = 0U;
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	ab10      	add	r3, sp, #64	; 0x40
 8006f40:	930c      	str	r3, [sp, #48]	; 0x30
 8006f42:	e6c4      	b.n	8006cce <_vsnprintf+0x2b2>
 8006f44:	f401 6380 	and.w	r3, r1, #1024	; 0x400
          base = 16U;
 8006f48:	2610      	movs	r6, #16
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8006f4a:	f021 020c 	bic.w	r2, r1, #12
 8006f4e:	920b      	str	r2, [sp, #44]	; 0x2c
        if (flags & FLAGS_PRECISION) {
 8006f50:	b11b      	cbz	r3, 8006f5a <_vsnprintf+0x53e>
 8006f52:	4613      	mov	r3, r2
          flags &= ~FLAGS_ZEROPAD;
 8006f54:	f023 0301 	bic.w	r3, r3, #1
 8006f58:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
        if ((*format == 'i') || (*format == 'd')) {
 8006f5c:	2869      	cmp	r0, #105	; 0x69
 8006f5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f62:	f43f af00 	beq.w	8006d66 <_vsnprintf+0x34a>
 8006f66:	2864      	cmp	r0, #100	; 0x64
 8006f68:	f43f aefd 	beq.w	8006d66 <_vsnprintf+0x34a>
          if (flags & FLAGS_LONG_LONG) {
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	f040 810f 	bne.w	8007190 <_vsnprintf+0x774>
 8006f72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f74:	f102 0e04 	add.w	lr, r2, #4
          else if (flags & FLAGS_LONG) {
 8006f78:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f7a:	f412 7180 	ands.w	r1, r2, #256	; 0x100
 8006f7e:	f040 81af 	bne.w	80072e0 <_vsnprintf+0x8c4>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8006f82:	0650      	lsls	r0, r2, #25
 8006f84:	f140 81e2 	bpl.w	800734c <_vsnprintf+0x930>
 8006f88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f8a:	781b      	ldrb	r3, [r3, #0]
  if (!value) {
 8006f8c:	b933      	cbnz	r3, 8006f9c <_vsnprintf+0x580>
    flags &= ~FLAGS_HASH;
 8006f8e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006f90:	f020 0210 	bic.w	r2, r0, #16
 8006f94:	920b      	str	r2, [sp, #44]	; 0x2c
  if (!(flags & FLAGS_PRECISION) || value) {
 8006f96:	0542      	lsls	r2, r0, #21
 8006f98:	f100 81ef 	bmi.w	800737a <_vsnprintf+0x95e>
 8006f9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006f9e:	f012 0f20 	tst.w	r2, #32
 8006fa2:	aa10      	add	r2, sp, #64	; 0x40
 8006fa4:	920c      	str	r2, [sp, #48]	; 0x30
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006fa6:	bf14      	ite	ne
 8006fa8:	f04f 0c37 	movne.w	ip, #55	; 0x37
 8006fac:	f04f 0c57 	moveq.w	ip, #87	; 0x57
 8006fb0:	4615      	mov	r5, r2
 8006fb2:	e001      	b.n	8006fb8 <_vsnprintf+0x59c>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006fb4:	2920      	cmp	r1, #32
 8006fb6:	d011      	beq.n	8006fdc <_vsnprintf+0x5c0>
      const char digit = (char)(value % base);
 8006fb8:	fbb3 f2f6 	udiv	r2, r3, r6
 8006fbc:	fb06 3312 	mls	r3, r6, r2, r3
 8006fc0:	b2d8      	uxtb	r0, r3
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8006fc2:	2b09      	cmp	r3, #9
 8006fc4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006fc8:	bf88      	it	hi
 8006fca:	eb00 030c 	addhi.w	r3, r0, ip
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	f805 3b01 	strb.w	r3, [r5], #1
 8006fd4:	3101      	adds	r1, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8006fd6:	4613      	mov	r3, r2
 8006fd8:	2a00      	cmp	r2, #0
 8006fda:	d1eb      	bne.n	8006fb4 <_vsnprintf+0x598>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8006fdc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006fde:	9101      	str	r1, [sp, #4]
 8006fe0:	e9cd 7205 	strd	r7, r2, [sp, #20]
 8006fe4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	e9cd 6203 	strd	r6, r2, [sp, #12]
 8006fec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fee:	9200      	str	r2, [sp, #0]
 8006ff0:	9302      	str	r3, [sp, #8]
 8006ff2:	465a      	mov	r2, fp
 8006ff4:	e701      	b.n	8006dfa <_vsnprintf+0x3de>
          while (l++ < width) {
 8006ff6:	2f01      	cmp	r7, #1
 8006ff8:	f240 81b7 	bls.w	800736a <_vsnprintf+0x94e>
 8006ffc:	f10b 35ff 	add.w	r5, fp, #4294967295	; 0xffffffff
 8007000:	443d      	add	r5, r7
 8007002:	e001      	b.n	8007008 <_vsnprintf+0x5ec>
 8007004:	46b3      	mov	fp, r6
 8007006:	3601      	adds	r6, #1
            out(' ', buffer, idx++, maxlen);
 8007008:	464b      	mov	r3, r9
 800700a:	465a      	mov	r2, fp
 800700c:	4651      	mov	r1, sl
 800700e:	2020      	movs	r0, #32
 8007010:	47c0      	blx	r8
          while (l++ < width) {
 8007012:	42ae      	cmp	r6, r5
            out(' ', buffer, idx++, maxlen);
 8007014:	4637      	mov	r7, r6
          while (l++ < width) {
 8007016:	d1f5      	bne.n	8007004 <_vsnprintf+0x5e8>
 8007018:	f10b 0b02 	add.w	fp, fp, #2
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 800701c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800701e:	463a      	mov	r2, r7
 8007020:	7818      	ldrb	r0, [r3, #0]
 8007022:	4651      	mov	r1, sl
 8007024:	464b      	mov	r3, r9
 8007026:	47c0      	blx	r8
 8007028:	e682      	b.n	8006d30 <_vsnprintf+0x314>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 800702a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800702c:	78a0      	ldrb	r0, [r4, #2]
 800702e:	6813      	ldr	r3, [r2, #0]
 8007030:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007034:	930a      	str	r3, [sp, #40]	; 0x28
        const int prec = (int)va_arg(va, int);
 8007036:	1d13      	adds	r3, r2, #4
 8007038:	1ce5      	adds	r5, r4, #3
 800703a:	9309      	str	r3, [sp, #36]	; 0x24
        format++;
 800703c:	3402      	adds	r4, #2
 800703e:	e54e      	b.n	8006ade <_vsnprintf+0xc2>
 8007040:	78a0      	ldrb	r0, [r4, #2]
          flags |= FLAGS_CHAR;
 8007042:	f041 01c0 	orr.w	r1, r1, #192	; 0xc0
 8007046:	3403      	adds	r4, #3
 8007048:	e567      	b.n	8006b1a <_vsnprintf+0xfe>
          while (l++ < width) {
 800704a:	42b7      	cmp	r7, r6
 800704c:	f67f ae14 	bls.w	8006c78 <_vsnprintf+0x25c>
 8007050:	eb07 050b 	add.w	r5, r7, fp
 8007054:	1bae      	subs	r6, r5, r6
 8007056:	465a      	mov	r2, fp
            out(' ', buffer, idx++, maxlen);
 8007058:	f10b 0b01 	add.w	fp, fp, #1
 800705c:	464b      	mov	r3, r9
 800705e:	4651      	mov	r1, sl
 8007060:	2020      	movs	r0, #32
 8007062:	47c0      	blx	r8
          while (l++ < width) {
 8007064:	45b3      	cmp	fp, r6
 8007066:	465a      	mov	r2, fp
 8007068:	d1f6      	bne.n	8007058 <_vsnprintf+0x63c>
 800706a:	e605      	b.n	8006c78 <_vsnprintf+0x25c>
          while (l++ < width) {
 800706c:	42b7      	cmp	r7, r6
 800706e:	f106 0301 	add.w	r3, r6, #1
 8007072:	f240 817d 	bls.w	8007370 <_vsnprintf+0x954>
 8007076:	eb07 030b 	add.w	r3, r7, fp
 800707a:	1b9e      	subs	r6, r3, r6
 800707c:	465a      	mov	r2, fp
            out(' ', buffer, idx++, maxlen);
 800707e:	f10b 0b01 	add.w	fp, fp, #1
 8007082:	464b      	mov	r3, r9
 8007084:	4651      	mov	r1, sl
 8007086:	2020      	movs	r0, #32
 8007088:	47c0      	blx	r8
          while (l++ < width) {
 800708a:	45b3      	cmp	fp, r6
 800708c:	465a      	mov	r2, fp
 800708e:	d1f6      	bne.n	800707e <_vsnprintf+0x662>
 8007090:	7828      	ldrb	r0, [r5, #0]
 8007092:	1c7e      	adds	r6, r7, #1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8007094:	2800      	cmp	r0, #0
 8007096:	f47f addc 	bne.w	8006c52 <_vsnprintf+0x236>
 800709a:	e5ed      	b.n	8006c78 <_vsnprintf+0x25c>
 800709c:	f021 030c 	bic.w	r3, r1, #12
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80070a0:	f043 0320 	orr.w	r3, r3, #32
        if (flags & FLAGS_PRECISION) {
 80070a4:	054d      	lsls	r5, r1, #21
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 80070a6:	930b      	str	r3, [sp, #44]	; 0x2c
        if (flags & FLAGS_PRECISION) {
 80070a8:	d55f      	bpl.n	800716a <_vsnprintf+0x74e>
          base = 16U;
 80070aa:	2610      	movs	r6, #16
 80070ac:	e752      	b.n	8006f54 <_vsnprintf+0x538>
            const long long value = va_arg(va, long long);
 80070ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070b0:	3307      	adds	r3, #7
 80070b2:	f023 0307 	bic.w	r3, r3, #7
 80070b6:	e9d3 0100 	ldrd	r0, r1, [r3]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80070ba:	2800      	cmp	r0, #0
            const long long value = va_arg(va, long long);
 80070bc:	f103 0308 	add.w	r3, r3, #8
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80070c0:	f171 0500 	sbcs.w	r5, r1, #0
            const long long value = va_arg(va, long long);
 80070c4:	9309      	str	r3, [sp, #36]	; 0x24
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80070c6:	4602      	mov	r2, r0
 80070c8:	460b      	mov	r3, r1
 80070ca:	da02      	bge.n	80070d2 <_vsnprintf+0x6b6>
 80070cc:	4242      	negs	r2, r0
 80070ce:	eb61 0341 	sbc.w	r3, r1, r1, lsl #1
 80070d2:	0fcd      	lsrs	r5, r1, #31
  if (!value) {
 80070d4:	4301      	orrs	r1, r0
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 80070d6:	950f      	str	r5, [sp, #60]	; 0x3c
  if (!value) {
 80070d8:	d106      	bne.n	80070e8 <_vsnprintf+0x6cc>
    flags &= ~FLAGS_HASH;
 80070da:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80070dc:	f020 0110 	bic.w	r1, r0, #16
  if (!(flags & FLAGS_PRECISION) || value) {
 80070e0:	0545      	lsls	r5, r0, #21
    flags &= ~FLAGS_HASH;
 80070e2:	910b      	str	r1, [sp, #44]	; 0x2c
  if (!(flags & FLAGS_PRECISION) || value) {
 80070e4:	f100 813c 	bmi.w	8007360 <_vsnprintf+0x944>
 80070e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80070ea:	f8cd b034 	str.w	fp, [sp, #52]	; 0x34
 80070ee:	f011 0f20 	tst.w	r1, #32
 80070f2:	bf18      	it	ne
 80070f4:	2037      	movne	r0, #55	; 0x37
 80070f6:	a910      	add	r1, sp, #64	; 0x40
 80070f8:	bf08      	it	eq
 80070fa:	2057      	moveq	r0, #87	; 0x57
 80070fc:	940e      	str	r4, [sp, #56]	; 0x38
 80070fe:	910c      	str	r1, [sp, #48]	; 0x30
 8007100:	2500      	movs	r5, #0
 8007102:	468b      	mov	fp, r1
 8007104:	4604      	mov	r4, r0
 8007106:	e001      	b.n	800710c <_vsnprintf+0x6f0>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8007108:	2d20      	cmp	r5, #32
 800710a:	d019      	beq.n	8007140 <_vsnprintf+0x724>
 800710c:	4610      	mov	r0, r2
 800710e:	4619      	mov	r1, r3
 8007110:	4632      	mov	r2, r6
 8007112:	2300      	movs	r3, #0
 8007114:	f7f9 fdc2 	bl	8000c9c <__aeabi_uldivmod>
      const char digit = (char)(value % base);
 8007118:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800711a:	2a09      	cmp	r2, #9
 800711c:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 8007120:	bf84      	itt	hi
 8007122:	1912      	addhi	r2, r2, r4
 8007124:	fa5f fc82 	uxtbhi.w	ip, r2
      value /= base;
 8007128:	460b      	mov	r3, r1
 800712a:	4602      	mov	r2, r0
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800712c:	bf98      	it	ls
 800712e:	fa5f fc8c 	uxtbls.w	ip, ip
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8007132:	ea52 0103 	orrs.w	r1, r2, r3
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8007136:	f105 0501 	add.w	r5, r5, #1
 800713a:	f80b cb01 	strb.w	ip, [fp], #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800713e:	d1e3      	bne.n	8007108 <_vsnprintf+0x6ec>
 8007140:	e9dd b40d 	ldrd	fp, r4, [sp, #52]	; 0x34
 8007144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8007146:	e9cd 7305 	strd	r7, r3, [sp, #20]
 800714a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800714c:	e9cd 6303 	strd	r6, r3, [sp, #12]
 8007150:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007152:	e9cd 5301 	strd	r5, r3, [sp, #4]
 8007156:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	465a      	mov	r2, fp
 800715c:	464b      	mov	r3, r9
 800715e:	4651      	mov	r1, sl
 8007160:	4640      	mov	r0, r8
 8007162:	f7fe feb5 	bl	8005ed0 <_ntoa_format>
 8007166:	4683      	mov	fp, r0
 8007168:	e467      	b.n	8006a3a <_vsnprintf+0x1e>
 800716a:	f401 7300 	and.w	r3, r1, #512	; 0x200
          base = 16U;
 800716e:	2610      	movs	r6, #16
 8007170:	e6fc      	b.n	8006f6c <_vsnprintf+0x550>
          base = 10U;
 8007172:	260a      	movs	r6, #10
 8007174:	e6ee      	b.n	8006f54 <_vsnprintf+0x538>
          base =  8U;
 8007176:	2608      	movs	r6, #8
        if ((*format != 'i') && (*format != 'd')) {
 8007178:	2864      	cmp	r0, #100	; 0x64
 800717a:	f401 6380 	and.w	r3, r1, #1024	; 0x400
 800717e:	f47f aee4 	bne.w	8006f4a <_vsnprintf+0x52e>
        if (flags & FLAGS_PRECISION) {
 8007182:	2b00      	cmp	r3, #0
 8007184:	f040 80a7 	bne.w	80072d6 <_vsnprintf+0x8ba>
 8007188:	f401 7300 	and.w	r3, r1, #512	; 0x200
 800718c:	910b      	str	r1, [sp, #44]	; 0x2c
 800718e:	e5ea      	b.n	8006d66 <_vsnprintf+0x34a>
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8007190:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007192:	3107      	adds	r1, #7
 8007194:	f021 0107 	bic.w	r1, r1, #7
 8007198:	e9d1 2300 	ldrd	r2, r3, [r1]
 800719c:	3108      	adds	r1, #8
 800719e:	9109      	str	r1, [sp, #36]	; 0x24
  if (!value) {
 80071a0:	ea52 0103 	orrs.w	r1, r2, r3
 80071a4:	d106      	bne.n	80071b4 <_vsnprintf+0x798>
    flags &= ~FLAGS_HASH;
 80071a6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80071a8:	f020 0110 	bic.w	r1, r0, #16
  if (!(flags & FLAGS_PRECISION) || value) {
 80071ac:	0545      	lsls	r5, r0, #21
    flags &= ~FLAGS_HASH;
 80071ae:	910b      	str	r1, [sp, #44]	; 0x2c
  if (!(flags & FLAGS_PRECISION) || value) {
 80071b0:	f100 80e6 	bmi.w	8007380 <_vsnprintf+0x964>
 80071b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80071b6:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 80071ba:	f011 0f20 	tst.w	r1, #32
 80071be:	bf18      	it	ne
 80071c0:	2037      	movne	r0, #55	; 0x37
 80071c2:	a910      	add	r1, sp, #64	; 0x40
 80071c4:	bf08      	it	eq
 80071c6:	2057      	moveq	r0, #87	; 0x57
 80071c8:	910c      	str	r1, [sp, #48]	; 0x30
 80071ca:	900d      	str	r0, [sp, #52]	; 0x34
 80071cc:	2500      	movs	r5, #0
 80071ce:	468b      	mov	fp, r1
 80071d0:	e001      	b.n	80071d6 <_vsnprintf+0x7ba>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80071d2:	2d20      	cmp	r5, #32
 80071d4:	d01b      	beq.n	800720e <_vsnprintf+0x7f2>
 80071d6:	4610      	mov	r0, r2
 80071d8:	4619      	mov	r1, r3
 80071da:	4632      	mov	r2, r6
 80071dc:	2300      	movs	r3, #0
 80071de:	f7f9 fd5d 	bl	8000c9c <__aeabi_uldivmod>
      const char digit = (char)(value % base);
 80071e2:	b2d2      	uxtb	r2, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80071e4:	2a09      	cmp	r2, #9
 80071e6:	bf88      	it	hi
 80071e8:	9b0d      	ldrhi	r3, [sp, #52]	; 0x34
 80071ea:	f102 0c30 	add.w	ip, r2, #48	; 0x30
 80071ee:	bf84      	itt	hi
 80071f0:	18d2      	addhi	r2, r2, r3
 80071f2:	fa5f fc82 	uxtbhi.w	ip, r2
      value /= base;
 80071f6:	460b      	mov	r3, r1
 80071f8:	4602      	mov	r2, r0
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80071fa:	bf98      	it	ls
 80071fc:	fa5f fc8c 	uxtbls.w	ip, ip
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8007200:	ea52 0103 	orrs.w	r1, r2, r3
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8007204:	f105 0501 	add.w	r5, r5, #1
 8007208:	f80b cb01 	strb.w	ip, [fp], #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800720c:	d1e1      	bne.n	80071d2 <_vsnprintf+0x7b6>
 800720e:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8007212:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8007214:	9501      	str	r5, [sp, #4]
 8007216:	e9cd 7205 	strd	r7, r2, [sp, #20]
 800721a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800721c:	2300      	movs	r3, #0
 800721e:	e9cd 6203 	strd	r6, r2, [sp, #12]
 8007222:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007224:	9200      	str	r2, [sp, #0]
 8007226:	9302      	str	r3, [sp, #8]
 8007228:	465a      	mov	r2, fp
 800722a:	e797      	b.n	800715c <_vsnprintf+0x740>
 800722c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800722e:	9609      	str	r6, [sp, #36]	; 0x24
 8007230:	445b      	add	r3, fp
          while (l++ < width) {
 8007232:	465a      	mov	r2, fp
 8007234:	461e      	mov	r6, r3
 8007236:	e006      	b.n	8007246 <_vsnprintf+0x82a>
          out(*(p++), buffer, idx++, maxlen);
 8007238:	47c0      	blx	r8
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800723a:	f815 0f01 	ldrb.w	r0, [r5, #1]!
          out(*(p++), buffer, idx++, maxlen);
 800723e:	f10b 0b01 	add.w	fp, fp, #1
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8007242:	b120      	cbz	r0, 800724e <_vsnprintf+0x832>
          out(*(p++), buffer, idx++, maxlen);
 8007244:	465a      	mov	r2, fp
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8007246:	455e      	cmp	r6, fp
          out(*(p++), buffer, idx++, maxlen);
 8007248:	464b      	mov	r3, r9
 800724a:	4651      	mov	r1, sl
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800724c:	d1f4      	bne.n	8007238 <_vsnprintf+0x81c>
 800724e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8007250:	e50e      	b.n	8006c70 <_vsnprintf+0x254>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8007252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007254:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007258:	bf14      	ite	ne
 800725a:	f9b3 2000 	ldrshne.w	r2, [r3]
 800725e:	681a      	ldreq	r2, [r3, #0]
 8007260:	e591      	b.n	8006d86 <_vsnprintf+0x36a>
            const long value = va_arg(va, long);
 8007262:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007264:	6812      	ldr	r2, [r2, #0]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8007266:	ea82 71e2 	eor.w	r1, r2, r2, asr #31
 800726a:	0fd0      	lsrs	r0, r2, #31
 800726c:	eba1 71e2 	sub.w	r1, r1, r2, asr #31
 8007270:	9009      	str	r0, [sp, #36]	; 0x24
  if (!value) {
 8007272:	b932      	cbnz	r2, 8007282 <_vsnprintf+0x866>
    flags &= ~FLAGS_HASH;
 8007274:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007276:	f020 0210 	bic.w	r2, r0, #16
  if (!(flags & FLAGS_PRECISION) || value) {
 800727a:	0545      	lsls	r5, r0, #21
    flags &= ~FLAGS_HASH;
 800727c:	920b      	str	r2, [sp, #44]	; 0x2c
  if (!(flags & FLAGS_PRECISION) || value) {
 800727e:	f100 8089 	bmi.w	8007394 <_vsnprintf+0x978>
 8007282:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007284:	f012 0f20 	tst.w	r2, #32
 8007288:	aa10      	add	r2, sp, #64	; 0x40
 800728a:	920c      	str	r2, [sp, #48]	; 0x30
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 800728c:	bf14      	ite	ne
 800728e:	f04f 0c37 	movne.w	ip, #55	; 0x37
 8007292:	f04f 0c57 	moveq.w	ip, #87	; 0x57
 8007296:	4615      	mov	r5, r2
 8007298:	e001      	b.n	800729e <_vsnprintf+0x882>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800729a:	2b20      	cmp	r3, #32
 800729c:	d011      	beq.n	80072c2 <_vsnprintf+0x8a6>
      const char digit = (char)(value % base);
 800729e:	fbb1 f2f6 	udiv	r2, r1, r6
 80072a2:	fb06 1112 	mls	r1, r6, r2, r1
 80072a6:	b2c8      	uxtb	r0, r1
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80072a8:	2909      	cmp	r1, #9
 80072aa:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80072ae:	bf88      	it	hi
 80072b0:	eb00 010c 	addhi.w	r1, r0, ip
 80072b4:	b2c9      	uxtb	r1, r1
 80072b6:	f805 1b01 	strb.w	r1, [r5], #1
 80072ba:	3301      	adds	r3, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80072bc:	4611      	mov	r1, r2
 80072be:	2a00      	cmp	r2, #0
 80072c0:	d1eb      	bne.n	800729a <_vsnprintf+0x87e>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 80072c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072c4:	e9cd 7205 	strd	r7, r2, [sp, #20]
 80072c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072ca:	e9cd 6203 	strd	r6, r2, [sp, #12]
 80072ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072d0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80072d4:	e58e      	b.n	8006df4 <_vsnprintf+0x3d8>
        if (flags & FLAGS_PRECISION) {
 80072d6:	910b      	str	r1, [sp, #44]	; 0x2c
 80072d8:	460b      	mov	r3, r1
 80072da:	e63b      	b.n	8006f54 <_vsnprintf+0x538>
          base =  2U;
 80072dc:	2602      	movs	r6, #2
 80072de:	e74b      	b.n	8007178 <_vsnprintf+0x75c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 80072e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072e2:	6812      	ldr	r2, [r2, #0]
  if (!value) {
 80072e4:	b92a      	cbnz	r2, 80072f2 <_vsnprintf+0x8d6>
    flags &= ~FLAGS_HASH;
 80072e6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80072e8:	f020 0110 	bic.w	r1, r0, #16
  if (!(flags & FLAGS_PRECISION) || value) {
 80072ec:	0545      	lsls	r5, r0, #21
    flags &= ~FLAGS_HASH;
 80072ee:	910b      	str	r1, [sp, #44]	; 0x2c
  if (!(flags & FLAGS_PRECISION) || value) {
 80072f0:	d44d      	bmi.n	800738e <_vsnprintf+0x972>
 80072f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80072f4:	f011 0f20 	tst.w	r1, #32
 80072f8:	a910      	add	r1, sp, #64	; 0x40
 80072fa:	910c      	str	r1, [sp, #48]	; 0x30
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 80072fc:	bf14      	ite	ne
 80072fe:	f04f 0c37 	movne.w	ip, #55	; 0x37
 8007302:	f04f 0c57 	moveq.w	ip, #87	; 0x57
 8007306:	460d      	mov	r5, r1
 8007308:	e001      	b.n	800730e <_vsnprintf+0x8f2>
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800730a:	2b20      	cmp	r3, #32
 800730c:	d011      	beq.n	8007332 <_vsnprintf+0x916>
      const char digit = (char)(value % base);
 800730e:	fbb2 f1f6 	udiv	r1, r2, r6
 8007312:	fb06 2211 	mls	r2, r6, r1, r2
 8007316:	b2d0      	uxtb	r0, r2
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8007318:	2a09      	cmp	r2, #9
 800731a:	f100 0230 	add.w	r2, r0, #48	; 0x30
 800731e:	bf88      	it	hi
 8007320:	eb00 020c 	addhi.w	r2, r0, ip
 8007324:	b2d2      	uxtb	r2, r2
 8007326:	f805 2b01 	strb.w	r2, [r5], #1
 800732a:	3301      	adds	r3, #1
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 800732c:	460a      	mov	r2, r1
 800732e:	2900      	cmp	r1, #0
 8007330:	d1eb      	bne.n	800730a <_vsnprintf+0x8ee>
  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8007332:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007334:	9301      	str	r3, [sp, #4]
 8007336:	e9cd 7205 	strd	r7, r2, [sp, #20]
 800733a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800733c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	2100      	movs	r1, #0
 8007342:	e9cd 6203 	strd	r6, r2, [sp, #12]
 8007346:	9102      	str	r1, [sp, #8]
 8007348:	465a      	mov	r2, fp
 800734a:	e556      	b.n	8006dfa <_vsnprintf+0x3de>
 800734c:	9b09      	ldr	r3, [sp, #36]	; 0x24
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 800734e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8007352:	bf14      	ite	ne
 8007354:	881b      	ldrhne	r3, [r3, #0]
 8007356:	681b      	ldreq	r3, [r3, #0]
 8007358:	e618      	b.n	8006f8c <_vsnprintf+0x570>
 800735a:	ab10      	add	r3, sp, #64	; 0x40
 800735c:	930c      	str	r3, [sp, #48]	; 0x30
 800735e:	e540      	b.n	8006de2 <_vsnprintf+0x3c6>
 8007360:	ab10      	add	r3, sp, #64	; 0x40
 8007362:	930c      	str	r3, [sp, #48]	; 0x30
  size_t len = 0U;
 8007364:	2500      	movs	r5, #0
 8007366:	460b      	mov	r3, r1
 8007368:	e6ed      	b.n	8007146 <_vsnprintf+0x72a>
          while (l++ < width) {
 800736a:	465f      	mov	r7, fp
 800736c:	46b3      	mov	fp, r6
 800736e:	e655      	b.n	800701c <_vsnprintf+0x600>
          while (l++ < width) {
 8007370:	461e      	mov	r6, r3
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8007372:	2800      	cmp	r0, #0
 8007374:	f47f ac6d 	bne.w	8006c52 <_vsnprintf+0x236>
 8007378:	e47e      	b.n	8006c78 <_vsnprintf+0x25c>
 800737a:	ab10      	add	r3, sp, #64	; 0x40
 800737c:	930c      	str	r3, [sp, #48]	; 0x30
 800737e:	e62d      	b.n	8006fdc <_vsnprintf+0x5c0>
 8007380:	ab10      	add	r3, sp, #64	; 0x40
  size_t len = 0U;
 8007382:	2500      	movs	r5, #0
 8007384:	930c      	str	r3, [sp, #48]	; 0x30
 8007386:	460a      	mov	r2, r1
 8007388:	e744      	b.n	8007214 <_vsnprintf+0x7f8>
  for (s = str; *s && maxsize--; ++s);
 800738a:	4606      	mov	r6, r0
 800738c:	e451      	b.n	8006c32 <_vsnprintf+0x216>
 800738e:	aa10      	add	r2, sp, #64	; 0x40
 8007390:	920c      	str	r2, [sp, #48]	; 0x30
 8007392:	e7ce      	b.n	8007332 <_vsnprintf+0x916>
 8007394:	aa10      	add	r2, sp, #64	; 0x40
 8007396:	920c      	str	r2, [sp, #48]	; 0x30
 8007398:	e793      	b.n	80072c2 <_vsnprintf+0x8a6>
          flags &= ~FLAGS_HASH;   // no hash for dec format
 800739a:	4619      	mov	r1, r3
          base = 10U;
 800739c:	260a      	movs	r6, #10
 800739e:	e6eb      	b.n	8007178 <_vsnprintf+0x75c>

080073a0 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 80073a0:	b40e      	push	{r1, r2, r3}
 80073a2:	b510      	push	{r4, lr}
 80073a4:	b085      	sub	sp, #20
 80073a6:	ac07      	add	r4, sp, #28
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80073a8:	4601      	mov	r1, r0
{
 80073aa:	f854 3b04 	ldr.w	r3, [r4], #4
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80073ae:	9400      	str	r4, [sp, #0]
 80073b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80073b4:	4804      	ldr	r0, [pc, #16]	; (80073c8 <sprintf_+0x28>)
  va_start(va, format);
 80073b6:	9403      	str	r4, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80073b8:	f7ff fb30 	bl	8006a1c <_vsnprintf>
  va_end(va);
  return ret;
}
 80073bc:	b005      	add	sp, #20
 80073be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073c2:	b003      	add	sp, #12
 80073c4:	4770      	bx	lr
 80073c6:	bf00      	nop
 80073c8:	08005ec5 	.word	0x08005ec5

080073cc <Ring_Buffer_Init>:

void Ring_Buffer_Init(Ring_Buffer_t* handle, char* buffer, uint16_t size)
    {
    handle->Buffer        =  buffer;
    handle->Read_Index    =  0;
    handle->Write_Index   =  0;
 80073cc:	2300      	movs	r3, #0
    handle->Buffer        =  buffer;
 80073ce:	6001      	str	r1, [r0, #0]
    handle->Size          =  size;
 80073d0:	8102      	strh	r2, [r0, #8]
    handle->Write_Index   =  0;
 80073d2:	6043      	str	r3, [r0, #4]
    }
 80073d4:	4770      	bx	lr
 80073d6:	bf00      	nop

080073d8 <Ring_Buffer_Get_Char>:


uint8_t Ring_Buffer_Get_Char(Ring_Buffer_t* handle, char* data)
    {

    if (handle->Read_Index == handle->Write_Index)
 80073d8:	88c3      	ldrh	r3, [r0, #6]
 80073da:	8882      	ldrh	r2, [r0, #4]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d00d      	beq.n	80073fc <Ring_Buffer_Get_Char+0x24>
	{
	*data = 0;
	return 0;
	}

    *data = handle->Buffer[handle->Read_Index];
 80073e0:	6802      	ldr	r2, [r0, #0]
 80073e2:	5cd3      	ldrb	r3, [r2, r3]
 80073e4:	700b      	strb	r3, [r1, #0]

    handle->Read_Index++;
 80073e6:	88c3      	ldrh	r3, [r0, #6]

    if (handle->Read_Index == handle->Size)
 80073e8:	8902      	ldrh	r2, [r0, #8]
    handle->Read_Index++;
 80073ea:	3301      	adds	r3, #1
 80073ec:	b29b      	uxth	r3, r3
    if (handle->Read_Index == handle->Size)
 80073ee:	429a      	cmp	r2, r3
    handle->Read_Index++;
 80073f0:	80c3      	strh	r3, [r0, #6]
	{
	handle->Read_Index = 0;
 80073f2:	bf04      	itt	eq
 80073f4:	2300      	moveq	r3, #0
 80073f6:	80c3      	strheq	r3, [r0, #6]
	}

    return 1;
 80073f8:	2001      	movs	r0, #1
    }
 80073fa:	4770      	bx	lr
	*data = 0;
 80073fc:	2000      	movs	r0, #0
 80073fe:	7008      	strb	r0, [r1, #0]
	return 0;
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop

08007404 <Ring_Buffer_Flush>:
    }


void Ring_Buffer_Flush(Ring_Buffer_t* handle)
    {
    handle->Read_Index = handle->Write_Index;
 8007404:	8883      	ldrh	r3, [r0, #4]
 8007406:	80c3      	strh	r3, [r0, #6]
    }
 8007408:	4770      	bx	lr
 800740a:	bf00      	nop

0800740c <Ring_Buffer_Get_Count>:


uint16_t Ring_Buffer_Get_Count(Ring_Buffer_t* handle)
    {
    if (handle->Write_Index >= handle->Read_Index)
 800740c:	8883      	ldrh	r3, [r0, #4]
 800740e:	88c2      	ldrh	r2, [r0, #6]
 8007410:	4293      	cmp	r3, r2
	{
	return (handle->Write_Index - handle->Read_Index);
	}
    return (handle->Size - (handle->Read_Index - handle->Write_Index ));
 8007412:	bf3b      	ittet	cc
 8007414:	8900      	ldrhcc	r0, [r0, #8]
 8007416:	18c0      	addcc	r0, r0, r3
	return (handle->Write_Index - handle->Read_Index);
 8007418:	1a98      	subcs	r0, r3, r2
    return (handle->Size - (handle->Read_Index - handle->Write_Index ));
 800741a:	1a80      	subcc	r0, r0, r2
 800741c:	b280      	uxth	r0, r0
    }
 800741e:	4770      	bx	lr

08007420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007420:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007422:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <HAL_MspInit+0x34>)
 8007424:	2100      	movs	r1, #0
 8007426:	9100      	str	r1, [sp, #0]
 8007428:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800742a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800742e:	645a      	str	r2, [r3, #68]	; 0x44
 8007430:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007432:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8007436:	9200      	str	r2, [sp, #0]
 8007438:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800743a:	9101      	str	r1, [sp, #4]
 800743c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800743e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007442:	641a      	str	r2, [r3, #64]	; 0x40
 8007444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800744a:	9301      	str	r3, [sp, #4]
 800744c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800744e:	b002      	add	sp, #8
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop
 8007454:	40023800 	.word	0x40023800

08007458 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop

0800745c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800745c:	e7fe      	b.n	800745c <HardFault_Handler>
 800745e:	bf00      	nop

08007460 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007460:	e7fe      	b.n	8007460 <MemManage_Handler>
 8007462:	bf00      	nop

08007464 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007464:	e7fe      	b.n	8007464 <BusFault_Handler>
 8007466:	bf00      	nop

08007468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007468:	e7fe      	b.n	8007468 <UsageFault_Handler>
 800746a:	bf00      	nop

0800746c <SVC_Handler>:
 800746c:	4770      	bx	lr
 800746e:	bf00      	nop

08007470 <DebugMon_Handler>:
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop

08007474 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007474:	2001      	movs	r0, #1
 8007476:	f7fa ba9f 	b.w	80019b8 <HAL_GPIO_EXTI_IRQHandler>
 800747a:	bf00      	nop

0800747c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 800747c:	2002      	movs	r0, #2
 800747e:	f7fa ba9b 	b.w	80019b8 <HAL_GPIO_EXTI_IRQHandler>
 8007482:	bf00      	nop

08007484 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007484:	4801      	ldr	r0, [pc, #4]	; (800748c <DMA1_Stream5_IRQHandler+0x8>)
 8007486:	f7fa b83f 	b.w	8001508 <HAL_DMA_IRQHandler>
 800748a:	bf00      	nop
 800748c:	20002de8 	.word	0x20002de8

08007490 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007490:	4801      	ldr	r0, [pc, #4]	; (8007498 <DMA1_Stream6_IRQHandler+0x8>)
 8007492:	f7fa b839 	b.w	8001508 <HAL_DMA_IRQHandler>
 8007496:	bf00      	nop
 8007498:	20002e48 	.word	0x20002e48

0800749c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800749c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800749e:	4803      	ldr	r0, [pc, #12]	; (80074ac <USART2_IRQHandler+0x10>)
 80074a0:	f7fb f986 	bl	80027b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  CLI_UART_RX_ISR();
  /* USER CODE END USART2_IRQn 1 */
}
 80074a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  CLI_UART_RX_ISR();
 80074a8:	f7fe bbaa 	b.w	8005c00 <CLI_UART_RX_ISR>
 80074ac:	20002ea8 	.word	0x20002ea8

080074b0 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80074b0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80074b4:	f7fa ba80 	b.w	80019b8 <HAL_GPIO_EXTI_IRQHandler>

080074b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80074b8:	4910      	ldr	r1, [pc, #64]	; (80074fc <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80074ba:	4b11      	ldr	r3, [pc, #68]	; (8007500 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80074bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80074c0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 80074c4:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80074c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 80074ca:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80074cc:	4c0d      	ldr	r4, [pc, #52]	; (8007504 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 80074ce:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80074d0:	f042 0201 	orr.w	r2, r2, #1
 80074d4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80074d6:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80074de:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80074e2:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 80074e4:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80074e6:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80074e8:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80074ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80074f0:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 80074f2:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80074f4:	608c      	str	r4, [r1, #8]
#endif
}
 80074f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074fa:	4770      	bx	lr
 80074fc:	e000ed00 	.word	0xe000ed00
 8007500:	40023800 	.word	0x40023800
 8007504:	24003010 	.word	0x24003010

08007508 <StartupTask>:

extern UART_HandleTypeDef huart2;


static  void  StartupTask (void *p_arg)
{
 8007508:	b500      	push	{lr}
 800750a:	b085      	sub	sp, #20


   (void)p_arg;

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800750c:	f7f9 fd6a 	bl	8000fe4 <HAL_Init>

   /* Configure the system clock */
   SystemClock_Config();
 8007510:	f7fe fc7c 	bl	8005e0c <SystemClock_Config>

   /*config systic to generate tick interrupt*/
   HAL_SYSTICK_Config(SystemCoreClock /OS_CFG_TICK_RATE_HZ);
 8007514:	4a13      	ldr	r2, [pc, #76]	; (8007564 <StartupTask+0x5c>)
 8007516:	4b14      	ldr	r3, [pc, #80]	; (8007568 <StartupTask+0x60>)
 8007518:	6810      	ldr	r0, [r2, #0]
   MX_USART2_UART_Init();

   CLI_UART_Thread_Add();

    while (DEF_TRUE) {                                          /* Task body, always written as an infinite loop.       */
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800751a:	4e14      	ldr	r6, [pc, #80]	; (800756c <StartupTask+0x64>)
   HAL_SYSTICK_Config(SystemCoreClock /OS_CFG_TICK_RATE_HZ);
 800751c:	fba3 3000 	umull	r3, r0, r3, r0
 8007520:	0980      	lsrs	r0, r0, #6
 8007522:	f7f9 fdf5 	bl	8001110 <HAL_SYSTICK_Config>
   HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0U);
 8007526:	2200      	movs	r2, #0
 8007528:	4611      	mov	r1, r2
 800752a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800752e:	f7f9 fd95 	bl	800105c <HAL_NVIC_SetPriority>
   MX_GPIO_Init();
 8007532:	f7fe fbb3 	bl	8005c9c <MX_GPIO_Init>
   MX_DMA_Init();
 8007536:	f7fe fb8d 	bl	8005c54 <MX_DMA_Init>
   MX_USART2_UART_Init();
 800753a:	f000 f84d 	bl	80075d8 <MX_USART2_UART_Init>
   CLI_UART_Thread_Add();
 800753e:	f7fe fa19 	bl	8005974 <CLI_UART_Thread_Add>
 8007542:	f10d 050e 	add.w	r5, sp, #14
        OSTimeDlyHMSM(0u, 0u, 0u, 100u,
 8007546:	2400      	movs	r4, #0
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8007548:	4630      	mov	r0, r6
 800754a:	2120      	movs	r1, #32
 800754c:	f7fa fa1c 	bl	8001988 <HAL_GPIO_TogglePin>
        OSTimeDlyHMSM(0u, 0u, 0u, 100u,
 8007550:	2200      	movs	r2, #0
 8007552:	e9cd 4500 	strd	r4, r5, [sp]
 8007556:	4611      	mov	r1, r2
 8007558:	4610      	mov	r0, r2
 800755a:	2364      	movs	r3, #100	; 0x64
 800755c:	f7fd fa94 	bl	8004a88 <OSTimeDlyHMSM>
 8007560:	e7f2      	b.n	8007548 <StartupTask+0x40>
 8007562:	bf00      	nop
 8007564:	2000007c 	.word	0x2000007c
 8007568:	10624dd3 	.word	0x10624dd3
 800756c:	40020000 	.word	0x40020000

08007570 <ucos_main>:
{
 8007570:	b500      	push	{lr}
 8007572:	b08d      	sub	sp, #52	; 0x34
    OSInit(&os_err);                                            /* Initialize uC/OS-III                                 */
 8007574:	f10d 042e 	add.w	r4, sp, #46	; 0x2e
    Mem_Init();                                                 /* Initialize Memory Managment Module                   */
 8007578:	f7fb fa20 	bl	80029bc <Mem_Init>
    CPU_IntDis();                                               /* Disable all Interrupts                               */
 800757c:	f7f8 fe2c 	bl	80001d8 <CPU_IntDis>
    CPU_Init();                                                 /* Initialize the uC/CPU services                       */
 8007580:	f7fb fa00 	bl	8002984 <CPU_Init>
    OSInit(&os_err);                                            /* Initialize uC/OS-III                                 */
 8007584:	4620      	mov	r0, r4
 8007586:	f7fb fd23 	bl	8002fd0 <OSInit>
    if (os_err != OS_ERR_NONE) {
 800758a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 800758e:	b103      	cbz	r3, 8007592 <ucos_main+0x22>
 8007590:	e7fe      	b.n	8007590 <ucos_main+0x20>
    OSTaskCreate(&StartupTaskTCB,                               /* Create the startup task                              */
 8007592:	490d      	ldr	r1, [pc, #52]	; (80075c8 <ucos_main+0x58>)
 8007594:	9408      	str	r4, [sp, #32]
 8007596:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8007598:	9306      	str	r3, [sp, #24]
 800759a:	2203      	movs	r2, #3
 800759c:	2080      	movs	r0, #128	; 0x80
 800759e:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80075a2:	e9cd 1501 	strd	r1, r5, [sp, #4]
 80075a6:	9207      	str	r2, [sp, #28]
 80075a8:	9200      	str	r2, [sp, #0]
 80075aa:	9003      	str	r0, [sp, #12]
 80075ac:	4a07      	ldr	r2, [pc, #28]	; (80075cc <ucos_main+0x5c>)
 80075ae:	4908      	ldr	r1, [pc, #32]	; (80075d0 <ucos_main+0x60>)
 80075b0:	4808      	ldr	r0, [pc, #32]	; (80075d4 <ucos_main+0x64>)
 80075b2:	f7fc fd31 	bl	8004018 <OSTaskCreate>
    if (os_err != OS_ERR_NONE) {
 80075b6:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 80075ba:	b103      	cbz	r3, 80075be <ucos_main+0x4e>
 80075bc:	e7fe      	b.n	80075bc <ucos_main+0x4c>
    OSStart(&os_err);                                           /* Start multitasking (i.e. give control to uC/OS-III)  */
 80075be:	4620      	mov	r0, r4
 80075c0:	f7fb fcae 	bl	8002f20 <OSStart>
 80075c4:	e7fe      	b.n	80075c4 <ucos_main+0x54>
 80075c6:	bf00      	nop
 80075c8:	20001610 	.word	0x20001610
 80075cc:	08007509 	.word	0x08007509
 80075d0:	08009098 	.word	0x08009098
 80075d4:	20001810 	.word	0x20001810

080075d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 80075d8:	4b0b      	ldr	r3, [pc, #44]	; (8007608 <MX_USART2_UART_Init+0x30>)
 80075da:	4a0c      	ldr	r2, [pc, #48]	; (800760c <MX_USART2_UART_Init+0x34>)
{
 80075dc:	b510      	push	{r4, lr}
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80075de:	210c      	movs	r1, #12
  huart2.Instance = USART2;
 80075e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80075e2:	f44f 4416 	mov.w	r4, #38400	; 0x9600
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80075e6:	2200      	movs	r2, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80075e8:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 38400;
 80075ea:	605c      	str	r4, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80075ec:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80075ee:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 80075f2:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80075f4:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80075f8:	f7fa fd94 	bl	8002124 <HAL_UART_Init>
 80075fc:	b900      	cbnz	r0, 8007600 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 80075fe:	bd10      	pop	{r4, pc}
 8007600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8007604:	f7fe bc5a 	b.w	8005ebc <Error_Handler>
 8007608:	20002ea8 	.word	0x20002ea8
 800760c:	40004400 	.word	0x40004400

08007610 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007610:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8007612:	6802      	ldr	r2, [r0, #0]
 8007614:	4b38      	ldr	r3, [pc, #224]	; (80076f8 <HAL_UART_MspInit+0xe8>)
{
 8007616:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007618:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 800761a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800761c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8007620:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8007624:	9407      	str	r4, [sp, #28]
  if(uartHandle->Instance==USART2)
 8007626:	d001      	beq.n	800762c <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007628:	b008      	add	sp, #32
 800762a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800762c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8007630:	9401      	str	r4, [sp, #4]
 8007632:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007634:	4d31      	ldr	r5, [pc, #196]	; (80076fc <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8007636:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800763a:	641a      	str	r2, [r3, #64]	; 0x40
 800763c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800763e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007642:	9201      	str	r2, [sp, #4]
 8007644:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007646:	9402      	str	r4, [sp, #8]
 8007648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800764a:	f042 0201 	orr.w	r2, r2, #1
 800764e:	631a      	str	r2, [r3, #48]	; 0x30
 8007650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007652:	f003 0301 	and.w	r3, r3, #1
 8007656:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007658:	230c      	movs	r3, #12
 800765a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800765c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800765e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007660:	9304      	str	r3, [sp, #16]
 8007662:	4606      	mov	r6, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007664:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007666:	4826      	ldr	r0, [pc, #152]	; (8007700 <HAL_UART_MspInit+0xf0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007668:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800766a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800766c:	f7fa f822 	bl	80016b4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007670:	4b24      	ldr	r3, [pc, #144]	; (8007704 <HAL_UART_MspInit+0xf4>)
 8007672:	602b      	str	r3, [r5, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007674:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007678:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800767c:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007684:	6068      	str	r0, [r5, #4]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007686:	4628      	mov	r0, r5
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007688:	60ac      	str	r4, [r5, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800768a:	60ec      	str	r4, [r5, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800768c:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007690:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007692:	6129      	str	r1, [r5, #16]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007694:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007698:	f7f9 fd54 	bl	8001144 <HAL_DMA_Init>
 800769c:	bb28      	cbnz	r0, 80076ea <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800769e:	4c1a      	ldr	r4, [pc, #104]	; (8007708 <HAL_UART_MspInit+0xf8>)
 80076a0:	4a1a      	ldr	r2, [pc, #104]	; (800770c <HAL_UART_MspInit+0xfc>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80076a2:	6375      	str	r5, [r6, #52]	; 0x34
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80076a4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80076a8:	2340      	movs	r3, #64	; 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80076aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80076ae:	6022      	str	r2, [r4, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80076b0:	6060      	str	r0, [r4, #4]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80076b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80076b6:	60a3      	str	r3, [r4, #8]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80076b8:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076ba:	2300      	movs	r3, #0
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80076bc:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80076be:	6121      	str	r1, [r4, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80076c0:	6222      	str	r2, [r4, #32]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80076c2:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80076c4:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80076c8:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80076ca:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80076cc:	f7f9 fd3a 	bl	8001144 <HAL_DMA_Init>
 80076d0:	b970      	cbnz	r0, 80076f0 <HAL_UART_MspInit+0xe0>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80076d2:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80076d4:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80076d6:	4611      	mov	r1, r2
 80076d8:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80076da:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80076dc:	f7f9 fcbe 	bl	800105c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80076e0:	2026      	movs	r0, #38	; 0x26
 80076e2:	f7f9 fd01 	bl	80010e8 <HAL_NVIC_EnableIRQ>
}
 80076e6:	b008      	add	sp, #32
 80076e8:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80076ea:	f7fe fbe7 	bl	8005ebc <Error_Handler>
 80076ee:	e7d6      	b.n	800769e <HAL_UART_MspInit+0x8e>
      Error_Handler();
 80076f0:	f7fe fbe4 	bl	8005ebc <Error_Handler>
 80076f4:	e7ed      	b.n	80076d2 <HAL_UART_MspInit+0xc2>
 80076f6:	bf00      	nop
 80076f8:	40004400 	.word	0x40004400
 80076fc:	20002de8 	.word	0x20002de8
 8007700:	40020000 	.word	0x40020000
 8007704:	40026088 	.word	0x40026088
 8007708:	20002e48 	.word	0x20002e48
 800770c:	400260a0 	.word	0x400260a0

08007710 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007710:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007748 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007714:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007716:	e003      	b.n	8007720 <LoopCopyDataInit>

08007718 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007718:	4b0c      	ldr	r3, [pc, #48]	; (800774c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800771a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800771c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800771e:	3104      	adds	r1, #4

08007720 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007720:	480b      	ldr	r0, [pc, #44]	; (8007750 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007722:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007724:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007726:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007728:	d3f6      	bcc.n	8007718 <CopyDataInit>
  ldr  r2, =_sbss
 800772a:	4a0b      	ldr	r2, [pc, #44]	; (8007758 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800772c:	e002      	b.n	8007734 <LoopFillZerobss>

0800772e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800772e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007730:	f842 3b04 	str.w	r3, [r2], #4

08007734 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007734:	4b09      	ldr	r3, [pc, #36]	; (800775c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007736:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007738:	d3f9      	bcc.n	800772e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800773a:	f7ff febd 	bl	80074b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800773e:	f000 f81b 	bl	8007778 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007742:	f7fe fbad 	bl	8005ea0 <main>
  bx  lr    
 8007746:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007748:	20017fff 	.word	0x20017fff
  ldr  r3, =_sidata
 800774c:	08009214 	.word	0x08009214
  ldr  r0, =_sdata
 8007750:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007754:	20000624 	.word	0x20000624
  ldr  r2, =_sbss
 8007758:	20000624 	.word	0x20000624
  ldr  r3, = _ebss
 800775c:	20002ef4 	.word	0x20002ef4

08007760 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007760:	e7fe      	b.n	8007760 <ADC_IRQHandler>

08007762 <atoi>:
 8007762:	220a      	movs	r2, #10
 8007764:	2100      	movs	r1, #0
 8007766:	f000 b8e9 	b.w	800793c <strtol>
	...

0800776c <__errno>:
 800776c:	4b01      	ldr	r3, [pc, #4]	; (8007774 <__errno+0x8>)
 800776e:	6818      	ldr	r0, [r3, #0]
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	20000080 	.word	0x20000080

08007778 <__libc_init_array>:
 8007778:	b570      	push	{r4, r5, r6, lr}
 800777a:	4e0d      	ldr	r6, [pc, #52]	; (80077b0 <__libc_init_array+0x38>)
 800777c:	4c0d      	ldr	r4, [pc, #52]	; (80077b4 <__libc_init_array+0x3c>)
 800777e:	1ba4      	subs	r4, r4, r6
 8007780:	10a4      	asrs	r4, r4, #2
 8007782:	2500      	movs	r5, #0
 8007784:	42a5      	cmp	r5, r4
 8007786:	d109      	bne.n	800779c <__libc_init_array+0x24>
 8007788:	4e0b      	ldr	r6, [pc, #44]	; (80077b8 <__libc_init_array+0x40>)
 800778a:	4c0c      	ldr	r4, [pc, #48]	; (80077bc <__libc_init_array+0x44>)
 800778c:	f001 fa3a 	bl	8008c04 <_init>
 8007790:	1ba4      	subs	r4, r4, r6
 8007792:	10a4      	asrs	r4, r4, #2
 8007794:	2500      	movs	r5, #0
 8007796:	42a5      	cmp	r5, r4
 8007798:	d105      	bne.n	80077a6 <__libc_init_array+0x2e>
 800779a:	bd70      	pop	{r4, r5, r6, pc}
 800779c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077a0:	4798      	blx	r3
 80077a2:	3501      	adds	r5, #1
 80077a4:	e7ee      	b.n	8007784 <__libc_init_array+0xc>
 80077a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80077aa:	4798      	blx	r3
 80077ac:	3501      	adds	r5, #1
 80077ae:	e7f2      	b.n	8007796 <__libc_init_array+0x1e>
 80077b0:	08009208 	.word	0x08009208
 80077b4:	08009208 	.word	0x08009208
 80077b8:	08009208 	.word	0x08009208
 80077bc:	08009210 	.word	0x08009210

080077c0 <memcpy>:
 80077c0:	b510      	push	{r4, lr}
 80077c2:	1e43      	subs	r3, r0, #1
 80077c4:	440a      	add	r2, r1
 80077c6:	4291      	cmp	r1, r2
 80077c8:	d100      	bne.n	80077cc <memcpy+0xc>
 80077ca:	bd10      	pop	{r4, pc}
 80077cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077d0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077d4:	e7f7      	b.n	80077c6 <memcpy+0x6>

080077d6 <memset>:
 80077d6:	4402      	add	r2, r0
 80077d8:	4603      	mov	r3, r0
 80077da:	4293      	cmp	r3, r2
 80077dc:	d100      	bne.n	80077e0 <memset+0xa>
 80077de:	4770      	bx	lr
 80077e0:	f803 1b01 	strb.w	r1, [r3], #1
 80077e4:	e7f9      	b.n	80077da <memset+0x4>

080077e6 <stpcpy>:
 80077e6:	4603      	mov	r3, r0
 80077e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ec:	4618      	mov	r0, r3
 80077ee:	f803 2b01 	strb.w	r2, [r3], #1
 80077f2:	2a00      	cmp	r2, #0
 80077f4:	d1f8      	bne.n	80077e8 <stpcpy+0x2>
 80077f6:	4770      	bx	lr

080077f8 <strncmp>:
 80077f8:	b510      	push	{r4, lr}
 80077fa:	b16a      	cbz	r2, 8007818 <strncmp+0x20>
 80077fc:	3901      	subs	r1, #1
 80077fe:	1884      	adds	r4, r0, r2
 8007800:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007804:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007808:	4293      	cmp	r3, r2
 800780a:	d103      	bne.n	8007814 <strncmp+0x1c>
 800780c:	42a0      	cmp	r0, r4
 800780e:	d001      	beq.n	8007814 <strncmp+0x1c>
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1f5      	bne.n	8007800 <strncmp+0x8>
 8007814:	1a98      	subs	r0, r3, r2
 8007816:	bd10      	pop	{r4, pc}
 8007818:	4610      	mov	r0, r2
 800781a:	e7fc      	b.n	8007816 <strncmp+0x1e>

0800781c <strncpy>:
 800781c:	b570      	push	{r4, r5, r6, lr}
 800781e:	3901      	subs	r1, #1
 8007820:	4604      	mov	r4, r0
 8007822:	b902      	cbnz	r2, 8007826 <strncpy+0xa>
 8007824:	bd70      	pop	{r4, r5, r6, pc}
 8007826:	4623      	mov	r3, r4
 8007828:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 800782c:	f803 5b01 	strb.w	r5, [r3], #1
 8007830:	1e56      	subs	r6, r2, #1
 8007832:	b92d      	cbnz	r5, 8007840 <strncpy+0x24>
 8007834:	4414      	add	r4, r2
 8007836:	42a3      	cmp	r3, r4
 8007838:	d0f4      	beq.n	8007824 <strncpy+0x8>
 800783a:	f803 5b01 	strb.w	r5, [r3], #1
 800783e:	e7fa      	b.n	8007836 <strncpy+0x1a>
 8007840:	461c      	mov	r4, r3
 8007842:	4632      	mov	r2, r6
 8007844:	e7ed      	b.n	8007822 <strncpy+0x6>

08007846 <_strtol_l.isra.0>:
 8007846:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800784a:	4680      	mov	r8, r0
 800784c:	4689      	mov	r9, r1
 800784e:	4692      	mov	sl, r2
 8007850:	461e      	mov	r6, r3
 8007852:	460f      	mov	r7, r1
 8007854:	463d      	mov	r5, r7
 8007856:	9808      	ldr	r0, [sp, #32]
 8007858:	f815 4b01 	ldrb.w	r4, [r5], #1
 800785c:	f000 f8a8 	bl	80079b0 <__locale_ctype_ptr_l>
 8007860:	4420      	add	r0, r4
 8007862:	7843      	ldrb	r3, [r0, #1]
 8007864:	f013 0308 	ands.w	r3, r3, #8
 8007868:	d132      	bne.n	80078d0 <_strtol_l.isra.0+0x8a>
 800786a:	2c2d      	cmp	r4, #45	; 0x2d
 800786c:	d132      	bne.n	80078d4 <_strtol_l.isra.0+0x8e>
 800786e:	787c      	ldrb	r4, [r7, #1]
 8007870:	1cbd      	adds	r5, r7, #2
 8007872:	2201      	movs	r2, #1
 8007874:	2e00      	cmp	r6, #0
 8007876:	d05d      	beq.n	8007934 <_strtol_l.isra.0+0xee>
 8007878:	2e10      	cmp	r6, #16
 800787a:	d109      	bne.n	8007890 <_strtol_l.isra.0+0x4a>
 800787c:	2c30      	cmp	r4, #48	; 0x30
 800787e:	d107      	bne.n	8007890 <_strtol_l.isra.0+0x4a>
 8007880:	782b      	ldrb	r3, [r5, #0]
 8007882:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007886:	2b58      	cmp	r3, #88	; 0x58
 8007888:	d14f      	bne.n	800792a <_strtol_l.isra.0+0xe4>
 800788a:	786c      	ldrb	r4, [r5, #1]
 800788c:	2610      	movs	r6, #16
 800788e:	3502      	adds	r5, #2
 8007890:	2a00      	cmp	r2, #0
 8007892:	bf14      	ite	ne
 8007894:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007898:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800789c:	2700      	movs	r7, #0
 800789e:	fbb1 fcf6 	udiv	ip, r1, r6
 80078a2:	4638      	mov	r0, r7
 80078a4:	fb06 1e1c 	mls	lr, r6, ip, r1
 80078a8:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80078ac:	2b09      	cmp	r3, #9
 80078ae:	d817      	bhi.n	80078e0 <_strtol_l.isra.0+0x9a>
 80078b0:	461c      	mov	r4, r3
 80078b2:	42a6      	cmp	r6, r4
 80078b4:	dd23      	ble.n	80078fe <_strtol_l.isra.0+0xb8>
 80078b6:	1c7b      	adds	r3, r7, #1
 80078b8:	d007      	beq.n	80078ca <_strtol_l.isra.0+0x84>
 80078ba:	4584      	cmp	ip, r0
 80078bc:	d31c      	bcc.n	80078f8 <_strtol_l.isra.0+0xb2>
 80078be:	d101      	bne.n	80078c4 <_strtol_l.isra.0+0x7e>
 80078c0:	45a6      	cmp	lr, r4
 80078c2:	db19      	blt.n	80078f8 <_strtol_l.isra.0+0xb2>
 80078c4:	fb00 4006 	mla	r0, r0, r6, r4
 80078c8:	2701      	movs	r7, #1
 80078ca:	f815 4b01 	ldrb.w	r4, [r5], #1
 80078ce:	e7eb      	b.n	80078a8 <_strtol_l.isra.0+0x62>
 80078d0:	462f      	mov	r7, r5
 80078d2:	e7bf      	b.n	8007854 <_strtol_l.isra.0+0xe>
 80078d4:	2c2b      	cmp	r4, #43	; 0x2b
 80078d6:	bf04      	itt	eq
 80078d8:	1cbd      	addeq	r5, r7, #2
 80078da:	787c      	ldrbeq	r4, [r7, #1]
 80078dc:	461a      	mov	r2, r3
 80078de:	e7c9      	b.n	8007874 <_strtol_l.isra.0+0x2e>
 80078e0:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80078e4:	2b19      	cmp	r3, #25
 80078e6:	d801      	bhi.n	80078ec <_strtol_l.isra.0+0xa6>
 80078e8:	3c37      	subs	r4, #55	; 0x37
 80078ea:	e7e2      	b.n	80078b2 <_strtol_l.isra.0+0x6c>
 80078ec:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80078f0:	2b19      	cmp	r3, #25
 80078f2:	d804      	bhi.n	80078fe <_strtol_l.isra.0+0xb8>
 80078f4:	3c57      	subs	r4, #87	; 0x57
 80078f6:	e7dc      	b.n	80078b2 <_strtol_l.isra.0+0x6c>
 80078f8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80078fc:	e7e5      	b.n	80078ca <_strtol_l.isra.0+0x84>
 80078fe:	1c7b      	adds	r3, r7, #1
 8007900:	d108      	bne.n	8007914 <_strtol_l.isra.0+0xce>
 8007902:	2322      	movs	r3, #34	; 0x22
 8007904:	f8c8 3000 	str.w	r3, [r8]
 8007908:	4608      	mov	r0, r1
 800790a:	f1ba 0f00 	cmp.w	sl, #0
 800790e:	d107      	bne.n	8007920 <_strtol_l.isra.0+0xda>
 8007910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007914:	b102      	cbz	r2, 8007918 <_strtol_l.isra.0+0xd2>
 8007916:	4240      	negs	r0, r0
 8007918:	f1ba 0f00 	cmp.w	sl, #0
 800791c:	d0f8      	beq.n	8007910 <_strtol_l.isra.0+0xca>
 800791e:	b10f      	cbz	r7, 8007924 <_strtol_l.isra.0+0xde>
 8007920:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8007924:	f8ca 9000 	str.w	r9, [sl]
 8007928:	e7f2      	b.n	8007910 <_strtol_l.isra.0+0xca>
 800792a:	2430      	movs	r4, #48	; 0x30
 800792c:	2e00      	cmp	r6, #0
 800792e:	d1af      	bne.n	8007890 <_strtol_l.isra.0+0x4a>
 8007930:	2608      	movs	r6, #8
 8007932:	e7ad      	b.n	8007890 <_strtol_l.isra.0+0x4a>
 8007934:	2c30      	cmp	r4, #48	; 0x30
 8007936:	d0a3      	beq.n	8007880 <_strtol_l.isra.0+0x3a>
 8007938:	260a      	movs	r6, #10
 800793a:	e7a9      	b.n	8007890 <_strtol_l.isra.0+0x4a>

0800793c <strtol>:
 800793c:	4b08      	ldr	r3, [pc, #32]	; (8007960 <strtol+0x24>)
 800793e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007940:	681c      	ldr	r4, [r3, #0]
 8007942:	4d08      	ldr	r5, [pc, #32]	; (8007964 <strtol+0x28>)
 8007944:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007946:	2b00      	cmp	r3, #0
 8007948:	bf08      	it	eq
 800794a:	462b      	moveq	r3, r5
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	4613      	mov	r3, r2
 8007950:	460a      	mov	r2, r1
 8007952:	4601      	mov	r1, r0
 8007954:	4620      	mov	r0, r4
 8007956:	f7ff ff76 	bl	8007846 <_strtol_l.isra.0>
 800795a:	b003      	add	sp, #12
 800795c:	bd30      	pop	{r4, r5, pc}
 800795e:	bf00      	nop
 8007960:	20000080 	.word	0x20000080
 8007964:	200004b4 	.word	0x200004b4

08007968 <register_fini>:
 8007968:	4b02      	ldr	r3, [pc, #8]	; (8007974 <register_fini+0xc>)
 800796a:	b113      	cbz	r3, 8007972 <register_fini+0xa>
 800796c:	4802      	ldr	r0, [pc, #8]	; (8007978 <register_fini+0x10>)
 800796e:	f000 b805 	b.w	800797c <atexit>
 8007972:	4770      	bx	lr
 8007974:	00000000 	.word	0x00000000
 8007978:	08007989 	.word	0x08007989

0800797c <atexit>:
 800797c:	2300      	movs	r3, #0
 800797e:	4601      	mov	r1, r0
 8007980:	461a      	mov	r2, r3
 8007982:	4618      	mov	r0, r3
 8007984:	f000 b838 	b.w	80079f8 <__register_exitproc>

08007988 <__libc_fini_array>:
 8007988:	b538      	push	{r3, r4, r5, lr}
 800798a:	4d07      	ldr	r5, [pc, #28]	; (80079a8 <__libc_fini_array+0x20>)
 800798c:	4c07      	ldr	r4, [pc, #28]	; (80079ac <__libc_fini_array+0x24>)
 800798e:	1b64      	subs	r4, r4, r5
 8007990:	10a4      	asrs	r4, r4, #2
 8007992:	b91c      	cbnz	r4, 800799c <__libc_fini_array+0x14>
 8007994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007998:	f001 b93a 	b.w	8008c10 <_fini>
 800799c:	3c01      	subs	r4, #1
 800799e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80079a2:	4798      	blx	r3
 80079a4:	e7f5      	b.n	8007992 <__libc_fini_array+0xa>
 80079a6:	bf00      	nop
 80079a8:	08009210 	.word	0x08009210
 80079ac:	08009214 	.word	0x08009214

080079b0 <__locale_ctype_ptr_l>:
 80079b0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80079b4:	4770      	bx	lr

080079b6 <__retarget_lock_acquire_recursive>:
 80079b6:	4770      	bx	lr

080079b8 <__retarget_lock_release_recursive>:
 80079b8:	4770      	bx	lr

080079ba <__ascii_mbtowc>:
 80079ba:	b082      	sub	sp, #8
 80079bc:	b901      	cbnz	r1, 80079c0 <__ascii_mbtowc+0x6>
 80079be:	a901      	add	r1, sp, #4
 80079c0:	b142      	cbz	r2, 80079d4 <__ascii_mbtowc+0x1a>
 80079c2:	b14b      	cbz	r3, 80079d8 <__ascii_mbtowc+0x1e>
 80079c4:	7813      	ldrb	r3, [r2, #0]
 80079c6:	600b      	str	r3, [r1, #0]
 80079c8:	7812      	ldrb	r2, [r2, #0]
 80079ca:	1c10      	adds	r0, r2, #0
 80079cc:	bf18      	it	ne
 80079ce:	2001      	movne	r0, #1
 80079d0:	b002      	add	sp, #8
 80079d2:	4770      	bx	lr
 80079d4:	4610      	mov	r0, r2
 80079d6:	e7fb      	b.n	80079d0 <__ascii_mbtowc+0x16>
 80079d8:	f06f 0001 	mvn.w	r0, #1
 80079dc:	e7f8      	b.n	80079d0 <__ascii_mbtowc+0x16>

080079de <__ascii_wctomb>:
 80079de:	b149      	cbz	r1, 80079f4 <__ascii_wctomb+0x16>
 80079e0:	2aff      	cmp	r2, #255	; 0xff
 80079e2:	bf85      	ittet	hi
 80079e4:	238a      	movhi	r3, #138	; 0x8a
 80079e6:	6003      	strhi	r3, [r0, #0]
 80079e8:	700a      	strbls	r2, [r1, #0]
 80079ea:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80079ee:	bf98      	it	ls
 80079f0:	2001      	movls	r0, #1
 80079f2:	4770      	bx	lr
 80079f4:	4608      	mov	r0, r1
 80079f6:	4770      	bx	lr

080079f8 <__register_exitproc>:
 80079f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079fc:	4c26      	ldr	r4, [pc, #152]	; (8007a98 <__register_exitproc+0xa0>)
 80079fe:	4606      	mov	r6, r0
 8007a00:	6820      	ldr	r0, [r4, #0]
 8007a02:	4698      	mov	r8, r3
 8007a04:	460f      	mov	r7, r1
 8007a06:	4691      	mov	r9, r2
 8007a08:	f7ff ffd5 	bl	80079b6 <__retarget_lock_acquire_recursive>
 8007a0c:	4b23      	ldr	r3, [pc, #140]	; (8007a9c <__register_exitproc+0xa4>)
 8007a0e:	681d      	ldr	r5, [r3, #0]
 8007a10:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8007a14:	b918      	cbnz	r0, 8007a1e <__register_exitproc+0x26>
 8007a16:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8007a1a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8007a1e:	6843      	ldr	r3, [r0, #4]
 8007a20:	2b1f      	cmp	r3, #31
 8007a22:	dd19      	ble.n	8007a58 <__register_exitproc+0x60>
 8007a24:	4b1e      	ldr	r3, [pc, #120]	; (8007aa0 <__register_exitproc+0xa8>)
 8007a26:	b933      	cbnz	r3, 8007a36 <__register_exitproc+0x3e>
 8007a28:	6820      	ldr	r0, [r4, #0]
 8007a2a:	f7ff ffc5 	bl	80079b8 <__retarget_lock_release_recursive>
 8007a2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a36:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8007a3a:	f3af 8000 	nop.w
 8007a3e:	2800      	cmp	r0, #0
 8007a40:	d0f2      	beq.n	8007a28 <__register_exitproc+0x30>
 8007a42:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8007a46:	6003      	str	r3, [r0, #0]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	6042      	str	r2, [r0, #4]
 8007a4c:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8007a50:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8007a54:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8007a58:	6843      	ldr	r3, [r0, #4]
 8007a5a:	b19e      	cbz	r6, 8007a84 <__register_exitproc+0x8c>
 8007a5c:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8007a60:	2201      	movs	r2, #1
 8007a62:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8007a66:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8007a6a:	409a      	lsls	r2, r3
 8007a6c:	4311      	orrs	r1, r2
 8007a6e:	2e02      	cmp	r6, #2
 8007a70:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8007a74:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8007a78:	bf02      	ittt	eq
 8007a7a:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8007a7e:	430a      	orreq	r2, r1
 8007a80:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	3302      	adds	r3, #2
 8007a88:	6042      	str	r2, [r0, #4]
 8007a8a:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8007a8e:	6820      	ldr	r0, [r4, #0]
 8007a90:	f7ff ff92 	bl	80079b8 <__retarget_lock_release_recursive>
 8007a94:	2000      	movs	r0, #0
 8007a96:	e7cc      	b.n	8007a32 <__register_exitproc+0x3a>
 8007a98:	200004b0 	.word	0x200004b0
 8007a9c:	080090a8 	.word	0x080090a8
 8007aa0:	00000000 	.word	0x00000000

08007aa4 <pow>:
 8007aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa8:	ed2d 8b04 	vpush	{d8-d9}
 8007aac:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8007d80 <pow+0x2dc>
 8007ab0:	b08d      	sub	sp, #52	; 0x34
 8007ab2:	ec57 6b10 	vmov	r6, r7, d0
 8007ab6:	ec55 4b11 	vmov	r4, r5, d1
 8007aba:	f000 f9bd 	bl	8007e38 <__ieee754_pow>
 8007abe:	f999 3000 	ldrsb.w	r3, [r9]
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	eeb0 8a40 	vmov.f32	s16, s0
 8007aca:	eef0 8a60 	vmov.f32	s17, s1
 8007ace:	46c8      	mov	r8, r9
 8007ad0:	d05f      	beq.n	8007b92 <pow+0xee>
 8007ad2:	4622      	mov	r2, r4
 8007ad4:	462b      	mov	r3, r5
 8007ad6:	4620      	mov	r0, r4
 8007ad8:	4629      	mov	r1, r5
 8007ada:	f7f9 f881 	bl	8000be0 <__aeabi_dcmpun>
 8007ade:	4683      	mov	fp, r0
 8007ae0:	2800      	cmp	r0, #0
 8007ae2:	d156      	bne.n	8007b92 <pow+0xee>
 8007ae4:	4632      	mov	r2, r6
 8007ae6:	463b      	mov	r3, r7
 8007ae8:	4630      	mov	r0, r6
 8007aea:	4639      	mov	r1, r7
 8007aec:	f7f9 f878 	bl	8000be0 <__aeabi_dcmpun>
 8007af0:	9001      	str	r0, [sp, #4]
 8007af2:	b1e8      	cbz	r0, 8007b30 <pow+0x8c>
 8007af4:	2200      	movs	r2, #0
 8007af6:	2300      	movs	r3, #0
 8007af8:	4620      	mov	r0, r4
 8007afa:	4629      	mov	r1, r5
 8007afc:	f7f9 f83e 	bl	8000b7c <__aeabi_dcmpeq>
 8007b00:	2800      	cmp	r0, #0
 8007b02:	d046      	beq.n	8007b92 <pow+0xee>
 8007b04:	2301      	movs	r3, #1
 8007b06:	9302      	str	r3, [sp, #8]
 8007b08:	4b96      	ldr	r3, [pc, #600]	; (8007d64 <pow+0x2c0>)
 8007b0a:	9303      	str	r3, [sp, #12]
 8007b0c:	4b96      	ldr	r3, [pc, #600]	; (8007d68 <pow+0x2c4>)
 8007b0e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8007b12:	2200      	movs	r2, #0
 8007b14:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b18:	9b00      	ldr	r3, [sp, #0]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007b20:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007b24:	d033      	beq.n	8007b8e <pow+0xea>
 8007b26:	a802      	add	r0, sp, #8
 8007b28:	f000 ff55 	bl	80089d6 <matherr>
 8007b2c:	bb48      	cbnz	r0, 8007b82 <pow+0xde>
 8007b2e:	e05d      	b.n	8007bec <pow+0x148>
 8007b30:	f04f 0a00 	mov.w	sl, #0
 8007b34:	f04f 0b00 	mov.w	fp, #0
 8007b38:	4652      	mov	r2, sl
 8007b3a:	465b      	mov	r3, fp
 8007b3c:	4630      	mov	r0, r6
 8007b3e:	4639      	mov	r1, r7
 8007b40:	f7f9 f81c 	bl	8000b7c <__aeabi_dcmpeq>
 8007b44:	ec4b ab19 	vmov	d9, sl, fp
 8007b48:	2800      	cmp	r0, #0
 8007b4a:	d054      	beq.n	8007bf6 <pow+0x152>
 8007b4c:	4652      	mov	r2, sl
 8007b4e:	465b      	mov	r3, fp
 8007b50:	4620      	mov	r0, r4
 8007b52:	4629      	mov	r1, r5
 8007b54:	f7f9 f812 	bl	8000b7c <__aeabi_dcmpeq>
 8007b58:	4680      	mov	r8, r0
 8007b5a:	b318      	cbz	r0, 8007ba4 <pow+0x100>
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	9302      	str	r3, [sp, #8]
 8007b60:	4b80      	ldr	r3, [pc, #512]	; (8007d64 <pow+0x2c0>)
 8007b62:	9303      	str	r3, [sp, #12]
 8007b64:	9b01      	ldr	r3, [sp, #4]
 8007b66:	930a      	str	r3, [sp, #40]	; 0x28
 8007b68:	9b00      	ldr	r3, [sp, #0]
 8007b6a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007b6e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007b72:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d0d5      	beq.n	8007b26 <pow+0x82>
 8007b7a:	4b7b      	ldr	r3, [pc, #492]	; (8007d68 <pow+0x2c4>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007b82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b84:	b11b      	cbz	r3, 8007b8e <pow+0xea>
 8007b86:	f7ff fdf1 	bl	800776c <__errno>
 8007b8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b8c:	6003      	str	r3, [r0, #0]
 8007b8e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8007b92:	eeb0 0a48 	vmov.f32	s0, s16
 8007b96:	eef0 0a68 	vmov.f32	s1, s17
 8007b9a:	b00d      	add	sp, #52	; 0x34
 8007b9c:	ecbd 8b04 	vpop	{d8-d9}
 8007ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ba4:	ec45 4b10 	vmov	d0, r4, r5
 8007ba8:	f000 ff0d 	bl	80089c6 <finite>
 8007bac:	2800      	cmp	r0, #0
 8007bae:	d0f0      	beq.n	8007b92 <pow+0xee>
 8007bb0:	4652      	mov	r2, sl
 8007bb2:	465b      	mov	r3, fp
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	f7f8 ffea 	bl	8000b90 <__aeabi_dcmplt>
 8007bbc:	2800      	cmp	r0, #0
 8007bbe:	d0e8      	beq.n	8007b92 <pow+0xee>
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	9302      	str	r3, [sp, #8]
 8007bc4:	4b67      	ldr	r3, [pc, #412]	; (8007d64 <pow+0x2c0>)
 8007bc6:	9303      	str	r3, [sp, #12]
 8007bc8:	f999 3000 	ldrsb.w	r3, [r9]
 8007bcc:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8007bd0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007bd4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007bd8:	b913      	cbnz	r3, 8007be0 <pow+0x13c>
 8007bda:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007bde:	e7a2      	b.n	8007b26 <pow+0x82>
 8007be0:	4962      	ldr	r1, [pc, #392]	; (8007d6c <pow+0x2c8>)
 8007be2:	2000      	movs	r0, #0
 8007be4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d19c      	bne.n	8007b26 <pow+0x82>
 8007bec:	f7ff fdbe 	bl	800776c <__errno>
 8007bf0:	2321      	movs	r3, #33	; 0x21
 8007bf2:	6003      	str	r3, [r0, #0]
 8007bf4:	e7c5      	b.n	8007b82 <pow+0xde>
 8007bf6:	eeb0 0a48 	vmov.f32	s0, s16
 8007bfa:	eef0 0a68 	vmov.f32	s1, s17
 8007bfe:	f000 fee2 	bl	80089c6 <finite>
 8007c02:	9000      	str	r0, [sp, #0]
 8007c04:	2800      	cmp	r0, #0
 8007c06:	f040 8081 	bne.w	8007d0c <pow+0x268>
 8007c0a:	ec47 6b10 	vmov	d0, r6, r7
 8007c0e:	f000 feda 	bl	80089c6 <finite>
 8007c12:	2800      	cmp	r0, #0
 8007c14:	d07a      	beq.n	8007d0c <pow+0x268>
 8007c16:	ec45 4b10 	vmov	d0, r4, r5
 8007c1a:	f000 fed4 	bl	80089c6 <finite>
 8007c1e:	2800      	cmp	r0, #0
 8007c20:	d074      	beq.n	8007d0c <pow+0x268>
 8007c22:	ec53 2b18 	vmov	r2, r3, d8
 8007c26:	ee18 0a10 	vmov	r0, s16
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	f7f8 ffd8 	bl	8000be0 <__aeabi_dcmpun>
 8007c30:	f999 9000 	ldrsb.w	r9, [r9]
 8007c34:	4b4b      	ldr	r3, [pc, #300]	; (8007d64 <pow+0x2c0>)
 8007c36:	b1b0      	cbz	r0, 8007c66 <pow+0x1c2>
 8007c38:	2201      	movs	r2, #1
 8007c3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c3e:	9b00      	ldr	r3, [sp, #0]
 8007c40:	930a      	str	r3, [sp, #40]	; 0x28
 8007c42:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007c46:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007c4a:	f1b9 0f00 	cmp.w	r9, #0
 8007c4e:	d0c4      	beq.n	8007bda <pow+0x136>
 8007c50:	4652      	mov	r2, sl
 8007c52:	465b      	mov	r3, fp
 8007c54:	4650      	mov	r0, sl
 8007c56:	4659      	mov	r1, fp
 8007c58:	f7f8 fe52 	bl	8000900 <__aeabi_ddiv>
 8007c5c:	f1b9 0f02 	cmp.w	r9, #2
 8007c60:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007c64:	e7c1      	b.n	8007bea <pow+0x146>
 8007c66:	2203      	movs	r2, #3
 8007c68:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007c6c:	900a      	str	r0, [sp, #40]	; 0x28
 8007c6e:	4629      	mov	r1, r5
 8007c70:	4620      	mov	r0, r4
 8007c72:	2200      	movs	r2, #0
 8007c74:	4b3e      	ldr	r3, [pc, #248]	; (8007d70 <pow+0x2cc>)
 8007c76:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007c7a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007c7e:	f7f8 fd15 	bl	80006ac <__aeabi_dmul>
 8007c82:	4604      	mov	r4, r0
 8007c84:	460d      	mov	r5, r1
 8007c86:	f1b9 0f00 	cmp.w	r9, #0
 8007c8a:	d124      	bne.n	8007cd6 <pow+0x232>
 8007c8c:	4b39      	ldr	r3, [pc, #228]	; (8007d74 <pow+0x2d0>)
 8007c8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007c92:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007c96:	4630      	mov	r0, r6
 8007c98:	4652      	mov	r2, sl
 8007c9a:	465b      	mov	r3, fp
 8007c9c:	4639      	mov	r1, r7
 8007c9e:	f7f8 ff77 	bl	8000b90 <__aeabi_dcmplt>
 8007ca2:	2800      	cmp	r0, #0
 8007ca4:	d056      	beq.n	8007d54 <pow+0x2b0>
 8007ca6:	ec45 4b10 	vmov	d0, r4, r5
 8007caa:	f000 fea1 	bl	80089f0 <rint>
 8007cae:	4622      	mov	r2, r4
 8007cb0:	462b      	mov	r3, r5
 8007cb2:	ec51 0b10 	vmov	r0, r1, d0
 8007cb6:	f7f8 ff61 	bl	8000b7c <__aeabi_dcmpeq>
 8007cba:	b920      	cbnz	r0, 8007cc6 <pow+0x222>
 8007cbc:	4b2e      	ldr	r3, [pc, #184]	; (8007d78 <pow+0x2d4>)
 8007cbe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8007cc2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007cc6:	f998 3000 	ldrsb.w	r3, [r8]
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d142      	bne.n	8007d54 <pow+0x2b0>
 8007cce:	f7ff fd4d 	bl	800776c <__errno>
 8007cd2:	2322      	movs	r3, #34	; 0x22
 8007cd4:	e78d      	b.n	8007bf2 <pow+0x14e>
 8007cd6:	4b29      	ldr	r3, [pc, #164]	; (8007d7c <pow+0x2d8>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007cde:	4630      	mov	r0, r6
 8007ce0:	4652      	mov	r2, sl
 8007ce2:	465b      	mov	r3, fp
 8007ce4:	4639      	mov	r1, r7
 8007ce6:	f7f8 ff53 	bl	8000b90 <__aeabi_dcmplt>
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d0eb      	beq.n	8007cc6 <pow+0x222>
 8007cee:	ec45 4b10 	vmov	d0, r4, r5
 8007cf2:	f000 fe7d 	bl	80089f0 <rint>
 8007cf6:	4622      	mov	r2, r4
 8007cf8:	462b      	mov	r3, r5
 8007cfa:	ec51 0b10 	vmov	r0, r1, d0
 8007cfe:	f7f8 ff3d 	bl	8000b7c <__aeabi_dcmpeq>
 8007d02:	2800      	cmp	r0, #0
 8007d04:	d1df      	bne.n	8007cc6 <pow+0x222>
 8007d06:	2200      	movs	r2, #0
 8007d08:	4b18      	ldr	r3, [pc, #96]	; (8007d6c <pow+0x2c8>)
 8007d0a:	e7da      	b.n	8007cc2 <pow+0x21e>
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	2300      	movs	r3, #0
 8007d10:	ec51 0b18 	vmov	r0, r1, d8
 8007d14:	f7f8 ff32 	bl	8000b7c <__aeabi_dcmpeq>
 8007d18:	2800      	cmp	r0, #0
 8007d1a:	f43f af3a 	beq.w	8007b92 <pow+0xee>
 8007d1e:	ec47 6b10 	vmov	d0, r6, r7
 8007d22:	f000 fe50 	bl	80089c6 <finite>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	f43f af33 	beq.w	8007b92 <pow+0xee>
 8007d2c:	ec45 4b10 	vmov	d0, r4, r5
 8007d30:	f000 fe49 	bl	80089c6 <finite>
 8007d34:	2800      	cmp	r0, #0
 8007d36:	f43f af2c 	beq.w	8007b92 <pow+0xee>
 8007d3a:	2304      	movs	r3, #4
 8007d3c:	9302      	str	r3, [sp, #8]
 8007d3e:	4b09      	ldr	r3, [pc, #36]	; (8007d64 <pow+0x2c0>)
 8007d40:	9303      	str	r3, [sp, #12]
 8007d42:	2300      	movs	r3, #0
 8007d44:	930a      	str	r3, [sp, #40]	; 0x28
 8007d46:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007d4a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8007d4e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8007d52:	e7b8      	b.n	8007cc6 <pow+0x222>
 8007d54:	a802      	add	r0, sp, #8
 8007d56:	f000 fe3e 	bl	80089d6 <matherr>
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	f47f af11 	bne.w	8007b82 <pow+0xde>
 8007d60:	e7b5      	b.n	8007cce <pow+0x22a>
 8007d62:	bf00      	nop
 8007d64:	080091b7 	.word	0x080091b7
 8007d68:	3ff00000 	.word	0x3ff00000
 8007d6c:	fff00000 	.word	0xfff00000
 8007d70:	3fe00000 	.word	0x3fe00000
 8007d74:	47efffff 	.word	0x47efffff
 8007d78:	c7efffff 	.word	0xc7efffff
 8007d7c:	7ff00000 	.word	0x7ff00000
 8007d80:	20000620 	.word	0x20000620

08007d84 <sqrt>:
 8007d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007d88:	ed2d 8b02 	vpush	{d8}
 8007d8c:	b08b      	sub	sp, #44	; 0x2c
 8007d8e:	ec55 4b10 	vmov	r4, r5, d0
 8007d92:	f000 fd5f 	bl	8008854 <__ieee754_sqrt>
 8007d96:	4b26      	ldr	r3, [pc, #152]	; (8007e30 <sqrt+0xac>)
 8007d98:	eeb0 8a40 	vmov.f32	s16, s0
 8007d9c:	eef0 8a60 	vmov.f32	s17, s1
 8007da0:	f993 6000 	ldrsb.w	r6, [r3]
 8007da4:	1c73      	adds	r3, r6, #1
 8007da6:	d02a      	beq.n	8007dfe <sqrt+0x7a>
 8007da8:	4622      	mov	r2, r4
 8007daa:	462b      	mov	r3, r5
 8007dac:	4620      	mov	r0, r4
 8007dae:	4629      	mov	r1, r5
 8007db0:	f7f8 ff16 	bl	8000be0 <__aeabi_dcmpun>
 8007db4:	4607      	mov	r7, r0
 8007db6:	bb10      	cbnz	r0, 8007dfe <sqrt+0x7a>
 8007db8:	f04f 0800 	mov.w	r8, #0
 8007dbc:	f04f 0900 	mov.w	r9, #0
 8007dc0:	4642      	mov	r2, r8
 8007dc2:	464b      	mov	r3, r9
 8007dc4:	4620      	mov	r0, r4
 8007dc6:	4629      	mov	r1, r5
 8007dc8:	f7f8 fee2 	bl	8000b90 <__aeabi_dcmplt>
 8007dcc:	b1b8      	cbz	r0, 8007dfe <sqrt+0x7a>
 8007dce:	2301      	movs	r3, #1
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	4b18      	ldr	r3, [pc, #96]	; (8007e34 <sqrt+0xb0>)
 8007dd4:	9301      	str	r3, [sp, #4]
 8007dd6:	9708      	str	r7, [sp, #32]
 8007dd8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8007ddc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007de0:	b9b6      	cbnz	r6, 8007e10 <sqrt+0x8c>
 8007de2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8007de6:	4668      	mov	r0, sp
 8007de8:	f000 fdf5 	bl	80089d6 <matherr>
 8007dec:	b1d0      	cbz	r0, 8007e24 <sqrt+0xa0>
 8007dee:	9b08      	ldr	r3, [sp, #32]
 8007df0:	b11b      	cbz	r3, 8007dfa <sqrt+0x76>
 8007df2:	f7ff fcbb 	bl	800776c <__errno>
 8007df6:	9b08      	ldr	r3, [sp, #32]
 8007df8:	6003      	str	r3, [r0, #0]
 8007dfa:	ed9d 8b06 	vldr	d8, [sp, #24]
 8007dfe:	eeb0 0a48 	vmov.f32	s0, s16
 8007e02:	eef0 0a68 	vmov.f32	s1, s17
 8007e06:	b00b      	add	sp, #44	; 0x2c
 8007e08:	ecbd 8b02 	vpop	{d8}
 8007e0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e10:	4642      	mov	r2, r8
 8007e12:	464b      	mov	r3, r9
 8007e14:	4640      	mov	r0, r8
 8007e16:	4649      	mov	r1, r9
 8007e18:	f7f8 fd72 	bl	8000900 <__aeabi_ddiv>
 8007e1c:	2e02      	cmp	r6, #2
 8007e1e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007e22:	d1e0      	bne.n	8007de6 <sqrt+0x62>
 8007e24:	f7ff fca2 	bl	800776c <__errno>
 8007e28:	2321      	movs	r3, #33	; 0x21
 8007e2a:	6003      	str	r3, [r0, #0]
 8007e2c:	e7df      	b.n	8007dee <sqrt+0x6a>
 8007e2e:	bf00      	nop
 8007e30:	20000620 	.word	0x20000620
 8007e34:	080091bb 	.word	0x080091bb

08007e38 <__ieee754_pow>:
 8007e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e3c:	b091      	sub	sp, #68	; 0x44
 8007e3e:	ed8d 1b00 	vstr	d1, [sp]
 8007e42:	e9dd 2900 	ldrd	r2, r9, [sp]
 8007e46:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8007e4a:	ea58 0302 	orrs.w	r3, r8, r2
 8007e4e:	ec57 6b10 	vmov	r6, r7, d0
 8007e52:	f000 84be 	beq.w	80087d2 <__ieee754_pow+0x99a>
 8007e56:	4b7a      	ldr	r3, [pc, #488]	; (8008040 <__ieee754_pow+0x208>)
 8007e58:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8007e5c:	429c      	cmp	r4, r3
 8007e5e:	463d      	mov	r5, r7
 8007e60:	ee10 aa10 	vmov	sl, s0
 8007e64:	dc09      	bgt.n	8007e7a <__ieee754_pow+0x42>
 8007e66:	d103      	bne.n	8007e70 <__ieee754_pow+0x38>
 8007e68:	b93e      	cbnz	r6, 8007e7a <__ieee754_pow+0x42>
 8007e6a:	45a0      	cmp	r8, r4
 8007e6c:	dc0d      	bgt.n	8007e8a <__ieee754_pow+0x52>
 8007e6e:	e001      	b.n	8007e74 <__ieee754_pow+0x3c>
 8007e70:	4598      	cmp	r8, r3
 8007e72:	dc02      	bgt.n	8007e7a <__ieee754_pow+0x42>
 8007e74:	4598      	cmp	r8, r3
 8007e76:	d10e      	bne.n	8007e96 <__ieee754_pow+0x5e>
 8007e78:	b16a      	cbz	r2, 8007e96 <__ieee754_pow+0x5e>
 8007e7a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007e7e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007e82:	ea54 030a 	orrs.w	r3, r4, sl
 8007e86:	f000 84a4 	beq.w	80087d2 <__ieee754_pow+0x99a>
 8007e8a:	486e      	ldr	r0, [pc, #440]	; (8008044 <__ieee754_pow+0x20c>)
 8007e8c:	b011      	add	sp, #68	; 0x44
 8007e8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e92:	f000 bda5 	b.w	80089e0 <nan>
 8007e96:	2d00      	cmp	r5, #0
 8007e98:	da53      	bge.n	8007f42 <__ieee754_pow+0x10a>
 8007e9a:	4b6b      	ldr	r3, [pc, #428]	; (8008048 <__ieee754_pow+0x210>)
 8007e9c:	4598      	cmp	r8, r3
 8007e9e:	dc4d      	bgt.n	8007f3c <__ieee754_pow+0x104>
 8007ea0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8007ea4:	4598      	cmp	r8, r3
 8007ea6:	dd4c      	ble.n	8007f42 <__ieee754_pow+0x10a>
 8007ea8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007eac:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8007eb0:	2b14      	cmp	r3, #20
 8007eb2:	dd26      	ble.n	8007f02 <__ieee754_pow+0xca>
 8007eb4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8007eb8:	fa22 f103 	lsr.w	r1, r2, r3
 8007ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d13e      	bne.n	8007f42 <__ieee754_pow+0x10a>
 8007ec4:	f001 0101 	and.w	r1, r1, #1
 8007ec8:	f1c1 0b02 	rsb	fp, r1, #2
 8007ecc:	2a00      	cmp	r2, #0
 8007ece:	d15b      	bne.n	8007f88 <__ieee754_pow+0x150>
 8007ed0:	4b5b      	ldr	r3, [pc, #364]	; (8008040 <__ieee754_pow+0x208>)
 8007ed2:	4598      	cmp	r8, r3
 8007ed4:	d124      	bne.n	8007f20 <__ieee754_pow+0xe8>
 8007ed6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8007eda:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007ede:	ea53 030a 	orrs.w	r3, r3, sl
 8007ee2:	f000 8476 	beq.w	80087d2 <__ieee754_pow+0x99a>
 8007ee6:	4b59      	ldr	r3, [pc, #356]	; (800804c <__ieee754_pow+0x214>)
 8007ee8:	429c      	cmp	r4, r3
 8007eea:	dd2d      	ble.n	8007f48 <__ieee754_pow+0x110>
 8007eec:	f1b9 0f00 	cmp.w	r9, #0
 8007ef0:	f280 8473 	bge.w	80087da <__ieee754_pow+0x9a2>
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	2100      	movs	r1, #0
 8007ef8:	ec41 0b10 	vmov	d0, r0, r1
 8007efc:	b011      	add	sp, #68	; 0x44
 8007efe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f02:	2a00      	cmp	r2, #0
 8007f04:	d13e      	bne.n	8007f84 <__ieee754_pow+0x14c>
 8007f06:	f1c3 0314 	rsb	r3, r3, #20
 8007f0a:	fa48 f103 	asr.w	r1, r8, r3
 8007f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8007f12:	4543      	cmp	r3, r8
 8007f14:	f040 8469 	bne.w	80087ea <__ieee754_pow+0x9b2>
 8007f18:	f001 0101 	and.w	r1, r1, #1
 8007f1c:	f1c1 0b02 	rsb	fp, r1, #2
 8007f20:	4b4b      	ldr	r3, [pc, #300]	; (8008050 <__ieee754_pow+0x218>)
 8007f22:	4598      	cmp	r8, r3
 8007f24:	d118      	bne.n	8007f58 <__ieee754_pow+0x120>
 8007f26:	f1b9 0f00 	cmp.w	r9, #0
 8007f2a:	f280 845a 	bge.w	80087e2 <__ieee754_pow+0x9aa>
 8007f2e:	4948      	ldr	r1, [pc, #288]	; (8008050 <__ieee754_pow+0x218>)
 8007f30:	4632      	mov	r2, r6
 8007f32:	463b      	mov	r3, r7
 8007f34:	2000      	movs	r0, #0
 8007f36:	f7f8 fce3 	bl	8000900 <__aeabi_ddiv>
 8007f3a:	e7dd      	b.n	8007ef8 <__ieee754_pow+0xc0>
 8007f3c:	f04f 0b02 	mov.w	fp, #2
 8007f40:	e7c4      	b.n	8007ecc <__ieee754_pow+0x94>
 8007f42:	f04f 0b00 	mov.w	fp, #0
 8007f46:	e7c1      	b.n	8007ecc <__ieee754_pow+0x94>
 8007f48:	f1b9 0f00 	cmp.w	r9, #0
 8007f4c:	dad2      	bge.n	8007ef4 <__ieee754_pow+0xbc>
 8007f4e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007f52:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007f56:	e7cf      	b.n	8007ef8 <__ieee754_pow+0xc0>
 8007f58:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8007f5c:	d106      	bne.n	8007f6c <__ieee754_pow+0x134>
 8007f5e:	4632      	mov	r2, r6
 8007f60:	463b      	mov	r3, r7
 8007f62:	4610      	mov	r0, r2
 8007f64:	4619      	mov	r1, r3
 8007f66:	f7f8 fba1 	bl	80006ac <__aeabi_dmul>
 8007f6a:	e7c5      	b.n	8007ef8 <__ieee754_pow+0xc0>
 8007f6c:	4b39      	ldr	r3, [pc, #228]	; (8008054 <__ieee754_pow+0x21c>)
 8007f6e:	4599      	cmp	r9, r3
 8007f70:	d10a      	bne.n	8007f88 <__ieee754_pow+0x150>
 8007f72:	2d00      	cmp	r5, #0
 8007f74:	db08      	blt.n	8007f88 <__ieee754_pow+0x150>
 8007f76:	ec47 6b10 	vmov	d0, r6, r7
 8007f7a:	b011      	add	sp, #68	; 0x44
 8007f7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f80:	f000 bc68 	b.w	8008854 <__ieee754_sqrt>
 8007f84:	f04f 0b00 	mov.w	fp, #0
 8007f88:	ec47 6b10 	vmov	d0, r6, r7
 8007f8c:	f000 fd12 	bl	80089b4 <fabs>
 8007f90:	ec51 0b10 	vmov	r0, r1, d0
 8007f94:	f1ba 0f00 	cmp.w	sl, #0
 8007f98:	d127      	bne.n	8007fea <__ieee754_pow+0x1b2>
 8007f9a:	b124      	cbz	r4, 8007fa6 <__ieee754_pow+0x16e>
 8007f9c:	4b2c      	ldr	r3, [pc, #176]	; (8008050 <__ieee754_pow+0x218>)
 8007f9e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d121      	bne.n	8007fea <__ieee754_pow+0x1b2>
 8007fa6:	f1b9 0f00 	cmp.w	r9, #0
 8007faa:	da05      	bge.n	8007fb8 <__ieee754_pow+0x180>
 8007fac:	4602      	mov	r2, r0
 8007fae:	460b      	mov	r3, r1
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	4927      	ldr	r1, [pc, #156]	; (8008050 <__ieee754_pow+0x218>)
 8007fb4:	f7f8 fca4 	bl	8000900 <__aeabi_ddiv>
 8007fb8:	2d00      	cmp	r5, #0
 8007fba:	da9d      	bge.n	8007ef8 <__ieee754_pow+0xc0>
 8007fbc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007fc0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007fc4:	ea54 030b 	orrs.w	r3, r4, fp
 8007fc8:	d108      	bne.n	8007fdc <__ieee754_pow+0x1a4>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	460b      	mov	r3, r1
 8007fce:	4610      	mov	r0, r2
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	f7f8 f9b3 	bl	800033c <__aeabi_dsub>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	e7ac      	b.n	8007f36 <__ieee754_pow+0xfe>
 8007fdc:	f1bb 0f01 	cmp.w	fp, #1
 8007fe0:	d18a      	bne.n	8007ef8 <__ieee754_pow+0xc0>
 8007fe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007fe6:	4619      	mov	r1, r3
 8007fe8:	e786      	b.n	8007ef8 <__ieee754_pow+0xc0>
 8007fea:	0fed      	lsrs	r5, r5, #31
 8007fec:	1e6b      	subs	r3, r5, #1
 8007fee:	930d      	str	r3, [sp, #52]	; 0x34
 8007ff0:	ea5b 0303 	orrs.w	r3, fp, r3
 8007ff4:	d102      	bne.n	8007ffc <__ieee754_pow+0x1c4>
 8007ff6:	4632      	mov	r2, r6
 8007ff8:	463b      	mov	r3, r7
 8007ffa:	e7e8      	b.n	8007fce <__ieee754_pow+0x196>
 8007ffc:	4b16      	ldr	r3, [pc, #88]	; (8008058 <__ieee754_pow+0x220>)
 8007ffe:	4598      	cmp	r8, r3
 8008000:	f340 80fe 	ble.w	8008200 <__ieee754_pow+0x3c8>
 8008004:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008008:	4598      	cmp	r8, r3
 800800a:	dd0a      	ble.n	8008022 <__ieee754_pow+0x1ea>
 800800c:	4b0f      	ldr	r3, [pc, #60]	; (800804c <__ieee754_pow+0x214>)
 800800e:	429c      	cmp	r4, r3
 8008010:	dc0d      	bgt.n	800802e <__ieee754_pow+0x1f6>
 8008012:	f1b9 0f00 	cmp.w	r9, #0
 8008016:	f6bf af6d 	bge.w	8007ef4 <__ieee754_pow+0xbc>
 800801a:	a307      	add	r3, pc, #28	; (adr r3, 8008038 <__ieee754_pow+0x200>)
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	e79f      	b.n	8007f62 <__ieee754_pow+0x12a>
 8008022:	4b0e      	ldr	r3, [pc, #56]	; (800805c <__ieee754_pow+0x224>)
 8008024:	429c      	cmp	r4, r3
 8008026:	ddf4      	ble.n	8008012 <__ieee754_pow+0x1da>
 8008028:	4b09      	ldr	r3, [pc, #36]	; (8008050 <__ieee754_pow+0x218>)
 800802a:	429c      	cmp	r4, r3
 800802c:	dd18      	ble.n	8008060 <__ieee754_pow+0x228>
 800802e:	f1b9 0f00 	cmp.w	r9, #0
 8008032:	dcf2      	bgt.n	800801a <__ieee754_pow+0x1e2>
 8008034:	e75e      	b.n	8007ef4 <__ieee754_pow+0xbc>
 8008036:	bf00      	nop
 8008038:	8800759c 	.word	0x8800759c
 800803c:	7e37e43c 	.word	0x7e37e43c
 8008040:	7ff00000 	.word	0x7ff00000
 8008044:	080090b5 	.word	0x080090b5
 8008048:	433fffff 	.word	0x433fffff
 800804c:	3fefffff 	.word	0x3fefffff
 8008050:	3ff00000 	.word	0x3ff00000
 8008054:	3fe00000 	.word	0x3fe00000
 8008058:	41e00000 	.word	0x41e00000
 800805c:	3feffffe 	.word	0x3feffffe
 8008060:	2200      	movs	r2, #0
 8008062:	4b63      	ldr	r3, [pc, #396]	; (80081f0 <__ieee754_pow+0x3b8>)
 8008064:	f7f8 f96a 	bl	800033c <__aeabi_dsub>
 8008068:	a355      	add	r3, pc, #340	; (adr r3, 80081c0 <__ieee754_pow+0x388>)
 800806a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800806e:	4604      	mov	r4, r0
 8008070:	460d      	mov	r5, r1
 8008072:	f7f8 fb1b 	bl	80006ac <__aeabi_dmul>
 8008076:	a354      	add	r3, pc, #336	; (adr r3, 80081c8 <__ieee754_pow+0x390>)
 8008078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800807c:	4606      	mov	r6, r0
 800807e:	460f      	mov	r7, r1
 8008080:	4620      	mov	r0, r4
 8008082:	4629      	mov	r1, r5
 8008084:	f7f8 fb12 	bl	80006ac <__aeabi_dmul>
 8008088:	2200      	movs	r2, #0
 800808a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800808e:	4b59      	ldr	r3, [pc, #356]	; (80081f4 <__ieee754_pow+0x3bc>)
 8008090:	4620      	mov	r0, r4
 8008092:	4629      	mov	r1, r5
 8008094:	f7f8 fb0a 	bl	80006ac <__aeabi_dmul>
 8008098:	4602      	mov	r2, r0
 800809a:	460b      	mov	r3, r1
 800809c:	a14c      	add	r1, pc, #304	; (adr r1, 80081d0 <__ieee754_pow+0x398>)
 800809e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80080a2:	f7f8 f94b 	bl	800033c <__aeabi_dsub>
 80080a6:	4622      	mov	r2, r4
 80080a8:	462b      	mov	r3, r5
 80080aa:	f7f8 faff 	bl	80006ac <__aeabi_dmul>
 80080ae:	4602      	mov	r2, r0
 80080b0:	460b      	mov	r3, r1
 80080b2:	2000      	movs	r0, #0
 80080b4:	4950      	ldr	r1, [pc, #320]	; (80081f8 <__ieee754_pow+0x3c0>)
 80080b6:	f7f8 f941 	bl	800033c <__aeabi_dsub>
 80080ba:	4622      	mov	r2, r4
 80080bc:	462b      	mov	r3, r5
 80080be:	4680      	mov	r8, r0
 80080c0:	4689      	mov	r9, r1
 80080c2:	4620      	mov	r0, r4
 80080c4:	4629      	mov	r1, r5
 80080c6:	f7f8 faf1 	bl	80006ac <__aeabi_dmul>
 80080ca:	4602      	mov	r2, r0
 80080cc:	460b      	mov	r3, r1
 80080ce:	4640      	mov	r0, r8
 80080d0:	4649      	mov	r1, r9
 80080d2:	f7f8 faeb 	bl	80006ac <__aeabi_dmul>
 80080d6:	a340      	add	r3, pc, #256	; (adr r3, 80081d8 <__ieee754_pow+0x3a0>)
 80080d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080dc:	f7f8 fae6 	bl	80006ac <__aeabi_dmul>
 80080e0:	4602      	mov	r2, r0
 80080e2:	460b      	mov	r3, r1
 80080e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80080e8:	f7f8 f928 	bl	800033c <__aeabi_dsub>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4604      	mov	r4, r0
 80080f2:	460d      	mov	r5, r1
 80080f4:	4630      	mov	r0, r6
 80080f6:	4639      	mov	r1, r7
 80080f8:	f7f8 f922 	bl	8000340 <__adddf3>
 80080fc:	2000      	movs	r0, #0
 80080fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008102:	4632      	mov	r2, r6
 8008104:	463b      	mov	r3, r7
 8008106:	f7f8 f919 	bl	800033c <__aeabi_dsub>
 800810a:	4602      	mov	r2, r0
 800810c:	460b      	mov	r3, r1
 800810e:	4620      	mov	r0, r4
 8008110:	4629      	mov	r1, r5
 8008112:	f7f8 f913 	bl	800033c <__aeabi_dsub>
 8008116:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008118:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800811c:	4313      	orrs	r3, r2
 800811e:	4606      	mov	r6, r0
 8008120:	460f      	mov	r7, r1
 8008122:	f040 81eb 	bne.w	80084fc <__ieee754_pow+0x6c4>
 8008126:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80081e0 <__ieee754_pow+0x3a8>
 800812a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800812e:	2400      	movs	r4, #0
 8008130:	4622      	mov	r2, r4
 8008132:	462b      	mov	r3, r5
 8008134:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008138:	ed8d 7b02 	vstr	d7, [sp, #8]
 800813c:	f7f8 f8fe 	bl	800033c <__aeabi_dsub>
 8008140:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008144:	f7f8 fab2 	bl	80006ac <__aeabi_dmul>
 8008148:	e9dd 2300 	ldrd	r2, r3, [sp]
 800814c:	4680      	mov	r8, r0
 800814e:	4689      	mov	r9, r1
 8008150:	4630      	mov	r0, r6
 8008152:	4639      	mov	r1, r7
 8008154:	f7f8 faaa 	bl	80006ac <__aeabi_dmul>
 8008158:	4602      	mov	r2, r0
 800815a:	460b      	mov	r3, r1
 800815c:	4640      	mov	r0, r8
 800815e:	4649      	mov	r1, r9
 8008160:	f7f8 f8ee 	bl	8000340 <__adddf3>
 8008164:	4622      	mov	r2, r4
 8008166:	462b      	mov	r3, r5
 8008168:	4680      	mov	r8, r0
 800816a:	4689      	mov	r9, r1
 800816c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008170:	f7f8 fa9c 	bl	80006ac <__aeabi_dmul>
 8008174:	460b      	mov	r3, r1
 8008176:	4604      	mov	r4, r0
 8008178:	460d      	mov	r5, r1
 800817a:	4602      	mov	r2, r0
 800817c:	4649      	mov	r1, r9
 800817e:	4640      	mov	r0, r8
 8008180:	e9cd 4500 	strd	r4, r5, [sp]
 8008184:	f7f8 f8dc 	bl	8000340 <__adddf3>
 8008188:	4b1c      	ldr	r3, [pc, #112]	; (80081fc <__ieee754_pow+0x3c4>)
 800818a:	4299      	cmp	r1, r3
 800818c:	4606      	mov	r6, r0
 800818e:	460f      	mov	r7, r1
 8008190:	468b      	mov	fp, r1
 8008192:	f340 82f7 	ble.w	8008784 <__ieee754_pow+0x94c>
 8008196:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800819a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800819e:	4303      	orrs	r3, r0
 80081a0:	f000 81ea 	beq.w	8008578 <__ieee754_pow+0x740>
 80081a4:	a310      	add	r3, pc, #64	; (adr r3, 80081e8 <__ieee754_pow+0x3b0>)
 80081a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80081ae:	f7f8 fa7d 	bl	80006ac <__aeabi_dmul>
 80081b2:	a30d      	add	r3, pc, #52	; (adr r3, 80081e8 <__ieee754_pow+0x3b0>)
 80081b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b8:	e6d5      	b.n	8007f66 <__ieee754_pow+0x12e>
 80081ba:	bf00      	nop
 80081bc:	f3af 8000 	nop.w
 80081c0:	60000000 	.word	0x60000000
 80081c4:	3ff71547 	.word	0x3ff71547
 80081c8:	f85ddf44 	.word	0xf85ddf44
 80081cc:	3e54ae0b 	.word	0x3e54ae0b
 80081d0:	55555555 	.word	0x55555555
 80081d4:	3fd55555 	.word	0x3fd55555
 80081d8:	652b82fe 	.word	0x652b82fe
 80081dc:	3ff71547 	.word	0x3ff71547
 80081e0:	00000000 	.word	0x00000000
 80081e4:	bff00000 	.word	0xbff00000
 80081e8:	8800759c 	.word	0x8800759c
 80081ec:	7e37e43c 	.word	0x7e37e43c
 80081f0:	3ff00000 	.word	0x3ff00000
 80081f4:	3fd00000 	.word	0x3fd00000
 80081f8:	3fe00000 	.word	0x3fe00000
 80081fc:	408fffff 	.word	0x408fffff
 8008200:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008204:	f04f 0200 	mov.w	r2, #0
 8008208:	da05      	bge.n	8008216 <__ieee754_pow+0x3de>
 800820a:	4bd3      	ldr	r3, [pc, #844]	; (8008558 <__ieee754_pow+0x720>)
 800820c:	f7f8 fa4e 	bl	80006ac <__aeabi_dmul>
 8008210:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008214:	460c      	mov	r4, r1
 8008216:	1523      	asrs	r3, r4, #20
 8008218:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800821c:	4413      	add	r3, r2
 800821e:	9309      	str	r3, [sp, #36]	; 0x24
 8008220:	4bce      	ldr	r3, [pc, #824]	; (800855c <__ieee754_pow+0x724>)
 8008222:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008226:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800822a:	429c      	cmp	r4, r3
 800822c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008230:	dd08      	ble.n	8008244 <__ieee754_pow+0x40c>
 8008232:	4bcb      	ldr	r3, [pc, #812]	; (8008560 <__ieee754_pow+0x728>)
 8008234:	429c      	cmp	r4, r3
 8008236:	f340 815e 	ble.w	80084f6 <__ieee754_pow+0x6be>
 800823a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800823c:	3301      	adds	r3, #1
 800823e:	9309      	str	r3, [sp, #36]	; 0x24
 8008240:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008244:	f04f 0a00 	mov.w	sl, #0
 8008248:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800824c:	930c      	str	r3, [sp, #48]	; 0x30
 800824e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008250:	4bc4      	ldr	r3, [pc, #784]	; (8008564 <__ieee754_pow+0x72c>)
 8008252:	4413      	add	r3, r2
 8008254:	ed93 7b00 	vldr	d7, [r3]
 8008258:	4629      	mov	r1, r5
 800825a:	ec53 2b17 	vmov	r2, r3, d7
 800825e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008262:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008266:	f7f8 f869 	bl	800033c <__aeabi_dsub>
 800826a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800826e:	4606      	mov	r6, r0
 8008270:	460f      	mov	r7, r1
 8008272:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008276:	f7f8 f863 	bl	8000340 <__adddf3>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	2000      	movs	r0, #0
 8008280:	49b9      	ldr	r1, [pc, #740]	; (8008568 <__ieee754_pow+0x730>)
 8008282:	f7f8 fb3d 	bl	8000900 <__aeabi_ddiv>
 8008286:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800828a:	4602      	mov	r2, r0
 800828c:	460b      	mov	r3, r1
 800828e:	4630      	mov	r0, r6
 8008290:	4639      	mov	r1, r7
 8008292:	f7f8 fa0b 	bl	80006ac <__aeabi_dmul>
 8008296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800829a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800829e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80082a2:	2300      	movs	r3, #0
 80082a4:	9302      	str	r3, [sp, #8]
 80082a6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80082aa:	106d      	asrs	r5, r5, #1
 80082ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80082b0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80082b4:	2200      	movs	r2, #0
 80082b6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80082ba:	4640      	mov	r0, r8
 80082bc:	4649      	mov	r1, r9
 80082be:	4614      	mov	r4, r2
 80082c0:	461d      	mov	r5, r3
 80082c2:	f7f8 f9f3 	bl	80006ac <__aeabi_dmul>
 80082c6:	4602      	mov	r2, r0
 80082c8:	460b      	mov	r3, r1
 80082ca:	4630      	mov	r0, r6
 80082cc:	4639      	mov	r1, r7
 80082ce:	f7f8 f835 	bl	800033c <__aeabi_dsub>
 80082d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80082d6:	4606      	mov	r6, r0
 80082d8:	460f      	mov	r7, r1
 80082da:	4620      	mov	r0, r4
 80082dc:	4629      	mov	r1, r5
 80082de:	f7f8 f82d 	bl	800033c <__aeabi_dsub>
 80082e2:	4602      	mov	r2, r0
 80082e4:	460b      	mov	r3, r1
 80082e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80082ea:	f7f8 f827 	bl	800033c <__aeabi_dsub>
 80082ee:	4642      	mov	r2, r8
 80082f0:	464b      	mov	r3, r9
 80082f2:	f7f8 f9db 	bl	80006ac <__aeabi_dmul>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4630      	mov	r0, r6
 80082fc:	4639      	mov	r1, r7
 80082fe:	f7f8 f81d 	bl	800033c <__aeabi_dsub>
 8008302:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008306:	f7f8 f9d1 	bl	80006ac <__aeabi_dmul>
 800830a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800830e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008312:	4610      	mov	r0, r2
 8008314:	4619      	mov	r1, r3
 8008316:	f7f8 f9c9 	bl	80006ac <__aeabi_dmul>
 800831a:	a37b      	add	r3, pc, #492	; (adr r3, 8008508 <__ieee754_pow+0x6d0>)
 800831c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008320:	4604      	mov	r4, r0
 8008322:	460d      	mov	r5, r1
 8008324:	f7f8 f9c2 	bl	80006ac <__aeabi_dmul>
 8008328:	a379      	add	r3, pc, #484	; (adr r3, 8008510 <__ieee754_pow+0x6d8>)
 800832a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800832e:	f7f8 f807 	bl	8000340 <__adddf3>
 8008332:	4622      	mov	r2, r4
 8008334:	462b      	mov	r3, r5
 8008336:	f7f8 f9b9 	bl	80006ac <__aeabi_dmul>
 800833a:	a377      	add	r3, pc, #476	; (adr r3, 8008518 <__ieee754_pow+0x6e0>)
 800833c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008340:	f7f7 fffe 	bl	8000340 <__adddf3>
 8008344:	4622      	mov	r2, r4
 8008346:	462b      	mov	r3, r5
 8008348:	f7f8 f9b0 	bl	80006ac <__aeabi_dmul>
 800834c:	a374      	add	r3, pc, #464	; (adr r3, 8008520 <__ieee754_pow+0x6e8>)
 800834e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008352:	f7f7 fff5 	bl	8000340 <__adddf3>
 8008356:	4622      	mov	r2, r4
 8008358:	462b      	mov	r3, r5
 800835a:	f7f8 f9a7 	bl	80006ac <__aeabi_dmul>
 800835e:	a372      	add	r3, pc, #456	; (adr r3, 8008528 <__ieee754_pow+0x6f0>)
 8008360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008364:	f7f7 ffec 	bl	8000340 <__adddf3>
 8008368:	4622      	mov	r2, r4
 800836a:	462b      	mov	r3, r5
 800836c:	f7f8 f99e 	bl	80006ac <__aeabi_dmul>
 8008370:	a36f      	add	r3, pc, #444	; (adr r3, 8008530 <__ieee754_pow+0x6f8>)
 8008372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008376:	f7f7 ffe3 	bl	8000340 <__adddf3>
 800837a:	4622      	mov	r2, r4
 800837c:	4606      	mov	r6, r0
 800837e:	460f      	mov	r7, r1
 8008380:	462b      	mov	r3, r5
 8008382:	4620      	mov	r0, r4
 8008384:	4629      	mov	r1, r5
 8008386:	f7f8 f991 	bl	80006ac <__aeabi_dmul>
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	4630      	mov	r0, r6
 8008390:	4639      	mov	r1, r7
 8008392:	f7f8 f98b 	bl	80006ac <__aeabi_dmul>
 8008396:	4642      	mov	r2, r8
 8008398:	4604      	mov	r4, r0
 800839a:	460d      	mov	r5, r1
 800839c:	464b      	mov	r3, r9
 800839e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083a2:	f7f7 ffcd 	bl	8000340 <__adddf3>
 80083a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083aa:	f7f8 f97f 	bl	80006ac <__aeabi_dmul>
 80083ae:	4622      	mov	r2, r4
 80083b0:	462b      	mov	r3, r5
 80083b2:	f7f7 ffc5 	bl	8000340 <__adddf3>
 80083b6:	4642      	mov	r2, r8
 80083b8:	4606      	mov	r6, r0
 80083ba:	460f      	mov	r7, r1
 80083bc:	464b      	mov	r3, r9
 80083be:	4640      	mov	r0, r8
 80083c0:	4649      	mov	r1, r9
 80083c2:	f7f8 f973 	bl	80006ac <__aeabi_dmul>
 80083c6:	2200      	movs	r2, #0
 80083c8:	4b68      	ldr	r3, [pc, #416]	; (800856c <__ieee754_pow+0x734>)
 80083ca:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80083ce:	f7f7 ffb7 	bl	8000340 <__adddf3>
 80083d2:	4632      	mov	r2, r6
 80083d4:	463b      	mov	r3, r7
 80083d6:	f7f7 ffb3 	bl	8000340 <__adddf3>
 80083da:	9802      	ldr	r0, [sp, #8]
 80083dc:	460d      	mov	r5, r1
 80083de:	4604      	mov	r4, r0
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	4640      	mov	r0, r8
 80083e6:	4649      	mov	r1, r9
 80083e8:	f7f8 f960 	bl	80006ac <__aeabi_dmul>
 80083ec:	2200      	movs	r2, #0
 80083ee:	4680      	mov	r8, r0
 80083f0:	4689      	mov	r9, r1
 80083f2:	4b5e      	ldr	r3, [pc, #376]	; (800856c <__ieee754_pow+0x734>)
 80083f4:	4620      	mov	r0, r4
 80083f6:	4629      	mov	r1, r5
 80083f8:	f7f7 ffa0 	bl	800033c <__aeabi_dsub>
 80083fc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008400:	f7f7 ff9c 	bl	800033c <__aeabi_dsub>
 8008404:	4602      	mov	r2, r0
 8008406:	460b      	mov	r3, r1
 8008408:	4630      	mov	r0, r6
 800840a:	4639      	mov	r1, r7
 800840c:	f7f7 ff96 	bl	800033c <__aeabi_dsub>
 8008410:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008414:	f7f8 f94a 	bl	80006ac <__aeabi_dmul>
 8008418:	4622      	mov	r2, r4
 800841a:	4606      	mov	r6, r0
 800841c:	460f      	mov	r7, r1
 800841e:	462b      	mov	r3, r5
 8008420:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008424:	f7f8 f942 	bl	80006ac <__aeabi_dmul>
 8008428:	4602      	mov	r2, r0
 800842a:	460b      	mov	r3, r1
 800842c:	4630      	mov	r0, r6
 800842e:	4639      	mov	r1, r7
 8008430:	f7f7 ff86 	bl	8000340 <__adddf3>
 8008434:	4606      	mov	r6, r0
 8008436:	460f      	mov	r7, r1
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	4640      	mov	r0, r8
 800843e:	4649      	mov	r1, r9
 8008440:	f7f7 ff7e 	bl	8000340 <__adddf3>
 8008444:	9802      	ldr	r0, [sp, #8]
 8008446:	a33c      	add	r3, pc, #240	; (adr r3, 8008538 <__ieee754_pow+0x700>)
 8008448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800844c:	4604      	mov	r4, r0
 800844e:	460d      	mov	r5, r1
 8008450:	f7f8 f92c 	bl	80006ac <__aeabi_dmul>
 8008454:	4642      	mov	r2, r8
 8008456:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800845a:	464b      	mov	r3, r9
 800845c:	4620      	mov	r0, r4
 800845e:	4629      	mov	r1, r5
 8008460:	f7f7 ff6c 	bl	800033c <__aeabi_dsub>
 8008464:	4602      	mov	r2, r0
 8008466:	460b      	mov	r3, r1
 8008468:	4630      	mov	r0, r6
 800846a:	4639      	mov	r1, r7
 800846c:	f7f7 ff66 	bl	800033c <__aeabi_dsub>
 8008470:	a333      	add	r3, pc, #204	; (adr r3, 8008540 <__ieee754_pow+0x708>)
 8008472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008476:	f7f8 f919 	bl	80006ac <__aeabi_dmul>
 800847a:	a333      	add	r3, pc, #204	; (adr r3, 8008548 <__ieee754_pow+0x710>)
 800847c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008480:	4606      	mov	r6, r0
 8008482:	460f      	mov	r7, r1
 8008484:	4620      	mov	r0, r4
 8008486:	4629      	mov	r1, r5
 8008488:	f7f8 f910 	bl	80006ac <__aeabi_dmul>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4630      	mov	r0, r6
 8008492:	4639      	mov	r1, r7
 8008494:	f7f7 ff54 	bl	8000340 <__adddf3>
 8008498:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800849a:	4b35      	ldr	r3, [pc, #212]	; (8008570 <__ieee754_pow+0x738>)
 800849c:	4413      	add	r3, r2
 800849e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a2:	f7f7 ff4d 	bl	8000340 <__adddf3>
 80084a6:	4604      	mov	r4, r0
 80084a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084aa:	460d      	mov	r5, r1
 80084ac:	f7f8 f894 	bl	80005d8 <__aeabi_i2d>
 80084b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80084b2:	4b30      	ldr	r3, [pc, #192]	; (8008574 <__ieee754_pow+0x73c>)
 80084b4:	4413      	add	r3, r2
 80084b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084ba:	4606      	mov	r6, r0
 80084bc:	460f      	mov	r7, r1
 80084be:	4622      	mov	r2, r4
 80084c0:	462b      	mov	r3, r5
 80084c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084c6:	f7f7 ff3b 	bl	8000340 <__adddf3>
 80084ca:	4642      	mov	r2, r8
 80084cc:	464b      	mov	r3, r9
 80084ce:	f7f7 ff37 	bl	8000340 <__adddf3>
 80084d2:	4632      	mov	r2, r6
 80084d4:	463b      	mov	r3, r7
 80084d6:	f7f7 ff33 	bl	8000340 <__adddf3>
 80084da:	9802      	ldr	r0, [sp, #8]
 80084dc:	4632      	mov	r2, r6
 80084de:	463b      	mov	r3, r7
 80084e0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084e4:	f7f7 ff2a 	bl	800033c <__aeabi_dsub>
 80084e8:	4642      	mov	r2, r8
 80084ea:	464b      	mov	r3, r9
 80084ec:	f7f7 ff26 	bl	800033c <__aeabi_dsub>
 80084f0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084f4:	e607      	b.n	8008106 <__ieee754_pow+0x2ce>
 80084f6:	f04f 0a01 	mov.w	sl, #1
 80084fa:	e6a5      	b.n	8008248 <__ieee754_pow+0x410>
 80084fc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8008550 <__ieee754_pow+0x718>
 8008500:	e613      	b.n	800812a <__ieee754_pow+0x2f2>
 8008502:	bf00      	nop
 8008504:	f3af 8000 	nop.w
 8008508:	4a454eef 	.word	0x4a454eef
 800850c:	3fca7e28 	.word	0x3fca7e28
 8008510:	93c9db65 	.word	0x93c9db65
 8008514:	3fcd864a 	.word	0x3fcd864a
 8008518:	a91d4101 	.word	0xa91d4101
 800851c:	3fd17460 	.word	0x3fd17460
 8008520:	518f264d 	.word	0x518f264d
 8008524:	3fd55555 	.word	0x3fd55555
 8008528:	db6fabff 	.word	0xdb6fabff
 800852c:	3fdb6db6 	.word	0x3fdb6db6
 8008530:	33333303 	.word	0x33333303
 8008534:	3fe33333 	.word	0x3fe33333
 8008538:	e0000000 	.word	0xe0000000
 800853c:	3feec709 	.word	0x3feec709
 8008540:	dc3a03fd 	.word	0xdc3a03fd
 8008544:	3feec709 	.word	0x3feec709
 8008548:	145b01f5 	.word	0x145b01f5
 800854c:	be3e2fe0 	.word	0xbe3e2fe0
 8008550:	00000000 	.word	0x00000000
 8008554:	3ff00000 	.word	0x3ff00000
 8008558:	43400000 	.word	0x43400000
 800855c:	0003988e 	.word	0x0003988e
 8008560:	000bb679 	.word	0x000bb679
 8008564:	080091c0 	.word	0x080091c0
 8008568:	3ff00000 	.word	0x3ff00000
 800856c:	40080000 	.word	0x40080000
 8008570:	080091e0 	.word	0x080091e0
 8008574:	080091d0 	.word	0x080091d0
 8008578:	a3b4      	add	r3, pc, #720	; (adr r3, 800884c <__ieee754_pow+0xa14>)
 800857a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800857e:	4640      	mov	r0, r8
 8008580:	4649      	mov	r1, r9
 8008582:	f7f7 fedd 	bl	8000340 <__adddf3>
 8008586:	4622      	mov	r2, r4
 8008588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800858c:	462b      	mov	r3, r5
 800858e:	4630      	mov	r0, r6
 8008590:	4639      	mov	r1, r7
 8008592:	f7f7 fed3 	bl	800033c <__aeabi_dsub>
 8008596:	4602      	mov	r2, r0
 8008598:	460b      	mov	r3, r1
 800859a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800859e:	f7f8 fb15 	bl	8000bcc <__aeabi_dcmpgt>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	f47f adfe 	bne.w	80081a4 <__ieee754_pow+0x36c>
 80085a8:	4aa3      	ldr	r2, [pc, #652]	; (8008838 <__ieee754_pow+0xa00>)
 80085aa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80085ae:	4293      	cmp	r3, r2
 80085b0:	f340 810a 	ble.w	80087c8 <__ieee754_pow+0x990>
 80085b4:	151b      	asrs	r3, r3, #20
 80085b6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80085ba:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80085be:	fa4a f303 	asr.w	r3, sl, r3
 80085c2:	445b      	add	r3, fp
 80085c4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80085c8:	4e9c      	ldr	r6, [pc, #624]	; (800883c <__ieee754_pow+0xa04>)
 80085ca:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80085ce:	4116      	asrs	r6, r2
 80085d0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80085d4:	2000      	movs	r0, #0
 80085d6:	ea23 0106 	bic.w	r1, r3, r6
 80085da:	f1c2 0214 	rsb	r2, r2, #20
 80085de:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80085e2:	fa4a fa02 	asr.w	sl, sl, r2
 80085e6:	f1bb 0f00 	cmp.w	fp, #0
 80085ea:	4602      	mov	r2, r0
 80085ec:	460b      	mov	r3, r1
 80085ee:	4620      	mov	r0, r4
 80085f0:	4629      	mov	r1, r5
 80085f2:	bfb8      	it	lt
 80085f4:	f1ca 0a00 	rsblt	sl, sl, #0
 80085f8:	f7f7 fea0 	bl	800033c <__aeabi_dsub>
 80085fc:	e9cd 0100 	strd	r0, r1, [sp]
 8008600:	4642      	mov	r2, r8
 8008602:	464b      	mov	r3, r9
 8008604:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008608:	f7f7 fe9a 	bl	8000340 <__adddf3>
 800860c:	2000      	movs	r0, #0
 800860e:	a378      	add	r3, pc, #480	; (adr r3, 80087f0 <__ieee754_pow+0x9b8>)
 8008610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008614:	4604      	mov	r4, r0
 8008616:	460d      	mov	r5, r1
 8008618:	f7f8 f848 	bl	80006ac <__aeabi_dmul>
 800861c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008620:	4606      	mov	r6, r0
 8008622:	460f      	mov	r7, r1
 8008624:	4620      	mov	r0, r4
 8008626:	4629      	mov	r1, r5
 8008628:	f7f7 fe88 	bl	800033c <__aeabi_dsub>
 800862c:	4602      	mov	r2, r0
 800862e:	460b      	mov	r3, r1
 8008630:	4640      	mov	r0, r8
 8008632:	4649      	mov	r1, r9
 8008634:	f7f7 fe82 	bl	800033c <__aeabi_dsub>
 8008638:	a36f      	add	r3, pc, #444	; (adr r3, 80087f8 <__ieee754_pow+0x9c0>)
 800863a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863e:	f7f8 f835 	bl	80006ac <__aeabi_dmul>
 8008642:	a36f      	add	r3, pc, #444	; (adr r3, 8008800 <__ieee754_pow+0x9c8>)
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	4680      	mov	r8, r0
 800864a:	4689      	mov	r9, r1
 800864c:	4620      	mov	r0, r4
 800864e:	4629      	mov	r1, r5
 8008650:	f7f8 f82c 	bl	80006ac <__aeabi_dmul>
 8008654:	4602      	mov	r2, r0
 8008656:	460b      	mov	r3, r1
 8008658:	4640      	mov	r0, r8
 800865a:	4649      	mov	r1, r9
 800865c:	f7f7 fe70 	bl	8000340 <__adddf3>
 8008660:	4604      	mov	r4, r0
 8008662:	460d      	mov	r5, r1
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4630      	mov	r0, r6
 800866a:	4639      	mov	r1, r7
 800866c:	f7f7 fe68 	bl	8000340 <__adddf3>
 8008670:	4632      	mov	r2, r6
 8008672:	463b      	mov	r3, r7
 8008674:	4680      	mov	r8, r0
 8008676:	4689      	mov	r9, r1
 8008678:	f7f7 fe60 	bl	800033c <__aeabi_dsub>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4620      	mov	r0, r4
 8008682:	4629      	mov	r1, r5
 8008684:	f7f7 fe5a 	bl	800033c <__aeabi_dsub>
 8008688:	4642      	mov	r2, r8
 800868a:	4606      	mov	r6, r0
 800868c:	460f      	mov	r7, r1
 800868e:	464b      	mov	r3, r9
 8008690:	4640      	mov	r0, r8
 8008692:	4649      	mov	r1, r9
 8008694:	f7f8 f80a 	bl	80006ac <__aeabi_dmul>
 8008698:	a35b      	add	r3, pc, #364	; (adr r3, 8008808 <__ieee754_pow+0x9d0>)
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	4604      	mov	r4, r0
 80086a0:	460d      	mov	r5, r1
 80086a2:	f7f8 f803 	bl	80006ac <__aeabi_dmul>
 80086a6:	a35a      	add	r3, pc, #360	; (adr r3, 8008810 <__ieee754_pow+0x9d8>)
 80086a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ac:	f7f7 fe46 	bl	800033c <__aeabi_dsub>
 80086b0:	4622      	mov	r2, r4
 80086b2:	462b      	mov	r3, r5
 80086b4:	f7f7 fffa 	bl	80006ac <__aeabi_dmul>
 80086b8:	a357      	add	r3, pc, #348	; (adr r3, 8008818 <__ieee754_pow+0x9e0>)
 80086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086be:	f7f7 fe3f 	bl	8000340 <__adddf3>
 80086c2:	4622      	mov	r2, r4
 80086c4:	462b      	mov	r3, r5
 80086c6:	f7f7 fff1 	bl	80006ac <__aeabi_dmul>
 80086ca:	a355      	add	r3, pc, #340	; (adr r3, 8008820 <__ieee754_pow+0x9e8>)
 80086cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d0:	f7f7 fe34 	bl	800033c <__aeabi_dsub>
 80086d4:	4622      	mov	r2, r4
 80086d6:	462b      	mov	r3, r5
 80086d8:	f7f7 ffe8 	bl	80006ac <__aeabi_dmul>
 80086dc:	a352      	add	r3, pc, #328	; (adr r3, 8008828 <__ieee754_pow+0x9f0>)
 80086de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086e2:	f7f7 fe2d 	bl	8000340 <__adddf3>
 80086e6:	4622      	mov	r2, r4
 80086e8:	462b      	mov	r3, r5
 80086ea:	f7f7 ffdf 	bl	80006ac <__aeabi_dmul>
 80086ee:	4602      	mov	r2, r0
 80086f0:	460b      	mov	r3, r1
 80086f2:	4640      	mov	r0, r8
 80086f4:	4649      	mov	r1, r9
 80086f6:	f7f7 fe21 	bl	800033c <__aeabi_dsub>
 80086fa:	4604      	mov	r4, r0
 80086fc:	460d      	mov	r5, r1
 80086fe:	4602      	mov	r2, r0
 8008700:	460b      	mov	r3, r1
 8008702:	4640      	mov	r0, r8
 8008704:	4649      	mov	r1, r9
 8008706:	f7f7 ffd1 	bl	80006ac <__aeabi_dmul>
 800870a:	2200      	movs	r2, #0
 800870c:	e9cd 0100 	strd	r0, r1, [sp]
 8008710:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008714:	4620      	mov	r0, r4
 8008716:	4629      	mov	r1, r5
 8008718:	f7f7 fe10 	bl	800033c <__aeabi_dsub>
 800871c:	4602      	mov	r2, r0
 800871e:	460b      	mov	r3, r1
 8008720:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008724:	f7f8 f8ec 	bl	8000900 <__aeabi_ddiv>
 8008728:	4632      	mov	r2, r6
 800872a:	4604      	mov	r4, r0
 800872c:	460d      	mov	r5, r1
 800872e:	463b      	mov	r3, r7
 8008730:	4640      	mov	r0, r8
 8008732:	4649      	mov	r1, r9
 8008734:	f7f7 ffba 	bl	80006ac <__aeabi_dmul>
 8008738:	4632      	mov	r2, r6
 800873a:	463b      	mov	r3, r7
 800873c:	f7f7 fe00 	bl	8000340 <__adddf3>
 8008740:	4602      	mov	r2, r0
 8008742:	460b      	mov	r3, r1
 8008744:	4620      	mov	r0, r4
 8008746:	4629      	mov	r1, r5
 8008748:	f7f7 fdf8 	bl	800033c <__aeabi_dsub>
 800874c:	4642      	mov	r2, r8
 800874e:	464b      	mov	r3, r9
 8008750:	f7f7 fdf4 	bl	800033c <__aeabi_dsub>
 8008754:	4602      	mov	r2, r0
 8008756:	460b      	mov	r3, r1
 8008758:	2000      	movs	r0, #0
 800875a:	4939      	ldr	r1, [pc, #228]	; (8008840 <__ieee754_pow+0xa08>)
 800875c:	f7f7 fdee 	bl	800033c <__aeabi_dsub>
 8008760:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8008764:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8008768:	4602      	mov	r2, r0
 800876a:	460b      	mov	r3, r1
 800876c:	da2f      	bge.n	80087ce <__ieee754_pow+0x996>
 800876e:	4650      	mov	r0, sl
 8008770:	ec43 2b10 	vmov	d0, r2, r3
 8008774:	f000 f9c0 	bl	8008af8 <scalbn>
 8008778:	ec51 0b10 	vmov	r0, r1, d0
 800877c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008780:	f7ff bbf1 	b.w	8007f66 <__ieee754_pow+0x12e>
 8008784:	4b2f      	ldr	r3, [pc, #188]	; (8008844 <__ieee754_pow+0xa0c>)
 8008786:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800878a:	429e      	cmp	r6, r3
 800878c:	f77f af0c 	ble.w	80085a8 <__ieee754_pow+0x770>
 8008790:	4b2d      	ldr	r3, [pc, #180]	; (8008848 <__ieee754_pow+0xa10>)
 8008792:	440b      	add	r3, r1
 8008794:	4303      	orrs	r3, r0
 8008796:	d00b      	beq.n	80087b0 <__ieee754_pow+0x978>
 8008798:	a325      	add	r3, pc, #148	; (adr r3, 8008830 <__ieee754_pow+0x9f8>)
 800879a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800879e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80087a2:	f7f7 ff83 	bl	80006ac <__aeabi_dmul>
 80087a6:	a322      	add	r3, pc, #136	; (adr r3, 8008830 <__ieee754_pow+0x9f8>)
 80087a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ac:	f7ff bbdb 	b.w	8007f66 <__ieee754_pow+0x12e>
 80087b0:	4622      	mov	r2, r4
 80087b2:	462b      	mov	r3, r5
 80087b4:	f7f7 fdc2 	bl	800033c <__aeabi_dsub>
 80087b8:	4642      	mov	r2, r8
 80087ba:	464b      	mov	r3, r9
 80087bc:	f7f8 f9fc 	bl	8000bb8 <__aeabi_dcmpge>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	f43f aef1 	beq.w	80085a8 <__ieee754_pow+0x770>
 80087c6:	e7e7      	b.n	8008798 <__ieee754_pow+0x960>
 80087c8:	f04f 0a00 	mov.w	sl, #0
 80087cc:	e718      	b.n	8008600 <__ieee754_pow+0x7c8>
 80087ce:	4621      	mov	r1, r4
 80087d0:	e7d4      	b.n	800877c <__ieee754_pow+0x944>
 80087d2:	2000      	movs	r0, #0
 80087d4:	491a      	ldr	r1, [pc, #104]	; (8008840 <__ieee754_pow+0xa08>)
 80087d6:	f7ff bb8f 	b.w	8007ef8 <__ieee754_pow+0xc0>
 80087da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80087de:	f7ff bb8b 	b.w	8007ef8 <__ieee754_pow+0xc0>
 80087e2:	4630      	mov	r0, r6
 80087e4:	4639      	mov	r1, r7
 80087e6:	f7ff bb87 	b.w	8007ef8 <__ieee754_pow+0xc0>
 80087ea:	4693      	mov	fp, r2
 80087ec:	f7ff bb98 	b.w	8007f20 <__ieee754_pow+0xe8>
 80087f0:	00000000 	.word	0x00000000
 80087f4:	3fe62e43 	.word	0x3fe62e43
 80087f8:	fefa39ef 	.word	0xfefa39ef
 80087fc:	3fe62e42 	.word	0x3fe62e42
 8008800:	0ca86c39 	.word	0x0ca86c39
 8008804:	be205c61 	.word	0xbe205c61
 8008808:	72bea4d0 	.word	0x72bea4d0
 800880c:	3e663769 	.word	0x3e663769
 8008810:	c5d26bf1 	.word	0xc5d26bf1
 8008814:	3ebbbd41 	.word	0x3ebbbd41
 8008818:	af25de2c 	.word	0xaf25de2c
 800881c:	3f11566a 	.word	0x3f11566a
 8008820:	16bebd93 	.word	0x16bebd93
 8008824:	3f66c16c 	.word	0x3f66c16c
 8008828:	5555553e 	.word	0x5555553e
 800882c:	3fc55555 	.word	0x3fc55555
 8008830:	c2f8f359 	.word	0xc2f8f359
 8008834:	01a56e1f 	.word	0x01a56e1f
 8008838:	3fe00000 	.word	0x3fe00000
 800883c:	000fffff 	.word	0x000fffff
 8008840:	3ff00000 	.word	0x3ff00000
 8008844:	4090cbff 	.word	0x4090cbff
 8008848:	3f6f3400 	.word	0x3f6f3400
 800884c:	652b82fe 	.word	0x652b82fe
 8008850:	3c971547 	.word	0x3c971547

08008854 <__ieee754_sqrt>:
 8008854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008858:	4955      	ldr	r1, [pc, #340]	; (80089b0 <__ieee754_sqrt+0x15c>)
 800885a:	ec55 4b10 	vmov	r4, r5, d0
 800885e:	43a9      	bics	r1, r5
 8008860:	462b      	mov	r3, r5
 8008862:	462a      	mov	r2, r5
 8008864:	d112      	bne.n	800888c <__ieee754_sqrt+0x38>
 8008866:	ee10 2a10 	vmov	r2, s0
 800886a:	ee10 0a10 	vmov	r0, s0
 800886e:	4629      	mov	r1, r5
 8008870:	f7f7 ff1c 	bl	80006ac <__aeabi_dmul>
 8008874:	4602      	mov	r2, r0
 8008876:	460b      	mov	r3, r1
 8008878:	4620      	mov	r0, r4
 800887a:	4629      	mov	r1, r5
 800887c:	f7f7 fd60 	bl	8000340 <__adddf3>
 8008880:	4604      	mov	r4, r0
 8008882:	460d      	mov	r5, r1
 8008884:	ec45 4b10 	vmov	d0, r4, r5
 8008888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800888c:	2d00      	cmp	r5, #0
 800888e:	ee10 0a10 	vmov	r0, s0
 8008892:	4621      	mov	r1, r4
 8008894:	dc0f      	bgt.n	80088b6 <__ieee754_sqrt+0x62>
 8008896:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800889a:	4330      	orrs	r0, r6
 800889c:	d0f2      	beq.n	8008884 <__ieee754_sqrt+0x30>
 800889e:	b155      	cbz	r5, 80088b6 <__ieee754_sqrt+0x62>
 80088a0:	ee10 2a10 	vmov	r2, s0
 80088a4:	4620      	mov	r0, r4
 80088a6:	4629      	mov	r1, r5
 80088a8:	f7f7 fd48 	bl	800033c <__aeabi_dsub>
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	f7f8 f826 	bl	8000900 <__aeabi_ddiv>
 80088b4:	e7e4      	b.n	8008880 <__ieee754_sqrt+0x2c>
 80088b6:	151b      	asrs	r3, r3, #20
 80088b8:	d073      	beq.n	80089a2 <__ieee754_sqrt+0x14e>
 80088ba:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80088be:	07dd      	lsls	r5, r3, #31
 80088c0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80088c4:	bf48      	it	mi
 80088c6:	0fc8      	lsrmi	r0, r1, #31
 80088c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80088cc:	bf44      	itt	mi
 80088ce:	0049      	lslmi	r1, r1, #1
 80088d0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80088d4:	2500      	movs	r5, #0
 80088d6:	1058      	asrs	r0, r3, #1
 80088d8:	0fcb      	lsrs	r3, r1, #31
 80088da:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80088de:	0049      	lsls	r1, r1, #1
 80088e0:	2316      	movs	r3, #22
 80088e2:	462c      	mov	r4, r5
 80088e4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80088e8:	19a7      	adds	r7, r4, r6
 80088ea:	4297      	cmp	r7, r2
 80088ec:	bfde      	ittt	le
 80088ee:	19bc      	addle	r4, r7, r6
 80088f0:	1bd2      	suble	r2, r2, r7
 80088f2:	19ad      	addle	r5, r5, r6
 80088f4:	0fcf      	lsrs	r7, r1, #31
 80088f6:	3b01      	subs	r3, #1
 80088f8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80088fc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008900:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8008904:	d1f0      	bne.n	80088e8 <__ieee754_sqrt+0x94>
 8008906:	f04f 0c20 	mov.w	ip, #32
 800890a:	469e      	mov	lr, r3
 800890c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8008910:	42a2      	cmp	r2, r4
 8008912:	eb06 070e 	add.w	r7, r6, lr
 8008916:	dc02      	bgt.n	800891e <__ieee754_sqrt+0xca>
 8008918:	d112      	bne.n	8008940 <__ieee754_sqrt+0xec>
 800891a:	428f      	cmp	r7, r1
 800891c:	d810      	bhi.n	8008940 <__ieee754_sqrt+0xec>
 800891e:	2f00      	cmp	r7, #0
 8008920:	eb07 0e06 	add.w	lr, r7, r6
 8008924:	da42      	bge.n	80089ac <__ieee754_sqrt+0x158>
 8008926:	f1be 0f00 	cmp.w	lr, #0
 800892a:	db3f      	blt.n	80089ac <__ieee754_sqrt+0x158>
 800892c:	f104 0801 	add.w	r8, r4, #1
 8008930:	1b12      	subs	r2, r2, r4
 8008932:	428f      	cmp	r7, r1
 8008934:	bf88      	it	hi
 8008936:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800893a:	1bc9      	subs	r1, r1, r7
 800893c:	4433      	add	r3, r6
 800893e:	4644      	mov	r4, r8
 8008940:	0052      	lsls	r2, r2, #1
 8008942:	f1bc 0c01 	subs.w	ip, ip, #1
 8008946:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800894a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800894e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8008952:	d1dd      	bne.n	8008910 <__ieee754_sqrt+0xbc>
 8008954:	430a      	orrs	r2, r1
 8008956:	d006      	beq.n	8008966 <__ieee754_sqrt+0x112>
 8008958:	1c5c      	adds	r4, r3, #1
 800895a:	bf13      	iteet	ne
 800895c:	3301      	addne	r3, #1
 800895e:	3501      	addeq	r5, #1
 8008960:	4663      	moveq	r3, ip
 8008962:	f023 0301 	bicne.w	r3, r3, #1
 8008966:	106a      	asrs	r2, r5, #1
 8008968:	085b      	lsrs	r3, r3, #1
 800896a:	07e9      	lsls	r1, r5, #31
 800896c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8008970:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8008974:	bf48      	it	mi
 8008976:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800897a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800897e:	461c      	mov	r4, r3
 8008980:	e780      	b.n	8008884 <__ieee754_sqrt+0x30>
 8008982:	0aca      	lsrs	r2, r1, #11
 8008984:	3815      	subs	r0, #21
 8008986:	0549      	lsls	r1, r1, #21
 8008988:	2a00      	cmp	r2, #0
 800898a:	d0fa      	beq.n	8008982 <__ieee754_sqrt+0x12e>
 800898c:	02d6      	lsls	r6, r2, #11
 800898e:	d50a      	bpl.n	80089a6 <__ieee754_sqrt+0x152>
 8008990:	f1c3 0420 	rsb	r4, r3, #32
 8008994:	fa21 f404 	lsr.w	r4, r1, r4
 8008998:	1e5d      	subs	r5, r3, #1
 800899a:	4099      	lsls	r1, r3
 800899c:	4322      	orrs	r2, r4
 800899e:	1b43      	subs	r3, r0, r5
 80089a0:	e78b      	b.n	80088ba <__ieee754_sqrt+0x66>
 80089a2:	4618      	mov	r0, r3
 80089a4:	e7f0      	b.n	8008988 <__ieee754_sqrt+0x134>
 80089a6:	0052      	lsls	r2, r2, #1
 80089a8:	3301      	adds	r3, #1
 80089aa:	e7ef      	b.n	800898c <__ieee754_sqrt+0x138>
 80089ac:	46a0      	mov	r8, r4
 80089ae:	e7bf      	b.n	8008930 <__ieee754_sqrt+0xdc>
 80089b0:	7ff00000 	.word	0x7ff00000

080089b4 <fabs>:
 80089b4:	ec51 0b10 	vmov	r0, r1, d0
 80089b8:	ee10 2a10 	vmov	r2, s0
 80089bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80089c0:	ec43 2b10 	vmov	d0, r2, r3
 80089c4:	4770      	bx	lr

080089c6 <finite>:
 80089c6:	ee10 3a90 	vmov	r3, s1
 80089ca:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80089ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80089d2:	0fc0      	lsrs	r0, r0, #31
 80089d4:	4770      	bx	lr

080089d6 <matherr>:
 80089d6:	2000      	movs	r0, #0
 80089d8:	4770      	bx	lr
 80089da:	0000      	movs	r0, r0
 80089dc:	0000      	movs	r0, r0
	...

080089e0 <nan>:
 80089e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80089e8 <nan+0x8>
 80089e4:	4770      	bx	lr
 80089e6:	bf00      	nop
 80089e8:	00000000 	.word	0x00000000
 80089ec:	7ff80000 	.word	0x7ff80000

080089f0 <rint>:
 80089f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089f2:	ec51 0b10 	vmov	r0, r1, d0
 80089f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80089fa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80089fe:	2e13      	cmp	r6, #19
 8008a00:	460b      	mov	r3, r1
 8008a02:	ee10 4a10 	vmov	r4, s0
 8008a06:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008a0a:	dc56      	bgt.n	8008aba <rint+0xca>
 8008a0c:	2e00      	cmp	r6, #0
 8008a0e:	da2b      	bge.n	8008a68 <rint+0x78>
 8008a10:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008a14:	4302      	orrs	r2, r0
 8008a16:	d023      	beq.n	8008a60 <rint+0x70>
 8008a18:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008a1c:	4302      	orrs	r2, r0
 8008a1e:	4254      	negs	r4, r2
 8008a20:	4314      	orrs	r4, r2
 8008a22:	0c4b      	lsrs	r3, r1, #17
 8008a24:	0b24      	lsrs	r4, r4, #12
 8008a26:	045b      	lsls	r3, r3, #17
 8008a28:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8008a2c:	ea44 0103 	orr.w	r1, r4, r3
 8008a30:	460b      	mov	r3, r1
 8008a32:	492f      	ldr	r1, [pc, #188]	; (8008af0 <rint+0x100>)
 8008a34:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8008a38:	e9d1 6700 	ldrd	r6, r7, [r1]
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	4639      	mov	r1, r7
 8008a40:	4630      	mov	r0, r6
 8008a42:	f7f7 fc7d 	bl	8000340 <__adddf3>
 8008a46:	e9cd 0100 	strd	r0, r1, [sp]
 8008a4a:	463b      	mov	r3, r7
 8008a4c:	4632      	mov	r2, r6
 8008a4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008a52:	f7f7 fc73 	bl	800033c <__aeabi_dsub>
 8008a56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a5a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8008a5e:	4639      	mov	r1, r7
 8008a60:	ec41 0b10 	vmov	d0, r0, r1
 8008a64:	b003      	add	sp, #12
 8008a66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a68:	4a22      	ldr	r2, [pc, #136]	; (8008af4 <rint+0x104>)
 8008a6a:	4132      	asrs	r2, r6
 8008a6c:	ea01 0702 	and.w	r7, r1, r2
 8008a70:	4307      	orrs	r7, r0
 8008a72:	d0f5      	beq.n	8008a60 <rint+0x70>
 8008a74:	0852      	lsrs	r2, r2, #1
 8008a76:	4011      	ands	r1, r2
 8008a78:	430c      	orrs	r4, r1
 8008a7a:	d00b      	beq.n	8008a94 <rint+0xa4>
 8008a7c:	ea23 0202 	bic.w	r2, r3, r2
 8008a80:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008a84:	2e13      	cmp	r6, #19
 8008a86:	fa43 f306 	asr.w	r3, r3, r6
 8008a8a:	bf0c      	ite	eq
 8008a8c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8008a90:	2400      	movne	r4, #0
 8008a92:	4313      	orrs	r3, r2
 8008a94:	4916      	ldr	r1, [pc, #88]	; (8008af0 <rint+0x100>)
 8008a96:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8008a9a:	4622      	mov	r2, r4
 8008a9c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008aa0:	4620      	mov	r0, r4
 8008aa2:	4629      	mov	r1, r5
 8008aa4:	f7f7 fc4c 	bl	8000340 <__adddf3>
 8008aa8:	e9cd 0100 	strd	r0, r1, [sp]
 8008aac:	4622      	mov	r2, r4
 8008aae:	462b      	mov	r3, r5
 8008ab0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ab4:	f7f7 fc42 	bl	800033c <__aeabi_dsub>
 8008ab8:	e7d2      	b.n	8008a60 <rint+0x70>
 8008aba:	2e33      	cmp	r6, #51	; 0x33
 8008abc:	dd07      	ble.n	8008ace <rint+0xde>
 8008abe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008ac2:	d1cd      	bne.n	8008a60 <rint+0x70>
 8008ac4:	ee10 2a10 	vmov	r2, s0
 8008ac8:	f7f7 fc3a 	bl	8000340 <__adddf3>
 8008acc:	e7c8      	b.n	8008a60 <rint+0x70>
 8008ace:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8008ad2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008ad6:	40f2      	lsrs	r2, r6
 8008ad8:	4210      	tst	r0, r2
 8008ada:	d0c1      	beq.n	8008a60 <rint+0x70>
 8008adc:	0852      	lsrs	r2, r2, #1
 8008ade:	4210      	tst	r0, r2
 8008ae0:	bf1f      	itttt	ne
 8008ae2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8008ae6:	ea20 0202 	bicne.w	r2, r0, r2
 8008aea:	4134      	asrne	r4, r6
 8008aec:	4314      	orrne	r4, r2
 8008aee:	e7d1      	b.n	8008a94 <rint+0xa4>
 8008af0:	080091f0 	.word	0x080091f0
 8008af4:	000fffff 	.word	0x000fffff

08008af8 <scalbn>:
 8008af8:	b570      	push	{r4, r5, r6, lr}
 8008afa:	ec55 4b10 	vmov	r4, r5, d0
 8008afe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008b02:	4606      	mov	r6, r0
 8008b04:	462b      	mov	r3, r5
 8008b06:	b9aa      	cbnz	r2, 8008b34 <scalbn+0x3c>
 8008b08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008b0c:	4323      	orrs	r3, r4
 8008b0e:	d03b      	beq.n	8008b88 <scalbn+0x90>
 8008b10:	4b31      	ldr	r3, [pc, #196]	; (8008bd8 <scalbn+0xe0>)
 8008b12:	4629      	mov	r1, r5
 8008b14:	2200      	movs	r2, #0
 8008b16:	ee10 0a10 	vmov	r0, s0
 8008b1a:	f7f7 fdc7 	bl	80006ac <__aeabi_dmul>
 8008b1e:	4b2f      	ldr	r3, [pc, #188]	; (8008bdc <scalbn+0xe4>)
 8008b20:	429e      	cmp	r6, r3
 8008b22:	4604      	mov	r4, r0
 8008b24:	460d      	mov	r5, r1
 8008b26:	da12      	bge.n	8008b4e <scalbn+0x56>
 8008b28:	a327      	add	r3, pc, #156	; (adr r3, 8008bc8 <scalbn+0xd0>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f7f7 fdbd 	bl	80006ac <__aeabi_dmul>
 8008b32:	e009      	b.n	8008b48 <scalbn+0x50>
 8008b34:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008b38:	428a      	cmp	r2, r1
 8008b3a:	d10c      	bne.n	8008b56 <scalbn+0x5e>
 8008b3c:	ee10 2a10 	vmov	r2, s0
 8008b40:	4620      	mov	r0, r4
 8008b42:	4629      	mov	r1, r5
 8008b44:	f7f7 fbfc 	bl	8000340 <__adddf3>
 8008b48:	4604      	mov	r4, r0
 8008b4a:	460d      	mov	r5, r1
 8008b4c:	e01c      	b.n	8008b88 <scalbn+0x90>
 8008b4e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008b52:	460b      	mov	r3, r1
 8008b54:	3a36      	subs	r2, #54	; 0x36
 8008b56:	4432      	add	r2, r6
 8008b58:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008b5c:	428a      	cmp	r2, r1
 8008b5e:	dd0b      	ble.n	8008b78 <scalbn+0x80>
 8008b60:	ec45 4b11 	vmov	d1, r4, r5
 8008b64:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008bd0 <scalbn+0xd8>
 8008b68:	f000 f83c 	bl	8008be4 <copysign>
 8008b6c:	a318      	add	r3, pc, #96	; (adr r3, 8008bd0 <scalbn+0xd8>)
 8008b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b72:	ec51 0b10 	vmov	r0, r1, d0
 8008b76:	e7da      	b.n	8008b2e <scalbn+0x36>
 8008b78:	2a00      	cmp	r2, #0
 8008b7a:	dd08      	ble.n	8008b8e <scalbn+0x96>
 8008b7c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008b80:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008b84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008b88:	ec45 4b10 	vmov	d0, r4, r5
 8008b8c:	bd70      	pop	{r4, r5, r6, pc}
 8008b8e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008b92:	da0d      	bge.n	8008bb0 <scalbn+0xb8>
 8008b94:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008b98:	429e      	cmp	r6, r3
 8008b9a:	ec45 4b11 	vmov	d1, r4, r5
 8008b9e:	dce1      	bgt.n	8008b64 <scalbn+0x6c>
 8008ba0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008bc8 <scalbn+0xd0>
 8008ba4:	f000 f81e 	bl	8008be4 <copysign>
 8008ba8:	a307      	add	r3, pc, #28	; (adr r3, 8008bc8 <scalbn+0xd0>)
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	e7e0      	b.n	8008b72 <scalbn+0x7a>
 8008bb0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008bb4:	3236      	adds	r2, #54	; 0x36
 8008bb6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008bba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008bbe:	4620      	mov	r0, r4
 8008bc0:	4629      	mov	r1, r5
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <scalbn+0xe8>)
 8008bc6:	e7b2      	b.n	8008b2e <scalbn+0x36>
 8008bc8:	c2f8f359 	.word	0xc2f8f359
 8008bcc:	01a56e1f 	.word	0x01a56e1f
 8008bd0:	8800759c 	.word	0x8800759c
 8008bd4:	7e37e43c 	.word	0x7e37e43c
 8008bd8:	43500000 	.word	0x43500000
 8008bdc:	ffff3cb0 	.word	0xffff3cb0
 8008be0:	3c900000 	.word	0x3c900000

08008be4 <copysign>:
 8008be4:	ec51 0b10 	vmov	r0, r1, d0
 8008be8:	ee11 0a90 	vmov	r0, s3
 8008bec:	ee10 2a10 	vmov	r2, s0
 8008bf0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008bf4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008bf8:	ea41 0300 	orr.w	r3, r1, r0
 8008bfc:	ec43 2b10 	vmov	d0, r2, r3
 8008c00:	4770      	bx	lr
	...

08008c04 <_init>:
 8008c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c06:	bf00      	nop
 8008c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c0a:	bc08      	pop	{r3}
 8008c0c:	469e      	mov	lr, r3
 8008c0e:	4770      	bx	lr

08008c10 <_fini>:
 8008c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c12:	bf00      	nop
 8008c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008c16:	bc08      	pop	{r3}
 8008c18:	469e      	mov	lr, r3
 8008c1a:	4770      	bx	lr
