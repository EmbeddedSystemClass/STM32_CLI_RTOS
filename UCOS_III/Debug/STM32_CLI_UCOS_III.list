
STM32_CLI_UCOS_III.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  0800a570  0800a570  0001a570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800abe8  0800abe8  00020a34  2**0
                  CONTENTS
  4 .ARM          00000008  0800abe8  0800abe8  0001abe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800abf0  0800abf0  00020a34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800abf0  0800abf0  0001abf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800abf8  0800abf8  0001abf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a34  20000000  0800abfc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f24  20000a34  0800b630  00020a34  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003958  0800b630  00023958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a34  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ddb8  00000000  00000000  00020a64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005797  00000000  00000000  0004e81c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000126ef  00000000  00000000  00053fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000f40  00000000  00000000  000666a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002010  00000000  00000000  000675e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a1ed  00000000  00000000  000695f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000f745  00000000  00000000  000837e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00093335  00000000  00000000  00092f2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0012625f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003d38  00000000  00000000  001262dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000a34 	.word	0x20000a34
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a554 	.word	0x0800a554

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000a38 	.word	0x20000a38
 80001dc:	0800a554 	.word	0x0800a554

080001e0 <CPU_IntDis>:
@              void  CPU_IntEn (void);
@********************************************************************************************************

.thumb_func
CPU_IntDis:
        CPSID   I
 80001e0:	b672      	cpsid	i
        BX      LR
 80001e2:	4770      	bx	lr

080001e4 <CPU_IntEn>:

.thumb_func
CPU_IntEn:
        CPSIE   I
 80001e4:	b662      	cpsie	i
        BX      LR
 80001e6:	4770      	bx	lr

080001e8 <CPU_SR_Save>:
@                       }
@********************************************************************************************************

.thumb_func
CPU_SR_Save:
        MRS     R0, PRIMASK                     @ Set prio int mask to mask all (except faults)
 80001e8:	f3ef 8010 	mrs	r0, PRIMASK
        CPSID   I
 80001ec:	b672      	cpsid	i
        BX      LR
 80001ee:	4770      	bx	lr

080001f0 <CPU_SR_Restore>:

.thumb_func
CPU_SR_Restore:                                  @ See Note #2.
        MSR     PRIMASK, R0
 80001f0:	f380 8810 	msr	PRIMASK, r0
        BX      LR
 80001f4:	4770      	bx	lr

080001f6 <CPU_WaitForInt>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForInt:
        WFI                                     @ Wait for interrupt
 80001f6:	bf30      	wfi
        BX      LR
 80001f8:	4770      	bx	lr

080001fa <CPU_WaitForExcept>:
@ Argument(s) : none.
@********************************************************************************************************

.thumb_func
CPU_WaitForExcept:
        WFE                                     @ Wait for exception
 80001fa:	bf20      	wfe
        BX      LR
 80001fc:	4770      	bx	lr

080001fe <CPU_CntLeadZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntLeadZeros:
        CLZ     R0, R0                          @ Count leading zeros
 80001fe:	fab0 f080 	clz	r0, r0
        BX      LR
 8000202:	4770      	bx	lr

08000204 <CPU_CntTrailZeros>:
@                   #define'd in 'cpu_cfg.h' or 'cpu.h'.
@********************************************************************************************************

.thumb_func
CPU_CntTrailZeros:
        RBIT    R0, R0                          @ Reverse bits
 8000204:	fa90 f0a0 	rbit	r0, r0
        CLZ     R0, R0                          @ Count trailing zeros
 8000208:	fab0 f080 	clz	r0, r0
        BX      LR
 800020c:	4770      	bx	lr

0800020e <CPU_RevBits>:
@                       'val's final bit  N       =  'val's original bit  0
@********************************************************************************************************

.thumb_func
CPU_RevBits:
        RBIT    R0, R0                          @ Reverse bits
 800020e:	fa90 f0a0 	rbit	r0, r0
        BX      LR
 8000212:	4770      	bx	lr

08000214 <OS_CPU_FP_Reg_Push>:
@              d) Update OSTCBCurPtr->StkPtr;
@********************************************************************************************************

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
OS_CPU_FP_Reg_Push:
    MRS     R1, PSP                                             @ PSP is process stack pointer
 8000214:	f3ef 8109 	mrs	r1, PSP
    CBZ     R1, OS_CPU_FP_nosave                                @ Skip FP register save the first time
 8000218:	b141      	cbz	r1, 800022c <OS_CPU_FP_nosave>

    VMRS    R1, FPSCR
 800021a:	eef1 1a10 	vmrs	r1, fpscr
    STR R1, [R0, #-4]!
 800021e:	f840 1d04 	str.w	r1, [r0, #-4]!
    VSTMDB  R0!, {S0-S31}
 8000222:	ed20 0a20 	vstmdb	r0!, {s0-s31}
    LDR     R1, =OSTCBCurPtr
 8000226:	493b      	ldr	r1, [pc, #236]	; (8000314 <OS_CPU_PendSVHandler+0x50>)
    LDR     R2, [R1]
 8000228:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 800022a:	6010      	str	r0, [r2, #0]

0800022c <OS_CPU_FP_nosave>:
OS_CPU_FP_nosave:
    BX      LR
 800022c:	4770      	bx	lr

0800022e <OS_CPU_FP_Reg_Pop>:
@              c) Update OSTCBHighRdyPtr->StkPtr pointer of new proces stack;
@********************************************************************************************************

#if (defined(__VFP_FP__) && !defined(__SOFTFP__))
OS_CPU_FP_Reg_Pop:
    VLDMIA  R0!, {S0-S31}
 800022e:	ecb0 0a20 	vldmia	r0!, {s0-s31}
    LDMIA   R0!, {R1}
 8000232:	c802      	ldmia	r0!, {r1}
    VMSR    FPSCR, R1
 8000234:	eee1 1a10 	vmsr	fpscr, r1
    LDR     R1, =OSTCBHighRdyPtr
 8000238:	4937      	ldr	r1, [pc, #220]	; (8000318 <OS_CPU_PendSVHandler+0x54>)
    LDR     R2, [R1]
 800023a:	680a      	ldr	r2, [r1, #0]
    STR     R0, [R2]
 800023c:	6010      	str	r0, [r2, #0]
    BX      LR
 800023e:	4770      	bx	lr

08000240 <OSStartHighRdy>:
@              e) Enable interrupts (tasks will run with interrupts enabled).
@********************************************************************************************************

.thumb_func
OSStartHighRdy:
    CPSID   I                                                   @ Prevent interruption during context switch
 8000240:	b672      	cpsid	i
    MOVW    R0, #:lower16:NVIC_SYSPRI14                         @ Set the PendSV exception priority
 8000242:	f64e 5022 	movw	r0, #60706	; 0xed22
    MOVT    R0, #:upper16:NVIC_SYSPRI14
 8000246:	f2ce 0000 	movt	r0, #57344	; 0xe000

    MOVW    R1, #:lower16:NVIC_PENDSV_PRI
 800024a:	f240 01ff 	movw	r1, #255	; 0xff
    MOVT    R1, #:upper16:NVIC_PENDSV_PRI
 800024e:	f2c0 0100 	movt	r1, #0
    STRB    R1, [R0]
 8000252:	7001      	strb	r1, [r0, #0]

    MOVW    R0, #:lower16:OS_CPU_ExceptStkBase                  @ Initialize the MSP to the OS_CPU_ExceptStkBase
 8000254:	f642 1050 	movw	r0, #10576	; 0x2950
    MOVT    R0, #:upper16:OS_CPU_ExceptStkBase
 8000258:	f2c2 0000 	movt	r0, #8192	; 0x2000
    LDR     R1, [R0]
 800025c:	6801      	ldr	r1, [r0, #0]
    MSR     MSP, R1
 800025e:	f381 8808 	msr	MSP, r1

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 8000262:	f243 6024 	movw	r0, #13860	; 0x3624
    MOVT    R0, #:upper16:OSPrioCur
 8000266:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 800026a:	f243 611c 	movw	r1, #13852	; 0x361c
    MOVT    R1, #:upper16:OSPrioHighRdy
 800026e:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 8000272:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 8000274:	7002      	strb	r2, [r0, #0]

    MOVW    R5, #:lower16:OSTCBCurPtr
 8000276:	f243 65ec 	movw	r5, #14060	; 0x36ec
    MOVT    R5, #:upper16:OSTCBCurPtr
 800027a:	f2c2 0500 	movt	r5, #8192	; 0x2000
    MOVW    R1, #:lower16:OSTCBHighRdyPtr                       @ OSTCBCurPtr = OSTCBHighRdyPtr;
 800027e:	f243 61f4 	movw	r1, #14068	; 0x36f4
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 8000282:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 8000286:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 8000288:	602a      	str	r2, [r5, #0]

    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 800028a:	6810      	ldr	r0, [r2, #0]
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800028c:	f380 8809 	msr	PSP, r0

    MRS     R0, CONTROL
 8000290:	f3ef 8014 	mrs	r0, CONTROL
    ORR     R0, R0, #2
 8000294:	f040 0002 	orr.w	r0, r0, #2
    MSR     CONTROL, R0
 8000298:	f380 8814 	msr	CONTROL, r0
    ISB                                                         @ Sync instruction stream
 800029c:	f3bf 8f6f 	isb	sy

    LDMFD    SP!, {R4-R11}                                      @ Restore r4-11 from new process stack
 80002a0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
    LDMFD    SP!, {R0-R3}                                       @ Restore r0, r3
 80002a4:	bc0f      	pop	{r0, r1, r2, r3}
    LDMFD    SP!, {R12, LR}                                     @ Load R12 and LR
 80002a6:	e8bd 5000 	ldmia.w	sp!, {ip, lr}
    LDMFD    SP!, {R1, R2}                                      @ Load PC and discard xPSR
 80002aa:	bc06      	pop	{r1, r2}
    CPSIE    I
 80002ac:	b662      	cpsie	i
    BX       R1
 80002ae:	4708      	bx	r1

080002b0 <OSCtxSw>:
@              triggers the PendSV exception which is where the real work is done.
@********************************************************************************************************

.thumb_func
OSCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002b0:	481a      	ldr	r0, [pc, #104]	; (800031c <OS_CPU_PendSVHandler+0x58>)
    LDR     R1, =NVIC_PENDSVSET
 80002b2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 80002b6:	6001      	str	r1, [r0, #0]
    BX      LR
 80002b8:	4770      	bx	lr

080002ba <OSIntCtxSw>:
@              be handled when there are no more interrupts active and interrupts are enabled.
@********************************************************************************************************

.thumb_func
OSIntCtxSw:
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 80002ba:	4818      	ldr	r0, [pc, #96]	; (800031c <OS_CPU_PendSVHandler+0x58>)
    LDR     R1, =NVIC_PENDSVSET
 80002bc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    STR     R1, [R0]
 80002c0:	6001      	str	r1, [r0, #0]
    BX      LR
 80002c2:	4770      	bx	lr

080002c4 <OS_CPU_PendSVHandler>:
@              therefore safe to assume that context being switched out was using the process stack (PSP).
@********************************************************************************************************

.thumb_func
OS_CPU_PendSVHandler:
    CPSID   I                                                   @ Prevent interruption during context switch
 80002c4:	b672      	cpsid	i
    MRS     R0, PSP                                             @ PSP is process stack pointer
 80002c6:	f3ef 8009 	mrs	r0, PSP
    STMFD   R0!, {R4-R11}                                       @ Save remaining regs r4-11 on process stack
 80002ca:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}

    MOVW    R5, #:lower16:OSTCBCurPtr                           @ OSTCBCurPtr->OSTCBStkPtr = SP;
 80002ce:	f243 65ec 	movw	r5, #14060	; 0x36ec
    MOVT    R5, #:upper16:OSTCBCurPtr
 80002d2:	f2c2 0500 	movt	r5, #8192	; 0x2000
    LDR     R6, [R5]
 80002d6:	682e      	ldr	r6, [r5, #0]
    STR     R0, [R6]                                            @ R0 is SP of process being switched out
 80002d8:	6030      	str	r0, [r6, #0]

                                                                @ At this point, entire context of process has been saved
    MOV     R4, LR                                              @ Save LR exc_return value
 80002da:	4674      	mov	r4, lr
    BL      OSTaskSwHook                                        @ OSTaskSwHook();
 80002dc:	f002 fcdc 	bl	8002c98 <OSTaskSwHook>

    MOVW    R0, #:lower16:OSPrioCur                             @ OSPrioCur   = OSPrioHighRdy;
 80002e0:	f243 6024 	movw	r0, #13860	; 0x3624
    MOVT    R0, #:upper16:OSPrioCur
 80002e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
    MOVW    R1, #:lower16:OSPrioHighRdy
 80002e8:	f243 611c 	movw	r1, #13852	; 0x361c
    MOVT    R1, #:upper16:OSPrioHighRdy
 80002ec:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDRB    R2, [R1]
 80002f0:	780a      	ldrb	r2, [r1, #0]
    STRB    R2, [R0]
 80002f2:	7002      	strb	r2, [r0, #0]

    MOVW    R1, #:lower16:OSTCBHighRdyPtr                      @ OSTCBCurPtr = OSTCBHighRdyPtr;
 80002f4:	f243 61f4 	movw	r1, #14068	; 0x36f4
    MOVT    R1, #:upper16:OSTCBHighRdyPtr
 80002f8:	f2c2 0100 	movt	r1, #8192	; 0x2000
    LDR     R2, [R1]
 80002fc:	680a      	ldr	r2, [r1, #0]
    STR     R2, [R5]
 80002fe:	602a      	str	r2, [r5, #0]

    ORR     LR, R4, #0xF4                                       @ Ensure exception return uses process stack
 8000300:	f044 0ef4 	orr.w	lr, r4, #244	; 0xf4
    LDR     R0, [R2]                                            @ R0 is new process SP; SP = OSTCBHighRdyPtr->StkPtr;
 8000304:	6810      	ldr	r0, [r2, #0]
    LDMFD   R0!, {R4-R11}                                       @ Restore r4-11 from new process stack
 8000306:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, R0                                             @ Load PSP with new process SP
 800030a:	f380 8809 	msr	PSP, r0
    CPSIE   I
 800030e:	b662      	cpsie	i
    BX      LR                                                  @ Exception return will restore remaining context
 8000310:	4770      	bx	lr
 8000312:	0000      	.short	0x0000
    LDR     R1, =OSTCBCurPtr
 8000314:	200036ec 	.word	0x200036ec
    LDR     R1, =OSTCBHighRdyPtr
 8000318:	200036f4 	.word	0x200036f4
    LDR     R0, =NVIC_INT_CTRL                                  @ Trigger the PendSV exception (causes context switch)
 800031c:	e000ed04 	.word	0xe000ed04

08000320 <strlen>:
 8000320:	4603      	mov	r3, r0
 8000322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000326:	2a00      	cmp	r2, #0
 8000328:	d1fb      	bne.n	8000322 <strlen+0x2>
 800032a:	1a18      	subs	r0, r3, r0
 800032c:	3801      	subs	r0, #1
 800032e:	4770      	bx	lr

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <__aeabi_drsub>:
 80003d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003d4:	e002      	b.n	80003dc <__adddf3>
 80003d6:	bf00      	nop

080003d8 <__aeabi_dsub>:
 80003d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003dc <__adddf3>:
 80003dc:	b530      	push	{r4, r5, lr}
 80003de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	bf1f      	itttt	ne
 80003f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000402:	f000 80e2 	beq.w	80005ca <__adddf3+0x1ee>
 8000406:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800040a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800040e:	bfb8      	it	lt
 8000410:	426d      	neglt	r5, r5
 8000412:	dd0c      	ble.n	800042e <__adddf3+0x52>
 8000414:	442c      	add	r4, r5
 8000416:	ea80 0202 	eor.w	r2, r0, r2
 800041a:	ea81 0303 	eor.w	r3, r1, r3
 800041e:	ea82 0000 	eor.w	r0, r2, r0
 8000422:	ea83 0101 	eor.w	r1, r3, r1
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	2d36      	cmp	r5, #54	; 0x36
 8000430:	bf88      	it	hi
 8000432:	bd30      	pophi	{r4, r5, pc}
 8000434:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000438:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800043c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000440:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000444:	d002      	beq.n	800044c <__adddf3+0x70>
 8000446:	4240      	negs	r0, r0
 8000448:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800044c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000450:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000454:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000458:	d002      	beq.n	8000460 <__adddf3+0x84>
 800045a:	4252      	negs	r2, r2
 800045c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000460:	ea94 0f05 	teq	r4, r5
 8000464:	f000 80a7 	beq.w	80005b6 <__adddf3+0x1da>
 8000468:	f1a4 0401 	sub.w	r4, r4, #1
 800046c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000470:	db0d      	blt.n	800048e <__adddf3+0xb2>
 8000472:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000476:	fa22 f205 	lsr.w	r2, r2, r5
 800047a:	1880      	adds	r0, r0, r2
 800047c:	f141 0100 	adc.w	r1, r1, #0
 8000480:	fa03 f20e 	lsl.w	r2, r3, lr
 8000484:	1880      	adds	r0, r0, r2
 8000486:	fa43 f305 	asr.w	r3, r3, r5
 800048a:	4159      	adcs	r1, r3
 800048c:	e00e      	b.n	80004ac <__adddf3+0xd0>
 800048e:	f1a5 0520 	sub.w	r5, r5, #32
 8000492:	f10e 0e20 	add.w	lr, lr, #32
 8000496:	2a01      	cmp	r2, #1
 8000498:	fa03 fc0e 	lsl.w	ip, r3, lr
 800049c:	bf28      	it	cs
 800049e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004a2:	fa43 f305 	asr.w	r3, r3, r5
 80004a6:	18c0      	adds	r0, r0, r3
 80004a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004b0:	d507      	bpl.n	80004c2 <__adddf3+0xe6>
 80004b2:	f04f 0e00 	mov.w	lr, #0
 80004b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004be:	eb6e 0101 	sbc.w	r1, lr, r1
 80004c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004c6:	d31b      	bcc.n	8000500 <__adddf3+0x124>
 80004c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004cc:	d30c      	bcc.n	80004e8 <__adddf3+0x10c>
 80004ce:	0849      	lsrs	r1, r1, #1
 80004d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004d8:	f104 0401 	add.w	r4, r4, #1
 80004dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004e4:	f080 809a 	bcs.w	800061c <__adddf3+0x240>
 80004e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004ec:	bf08      	it	eq
 80004ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004f2:	f150 0000 	adcs.w	r0, r0, #0
 80004f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004fa:	ea41 0105 	orr.w	r1, r1, r5
 80004fe:	bd30      	pop	{r4, r5, pc}
 8000500:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000504:	4140      	adcs	r0, r0
 8000506:	eb41 0101 	adc.w	r1, r1, r1
 800050a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800050e:	f1a4 0401 	sub.w	r4, r4, #1
 8000512:	d1e9      	bne.n	80004e8 <__adddf3+0x10c>
 8000514:	f091 0f00 	teq	r1, #0
 8000518:	bf04      	itt	eq
 800051a:	4601      	moveq	r1, r0
 800051c:	2000      	moveq	r0, #0
 800051e:	fab1 f381 	clz	r3, r1
 8000522:	bf08      	it	eq
 8000524:	3320      	addeq	r3, #32
 8000526:	f1a3 030b 	sub.w	r3, r3, #11
 800052a:	f1b3 0220 	subs.w	r2, r3, #32
 800052e:	da0c      	bge.n	800054a <__adddf3+0x16e>
 8000530:	320c      	adds	r2, #12
 8000532:	dd08      	ble.n	8000546 <__adddf3+0x16a>
 8000534:	f102 0c14 	add.w	ip, r2, #20
 8000538:	f1c2 020c 	rsb	r2, r2, #12
 800053c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000540:	fa21 f102 	lsr.w	r1, r1, r2
 8000544:	e00c      	b.n	8000560 <__adddf3+0x184>
 8000546:	f102 0214 	add.w	r2, r2, #20
 800054a:	bfd8      	it	le
 800054c:	f1c2 0c20 	rsble	ip, r2, #32
 8000550:	fa01 f102 	lsl.w	r1, r1, r2
 8000554:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000558:	bfdc      	itt	le
 800055a:	ea41 010c 	orrle.w	r1, r1, ip
 800055e:	4090      	lslle	r0, r2
 8000560:	1ae4      	subs	r4, r4, r3
 8000562:	bfa2      	ittt	ge
 8000564:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000568:	4329      	orrge	r1, r5
 800056a:	bd30      	popge	{r4, r5, pc}
 800056c:	ea6f 0404 	mvn.w	r4, r4
 8000570:	3c1f      	subs	r4, #31
 8000572:	da1c      	bge.n	80005ae <__adddf3+0x1d2>
 8000574:	340c      	adds	r4, #12
 8000576:	dc0e      	bgt.n	8000596 <__adddf3+0x1ba>
 8000578:	f104 0414 	add.w	r4, r4, #20
 800057c:	f1c4 0220 	rsb	r2, r4, #32
 8000580:	fa20 f004 	lsr.w	r0, r0, r4
 8000584:	fa01 f302 	lsl.w	r3, r1, r2
 8000588:	ea40 0003 	orr.w	r0, r0, r3
 800058c:	fa21 f304 	lsr.w	r3, r1, r4
 8000590:	ea45 0103 	orr.w	r1, r5, r3
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f1c4 040c 	rsb	r4, r4, #12
 800059a:	f1c4 0220 	rsb	r2, r4, #32
 800059e:	fa20 f002 	lsr.w	r0, r0, r2
 80005a2:	fa01 f304 	lsl.w	r3, r1, r4
 80005a6:	ea40 0003 	orr.w	r0, r0, r3
 80005aa:	4629      	mov	r1, r5
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	fa21 f004 	lsr.w	r0, r1, r4
 80005b2:	4629      	mov	r1, r5
 80005b4:	bd30      	pop	{r4, r5, pc}
 80005b6:	f094 0f00 	teq	r4, #0
 80005ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005be:	bf06      	itte	eq
 80005c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005c4:	3401      	addeq	r4, #1
 80005c6:	3d01      	subne	r5, #1
 80005c8:	e74e      	b.n	8000468 <__adddf3+0x8c>
 80005ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ce:	bf18      	it	ne
 80005d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005d4:	d029      	beq.n	800062a <__adddf3+0x24e>
 80005d6:	ea94 0f05 	teq	r4, r5
 80005da:	bf08      	it	eq
 80005dc:	ea90 0f02 	teqeq	r0, r2
 80005e0:	d005      	beq.n	80005ee <__adddf3+0x212>
 80005e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005e6:	bf04      	itt	eq
 80005e8:	4619      	moveq	r1, r3
 80005ea:	4610      	moveq	r0, r2
 80005ec:	bd30      	pop	{r4, r5, pc}
 80005ee:	ea91 0f03 	teq	r1, r3
 80005f2:	bf1e      	ittt	ne
 80005f4:	2100      	movne	r1, #0
 80005f6:	2000      	movne	r0, #0
 80005f8:	bd30      	popne	{r4, r5, pc}
 80005fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005fe:	d105      	bne.n	800060c <__adddf3+0x230>
 8000600:	0040      	lsls	r0, r0, #1
 8000602:	4149      	adcs	r1, r1
 8000604:	bf28      	it	cs
 8000606:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800060a:	bd30      	pop	{r4, r5, pc}
 800060c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000610:	bf3c      	itt	cc
 8000612:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000616:	bd30      	popcc	{r4, r5, pc}
 8000618:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800061c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000620:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000624:	f04f 0000 	mov.w	r0, #0
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062e:	bf1a      	itte	ne
 8000630:	4619      	movne	r1, r3
 8000632:	4610      	movne	r0, r2
 8000634:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000638:	bf1c      	itt	ne
 800063a:	460b      	movne	r3, r1
 800063c:	4602      	movne	r2, r0
 800063e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000642:	bf06      	itte	eq
 8000644:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000648:	ea91 0f03 	teqeq	r1, r3
 800064c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	bf00      	nop

08000654 <__aeabi_ui2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000668:	f04f 0500 	mov.w	r5, #0
 800066c:	f04f 0100 	mov.w	r1, #0
 8000670:	e750      	b.n	8000514 <__adddf3+0x138>
 8000672:	bf00      	nop

08000674 <__aeabi_i2d>:
 8000674:	f090 0f00 	teq	r0, #0
 8000678:	bf04      	itt	eq
 800067a:	2100      	moveq	r1, #0
 800067c:	4770      	bxeq	lr
 800067e:	b530      	push	{r4, r5, lr}
 8000680:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000684:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000688:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800068c:	bf48      	it	mi
 800068e:	4240      	negmi	r0, r0
 8000690:	f04f 0100 	mov.w	r1, #0
 8000694:	e73e      	b.n	8000514 <__adddf3+0x138>
 8000696:	bf00      	nop

08000698 <__aeabi_f2d>:
 8000698:	0042      	lsls	r2, r0, #1
 800069a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800069e:	ea4f 0131 	mov.w	r1, r1, rrx
 80006a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006a6:	bf1f      	itttt	ne
 80006a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006b4:	4770      	bxne	lr
 80006b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ba:	bf08      	it	eq
 80006bc:	4770      	bxeq	lr
 80006be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006c2:	bf04      	itt	eq
 80006c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	e71c      	b.n	8000514 <__adddf3+0x138>
 80006da:	bf00      	nop

080006dc <__aeabi_ul2d>:
 80006dc:	ea50 0201 	orrs.w	r2, r0, r1
 80006e0:	bf08      	it	eq
 80006e2:	4770      	bxeq	lr
 80006e4:	b530      	push	{r4, r5, lr}
 80006e6:	f04f 0500 	mov.w	r5, #0
 80006ea:	e00a      	b.n	8000702 <__aeabi_l2d+0x16>

080006ec <__aeabi_l2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006fa:	d502      	bpl.n	8000702 <__aeabi_l2d+0x16>
 80006fc:	4240      	negs	r0, r0
 80006fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000702:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000706:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800070a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800070e:	f43f aed8 	beq.w	80004c2 <__adddf3+0xe6>
 8000712:	f04f 0203 	mov.w	r2, #3
 8000716:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800071a:	bf18      	it	ne
 800071c:	3203      	addne	r2, #3
 800071e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000722:	bf18      	it	ne
 8000724:	3203      	addne	r2, #3
 8000726:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800072a:	f1c2 0320 	rsb	r3, r2, #32
 800072e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000732:	fa20 f002 	lsr.w	r0, r0, r2
 8000736:	fa01 fe03 	lsl.w	lr, r1, r3
 800073a:	ea40 000e 	orr.w	r0, r0, lr
 800073e:	fa21 f102 	lsr.w	r1, r1, r2
 8000742:	4414      	add	r4, r2
 8000744:	e6bd      	b.n	80004c2 <__adddf3+0xe6>
 8000746:	bf00      	nop

08000748 <__aeabi_dmul>:
 8000748:	b570      	push	{r4, r5, r6, lr}
 800074a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800074e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000752:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000756:	bf1d      	ittte	ne
 8000758:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800075c:	ea94 0f0c 	teqne	r4, ip
 8000760:	ea95 0f0c 	teqne	r5, ip
 8000764:	f000 f8de 	bleq	8000924 <__aeabi_dmul+0x1dc>
 8000768:	442c      	add	r4, r5
 800076a:	ea81 0603 	eor.w	r6, r1, r3
 800076e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000772:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000776:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800077a:	bf18      	it	ne
 800077c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000780:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000784:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000788:	d038      	beq.n	80007fc <__aeabi_dmul+0xb4>
 800078a:	fba0 ce02 	umull	ip, lr, r0, r2
 800078e:	f04f 0500 	mov.w	r5, #0
 8000792:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000796:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800079a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800079e:	f04f 0600 	mov.w	r6, #0
 80007a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80007a6:	f09c 0f00 	teq	ip, #0
 80007aa:	bf18      	it	ne
 80007ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80007b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80007b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80007b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80007bc:	d204      	bcs.n	80007c8 <__aeabi_dmul+0x80>
 80007be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80007c2:	416d      	adcs	r5, r5
 80007c4:	eb46 0606 	adc.w	r6, r6, r6
 80007c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80007cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80007d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80007d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80007d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80007dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80007e0:	bf88      	it	hi
 80007e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80007e6:	d81e      	bhi.n	8000826 <__aeabi_dmul+0xde>
 80007e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80007ec:	bf08      	it	eq
 80007ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007f2:	f150 0000 	adcs.w	r0, r0, #0
 80007f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000800:	ea46 0101 	orr.w	r1, r6, r1
 8000804:	ea40 0002 	orr.w	r0, r0, r2
 8000808:	ea81 0103 	eor.w	r1, r1, r3
 800080c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000810:	bfc2      	ittt	gt
 8000812:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000816:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800081a:	bd70      	popgt	{r4, r5, r6, pc}
 800081c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000820:	f04f 0e00 	mov.w	lr, #0
 8000824:	3c01      	subs	r4, #1
 8000826:	f300 80ab 	bgt.w	8000980 <__aeabi_dmul+0x238>
 800082a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800082e:	bfde      	ittt	le
 8000830:	2000      	movle	r0, #0
 8000832:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000836:	bd70      	pople	{r4, r5, r6, pc}
 8000838:	f1c4 0400 	rsb	r4, r4, #0
 800083c:	3c20      	subs	r4, #32
 800083e:	da35      	bge.n	80008ac <__aeabi_dmul+0x164>
 8000840:	340c      	adds	r4, #12
 8000842:	dc1b      	bgt.n	800087c <__aeabi_dmul+0x134>
 8000844:	f104 0414 	add.w	r4, r4, #20
 8000848:	f1c4 0520 	rsb	r5, r4, #32
 800084c:	fa00 f305 	lsl.w	r3, r0, r5
 8000850:	fa20 f004 	lsr.w	r0, r0, r4
 8000854:	fa01 f205 	lsl.w	r2, r1, r5
 8000858:	ea40 0002 	orr.w	r0, r0, r2
 800085c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000860:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000864:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000868:	fa21 f604 	lsr.w	r6, r1, r4
 800086c:	eb42 0106 	adc.w	r1, r2, r6
 8000870:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000874:	bf08      	it	eq
 8000876:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	f1c4 040c 	rsb	r4, r4, #12
 8000880:	f1c4 0520 	rsb	r5, r4, #32
 8000884:	fa00 f304 	lsl.w	r3, r0, r4
 8000888:	fa20 f005 	lsr.w	r0, r0, r5
 800088c:	fa01 f204 	lsl.w	r2, r1, r4
 8000890:	ea40 0002 	orr.w	r0, r0, r2
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000898:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800089c:	f141 0100 	adc.w	r1, r1, #0
 80008a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008a4:	bf08      	it	eq
 80008a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008aa:	bd70      	pop	{r4, r5, r6, pc}
 80008ac:	f1c4 0520 	rsb	r5, r4, #32
 80008b0:	fa00 f205 	lsl.w	r2, r0, r5
 80008b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80008b8:	fa20 f304 	lsr.w	r3, r0, r4
 80008bc:	fa01 f205 	lsl.w	r2, r1, r5
 80008c0:	ea43 0302 	orr.w	r3, r3, r2
 80008c4:	fa21 f004 	lsr.w	r0, r1, r4
 80008c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008cc:	fa21 f204 	lsr.w	r2, r1, r4
 80008d0:	ea20 0002 	bic.w	r0, r0, r2
 80008d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80008d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80008dc:	bf08      	it	eq
 80008de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
 80008e4:	f094 0f00 	teq	r4, #0
 80008e8:	d10f      	bne.n	800090a <__aeabi_dmul+0x1c2>
 80008ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80008ee:	0040      	lsls	r0, r0, #1
 80008f0:	eb41 0101 	adc.w	r1, r1, r1
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	bf08      	it	eq
 80008fa:	3c01      	subeq	r4, #1
 80008fc:	d0f7      	beq.n	80008ee <__aeabi_dmul+0x1a6>
 80008fe:	ea41 0106 	orr.w	r1, r1, r6
 8000902:	f095 0f00 	teq	r5, #0
 8000906:	bf18      	it	ne
 8000908:	4770      	bxne	lr
 800090a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800090e:	0052      	lsls	r2, r2, #1
 8000910:	eb43 0303 	adc.w	r3, r3, r3
 8000914:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000918:	bf08      	it	eq
 800091a:	3d01      	subeq	r5, #1
 800091c:	d0f7      	beq.n	800090e <__aeabi_dmul+0x1c6>
 800091e:	ea43 0306 	orr.w	r3, r3, r6
 8000922:	4770      	bx	lr
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092c:	bf18      	it	ne
 800092e:	ea95 0f0c 	teqne	r5, ip
 8000932:	d00c      	beq.n	800094e <__aeabi_dmul+0x206>
 8000934:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000938:	bf18      	it	ne
 800093a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800093e:	d1d1      	bne.n	80008e4 <__aeabi_dmul+0x19c>
 8000940:	ea81 0103 	eor.w	r1, r1, r3
 8000944:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000948:	f04f 0000 	mov.w	r0, #0
 800094c:	bd70      	pop	{r4, r5, r6, pc}
 800094e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000952:	bf06      	itte	eq
 8000954:	4610      	moveq	r0, r2
 8000956:	4619      	moveq	r1, r3
 8000958:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095c:	d019      	beq.n	8000992 <__aeabi_dmul+0x24a>
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	d102      	bne.n	800096a <__aeabi_dmul+0x222>
 8000964:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000968:	d113      	bne.n	8000992 <__aeabi_dmul+0x24a>
 800096a:	ea95 0f0c 	teq	r5, ip
 800096e:	d105      	bne.n	800097c <__aeabi_dmul+0x234>
 8000970:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000974:	bf1c      	itt	ne
 8000976:	4610      	movne	r0, r2
 8000978:	4619      	movne	r1, r3
 800097a:	d10a      	bne.n	8000992 <__aeabi_dmul+0x24a>
 800097c:	ea81 0103 	eor.w	r1, r1, r3
 8000980:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000984:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000988:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	bd70      	pop	{r4, r5, r6, pc}
 8000992:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000996:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800099a:	bd70      	pop	{r4, r5, r6, pc}

0800099c <__aeabi_ddiv>:
 800099c:	b570      	push	{r4, r5, r6, lr}
 800099e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80009a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80009aa:	bf1d      	ittte	ne
 80009ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80009b0:	ea94 0f0c 	teqne	r4, ip
 80009b4:	ea95 0f0c 	teqne	r5, ip
 80009b8:	f000 f8a7 	bleq	8000b0a <__aeabi_ddiv+0x16e>
 80009bc:	eba4 0405 	sub.w	r4, r4, r5
 80009c0:	ea81 0e03 	eor.w	lr, r1, r3
 80009c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80009cc:	f000 8088 	beq.w	8000ae0 <__aeabi_ddiv+0x144>
 80009d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80009d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80009d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80009dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80009e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80009e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80009e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80009ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009f4:	429d      	cmp	r5, r3
 80009f6:	bf08      	it	eq
 80009f8:	4296      	cmpeq	r6, r2
 80009fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000a02:	d202      	bcs.n	8000a0a <__aeabi_ddiv+0x6e>
 8000a04:	085b      	lsrs	r3, r3, #1
 8000a06:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a0a:	1ab6      	subs	r6, r6, r2
 8000a0c:	eb65 0503 	sbc.w	r5, r5, r3
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000a1a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000a1e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a22:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a26:	bf22      	ittt	cs
 8000a28:	1ab6      	subcs	r6, r6, r2
 8000a2a:	4675      	movcs	r5, lr
 8000a2c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a30:	085b      	lsrs	r3, r3, #1
 8000a32:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a3e:	bf22      	ittt	cs
 8000a40:	1ab6      	subcs	r6, r6, r2
 8000a42:	4675      	movcs	r5, lr
 8000a44:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a48:	085b      	lsrs	r3, r3, #1
 8000a4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a56:	bf22      	ittt	cs
 8000a58:	1ab6      	subcs	r6, r6, r2
 8000a5a:	4675      	movcs	r5, lr
 8000a5c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a60:	085b      	lsrs	r3, r3, #1
 8000a62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a6e:	bf22      	ittt	cs
 8000a70:	1ab6      	subcs	r6, r6, r2
 8000a72:	4675      	movcs	r5, lr
 8000a74:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a78:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a7c:	d018      	beq.n	8000ab0 <__aeabi_ddiv+0x114>
 8000a7e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a82:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a86:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a8a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a8e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a92:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a96:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a9a:	d1c0      	bne.n	8000a1e <__aeabi_ddiv+0x82>
 8000a9c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000aa0:	d10b      	bne.n	8000aba <__aeabi_ddiv+0x11e>
 8000aa2:	ea41 0100 	orr.w	r1, r1, r0
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000aae:	e7b6      	b.n	8000a1e <__aeabi_ddiv+0x82>
 8000ab0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ab4:	bf04      	itt	eq
 8000ab6:	4301      	orreq	r1, r0
 8000ab8:	2000      	moveq	r0, #0
 8000aba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000abe:	bf88      	it	hi
 8000ac0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000ac4:	f63f aeaf 	bhi.w	8000826 <__aeabi_dmul+0xde>
 8000ac8:	ebb5 0c03 	subs.w	ip, r5, r3
 8000acc:	bf04      	itt	eq
 8000ace:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000ad2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ad6:	f150 0000 	adcs.w	r0, r0, #0
 8000ada:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000ae4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000ae8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000aec:	bfc2      	ittt	gt
 8000aee:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000af2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000af6:	bd70      	popgt	{r4, r5, r6, pc}
 8000af8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afc:	f04f 0e00 	mov.w	lr, #0
 8000b00:	3c01      	subs	r4, #1
 8000b02:	e690      	b.n	8000826 <__aeabi_dmul+0xde>
 8000b04:	ea45 0e06 	orr.w	lr, r5, r6
 8000b08:	e68d      	b.n	8000826 <__aeabi_dmul+0xde>
 8000b0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000b0e:	ea94 0f0c 	teq	r4, ip
 8000b12:	bf08      	it	eq
 8000b14:	ea95 0f0c 	teqeq	r5, ip
 8000b18:	f43f af3b 	beq.w	8000992 <__aeabi_dmul+0x24a>
 8000b1c:	ea94 0f0c 	teq	r4, ip
 8000b20:	d10a      	bne.n	8000b38 <__aeabi_ddiv+0x19c>
 8000b22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000b26:	f47f af34 	bne.w	8000992 <__aeabi_dmul+0x24a>
 8000b2a:	ea95 0f0c 	teq	r5, ip
 8000b2e:	f47f af25 	bne.w	800097c <__aeabi_dmul+0x234>
 8000b32:	4610      	mov	r0, r2
 8000b34:	4619      	mov	r1, r3
 8000b36:	e72c      	b.n	8000992 <__aeabi_dmul+0x24a>
 8000b38:	ea95 0f0c 	teq	r5, ip
 8000b3c:	d106      	bne.n	8000b4c <__aeabi_ddiv+0x1b0>
 8000b3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b42:	f43f aefd 	beq.w	8000940 <__aeabi_dmul+0x1f8>
 8000b46:	4610      	mov	r0, r2
 8000b48:	4619      	mov	r1, r3
 8000b4a:	e722      	b.n	8000992 <__aeabi_dmul+0x24a>
 8000b4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b50:	bf18      	it	ne
 8000b52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b56:	f47f aec5 	bne.w	80008e4 <__aeabi_dmul+0x19c>
 8000b5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b5e:	f47f af0d 	bne.w	800097c <__aeabi_dmul+0x234>
 8000b62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b66:	f47f aeeb 	bne.w	8000940 <__aeabi_dmul+0x1f8>
 8000b6a:	e712      	b.n	8000992 <__aeabi_dmul+0x24a>

08000b6c <__gedf2>:
 8000b6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000b70:	e006      	b.n	8000b80 <__cmpdf2+0x4>
 8000b72:	bf00      	nop

08000b74 <__ledf2>:
 8000b74:	f04f 0c01 	mov.w	ip, #1
 8000b78:	e002      	b.n	8000b80 <__cmpdf2+0x4>
 8000b7a:	bf00      	nop

08000b7c <__cmpdf2>:
 8000b7c:	f04f 0c01 	mov.w	ip, #1
 8000b80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	bf18      	it	ne
 8000b92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b96:	d01b      	beq.n	8000bd0 <__cmpdf2+0x54>
 8000b98:	b001      	add	sp, #4
 8000b9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b9e:	bf0c      	ite	eq
 8000ba0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ba4:	ea91 0f03 	teqne	r1, r3
 8000ba8:	bf02      	ittt	eq
 8000baa:	ea90 0f02 	teqeq	r0, r2
 8000bae:	2000      	moveq	r0, #0
 8000bb0:	4770      	bxeq	lr
 8000bb2:	f110 0f00 	cmn.w	r0, #0
 8000bb6:	ea91 0f03 	teq	r1, r3
 8000bba:	bf58      	it	pl
 8000bbc:	4299      	cmppl	r1, r3
 8000bbe:	bf08      	it	eq
 8000bc0:	4290      	cmpeq	r0, r2
 8000bc2:	bf2c      	ite	cs
 8000bc4:	17d8      	asrcs	r0, r3, #31
 8000bc6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000bca:	f040 0001 	orr.w	r0, r0, #1
 8000bce:	4770      	bx	lr
 8000bd0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bd4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd8:	d102      	bne.n	8000be0 <__cmpdf2+0x64>
 8000bda:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bde:	d107      	bne.n	8000bf0 <__cmpdf2+0x74>
 8000be0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000be4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be8:	d1d6      	bne.n	8000b98 <__cmpdf2+0x1c>
 8000bea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bee:	d0d3      	beq.n	8000b98 <__cmpdf2+0x1c>
 8000bf0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_cdrcmple>:
 8000bf8:	4684      	mov	ip, r0
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	4662      	mov	r2, ip
 8000bfe:	468c      	mov	ip, r1
 8000c00:	4619      	mov	r1, r3
 8000c02:	4663      	mov	r3, ip
 8000c04:	e000      	b.n	8000c08 <__aeabi_cdcmpeq>
 8000c06:	bf00      	nop

08000c08 <__aeabi_cdcmpeq>:
 8000c08:	b501      	push	{r0, lr}
 8000c0a:	f7ff ffb7 	bl	8000b7c <__cmpdf2>
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	bf48      	it	mi
 8000c12:	f110 0f00 	cmnmi.w	r0, #0
 8000c16:	bd01      	pop	{r0, pc}

08000c18 <__aeabi_dcmpeq>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff fff4 	bl	8000c08 <__aeabi_cdcmpeq>
 8000c20:	bf0c      	ite	eq
 8000c22:	2001      	moveq	r0, #1
 8000c24:	2000      	movne	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmplt>:
 8000c2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c30:	f7ff ffea 	bl	8000c08 <__aeabi_cdcmpeq>
 8000c34:	bf34      	ite	cc
 8000c36:	2001      	movcc	r0, #1
 8000c38:	2000      	movcs	r0, #0
 8000c3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c3e:	bf00      	nop

08000c40 <__aeabi_dcmple>:
 8000c40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c44:	f7ff ffe0 	bl	8000c08 <__aeabi_cdcmpeq>
 8000c48:	bf94      	ite	ls
 8000c4a:	2001      	movls	r0, #1
 8000c4c:	2000      	movhi	r0, #0
 8000c4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c52:	bf00      	nop

08000c54 <__aeabi_dcmpge>:
 8000c54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c58:	f7ff ffce 	bl	8000bf8 <__aeabi_cdrcmple>
 8000c5c:	bf94      	ite	ls
 8000c5e:	2001      	movls	r0, #1
 8000c60:	2000      	movhi	r0, #0
 8000c62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c66:	bf00      	nop

08000c68 <__aeabi_dcmpgt>:
 8000c68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c6c:	f7ff ffc4 	bl	8000bf8 <__aeabi_cdrcmple>
 8000c70:	bf34      	ite	cc
 8000c72:	2001      	movcc	r0, #1
 8000c74:	2000      	movcs	r0, #0
 8000c76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c7a:	bf00      	nop

08000c7c <__aeabi_dcmpun>:
 8000c7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c84:	d102      	bne.n	8000c8c <__aeabi_dcmpun+0x10>
 8000c86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c8a:	d10a      	bne.n	8000ca2 <__aeabi_dcmpun+0x26>
 8000c8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c94:	d102      	bne.n	8000c9c <__aeabi_dcmpun+0x20>
 8000c96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c9a:	d102      	bne.n	8000ca2 <__aeabi_dcmpun+0x26>
 8000c9c:	f04f 0000 	mov.w	r0, #0
 8000ca0:	4770      	bx	lr
 8000ca2:	f04f 0001 	mov.w	r0, #1
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2iz>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000cb0:	d215      	bcs.n	8000cde <__aeabi_d2iz+0x36>
 8000cb2:	d511      	bpl.n	8000cd8 <__aeabi_d2iz+0x30>
 8000cb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000cb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000cbc:	d912      	bls.n	8000ce4 <__aeabi_d2iz+0x3c>
 8000cbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000cc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000cca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000cce:	fa23 f002 	lsr.w	r0, r3, r2
 8000cd2:	bf18      	it	ne
 8000cd4:	4240      	negne	r0, r0
 8000cd6:	4770      	bx	lr
 8000cd8:	f04f 0000 	mov.w	r0, #0
 8000cdc:	4770      	bx	lr
 8000cde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ce2:	d105      	bne.n	8000cf0 <__aeabi_d2iz+0x48>
 8000ce4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	bf08      	it	eq
 8000cea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000cee:	4770      	bx	lr
 8000cf0:	f04f 0000 	mov.w	r0, #0
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d0c:	f000 b972 	b.w	8000ff4 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9e08      	ldr	r6, [sp, #32]
 8000d2e:	4604      	mov	r4, r0
 8000d30:	4688      	mov	r8, r1
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d14b      	bne.n	8000dce <__udivmoddi4+0xa6>
 8000d36:	428a      	cmp	r2, r1
 8000d38:	4615      	mov	r5, r2
 8000d3a:	d967      	bls.n	8000e0c <__udivmoddi4+0xe4>
 8000d3c:	fab2 f282 	clz	r2, r2
 8000d40:	b14a      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d42:	f1c2 0720 	rsb	r7, r2, #32
 8000d46:	fa01 f302 	lsl.w	r3, r1, r2
 8000d4a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d4e:	4095      	lsls	r5, r2
 8000d50:	ea47 0803 	orr.w	r8, r7, r3
 8000d54:	4094      	lsls	r4, r2
 8000d56:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d5a:	0c23      	lsrs	r3, r4, #16
 8000d5c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d60:	fa1f fc85 	uxth.w	ip, r5
 8000d64:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d68:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d6c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d70:	4299      	cmp	r1, r3
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x60>
 8000d74:	18eb      	adds	r3, r5, r3
 8000d76:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000d7a:	f080 811b 	bcs.w	8000fb4 <__udivmoddi4+0x28c>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 8118 	bls.w	8000fb4 <__udivmoddi4+0x28c>
 8000d84:	3f02      	subs	r7, #2
 8000d86:	442b      	add	r3, r5
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d90:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d9c:	45a4      	cmp	ip, r4
 8000d9e:	d909      	bls.n	8000db4 <__udivmoddi4+0x8c>
 8000da0:	192c      	adds	r4, r5, r4
 8000da2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x290>
 8000daa:	45a4      	cmp	ip, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x290>
 8000db0:	3802      	subs	r0, #2
 8000db2:	442c      	add	r4, r5
 8000db4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000db8:	eba4 040c 	sub.w	r4, r4, ip
 8000dbc:	2700      	movs	r7, #0
 8000dbe:	b11e      	cbz	r6, 8000dc8 <__udivmoddi4+0xa0>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc8:	4639      	mov	r1, r7
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xbe>
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	f000 80eb 	beq.w	8000fae <__udivmoddi4+0x286>
 8000dd8:	2700      	movs	r7, #0
 8000dda:	e9c6 0100 	strd	r0, r1, [r6]
 8000dde:	4638      	mov	r0, r7
 8000de0:	4639      	mov	r1, r7
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f783 	clz	r7, r3
 8000dea:	2f00      	cmp	r7, #0
 8000dec:	d147      	bne.n	8000e7e <__udivmoddi4+0x156>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd0>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80fa 	bhi.w	8000fec <__udivmoddi4+0x2c4>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	4698      	mov	r8, r3
 8000e02:	2e00      	cmp	r6, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa0>
 8000e06:	e9c6 4800 	strd	r4, r8, [r6]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xe8>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 808f 	bne.w	8000f38 <__udivmoddi4+0x210>
 8000e1a:	1b49      	subs	r1, r1, r5
 8000e1c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e20:	fa1f f885 	uxth.w	r8, r5
 8000e24:	2701      	movs	r7, #1
 8000e26:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e2a:	0c23      	lsrs	r3, r4, #16
 8000e2c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb08 f10c 	mul.w	r1, r8, ip
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	d907      	bls.n	8000e4c <__udivmoddi4+0x124>
 8000e3c:	18eb      	adds	r3, r5, r3
 8000e3e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e42:	d202      	bcs.n	8000e4a <__udivmoddi4+0x122>
 8000e44:	4299      	cmp	r1, r3
 8000e46:	f200 80cd 	bhi.w	8000fe4 <__udivmoddi4+0x2bc>
 8000e4a:	4684      	mov	ip, r0
 8000e4c:	1a59      	subs	r1, r3, r1
 8000e4e:	b2a3      	uxth	r3, r4
 8000e50:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e54:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e58:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e5c:	fb08 f800 	mul.w	r8, r8, r0
 8000e60:	45a0      	cmp	r8, r4
 8000e62:	d907      	bls.n	8000e74 <__udivmoddi4+0x14c>
 8000e64:	192c      	adds	r4, r5, r4
 8000e66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e6a:	d202      	bcs.n	8000e72 <__udivmoddi4+0x14a>
 8000e6c:	45a0      	cmp	r8, r4
 8000e6e:	f200 80b6 	bhi.w	8000fde <__udivmoddi4+0x2b6>
 8000e72:	4618      	mov	r0, r3
 8000e74:	eba4 0408 	sub.w	r4, r4, r8
 8000e78:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e7c:	e79f      	b.n	8000dbe <__udivmoddi4+0x96>
 8000e7e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e82:	40bb      	lsls	r3, r7
 8000e84:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e88:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e8c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e90:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e94:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e98:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e9c:	4325      	orrs	r5, r4
 8000e9e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ea2:	0c2c      	lsrs	r4, r5, #16
 8000ea4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ea8:	fa1f fa8e 	uxth.w	sl, lr
 8000eac:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000eb0:	fb09 f40a 	mul.w	r4, r9, sl
 8000eb4:	429c      	cmp	r4, r3
 8000eb6:	fa02 f207 	lsl.w	r2, r2, r7
 8000eba:	fa00 f107 	lsl.w	r1, r0, r7
 8000ebe:	d90b      	bls.n	8000ed8 <__udivmoddi4+0x1b0>
 8000ec0:	eb1e 0303 	adds.w	r3, lr, r3
 8000ec4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ec8:	f080 8087 	bcs.w	8000fda <__udivmoddi4+0x2b2>
 8000ecc:	429c      	cmp	r4, r3
 8000ece:	f240 8084 	bls.w	8000fda <__udivmoddi4+0x2b2>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4473      	add	r3, lr
 8000ed8:	1b1b      	subs	r3, r3, r4
 8000eda:	b2ad      	uxth	r5, r5
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ee4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ee8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000eec:	45a2      	cmp	sl, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1da>
 8000ef0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ef4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ef8:	d26b      	bcs.n	8000fd2 <__udivmoddi4+0x2aa>
 8000efa:	45a2      	cmp	sl, r4
 8000efc:	d969      	bls.n	8000fd2 <__udivmoddi4+0x2aa>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4474      	add	r4, lr
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0a:	eba4 040a 	sub.w	r4, r4, sl
 8000f0e:	454c      	cmp	r4, r9
 8000f10:	46c2      	mov	sl, r8
 8000f12:	464b      	mov	r3, r9
 8000f14:	d354      	bcc.n	8000fc0 <__udivmoddi4+0x298>
 8000f16:	d051      	beq.n	8000fbc <__udivmoddi4+0x294>
 8000f18:	2e00      	cmp	r6, #0
 8000f1a:	d069      	beq.n	8000ff0 <__udivmoddi4+0x2c8>
 8000f1c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f20:	eb64 0403 	sbc.w	r4, r4, r3
 8000f24:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f28:	40fd      	lsrs	r5, r7
 8000f2a:	40fc      	lsrs	r4, r7
 8000f2c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f30:	e9c6 5400 	strd	r5, r4, [r6]
 8000f34:	2700      	movs	r7, #0
 8000f36:	e747      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f40:	4095      	lsls	r5, r2
 8000f42:	fa01 f002 	lsl.w	r0, r1, r2
 8000f46:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f4e:	4338      	orrs	r0, r7
 8000f50:	0c01      	lsrs	r1, r0, #16
 8000f52:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f56:	fa1f f885 	uxth.w	r8, r5
 8000f5a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f62:	fb07 f308 	mul.w	r3, r7, r8
 8000f66:	428b      	cmp	r3, r1
 8000f68:	fa04 f402 	lsl.w	r4, r4, r2
 8000f6c:	d907      	bls.n	8000f7e <__udivmoddi4+0x256>
 8000f6e:	1869      	adds	r1, r5, r1
 8000f70:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000f74:	d22f      	bcs.n	8000fd6 <__udivmoddi4+0x2ae>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	d92d      	bls.n	8000fd6 <__udivmoddi4+0x2ae>
 8000f7a:	3f02      	subs	r7, #2
 8000f7c:	4429      	add	r1, r5
 8000f7e:	1acb      	subs	r3, r1, r3
 8000f80:	b281      	uxth	r1, r0
 8000f82:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f86:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb00 f308 	mul.w	r3, r0, r8
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d907      	bls.n	8000fa6 <__udivmoddi4+0x27e>
 8000f96:	1869      	adds	r1, r5, r1
 8000f98:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f9c:	d217      	bcs.n	8000fce <__udivmoddi4+0x2a6>
 8000f9e:	428b      	cmp	r3, r1
 8000fa0:	d915      	bls.n	8000fce <__udivmoddi4+0x2a6>
 8000fa2:	3802      	subs	r0, #2
 8000fa4:	4429      	add	r1, r5
 8000fa6:	1ac9      	subs	r1, r1, r3
 8000fa8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000fac:	e73b      	b.n	8000e26 <__udivmoddi4+0xfe>
 8000fae:	4637      	mov	r7, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e709      	b.n	8000dc8 <__udivmoddi4+0xa0>
 8000fb4:	4607      	mov	r7, r0
 8000fb6:	e6e7      	b.n	8000d88 <__udivmoddi4+0x60>
 8000fb8:	4618      	mov	r0, r3
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x8c>
 8000fbc:	4541      	cmp	r1, r8
 8000fbe:	d2ab      	bcs.n	8000f18 <__udivmoddi4+0x1f0>
 8000fc0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fc4:	eb69 020e 	sbc.w	r2, r9, lr
 8000fc8:	3801      	subs	r0, #1
 8000fca:	4613      	mov	r3, r2
 8000fcc:	e7a4      	b.n	8000f18 <__udivmoddi4+0x1f0>
 8000fce:	4660      	mov	r0, ip
 8000fd0:	e7e9      	b.n	8000fa6 <__udivmoddi4+0x27e>
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	e795      	b.n	8000f02 <__udivmoddi4+0x1da>
 8000fd6:	4667      	mov	r7, ip
 8000fd8:	e7d1      	b.n	8000f7e <__udivmoddi4+0x256>
 8000fda:	4681      	mov	r9, r0
 8000fdc:	e77c      	b.n	8000ed8 <__udivmoddi4+0x1b0>
 8000fde:	3802      	subs	r0, #2
 8000fe0:	442c      	add	r4, r5
 8000fe2:	e747      	b.n	8000e74 <__udivmoddi4+0x14c>
 8000fe4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fe8:	442b      	add	r3, r5
 8000fea:	e72f      	b.n	8000e4c <__udivmoddi4+0x124>
 8000fec:	4638      	mov	r0, r7
 8000fee:	e708      	b.n	8000e02 <__udivmoddi4+0xda>
 8000ff0:	4637      	mov	r7, r6
 8000ff2:	e6e9      	b.n	8000dc8 <__udivmoddi4+0xa0>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_InitTick+0x3c>)
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_InitTick+0x40>)
 8000ffe:	7812      	ldrb	r2, [r2, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
{
 8001002:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001004:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001008:	fbb0 f0f2 	udiv	r0, r0, r2
 800100c:	fbb3 f0f0 	udiv	r0, r3, r0
 8001010:	f000 f8ac 	bl	800116c <HAL_SYSTICK_Config>
 8001014:	b908      	cbnz	r0, 800101a <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001016:	2d0f      	cmp	r5, #15
 8001018:	d901      	bls.n	800101e <HAL_InitTick+0x26>
    return HAL_ERROR;
 800101a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800101c:	bd38      	pop	{r3, r4, r5, pc}
 800101e:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	4602      	mov	r2, r0
 8001022:	4629      	mov	r1, r5
 8001024:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001028:	f000 f846 	bl	80010b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4b03      	ldr	r3, [pc, #12]	; (800103c <HAL_InitTick+0x44>)
 800102e:	4620      	mov	r0, r4
 8001030:	601d      	str	r5, [r3, #0]
}
 8001032:	bd38      	pop	{r3, r4, r5, pc}
 8001034:	20000000 	.word	0x20000000
 8001038:	2000007c 	.word	0x2000007c
 800103c:	20000004 	.word	0x20000004

08001040 <HAL_Init>:
{
 8001040:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001042:	4b0b      	ldr	r3, [pc, #44]	; (8001070 <HAL_Init+0x30>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800104a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001052:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800105a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800105c:	2003      	movs	r0, #3
 800105e:	f000 f80f 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001062:	2000      	movs	r0, #0
 8001064:	f7ff ffc8 	bl	8000ff8 <HAL_InitTick>
  HAL_MspInit();
 8001068:	f004 fd22 	bl	8005ab0 <HAL_MspInit>
}
 800106c:	2000      	movs	r0, #0
 800106e:	bd08      	pop	{r3, pc}
 8001070:	40023c00 	.word	0x40023c00

08001074 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001074:	4b01      	ldr	r3, [pc, #4]	; (800107c <HAL_GetTick+0x8>)
 8001076:	6818      	ldr	r0, [r3, #0]
}
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20001d20 	.word	0x20001d20

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001080:	1ec3      	subs	r3, r0, #3
 8001082:	2b04      	cmp	r3, #4
{
 8001084:	b510      	push	{r4, lr}
 8001086:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001088:	d903      	bls.n	8001092 <HAL_NVIC_SetPriorityGrouping+0x12>
 800108a:	2192      	movs	r1, #146	; 0x92
 800108c:	4808      	ldr	r0, [pc, #32]	; (80010b0 <HAL_NVIC_SetPriorityGrouping+0x30>)
 800108e:	f004 fce3 	bl	8005a58 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001092:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <HAL_NVIC_SetPriorityGrouping+0x34>)
 8001094:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001096:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 800109a:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800109c:	0224      	lsls	r4, r4, #8
 800109e:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010a2:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
 80010a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80010aa:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 80010ac:	60d4      	str	r4, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80010ae:	bd10      	pop	{r4, pc}
 80010b0:	0800a570 	.word	0x0800a570
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010b8:	2a0f      	cmp	r2, #15
{ 
 80010ba:	b570      	push	{r4, r5, r6, lr}
 80010bc:	4616      	mov	r6, r2
 80010be:	4605      	mov	r5, r0
 80010c0:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80010c2:	d834      	bhi.n	800112e <HAL_NVIC_SetPriority+0x76>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80010c4:	2c0f      	cmp	r4, #15
 80010c6:	d82d      	bhi.n	8001124 <HAL_NVIC_SetPriority+0x6c>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <HAL_NVIC_SetPriority+0x80>)
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010d0:	f1c3 0107 	rsb	r1, r3, #7
 80010d4:	2904      	cmp	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010d6:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010da:	bf28      	it	cs
 80010dc:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010de:	2a06      	cmp	r2, #6
 80010e0:	d917      	bls.n	8001112 <HAL_NVIC_SetPriority+0x5a>
 80010e2:	3b03      	subs	r3, #3
 80010e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010e8:	409a      	lsls	r2, r3
 80010ea:	ea26 0602 	bic.w	r6, r6, r2

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010f2:	408a      	lsls	r2, r1
 80010f4:	ea24 0202 	bic.w	r2, r4, r2
 80010f8:	409a      	lsls	r2, r3
 80010fa:	4332      	orrs	r2, r6
 80010fc:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80010fe:	2d00      	cmp	r5, #0
 8001100:	b2d2      	uxtb	r2, r2
 8001102:	db09      	blt.n	8001118 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001104:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8001108:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 800110c:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001110:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001112:	2600      	movs	r6, #0
 8001114:	4633      	mov	r3, r6
 8001116:	e7ea      	b.n	80010ee <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_NVIC_SetPriority+0x84>)
 800111a:	f005 050f 	and.w	r5, r5, #15
 800111e:	442b      	add	r3, r5
 8001120:	761a      	strb	r2, [r3, #24]
 8001122:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8001124:	21ab      	movs	r1, #171	; 0xab
 8001126:	4806      	ldr	r0, [pc, #24]	; (8001140 <HAL_NVIC_SetPriority+0x88>)
 8001128:	f004 fc96 	bl	8005a58 <assert_failed>
 800112c:	e7cc      	b.n	80010c8 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800112e:	21aa      	movs	r1, #170	; 0xaa
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <HAL_NVIC_SetPriority+0x88>)
 8001132:	f004 fc91 	bl	8005a58 <assert_failed>
 8001136:	e7c5      	b.n	80010c4 <HAL_NVIC_SetPriority+0xc>
 8001138:	e000ed00 	.word	0xe000ed00
 800113c:	e000ecfc 	.word	0xe000ecfc
 8001140:	0800a570 	.word	0x0800a570

08001144 <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001144:	2800      	cmp	r0, #0
 8001146:	db08      	blt.n	800115a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001148:	f000 011f 	and.w	r1, r0, #31
 800114c:	2301      	movs	r3, #1
 800114e:	0940      	lsrs	r0, r0, #5
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_NVIC_EnableIRQ+0x20>)
 8001152:	408b      	lsls	r3, r1
 8001154:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001158:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800115a:	21be      	movs	r1, #190	; 0xbe
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <HAL_NVIC_EnableIRQ+0x24>)
 800115e:	f004 bc7b 	b.w	8005a58 <assert_failed>
 8001162:	bf00      	nop
 8001164:	e000e100 	.word	0xe000e100
 8001168:	0800a570 	.word	0x0800a570

0800116c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800116c:	3801      	subs	r0, #1
 800116e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001172:	d20e      	bcs.n	8001192 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001176:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001178:	4c08      	ldr	r4, [pc, #32]	; (800119c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800117a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800117c:	20f0      	movs	r0, #240	; 0xf0
 800117e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001182:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001184:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001186:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 800118c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001190:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2001      	movs	r0, #1
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	e000e010 	.word	0xe000e010
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a2:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff ff66 	bl	8001074 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80011a8:	2c00      	cmp	r4, #0
 80011aa:	f000 80e4 	beq.w	8001376 <HAL_DMA_Init+0x1d6>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 80011ae:	6823      	ldr	r3, [r4, #0]
 80011b0:	4ab1      	ldr	r2, [pc, #708]	; (8001478 <HAL_DMA_Init+0x2d8>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	4605      	mov	r5, r0
 80011b6:	d031      	beq.n	800121c <HAL_DMA_Init+0x7c>
 80011b8:	3218      	adds	r2, #24
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d02e      	beq.n	800121c <HAL_DMA_Init+0x7c>
 80011be:	3218      	adds	r2, #24
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d02b      	beq.n	800121c <HAL_DMA_Init+0x7c>
 80011c4:	3218      	adds	r2, #24
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d028      	beq.n	800121c <HAL_DMA_Init+0x7c>
 80011ca:	3218      	adds	r2, #24
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d025      	beq.n	800121c <HAL_DMA_Init+0x7c>
 80011d0:	3218      	adds	r2, #24
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d022      	beq.n	800121c <HAL_DMA_Init+0x7c>
 80011d6:	3218      	adds	r2, #24
 80011d8:	4293      	cmp	r3, r2
 80011da:	d01f      	beq.n	800121c <HAL_DMA_Init+0x7c>
 80011dc:	3218      	adds	r2, #24
 80011de:	4293      	cmp	r3, r2
 80011e0:	d01c      	beq.n	800121c <HAL_DMA_Init+0x7c>
 80011e2:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d018      	beq.n	800121c <HAL_DMA_Init+0x7c>
 80011ea:	3218      	adds	r2, #24
 80011ec:	4293      	cmp	r3, r2
 80011ee:	d015      	beq.n	800121c <HAL_DMA_Init+0x7c>
 80011f0:	3218      	adds	r2, #24
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d012      	beq.n	800121c <HAL_DMA_Init+0x7c>
 80011f6:	3218      	adds	r2, #24
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d00f      	beq.n	800121c <HAL_DMA_Init+0x7c>
 80011fc:	3218      	adds	r2, #24
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00c      	beq.n	800121c <HAL_DMA_Init+0x7c>
 8001202:	3218      	adds	r2, #24
 8001204:	4293      	cmp	r3, r2
 8001206:	d009      	beq.n	800121c <HAL_DMA_Init+0x7c>
 8001208:	3218      	adds	r2, #24
 800120a:	4293      	cmp	r3, r2
 800120c:	d006      	beq.n	800121c <HAL_DMA_Init+0x7c>
 800120e:	3218      	adds	r2, #24
 8001210:	4293      	cmp	r3, r2
 8001212:	d003      	beq.n	800121c <HAL_DMA_Init+0x7c>
 8001214:	21b8      	movs	r1, #184	; 0xb8
 8001216:	4899      	ldr	r0, [pc, #612]	; (800147c <HAL_DMA_Init+0x2dc>)
 8001218:	f004 fc1e 	bl	8005a58 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 800121c:	6863      	ldr	r3, [r4, #4]
 800121e:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 8001222:	d006      	beq.n	8001232 <HAL_DMA_Init+0x92>
 8001224:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001228:	d003      	beq.n	8001232 <HAL_DMA_Init+0x92>
 800122a:	21b9      	movs	r1, #185	; 0xb9
 800122c:	4893      	ldr	r0, [pc, #588]	; (800147c <HAL_DMA_Init+0x2dc>)
 800122e:	f004 fc13 	bl	8005a58 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8001232:	68a3      	ldr	r3, [r4, #8]
 8001234:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8001238:	d002      	beq.n	8001240 <HAL_DMA_Init+0xa0>
 800123a:	2b80      	cmp	r3, #128	; 0x80
 800123c:	f040 80cb 	bne.w	80013d6 <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001240:	68e3      	ldr	r3, [r4, #12]
 8001242:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 8001246:	f040 80a2 	bne.w	800138e <HAL_DMA_Init+0x1ee>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800124a:	6923      	ldr	r3, [r4, #16]
 800124c:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8001250:	f040 8093 	bne.w	800137a <HAL_DMA_Init+0x1da>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001254:	6963      	ldr	r3, [r4, #20]
 8001256:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 800125a:	d003      	beq.n	8001264 <HAL_DMA_Init+0xc4>
 800125c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001260:	f040 80c3 	bne.w	80013ea <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8001264:	69a3      	ldr	r3, [r4, #24]
 8001266:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 800126a:	d003      	beq.n	8001274 <HAL_DMA_Init+0xd4>
 800126c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001270:	f040 80a7 	bne.w	80013c2 <HAL_DMA_Init+0x222>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8001274:	69e3      	ldr	r3, [r4, #28]
 8001276:	f033 0220 	bics.w	r2, r3, #32
 800127a:	d006      	beq.n	800128a <HAL_DMA_Init+0xea>
 800127c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001280:	d003      	beq.n	800128a <HAL_DMA_Init+0xea>
 8001282:	21bf      	movs	r1, #191	; 0xbf
 8001284:	487d      	ldr	r0, [pc, #500]	; (800147c <HAL_DMA_Init+0x2dc>)
 8001286:	f004 fbe7 	bl	8005a58 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800128a:	6a23      	ldr	r3, [r4, #32]
 800128c:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8001290:	d003      	beq.n	800129a <HAL_DMA_Init+0xfa>
 8001292:	21c0      	movs	r1, #192	; 0xc0
 8001294:	4879      	ldr	r0, [pc, #484]	; (800147c <HAL_DMA_Init+0x2dc>)
 8001296:	f004 fbdf 	bl	8005a58 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800129a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800129c:	2b00      	cmp	r3, #0
 800129e:	d14d      	bne.n	800133c <HAL_DMA_Init+0x19c>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012a0:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012a2:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80012a4:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80012a8:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 80012aa:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 80012ac:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 80012b0:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80012b4:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b6:	e005      	b.n	80012c4 <HAL_DMA_Init+0x124>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012b8:	f7ff fedc 	bl	8001074 <HAL_GetTick>
 80012bc:	1b40      	subs	r0, r0, r5
 80012be:	2805      	cmp	r0, #5
 80012c0:	d852      	bhi.n	8001368 <HAL_DMA_Init+0x1c8>
 80012c2:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	07d1      	lsls	r1, r2, #31
 80012c8:	d4f6      	bmi.n	80012b8 <HAL_DMA_Init+0x118>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ca:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ce:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012d2:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012d4:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 80012d6:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012d8:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012da:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012de:	430a      	orrs	r2, r1
 80012e0:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80012e2:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012e4:	4866      	ldr	r0, [pc, #408]	; (8001480 <HAL_DMA_Init+0x2e0>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e6:	4332      	orrs	r2, r6
 80012e8:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ea:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012ec:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80012ee:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012f0:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012f2:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012f6:	f000 8082 	beq.w	80013fe <HAL_DMA_Init+0x25e>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012fc:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012fe:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001302:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001304:	b2da      	uxtb	r2, r3
 8001306:	485f      	ldr	r0, [pc, #380]	; (8001484 <HAL_DMA_Init+0x2e4>)
  hdma->Instance->FCR = tmp;
 8001308:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800130a:	3a10      	subs	r2, #16
 800130c:	fba0 1202 	umull	r1, r2, r0, r2
 8001310:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001312:	495d      	ldr	r1, [pc, #372]	; (8001488 <HAL_DMA_Init+0x2e8>)
 8001314:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001318:	5c89      	ldrb	r1, [r1, r2]
 800131a:	65e1      	str	r1, [r4, #92]	; 0x5c
 800131c:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 8001320:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001322:	bf88      	it	hi
 8001324:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001326:	223f      	movs	r2, #63	; 0x3f
 8001328:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 800132a:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800132c:	2100      	movs	r1, #0
 800132e:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8001330:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001332:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001334:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001336:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800133a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800133c:	2b04      	cmp	r3, #4
 800133e:	d130      	bne.n	80013a2 <HAL_DMA_Init+0x202>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001340:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001342:	2b03      	cmp	r3, #3
 8001344:	d838      	bhi.n	80013b8 <HAL_DMA_Init+0x218>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8001346:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001348:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 800134c:	d003      	beq.n	8001356 <HAL_DMA_Init+0x1b6>
 800134e:	21c7      	movs	r1, #199	; 0xc7
 8001350:	484a      	ldr	r0, [pc, #296]	; (800147c <HAL_DMA_Init+0x2dc>)
 8001352:	f004 fb81 	bl	8005a58 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001356:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001358:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 800135c:	d0a0      	beq.n	80012a0 <HAL_DMA_Init+0x100>
 800135e:	21c8      	movs	r1, #200	; 0xc8
 8001360:	4846      	ldr	r0, [pc, #280]	; (800147c <HAL_DMA_Init+0x2dc>)
 8001362:	f004 fb79 	bl	8005a58 <assert_failed>
 8001366:	e79b      	b.n	80012a0 <HAL_DMA_Init+0x100>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001368:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800136a:	2220      	movs	r2, #32
 800136c:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 800136e:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001370:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001376:	2001      	movs	r0, #1
}
 8001378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800137a:	21bc      	movs	r1, #188	; 0xbc
 800137c:	483f      	ldr	r0, [pc, #252]	; (800147c <HAL_DMA_Init+0x2dc>)
 800137e:	f004 fb6b 	bl	8005a58 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8001382:	6963      	ldr	r3, [r4, #20]
 8001384:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8001388:	f43f af6c 	beq.w	8001264 <HAL_DMA_Init+0xc4>
 800138c:	e766      	b.n	800125c <HAL_DMA_Init+0xbc>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800138e:	21bb      	movs	r1, #187	; 0xbb
 8001390:	483a      	ldr	r0, [pc, #232]	; (800147c <HAL_DMA_Init+0x2dc>)
 8001392:	f004 fb61 	bl	8005a58 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001396:	6923      	ldr	r3, [r4, #16]
 8001398:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 800139c:	f43f af5a 	beq.w	8001254 <HAL_DMA_Init+0xb4>
 80013a0:	e7eb      	b.n	800137a <HAL_DMA_Init+0x1da>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 80013a2:	21c1      	movs	r1, #193	; 0xc1
 80013a4:	4835      	ldr	r0, [pc, #212]	; (800147c <HAL_DMA_Init+0x2dc>)
 80013a6:	f004 fb57 	bl	8005a58 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 80013aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	f43f af77 	beq.w	80012a0 <HAL_DMA_Init+0x100>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 80013b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80013b4:	2b03      	cmp	r3, #3
 80013b6:	d9c6      	bls.n	8001346 <HAL_DMA_Init+0x1a6>
 80013b8:	21c6      	movs	r1, #198	; 0xc6
 80013ba:	4830      	ldr	r0, [pc, #192]	; (800147c <HAL_DMA_Init+0x2dc>)
 80013bc:	f004 fb4c 	bl	8005a58 <assert_failed>
 80013c0:	e7c1      	b.n	8001346 <HAL_DMA_Init+0x1a6>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80013c2:	21be      	movs	r1, #190	; 0xbe
 80013c4:	482d      	ldr	r0, [pc, #180]	; (800147c <HAL_DMA_Init+0x2dc>)
 80013c6:	f004 fb47 	bl	8005a58 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80013ca:	69e3      	ldr	r3, [r4, #28]
 80013cc:	f033 0220 	bics.w	r2, r3, #32
 80013d0:	f43f af5b 	beq.w	800128a <HAL_DMA_Init+0xea>
 80013d4:	e752      	b.n	800127c <HAL_DMA_Init+0xdc>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80013d6:	21ba      	movs	r1, #186	; 0xba
 80013d8:	4828      	ldr	r0, [pc, #160]	; (800147c <HAL_DMA_Init+0x2dc>)
 80013da:	f004 fb3d 	bl	8005a58 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80013de:	68e3      	ldr	r3, [r4, #12]
 80013e0:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80013e4:	f43f af31 	beq.w	800124a <HAL_DMA_Init+0xaa>
 80013e8:	e7d1      	b.n	800138e <HAL_DMA_Init+0x1ee>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80013ea:	21bd      	movs	r1, #189	; 0xbd
 80013ec:	4823      	ldr	r0, [pc, #140]	; (800147c <HAL_DMA_Init+0x2dc>)
 80013ee:	f004 fb33 	bl	8005a58 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80013f2:	69a3      	ldr	r3, [r4, #24]
 80013f4:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 80013f8:	f43f af3c 	beq.w	8001274 <HAL_DMA_Init+0xd4>
 80013fc:	e736      	b.n	800126c <HAL_DMA_Init+0xcc>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013fe:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 8001402:	4301      	orrs	r1, r0
 8001404:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 8001406:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8001408:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 800140a:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 800140c:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001410:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8001414:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001416:	2800      	cmp	r0, #0
 8001418:	f43f af74 	beq.w	8001304 <HAL_DMA_Init+0x164>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800141c:	b18e      	cbz	r6, 8001442 <HAL_DMA_Init+0x2a2>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800141e:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8001422:	d01a      	beq.n	800145a <HAL_DMA_Init+0x2ba>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001424:	2d02      	cmp	r5, #2
 8001426:	d905      	bls.n	8001434 <HAL_DMA_Init+0x294>
 8001428:	2d03      	cmp	r5, #3
 800142a:	f47f af6b 	bne.w	8001304 <HAL_DMA_Init+0x164>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800142e:	01c2      	lsls	r2, r0, #7
 8001430:	f57f af68 	bpl.w	8001304 <HAL_DMA_Init+0x164>
        hdma->State = HAL_DMA_STATE_READY;
 8001434:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001436:	2240      	movs	r2, #64	; 0x40
 8001438:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 800143a:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 800143c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001440:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8001442:	2d01      	cmp	r5, #1
 8001444:	d004      	beq.n	8001450 <HAL_DMA_Init+0x2b0>
 8001446:	d3f2      	bcc.n	800142e <HAL_DMA_Init+0x28e>
 8001448:	2d02      	cmp	r5, #2
 800144a:	f47f af5b 	bne.w	8001304 <HAL_DMA_Init+0x164>
 800144e:	e7ee      	b.n	800142e <HAL_DMA_Init+0x28e>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001450:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8001454:	f47f af56 	bne.w	8001304 <HAL_DMA_Init+0x164>
 8001458:	e7ec      	b.n	8001434 <HAL_DMA_Init+0x294>
    switch (tmp)
 800145a:	2d03      	cmp	r5, #3
 800145c:	f63f af52 	bhi.w	8001304 <HAL_DMA_Init+0x164>
 8001460:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <HAL_DMA_Init+0x2c8>)
 8001462:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8001466:	bf00      	nop
 8001468:	08001435 	.word	0x08001435
 800146c:	0800142f 	.word	0x0800142f
 8001470:	08001435 	.word	0x08001435
 8001474:	08001451 	.word	0x08001451
 8001478:	40026010 	.word	0x40026010
 800147c:	0800a5ac 	.word	0x0800a5ac
 8001480:	f010803f 	.word	0xf010803f
 8001484:	aaaaaaab 	.word	0xaaaaaaab
 8001488:	0800a5e4 	.word	0x0800a5e4

0800148c <HAL_DMA_Start_IT>:
{
 800148c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001490:	4604      	mov	r4, r0
 8001492:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001494:	1e58      	subs	r0, r3, #1
 8001496:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800149a:	4298      	cmp	r0, r3
{
 800149c:	460f      	mov	r7, r1
 800149e:	4690      	mov	r8, r2
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014a0:	6da6      	ldr	r6, [r4, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80014a2:	d83e      	bhi.n	8001522 <HAL_DMA_Start_IT+0x96>
  __HAL_LOCK(hdma);
 80014a4:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d043      	beq.n	8001534 <HAL_DMA_Start_IT+0xa8>
  if(HAL_DMA_STATE_READY == hdma->State)
 80014ac:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  __HAL_LOCK(hdma);
 80014b0:	2201      	movs	r2, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 80014b2:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 80014b4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80014b8:	d12d      	bne.n	8001516 <HAL_DMA_Start_IT+0x8a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014ba:	6821      	ldr	r1, [r4, #0]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014bc:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    hdma->State = HAL_DMA_STATE_BUSY;
 80014be:	2202      	movs	r2, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c0:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 80014c2:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014c6:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014c8:	680b      	ldr	r3, [r1, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014ca:	68a2      	ldr	r2, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80014cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d0:	600b      	str	r3, [r1, #0]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d2:	233f      	movs	r3, #63	; 0x3f
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80014d4:	2a40      	cmp	r2, #64	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014d6:	fa03 f300 	lsl.w	r3, r3, r0
  hdma->Instance->NDTR = DataLength;
 80014da:	604d      	str	r5, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80014dc:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->PAR = DstAddress;
 80014de:	bf0b      	itete	eq
 80014e0:	f8c1 8008 	streq.w	r8, [r1, #8]
    hdma->Instance->PAR = SrcAddress;
 80014e4:	608f      	strne	r7, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 80014e6:	60cf      	streq	r7, [r1, #12]
    hdma->Instance->M0AR = DstAddress;
 80014e8:	f8c1 800c 	strne.w	r8, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ec:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014ee:	680b      	ldr	r3, [r1, #0]
 80014f0:	f043 0316 	orr.w	r3, r3, #22
 80014f4:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80014f6:	694b      	ldr	r3, [r1, #20]
 80014f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014fc:	614b      	str	r3, [r1, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80014fe:	b11a      	cbz	r2, 8001508 <HAL_DMA_Start_IT+0x7c>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001500:	680b      	ldr	r3, [r1, #0]
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 8001508:	680b      	ldr	r3, [r1, #0]
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001510:	2000      	movs	r0, #0
}
 8001512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hdma);	  
 8001516:	2300      	movs	r3, #0
 8001518:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 800151c:	2002      	movs	r0, #2
}
 800151e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001522:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8001526:	4805      	ldr	r0, [pc, #20]	; (800153c <HAL_DMA_Start_IT+0xb0>)
 8001528:	f004 fa96 	bl	8005a58 <assert_failed>
  __HAL_LOCK(hdma);
 800152c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001530:	2b01      	cmp	r3, #1
 8001532:	d1bb      	bne.n	80014ac <HAL_DMA_Start_IT+0x20>
 8001534:	2002      	movs	r0, #2
}
 8001536:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800153a:	bf00      	nop
 800153c:	0800a5ac 	.word	0x0800a5ac

08001540 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001540:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001544:	2b02      	cmp	r3, #2
 8001546:	d003      	beq.n	8001550 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001548:	2380      	movs	r3, #128	; 0x80
 800154a:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 800154c:	2001      	movs	r0, #1
 800154e:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001550:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8001552:	2305      	movs	r3, #5
 8001554:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001558:	6813      	ldr	r3, [r2, #0]
 800155a:	f023 0301 	bic.w	r3, r3, #1
 800155e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001560:	2000      	movs	r0, #0
}
 8001562:	4770      	bx	lr

08001564 <HAL_DMA_IRQHandler>:
{
 8001564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001566:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8001568:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800156a:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 800156c:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800156e:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001570:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001572:	4965      	ldr	r1, [pc, #404]	; (8001708 <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001574:	2208      	movs	r2, #8
 8001576:	409a      	lsls	r2, r3
 8001578:	422a      	tst	r2, r5
{
 800157a:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 800157c:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800157e:	d003      	beq.n	8001588 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001580:	6801      	ldr	r1, [r0, #0]
 8001582:	6808      	ldr	r0, [r1, #0]
 8001584:	0740      	lsls	r0, r0, #29
 8001586:	d459      	bmi.n	800163c <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001588:	2201      	movs	r2, #1
 800158a:	409a      	lsls	r2, r3
 800158c:	422a      	tst	r2, r5
 800158e:	d003      	beq.n	8001598 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001590:	6821      	ldr	r1, [r4, #0]
 8001592:	6949      	ldr	r1, [r1, #20]
 8001594:	0608      	lsls	r0, r1, #24
 8001596:	d474      	bmi.n	8001682 <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001598:	2204      	movs	r2, #4
 800159a:	409a      	lsls	r2, r3
 800159c:	422a      	tst	r2, r5
 800159e:	d003      	beq.n	80015a8 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80015a0:	6821      	ldr	r1, [r4, #0]
 80015a2:	6809      	ldr	r1, [r1, #0]
 80015a4:	0789      	lsls	r1, r1, #30
 80015a6:	d466      	bmi.n	8001676 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80015a8:	2210      	movs	r2, #16
 80015aa:	409a      	lsls	r2, r3
 80015ac:	422a      	tst	r2, r5
 80015ae:	d003      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80015b0:	6821      	ldr	r1, [r4, #0]
 80015b2:	6808      	ldr	r0, [r1, #0]
 80015b4:	0700      	lsls	r0, r0, #28
 80015b6:	d44b      	bmi.n	8001650 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015b8:	2220      	movs	r2, #32
 80015ba:	409a      	lsls	r2, r3
 80015bc:	422a      	tst	r2, r5
 80015be:	d014      	beq.n	80015ea <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015c0:	6821      	ldr	r1, [r4, #0]
 80015c2:	6808      	ldr	r0, [r1, #0]
 80015c4:	06c0      	lsls	r0, r0, #27
 80015c6:	d510      	bpl.n	80015ea <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015c8:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015ca:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80015ce:	2a05      	cmp	r2, #5
 80015d0:	d063      	beq.n	800169a <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015d2:	680b      	ldr	r3, [r1, #0]
 80015d4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015d8:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015da:	d07e      	beq.n	80016da <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015dc:	0319      	lsls	r1, r3, #12
 80015de:	f140 8089 	bpl.w	80016f4 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 80015e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015e4:	b10b      	cbz	r3, 80015ea <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 80015e6:	4620      	mov	r0, r4
 80015e8:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015ea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015ec:	b323      	cbz	r3, 8001638 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015ee:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80015f0:	07da      	lsls	r2, r3, #31
 80015f2:	d51a      	bpl.n	800162a <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 80015f4:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80015f6:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80015f8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80015fc:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015fe:	4943      	ldr	r1, [pc, #268]	; (800170c <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 8001600:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8001604:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8001608:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800160a:	0ab6      	lsrs	r6, r6, #10
 800160c:	e002      	b.n	8001614 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800160e:	6813      	ldr	r3, [r2, #0]
 8001610:	07db      	lsls	r3, r3, #31
 8001612:	d504      	bpl.n	800161e <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8001614:	9b01      	ldr	r3, [sp, #4]
 8001616:	3301      	adds	r3, #1
 8001618:	42b3      	cmp	r3, r6
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	d9f7      	bls.n	800160e <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 800161e:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8001620:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8001622:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8001626:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 800162a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800162c:	b123      	cbz	r3, 8001638 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 800162e:	4620      	mov	r0, r4
}
 8001630:	b003      	add	sp, #12
 8001632:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8001636:	4718      	bx	r3
}
 8001638:	b003      	add	sp, #12
 800163a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800163c:	6808      	ldr	r0, [r1, #0]
 800163e:	f020 0004 	bic.w	r0, r0, #4
 8001642:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001644:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001646:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001648:	f042 0201 	orr.w	r2, r2, #1
 800164c:	6562      	str	r2, [r4, #84]	; 0x54
 800164e:	e79b      	b.n	8001588 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001650:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001652:	680a      	ldr	r2, [r1, #0]
 8001654:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001658:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800165a:	d118      	bne.n	800168e <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800165c:	05d2      	lsls	r2, r2, #23
 800165e:	d403      	bmi.n	8001668 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001660:	680a      	ldr	r2, [r1, #0]
 8001662:	f022 0208 	bic.w	r2, r2, #8
 8001666:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001668:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800166a:	2a00      	cmp	r2, #0
 800166c:	d0a4      	beq.n	80015b8 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 800166e:	4620      	mov	r0, r4
 8001670:	4790      	blx	r2
 8001672:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8001674:	e7a0      	b.n	80015b8 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001676:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001678:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800167a:	f042 0204 	orr.w	r2, r2, #4
 800167e:	6562      	str	r2, [r4, #84]	; 0x54
 8001680:	e792      	b.n	80015a8 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001682:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001684:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001686:	f042 0202 	orr.w	r2, r2, #2
 800168a:	6562      	str	r2, [r4, #84]	; 0x54
 800168c:	e784      	b.n	8001598 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800168e:	0311      	lsls	r1, r2, #12
 8001690:	d5ea      	bpl.n	8001668 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001692:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001694:	2a00      	cmp	r2, #0
 8001696:	d1ea      	bne.n	800166e <HAL_DMA_IRQHandler+0x10a>
 8001698:	e78e      	b.n	80015b8 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800169a:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800169c:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800169e:	f022 0216 	bic.w	r2, r2, #22
 80016a2:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016a4:	694a      	ldr	r2, [r1, #20]
 80016a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016aa:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016ac:	b338      	cbz	r0, 80016fe <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016ae:	680a      	ldr	r2, [r1, #0]
 80016b0:	f022 0208 	bic.w	r2, r2, #8
 80016b4:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016b6:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 80016b8:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 80016be:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 80016c0:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c2:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 80016c4:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80016c8:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80016cc:	2900      	cmp	r1, #0
 80016ce:	d0b3      	beq.n	8001638 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 80016d0:	4620      	mov	r0, r4
}
 80016d2:	b003      	add	sp, #12
 80016d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 80016d8:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016da:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80016de:	d180      	bne.n	80015e2 <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016e0:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80016e2:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016e4:	f022 0210 	bic.w	r2, r2, #16
 80016e8:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80016ea:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80016ee:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 80016f2:	e776      	b.n	80015e2 <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 80016f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	f47f af75 	bne.w	80015e6 <HAL_DMA_IRQHandler+0x82>
 80016fc:	e775      	b.n	80015ea <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001700:	2a00      	cmp	r2, #0
 8001702:	d1d4      	bne.n	80016ae <HAL_DMA_IRQHandler+0x14a>
 8001704:	e7d7      	b.n	80016b6 <HAL_DMA_IRQHandler+0x152>
 8001706:	bf00      	nop
 8001708:	2000007c 	.word	0x2000007c
 800170c:	1b4e81b5 	.word	0x1b4e81b5

08001710 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001714:	4b9c      	ldr	r3, [pc, #624]	; (8001988 <HAL_GPIO_Init+0x278>)
 8001716:	4298      	cmp	r0, r3
{
 8001718:	b083      	sub	sp, #12
 800171a:	4683      	mov	fp, r0
 800171c:	468a      	mov	sl, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800171e:	d017      	beq.n	8001750 <HAL_GPIO_Init+0x40>
 8001720:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001724:	4298      	cmp	r0, r3
 8001726:	d013      	beq.n	8001750 <HAL_GPIO_Init+0x40>
 8001728:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800172c:	4298      	cmp	r0, r3
 800172e:	d00f      	beq.n	8001750 <HAL_GPIO_Init+0x40>
 8001730:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001734:	4298      	cmp	r0, r3
 8001736:	d00b      	beq.n	8001750 <HAL_GPIO_Init+0x40>
 8001738:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800173c:	4298      	cmp	r0, r3
 800173e:	d007      	beq.n	8001750 <HAL_GPIO_Init+0x40>
 8001740:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001744:	4298      	cmp	r0, r3
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x40>
 8001748:	21b3      	movs	r1, #179	; 0xb3
 800174a:	4890      	ldr	r0, [pc, #576]	; (800198c <HAL_GPIO_Init+0x27c>)
 800174c:	f004 f984 	bl	8005a58 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001750:	f8da 3000 	ldr.w	r3, [sl]
 8001754:	b299      	uxth	r1, r3
 8001756:	2900      	cmp	r1, #0
 8001758:	f000 80b6 	beq.w	80018c8 <HAL_GPIO_Init+0x1b8>
 800175c:	0c1b      	lsrs	r3, r3, #16
 800175e:	041b      	lsls	r3, r3, #16
 8001760:	2b00      	cmp	r3, #0
 8001762:	f040 80b1 	bne.w	80018c8 <HAL_GPIO_Init+0x1b8>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001766:	f8da 3004 	ldr.w	r3, [sl, #4]
 800176a:	2b03      	cmp	r3, #3
 800176c:	d917      	bls.n	800179e <HAL_GPIO_Init+0x8e>
 800176e:	f1a3 0111 	sub.w	r1, r3, #17
 8001772:	2901      	cmp	r1, #1
 8001774:	d913      	bls.n	800179e <HAL_GPIO_Init+0x8e>
 8001776:	4886      	ldr	r0, [pc, #536]	; (8001990 <HAL_GPIO_Init+0x280>)
 8001778:	f423 1100 	bic.w	r1, r3, #2097152	; 0x200000
 800177c:	4281      	cmp	r1, r0
 800177e:	d00e      	beq.n	800179e <HAL_GPIO_Init+0x8e>
 8001780:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8001784:	4283      	cmp	r3, r0
 8001786:	d00a      	beq.n	800179e <HAL_GPIO_Init+0x8e>
 8001788:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 800178c:	4281      	cmp	r1, r0
 800178e:	d006      	beq.n	800179e <HAL_GPIO_Init+0x8e>
 8001790:	4980      	ldr	r1, [pc, #512]	; (8001994 <HAL_GPIO_Init+0x284>)
 8001792:	428b      	cmp	r3, r1
 8001794:	d003      	beq.n	800179e <HAL_GPIO_Init+0x8e>
 8001796:	21b5      	movs	r1, #181	; 0xb5
 8001798:	487c      	ldr	r0, [pc, #496]	; (800198c <HAL_GPIO_Init+0x27c>)
 800179a:	f004 f95d 	bl	8005a58 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800179e:	f8da 3008 	ldr.w	r3, [sl, #8]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	f200 80e5 	bhi.w	8001972 <HAL_GPIO_Init+0x262>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017a8:	f8df 9200 	ldr.w	r9, [pc, #512]	; 80019ac <HAL_GPIO_Init+0x29c>
{
 80017ac:	f04f 0800 	mov.w	r8, #0
 80017b0:	e005      	b.n	80017be <HAL_GPIO_Init+0xae>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017b2:	f108 0801 	add.w	r8, r8, #1
 80017b6:	f1b8 0f10 	cmp.w	r8, #16
 80017ba:	f000 8082 	beq.w	80018c2 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 80017be:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c0:	f8da 5000 	ldr.w	r5, [sl]
    ioposition = 0x01U << position;
 80017c4:	fa04 f408 	lsl.w	r4, r4, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017c8:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80017ca:	42ac      	cmp	r4, r5
 80017cc:	d1f1      	bne.n	80017b2 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ce:	f8da 2004 	ldr.w	r2, [sl, #4]
 80017d2:	f022 0110 	bic.w	r1, r2, #16
 80017d6:	2902      	cmp	r1, #2
 80017d8:	f000 8092 	beq.w	8001900 <HAL_GPIO_Init+0x1f0>
 80017dc:	ea4f 0748 	mov.w	r7, r8, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e0:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 80017e2:	f8db 0000 	ldr.w	r0, [fp]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017e6:	40be      	lsls	r6, r7
 80017e8:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ea:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017ee:	4030      	ands	r0, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f0:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f2:	3901      	subs	r1, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017f4:	4303      	orrs	r3, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017f6:	2901      	cmp	r1, #1
      GPIOx->MODER = temp;
 80017f8:	f8cb 3000 	str.w	r3, [fp]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017fc:	d969      	bls.n	80018d2 <HAL_GPIO_Init+0x1c2>
      temp = GPIOx->PUPDR;
 80017fe:	f8db 100c 	ldr.w	r1, [fp, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001802:	f8da 3008 	ldr.w	r3, [sl, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001806:	400e      	ands	r6, r1
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001808:	fa03 f707 	lsl.w	r7, r3, r7
 800180c:	4337      	orrs	r7, r6
      GPIOx->PUPDR = temp;
 800180e:	f8cb 700c 	str.w	r7, [fp, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001812:	00d7      	lsls	r7, r2, #3
 8001814:	d5cd      	bpl.n	80017b2 <HAL_GPIO_Init+0xa2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001816:	4b60      	ldr	r3, [pc, #384]	; (8001998 <HAL_GPIO_Init+0x288>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001818:	4c5b      	ldr	r4, [pc, #364]	; (8001988 <HAL_GPIO_Init+0x278>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2100      	movs	r1, #0
 800181c:	9101      	str	r1, [sp, #4]
 800181e:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001820:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8001824:	6459      	str	r1, [r3, #68]	; 0x44
 8001826:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001828:	f028 0303 	bic.w	r3, r8, #3
 800182c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001830:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8001834:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001838:	9101      	str	r1, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800183a:	f008 0103 	and.w	r1, r8, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800183e:	9801      	ldr	r0, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001840:	689e      	ldr	r6, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001842:	0089      	lsls	r1, r1, #2
 8001844:	200f      	movs	r0, #15
 8001846:	4088      	lsls	r0, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001848:	45a3      	cmp	fp, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800184a:	ea26 0000 	bic.w	r0, r6, r0
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800184e:	d012      	beq.n	8001876 <HAL_GPIO_Init+0x166>
 8001850:	45cb      	cmp	fp, r9
 8001852:	f000 8084 	beq.w	800195e <HAL_GPIO_Init+0x24e>
 8001856:	4c51      	ldr	r4, [pc, #324]	; (800199c <HAL_GPIO_Init+0x28c>)
 8001858:	45a3      	cmp	fp, r4
 800185a:	f000 8085 	beq.w	8001968 <HAL_GPIO_Init+0x258>
 800185e:	4c50      	ldr	r4, [pc, #320]	; (80019a0 <HAL_GPIO_Init+0x290>)
 8001860:	45a3      	cmp	fp, r4
 8001862:	f000 808b 	beq.w	800197c <HAL_GPIO_Init+0x26c>
 8001866:	4c4f      	ldr	r4, [pc, #316]	; (80019a4 <HAL_GPIO_Init+0x294>)
 8001868:	45a3      	cmp	fp, r4
 800186a:	bf0c      	ite	eq
 800186c:	2404      	moveq	r4, #4
 800186e:	2407      	movne	r4, #7
 8001870:	fa04 f101 	lsl.w	r1, r4, r1
 8001874:	4308      	orrs	r0, r1
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001876:	494c      	ldr	r1, [pc, #304]	; (80019a8 <HAL_GPIO_Init+0x298>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001878:	6098      	str	r0, [r3, #8]
        temp = EXTI->IMR;
 800187a:	680b      	ldr	r3, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 800187c:	484a      	ldr	r0, [pc, #296]	; (80019a8 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 800187e:	43e9      	mvns	r1, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001880:	03d6      	lsls	r6, r2, #15
          temp |= iocurrent;
 8001882:	bf4c      	ite	mi
 8001884:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8001886:	400b      	andpl	r3, r1
        EXTI->IMR = temp;
 8001888:	6003      	str	r3, [r0, #0]

        temp = EXTI->EMR;
 800188a:	6843      	ldr	r3, [r0, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800188c:	4846      	ldr	r0, [pc, #280]	; (80019a8 <HAL_GPIO_Init+0x298>)
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800188e:	0394      	lsls	r4, r2, #14
          temp |= iocurrent;
 8001890:	bf4c      	ite	mi
 8001892:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 8001894:	400b      	andpl	r3, r1
        EXTI->EMR = temp;
 8001896:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001898:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800189a:	02d0      	lsls	r0, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800189c:	4842      	ldr	r0, [pc, #264]	; (80019a8 <HAL_GPIO_Init+0x298>)
          temp |= iocurrent;
 800189e:	bf4c      	ite	mi
 80018a0:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 80018a2:	400b      	andpl	r3, r1
        EXTI->RTSR = temp;
 80018a4:	6083      	str	r3, [r0, #8]

        temp = EXTI->FTSR;
 80018a6:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018a8:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 80018aa:	bf54      	ite	pl
 80018ac:	ea01 0503 	andpl.w	r5, r1, r3
        {
          temp |= iocurrent;
 80018b0:	431d      	orrmi	r5, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b2:	f108 0801 	add.w	r8, r8, #1
        }
        EXTI->FTSR = temp;
 80018b6:	4b3c      	ldr	r3, [pc, #240]	; (80019a8 <HAL_GPIO_Init+0x298>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018b8:	f1b8 0f10 	cmp.w	r8, #16
        EXTI->FTSR = temp;
 80018bc:	60dd      	str	r5, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018be:	f47f af7e 	bne.w	80017be <HAL_GPIO_Init+0xae>
      }
    }
  }
}
 80018c2:	b003      	add	sp, #12
 80018c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80018c8:	21b4      	movs	r1, #180	; 0xb4
 80018ca:	4830      	ldr	r0, [pc, #192]	; (800198c <HAL_GPIO_Init+0x27c>)
 80018cc:	f004 f8c4 	bl	8005a58 <assert_failed>
 80018d0:	e749      	b.n	8001766 <HAL_GPIO_Init+0x56>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80018d2:	f8da 300c 	ldr.w	r3, [sl, #12]
 80018d6:	2b03      	cmp	r3, #3
 80018d8:	d838      	bhi.n	800194c <HAL_GPIO_Init+0x23c>
        temp = GPIOx->OSPEEDR; 
 80018da:	f8db 1008 	ldr.w	r1, [fp, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018de:	40bb      	lsls	r3, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018e0:	4031      	ands	r1, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e2:	430b      	orrs	r3, r1
        GPIOx->OSPEEDR = temp;
 80018e4:	f8cb 3008 	str.w	r3, [fp, #8]
        temp = GPIOx->OTYPER;
 80018e8:	f8db 1004 	ldr.w	r1, [fp, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018ec:	f3c2 1300 	ubfx	r3, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018f0:	ea21 0104 	bic.w	r1, r1, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018f4:	fa03 f408 	lsl.w	r4, r3, r8
 80018f8:	430c      	orrs	r4, r1
        GPIOx->OTYPER = temp;
 80018fa:	f8cb 4004 	str.w	r4, [fp, #4]
 80018fe:	e77e      	b.n	80017fe <HAL_GPIO_Init+0xee>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001900:	f8da 3010 	ldr.w	r3, [sl, #16]
 8001904:	2b0f      	cmp	r3, #15
 8001906:	d91b      	bls.n	8001940 <HAL_GPIO_Init+0x230>
 8001908:	21c7      	movs	r1, #199	; 0xc7
 800190a:	4820      	ldr	r0, [pc, #128]	; (800198c <HAL_GPIO_Init+0x27c>)
 800190c:	f004 f8a4 	bl	8005a58 <assert_failed>
 8001910:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001914:	f8da 3010 	ldr.w	r3, [sl, #16]
 8001918:	f022 0110 	bic.w	r1, r2, #16
        temp = GPIOx->AFR[position >> 3U];
 800191c:	ea4f 06d8 	mov.w	r6, r8, lsr #3
 8001920:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001924:	f008 0007 	and.w	r0, r8, #7
        temp = GPIOx->AFR[position >> 3U];
 8001928:	6a37      	ldr	r7, [r6, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800192a:	0080      	lsls	r0, r0, #2
 800192c:	f04f 0c0f 	mov.w	ip, #15
 8001930:	fa0c fc00 	lsl.w	ip, ip, r0
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001934:	4083      	lsls	r3, r0
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001936:	ea27 070c 	bic.w	r7, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800193a:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 800193c:	6233      	str	r3, [r6, #32]
 800193e:	e74d      	b.n	80017dc <HAL_GPIO_Init+0xcc>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001940:	f249 70f7 	movw	r0, #38903	; 0x97f7
 8001944:	40d8      	lsrs	r0, r3
 8001946:	07c0      	lsls	r0, r0, #31
 8001948:	d4e8      	bmi.n	800191c <HAL_GPIO_Init+0x20c>
 800194a:	e7dd      	b.n	8001908 <HAL_GPIO_Init+0x1f8>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800194c:	21da      	movs	r1, #218	; 0xda
 800194e:	480f      	ldr	r0, [pc, #60]	; (800198c <HAL_GPIO_Init+0x27c>)
 8001950:	f004 f882 	bl	8005a58 <assert_failed>
 8001954:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001958:	f8da 2004 	ldr.w	r2, [sl, #4]
 800195c:	e7bd      	b.n	80018da <HAL_GPIO_Init+0x1ca>
 800195e:	2401      	movs	r4, #1
 8001960:	fa04 f101 	lsl.w	r1, r4, r1
 8001964:	4308      	orrs	r0, r1
 8001966:	e786      	b.n	8001876 <HAL_GPIO_Init+0x166>
 8001968:	2402      	movs	r4, #2
 800196a:	fa04 f101 	lsl.w	r1, r4, r1
 800196e:	4308      	orrs	r0, r1
 8001970:	e781      	b.n	8001876 <HAL_GPIO_Init+0x166>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001972:	21b6      	movs	r1, #182	; 0xb6
 8001974:	4805      	ldr	r0, [pc, #20]	; (800198c <HAL_GPIO_Init+0x27c>)
 8001976:	f004 f86f 	bl	8005a58 <assert_failed>
 800197a:	e715      	b.n	80017a8 <HAL_GPIO_Init+0x98>
 800197c:	2403      	movs	r4, #3
 800197e:	fa04 f101 	lsl.w	r1, r4, r1
 8001982:	4308      	orrs	r0, r1
 8001984:	e777      	b.n	8001876 <HAL_GPIO_Init+0x166>
 8001986:	bf00      	nop
 8001988:	40020000 	.word	0x40020000
 800198c:	0800a5ec 	.word	0x0800a5ec
 8001990:	10110000 	.word	0x10110000
 8001994:	10220000 	.word	0x10220000
 8001998:	40023800 	.word	0x40023800
 800199c:	40020800 	.word	0x40020800
 80019a0:	40020c00 	.word	0x40020c00
 80019a4:	40021000 	.word	0x40021000
 80019a8:	40013c00 	.word	0x40013c00
 80019ac:	40020400 	.word	0x40020400

080019b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b0:	b570      	push	{r4, r5, r6, lr}
 80019b2:	4606      	mov	r6, r0
 80019b4:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80019b6:	460c      	mov	r4, r1
 80019b8:	b161      	cbz	r1, 80019d4 <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80019ba:	2d01      	cmp	r5, #1
 80019bc:	d803      	bhi.n	80019c6 <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 80019be:	b905      	cbnz	r5, 80019c2 <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019c0:	0424      	lsls	r4, r4, #16
 80019c2:	61b4      	str	r4, [r6, #24]
  }
}
 80019c4:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80019c6:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80019ca:	4805      	ldr	r0, [pc, #20]	; (80019e0 <HAL_GPIO_WritePin+0x30>)
 80019cc:	f004 f844 	bl	8005a58 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019d0:	61b4      	str	r4, [r6, #24]
}
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80019d4:	f240 119f 	movw	r1, #415	; 0x19f
 80019d8:	4801      	ldr	r0, [pc, #4]	; (80019e0 <HAL_GPIO_WritePin+0x30>)
 80019da:	f004 f83d 	bl	8005a58 <assert_failed>
 80019de:	e7ec      	b.n	80019ba <HAL_GPIO_WritePin+0xa>
 80019e0:	0800a5ec 	.word	0x0800a5ec

080019e4 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019e4:	b538      	push	{r3, r4, r5, lr}
 80019e6:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80019e8:	460c      	mov	r4, r1
 80019ea:	b131      	cbz	r1, 80019fa <HAL_GPIO_TogglePin+0x16>

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80019ec:	6943      	ldr	r3, [r0, #20]
 80019ee:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 80019f2:	bf18      	it	ne
 80019f4:	6181      	strne	r1, [r0, #24]
  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80019f6:	d006      	beq.n	8001a06 <HAL_GPIO_TogglePin+0x22>
  }
}
 80019f8:	bd38      	pop	{r3, r4, r5, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80019fa:	f44f 71db 	mov.w	r1, #438	; 0x1b6
 80019fe:	4803      	ldr	r0, [pc, #12]	; (8001a0c <HAL_GPIO_TogglePin+0x28>)
 8001a00:	f004 f82a 	bl	8005a58 <assert_failed>
  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001a04:	696b      	ldr	r3, [r5, #20]
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a06:	0424      	lsls	r4, r4, #16
 8001a08:	61ac      	str	r4, [r5, #24]
}
 8001a0a:	bd38      	pop	{r3, r4, r5, pc}
 8001a0c:	0800a5ec 	.word	0x0800a5ec

08001a10 <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop

08001a14 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001a16:	6951      	ldr	r1, [r2, #20]
 8001a18:	4201      	tst	r1, r0
 8001a1a:	d100      	bne.n	8001a1e <HAL_GPIO_EXTI_IRQHandler+0xa>
 8001a1c:	4770      	bx	lr
{
 8001a1e:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a20:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a22:	f7ff fff5 	bl	8001a10 <HAL_GPIO_EXTI_Callback>
}
 8001a26:	bd08      	pop	{r3, pc}
 8001a28:	40013c00 	.word	0x40013c00

08001a2c <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	f000 81cc 	beq.w	8001dca <HAL_RCC_OscConfig+0x39e>
{
 8001a32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001a36:	6803      	ldr	r3, [r0, #0]
 8001a38:	2b0f      	cmp	r3, #15
{
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001a3e:	f200 8139 	bhi.w	8001cb4 <HAL_RCC_OscConfig+0x288>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a42:	07dd      	lsls	r5, r3, #31
 8001a44:	d53a      	bpl.n	8001abc <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001a46:	6863      	ldr	r3, [r4, #4]
 8001a48:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 8001a4c:	d006      	beq.n	8001a5c <HAL_RCC_OscConfig+0x30>
 8001a4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a52:	d003      	beq.n	8001a5c <HAL_RCC_OscConfig+0x30>
 8001a54:	21ed      	movs	r1, #237	; 0xed
 8001a56:	48b2      	ldr	r0, [pc, #712]	; (8001d20 <HAL_RCC_OscConfig+0x2f4>)
 8001a58:	f003 fffe 	bl	8005a58 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a5c:	4ab1      	ldr	r2, [pc, #708]	; (8001d24 <HAL_RCC_OscConfig+0x2f8>)
 8001a5e:	6893      	ldr	r3, [r2, #8]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	f000 8175 	beq.w	8001d54 <HAL_RCC_OscConfig+0x328>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a6a:	6893      	ldr	r3, [r2, #8]
 8001a6c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	f000 816b 	beq.w	8001d4c <HAL_RCC_OscConfig+0x320>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a76:	6863      	ldr	r3, [r4, #4]
 8001a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a7c:	f000 8174 	beq.w	8001d68 <HAL_RCC_OscConfig+0x33c>
 8001a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a84:	f000 8204 	beq.w	8001e90 <HAL_RCC_OscConfig+0x464>
 8001a88:	4da6      	ldr	r5, [pc, #664]	; (8001d24 <HAL_RCC_OscConfig+0x2f8>)
 8001a8a:	682a      	ldr	r2, [r5, #0]
 8001a8c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a90:	602a      	str	r2, [r5, #0]
 8001a92:	682a      	ldr	r2, [r5, #0]
 8001a94:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a98:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f040 8169 	bne.w	8001d72 <HAL_RCC_OscConfig+0x346>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fae8 	bl	8001074 <HAL_GetTick>
 8001aa4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aa6:	e005      	b.n	8001ab4 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001aa8:	f7ff fae4 	bl	8001074 <HAL_GetTick>
 8001aac:	1b80      	subs	r0, r0, r6
 8001aae:	2864      	cmp	r0, #100	; 0x64
 8001ab0:	f200 817d 	bhi.w	8001dae <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ab4:	682b      	ldr	r3, [r5, #0]
 8001ab6:	039b      	lsls	r3, r3, #14
 8001ab8:	d4f6      	bmi.n	8001aa8 <HAL_RCC_OscConfig+0x7c>
 8001aba:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001abc:	079f      	lsls	r7, r3, #30
 8001abe:	f100 80ca 	bmi.w	8001c56 <HAL_RCC_OscConfig+0x22a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ac2:	071a      	lsls	r2, r3, #28
 8001ac4:	d518      	bpl.n	8001af8 <HAL_RCC_OscConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001ac6:	6963      	ldr	r3, [r4, #20]
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	f200 8120 	bhi.w	8001d0e <HAL_RCC_OscConfig+0x2e2>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f000 810d 	beq.w	8001cee <HAL_RCC_OscConfig+0x2c2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ad4:	4b94      	ldr	r3, [pc, #592]	; (8001d28 <HAL_RCC_OscConfig+0x2fc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	4d93      	ldr	r5, [pc, #588]	; (8001d24 <HAL_RCC_OscConfig+0x2f8>)
      __HAL_RCC_LSI_ENABLE();
 8001ad8:	2201      	movs	r2, #1
 8001ada:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001adc:	f7ff faca 	bl	8001074 <HAL_GetTick>
 8001ae0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ae2:	e005      	b.n	8001af0 <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae4:	f7ff fac6 	bl	8001074 <HAL_GetTick>
 8001ae8:	1b80      	subs	r0, r0, r6
 8001aea:	2802      	cmp	r0, #2
 8001aec:	f200 815f 	bhi.w	8001dae <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001af2:	079b      	lsls	r3, r3, #30
 8001af4:	d5f6      	bpl.n	8001ae4 <HAL_RCC_OscConfig+0xb8>
 8001af6:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001af8:	075d      	lsls	r5, r3, #29
 8001afa:	d545      	bpl.n	8001b88 <HAL_RCC_OscConfig+0x15c>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001afc:	68a3      	ldr	r3, [r4, #8]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d906      	bls.n	8001b10 <HAL_RCC_OscConfig+0xe4>
 8001b02:	2b05      	cmp	r3, #5
 8001b04:	d004      	beq.n	8001b10 <HAL_RCC_OscConfig+0xe4>
 8001b06:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8001b0a:	4885      	ldr	r0, [pc, #532]	; (8001d20 <HAL_RCC_OscConfig+0x2f4>)
 8001b0c:	f003 ffa4 	bl	8005a58 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b10:	4a84      	ldr	r2, [pc, #528]	; (8001d24 <HAL_RCC_OscConfig+0x2f8>)
 8001b12:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b14:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8001b18:	f040 815f 	bne.w	8001dda <HAL_RCC_OscConfig+0x3ae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b1c:	9301      	str	r3, [sp, #4]
 8001b1e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b24:	6413      	str	r3, [r2, #64]	; 0x40
 8001b26:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b30:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b32:	4d7e      	ldr	r5, [pc, #504]	; (8001d2c <HAL_RCC_OscConfig+0x300>)
 8001b34:	682a      	ldr	r2, [r5, #0]
 8001b36:	05d0      	lsls	r0, r2, #23
 8001b38:	f140 8129 	bpl.w	8001d8e <HAL_RCC_OscConfig+0x362>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b3c:	68a3      	ldr	r3, [r4, #8]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	f000 814d 	beq.w	8001dde <HAL_RCC_OscConfig+0x3b2>
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	f000 81ad 	beq.w	8001ea4 <HAL_RCC_OscConfig+0x478>
 8001b4a:	4d76      	ldr	r5, [pc, #472]	; (8001d24 <HAL_RCC_OscConfig+0x2f8>)
 8001b4c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b4e:	f022 0201 	bic.w	r2, r2, #1
 8001b52:	672a      	str	r2, [r5, #112]	; 0x70
 8001b54:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b56:	f022 0204 	bic.w	r2, r2, #4
 8001b5a:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f040 8143 	bne.w	8001de8 <HAL_RCC_OscConfig+0x3bc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff fa87 	bl	8001074 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b66:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b6a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6c:	e006      	b.n	8001b7c <HAL_RCC_OscConfig+0x150>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b6e:	f7ff fa81 	bl	8001074 <HAL_GetTick>
 8001b72:	eba0 0008 	sub.w	r0, r0, r8
 8001b76:	42b8      	cmp	r0, r7
 8001b78:	f200 8119 	bhi.w	8001dae <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b7e:	079b      	lsls	r3, r3, #30
 8001b80:	d4f5      	bmi.n	8001b6e <HAL_RCC_OscConfig+0x142>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b82:	2e00      	cmp	r6, #0
 8001b84:	f040 8155 	bne.w	8001e32 <HAL_RCC_OscConfig+0x406>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001b88:	69a3      	ldr	r3, [r4, #24]
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	f200 80d4 	bhi.w	8001d38 <HAL_RCC_OscConfig+0x30c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d05c      	beq.n	8001c4e <HAL_RCC_OscConfig+0x222>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b94:	4a63      	ldr	r2, [pc, #396]	; (8001d24 <HAL_RCC_OscConfig+0x2f8>)
 8001b96:	6891      	ldr	r1, [r2, #8]
 8001b98:	f001 010c 	and.w	r1, r1, #12
 8001b9c:	2908      	cmp	r1, #8
 8001b9e:	f000 809c 	beq.w	8001cda <HAL_RCC_OscConfig+0x2ae>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	f040 8163 	bne.w	8001e6e <HAL_RCC_OscConfig+0x442>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001ba8:	69e3      	ldr	r3, [r4, #28]
 8001baa:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8001bae:	d004      	beq.n	8001bba <HAL_RCC_OscConfig+0x18e>
 8001bb0:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001bb4:	485a      	ldr	r0, [pc, #360]	; (8001d20 <HAL_RCC_OscConfig+0x2f4>)
 8001bb6:	f003 ff4f 	bl	8005a58 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001bba:	6a23      	ldr	r3, [r4, #32]
 8001bbc:	2b3f      	cmp	r3, #63	; 0x3f
 8001bbe:	f200 8150 	bhi.w	8001e62 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001bc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001bc4:	3b32      	subs	r3, #50	; 0x32
 8001bc6:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8001bca:	f200 8144 	bhi.w	8001e56 <HAL_RCC_OscConfig+0x42a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001bce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001bd0:	2a08      	cmp	r2, #8
 8001bd2:	f200 8134 	bhi.w	8001e3e <HAL_RCC_OscConfig+0x412>
 8001bd6:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8001bda:	40d3      	lsrs	r3, r2
 8001bdc:	07d8      	lsls	r0, r3, #31
 8001bde:	f140 812e 	bpl.w	8001e3e <HAL_RCC_OscConfig+0x412>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001be2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001be4:	3b02      	subs	r3, #2
 8001be6:	2b0d      	cmp	r3, #13
 8001be8:	f200 812f 	bhi.w	8001e4a <HAL_RCC_OscConfig+0x41e>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bec:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_RCC_OscConfig+0x304>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bee:	4d4d      	ldr	r5, [pc, #308]	; (8001d24 <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_PLL_DISABLE();
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001bf4:	f7ff fa3e 	bl	8001074 <HAL_GetTick>
 8001bf8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bfa:	e005      	b.n	8001c08 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bfc:	f7ff fa3a 	bl	8001074 <HAL_GetTick>
 8001c00:	1b80      	subs	r0, r0, r6
 8001c02:	2802      	cmp	r0, #2
 8001c04:	f200 80d3 	bhi.w	8001dae <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c08:	682b      	ldr	r3, [r5, #0]
 8001c0a:	0199      	lsls	r1, r3, #6
 8001c0c:	d4f6      	bmi.n	8001bfc <HAL_RCC_OscConfig+0x1d0>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c0e:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8001c12:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001c16:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c18:	4c42      	ldr	r4, [pc, #264]	; (8001d24 <HAL_RCC_OscConfig+0x2f8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c1a:	4333      	orrs	r3, r6
 8001c1c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001c20:	0852      	lsrs	r2, r2, #1
 8001c22:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001c26:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001c28:	4941      	ldr	r1, [pc, #260]	; (8001d30 <HAL_RCC_OscConfig+0x304>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001c2e:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c30:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001c32:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8001c34:	f7ff fa1e 	bl	8001074 <HAL_GetTick>
 8001c38:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c3a:	e005      	b.n	8001c48 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c3c:	f7ff fa1a 	bl	8001074 <HAL_GetTick>
 8001c40:	1b40      	subs	r0, r0, r5
 8001c42:	2802      	cmp	r0, #2
 8001c44:	f200 80b3 	bhi.w	8001dae <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c48:	6823      	ldr	r3, [r4, #0]
 8001c4a:	019a      	lsls	r2, r3, #6
 8001c4c:	d5f6      	bpl.n	8001c3c <HAL_RCC_OscConfig+0x210>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001c4e:	2000      	movs	r0, #0
}
 8001c50:	b002      	add	sp, #8
 8001c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001c56:	68e3      	ldr	r3, [r4, #12]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d842      	bhi.n	8001ce2 <HAL_RCC_OscConfig+0x2b6>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001c5c:	6923      	ldr	r3, [r4, #16]
 8001c5e:	2b1f      	cmp	r3, #31
 8001c60:	f200 80b5 	bhi.w	8001dce <HAL_RCC_OscConfig+0x3a2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c64:	4b2f      	ldr	r3, [pc, #188]	; (8001d24 <HAL_RCC_OscConfig+0x2f8>)
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	f012 0f0c 	tst.w	r2, #12
 8001c6c:	d02e      	beq.n	8001ccc <HAL_RCC_OscConfig+0x2a0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c74:	2a08      	cmp	r2, #8
 8001c76:	d026      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x29a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c78:	68e3      	ldr	r3, [r4, #12]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80c8 	beq.w	8001e10 <HAL_RCC_OscConfig+0x3e4>
        __HAL_RCC_HSI_ENABLE();
 8001c80:	4b2c      	ldr	r3, [pc, #176]	; (8001d34 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c82:	4d28      	ldr	r5, [pc, #160]	; (8001d24 <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_HSI_ENABLE();
 8001c84:	2201      	movs	r2, #1
 8001c86:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c88:	f7ff f9f4 	bl	8001074 <HAL_GetTick>
 8001c8c:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8e:	e005      	b.n	8001c9c <HAL_RCC_OscConfig+0x270>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c90:	f7ff f9f0 	bl	8001074 <HAL_GetTick>
 8001c94:	1b80      	subs	r0, r0, r6
 8001c96:	2802      	cmp	r0, #2
 8001c98:	f200 8089 	bhi.w	8001dae <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	682b      	ldr	r3, [r5, #0]
 8001c9e:	0798      	lsls	r0, r3, #30
 8001ca0:	d5f6      	bpl.n	8001c90 <HAL_RCC_OscConfig+0x264>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ca2:	682b      	ldr	r3, [r5, #0]
 8001ca4:	6922      	ldr	r2, [r4, #16]
 8001ca6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001caa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001cae:	602b      	str	r3, [r5, #0]
 8001cb0:	6823      	ldr	r3, [r4, #0]
 8001cb2:	e706      	b.n	8001ac2 <HAL_RCC_OscConfig+0x96>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001cb4:	21e8      	movs	r1, #232	; 0xe8
 8001cb6:	481a      	ldr	r0, [pc, #104]	; (8001d20 <HAL_RCC_OscConfig+0x2f4>)
 8001cb8:	f003 fece 	bl	8005a58 <assert_failed>
 8001cbc:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cbe:	07dd      	lsls	r5, r3, #31
 8001cc0:	f57f aefc 	bpl.w	8001abc <HAL_RCC_OscConfig+0x90>
 8001cc4:	e6bf      	b.n	8001a46 <HAL_RCC_OscConfig+0x1a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	025e      	lsls	r6, r3, #9
 8001cca:	d4d5      	bmi.n	8001c78 <HAL_RCC_OscConfig+0x24c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ccc:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <HAL_RCC_OscConfig+0x2f8>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	079d      	lsls	r5, r3, #30
 8001cd2:	d570      	bpl.n	8001db6 <HAL_RCC_OscConfig+0x38a>
 8001cd4:	68e3      	ldr	r3, [r4, #12]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d06d      	beq.n	8001db6 <HAL_RCC_OscConfig+0x38a>
    return HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
}
 8001cdc:	b002      	add	sp, #8
 8001cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001ce2:	f240 111f 	movw	r1, #287	; 0x11f
 8001ce6:	480e      	ldr	r0, [pc, #56]	; (8001d20 <HAL_RCC_OscConfig+0x2f4>)
 8001ce8:	f003 feb6 	bl	8005a58 <assert_failed>
 8001cec:	e7b6      	b.n	8001c5c <HAL_RCC_OscConfig+0x230>
      __HAL_RCC_LSI_DISABLE();
 8001cee:	4a0e      	ldr	r2, [pc, #56]	; (8001d28 <HAL_RCC_OscConfig+0x2fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf0:	4d0c      	ldr	r5, [pc, #48]	; (8001d24 <HAL_RCC_OscConfig+0x2f8>)
      __HAL_RCC_LSI_DISABLE();
 8001cf2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001cf4:	f7ff f9be 	bl	8001074 <HAL_GetTick>
 8001cf8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cfa:	e004      	b.n	8001d06 <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7ff f9ba 	bl	8001074 <HAL_GetTick>
 8001d00:	1b80      	subs	r0, r0, r6
 8001d02:	2802      	cmp	r0, #2
 8001d04:	d853      	bhi.n	8001dae <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d06:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001d08:	079f      	lsls	r7, r3, #30
 8001d0a:	d4f7      	bmi.n	8001cfc <HAL_RCC_OscConfig+0x2d0>
 8001d0c:	e6f3      	b.n	8001af6 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001d0e:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001d12:	4803      	ldr	r0, [pc, #12]	; (8001d20 <HAL_RCC_OscConfig+0x2f4>)
 8001d14:	f003 fea0 	bl	8005a58 <assert_failed>
 8001d18:	6963      	ldr	r3, [r4, #20]
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0e7      	beq.n	8001cee <HAL_RCC_OscConfig+0x2c2>
 8001d1e:	e6d9      	b.n	8001ad4 <HAL_RCC_OscConfig+0xa8>
 8001d20:	0800a628 	.word	0x0800a628
 8001d24:	40023800 	.word	0x40023800
 8001d28:	42470e80 	.word	0x42470e80
 8001d2c:	40007000 	.word	0x40007000
 8001d30:	42470060 	.word	0x42470060
 8001d34:	42470000 	.word	0x42470000
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001d38:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001d3c:	485e      	ldr	r0, [pc, #376]	; (8001eb8 <HAL_RCC_OscConfig+0x48c>)
 8001d3e:	f003 fe8b 	bl	8005a58 <assert_failed>
 8001d42:	69a3      	ldr	r3, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f47f af25 	bne.w	8001b94 <HAL_RCC_OscConfig+0x168>
 8001d4a:	e780      	b.n	8001c4e <HAL_RCC_OscConfig+0x222>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d4c:	6853      	ldr	r3, [r2, #4]
 8001d4e:	0258      	lsls	r0, r3, #9
 8001d50:	f57f ae91 	bpl.w	8001a76 <HAL_RCC_OscConfig+0x4a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	4b59      	ldr	r3, [pc, #356]	; (8001ebc <HAL_RCC_OscConfig+0x490>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	0399      	lsls	r1, r3, #14
 8001d5a:	f57f aeae 	bpl.w	8001aba <HAL_RCC_OscConfig+0x8e>
 8001d5e:	6863      	ldr	r3, [r4, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f47f aeaa 	bne.w	8001aba <HAL_RCC_OscConfig+0x8e>
 8001d66:	e7b8      	b.n	8001cda <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d68:	4a54      	ldr	r2, [pc, #336]	; (8001ebc <HAL_RCC_OscConfig+0x490>)
 8001d6a:	6813      	ldr	r3, [r2, #0]
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001d72:	f7ff f97f 	bl	8001074 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d76:	4d51      	ldr	r5, [pc, #324]	; (8001ebc <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 8001d78:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d7a:	e004      	b.n	8001d86 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7ff f97a 	bl	8001074 <HAL_GetTick>
 8001d80:	1b80      	subs	r0, r0, r6
 8001d82:	2864      	cmp	r0, #100	; 0x64
 8001d84:	d813      	bhi.n	8001dae <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d86:	682b      	ldr	r3, [r5, #0]
 8001d88:	039a      	lsls	r2, r3, #14
 8001d8a:	d5f7      	bpl.n	8001d7c <HAL_RCC_OscConfig+0x350>
 8001d8c:	e695      	b.n	8001aba <HAL_RCC_OscConfig+0x8e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8e:	682a      	ldr	r2, [r5, #0]
 8001d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d94:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001d96:	f7ff f96d 	bl	8001074 <HAL_GetTick>
 8001d9a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	682b      	ldr	r3, [r5, #0]
 8001d9e:	05d9      	lsls	r1, r3, #23
 8001da0:	f53f aecc 	bmi.w	8001b3c <HAL_RCC_OscConfig+0x110>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7ff f966 	bl	8001074 <HAL_GetTick>
 8001da8:	1bc0      	subs	r0, r0, r7
 8001daa:	2802      	cmp	r0, #2
 8001dac:	d9f6      	bls.n	8001d9c <HAL_RCC_OscConfig+0x370>
            return HAL_TIMEOUT;
 8001dae:	2003      	movs	r0, #3
}
 8001db0:	b002      	add	sp, #8
 8001db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db6:	4a41      	ldr	r2, [pc, #260]	; (8001ebc <HAL_RCC_OscConfig+0x490>)
 8001db8:	6921      	ldr	r1, [r4, #16]
 8001dba:	6813      	ldr	r3, [r2, #0]
 8001dbc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001dc0:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	6823      	ldr	r3, [r4, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc8:	e67b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x96>
    return HAL_ERROR;
 8001dca:	2001      	movs	r0, #1
}
 8001dcc:	4770      	bx	lr
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001dce:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001dd2:	4839      	ldr	r0, [pc, #228]	; (8001eb8 <HAL_RCC_OscConfig+0x48c>)
 8001dd4:	f003 fe40 	bl	8005a58 <assert_failed>
 8001dd8:	e744      	b.n	8001c64 <HAL_RCC_OscConfig+0x238>
    FlagStatus       pwrclkchanged = RESET;
 8001dda:	2600      	movs	r6, #0
 8001ddc:	e6a9      	b.n	8001b32 <HAL_RCC_OscConfig+0x106>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dde:	4a37      	ldr	r2, [pc, #220]	; (8001ebc <HAL_RCC_OscConfig+0x490>)
 8001de0:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001de8:	f7ff f944 	bl	8001074 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dec:	4d33      	ldr	r5, [pc, #204]	; (8001ebc <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8001dee:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df0:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df4:	e005      	b.n	8001e02 <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001df6:	f7ff f93d 	bl	8001074 <HAL_GetTick>
 8001dfa:	eba0 0008 	sub.w	r0, r0, r8
 8001dfe:	42b8      	cmp	r0, r7
 8001e00:	d8d5      	bhi.n	8001dae <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e02:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001e04:	079a      	lsls	r2, r3, #30
 8001e06:	d5f6      	bpl.n	8001df6 <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 8001e08:	2e00      	cmp	r6, #0
 8001e0a:	f43f aebd 	beq.w	8001b88 <HAL_RCC_OscConfig+0x15c>
 8001e0e:	e010      	b.n	8001e32 <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI_DISABLE();
 8001e10:	4a2b      	ldr	r2, [pc, #172]	; (8001ec0 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e12:	4d2a      	ldr	r5, [pc, #168]	; (8001ebc <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_HSI_DISABLE();
 8001e14:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001e16:	f7ff f92d 	bl	8001074 <HAL_GetTick>
 8001e1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1c:	e004      	b.n	8001e28 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7ff f929 	bl	8001074 <HAL_GetTick>
 8001e22:	1b80      	subs	r0, r0, r6
 8001e24:	2802      	cmp	r0, #2
 8001e26:	d8c2      	bhi.n	8001dae <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e28:	682b      	ldr	r3, [r5, #0]
 8001e2a:	0799      	lsls	r1, r3, #30
 8001e2c:	d4f7      	bmi.n	8001e1e <HAL_RCC_OscConfig+0x3f2>
 8001e2e:	6823      	ldr	r3, [r4, #0]
 8001e30:	e647      	b.n	8001ac2 <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e32:	4a22      	ldr	r2, [pc, #136]	; (8001ebc <HAL_RCC_OscConfig+0x490>)
 8001e34:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001e36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3c:	e6a4      	b.n	8001b88 <HAL_RCC_OscConfig+0x15c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001e3e:	f240 11db 	movw	r1, #475	; 0x1db
 8001e42:	481d      	ldr	r0, [pc, #116]	; (8001eb8 <HAL_RCC_OscConfig+0x48c>)
 8001e44:	f003 fe08 	bl	8005a58 <assert_failed>
 8001e48:	e6cb      	b.n	8001be2 <HAL_RCC_OscConfig+0x1b6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001e4a:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001e4e:	481a      	ldr	r0, [pc, #104]	; (8001eb8 <HAL_RCC_OscConfig+0x48c>)
 8001e50:	f003 fe02 	bl	8005a58 <assert_failed>
 8001e54:	e6ca      	b.n	8001bec <HAL_RCC_OscConfig+0x1c0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001e56:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8001e5a:	4817      	ldr	r0, [pc, #92]	; (8001eb8 <HAL_RCC_OscConfig+0x48c>)
 8001e5c:	f003 fdfc 	bl	8005a58 <assert_failed>
 8001e60:	e6b5      	b.n	8001bce <HAL_RCC_OscConfig+0x1a2>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001e62:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001e66:	4814      	ldr	r0, [pc, #80]	; (8001eb8 <HAL_RCC_OscConfig+0x48c>)
 8001e68:	f003 fdf6 	bl	8005a58 <assert_failed>
 8001e6c:	e6a9      	b.n	8001bc2 <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_PLL_DISABLE();
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_RCC_OscConfig+0x498>)
 8001e70:	2100      	movs	r1, #0
 8001e72:	6019      	str	r1, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e74:	4614      	mov	r4, r2
        tickstart = HAL_GetTick();
 8001e76:	f7ff f8fd 	bl	8001074 <HAL_GetTick>
 8001e7a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7c:	e004      	b.n	8001e88 <HAL_RCC_OscConfig+0x45c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e7e:	f7ff f8f9 	bl	8001074 <HAL_GetTick>
 8001e82:	1b40      	subs	r0, r0, r5
 8001e84:	2802      	cmp	r0, #2
 8001e86:	d892      	bhi.n	8001dae <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	019b      	lsls	r3, r3, #6
 8001e8c:	d4f7      	bmi.n	8001e7e <HAL_RCC_OscConfig+0x452>
 8001e8e:	e6de      	b.n	8001c4e <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e90:	4b0a      	ldr	r3, [pc, #40]	; (8001ebc <HAL_RCC_OscConfig+0x490>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	e766      	b.n	8001d72 <HAL_RCC_OscConfig+0x346>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea4:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <HAL_RCC_OscConfig+0x490>)
 8001ea6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ea8:	f042 0204 	orr.w	r2, r2, #4
 8001eac:	671a      	str	r2, [r3, #112]	; 0x70
 8001eae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	671a      	str	r2, [r3, #112]	; 0x70
 8001eb6:	e797      	b.n	8001de8 <HAL_RCC_OscConfig+0x3bc>
 8001eb8:	0800a628 	.word	0x0800a628
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	42470000 	.word	0x42470000
 8001ec4:	42470060 	.word	0x42470060

08001ec8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ec8:	4917      	ldr	r1, [pc, #92]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8001eca:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ecc:	688b      	ldr	r3, [r1, #8]
 8001ece:	f003 030c 	and.w	r3, r3, #12
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	d01b      	beq.n	8001f0e <HAL_RCC_GetSysClockFreq+0x46>
 8001ed6:	2b08      	cmp	r3, #8
 8001ed8:	d117      	bne.n	8001f0a <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001eda:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001edc:	684b      	ldr	r3, [r1, #4]
 8001ede:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ee2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ee6:	d114      	bne.n	8001f12 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ee8:	6849      	ldr	r1, [r1, #4]
 8001eea:	4810      	ldr	r0, [pc, #64]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x64>)
 8001eec:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001ef0:	fba1 0100 	umull	r0, r1, r1, r0
 8001ef4:	f7fe ff00 	bl	8000cf8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ef8:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x60>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001f00:	3301      	adds	r3, #1
 8001f02:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001f04:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001f08:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001f0a:	4808      	ldr	r0, [pc, #32]	; (8001f2c <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001f0c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001f0e:	4808      	ldr	r0, [pc, #32]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001f10:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f12:	684b      	ldr	r3, [r1, #4]
 8001f14:	4806      	ldr	r0, [pc, #24]	; (8001f30 <HAL_RCC_GetSysClockFreq+0x68>)
 8001f16:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001f1a:	fba3 0100 	umull	r0, r1, r3, r0
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f7fe feea 	bl	8000cf8 <__aeabi_uldivmod>
 8001f24:	e7e8      	b.n	8001ef8 <HAL_RCC_GetSysClockFreq+0x30>
 8001f26:	bf00      	nop
 8001f28:	40023800 	.word	0x40023800
 8001f2c:	00f42400 	.word	0x00f42400
 8001f30:	007a1200 	.word	0x007a1200

08001f34 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001f34:	2800      	cmp	r0, #0
 8001f36:	f000 80f0 	beq.w	800211a <HAL_RCC_ClockConfig+0x1e6>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001f3a:	6803      	ldr	r3, [r0, #0]
 8001f3c:	3b01      	subs	r3, #1
 8001f3e:	2b0e      	cmp	r3, #14
{
 8001f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f44:	4604      	mov	r4, r0
 8001f46:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001f48:	f200 80d1 	bhi.w	80020ee <HAL_RCC_ClockConfig+0x1ba>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001f4c:	2d07      	cmp	r5, #7
 8001f4e:	f200 80c1 	bhi.w	80020d4 <HAL_RCC_ClockConfig+0x1a0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f52:	4a76      	ldr	r2, [pc, #472]	; (800212c <HAL_RCC_ClockConfig+0x1f8>)
 8001f54:	6813      	ldr	r3, [r2, #0]
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	42ab      	cmp	r3, r5
 8001f5c:	d209      	bcs.n	8001f72 <HAL_RCC_ClockConfig+0x3e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f5e:	b2eb      	uxtb	r3, r5
 8001f60:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f62:	6813      	ldr	r3, [r2, #0]
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	42ab      	cmp	r3, r5
 8001f6a:	d002      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x3e>
    return HAL_ERROR;
 8001f6c:	2001      	movs	r0, #1
}
 8001f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f72:	6823      	ldr	r3, [r4, #0]
 8001f74:	0798      	lsls	r0, r3, #30
 8001f76:	d52c      	bpl.n	8001fd2 <HAL_RCC_ClockConfig+0x9e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	0759      	lsls	r1, r3, #29
 8001f7a:	d504      	bpl.n	8001f86 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f7c:	496c      	ldr	r1, [pc, #432]	; (8002130 <HAL_RCC_ClockConfig+0x1fc>)
 8001f7e:	688a      	ldr	r2, [r1, #8]
 8001f80:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001f84:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f86:	071a      	lsls	r2, r3, #28
 8001f88:	d504      	bpl.n	8001f94 <HAL_RCC_ClockConfig+0x60>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f8a:	4969      	ldr	r1, [pc, #420]	; (8002130 <HAL_RCC_ClockConfig+0x1fc>)
 8001f8c:	688a      	ldr	r2, [r1, #8]
 8001f8e:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001f92:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001f94:	68a1      	ldr	r1, [r4, #8]
 8001f96:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 8001f9a:	d014      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x92>
 8001f9c:	f021 0220 	bic.w	r2, r1, #32
 8001fa0:	2a90      	cmp	r2, #144	; 0x90
 8001fa2:	d010      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x92>
 8001fa4:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 8001fa8:	2aa0      	cmp	r2, #160	; 0xa0
 8001faa:	d00c      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x92>
 8001fac:	f021 0210 	bic.w	r2, r1, #16
 8001fb0:	2ac0      	cmp	r2, #192	; 0xc0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x92>
 8001fb4:	29f0      	cmp	r1, #240	; 0xf0
 8001fb6:	d006      	beq.n	8001fc6 <HAL_RCC_ClockConfig+0x92>
 8001fb8:	f44f 7119 	mov.w	r1, #612	; 0x264
 8001fbc:	485d      	ldr	r0, [pc, #372]	; (8002134 <HAL_RCC_ClockConfig+0x200>)
 8001fbe:	f003 fd4b 	bl	8005a58 <assert_failed>
 8001fc2:	68a1      	ldr	r1, [r4, #8]
 8001fc4:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc6:	485a      	ldr	r0, [pc, #360]	; (8002130 <HAL_RCC_ClockConfig+0x1fc>)
 8001fc8:	6882      	ldr	r2, [r0, #8]
 8001fca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fd2:	07df      	lsls	r7, r3, #31
 8001fd4:	d528      	bpl.n	8002028 <HAL_RCC_ClockConfig+0xf4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001fd6:	6863      	ldr	r3, [r4, #4]
 8001fd8:	2b03      	cmp	r3, #3
 8001fda:	f200 8097 	bhi.w	800210c <HAL_RCC_ClockConfig+0x1d8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	f000 808e 	beq.w	8002100 <HAL_RCC_ClockConfig+0x1cc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fe4:	1e9a      	subs	r2, r3, #2
 8001fe6:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe8:	4a51      	ldr	r2, [pc, #324]	; (8002130 <HAL_RCC_ClockConfig+0x1fc>)
 8001fea:	6812      	ldr	r2, [r2, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fec:	f240 8099 	bls.w	8002122 <HAL_RCC_ClockConfig+0x1ee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff0:	0791      	lsls	r1, r2, #30
 8001ff2:	d5bb      	bpl.n	8001f6c <HAL_RCC_ClockConfig+0x38>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ff4:	4e4e      	ldr	r6, [pc, #312]	; (8002130 <HAL_RCC_ClockConfig+0x1fc>)
 8001ff6:	68b2      	ldr	r2, [r6, #8]
 8001ff8:	f022 0203 	bic.w	r2, r2, #3
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002000:	f7ff f838 	bl	8001074 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002004:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002008:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800200a:	e006      	b.n	800201a <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800200c:	f7ff f832 	bl	8001074 <HAL_GetTick>
 8002010:	eba0 0008 	sub.w	r0, r0, r8
 8002014:	42b8      	cmp	r0, r7
 8002016:	f200 8082 	bhi.w	800211e <HAL_RCC_ClockConfig+0x1ea>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800201a:	68b3      	ldr	r3, [r6, #8]
 800201c:	6862      	ldr	r2, [r4, #4]
 800201e:	f003 030c 	and.w	r3, r3, #12
 8002022:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002026:	d1f1      	bne.n	800200c <HAL_RCC_ClockConfig+0xd8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002028:	4a40      	ldr	r2, [pc, #256]	; (800212c <HAL_RCC_ClockConfig+0x1f8>)
 800202a:	6813      	ldr	r3, [r2, #0]
 800202c:	f003 030f 	and.w	r3, r3, #15
 8002030:	42ab      	cmp	r3, r5
 8002032:	d906      	bls.n	8002042 <HAL_RCC_ClockConfig+0x10e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002034:	b2eb      	uxtb	r3, r5
 8002036:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002038:	6813      	ldr	r3, [r2, #0]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	42ab      	cmp	r3, r5
 8002040:	d194      	bne.n	8001f6c <HAL_RCC_ClockConfig+0x38>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	075a      	lsls	r2, r3, #29
 8002046:	d518      	bpl.n	800207a <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8002048:	68e1      	ldr	r1, [r4, #12]
 800204a:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 800204e:	d00e      	beq.n	800206e <HAL_RCC_ClockConfig+0x13a>
 8002050:	f421 6200 	bic.w	r2, r1, #2048	; 0x800
 8002054:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8002058:	d009      	beq.n	800206e <HAL_RCC_ClockConfig+0x13a>
 800205a:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 800205e:	d006      	beq.n	800206e <HAL_RCC_ClockConfig+0x13a>
 8002060:	f240 21a9 	movw	r1, #681	; 0x2a9
 8002064:	4833      	ldr	r0, [pc, #204]	; (8002134 <HAL_RCC_ClockConfig+0x200>)
 8002066:	f003 fcf7 	bl	8005a58 <assert_failed>
 800206a:	68e1      	ldr	r1, [r4, #12]
 800206c:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800206e:	4830      	ldr	r0, [pc, #192]	; (8002130 <HAL_RCC_ClockConfig+0x1fc>)
 8002070:	6882      	ldr	r2, [r0, #8]
 8002072:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8002076:	430a      	orrs	r2, r1
 8002078:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	071b      	lsls	r3, r3, #28
 800207c:	d518      	bpl.n	80020b0 <HAL_RCC_ClockConfig+0x17c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800207e:	6922      	ldr	r2, [r4, #16]
 8002080:	f432 5380 	bics.w	r3, r2, #4096	; 0x1000
 8002084:	d00d      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x16e>
 8002086:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 800208a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800208e:	d008      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x16e>
 8002090:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8002094:	d005      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x16e>
 8002096:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 800209a:	4826      	ldr	r0, [pc, #152]	; (8002134 <HAL_RCC_ClockConfig+0x200>)
 800209c:	f003 fcdc 	bl	8005a58 <assert_failed>
 80020a0:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020a2:	4923      	ldr	r1, [pc, #140]	; (8002130 <HAL_RCC_ClockConfig+0x1fc>)
 80020a4:	688b      	ldr	r3, [r1, #8]
 80020a6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80020aa:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80020ae:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020b0:	f7ff ff0a 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
 80020b4:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <HAL_RCC_ClockConfig+0x1fc>)
 80020b6:	4920      	ldr	r1, [pc, #128]	; (8002138 <HAL_RCC_ClockConfig+0x204>)
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	4a20      	ldr	r2, [pc, #128]	; (800213c <HAL_RCC_ClockConfig+0x208>)
 80020bc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80020c0:	5ccb      	ldrb	r3, [r1, r3]
 80020c2:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 80020c6:	2000      	movs	r0, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020c8:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80020ca:	f7fe ff95 	bl	8000ff8 <HAL_InitTick>
  return HAL_OK;
 80020ce:	2000      	movs	r0, #0
}
 80020d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 80020d4:	f240 2141 	movw	r1, #577	; 0x241
 80020d8:	4816      	ldr	r0, [pc, #88]	; (8002134 <HAL_RCC_ClockConfig+0x200>)
 80020da:	f003 fcbd 	bl	8005a58 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020de:	4a13      	ldr	r2, [pc, #76]	; (800212c <HAL_RCC_ClockConfig+0x1f8>)
 80020e0:	6813      	ldr	r3, [r2, #0]
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	42ab      	cmp	r3, r5
 80020e8:	f4ff af39 	bcc.w	8001f5e <HAL_RCC_ClockConfig+0x2a>
 80020ec:	e741      	b.n	8001f72 <HAL_RCC_ClockConfig+0x3e>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80020ee:	f44f 7110 	mov.w	r1, #576	; 0x240
 80020f2:	4810      	ldr	r0, [pc, #64]	; (8002134 <HAL_RCC_ClockConfig+0x200>)
 80020f4:	f003 fcb0 	bl	8005a58 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80020f8:	2d07      	cmp	r5, #7
 80020fa:	f67f af2a 	bls.w	8001f52 <HAL_RCC_ClockConfig+0x1e>
 80020fe:	e7e9      	b.n	80020d4 <HAL_RCC_ClockConfig+0x1a0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002100:	4a0b      	ldr	r2, [pc, #44]	; (8002130 <HAL_RCC_ClockConfig+0x1fc>)
 8002102:	6812      	ldr	r2, [r2, #0]
 8002104:	0396      	lsls	r6, r2, #14
 8002106:	f53f af75 	bmi.w	8001ff4 <HAL_RCC_ClockConfig+0xc0>
 800210a:	e72f      	b.n	8001f6c <HAL_RCC_ClockConfig+0x38>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800210c:	f240 216b 	movw	r1, #619	; 0x26b
 8002110:	4808      	ldr	r0, [pc, #32]	; (8002134 <HAL_RCC_ClockConfig+0x200>)
 8002112:	f003 fca1 	bl	8005a58 <assert_failed>
 8002116:	6863      	ldr	r3, [r4, #4]
 8002118:	e761      	b.n	8001fde <HAL_RCC_ClockConfig+0xaa>
    return HAL_ERROR;
 800211a:	2001      	movs	r0, #1
}
 800211c:	4770      	bx	lr
        return HAL_TIMEOUT;
 800211e:	2003      	movs	r0, #3
 8002120:	e725      	b.n	8001f6e <HAL_RCC_ClockConfig+0x3a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002122:	0190      	lsls	r0, r2, #6
 8002124:	f53f af66 	bmi.w	8001ff4 <HAL_RCC_ClockConfig+0xc0>
 8002128:	e720      	b.n	8001f6c <HAL_RCC_ClockConfig+0x38>
 800212a:	bf00      	nop
 800212c:	40023c00 	.word	0x40023c00
 8002130:	40023800 	.word	0x40023800
 8002134:	0800a628 	.word	0x0800a628
 8002138:	0800a908 	.word	0x0800a908
 800213c:	2000007c 	.word	0x2000007c

08002140 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002140:	4b04      	ldr	r3, [pc, #16]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002142:	4a05      	ldr	r2, [pc, #20]	; (8002158 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002144:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002146:	4905      	ldr	r1, [pc, #20]	; (800215c <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002148:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800214c:	6808      	ldr	r0, [r1, #0]
 800214e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002150:	40d8      	lsrs	r0, r3
 8002152:	4770      	bx	lr
 8002154:	40023800 	.word	0x40023800
 8002158:	0800a918 	.word	0x0800a918
 800215c:	2000007c 	.word	0x2000007c

08002160 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x14>)
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002164:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002166:	4905      	ldr	r1, [pc, #20]	; (800217c <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002168:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800216c:	6808      	ldr	r0, [r1, #0]
 800216e:	5cd3      	ldrb	r3, [r2, r3]
}
 8002170:	40d8      	lsrs	r0, r3
 8002172:	4770      	bx	lr
 8002174:	40023800 	.word	0x40023800
 8002178:	0800a918 	.word	0x0800a918
 800217c:	2000007c 	.word	0x2000007c

08002180 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002180:	2800      	cmp	r0, #0
 8002182:	f000 8107 	beq.w	8002394 <HAL_UART_Init+0x214>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002186:	6982      	ldr	r2, [r0, #24]
{
 8002188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800218c:	4604      	mov	r4, r0
 800218e:	6803      	ldr	r3, [r0, #0]
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002190:	2a00      	cmp	r2, #0
 8002192:	f000 80eb 	beq.w	800236c <HAL_UART_Init+0x1ec>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002196:	49d7      	ldr	r1, [pc, #860]	; (80024f4 <HAL_UART_Init+0x374>)
 8002198:	428b      	cmp	r3, r1
 800219a:	f000 81f1 	beq.w	8002580 <HAL_UART_Init+0x400>
 800219e:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 80021a2:	428b      	cmp	r3, r1
 80021a4:	f000 81ec 	beq.w	8002580 <HAL_UART_Init+0x400>
 80021a8:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 80021ac:	428b      	cmp	r3, r1
 80021ae:	f000 81e7 	beq.w	8002580 <HAL_UART_Init+0x400>
 80021b2:	f240 1149 	movw	r1, #329	; 0x149
 80021b6:	48d0      	ldr	r0, [pc, #832]	; (80024f8 <HAL_UART_Init+0x378>)
 80021b8:	f003 fc4e 	bl	8005a58 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80021bc:	69a2      	ldr	r2, [r4, #24]
 80021be:	2a00      	cmp	r2, #0
 80021c0:	f040 81de 	bne.w	8002580 <HAL_UART_Init+0x400>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80021c4:	68a3      	ldr	r3, [r4, #8]
 80021c6:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 80021ca:	d004      	beq.n	80021d6 <HAL_UART_Init+0x56>
 80021cc:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80021d0:	48c9      	ldr	r0, [pc, #804]	; (80024f8 <HAL_UART_Init+0x378>)
 80021d2:	f003 fc41 	bl	8005a58 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80021d6:	69e3      	ldr	r3, [r4, #28]
 80021d8:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 80021dc:	d004      	beq.n	80021e8 <HAL_UART_Init+0x68>
 80021de:	f240 1151 	movw	r1, #337	; 0x151
 80021e2:	48c5      	ldr	r0, [pc, #788]	; (80024f8 <HAL_UART_Init+0x378>)
 80021e4:	f003 fc38 	bl	8005a58 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80021e8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 80021ec:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8172 	beq.w	80024da <HAL_UART_Init+0x35a>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021f6:	2324      	movs	r3, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021f8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80021fa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80021fe:	68d3      	ldr	r3, [r2, #12]
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002200:	6860      	ldr	r0, [r4, #4]
 8002202:	49be      	ldr	r1, [pc, #760]	; (80024fc <HAL_UART_Init+0x37c>)
  __HAL_UART_DISABLE(huart);
 8002204:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8002208:	4288      	cmp	r0, r1
  __HAL_UART_DISABLE(huart);
 800220a:	60d3      	str	r3, [r2, #12]
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800220c:	f200 815f 	bhi.w	80024ce <HAL_UART_Init+0x34e>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002210:	68e3      	ldr	r3, [r4, #12]
 8002212:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 8002216:	d004      	beq.n	8002222 <HAL_UART_Init+0xa2>
 8002218:	f640 31e6 	movw	r1, #3046	; 0xbe6
 800221c:	48b6      	ldr	r0, [pc, #728]	; (80024f8 <HAL_UART_Init+0x378>)
 800221e:	f003 fc1b 	bl	8005a58 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002222:	6923      	ldr	r3, [r4, #16]
 8002224:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 8002228:	d003      	beq.n	8002232 <HAL_UART_Init+0xb2>
 800222a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800222e:	f040 815a 	bne.w	80024e6 <HAL_UART_Init+0x366>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002232:	6960      	ldr	r0, [r4, #20]
 8002234:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8002238:	4218      	tst	r0, r3
 800223a:	d100      	bne.n	800223e <HAL_UART_Init+0xbe>
 800223c:	b928      	cbnz	r0, 800224a <HAL_UART_Init+0xca>
 800223e:	48ae      	ldr	r0, [pc, #696]	; (80024f8 <HAL_UART_Init+0x378>)
 8002240:	f640 31e8 	movw	r1, #3048	; 0xbe8
 8002244:	f003 fc08 	bl	8005a58 <assert_failed>
 8002248:	6960      	ldr	r0, [r4, #20]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800224a:	6822      	ldr	r2, [r4, #0]
 800224c:	68e5      	ldr	r5, [r4, #12]
 800224e:	6911      	ldr	r1, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 8002250:	68a3      	ldr	r3, [r4, #8]
 8002252:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002254:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002258:	4329      	orrs	r1, r5
 800225a:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 800225c:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800225e:	69e5      	ldr	r5, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8002260:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002264:	4333      	orrs	r3, r6
 8002266:	f021 010c 	bic.w	r1, r1, #12
 800226a:	432b      	orrs	r3, r5
 800226c:	430b      	orrs	r3, r1
 800226e:	4303      	orrs	r3, r0
 8002270:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002272:	6953      	ldr	r3, [r2, #20]
 8002274:	69a1      	ldr	r1, [r4, #24]
 8002276:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800227a:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800227c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002280:	6153      	str	r3, [r2, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002282:	4b9c      	ldr	r3, [pc, #624]	; (80024f4 <HAL_UART_Init+0x374>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002284:	f000 8088 	beq.w	8002398 <HAL_UART_Init+0x218>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002288:	429a      	cmp	r2, r3
 800228a:	f000 80e2 	beq.w	8002452 <HAL_UART_Init+0x2d2>
 800228e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002292:	429a      	cmp	r2, r3
 8002294:	f000 80dd 	beq.w	8002452 <HAL_UART_Init+0x2d2>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002298:	f7ff ff52 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 800229c:	4f98      	ldr	r7, [pc, #608]	; (8002500 <HAL_UART_Init+0x380>)
 800229e:	6863      	ldr	r3, [r4, #4]
 80022a0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022a4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022a8:	009b      	lsls	r3, r3, #2
 80022aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80022ae:	fba7 2303 	umull	r2, r3, r7, r3
 80022b2:	095b      	lsrs	r3, r3, #5
 80022b4:	011d      	lsls	r5, r3, #4
 80022b6:	f7ff ff43 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 80022ba:	6866      	ldr	r6, [r4, #4]
 80022bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022c4:	00b6      	lsls	r6, r6, #2
 80022c6:	fbb0 f6f6 	udiv	r6, r0, r6
 80022ca:	f7ff ff39 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 80022ce:	6863      	ldr	r3, [r4, #4]
 80022d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	fbb0 f3f3 	udiv	r3, r0, r3
 80022de:	fba7 2303 	umull	r2, r3, r7, r3
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80022e8:	fb09 6313 	mls	r3, r9, r3, r6
 80022ec:	011b      	lsls	r3, r3, #4
 80022ee:	3332      	adds	r3, #50	; 0x32
 80022f0:	fba7 2303 	umull	r2, r3, r7, r3
 80022f4:	095b      	lsrs	r3, r3, #5
 80022f6:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 80022fa:	f7ff ff21 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 80022fe:	6862      	ldr	r2, [r4, #4]
 8002300:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002304:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002308:	0093      	lsls	r3, r2, #2
 800230a:	fbb0 f8f3 	udiv	r8, r0, r3
 800230e:	f7ff ff17 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8002312:	e9d4 2100 	ldrd	r2, r1, [r4]
 8002316:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800231a:	008b      	lsls	r3, r1, #2
 800231c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002320:	fbb0 f3f3 	udiv	r3, r0, r3
 8002324:	fba7 1303 	umull	r1, r3, r7, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	fb09 8313 	mls	r3, r9, r3, r8
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	3332      	adds	r3, #50	; 0x32
 8002332:	fba7 1303 	umull	r1, r3, r7, r3
 8002336:	f3c3 1343 	ubfx	r3, r3, #5, #4
 800233a:	4333      	orrs	r3, r6
 800233c:	442b      	add	r3, r5
 800233e:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002340:	6913      	ldr	r3, [r2, #16]
 8002342:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002346:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002348:	6953      	ldr	r3, [r2, #20]
 800234a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800234e:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002350:	68d3      	ldr	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002352:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002354:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8002356:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800235a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 800235c:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800235e:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002360:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002364:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8002368:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800236c:	4a61      	ldr	r2, [pc, #388]	; (80024f4 <HAL_UART_Init+0x374>)
 800236e:	4293      	cmp	r3, r2
 8002370:	f43f af28 	beq.w	80021c4 <HAL_UART_Init+0x44>
 8002374:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8002378:	4293      	cmp	r3, r2
 800237a:	f43f af23 	beq.w	80021c4 <HAL_UART_Init+0x44>
 800237e:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 8002382:	4293      	cmp	r3, r2
 8002384:	f43f af1e 	beq.w	80021c4 <HAL_UART_Init+0x44>
 8002388:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 800238c:	485a      	ldr	r0, [pc, #360]	; (80024f8 <HAL_UART_Init+0x378>)
 800238e:	f003 fb63 	bl	8005a58 <assert_failed>
 8002392:	e717      	b.n	80021c4 <HAL_UART_Init+0x44>
    return HAL_ERROR;
 8002394:	2001      	movs	r0, #1
}
 8002396:	4770      	bx	lr
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002398:	429a      	cmp	r2, r3
 800239a:	f000 80b3 	beq.w	8002504 <HAL_UART_Init+0x384>
 800239e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a2:	429a      	cmp	r2, r3
 80023a4:	f000 80ae 	beq.w	8002504 <HAL_UART_Init+0x384>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80023a8:	f7ff feca 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 80023ac:	4f54      	ldr	r7, [pc, #336]	; (8002500 <HAL_UART_Init+0x380>)
 80023ae:	6863      	ldr	r3, [r4, #4]
 80023b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80023be:	fba7 2303 	umull	r2, r3, r7, r3
 80023c2:	095b      	lsrs	r3, r3, #5
 80023c4:	011e      	lsls	r6, r3, #4
 80023c6:	f7ff febb 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 80023ca:	6865      	ldr	r5, [r4, #4]
 80023cc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023d4:	006d      	lsls	r5, r5, #1
 80023d6:	fbb0 f5f5 	udiv	r5, r0, r5
 80023da:	f7ff feb1 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 80023de:	6863      	ldr	r3, [r4, #4]
 80023e0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023e4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ee:	fba7 2303 	umull	r2, r3, r7, r3
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	f04f 0964 	mov.w	r9, #100	; 0x64
 80023f8:	fb09 5313 	mls	r3, r9, r3, r5
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	3332      	adds	r3, #50	; 0x32
 8002400:	fba7 2303 	umull	r2, r3, r7, r3
 8002404:	091b      	lsrs	r3, r3, #4
 8002406:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 800240a:	f7ff fe99 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 800240e:	6862      	ldr	r2, [r4, #4]
 8002410:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002414:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002418:	0053      	lsls	r3, r2, #1
 800241a:	fbb0 f8f3 	udiv	r8, r0, r3
 800241e:	f7ff fe8f 	bl	8002140 <HAL_RCC_GetPCLK1Freq>
 8002422:	e9d4 2100 	ldrd	r2, r1, [r4]
 8002426:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800242a:	004b      	lsls	r3, r1, #1
 800242c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002430:	fbb0 f3f3 	udiv	r3, r0, r3
 8002434:	fba7 1303 	umull	r1, r3, r7, r3
 8002438:	095b      	lsrs	r3, r3, #5
 800243a:	fb09 8313 	mls	r3, r9, r3, r8
 800243e:	00db      	lsls	r3, r3, #3
 8002440:	3332      	adds	r3, #50	; 0x32
 8002442:	fba7 1303 	umull	r1, r3, r7, r3
 8002446:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800244a:	4433      	add	r3, r6
 800244c:	442b      	add	r3, r5
 800244e:	6093      	str	r3, [r2, #8]
 8002450:	e776      	b.n	8002340 <HAL_UART_Init+0x1c0>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002452:	f7ff fe85 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 8002456:	4f2a      	ldr	r7, [pc, #168]	; (8002500 <HAL_UART_Init+0x380>)
 8002458:	6863      	ldr	r3, [r4, #4]
 800245a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800245e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fbb0 f3f3 	udiv	r3, r0, r3
 8002468:	fba7 2303 	umull	r2, r3, r7, r3
 800246c:	095b      	lsrs	r3, r3, #5
 800246e:	011d      	lsls	r5, r3, #4
 8002470:	f7ff fe76 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 8002474:	6866      	ldr	r6, [r4, #4]
 8002476:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800247a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800247e:	00b6      	lsls	r6, r6, #2
 8002480:	fbb0 f6f6 	udiv	r6, r0, r6
 8002484:	f7ff fe6c 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 8002488:	6863      	ldr	r3, [r4, #4]
 800248a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800248e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	fbb0 f3f3 	udiv	r3, r0, r3
 8002498:	fba7 2303 	umull	r2, r3, r7, r3
 800249c:	f04f 0964 	mov.w	r9, #100	; 0x64
 80024a0:	095b      	lsrs	r3, r3, #5
 80024a2:	fb09 6313 	mls	r3, r9, r3, r6
 80024a6:	011b      	lsls	r3, r3, #4
 80024a8:	3332      	adds	r3, #50	; 0x32
 80024aa:	fba7 2303 	umull	r2, r3, r7, r3
 80024ae:	095b      	lsrs	r3, r3, #5
 80024b0:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 80024b4:	f7ff fe54 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 80024b8:	6862      	ldr	r2, [r4, #4]
 80024ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024be:	0093      	lsls	r3, r2, #2
 80024c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80024c4:	fbb0 f8f3 	udiv	r8, r0, r3
 80024c8:	f7ff fe4a 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 80024cc:	e721      	b.n	8002312 <HAL_UART_Init+0x192>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80024ce:	f640 31e5 	movw	r1, #3045	; 0xbe5
 80024d2:	4809      	ldr	r0, [pc, #36]	; (80024f8 <HAL_UART_Init+0x378>)
 80024d4:	f003 fac0 	bl	8005a58 <assert_failed>
 80024d8:	e69a      	b.n	8002210 <HAL_UART_Init+0x90>
    huart->Lock = HAL_UNLOCKED;
 80024da:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80024de:	4620      	mov	r0, r4
 80024e0:	f003 fbfc 	bl	8005cdc <HAL_UART_MspInit>
 80024e4:	e687      	b.n	80021f6 <HAL_UART_Init+0x76>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80024e6:	f640 31e7 	movw	r1, #3047	; 0xbe7
 80024ea:	4803      	ldr	r0, [pc, #12]	; (80024f8 <HAL_UART_Init+0x378>)
 80024ec:	f003 fab4 	bl	8005a58 <assert_failed>
 80024f0:	e69f      	b.n	8002232 <HAL_UART_Init+0xb2>
 80024f2:	bf00      	nop
 80024f4:	40011000 	.word	0x40011000
 80024f8:	0800a660 	.word	0x0800a660
 80024fc:	00a037a0 	.word	0x00a037a0
 8002500:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002504:	f7ff fe2c 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 8002508:	4f25      	ldr	r7, [pc, #148]	; (80025a0 <HAL_UART_Init+0x420>)
 800250a:	6863      	ldr	r3, [r4, #4]
 800250c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002510:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	fbb0 f3f3 	udiv	r3, r0, r3
 800251a:	fba7 2303 	umull	r2, r3, r7, r3
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	011e      	lsls	r6, r3, #4
 8002522:	f7ff fe1d 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 8002526:	6865      	ldr	r5, [r4, #4]
 8002528:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800252c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002530:	006d      	lsls	r5, r5, #1
 8002532:	fbb0 f5f5 	udiv	r5, r0, r5
 8002536:	f7ff fe13 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 800253a:	6863      	ldr	r3, [r4, #4]
 800253c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002540:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	fbb0 f3f3 	udiv	r3, r0, r3
 800254a:	fba7 2303 	umull	r2, r3, r7, r3
 800254e:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002552:	095b      	lsrs	r3, r3, #5
 8002554:	fb09 5313 	mls	r3, r9, r3, r5
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	3332      	adds	r3, #50	; 0x32
 800255c:	fba7 2303 	umull	r2, r3, r7, r3
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8002566:	f7ff fdfb 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 800256a:	6862      	ldr	r2, [r4, #4]
 800256c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002570:	0053      	lsls	r3, r2, #1
 8002572:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002576:	fbb0 f8f3 	udiv	r8, r0, r3
 800257a:	f7ff fdf1 	bl	8002160 <HAL_RCC_GetPCLK2Freq>
 800257e:	e750      	b.n	8002422 <HAL_UART_Init+0x2a2>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002580:	f422 7300 	bic.w	r3, r2, #512	; 0x200
 8002584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002588:	f43f ae1c 	beq.w	80021c4 <HAL_UART_Init+0x44>
 800258c:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8002590:	f43f ae18 	beq.w	80021c4 <HAL_UART_Init+0x44>
 8002594:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002598:	4802      	ldr	r0, [pc, #8]	; (80025a4 <HAL_UART_Init+0x424>)
 800259a:	f003 fa5d 	bl	8005a58 <assert_failed>
 800259e:	e611      	b.n	80021c4 <HAL_UART_Init+0x44>
 80025a0:	51eb851f 	.word	0x51eb851f
 80025a4:	0800a660 	.word	0x0800a660

080025a8 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 80025a8:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80025ac:	2b20      	cmp	r3, #32
 80025ae:	d12d      	bne.n	800260c <HAL_UART_Transmit_DMA+0x64>
{
 80025b0:	b570      	push	{r4, r5, r6, lr}
    if ((pData == NULL) || (Size == 0U))
 80025b2:	b349      	cbz	r1, 8002608 <HAL_UART_Transmit_DMA+0x60>
 80025b4:	b342      	cbz	r2, 8002608 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 80025b6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d028      	beq.n	8002610 <HAL_UART_Transmit_DMA+0x68>
 80025be:	4604      	mov	r4, r0
 80025c0:	2601      	movs	r6, #1
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80025c2:	6b00      	ldr	r0, [r0, #48]	; 0x30
    __HAL_LOCK(huart);
 80025c4:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
 80025c8:	4613      	mov	r3, r2
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025ca:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025cc:	2621      	movs	r6, #33	; 0x21
    huart->TxXferCount = Size;
 80025ce:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025d0:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80025d2:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80025d6:	4e0f      	ldr	r6, [pc, #60]	; (8002614 <HAL_UART_Transmit_DMA+0x6c>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80025d8:	6822      	ldr	r2, [r4, #0]
    huart->TxXferSize = Size;
 80025da:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 80025dc:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80025de:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80025e0:	4e0d      	ldr	r6, [pc, #52]	; (8002618 <HAL_UART_Transmit_DMA+0x70>)
 80025e2:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80025e4:	4e0d      	ldr	r6, [pc, #52]	; (800261c <HAL_UART_Transmit_DMA+0x74>)
    huart->hdmatx->XferAbortCallback = NULL;
 80025e6:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80025e8:	64c6      	str	r6, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80025ea:	3204      	adds	r2, #4
 80025ec:	f7fe ff4e 	bl	800148c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025f6:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80025f8:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 80025fa:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80025fe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 8002602:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002604:	615a      	str	r2, [r3, #20]
}
 8002606:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002608:	2001      	movs	r0, #1
}
 800260a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800260c:	2002      	movs	r0, #2
}
 800260e:	4770      	bx	lr
    return HAL_BUSY;
 8002610:	2002      	movs	r0, #2
}
 8002612:	bd70      	pop	{r4, r5, r6, pc}
 8002614:	080026b9 	.word	0x080026b9
 8002618:	080026e5 	.word	0x080026e5
 800261c:	080027ad 	.word	0x080027ad

08002620 <HAL_UART_Receive_DMA>:
{
 8002620:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002622:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8002626:	2c20      	cmp	r4, #32
{
 8002628:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 800262a:	d138      	bne.n	800269e <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 800262c:	2900      	cmp	r1, #0
 800262e:	d039      	beq.n	80026a4 <HAL_UART_Receive_DMA+0x84>
 8002630:	2a00      	cmp	r2, #0
 8002632:	d037      	beq.n	80026a4 <HAL_UART_Receive_DMA+0x84>
    __HAL_LOCK(huart);
 8002634:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002638:	2b01      	cmp	r3, #1
 800263a:	d030      	beq.n	800269e <HAL_UART_Receive_DMA+0x7e>
 800263c:	4604      	mov	r4, r0
 800263e:	2601      	movs	r6, #1
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002640:	6b40      	ldr	r0, [r0, #52]	; 0x34
    __HAL_LOCK(huart);
 8002642:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002646:	2500      	movs	r5, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002648:	2622      	movs	r6, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800264a:	63e5      	str	r5, [r4, #60]	; 0x3c
 800264c:	4613      	mov	r3, r2
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800264e:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
 8002652:	460a      	mov	r2, r1
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002654:	4e15      	ldr	r6, [pc, #84]	; (80026ac <HAL_UART_Receive_DMA+0x8c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002656:	6821      	ldr	r1, [r4, #0]
    huart->pRxBuffPtr = pData;
 8002658:	62a2      	str	r2, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 800265a:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800265c:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800265e:	4e14      	ldr	r6, [pc, #80]	; (80026b0 <HAL_UART_Receive_DMA+0x90>)
 8002660:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002662:	4e14      	ldr	r6, [pc, #80]	; (80026b4 <HAL_UART_Receive_DMA+0x94>)
    huart->hdmarx->XferAbortCallback = NULL;
 8002664:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002666:	64c6      	str	r6, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002668:	3104      	adds	r1, #4
 800266a:	f7fe ff0f 	bl	800148c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	9501      	str	r5, [sp, #4]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	9201      	str	r2, [sp, #4]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	9201      	str	r2, [sp, #4]
 800267a:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800267c:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 800267e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002686:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002688:	695a      	ldr	r2, [r3, #20]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002690:	695a      	ldr	r2, [r3, #20]
    return HAL_OK;
 8002692:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002698:	615a      	str	r2, [r3, #20]
}
 800269a:	b002      	add	sp, #8
 800269c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800269e:	2002      	movs	r0, #2
}
 80026a0:	b002      	add	sp, #8
 80026a2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80026a4:	2001      	movs	r0, #1
}
 80026a6:	b002      	add	sp, #8
 80026a8:	bd70      	pop	{r4, r5, r6, pc}
 80026aa:	bf00      	nop
 80026ac:	080026f5 	.word	0x080026f5
 80026b0:	0800279d 	.word	0x0800279d
 80026b4:	080027ad 	.word	0x080027ad

080026b8 <UART_DMATransmitCplt>:
{
 80026b8:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80026ba:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026bc:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80026c4:	d10a      	bne.n	80026dc <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80026c6:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 80026c8:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80026ca:	6953      	ldr	r3, [r2, #20]
 80026cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80026d0:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80026d2:	68d3      	ldr	r3, [r2, #12]
 80026d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d8:	60d3      	str	r3, [r2, #12]
}
 80026da:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80026dc:	f003 f84c 	bl	8005778 <HAL_UART_TxCpltCallback>
}
 80026e0:	bd08      	pop	{r3, pc}
 80026e2:	bf00      	nop

080026e4 <UART_DMATxHalfCplt>:
{
 80026e4:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80026e6:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80026e8:	f003 f85c 	bl	80057a4 <HAL_UART_TxHalfCpltCallback>
}
 80026ec:	bd08      	pop	{r3, pc}
 80026ee:	bf00      	nop

080026f0 <HAL_UART_RxCpltCallback>:
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop

080026f4 <UART_DMAReceiveCplt>:
{
 80026f4:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80026f6:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026f8:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002700:	d110      	bne.n	8002724 <UART_DMAReceiveCplt+0x30>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002702:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8002704:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002706:	68d3      	ldr	r3, [r2, #12]
 8002708:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800270c:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800270e:	6953      	ldr	r3, [r2, #20]
 8002710:	f023 0301 	bic.w	r3, r3, #1
 8002714:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002716:	6953      	ldr	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002718:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800271a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800271e:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8002720:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8002724:	f7ff ffe4 	bl	80026f0 <HAL_UART_RxCpltCallback>
}
 8002728:	bd08      	pop	{r3, pc}
 800272a:	bf00      	nop

0800272c <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 800272c:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800272e:	6884      	ldr	r4, [r0, #8]
 8002730:	6901      	ldr	r1, [r0, #16]
 8002732:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002734:	6802      	ldr	r2, [r0, #0]
 8002736:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 800273a:	d020      	beq.n	800277e <UART_Receive_IT.part.1+0x52>
 800273c:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800273e:	6852      	ldr	r2, [r2, #4]
 8002740:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002742:	b9c9      	cbnz	r1, 8002778 <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002744:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8002746:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8002748:	3b01      	subs	r3, #1
 800274a:	b29b      	uxth	r3, r3
 800274c:	85c3      	strh	r3, [r0, #46]	; 0x2e
 800274e:	b98b      	cbnz	r3, 8002774 <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002750:	6802      	ldr	r2, [r0, #0]
 8002752:	68d1      	ldr	r1, [r2, #12]
 8002754:	f021 0120 	bic.w	r1, r1, #32
 8002758:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800275a:	68d1      	ldr	r1, [r2, #12]
 800275c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002760:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002762:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002764:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002766:	f021 0101 	bic.w	r1, r1, #1
 800276a:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800276c:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8002770:	f7ff ffbe 	bl	80026f0 <HAL_UART_RxCpltCallback>
}
 8002774:	2000      	movs	r0, #0
 8002776:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002778:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800277c:	e7e2      	b.n	8002744 <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800277e:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002780:	b929      	cbnz	r1, 800278e <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002782:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002786:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 800278a:	6283      	str	r3, [r0, #40]	; 0x28
 800278c:	e7db      	b.n	8002746 <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8002794:	6283      	str	r3, [r0, #40]	; 0x28
 8002796:	e7d6      	b.n	8002746 <UART_Receive_IT.part.1+0x1a>

08002798 <HAL_UART_RxHalfCpltCallback>:
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop

0800279c <UART_DMARxHalfCplt>:
{
 800279c:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800279e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80027a0:	f7ff fffa 	bl	8002798 <HAL_UART_RxHalfCpltCallback>
}
 80027a4:	bd08      	pop	{r3, pc}
 80027a6:	bf00      	nop

080027a8 <HAL_UART_ErrorCallback>:
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop

080027ac <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027ac:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80027ae:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80027b0:	6803      	ldr	r3, [r0, #0]
 80027b2:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80027b4:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 80027b8:	2a21      	cmp	r2, #33	; 0x21
 80027ba:	d01b      	beq.n	80027f4 <UART_DMAError+0x48>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80027bc:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80027be:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 80027c2:	2a22      	cmp	r2, #34	; 0x22
 80027c4:	d006      	beq.n	80027d4 <UART_DMAError+0x28>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80027c6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80027c8:	f043 0310 	orr.w	r3, r3, #16
 80027cc:	63c3      	str	r3, [r0, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 80027ce:	f7ff ffeb 	bl	80027a8 <HAL_UART_ErrorCallback>
}
 80027d2:	bd08      	pop	{r3, pc}
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80027d4:	064a      	lsls	r2, r1, #25
 80027d6:	d5f6      	bpl.n	80027c6 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 80027d8:	2200      	movs	r2, #0
 80027da:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027dc:	68da      	ldr	r2, [r3, #12]
 80027de:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027e2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e4:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 80027e6:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 80027ee:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
 80027f2:	e7e8      	b.n	80027c6 <UART_DMAError+0x1a>
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80027f4:	0609      	lsls	r1, r1, #24
 80027f6:	d5e1      	bpl.n	80027bc <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 80027f8:	2200      	movs	r2, #0
 80027fa:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80027fc:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80027fe:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002800:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002804:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002806:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 800280a:	e7d7      	b.n	80027bc <UART_DMAError+0x10>

0800280c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800280c:	6803      	ldr	r3, [r0, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
{
 8002810:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002812:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002814:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002816:	6959      	ldr	r1, [r3, #20]
{
 8002818:	4604      	mov	r4, r0
  if (errorflags == RESET)
 800281a:	d049      	beq.n	80028b0 <HAL_UART_IRQHandler+0xa4>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800281c:	f011 0101 	ands.w	r1, r1, #1
 8002820:	d04f      	beq.n	80028c2 <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002822:	07d6      	lsls	r6, r2, #31
 8002824:	d505      	bpl.n	8002832 <HAL_UART_IRQHandler+0x26>
 8002826:	05e8      	lsls	r0, r5, #23
 8002828:	d503      	bpl.n	8002832 <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800282a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800282c:	f040 0001 	orr.w	r0, r0, #1
 8002830:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002832:	0756      	lsls	r6, r2, #29
 8002834:	f002 0002 	and.w	r0, r2, #2
 8002838:	d575      	bpl.n	8002926 <HAL_UART_IRQHandler+0x11a>
 800283a:	b161      	cbz	r1, 8002856 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800283c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800283e:	f041 0102 	orr.w	r1, r1, #2
 8002842:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002844:	f002 0608 	and.w	r6, r2, #8
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002848:	2800      	cmp	r0, #0
 800284a:	d171      	bne.n	8002930 <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800284c:	b11e      	cbz	r6, 8002856 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800284e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002850:	f041 0108 	orr.w	r1, r1, #8
 8002854:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002856:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002858:	2900      	cmp	r1, #0
 800285a:	d031      	beq.n	80028c0 <HAL_UART_IRQHandler+0xb4>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800285c:	0696      	lsls	r6, r2, #26
 800285e:	d501      	bpl.n	8002864 <HAL_UART_IRQHandler+0x58>
 8002860:	06a8      	lsls	r0, r5, #26
 8002862:	d473      	bmi.n	800294c <HAL_UART_IRQHandler+0x140>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002864:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002866:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002868:	0709      	lsls	r1, r1, #28
 800286a:	d402      	bmi.n	8002872 <HAL_UART_IRQHandler+0x66>
 800286c:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8002870:	d079      	beq.n	8002966 <HAL_UART_IRQHandler+0x15a>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002878:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287a:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 800287c:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002884:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	0652      	lsls	r2, r2, #25
 800288c:	d55a      	bpl.n	8002944 <HAL_UART_IRQHandler+0x138>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800288e:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002890:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002892:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002896:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002898:	2800      	cmp	r0, #0
 800289a:	d053      	beq.n	8002944 <HAL_UART_IRQHandler+0x138>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800289c:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <HAL_UART_IRQHandler+0x17c>)
 800289e:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028a0:	f7fe fe4e 	bl	8001540 <HAL_DMA_Abort_IT>
 80028a4:	b160      	cbz	r0, 80028c0 <HAL_UART_IRQHandler+0xb4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 80028a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ac:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80028ae:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028b0:	0696      	lsls	r6, r2, #26
 80028b2:	d509      	bpl.n	80028c8 <HAL_UART_IRQHandler+0xbc>
 80028b4:	06a9      	lsls	r1, r5, #26
 80028b6:	d507      	bpl.n	80028c8 <HAL_UART_IRQHandler+0xbc>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80028b8:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80028bc:	2b22      	cmp	r3, #34	; 0x22
 80028be:	d04e      	beq.n	800295e <HAL_UART_IRQHandler+0x152>
}
 80028c0:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028c2:	f415 7f90 	tst.w	r5, #288	; 0x120
 80028c6:	d1ac      	bne.n	8002822 <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028c8:	0616      	lsls	r6, r2, #24
 80028ca:	d40e      	bmi.n	80028ea <HAL_UART_IRQHandler+0xde>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80028cc:	0651      	lsls	r1, r2, #25
 80028ce:	d5f7      	bpl.n	80028c0 <HAL_UART_IRQHandler+0xb4>
 80028d0:	066a      	lsls	r2, r5, #25
 80028d2:	d5f5      	bpl.n	80028c0 <HAL_UART_IRQHandler+0xb4>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028d4:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80028d6:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80028d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028dc:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 80028de:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 80028e0:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80028e4:	f002 ff48 	bl	8005778 <HAL_UART_TxCpltCallback>
}
 80028e8:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80028ea:	0628      	lsls	r0, r5, #24
 80028ec:	d5ee      	bpl.n	80028cc <HAL_UART_IRQHandler+0xc0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80028ee:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80028f2:	2a21      	cmp	r2, #33	; 0x21
 80028f4:	d1e4      	bne.n	80028c0 <HAL_UART_IRQHandler+0xb4>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80028f6:	68a1      	ldr	r1, [r4, #8]
 80028f8:	6a22      	ldr	r2, [r4, #32]
 80028fa:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80028fe:	d037      	beq.n	8002970 <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002900:	1c51      	adds	r1, r2, #1
 8002902:	6221      	str	r1, [r4, #32]
 8002904:	7812      	ldrb	r2, [r2, #0]
 8002906:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8002908:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800290a:	3a01      	subs	r2, #1
 800290c:	b292      	uxth	r2, r2
 800290e:	84e2      	strh	r2, [r4, #38]	; 0x26
 8002910:	2a00      	cmp	r2, #0
 8002912:	d1d5      	bne.n	80028c0 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800291a:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002922:	60da      	str	r2, [r3, #12]
}
 8002924:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002926:	b140      	cbz	r0, 800293a <HAL_UART_IRQHandler+0x12e>
 8002928:	2900      	cmp	r1, #0
 800292a:	d094      	beq.n	8002856 <HAL_UART_IRQHandler+0x4a>
 800292c:	f002 0608 	and.w	r6, r2, #8
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002930:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002932:	f041 0104 	orr.w	r1, r1, #4
 8002936:	63e1      	str	r1, [r4, #60]	; 0x3c
 8002938:	e788      	b.n	800284c <HAL_UART_IRQHandler+0x40>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800293a:	0710      	lsls	r0, r2, #28
 800293c:	d58b      	bpl.n	8002856 <HAL_UART_IRQHandler+0x4a>
 800293e:	2900      	cmp	r1, #0
 8002940:	d185      	bne.n	800284e <HAL_UART_IRQHandler+0x42>
 8002942:	e788      	b.n	8002856 <HAL_UART_IRQHandler+0x4a>
            HAL_UART_ErrorCallback(huart);
 8002944:	4620      	mov	r0, r4
 8002946:	f7ff ff2f 	bl	80027a8 <HAL_UART_ErrorCallback>
}
 800294a:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800294c:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 8002950:	2a22      	cmp	r2, #34	; 0x22
 8002952:	d187      	bne.n	8002864 <HAL_UART_IRQHandler+0x58>
 8002954:	4620      	mov	r0, r4
 8002956:	f7ff fee9 	bl	800272c <UART_Receive_IT.part.1>
 800295a:	6823      	ldr	r3, [r4, #0]
 800295c:	e782      	b.n	8002864 <HAL_UART_IRQHandler+0x58>
}
 800295e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002962:	f7ff bee3 	b.w	800272c <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff ff1e 	bl	80027a8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296c:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800296e:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002970:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002972:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002974:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002978:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800297a:	b910      	cbnz	r0, 8002982 <HAL_UART_IRQHandler+0x176>
        huart->pTxBuffPtr += 2U;
 800297c:	3202      	adds	r2, #2
 800297e:	6222      	str	r2, [r4, #32]
 8002980:	e7c2      	b.n	8002908 <HAL_UART_IRQHandler+0xfc>
        huart->pTxBuffPtr += 1U;
 8002982:	3201      	adds	r2, #1
 8002984:	6222      	str	r2, [r4, #32]
 8002986:	e7bf      	b.n	8002908 <HAL_UART_IRQHandler+0xfc>
 8002988:	0800298d 	.word	0x0800298d

0800298c <UART_DMAAbortOnError>:
{
 800298c:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800298e:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8002990:	2200      	movs	r2, #0
 8002992:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8002994:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 8002996:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002998:	f7ff ff06 	bl	80027a8 <HAL_UART_ErrorCallback>
}
 800299c:	bd08      	pop	{r3, pc}
 800299e:	bf00      	nop

080029a0 <CPU_TS_TmrInit>:
*********************************************************************************************************
*/

#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
void  CPU_TS_TmrInit (void)
{
 80029a0:	b538      	push	{r3, r4, r5, lr}
    return HAL_RCC_GetSysClockFreq();
 80029a2:	f7ff fa91 	bl	8001ec8 <HAL_RCC_GetSysClockFreq>
    CPU_INT32U  fclk_freq;


    fclk_freq = BSP_CPU_ClkFreq();

    BSP_REG_DEM_CR     |= (CPU_INT32U)BSP_BIT_DEM_CR_TRCENA;    /* Enable Cortex-M4's DWT CYCCNT reg.                   */
 80029a6:	4908      	ldr	r1, [pc, #32]	; (80029c8 <CPU_TS_TmrInit+0x28>)
    BSP_REG_DWT_CYCCNT  = (CPU_INT32U)0u;
 80029a8:	4c08      	ldr	r4, [pc, #32]	; (80029cc <CPU_TS_TmrInit+0x2c>)
    BSP_REG_DEM_CR     |= (CPU_INT32U)BSP_BIT_DEM_CR_TRCENA;    /* Enable Cortex-M4's DWT CYCCNT reg.                   */
 80029aa:	680b      	ldr	r3, [r1, #0]
    BSP_REG_DWT_CR     |= (CPU_INT32U)BSP_BIT_DWT_CR_CYCCNTENA;
 80029ac:	4a08      	ldr	r2, [pc, #32]	; (80029d0 <CPU_TS_TmrInit+0x30>)
    BSP_REG_DEM_CR     |= (CPU_INT32U)BSP_BIT_DEM_CR_TRCENA;    /* Enable Cortex-M4's DWT CYCCNT reg.                   */
 80029ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    BSP_REG_DWT_CYCCNT  = (CPU_INT32U)0u;
 80029b2:	2500      	movs	r5, #0
    BSP_REG_DEM_CR     |= (CPU_INT32U)BSP_BIT_DEM_CR_TRCENA;    /* Enable Cortex-M4's DWT CYCCNT reg.                   */
 80029b4:	600b      	str	r3, [r1, #0]
    BSP_REG_DWT_CYCCNT  = (CPU_INT32U)0u;
 80029b6:	6025      	str	r5, [r4, #0]
    BSP_REG_DWT_CR     |= (CPU_INT32U)BSP_BIT_DWT_CR_CYCCNTENA;
 80029b8:	6813      	ldr	r3, [r2, #0]
 80029ba:	f043 0301 	orr.w	r3, r3, #1
 80029be:	6013      	str	r3, [r2, #0]

    CPU_TS_TmrFreqSet((CPU_TS_TMR_FREQ)fclk_freq);
}
 80029c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    CPU_TS_TmrFreqSet((CPU_TS_TMR_FREQ)fclk_freq);
 80029c4:	f000 b822 	b.w	8002a0c <CPU_TS_TmrFreqSet>
 80029c8:	e000edfc 	.word	0xe000edfc
 80029cc:	e0001004 	.word	0xe0001004
 80029d0:	e0001000 	.word	0xe0001000

080029d4 <CPU_TS_TmrRd>:
CPU_TS_TMR  CPU_TS_TmrRd (void)
{
    CPU_TS_TMR  ts_tmr_cnts;


    ts_tmr_cnts = (CPU_TS_TMR)BSP_REG_DWT_CYCCNT;
 80029d4:	4b01      	ldr	r3, [pc, #4]	; (80029dc <CPU_TS_TmrRd+0x8>)
 80029d6:	6818      	ldr	r0, [r3, #0]

    return (ts_tmr_cnts);
}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e0001004 	.word	0xe0001004

080029e0 <CPU_Init>:
#endif


                                                                /* ----------------- INIT CPU TS TMR ------------------ */
#if (CPU_CFG_TS_TMR_EN == DEF_ENABLED)
    CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
 80029e0:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <CPU_Init+0x24>)
{
 80029e2:	b510      	push	{r4, lr}
    CPU_TS_TmrFreq_Hz   = 0u;                                   /* Init/clr     ts tmr freq (see Note #1a).             */
 80029e4:	2200      	movs	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
    CPU_TS_TmrInit();                                           /* Init & start ts tmr      (see Note #1b).             */
 80029e8:	f7ff ffda 	bl	80029a0 <CPU_TS_TmrInit>
    CPU_CRITICAL_ENTER();
 80029ec:	f7fd fbfc 	bl	80001e8 <CPU_SR_Save>
    Mem_Clr((void     *)&CPU_Name[0],
 80029f0:	2110      	movs	r1, #16
    CPU_CRITICAL_ENTER();
 80029f2:	4604      	mov	r4, r0
    Mem_Clr((void     *)&CPU_Name[0],
 80029f4:	4804      	ldr	r0, [pc, #16]	; (8002a08 <CPU_Init+0x28>)
 80029f6:	f000 f82b 	bl	8002a50 <Mem_Clr>
    CPU_CRITICAL_EXIT();
 80029fa:	4620      	mov	r0, r4
}
 80029fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CPU_CRITICAL_EXIT();
 8002a00:	f7fd bbf6 	b.w	80001f0 <CPU_SR_Restore>
 8002a04:	20001d24 	.word	0x20001d24
 8002a08:	20001d28 	.word	0x20001d28

08002a0c <CPU_TS_TmrFreqSet>:
    CPU_TS_TmrFreq_Hz = freq_hz;
 8002a0c:	4b01      	ldr	r3, [pc, #4]	; (8002a14 <CPU_TS_TmrFreqSet+0x8>)
 8002a0e:	6018      	str	r0, [r3, #0]
}
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20001d24 	.word	0x20001d24

08002a18 <Mem_Init>:
*                   (b) BEFORE product's application calls any memory library module function(s)
*********************************************************************************************************
*/

void  Mem_Init (void)
{
 8002a18:	b538      	push	{r3, r4, r5, lr}

                                                                /* ------------------ INIT SEG LIST ------------------- */
    Mem_SegHeadPtr = DEF_NULL;
 8002a1a:	4d0a      	ldr	r5, [pc, #40]	; (8002a44 <Mem_Init+0x2c>)

                                                                /* ------------------ INIT HEAP SEG ------------------- */
#ifdef  LIB_MEM_CFG_HEAP_BASE_ADDR
        heap_base_addr = LIB_MEM_CFG_HEAP_BASE_ADDR;
#else
        heap_base_addr = (CPU_ADDR)&Mem_Heap[0u];
 8002a1c:	4c0a      	ldr	r4, [pc, #40]	; (8002a48 <Mem_Init+0x30>)
    Mem_SegHeadPtr = DEF_NULL;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	602b      	str	r3, [r5, #0]
       *p_err = LIB_MEM_ERR_INVALID_MEM_ALIGN;
        return;
    }
#endif

    CPU_CRITICAL_ENTER();
 8002a22:	f7fd fbe1 	bl	80001e8 <CPU_SR_Save>
                                           MEM_SEG     *p_seg,
                                           CPU_ADDR     seg_base_addr,
                                           CPU_SIZE_T   padding_align,
                                           CPU_SIZE_T   size)
{
    p_seg->AddrBase         =  seg_base_addr;
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <Mem_Init+0x34>)
    p_seg->AddrEnd          = (seg_base_addr + (size - 1u));
    p_seg->AddrNext         =  seg_base_addr;
    p_seg->NextPtr          =  Mem_SegHeadPtr;
 8002a28:	682a      	ldr	r2, [r5, #0]
 8002a2a:	60da      	str	r2, [r3, #12]
    p_seg->AddrEnd          = (seg_base_addr + (size - 1u));
 8002a2c:	f604 31ff 	addw	r1, r4, #3071	; 0xbff
    p_seg->PaddingAlign     =  padding_align;
 8002a30:	2201      	movs	r2, #1
    p_seg->AllocInfoHeadPtr = DEF_NULL;
#else
    (void)&p_name;
#endif

    Mem_SegHeadPtr = p_seg;
 8002a32:	602b      	str	r3, [r5, #0]
    p_seg->AddrBase         =  seg_base_addr;
 8002a34:	601c      	str	r4, [r3, #0]
    p_seg->AddrEnd          = (seg_base_addr + (size - 1u));
 8002a36:	e9c3 1401 	strd	r1, r4, [r3, #4]
    p_seg->PaddingAlign     =  padding_align;
 8002a3a:	611a      	str	r2, [r3, #16]
}
 8002a3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    CPU_CRITICAL_EXIT();
 8002a40:	f7fd bbd6 	b.w	80001f0 <CPU_SR_Restore>
 8002a44:	20001d4c 	.word	0x20001d4c
 8002a48:	20001d50 	.word	0x20001d50
 8002a4c:	20001d38 	.word	0x20001d38

08002a50 <Mem_Clr>:
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 8002a50:	f010 0203 	ands.w	r2, r0, #3
{
 8002a54:	b570      	push	{r4, r5, r6, lr}
 8002a56:	4603      	mov	r3, r0
 8002a58:	460c      	mov	r4, r1
    if (mem_align_mod != 0u) {                                  /* If leading octets avail,                   ...       */
 8002a5a:	d02f      	beq.n	8002abc <Mem_Clr+0x6c>
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8002a5c:	b369      	cbz	r1, 8002aba <Mem_Clr+0x6a>
           *pmem_08++ = data_val;
 8002a5e:	2100      	movs	r1, #0
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8002a60:	1e66      	subs	r6, r4, #1
           *pmem_08++ = data_val;
 8002a62:	7001      	strb	r1, [r0, #0]
            i++;
 8002a64:	f102 0501 	add.w	r5, r2, #1
           *pmem_08++ = data_val;
 8002a68:	f100 0001 	add.w	r0, r0, #1
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8002a6c:	d025      	beq.n	8002aba <Mem_Clr+0x6a>
 8002a6e:	2d04      	cmp	r5, #4
 8002a70:	d027      	beq.n	8002ac2 <Mem_Clr+0x72>
 8002a72:	1ea5      	subs	r5, r4, #2
           *pmem_08++ = data_val;
 8002a74:	7059      	strb	r1, [r3, #1]
 8002a76:	f103 0002 	add.w	r0, r3, #2
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8002a7a:	d01e      	beq.n	8002aba <Mem_Clr+0x6a>
 8002a7c:	2a02      	cmp	r2, #2
 8002a7e:	d022      	beq.n	8002ac6 <Mem_Clr+0x76>
 8002a80:	3c03      	subs	r4, #3
           *pmem_08++ = data_val;
 8002a82:	7099      	strb	r1, [r3, #2]
 8002a84:	f103 0003 	add.w	r0, r3, #3
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8002a88:	d017      	beq.n	8002aba <Mem_Clr+0x6a>
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8002a8a:	2c03      	cmp	r4, #3
           *pmem_08++ = data_val;
 8002a8c:	4603      	mov	r3, r0
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8002a8e:	d90d      	bls.n	8002aac <Mem_Clr+0x5c>
       *pmem_align++ = data_align;                              /* ... fill mem buf with    CPU_ALIGN-sized data.       */
 8002a90:	1f25      	subs	r5, r4, #4
 8002a92:	f025 0503 	bic.w	r5, r5, #3
 8002a96:	3504      	adds	r5, #4
 8002a98:	4618      	mov	r0, r3
 8002a9a:	462a      	mov	r2, r5
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	f003 fa00 	bl	8005ea2 <memset>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f004 0403 	and.w	r4, r4, #3
 8002aa8:	442b      	add	r3, r5
    while (size_rem > 0) {                                      /* Finish mem buf fill with trailing octets.            */
 8002aaa:	b134      	cbz	r4, 8002aba <Mem_Clr+0x6a>
 8002aac:	4622      	mov	r2, r4
 8002aae:	4618      	mov	r0, r3
 8002ab0:	2100      	movs	r1, #0
}
 8002ab2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002ab6:	f003 b9f4 	b.w	8005ea2 <memset>
 8002aba:	bd70      	pop	{r4, r5, r6, pc}
    while (size_rem >= sizeof(CPU_ALIGN)) {                     /* While mem buf aligned on CPU_ALIGN word boundaries,  */
 8002abc:	2903      	cmp	r1, #3
 8002abe:	d8e7      	bhi.n	8002a90 <Mem_Clr+0x40>
 8002ac0:	e7f3      	b.n	8002aaa <Mem_Clr+0x5a>
        while ((size_rem > 0) &&                                /* ... start mem buf fill with leading octets ...       */
 8002ac2:	4634      	mov	r4, r6
 8002ac4:	e7e1      	b.n	8002a8a <Mem_Clr+0x3a>
 8002ac6:	462c      	mov	r4, r5
 8002ac8:	e7df      	b.n	8002a8a <Mem_Clr+0x3a>
 8002aca:	bf00      	nop

08002acc <OSIdleTaskHook>:
#if OS_CFG_APP_HOOKS_EN > 0u
    if (OS_AppIdleTaskHookPtr != (OS_APP_HOOK_VOID)0) {
        (*OS_AppIdleTaskHookPtr)();
    }
#endif
}
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop

08002ad0 <OSInitHook>:
*/

void  OSInitHook (void)
{
                                                                    /* 8-byte align the ISR stack.                            */    
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 8002ad0:	4a05      	ldr	r2, [pc, #20]	; (8002ae8 <OSInitHook+0x18>)
 8002ad2:	4b06      	ldr	r3, [pc, #24]	; (8002aec <OSInitHook+0x1c>)
 8002ad4:	6811      	ldr	r1, [r2, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8002ad8:	4a05      	ldr	r2, [pc, #20]	; (8002af0 <OSInitHook+0x20>)
    OS_CPU_ExceptStkBase = (CPU_STK *)(OSCfg_ISRStkBasePtr + OSCfg_ISRStkSize);
 8002ada:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    OS_CPU_ExceptStkBase = (CPU_STK *)((CPU_STK)(OS_CPU_ExceptStkBase) & 0xFFFFFFF8);
 8002ade:	f023 0307 	bic.w	r3, r3, #7
 8002ae2:	6013      	str	r3, [r2, #0]
}
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	0800a6a0 	.word	0x0800a6a0
 8002aec:	0800a69c 	.word	0x0800a69c
 8002af0:	20002950 	.word	0x20002950

08002af4 <OSTaskCreateHook>:
        (*OS_AppTaskCreateHookPtr)(p_tcb);
    }
#else
    (void)p_tcb;                                            /* Prevent compiler warning                               */
#endif
}
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop

08002af8 <OSTaskReturnHook>:
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop

08002afc <OSTaskStkInit>:
                         void          *p_arg,
                         CPU_STK       *p_stk_base,
                         CPU_STK       *p_stk_limit,
                         CPU_STK_SIZE   stk_size,
                         OS_OPT         opt)
{
 8002afc:	b470      	push	{r4, r5, r6}
 8002afe:	9c03      	ldr	r4, [sp, #12]
 8002b00:	f8bd 5010 	ldrh.w	r5, [sp, #16]
    CPU_STK    *p_stk;

    
    (void)opt;                                                  /* Prevent compiler warning                               */

    p_stk = &p_stk_base[stk_size];                              /* Load stack pointer                                     */
 8002b04:	eb02 0284 	add.w	r2, r2, r4, lsl #2
                                                                /* Align the stack to 8-bytes.                            */
    p_stk = (CPU_STK *)((CPU_STK)(p_stk) & 0xFFFFFFF8);
 8002b08:	f022 0207 	bic.w	r2, r2, #7
                                                                /* Registers stacked as if auto-saved on exception        */
    *--p_stk = (CPU_STK)0x01000000u;                            /* xPSR                                                   */
    *--p_stk = (CPU_STK)p_task;                                 /* Entry Point                                            */
    *--p_stk = (CPU_STK)OS_TaskReturn;                          /* R14 (LR)                                               */
 8002b0c:	4c5c      	ldr	r4, [pc, #368]	; (8002c80 <OSTaskStkInit+0x184>)
    *--p_stk = (CPU_STK)0x12121212u;                            /* R12                                                    */
    *--p_stk = (CPU_STK)0x03030303u;                            /* R3                                                     */
    *--p_stk = (CPU_STK)0x02020202u;                            /* R2                                                     */
    *--p_stk = (CPU_STK)p_stk_limit;                            /* R1                                                     */
 8002b0e:	f842 3c1c 	str.w	r3, [r2, #-28]
    *--p_stk = (CPU_STK)p_arg;                                  /* R0 : argument                                          */
 8002b12:	f842 1c20 	str.w	r1, [r2, #-32]
    *--p_stk = (CPU_STK)0x02020202u;                            /* R2                                                     */
 8002b16:	f04f 3302 	mov.w	r3, #33686018	; 0x2020202
    *--p_stk = (CPU_STK)0x03030303u;                            /* R3                                                     */
 8002b1a:	f04f 3103 	mov.w	r1, #50529027	; 0x3030303
    *--p_stk = (CPU_STK)p_task;                                 /* Entry Point                                            */
 8002b1e:	f842 0c08 	str.w	r0, [r2, #-8]
    *--p_stk = (CPU_STK)0x03030303u;                            /* R3                                                     */
 8002b22:	f842 1c14 	str.w	r1, [r2, #-20]
    *--p_stk = (CPU_STK)0x12121212u;                            /* R12                                                    */
 8002b26:	f04f 3012 	mov.w	r0, #303174162	; 0x12121212
                                                                /* Remaining registers saved on process stack             */
    *--p_stk = (CPU_STK)0x11111111u;                            /* R11                                                    */
    *--p_stk = (CPU_STK)0x10101010u;                            /* R10                                                    */
    *--p_stk = (CPU_STK)0x09090909u;                            /* R9                                                     */
 8002b2a:	f04f 3109 	mov.w	r1, #151587081	; 0x9090909
    *--p_stk = (CPU_STK)0x02020202u;                            /* R2                                                     */
 8002b2e:	f842 3c18 	str.w	r3, [r2, #-24]
    *--p_stk = (CPU_STK)0x08080808u;                            /* R8                                                     */
 8002b32:	f04f 3308 	mov.w	r3, #134744072	; 0x8080808
    *--p_stk = (CPU_STK)OS_TaskReturn;                          /* R14 (LR)                                               */
 8002b36:	f842 4c0c 	str.w	r4, [r2, #-12]
    *--p_stk = (CPU_STK)0x12121212u;                            /* R12                                                    */
 8002b3a:	f842 0c10 	str.w	r0, [r2, #-16]
    *--p_stk = (CPU_STK)0x11111111u;                            /* R11                                                    */
 8002b3e:	f04f 3411 	mov.w	r4, #286331153	; 0x11111111
    *--p_stk = (CPU_STK)0x10101010u;                            /* R10                                                    */
 8002b42:	f04f 3010 	mov.w	r0, #269488144	; 0x10101010
    *--p_stk = (CPU_STK)0x09090909u;                            /* R9                                                     */
 8002b46:	f842 1c2c 	str.w	r1, [r2, #-44]
    *--p_stk = (CPU_STK)0x08080808u;                            /* R8                                                     */
 8002b4a:	f842 3c30 	str.w	r3, [r2, #-48]
    *--p_stk = (CPU_STK)0x07070707u;                            /* R7                                                     */
    *--p_stk = (CPU_STK)0x06060606u;                            /* R6                                                     */
    *--p_stk = (CPU_STK)0x05050505u;                            /* R5                                                     */
 8002b4e:	f04f 3105 	mov.w	r1, #84215045	; 0x5050505
    *--p_stk = (CPU_STK)0x04040404u;                            /* R4                                                     */
 8002b52:	f04f 3304 	mov.w	r3, #67372036	; 0x4040404
    *--p_stk = (CPU_STK)0x01000000u;                            /* xPSR                                                   */
 8002b56:	f04f 7680 	mov.w	r6, #16777216	; 0x1000000
    *--p_stk = (CPU_STK)0x11111111u;                            /* R11                                                    */
 8002b5a:	f842 4c24 	str.w	r4, [r2, #-36]
    *--p_stk = (CPU_STK)0x10101010u;                            /* R10                                                    */
 8002b5e:	f842 0c28 	str.w	r0, [r2, #-40]
    *--p_stk = (CPU_STK)0x07070707u;                            /* R7                                                     */
 8002b62:	f04f 3407 	mov.w	r4, #117901063	; 0x7070707
    *--p_stk = (CPU_STK)0x06060606u;                            /* R6                                                     */
 8002b66:	f04f 3006 	mov.w	r0, #101058054	; 0x6060606
    *--p_stk = (CPU_STK)0x04040404u;                            /* R4                                                     */
 8002b6a:	e942 3110 	strd	r3, r1, [r2, #-64]	; 0x40
    
#if (OS_CPU_ARM_FP_EN == DEF_ENABLED)
    if ((opt & OS_OPT_TASK_SAVE_FP) != (OS_OPT)0) {
 8002b6e:	076b      	lsls	r3, r5, #29
    *--p_stk = (CPU_STK)0x01000000u;                            /* xPSR                                                   */
 8002b70:	f842 6c04 	str.w	r6, [r2, #-4]
    *--p_stk = (CPU_STK)0x06060606u;                            /* R6                                                     */
 8002b74:	e942 040e 	strd	r0, r4, [r2, #-56]	; 0x38
    if ((opt & OS_OPT_TASK_SAVE_FP) != (OS_OPT)0) {
 8002b78:	d57d      	bpl.n	8002c76 <OSTaskStkInit+0x17a>
        *--p_stk = (CPU_STK)0x02000000u;                        /* FPSCR                                                  */
 8002b7a:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
                                                                /* Initialize S0-S31 floating point registers             */
        *--p_stk = (CPU_STK)0x41F80000u;                        /* S31                                                    */
 8002b7e:	4941      	ldr	r1, [pc, #260]	; (8002c84 <OSTaskStkInit+0x188>)
        *--p_stk = (CPU_STK)0x41F00000u;                        /* S30                                                    */
 8002b80:	4b41      	ldr	r3, [pc, #260]	; (8002c88 <OSTaskStkInit+0x18c>)
        *--p_stk = (CPU_STK)0x41E80000u;                        /* S29                                                    */
 8002b82:	4d42      	ldr	r5, [pc, #264]	; (8002c8c <OSTaskStkInit+0x190>)
        *--p_stk = (CPU_STK)0x41E00000u;                        /* S28                                                    */
 8002b84:	4c42      	ldr	r4, [pc, #264]	; (8002c90 <OSTaskStkInit+0x194>)
        *--p_stk = (CPU_STK)0x02000000u;                        /* FPSCR                                                  */
 8002b86:	f842 0c44 	str.w	r0, [r2, #-68]
        *--p_stk = (CPU_STK)0x41D80000u;                        /* S27                                                    */
 8002b8a:	4842      	ldr	r0, [pc, #264]	; (8002c94 <OSTaskStkInit+0x198>)
        *--p_stk = (CPU_STK)0x41F80000u;                        /* S31                                                    */
 8002b8c:	f842 1c48 	str.w	r1, [r2, #-72]
        *--p_stk = (CPU_STK)0x41F00000u;                        /* S30                                                    */
 8002b90:	f842 3c4c 	str.w	r3, [r2, #-76]
        *--p_stk = (CPU_STK)0x41D00000u;                        /* S26                                                    */
 8002b94:	f5a1 1120 	sub.w	r1, r1, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41C80000u;                        /* S25                                                    */
 8002b98:	f5a3 1320 	sub.w	r3, r3, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41E80000u;                        /* S29                                                    */
 8002b9c:	f842 5c50 	str.w	r5, [r2, #-80]
        *--p_stk = (CPU_STK)0x41E00000u;                        /* S28                                                    */
 8002ba0:	f842 4c54 	str.w	r4, [r2, #-84]
        *--p_stk = (CPU_STK)0x41C00000u;                        /* S24                                                    */
 8002ba4:	f5a5 1520 	sub.w	r5, r5, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41B80000u;                        /* S23                                                    */
 8002ba8:	f5a4 1420 	sub.w	r4, r4, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41D80000u;                        /* S27                                                    */
 8002bac:	f842 0c58 	str.w	r0, [r2, #-88]
        *--p_stk = (CPU_STK)0x41D00000u;                        /* S26                                                    */
 8002bb0:	f842 1c5c 	str.w	r1, [r2, #-92]
        *--p_stk = (CPU_STK)0x41B00000u;                        /* S22                                                    */
 8002bb4:	f5a0 1020 	sub.w	r0, r0, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41A80000u;                        /* S21                                                    */
 8002bb8:	f5a1 1120 	sub.w	r1, r1, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41C80000u;                        /* S25                                                    */
 8002bbc:	f842 3c60 	str.w	r3, [r2, #-96]
        *--p_stk = (CPU_STK)0x41A00000u;                        /* S20                                                    */
 8002bc0:	f5a3 1320 	sub.w	r3, r3, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41C00000u;                        /* S24                                                    */
 8002bc4:	f842 5c64 	str.w	r5, [r2, #-100]
        *--p_stk = (CPU_STK)0x41B80000u;                        /* S23                                                    */
 8002bc8:	f842 4c68 	str.w	r4, [r2, #-104]
        *--p_stk = (CPU_STK)0x41980000u;                        /* S19                                                    */
 8002bcc:	f5a5 1520 	sub.w	r5, r5, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41900000u;                        /* S18                                                    */
 8002bd0:	f5a4 1420 	sub.w	r4, r4, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41B00000u;                        /* S22                                                    */
 8002bd4:	f842 0c6c 	str.w	r0, [r2, #-108]
        *--p_stk = (CPU_STK)0x41A80000u;                        /* S21                                                    */
 8002bd8:	f842 1c70 	str.w	r1, [r2, #-112]
        *--p_stk = (CPU_STK)0x41880000u;                        /* S17                                                    */
 8002bdc:	f5a0 1020 	sub.w	r0, r0, #2621440	; 0x280000
        *--p_stk = (CPU_STK)0x41800000u;                        /* S16                                                    */
 8002be0:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
        *--p_stk = (CPU_STK)0x41A00000u;                        /* S20                                                    */
 8002be4:	f842 3c74 	str.w	r3, [r2, #-116]
        *--p_stk = (CPU_STK)0x41700000u;                        /* S15                                                    */
 8002be8:	f5a3 1340 	sub.w	r3, r3, #3145728	; 0x300000
        *--p_stk = (CPU_STK)0x41980000u;                        /* S19                                                    */
 8002bec:	f842 5c78 	str.w	r5, [r2, #-120]
        *--p_stk = (CPU_STK)0x41900000u;                        /* S18                                                    */
 8002bf0:	f842 4c7c 	str.w	r4, [r2, #-124]
        *--p_stk = (CPU_STK)0x41600000u;                        /* S14                                                    */
 8002bf4:	f5a5 1560 	sub.w	r5, r5, #3670016	; 0x380000
        *--p_stk = (CPU_STK)0x41500000u;                        /* S13                                                    */
 8002bf8:	f5a4 0480 	sub.w	r4, r4, #4194304	; 0x400000
        *--p_stk = (CPU_STK)0x41880000u;                        /* S17                                                    */
 8002bfc:	f842 0c80 	str.w	r0, [r2, #-128]
        *--p_stk = (CPU_STK)0x41800000u;                        /* S16                                                    */
 8002c00:	f842 1c84 	str.w	r1, [r2, #-132]
        *--p_stk = (CPU_STK)0x41400000u;                        /* S12                                                    */
 8002c04:	f5a0 0090 	sub.w	r0, r0, #4718592	; 0x480000
        *--p_stk = (CPU_STK)0x41300000u;                        /* S11                                                    */
 8002c08:	f5a1 01a0 	sub.w	r1, r1, #5242880	; 0x500000
        *--p_stk = (CPU_STK)0x41700000u;                        /* S15                                                    */
 8002c0c:	f842 3c88 	str.w	r3, [r2, #-136]
        *--p_stk = (CPU_STK)0x41200000u;                        /* S10                                                    */
 8002c10:	f5a3 03a0 	sub.w	r3, r3, #5242880	; 0x500000
        *--p_stk = (CPU_STK)0x41600000u;                        /* S14                                                    */
 8002c14:	f842 5c8c 	str.w	r5, [r2, #-140]
        *--p_stk = (CPU_STK)0x41500000u;                        /* S13                                                    */
 8002c18:	f842 4c90 	str.w	r4, [r2, #-144]
        *--p_stk = (CPU_STK)0x41100000u;                        /* S9                                                     */
 8002c1c:	f5a5 05a0 	sub.w	r5, r5, #5242880	; 0x500000
        *--p_stk = (CPU_STK)0x41000000u;                        /* S8                                                     */
 8002c20:	f04f 4482 	mov.w	r4, #1090519040	; 0x41000000
        *--p_stk = (CPU_STK)0x41400000u;                        /* S12                                                    */
 8002c24:	f842 0c94 	str.w	r0, [r2, #-148]
        *--p_stk = (CPU_STK)0x41300000u;                        /* S11                                                    */
 8002c28:	f842 1c98 	str.w	r1, [r2, #-152]
        *--p_stk = (CPU_STK)0x40E00000u;                        /* S7                                                     */
 8002c2c:	f5a0 00c0 	sub.w	r0, r0, #6291456	; 0x600000
        *--p_stk = (CPU_STK)0x40C00000u;                        /* S6                                                     */
 8002c30:	f5a1 01e0 	sub.w	r1, r1, #7340032	; 0x700000
        *--p_stk = (CPU_STK)0x41200000u;                        /* S10                                                    */
 8002c34:	f842 3c9c 	str.w	r3, [r2, #-156]
        *--p_stk = (CPU_STK)0x40A00000u;                        /* S5                                                     */
 8002c38:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
        *--p_stk = (CPU_STK)0x41100000u;                        /* S9                                                     */
 8002c3c:	f842 5ca0 	str.w	r5, [r2, #-160]
        *--p_stk = (CPU_STK)0x41000000u;                        /* S8                                                     */
 8002c40:	f842 4ca4 	str.w	r4, [r2, #-164]
        *--p_stk = (CPU_STK)0x40800000u;                        /* S4                                                     */
 8002c44:	f04f 4581 	mov.w	r5, #1082130432	; 0x40800000
        *--p_stk = (CPU_STK)0x40400000u;                        /* S3                                                     */
 8002c48:	f5a4 0440 	sub.w	r4, r4, #12582912	; 0xc00000
        *--p_stk = (CPU_STK)0x40E00000u;                        /* S7                                                     */
 8002c4c:	f842 0ca8 	str.w	r0, [r2, #-168]
        *--p_stk = (CPU_STK)0x40C00000u;                        /* S6                                                     */
 8002c50:	f842 1cac 	str.w	r1, [r2, #-172]
        *--p_stk = (CPU_STK)0x40000000u;                        /* S2                                                     */
 8002c54:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
        *--p_stk = (CPU_STK)0x40A00000u;                        /* S5                                                     */
 8002c58:	f842 3cb0 	str.w	r3, [r2, #-176]
        *--p_stk = (CPU_STK)0x3F800000u;                        /* S1                                                     */
 8002c5c:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
        *--p_stk = (CPU_STK)0x00000000u;                        /* S0                                                     */
 8002c60:	2300      	movs	r3, #0
        *--p_stk = (CPU_STK)0x40400000u;                        /* S3                                                     */
 8002c62:	e942 452e 	strd	r4, r5, [r2, #-184]	; 0xb8
        *--p_stk = (CPU_STK)0x3F800000u;                        /* S1                                                     */
 8002c66:	e942 1030 	strd	r1, r0, [r2, #-192]	; 0xc0
        *--p_stk = (CPU_STK)0x00000000u;                        /* S0                                                     */
 8002c6a:	f1a2 00c4 	sub.w	r0, r2, #196	; 0xc4
 8002c6e:	f842 3cc4 	str.w	r3, [r2, #-196]
    }
#endif    

    return (p_stk);
}
 8002c72:	bc70      	pop	{r4, r5, r6}
 8002c74:	4770      	bx	lr
    *--p_stk = (CPU_STK)0x04040404u;                            /* R4                                                     */
 8002c76:	f1a2 0040 	sub.w	r0, r2, #64	; 0x40
}
 8002c7a:	bc70      	pop	{r4, r5, r6}
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	08004161 	.word	0x08004161
 8002c84:	41f80000 	.word	0x41f80000
 8002c88:	41f00000 	.word	0x41f00000
 8002c8c:	41e80000 	.word	0x41e80000
 8002c90:	41e00000 	.word	0x41e00000
 8002c94:	41d80000 	.word	0x41d80000

08002c98 <OSTaskSwHook>:
*                 to the task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/

void  OSTaskSwHook (void)
{
 8002c98:	b538      	push	{r3, r4, r5, lr}
    CPU_TS  int_dis_time;
#endif

    
#if (OS_CPU_ARM_FP_EN == DEF_ENABLED)
    if ((OSTCBCurPtr->Opt & OS_OPT_TASK_SAVE_FP) != (OS_OPT)0) {
 8002c9a:	4d17      	ldr	r5, [pc, #92]	; (8002cf8 <OSTaskSwHook+0x60>)
 8002c9c:	682b      	ldr	r3, [r5, #0]
 8002c9e:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002ca2:	0751      	lsls	r1, r2, #29
 8002ca4:	d420      	bmi.n	8002ce8 <OSTaskSwHook+0x50>
        OS_CPU_FP_Reg_Push(OSTCBCurPtr->StkPtr);
    }

    if ((OSTCBHighRdyPtr->Opt & OS_OPT_TASK_SAVE_FP) != (OS_OPT)0) {
 8002ca6:	4c15      	ldr	r4, [pc, #84]	; (8002cfc <OSTaskSwHook+0x64>)
 8002ca8:	6823      	ldr	r3, [r4, #0]
 8002caa:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002cae:	0752      	lsls	r2, r2, #29
 8002cb0:	d41e      	bmi.n	8002cf0 <OSTaskSwHook+0x58>
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_SWITCHED_IN(OSTCBHighRdyPtr);             /* Record the event.                                      */
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    ts = OS_TS_GET();
 8002cb2:	f7ff fe8f 	bl	80029d4 <CPU_TS_TmrRd>
    if (OSTCBCurPtr != OSTCBHighRdyPtr) {
 8002cb6:	682b      	ldr	r3, [r5, #0]
 8002cb8:	6821      	ldr	r1, [r4, #0]
 8002cba:	428b      	cmp	r3, r1
 8002cbc:	d007      	beq.n	8002cce <OSTaskSwHook+0x36>
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8002cbe:	e9d3 2427 	ldrd	r2, r4, [r3, #156]	; 0x9c
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 8002cc2:	1a82      	subs	r2, r0, r2
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8002cc4:	4414      	add	r4, r2
        OSTCBCurPtr->CyclesDelta  = ts - OSTCBCurPtr->CyclesStart;
 8002cc6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        OSTCBCurPtr->CyclesTotal += (OS_CYCLES)OSTCBCurPtr->CyclesDelta;
 8002cca:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
    }
#endif

#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
                                                            /* Keep track of per-task scheduler lock time             */
    if (OSTCBCurPtr->SchedLockTimeMax < OSSchedLockTimeMaxCur) {
 8002cce:	4a0c      	ldr	r2, [pc, #48]	; (8002d00 <OSTaskSwHook+0x68>)
 8002cd0:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 8002cd4:	6814      	ldr	r4, [r2, #0]
    OSTCBHighRdyPtr->CyclesStart = ts;
 8002cd6:	f8c1 009c 	str.w	r0, [r1, #156]	; 0x9c
    if (OSTCBCurPtr->SchedLockTimeMax < OSSchedLockTimeMaxCur) {
 8002cda:	42a5      	cmp	r5, r4
        OSTCBCurPtr->SchedLockTimeMax = OSSchedLockTimeMaxCur;
 8002cdc:	bf38      	it	cc
 8002cde:	f8c3 40b0 	strcc.w	r4, [r3, #176]	; 0xb0
    }
    OSSchedLockTimeMaxCur = (CPU_TS)0;                      /* Reset the per-task value                               */
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	6013      	str	r3, [r2, #0]
#endif
}
 8002ce6:	bd38      	pop	{r3, r4, r5, pc}
        OS_CPU_FP_Reg_Push(OSTCBCurPtr->StkPtr);
 8002ce8:	6818      	ldr	r0, [r3, #0]
 8002cea:	f7fd fa93 	bl	8000214 <OS_CPU_FP_Reg_Push>
 8002cee:	e7da      	b.n	8002ca6 <OSTaskSwHook+0xe>
        OS_CPU_FP_Reg_Pop(OSTCBHighRdyPtr->StkPtr);
 8002cf0:	6818      	ldr	r0, [r3, #0]
 8002cf2:	f7fd fa9c 	bl	800022e <OS_CPU_FP_Reg_Pop>
 8002cf6:	e7dc      	b.n	8002cb2 <OSTaskSwHook+0x1a>
 8002cf8:	200036ec 	.word	0x200036ec
 8002cfc:	200036f4 	.word	0x200036f4
 8002d00:	200036f8 	.word	0x200036f8

08002d04 <OSTimeTickHook>:
 8002d04:	4770      	bx	lr
 8002d06:	bf00      	nop

08002d08 <OS_CPU_SysTickHandler>:
* Note(s)    : 1) This function MUST be placed on entry 15 of the Cortex-M4 vector table.
*********************************************************************************************************
*/

void  OS_CPU_SysTickHandler (void)
{
 8002d08:	b508      	push	{r3, lr}
    CPU_SR_ALLOC();


    CPU_CRITICAL_ENTER();
 8002d0a:	f7fd fa6d 	bl	80001e8 <CPU_SR_Save>
    OSIntNestingCtr++;                                      /* Tell uC/OS-III that we are starting an ISR             */
 8002d0e:	4a06      	ldr	r2, [pc, #24]	; (8002d28 <OS_CPU_SysTickHandler+0x20>)
 8002d10:	7813      	ldrb	r3, [r2, #0]
 8002d12:	3301      	adds	r3, #1
 8002d14:	7013      	strb	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 8002d16:	f7fd fa6b 	bl	80001f0 <CPU_SR_Restore>

    OSTimeTick();                                           /* Call uC/OS-III's OSTimeTick()                          */
 8002d1a:	f001 fdc9 	bl	80048b0 <OSTimeTick>

    OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
}
 8002d1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    OSIntExit();                                            /* Tell uC/OS-III that we are leaving the ISR             */
 8002d22:	f000 b823 	b.w	8002d6c <OSIntExit>
 8002d26:	bf00      	nop
 8002d28:	20003704 	.word	0x20003704

08002d2c <OSCfg_Init>:
    (void)&OSCfg_TmrTaskStkBasePtr;
    (void)&OSCfg_TmrTaskStkLimit;
    (void)&OSCfg_TmrTaskStkSize;
    (void)&OSCfg_TmrTaskStkSizeRAM;
#endif
}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop

08002d30 <OS_IdleTask>:
*              3) This hook has been added to allow you to do such things as STOP the CPU to conserve power.
************************************************************************************************************************
*/

void  OS_IdleTask (void  *p_arg)
{
 8002d30:	b510      	push	{r4, lr}
 8002d32:	4c05      	ldr	r4, [pc, #20]	; (8002d48 <OS_IdleTask+0x18>)


    (void)&p_arg;                                           /* Prevent compiler warning for not using 'p_arg'         */

    while (DEF_ON) {
        CPU_CRITICAL_ENTER();
 8002d34:	f7fd fa58 	bl	80001e8 <CPU_SR_Save>
        OSIdleTaskCtr++;
 8002d38:	6823      	ldr	r3, [r4, #0]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	6023      	str	r3, [r4, #0]
#if OS_CFG_STAT_TASK_EN > 0u
        OSStatTaskCtr++;
#endif
        CPU_CRITICAL_EXIT();
 8002d3e:	f7fd fa57 	bl	80001f0 <CPU_SR_Restore>

        OSIdleTaskHook();                                   /* Call user definable HOOK                               */
 8002d42:	f7ff fec3 	bl	8002acc <OSIdleTaskHook>
 8002d46:	e7f5      	b.n	8002d34 <OS_IdleTask+0x4>
 8002d48:	200037e8 	.word	0x200037e8

08002d4c <OSIntEnter>:
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Is OS running?                                         */
 8002d4c:	4b05      	ldr	r3, [pc, #20]	; (8002d64 <OSIntEnter+0x18>)
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d105      	bne.n	8002d60 <OSIntEnter+0x14>
    if (OSIntNestingCtr >= (OS_NESTING_CTR)250u) {          /* Have we nested past 250 levels?                        */
 8002d54:	4a04      	ldr	r2, [pc, #16]	; (8002d68 <OSIntEnter+0x1c>)
 8002d56:	7813      	ldrb	r3, [r2, #0]
 8002d58:	2bf9      	cmp	r3, #249	; 0xf9
    OSIntNestingCtr++;                                      /* Increment ISR nesting level                            */
 8002d5a:	bf9c      	itt	ls
 8002d5c:	3301      	addls	r3, #1
 8002d5e:	7013      	strbls	r3, [r2, #0]
}
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	2000349a 	.word	0x2000349a
 8002d68:	20003704 	.word	0x20003704

08002d6c <OSIntExit>:
{
 8002d6c:	b538      	push	{r3, r4, r5, lr}
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Has the OS started?                                    */
 8002d6e:	4b18      	ldr	r3, [pc, #96]	; (8002dd0 <OSIntExit+0x64>)
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d000      	beq.n	8002d78 <OSIntExit+0xc>
}
 8002d76:	bd38      	pop	{r3, r4, r5, pc}
    CPU_INT_DIS();
 8002d78:	f7fd fa36 	bl	80001e8 <CPU_SR_Save>
    if (OSIntNestingCtr == (OS_NESTING_CTR)0) {             /* Prevent OSIntNestingCtr from wrapping                  */
 8002d7c:	4a15      	ldr	r2, [pc, #84]	; (8002dd4 <OSIntExit+0x68>)
 8002d7e:	7813      	ldrb	r3, [r2, #0]
    CPU_INT_DIS();
 8002d80:	4604      	mov	r4, r0
    if (OSIntNestingCtr == (OS_NESTING_CTR)0) {             /* Prevent OSIntNestingCtr from wrapping                  */
 8002d82:	b30b      	cbz	r3, 8002dc8 <OSIntExit+0x5c>
    OSIntNestingCtr--;
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	7013      	strb	r3, [r2, #0]
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8002d8a:	b9eb      	cbnz	r3, 8002dc8 <OSIntExit+0x5c>
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler still locked?                                */
 8002d8c:	4b12      	ldr	r3, [pc, #72]	; (8002dd8 <OSIntExit+0x6c>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b9d3      	cbnz	r3, 8002dc8 <OSIntExit+0x5c>
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
 8002d92:	f000 ff2b 	bl	8003bec <OS_PrioGetHighest>
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
 8002d96:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <OSIntExit+0x70>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8002d98:	4a11      	ldr	r2, [pc, #68]	; (8002de0 <OSIntExit+0x74>)
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
 8002d9a:	4d12      	ldr	r5, [pc, #72]	; (8002de4 <OSIntExit+0x78>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8002d9c:	6812      	ldr	r2, [r2, #0]
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find highest priority                                  */
 8002d9e:	7028      	strb	r0, [r5, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
 8002da0:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002da4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002da8:	490f      	ldr	r1, [pc, #60]	; (8002de8 <OSIntExit+0x7c>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8002daa:	4293      	cmp	r3, r2
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;     /* Get highest priority task ready-to-run                 */
 8002dac:	600b      	str	r3, [r1, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task still the highest priority?               */
 8002dae:	d00a      	beq.n	8002dc6 <OSIntExit+0x5a>
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 8002db0:	480e      	ldr	r0, [pc, #56]	; (8002dec <OSIntExit+0x80>)
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
 8002db2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 8002db6:	6802      	ldr	r2, [r0, #0]
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
 8002db8:	3101      	adds	r1, #1
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 8002dba:	3201      	adds	r2, #1
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches for this new task           */
 8002dbc:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    OSTaskCtxSwCtr++;                                       /* Keep track of the total number of ctx switches         */
 8002dc0:	6002      	str	r2, [r0, #0]
    OSIntCtxSw();                                           /* Perform interrupt level ctx switch                     */
 8002dc2:	f7fd fa7a 	bl	80002ba <OSIntCtxSw>
    CPU_INT_EN();
 8002dc6:	4620      	mov	r0, r4
}
 8002dc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    CPU_INT_EN();
 8002dcc:	f7fd ba10 	b.w	80001f0 <CPU_SR_Restore>
 8002dd0:	2000349a 	.word	0x2000349a
 8002dd4:	20003704 	.word	0x20003704
 8002dd8:	20003498 	.word	0x20003498
 8002ddc:	2000349c 	.word	0x2000349c
 8002de0:	200036ec 	.word	0x200036ec
 8002de4:	2000361c 	.word	0x2000361c
 8002de8:	200036f4 	.word	0x200036f4
 8002dec:	20003700 	.word	0x20003700

08002df0 <OSSched>:
{
 8002df0:	b538      	push	{r3, r4, r5, lr}
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ISRs still nested?                                     */
 8002df2:	4b17      	ldr	r3, [pc, #92]	; (8002e50 <OSSched+0x60>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	b913      	cbnz	r3, 8002dfe <OSSched+0xe>
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Scheduler locked?                                      */
 8002df8:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <OSSched+0x64>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b103      	cbz	r3, 8002e00 <OSSched+0x10>
}
 8002dfe:	bd38      	pop	{r3, r4, r5, pc}
    CPU_INT_DIS();
 8002e00:	f7fd f9f2 	bl	80001e8 <CPU_SR_Save>
 8002e04:	4604      	mov	r4, r0
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8002e06:	f000 fef1 	bl	8003bec <OS_PrioGetHighest>
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002e0a:	4b13      	ldr	r3, [pc, #76]	; (8002e58 <OSSched+0x68>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8002e0c:	4a13      	ldr	r2, [pc, #76]	; (8002e5c <OSSched+0x6c>)
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8002e0e:	4d14      	ldr	r5, [pc, #80]	; (8002e60 <OSSched+0x70>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8002e10:	6812      	ldr	r2, [r2, #0]
    OSPrioHighRdy   = OS_PrioGetHighest();                  /* Find the highest priority ready                        */
 8002e12:	7028      	strb	r0, [r5, #0]
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002e14:	eb00 0140 	add.w	r1, r0, r0, lsl #1
 8002e18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e1c:	4911      	ldr	r1, [pc, #68]	; (8002e64 <OSSched+0x74>)
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8002e1e:	4293      	cmp	r3, r2
    OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002e20:	600b      	str	r3, [r1, #0]
    if (OSTCBHighRdyPtr == OSTCBCurPtr) {                   /* Current task is still highest priority task?           */
 8002e22:	d010      	beq.n	8002e46 <OSSched+0x56>
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8002e24:	4810      	ldr	r0, [pc, #64]	; (8002e68 <OSSched+0x78>)
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8002e26:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8002e2a:	6802      	ldr	r2, [r0, #0]
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8002e2c:	3101      	adds	r1, #1
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8002e2e:	3201      	adds	r2, #1
    OSTCBHighRdyPtr->CtxSwCtr++;                            /* Inc. # of context switches to this task                */
 8002e30:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
    OSTaskCtxSwCtr++;                                       /* Increment context switch counter                       */
 8002e34:	6002      	str	r2, [r0, #0]
    OS_TASK_SW();                                           /* Perform a task level context switch                    */
 8002e36:	f7fd fa3b 	bl	80002b0 <OSCtxSw>
    CPU_INT_EN();
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f7fd f9d8 	bl	80001f0 <CPU_SR_Restore>
    OS_TASK_SW_SYNC();
 8002e40:	f3bf 8f6f 	isb	sy
}
 8002e44:	bd38      	pop	{r3, r4, r5, pc}
        CPU_INT_EN();                                       /* Yes ... no need to context switch                      */
 8002e46:	4620      	mov	r0, r4
}
 8002e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        CPU_INT_EN();                                       /* Yes ... no need to context switch                      */
 8002e4c:	f7fd b9d0 	b.w	80001f0 <CPU_SR_Restore>
 8002e50:	20003704 	.word	0x20003704
 8002e54:	20003498 	.word	0x20003498
 8002e58:	2000349c 	.word	0x2000349c
 8002e5c:	200036ec 	.word	0x200036ec
 8002e60:	2000361c 	.word	0x2000361c
 8002e64:	200036f4 	.word	0x200036f4
 8002e68:	20003700 	.word	0x20003700

08002e6c <OSStart>:
{
 8002e6c:	b538      	push	{r3, r4, r5, lr}
    if (OSRunning == OS_STATE_OS_STOPPED) {
 8002e6e:	4d0f      	ldr	r5, [pc, #60]	; (8002eac <OSStart+0x40>)
 8002e70:	782b      	ldrb	r3, [r5, #0]
 8002e72:	b11b      	cbz	r3, 8002e7c <OSStart+0x10>
       *p_err           = OS_ERR_OS_RUNNING;                /* OS is already running                                  */
 8002e74:	f645 638a 	movw	r3, #24202	; 0x5e8a
 8002e78:	8003      	strh	r3, [r0, #0]
}
 8002e7a:	bd38      	pop	{r3, r4, r5, pc}
 8002e7c:	4604      	mov	r4, r0
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
 8002e7e:	f000 feb5 	bl	8003bec <OS_PrioGetHighest>
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <OSStart+0x44>)
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
 8002e84:	4a0b      	ldr	r2, [pc, #44]	; (8002eb4 <OSStart+0x48>)
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002e86:	eb00 0140 	add.w	r1, r0, r0, lsl #1
        OSPrioHighRdy   = OS_PrioGetHighest();              /* Find the highest priority                              */
 8002e8a:	7010      	strb	r0, [r2, #0]
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002e8c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
        OSPrioCur       = OSPrioHighRdy;
 8002e90:	4909      	ldr	r1, [pc, #36]	; (8002eb8 <OSStart+0x4c>)
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002e92:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <OSStart+0x50>)
        OSPrioCur       = OSPrioHighRdy;
 8002e94:	7008      	strb	r0, [r1, #0]
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 8002e96:	490a      	ldr	r1, [pc, #40]	; (8002ec0 <OSStart+0x54>)
        OSTCBHighRdyPtr = OSRdyList[OSPrioHighRdy].HeadPtr;
 8002e98:	6013      	str	r3, [r2, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 8002e9a:	2201      	movs	r2, #1
        OSTCBCurPtr     = OSTCBHighRdyPtr;
 8002e9c:	600b      	str	r3, [r1, #0]
        OSRunning       = OS_STATE_OS_RUNNING;
 8002e9e:	702a      	strb	r2, [r5, #0]
        OSStartHighRdy();                                   /* Execute target specific code to start task             */
 8002ea0:	f7fd f9ce 	bl	8000240 <OSStartHighRdy>
       *p_err           = OS_ERR_FATAL_RETURN;              /* OSStart() is not supposed to return                    */
 8002ea4:	f643 2399 	movw	r3, #15001	; 0x3a99
 8002ea8:	8023      	strh	r3, [r4, #0]
}
 8002eaa:	bd38      	pop	{r3, r4, r5, pc}
 8002eac:	2000349a 	.word	0x2000349a
 8002eb0:	2000349c 	.word	0x2000349c
 8002eb4:	2000361c 	.word	0x2000361c
 8002eb8:	20003624 	.word	0x20003624
 8002ebc:	200036f4 	.word	0x200036f4
 8002ec0:	200036ec 	.word	0x200036ec

08002ec4 <OS_IdleTaskInit>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_IdleTaskInit (OS_ERR  *p_err)
{
 8002ec4:	b570      	push	{r4, r5, r6, lr}
    }
#endif

    OSIdleTaskCtr = (OS_IDLE_CTR)0;
                                                            /* ---------------- CREATE THE IDLE TASK ---------------- */
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
 8002ec6:	490e      	ldr	r1, [pc, #56]	; (8002f00 <OS_IdleTaskInit+0x3c>)
 8002ec8:	4a0e      	ldr	r2, [pc, #56]	; (8002f04 <OS_IdleTaskInit+0x40>)
 8002eca:	4b0f      	ldr	r3, [pc, #60]	; (8002f08 <OS_IdleTaskInit+0x44>)
 8002ecc:	680e      	ldr	r6, [r1, #0]
 8002ece:	6812      	ldr	r2, [r2, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
    OSIdleTaskCtr = (OS_IDLE_CTR)0;
 8002ed2:	4d0e      	ldr	r5, [pc, #56]	; (8002f0c <OS_IdleTaskInit+0x48>)
{
 8002ed4:	b08a      	sub	sp, #40	; 0x28
    OSIdleTaskCtr = (OS_IDLE_CTR)0;
 8002ed6:	2400      	movs	r4, #0
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
 8002ed8:	9203      	str	r2, [sp, #12]
 8002eda:	210b      	movs	r1, #11
 8002edc:	221f      	movs	r2, #31
 8002ede:	9008      	str	r0, [sp, #32]
 8002ee0:	e9cd 3601 	strd	r3, r6, [sp, #4]
 8002ee4:	9107      	str	r1, [sp, #28]
 8002ee6:	9200      	str	r2, [sp, #0]
 8002ee8:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002eec:	9404      	str	r4, [sp, #16]
 8002eee:	4623      	mov	r3, r4
 8002ef0:	4a07      	ldr	r2, [pc, #28]	; (8002f10 <OS_IdleTaskInit+0x4c>)
 8002ef2:	4908      	ldr	r1, [pc, #32]	; (8002f14 <OS_IdleTaskInit+0x50>)
 8002ef4:	4808      	ldr	r0, [pc, #32]	; (8002f18 <OS_IdleTaskInit+0x54>)
    OSIdleTaskCtr = (OS_IDLE_CTR)0;
 8002ef6:	602c      	str	r4, [r5, #0]
    OSTaskCreate((OS_TCB     *)&OSIdleTaskTCB,
 8002ef8:	f000 fed2 	bl	8003ca0 <OSTaskCreate>
                 (OS_MSG_QTY  )0u,
                 (OS_TICK     )0u,
                 (void       *)0,
                 (OS_OPT      )(OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR | OS_OPT_TASK_NO_TLS),
                 (OS_ERR     *)p_err);
}
 8002efc:	b00a      	add	sp, #40	; 0x28
 8002efe:	bd70      	pop	{r4, r5, r6, pc}
 8002f00:	0800a6a8 	.word	0x0800a6a8
 8002f04:	0800a6ac 	.word	0x0800a6ac
 8002f08:	0800a6a4 	.word	0x0800a6a4
 8002f0c:	200037e8 	.word	0x200037e8
 8002f10:	08002d31 	.word	0x08002d31
 8002f14:	0800a6d0 	.word	0x0800a6d0
 8002f18:	20003714 	.word	0x20003714

08002f1c <OSInit>:
{
 8002f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f1e:	4605      	mov	r5, r0
    OSInitHook();                                           /* Call port specific initialization code                 */
 8002f20:	f7ff fdd6 	bl	8002ad0 <OSInitHook>
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
 8002f24:	4b39      	ldr	r3, [pc, #228]	; (800300c <OSInit+0xf0>)
 8002f26:	483a      	ldr	r0, [pc, #232]	; (8003010 <OSInit+0xf4>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	493a      	ldr	r1, [pc, #232]	; (8003014 <OSInit+0xf8>)
    OSTCBCurPtr                     = (OS_TCB *)0;          /* Initialize OS_TCB pointers to a known state            */
 8002f2c:	4c3a      	ldr	r4, [pc, #232]	; (8003018 <OSInit+0xfc>)
    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
 8002f2e:	4a3b      	ldr	r2, [pc, #236]	; (800301c <OSInit+0x100>)
    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
 8002f30:	4f3b      	ldr	r7, [pc, #236]	; (8003020 <OSInit+0x104>)
    OSSchedLockNestingCtr           = (OS_NESTING_CTR)0;    /* Clear the scheduling lock counter                      */
 8002f32:	4e3c      	ldr	r6, [pc, #240]	; (8003024 <OSInit+0x108>)
    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
 8002f34:	6812      	ldr	r2, [r2, #0]
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
 8002f36:	fba0 0303 	umull	r0, r3, r0, r3
 8002f3a:	08db      	lsrs	r3, r3, #3
    OSRunning                       =  OS_STATE_OS_STOPPED; /* Indicate that multitasking not started                 */
 8002f3c:	483a      	ldr	r0, [pc, #232]	; (8003028 <OSInit+0x10c>)
    OSSchedRoundRobinDfltTimeQuanta = OSCfg_TickRate_Hz / 10u;
 8002f3e:	600b      	str	r3, [r1, #0]
    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
 8002f40:	2100      	movs	r1, #0
    OSRunning                       =  OS_STATE_OS_STOPPED; /* Indicate that multitasking not started                 */
 8002f42:	7001      	strb	r1, [r0, #0]
    OSPrioCur                       = (OS_PRIO)0;           /* Initialize priority variables to a known state         */
 8002f44:	4b39      	ldr	r3, [pc, #228]	; (800302c <OSInit+0x110>)
    OSTCBHighRdyPtr                 = (OS_TCB *)0;
 8002f46:	483a      	ldr	r0, [pc, #232]	; (8003030 <OSInit+0x114>)
    OSTCBCurPtr                     = (OS_TCB *)0;          /* Initialize OS_TCB pointers to a known state            */
 8002f48:	6021      	str	r1, [r4, #0]
    OSTCBHighRdyPtr                 = (OS_TCB *)0;
 8002f4a:	6001      	str	r1, [r0, #0]
    OSPrioCur                       = (OS_PRIO)0;           /* Initialize priority variables to a known state         */
 8002f4c:	7019      	strb	r1, [r3, #0]
    OSPrioHighRdy                   = (OS_PRIO)0;
 8002f4e:	4c39      	ldr	r4, [pc, #228]	; (8003034 <OSInit+0x118>)
    OSPrioSaved                     = (OS_PRIO)0;
 8002f50:	4839      	ldr	r0, [pc, #228]	; (8003038 <OSInit+0x11c>)
    OSSchedLockTimeBegin            = (CPU_TS)0;
 8002f52:	4b3a      	ldr	r3, [pc, #232]	; (800303c <OSInit+0x120>)
    OSPrioHighRdy                   = (OS_PRIO)0;
 8002f54:	7021      	strb	r1, [r4, #0]
    OSPrioSaved                     = (OS_PRIO)0;
 8002f56:	7001      	strb	r1, [r0, #0]
    OSSchedLockTimeBegin            = (CPU_TS)0;
 8002f58:	6019      	str	r1, [r3, #0]
    OSSchedLockTimeMax              = (CPU_TS)0;
 8002f5a:	4c39      	ldr	r4, [pc, #228]	; (8003040 <OSInit+0x124>)
    OSSchedLockTimeMaxCur           = (CPU_TS)0;
 8002f5c:	4839      	ldr	r0, [pc, #228]	; (8003044 <OSInit+0x128>)
    OSSchedRoundRobinEn             = DEF_FALSE;
 8002f5e:	4b3a      	ldr	r3, [pc, #232]	; (8003048 <OSInit+0x12c>)
    OSIntNestingCtr                 = (OS_NESTING_CTR)0;    /* Clear the interrupt nesting counter                    */
 8002f60:	7039      	strb	r1, [r7, #0]
    OSSchedLockNestingCtr           = (OS_NESTING_CTR)0;    /* Clear the scheduling lock counter                      */
 8002f62:	7031      	strb	r1, [r6, #0]
    OSSchedLockTimeMax              = (CPU_TS)0;
 8002f64:	6021      	str	r1, [r4, #0]
    OSSchedLockTimeMaxCur           = (CPU_TS)0;
 8002f66:	6001      	str	r1, [r0, #0]
    OSSchedRoundRobinEn             = DEF_FALSE;
 8002f68:	7019      	strb	r1, [r3, #0]
    if (OSCfg_ISRStkSize > (CPU_STK_SIZE)0) {
 8002f6a:	b12a      	cbz	r2, 8002f78 <OSInit+0x5c>
        p_stk = OSCfg_ISRStkBasePtr;                        /* Clear exception stack for stack checking.              */
 8002f6c:	4b37      	ldr	r3, [pc, #220]	; (800304c <OSInit+0x130>)
 8002f6e:	6818      	ldr	r0, [r3, #0]
        if (p_stk != (CPU_STK *)0) {
 8002f70:	b110      	cbz	r0, 8002f78 <OSInit+0x5c>
 8002f72:	0092      	lsls	r2, r2, #2
 8002f74:	f002 ff95 	bl	8005ea2 <memset>
    OSTaskRegNextAvailID    = (OS_REG_ID)0;
 8002f78:	4b35      	ldr	r3, [pc, #212]	; (8003050 <OSInit+0x134>)
 8002f7a:	2400      	movs	r4, #0
 8002f7c:	701c      	strb	r4, [r3, #0]
    OS_PrioInit();                                          /* Initialize the priority bitmap table                   */
 8002f7e:	f000 fe2f 	bl	8003be0 <OS_PrioInit>
 8002f82:	4b34      	ldr	r3, [pc, #208]	; (8003054 <OSInit+0x138>)
 8002f84:	f503 71c0 	add.w	r1, r3, #384	; 0x180



    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
        p_rdy_list = &OSRdyList[i];
        p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;
 8002f88:	811c      	strh	r4, [r3, #8]
        p_rdy_list->HeadPtr    = (OS_TCB   *)0;
        p_rdy_list->TailPtr    = (OS_TCB   *)0;
 8002f8a:	e9c3 4400 	strd	r4, r4, [r3]
 8002f8e:	330c      	adds	r3, #12
    for (i = 0u; i < OS_CFG_PRIO_MAX; i++) {                /* Initialize the array of OS_RDY_LIST at each priority   */
 8002f90:	428b      	cmp	r3, r1
 8002f92:	d1f9      	bne.n	8002f88 <OSInit+0x6c>
    OS_FlagInit(p_err);
 8002f94:	4628      	mov	r0, r5
 8002f96:	f000 fbdb 	bl	8003750 <OS_FlagInit>
    if (*p_err != OS_ERR_NONE) {
 8002f9a:	882b      	ldrh	r3, [r5, #0]
 8002f9c:	b103      	cbz	r3, 8002fa0 <OSInit+0x84>
}
 8002f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    OS_MemInit(p_err);
 8002fa0:	4628      	mov	r0, r5
 8002fa2:	f000 fbe1 	bl	8003768 <OS_MemInit>
    if (*p_err != OS_ERR_NONE) {
 8002fa6:	882b      	ldrh	r3, [r5, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d1f8      	bne.n	8002f9e <OSInit+0x82>
    OS_MsgPoolInit(p_err);
 8002fac:	4628      	mov	r0, r5
 8002fae:	f000 fbe7 	bl	8003780 <OS_MsgPoolInit>
    if (*p_err != OS_ERR_NONE) {
 8002fb2:	882b      	ldrh	r3, [r5, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d1f2      	bne.n	8002f9e <OSInit+0x82>
    OS_MutexInit(p_err);
 8002fb8:	4628      	mov	r0, r5
 8002fba:	f000 fdf5 	bl	8003ba8 <OS_MutexInit>
    if (*p_err != OS_ERR_NONE) {
 8002fbe:	882b      	ldrh	r3, [r5, #0]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1ec      	bne.n	8002f9e <OSInit+0x82>
    OS_QInit(p_err);                                        /* Initialize the Message Queue Manager module            */
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	f000 fe53 	bl	8003c70 <OS_QInit>
    if (*p_err != OS_ERR_NONE) {
 8002fca:	882b      	ldrh	r3, [r5, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1e6      	bne.n	8002f9e <OSInit+0x82>
    OS_SemInit(p_err);
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f000 fe59 	bl	8003c88 <OS_SemInit>
    if (*p_err != OS_ERR_NONE) {
 8002fd6:	882b      	ldrh	r3, [r5, #0]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1e0      	bne.n	8002f9e <OSInit+0x82>
    OS_TaskInit(p_err);                                     /* Initialize the task manager                            */
 8002fdc:	4628      	mov	r0, r5
 8002fde:	f001 f8ad 	bl	800413c <OS_TaskInit>
    if (*p_err != OS_ERR_NONE) {
 8002fe2:	882b      	ldrh	r3, [r5, #0]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1da      	bne.n	8002f9e <OSInit+0x82>
    OS_IdleTaskInit(p_err);                                 /* Initialize the Idle Task                               */
 8002fe8:	4628      	mov	r0, r5
 8002fea:	f7ff ff6b 	bl	8002ec4 <OS_IdleTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8002fee:	882b      	ldrh	r3, [r5, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1d4      	bne.n	8002f9e <OSInit+0x82>
    OS_TickTaskInit(p_err);                                 /* Initialize the Tick Task                               */
 8002ff4:	4628      	mov	r0, r5
 8002ff6:	f001 fa61 	bl	80044bc <OS_TickTaskInit>
    if (*p_err != OS_ERR_NONE) {
 8002ffa:	882b      	ldrh	r3, [r5, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1ce      	bne.n	8002f9e <OSInit+0x82>
    OS_Dbg_Init();
 8003000:	f000 fba4 	bl	800374c <OS_Dbg_Init>
}
 8003004:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    OSCfg_Init();
 8003008:	f7ff be90 	b.w	8002d2c <OSCfg_Init>
 800300c:	0800a6bc 	.word	0x0800a6bc
 8003010:	cccccccd 	.word	0xcccccccd
 8003014:	200037e0 	.word	0x200037e0
 8003018:	200036ec 	.word	0x200036ec
 800301c:	0800a6a0 	.word	0x0800a6a0
 8003020:	20003704 	.word	0x20003704
 8003024:	20003498 	.word	0x20003498
 8003028:	2000349a 	.word	0x2000349a
 800302c:	20003624 	.word	0x20003624
 8003030:	200036f4 	.word	0x200036f4
 8003034:	2000361c 	.word	0x2000361c
 8003038:	200036f2 	.word	0x200036f2
 800303c:	200036e8 	.word	0x200036e8
 8003040:	200037f4 	.word	0x200037f4
 8003044:	200036f8 	.word	0x200036f8
 8003048:	20003800 	.word	0x20003800
 800304c:	0800a69c 	.word	0x0800a69c
 8003050:	20003499 	.word	0x20003499
 8003054:	2000349c 	.word	0x2000349c

08003058 <OS_Pend>:
{
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    OSTCBCurPtr->PendOn     = pending_on;                    /* Resource not available, wait until it is              */
 800305a:	4f55      	ldr	r7, [pc, #340]	; (80031b0 <OS_Pend+0x158>)
 800305c:	683c      	ldr	r4, [r7, #0]
    OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
 800305e:	f04f 0c00 	mov.w	ip, #0
{
 8003062:	4606      	mov	r6, r0
 8003064:	460d      	mov	r5, r1
    OSTCBCurPtr->PendOn     = pending_on;                    /* Resource not available, wait until it is              */
 8003066:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
    OSTCBCurPtr->PendStatus = OS_STATUS_PEND_OK;
 800306a:	f884 c035 	strb.w	ip, [r4, #53]	; 0x35
*/

void  OS_TaskBlock (OS_TCB   *p_tcb,
                    OS_TICK   timeout)
{
    if (timeout > (OS_TICK)0) {                             /* Add task to tick list if timeout non zero               */
 800306e:	2b00      	cmp	r3, #0
 8003070:	d163      	bne.n	800313a <OS_Pend+0xe2>
        OS_TickListInsert(&OSTickListTimeout, p_tcb, timeout);
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
    } else {
        p_tcb->TaskState = OS_TASK_STATE_PEND;
 8003072:	2302      	movs	r3, #2
 8003074:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
    p_tcb1     = p_tcb->PrevPtr;                            /* Point to next and previous OS_TCB in the list          */
 8003078:	6921      	ldr	r1, [r4, #16]
    p_rdy_list = &OSRdyList[p_tcb->Prio];
 800307a:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    p_tcb2     = p_tcb->NextPtr;
 800307e:	68e3      	ldr	r3, [r4, #12]
    if (p_tcb1 == (OS_TCB *)0) {                            /* Was the OS_TCB to remove was at the head?              */
 8003080:	b1e9      	cbz	r1, 80030be <OS_Pend+0x66>
        p_rdy_list->NbrEntries--;                           /* No,  one less entry                                    */
 8003082:	4a4c      	ldr	r2, [pc, #304]	; (80031b4 <OS_Pend+0x15c>)
 8003084:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003088:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 800308c:	8902      	ldrh	r2, [r0, #8]
 800308e:	3a01      	subs	r2, #1
 8003090:	8102      	strh	r2, [r0, #8]
        p_tcb1->NextPtr = p_tcb2;
 8003092:	60cb      	str	r3, [r1, #12]
        if (p_tcb2 == (OS_TCB *)0) {
 8003094:	2b00      	cmp	r3, #0
 8003096:	d05d      	beq.n	8003154 <OS_Pend+0xfc>
            p_tcb2->PrevPtr     = p_tcb1;
 8003098:	6119      	str	r1, [r3, #16]
    p_tcb->PrevPtr = (OS_TCB *)0;
 800309a:	2200      	movs	r2, #0
 800309c:	683b      	ldr	r3, [r7, #0]
    p_tcb->NextPtr = (OS_TCB *)0;
 800309e:	e9c4 2203 	strd	r2, r2, [r4, #12]
    if (p_obj != (OS_PEND_OBJ *)0) {                         /* Add the current task to the pend list ...             */
 80030a2:	bb1d      	cbnz	r5, 80030ec <OS_Pend+0x94>
        switch (p_tcb->PendOn) {
 80030a4:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
        OSTCBCurPtr->PendDataTblEntries = (OS_OBJ_QTY    )0; /* If no object being pended on the clear these fields   */
 80030a8:	f8a3 5046 	strh.w	r5, [r3, #70]	; 0x46
        switch (p_tcb->PendOn) {
 80030ac:	2a02      	cmp	r2, #2
        OSTCBCurPtr->PendDataTblPtr     = (OS_PEND_DATA *)0; /* ... in the TCB                                        */
 80030ae:	631d      	str	r5, [r3, #48]	; 0x30
        switch (p_tcb->PendOn) {
 80030b0:	d065      	beq.n	800317e <OS_Pend+0x126>
 80030b2:	2a07      	cmp	r2, #7
 80030b4:	d14a      	bne.n	800314c <OS_Pend+0xf4>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Sem");
 80030b6:	4a40      	ldr	r2, [pc, #256]	; (80031b8 <OS_Pend+0x160>)
 80030b8:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 80030bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (p_tcb2 == (OS_TCB *)0) {                        /* Yes, was it the only OS_TCB?                           */
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d061      	beq.n	8003186 <OS_Pend+0x12e>
            p_rdy_list->NbrEntries--;                       /*      No,  one less entry                               */
 80030c2:	f8df c0f0 	ldr.w	ip, [pc, #240]	; 80031b4 <OS_Pend+0x15c>
 80030c6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80030ca:	0080      	lsls	r0, r0, #2
 80030cc:	eb0c 0e00 	add.w	lr, ip, r0
 80030d0:	f8be 2008 	ldrh.w	r2, [lr, #8]
 80030d4:	3a01      	subs	r2, #1
 80030d6:	f8ae 2008 	strh.w	r2, [lr, #8]
    p_tcb->PrevPtr = (OS_TCB *)0;
 80030da:	2200      	movs	r2, #0
            p_tcb2->PrevPtr        = (OS_TCB   *)0;         /*           adjust back link of new list head            */
 80030dc:	6119      	str	r1, [r3, #16]
            p_rdy_list->HeadPtr    = p_tcb2;                /*           adjust OS_RDY_LIST's new head                */
 80030de:	f84c 3000 	str.w	r3, [ip, r0]
 80030e2:	683b      	ldr	r3, [r7, #0]
    p_tcb->NextPtr = (OS_TCB *)0;
 80030e4:	e9c4 2203 	strd	r2, r2, [r4, #12]
    if (p_obj != (OS_PEND_OBJ *)0) {                         /* Add the current task to the pend list ...             */
 80030e8:	2d00      	cmp	r5, #0
 80030ea:	d0db      	beq.n	80030a4 <OS_Pend+0x4c>
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {                   /* CASE 0: Insert when there are no entries     */
 80030ec:	8a28      	ldrh	r0, [r5, #16]
        p_pend_data->PendObjPtr = p_obj;                     /* Save the pointer to the object pending on             */
 80030ee:	60f5      	str	r5, [r6, #12]
    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
 80030f0:	2101      	movs	r1, #1
    p_tcb->PendDataTblPtr     = p_pend_data_tbl;
 80030f2:	631e      	str	r6, [r3, #48]	; 0x30
    p_tcb->PendDataTblEntries = tbl_size;                   /* Link the TCB to the beginning of the table             */
 80030f4:	f8a3 1046 	strh.w	r1, [r3, #70]	; 0x46
        p_pend_data_tbl->PrevPtr    = (OS_PEND_DATA *)0;
 80030f8:	e9c6 2200 	strd	r2, r2, [r6]
        p_pend_data_tbl->RdyMsgPtr  = (void         *)0;
 80030fc:	e9c6 2204 	strd	r2, r2, [r6, #16]
        p_pend_data_tbl->RdyMsgSize = (OS_MSG_SIZE   )0;
 8003100:	8332      	strh	r2, [r6, #24]
        p_pend_data_tbl->RdyTS      = (CPU_TS        )0;
 8003102:	61f2      	str	r2, [r6, #28]
        p_pend_data_tbl->TCBPtr     = p_tcb;                /* Every entry points back to the TCB of the task         */
 8003104:	60b3      	str	r3, [r6, #8]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {                   /* CASE 0: Insert when there are no entries     */
 8003106:	b338      	cbz	r0, 8003158 <OS_Pend+0x100>
        p_pend_data_next = p_pend_list->HeadPtr;
 8003108:	68aa      	ldr	r2, [r5, #8]
    prio  = p_tcb->Prio;
 800310a:	f893 4037 	ldrb.w	r4, [r3, #55]	; 0x37
 800310e:	6891      	ldr	r1, [r2, #8]
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
 8003110:	3001      	adds	r0, #1
 8003112:	8228      	strh	r0, [r5, #16]
            if (prio < p_tcb_next->Prio) {
 8003114:	f891 0037 	ldrb.w	r0, [r1, #55]	; 0x37
 8003118:	42a0      	cmp	r0, r4
 800311a:	d905      	bls.n	8003128 <OS_Pend+0xd0>
 800311c:	e028      	b.n	8003170 <OS_Pend+0x118>
 800311e:	6890      	ldr	r0, [r2, #8]
 8003120:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 8003124:	42a0      	cmp	r0, r4
 8003126:	d823      	bhi.n	8003170 <OS_Pend+0x118>
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
 8003128:	6852      	ldr	r2, [r2, #4]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 800312a:	2a00      	cmp	r2, #0
 800312c:	d1f7      	bne.n	800311e <OS_Pend+0xc6>
            p_pend_data_prev          = p_pend_list->TailPtr;
 800312e:	68e8      	ldr	r0, [r5, #12]
            p_pend_data->PrevPtr      = p_pend_data_prev;
 8003130:	e9c6 0200 	strd	r0, r2, [r6]
            p_pend_data_prev->NextPtr = p_pend_data;
 8003134:	6046      	str	r6, [r0, #4]
            p_pend_list->TailPtr      = p_pend_data;
 8003136:	60ee      	str	r6, [r5, #12]
 8003138:	e014      	b.n	8003164 <OS_Pend+0x10c>
        OS_TickListInsert(&OSTickListTimeout, p_tcb, timeout);
 800313a:	461a      	mov	r2, r3
 800313c:	4621      	mov	r1, r4
 800313e:	481f      	ldr	r0, [pc, #124]	; (80031bc <OS_Pend+0x164>)
 8003140:	f001 fa0c 	bl	800455c <OS_TickListInsert>
        p_tcb->TaskState = OS_TASK_STATE_PEND_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 800314a:	e795      	b.n	8003078 <OS_Pend+0x20>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");
 800314c:	4a1c      	ldr	r2, [pc, #112]	; (80031c0 <OS_Pend+0x168>)
 800314e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            p_rdy_list->TailPtr = p_tcb1;                   /*      Removing the TCB at the tail, adj the tail ptr    */
 8003154:	6041      	str	r1, [r0, #4]
 8003156:	e7a0      	b.n	800309a <OS_Pend+0x42>
        p_pend_list->NbrEntries = (OS_OBJ_QTY)1;                      /*         This is the first entry              */
 8003158:	8229      	strh	r1, [r5, #16]
        p_pend_data->PrevPtr    = (OS_PEND_DATA *)0;
 800315a:	e9c6 0000 	strd	r0, r0, [r6]
        p_pend_list->TailPtr    = p_pend_data;
 800315e:	e9c5 6602 	strd	r6, r6, [r5, #8]
 8003162:	4619      	mov	r1, r3
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
 8003164:	6a0a      	ldr	r2, [r1, #32]
        p_tcb->DbgNamePtr =  p_obj->NamePtr;                /* Task pending on this object ... save name in TCB       */
 8003166:	6869      	ldr	r1, [r5, #4]
 8003168:	f8c3 10bc 	str.w	r1, [r3, #188]	; 0xbc
        p_obj->DbgNamePtr = p_tcb1->NamePtr;                /* ... Save in object                                     */
 800316c:	61ea      	str	r2, [r5, #28]
}
 800316e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if (p_pend_data_next->PrevPtr == (OS_PEND_DATA *)0) {     /*         Is new TCB highest priority?         */
 8003170:	6810      	ldr	r0, [r2, #0]
 8003172:	b1b0      	cbz	r0, 80031a2 <OS_Pend+0x14a>
                p_pend_data->NextPtr       = p_pend_data_next;
 8003174:	e9c6 0200 	strd	r0, r2, [r6]
                p_pend_data_prev->NextPtr  = p_pend_data;
 8003178:	6046      	str	r6, [r0, #4]
                p_pend_data_next->PrevPtr  = p_pend_data;
 800317a:	6016      	str	r6, [r2, #0]
 800317c:	e7f2      	b.n	8003164 <OS_Pend+0x10c>
                 p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)"Task Q");
 800317e:	4a11      	ldr	r2, [pc, #68]	; (80031c4 <OS_Pend+0x16c>)
 8003180:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
}
 8003184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 8003186:	f8df c02c 	ldr.w	ip, [pc, #44]	; 80031b4 <OS_Pend+0x15c>
 800318a:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 800318e:	0092      	lsls	r2, r2, #2
 8003190:	eb0c 0102 	add.w	r1, ip, r2
            p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 8003194:	f84c 3002 	str.w	r3, [ip, r2]
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 8003198:	810b      	strh	r3, [r1, #8]
            p_rdy_list->TailPtr    = (OS_TCB   *)0;
 800319a:	604b      	str	r3, [r1, #4]
            OS_PrioRemove(p_tcb->Prio);
 800319c:	f000 fd52 	bl	8003c44 <OS_PrioRemove>
 80031a0:	e77b      	b.n	800309a <OS_Pend+0x42>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
 80031a2:	6016      	str	r6, [r2, #0]
                p_pend_list->HeadPtr       = p_pend_data;
 80031a4:	4619      	mov	r1, r3
                p_pend_data->NextPtr       = p_pend_data_next;
 80031a6:	e9c6 0200 	strd	r0, r2, [r6]
                p_pend_list->HeadPtr       = p_pend_data;
 80031aa:	60ae      	str	r6, [r5, #8]
 80031ac:	e7da      	b.n	8003164 <OS_Pend+0x10c>
 80031ae:	bf00      	nop
 80031b0:	200036ec 	.word	0x200036ec
 80031b4:	2000349c 	.word	0x2000349c
 80031b8:	0800a6ec 	.word	0x0800a6ec
 80031bc:	20003810 	.word	0x20003810
 80031c0:	0800a6f8 	.word	0x0800a6f8
 80031c4:	0800a6e4 	.word	0x0800a6e4

080031c8 <OS_PendListChangePrio>:
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get the number of pend list task is in         */
 80031c8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to first wait list entry                 */
 80031cc:	6b02      	ldr	r2, [r0, #48]	; 0x30
    while (n_pend_list > 0u) {
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d043      	beq.n	800325a <OS_PendListChangePrio+0x92>
 80031d2:	3b01      	subs	r3, #1
{
 80031d4:	b4f0      	push	{r4, r5, r6, r7}
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	f102 0740 	add.w	r7, r2, #64	; 0x40
 80031dc:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 80031e0:	3220      	adds	r2, #32
    p_pend_data->NextPtr = (OS_PEND_DATA *)0;
 80031e2:	2600      	movs	r6, #0
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 80031e4:	f852 1c14 	ldr.w	r1, [r2, #-20]
        if (p_pend_list->NbrEntries > 1u) {                         /* Only move if multiple entries in the list      */
 80031e8:	8a08      	ldrh	r0, [r1, #16]
 80031ea:	2801      	cmp	r0, #1
 80031ec:	f1a2 0520 	sub.w	r5, r2, #32
 80031f0:	d91c      	bls.n	800322c <OS_PendListChangePrio+0x64>
 80031f2:	e952 3408 	ldrd	r3, r4, [r2, #-32]
    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 80031f6:	b1f3      	cbz	r3, 8003236 <OS_PendListChangePrio+0x6e>
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 80031f8:	605c      	str	r4, [r3, #4]
    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 80031fa:	b33c      	cbz	r4, 800324c <OS_PendListChangePrio+0x84>
        p_next->PrevPtr      = p_prev;
 80031fc:	6023      	str	r3, [r4, #0]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 80031fe:	e942 6608 	strd	r6, r6, [r2, #-32]
    prio  = p_tcb->Prio;
 8003202:	f852 4c18 	ldr.w	r4, [r2, #-24]
        p_pend_data_next = p_pend_list->HeadPtr;
 8003206:	688b      	ldr	r3, [r1, #8]
    prio  = p_tcb->Prio;
 8003208:	f894 4037 	ldrb.w	r4, [r4, #55]	; 0x37
        p_pend_list->NbrEntries++;                                    /* CASE 1: One more OS_PEND_DATA in the list    */
 800320c:	8208      	strh	r0, [r1, #16]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 800320e:	b913      	cbnz	r3, 8003216 <OS_PendListChangePrio+0x4e>
 8003210:	e014      	b.n	800323c <OS_PendListChangePrio+0x74>
                p_pend_data_next = p_pend_data_next->NextPtr;         /*         Not Found, follow the list           */
 8003212:	685b      	ldr	r3, [r3, #4]
        while (p_pend_data_next != (OS_PEND_DATA *)0) {               /*         Find the position where to insert    */
 8003214:	b193      	cbz	r3, 800323c <OS_PendListChangePrio+0x74>
            if (prio < p_tcb_next->Prio) {
 8003216:	6898      	ldr	r0, [r3, #8]
 8003218:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 800321c:	42a0      	cmp	r0, r4
 800321e:	d9f8      	bls.n	8003212 <OS_PendListChangePrio+0x4a>
            if (p_pend_data_next->PrevPtr == (OS_PEND_DATA *)0) {     /*         Is new TCB highest priority?         */
 8003220:	6818      	ldr	r0, [r3, #0]
 8003222:	b1a8      	cbz	r0, 8003250 <OS_PendListChangePrio+0x88>
                p_pend_data->NextPtr       = p_pend_data_next;
 8003224:	e942 0308 	strd	r0, r3, [r2, #-32]
                p_pend_data_prev->NextPtr  = p_pend_data;
 8003228:	6045      	str	r5, [r0, #4]
                p_pend_data_next->PrevPtr  = p_pend_data;
 800322a:	601d      	str	r5, [r3, #0]
 800322c:	3220      	adds	r2, #32
    while (n_pend_list > 0u) {
 800322e:	42ba      	cmp	r2, r7
 8003230:	d1d8      	bne.n	80031e4 <OS_PendListChangePrio+0x1c>
}
 8003232:	bcf0      	pop	{r4, r5, r6, r7}
 8003234:	4770      	bx	lr
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 8003236:	6023      	str	r3, [r4, #0]
        p_pend_list->HeadPtr = p_next;
 8003238:	608c      	str	r4, [r1, #8]
 800323a:	e7e0      	b.n	80031fe <OS_PendListChangePrio+0x36>
            p_pend_data->NextPtr      = (OS_PEND_DATA *)0;            /*         ... insert at the tail.              */
 800323c:	f842 6c1c 	str.w	r6, [r2, #-28]
            p_pend_data_prev          = p_pend_list->TailPtr;
 8003240:	68cb      	ldr	r3, [r1, #12]
            p_pend_data->PrevPtr      = p_pend_data_prev;
 8003242:	f842 3c20 	str.w	r3, [r2, #-32]
            p_pend_data_prev->NextPtr = p_pend_data;
 8003246:	605d      	str	r5, [r3, #4]
            p_pend_list->TailPtr      = p_pend_data;
 8003248:	60cd      	str	r5, [r1, #12]
 800324a:	e7ef      	b.n	800322c <OS_PendListChangePrio+0x64>
        p_pend_list->TailPtr = p_prev;
 800324c:	60cb      	str	r3, [r1, #12]
 800324e:	e7d6      	b.n	80031fe <OS_PendListChangePrio+0x36>
                p_pend_data_next->PrevPtr  = p_pend_data;             /*         Yes, insert as new Head of list      */
 8003250:	601d      	str	r5, [r3, #0]
                p_pend_data->NextPtr       = p_pend_data_next;
 8003252:	e942 0308 	strd	r0, r3, [r2, #-32]
                p_pend_list->HeadPtr       = p_pend_data;
 8003256:	608d      	str	r5, [r1, #8]
 8003258:	e7e8      	b.n	800322c <OS_PendListChangePrio+0x64>
 800325a:	4770      	bx	lr

0800325c <OS_PendListInit>:
    p_pend_list->HeadPtr    = (OS_PEND_DATA *)0;
 800325c:	2300      	movs	r3, #0
    p_pend_list->TailPtr    = (OS_PEND_DATA *)0;
 800325e:	e9c0 3300 	strd	r3, r3, [r0]
    p_pend_list->NbrEntries = (OS_OBJ_QTY    )0;
 8003262:	8103      	strh	r3, [r0, #8]
}
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop

08003268 <OS_PendListRemove>:
{
 8003268:	b4f0      	push	{r4, r5, r6, r7}
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 800326a:	f8b0 7046 	ldrh.w	r7, [r0, #70]	; 0x46
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 800326e:	6b03      	ldr	r3, [r0, #48]	; 0x30
    while (n_pend_list > (OS_OBJ_QTY)0) {
 8003270:	b307      	cbz	r7, 80032b4 <OS_PendListRemove+0x4c>
 8003272:	3f01      	subs	r7, #1
 8003274:	b2ba      	uxth	r2, r7
 8003276:	f103 0740 	add.w	r7, r3, #64	; 0x40
 800327a:	eb07 1742 	add.w	r7, r7, r2, lsl #5
 800327e:	3320      	adds	r3, #32
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
 8003280:	2400      	movs	r4, #0
 8003282:	e00c      	b.n	800329e <OS_PendListRemove+0x36>
 8003284:	e953 5608 	ldrd	r5, r6, [r3, #-32]
    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 8003288:	b18d      	cbz	r5, 80032ae <OS_PendListRemove+0x46>
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 800328a:	606e      	str	r6, [r5, #4]
    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 800328c:	b1c6      	cbz	r6, 80032c0 <OS_PendListRemove+0x58>
        p_next->PrevPtr      = p_prev;
 800328e:	6035      	str	r5, [r6, #0]
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
 8003290:	3a01      	subs	r2, #1
 8003292:	820a      	strh	r2, [r1, #16]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 8003294:	e943 4408 	strd	r4, r4, [r3, #-32]
 8003298:	3320      	adds	r3, #32
    while (n_pend_list > (OS_OBJ_QTY)0) {
 800329a:	42bb      	cmp	r3, r7
 800329c:	d00a      	beq.n	80032b4 <OS_PendListRemove+0x4c>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 800329e:	f853 1c14 	ldr.w	r1, [r3, #-20]
    if (p_pend_list->NbrEntries == 1u) {
 80032a2:	8a0a      	ldrh	r2, [r1, #16]
 80032a4:	2a01      	cmp	r2, #1
 80032a6:	d1ed      	bne.n	8003284 <OS_PendListRemove+0x1c>
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
 80032a8:	e9c1 4402 	strd	r4, r4, [r1, #8]
 80032ac:	e7f0      	b.n	8003290 <OS_PendListRemove+0x28>
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 80032ae:	6035      	str	r5, [r6, #0]
        p_pend_list->HeadPtr = p_next;
 80032b0:	608e      	str	r6, [r1, #8]
 80032b2:	e7ed      	b.n	8003290 <OS_PendListRemove+0x28>
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
 80032ba:	6303      	str	r3, [r0, #48]	; 0x30
}
 80032bc:	bcf0      	pop	{r4, r5, r6, r7}
 80032be:	4770      	bx	lr
        p_pend_list->TailPtr = p_prev;
 80032c0:	60cd      	str	r5, [r1, #12]
 80032c2:	e7e5      	b.n	8003290 <OS_PendListRemove+0x28>

080032c4 <OS_Post>:
{
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (p_tcb->TaskState) {
 80032c6:	f891 5036 	ldrb.w	r5, [r1, #54]	; 0x36
{
 80032ca:	460c      	mov	r4, r1
    switch (p_tcb->TaskState) {
 80032cc:	1ea9      	subs	r1, r5, #2
{
 80032ce:	469c      	mov	ip, r3
    switch (p_tcb->TaskState) {
 80032d0:	2905      	cmp	r1, #5
 80032d2:	d838      	bhi.n	8003346 <OS_Post+0x82>
 80032d4:	e8df f001 	tbb	[pc, r1]
 80032d8:	37373838 	.word	0x37373838
 80032dc:	6c6c      	.short	0x6c6c
             if (p_obj != (OS_PEND_OBJ *)0) {
 80032de:	b178      	cbz	r0, 8003300 <OS_Post+0x3c>
    p_pend_data       =  p_pend_list->HeadPtr;
 80032e0:	6882      	ldr	r2, [r0, #8]
    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");          /* Remove name of object pended on for readied task       */
 80032e2:	499d      	ldr	r1, [pc, #628]	; (8003558 <OS_Post+0x294>)
 80032e4:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
 80032ee:	6323      	str	r3, [r4, #48]	; 0x30
    if (p_pend_data  != (OS_PEND_DATA *)0) {
 80032f0:	2a00      	cmp	r2, #0
 80032f2:	f000 812d 	beq.w	8003550 <OS_Post+0x28c>
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
 80032f6:	6893      	ldr	r3, [r2, #8]
 80032f8:	6a1b      	ldr	r3, [r3, #32]
 80032fa:	61c3      	str	r3, [r0, #28]
 80032fc:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8003300:	2d03      	cmp	r5, #3
 8003302:	f000 80fa 	beq.w	80034fa <OS_Post+0x236>
    OS_PrioInsert(p_tcb->Prio);
 8003306:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
 800330a:	f000 fc87 	bl	8003c1c <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
 800330e:	4a93      	ldr	r2, [pc, #588]	; (800355c <OS_Post+0x298>)
 8003310:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	f000 80a7 	beq.w	800346a <OS_Post+0x1a6>
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 800331c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003320:	498f      	ldr	r1, [pc, #572]	; (8003560 <OS_Post+0x29c>)
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	18c8      	adds	r0, r1, r3
 8003326:	8902      	ldrh	r2, [r0, #8]
 8003328:	2a00      	cmp	r2, #0
 800332a:	f000 808d 	beq.w	8003448 <OS_Post+0x184>
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
 800332e:	58cd      	ldr	r5, [r1, r3]
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 8003330:	3201      	adds	r2, #1
 8003332:	8102      	strh	r2, [r0, #8]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
 8003334:	2200      	movs	r2, #0
 8003336:	e9c4 5203 	strd	r5, r2, [r4, #12]
        p_tcb2->PrevPtr        = p_tcb;
 800333a:	612c      	str	r4, [r5, #16]
        p_rdy_list->HeadPtr    = p_tcb;
 800333c:	50cc      	str	r4, [r1, r3]
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 800333e:	2300      	movs	r3, #0
 8003340:	86a3      	strh	r3, [r4, #52]	; 0x34
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 8003342:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 8003348:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 800334c:	2903      	cmp	r1, #3
 800334e:	f000 809b 	beq.w	8003488 <OS_Post+0x1c4>
                 p_tcb->TS      = ts;
 8003352:	9b06      	ldr	r3, [sp, #24]
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 8003354:	6622      	str	r2, [r4, #96]	; 0x60
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 8003356:	f8a4 c064 	strh.w	ip, [r4, #100]	; 0x64
                 p_tcb->TS      = ts;
 800335a:	64a3      	str	r3, [r4, #72]	; 0x48
             if (p_obj != (OS_PEND_OBJ *)0) {
 800335c:	2800      	cmp	r0, #0
 800335e:	d0cf      	beq.n	8003300 <OS_Post+0x3c>
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 8003360:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
    while (n_pend_list > (OS_OBJ_QTY)0) {
 8003364:	2f00      	cmp	r7, #0
 8003366:	d0bb      	beq.n	80032e0 <OS_Post+0x1c>
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 8003368:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800336a:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800336e:	fa1f f38c 	uxth.w	r3, ip
 8003372:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8003376:	eb0c 1c43 	add.w	ip, ip, r3, lsl #5
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
 800337a:	2500      	movs	r5, #0
 800337c:	f101 0320 	add.w	r3, r1, #32
 8003380:	e00e      	b.n	80033a0 <OS_Post+0xdc>
 8003382:	e953 6708 	ldrd	r6, r7, [r3, #-32]
    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 8003386:	2e00      	cmp	r6, #0
 8003388:	d065      	beq.n	8003456 <OS_Post+0x192>
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 800338a:	6077      	str	r7, [r6, #4]
    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 800338c:	2f00      	cmp	r7, #0
 800338e:	d06a      	beq.n	8003466 <OS_Post+0x1a2>
        p_next->PrevPtr      = p_prev;
 8003390:	603e      	str	r6, [r7, #0]
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
 8003392:	3a01      	subs	r2, #1
 8003394:	820a      	strh	r2, [r1, #16]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 8003396:	e943 5508 	strd	r5, r5, [r3, #-32]
 800339a:	3320      	adds	r3, #32
    while (n_pend_list > (OS_OBJ_QTY)0) {
 800339c:	4563      	cmp	r3, ip
 800339e:	d09f      	beq.n	80032e0 <OS_Post+0x1c>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 80033a0:	f853 1c14 	ldr.w	r1, [r3, #-20]
    if (p_pend_list->NbrEntries == 1u) {
 80033a4:	8a0a      	ldrh	r2, [r1, #16]
 80033a6:	2a01      	cmp	r2, #1
 80033a8:	d1eb      	bne.n	8003382 <OS_Post+0xbe>
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
 80033aa:	e9c1 5502 	strd	r5, r5, [r1, #8]
 80033ae:	e7f0      	b.n	8003392 <OS_Post+0xce>
             if (p_tcb->PendOn == OS_TASK_PEND_ON_MULTI) {
 80033b0:	f894 1034 	ldrb.w	r1, [r4, #52]	; 0x34
 80033b4:	2903      	cmp	r1, #3
 80033b6:	f000 8084 	beq.w	80034c2 <OS_Post+0x1fe>
                 p_tcb->TS      = ts;
 80033ba:	9b06      	ldr	r3, [sp, #24]
                 p_tcb->MsgPtr  = p_void;                        /* Deposit message in OS_TCB of task waiting         */
 80033bc:	6622      	str	r2, [r4, #96]	; 0x60
                 p_tcb->MsgSize = msg_size;                      /* ... assuming posting a message                    */
 80033be:	f8a4 c064 	strh.w	ip, [r4, #100]	; 0x64
                 p_tcb->TS      = ts;
 80033c2:	64a3      	str	r3, [r4, #72]	; 0x48
             if (p_obj != (OS_PEND_OBJ *)0) {
 80033c4:	2800      	cmp	r0, #0
 80033c6:	d037      	beq.n	8003438 <OS_Post+0x174>
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 80033c8:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
    while (n_pend_list > (OS_OBJ_QTY)0) {
 80033cc:	b327      	cbz	r7, 8003418 <OS_Post+0x154>
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 80033ce:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80033d0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80033d4:	fa1f f38c 	uxth.w	r3, ip
 80033d8:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 80033dc:	eb0c 1c43 	add.w	ip, ip, r3, lsl #5
        p_pend_list->HeadPtr = (OS_PEND_DATA *)0;           /* Only one entry in the pend list                        */
 80033e0:	2500      	movs	r5, #0
 80033e2:	f101 0320 	add.w	r3, r1, #32
 80033e6:	e00e      	b.n	8003406 <OS_Post+0x142>
 80033e8:	e953 6708 	ldrd	r6, r7, [r3, #-32]
    } else if (p_pend_data->PrevPtr == (OS_PEND_DATA *)0) { /* See if entry is at the head of the list                */
 80033ec:	2e00      	cmp	r6, #0
 80033ee:	d035      	beq.n	800345c <OS_Post+0x198>
        p_prev->NextPtr      = (OS_PEND_DATA *)0;
 80033f0:	6077      	str	r7, [r6, #4]
    } else if (p_pend_data->NextPtr == (OS_PEND_DATA *)0) { /* See if entry is at the tail of the list                */
 80033f2:	2f00      	cmp	r7, #0
 80033f4:	d035      	beq.n	8003462 <OS_Post+0x19e>
        p_next->PrevPtr      = p_prev;
 80033f6:	603e      	str	r6, [r7, #0]
    p_pend_list->NbrEntries--;                              /* One less entry in the list                             */
 80033f8:	3a01      	subs	r2, #1
 80033fa:	820a      	strh	r2, [r1, #16]
    p_pend_data->PrevPtr = (OS_PEND_DATA *)0;
 80033fc:	e943 5508 	strd	r5, r5, [r3, #-32]
 8003400:	3320      	adds	r3, #32
    while (n_pend_list > (OS_OBJ_QTY)0) {
 8003402:	4563      	cmp	r3, ip
 8003404:	d008      	beq.n	8003418 <OS_Post+0x154>
        p_obj       =  p_pend_data->PendObjPtr;                     /* Get pointer to pend list                       */
 8003406:	f853 1c14 	ldr.w	r1, [r3, #-20]
    if (p_pend_list->NbrEntries == 1u) {
 800340a:	8a0a      	ldrh	r2, [r1, #16]
 800340c:	2a01      	cmp	r2, #1
 800340e:	d1eb      	bne.n	80033e8 <OS_Post+0x124>
        p_pend_list->TailPtr = (OS_PEND_DATA *)0;
 8003410:	e9c1 5502 	strd	r5, r5, [r1, #8]
 8003414:	e7f0      	b.n	80033f8 <OS_Post+0x134>
             if (p_obj != (OS_PEND_OBJ *)0) {
 8003416:	b178      	cbz	r0, 8003438 <OS_Post+0x174>
    p_pend_data       =  p_pend_list->HeadPtr;
 8003418:	6882      	ldr	r2, [r0, #8]
    p_tcb->DbgNamePtr = (CPU_CHAR *)((void *)" ");          /* Remove name of object pended on for readied task       */
 800341a:	494f      	ldr	r1, [pc, #316]	; (8003558 <OS_Post+0x294>)
 800341c:	f8c4 10bc 	str.w	r1, [r4, #188]	; 0xbc
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY    )0;
 8003420:	2300      	movs	r3, #0
 8003422:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA *)0;
 8003426:	6323      	str	r3, [r4, #48]	; 0x30
    if (p_pend_data  != (OS_PEND_DATA *)0) {
 8003428:	2a00      	cmp	r2, #0
 800342a:	f000 808d 	beq.w	8003548 <OS_Post+0x284>
        p_obj->DbgNamePtr = p_tcb1->NamePtr;
 800342e:	6893      	ldr	r3, [r2, #8]
 8003430:	6a1b      	ldr	r3, [r3, #32]
 8003432:	61c3      	str	r3, [r0, #28]
 8003434:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
             if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 8003438:	2d07      	cmp	r5, #7
 800343a:	d062      	beq.n	8003502 <OS_Post+0x23e>
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 800343c:	2200      	movs	r2, #0
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 800343e:	2304      	movs	r3, #4
             p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;        /* Indicate no longer pending                        */
 8003440:	86a2      	strh	r2, [r4, #52]	; 0x34
             p_tcb->PendStatus = OS_STATUS_PEND_OK;              /* Clear pend status                                 */
 8003442:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
}
 8003446:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8003448:	2501      	movs	r5, #1
 800344a:	8105      	strh	r5, [r0, #8]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
 800344c:	e9c4 2203 	strd	r2, r2, [r4, #12]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8003450:	50cc      	str	r4, [r1, r3]
        p_rdy_list->TailPtr    =  p_tcb;
 8003452:	6044      	str	r4, [r0, #4]
 8003454:	e773      	b.n	800333e <OS_Post+0x7a>
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 8003456:	603e      	str	r6, [r7, #0]
        p_pend_list->HeadPtr = p_next;
 8003458:	608f      	str	r7, [r1, #8]
 800345a:	e79a      	b.n	8003392 <OS_Post+0xce>
        p_next->PrevPtr      = (OS_PEND_DATA *)0;
 800345c:	603e      	str	r6, [r7, #0]
        p_pend_list->HeadPtr = p_next;
 800345e:	608f      	str	r7, [r1, #8]
 8003460:	e7ca      	b.n	80033f8 <OS_Post+0x134>
        p_pend_list->TailPtr = p_prev;
 8003462:	60ce      	str	r6, [r1, #12]
 8003464:	e7c8      	b.n	80033f8 <OS_Post+0x134>
 8003466:	60ce      	str	r6, [r1, #12]
 8003468:	e793      	b.n	8003392 <OS_Post+0xce>
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 800346a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800346e:	483c      	ldr	r0, [pc, #240]	; (8003560 <OS_Post+0x29c>)
 8003470:	0092      	lsls	r2, r2, #2
 8003472:	1883      	adds	r3, r0, r2
 8003474:	8919      	ldrh	r1, [r3, #8]
 8003476:	2900      	cmp	r1, #0
 8003478:	d147      	bne.n	800350a <OS_Post+0x246>
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 800347a:	2501      	movs	r5, #1
 800347c:	811d      	strh	r5, [r3, #8]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
 800347e:	e9c4 1103 	strd	r1, r1, [r4, #12]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8003482:	5084      	str	r4, [r0, r2]
        p_rdy_list->TailPtr     = p_tcb;
 8003484:	605c      	str	r4, [r3, #4]
 8003486:	e75a      	b.n	800333e <OS_Post+0x7a>
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 8003488:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 800348c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 800348e:	2f00      	cmp	r7, #0
 8003490:	f43f af25 	beq.w	80032de <OS_Post+0x1a>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 8003494:	68ce      	ldr	r6, [r1, #12]
 8003496:	42b0      	cmp	r0, r6
 8003498:	d04b      	beq.n	8003532 <OS_Post+0x26e>
 800349a:	f107 3eff 	add.w	lr, r7, #4294967295	; 0xffffffff
 800349e:	fa1f fe8e 	uxth.w	lr, lr
 80034a2:	f10e 0e01 	add.w	lr, lr, #1
 80034a6:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 80034aa:	460e      	mov	r6, r1
 80034ac:	e002      	b.n	80034b4 <OS_Post+0x1f0>
 80034ae:	68f3      	ldr	r3, [r6, #12]
 80034b0:	4298      	cmp	r0, r3
 80034b2:	d03f      	beq.n	8003534 <OS_Post+0x270>
        p_pend_data++;
 80034b4:	3620      	adds	r6, #32
    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 80034b6:	4576      	cmp	r6, lr
 80034b8:	d1f9      	bne.n	80034ae <OS_Post+0x1ea>
             if (p_obj != (OS_PEND_OBJ *)0) {
 80034ba:	2800      	cmp	r0, #0
 80034bc:	f47f af55 	bne.w	800336a <OS_Post+0xa6>
 80034c0:	e71e      	b.n	8003300 <OS_Post+0x3c>
    n_pend_list = p_tcb->PendDataTblEntries;                        /* Get number of entries in the table             */
 80034c2:	f8b4 7046 	ldrh.w	r7, [r4, #70]	; 0x46
    p_pend_data = p_tcb->PendDataTblPtr;                            /* Point to the first OS_PEND_DATA to remove      */
 80034c6:	6b21      	ldr	r1, [r4, #48]	; 0x30
    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 80034c8:	2f00      	cmp	r7, #0
 80034ca:	d0a4      	beq.n	8003416 <OS_Post+0x152>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 80034cc:	68ce      	ldr	r6, [r1, #12]
 80034ce:	42b0      	cmp	r0, r6
 80034d0:	d024      	beq.n	800351c <OS_Post+0x258>
 80034d2:	f107 3eff 	add.w	lr, r7, #4294967295	; 0xffffffff
 80034d6:	fa1f fe8e 	uxth.w	lr, lr
 80034da:	f10e 0e01 	add.w	lr, lr, #1
 80034de:	eb01 1e4e 	add.w	lr, r1, lr, lsl #5
 80034e2:	460e      	mov	r6, r1
 80034e4:	e002      	b.n	80034ec <OS_Post+0x228>
 80034e6:	68f3      	ldr	r3, [r6, #12]
 80034e8:	4298      	cmp	r0, r3
 80034ea:	d018      	beq.n	800351e <OS_Post+0x25a>
        p_pend_data++;
 80034ec:	3620      	adds	r6, #32
    while (n_pend_list > (OS_OBJ_QTY)0) {                           /* Mark posted object in OS_PEND_DATA table       */
 80034ee:	4576      	cmp	r6, lr
 80034f0:	d1f9      	bne.n	80034e6 <OS_Post+0x222>
             if (p_obj != (OS_PEND_OBJ *)0) {
 80034f2:	2800      	cmp	r0, #0
 80034f4:	f47f af6c 	bne.w	80033d0 <OS_Post+0x10c>
 80034f8:	e79e      	b.n	8003438 <OS_Post+0x174>
                 OS_TickListRemove(p_tcb);                       /* Remove from tick list                             */
 80034fa:	4620      	mov	r0, r4
 80034fc:	f001 f8d2 	bl	80046a4 <OS_TickListRemove>
 8003500:	e701      	b.n	8003306 <OS_Post+0x42>
                 OS_TickListRemove(p_tcb);                       /* Cancel any timeout                                */
 8003502:	4620      	mov	r0, r4
 8003504:	f001 f8ce 	bl	80046a4 <OS_TickListRemove>
 8003508:	e798      	b.n	800343c <OS_Post+0x178>
        p_tcb2                  = p_rdy_list->TailPtr;
 800350a:	685a      	ldr	r2, [r3, #4]
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 800350c:	3101      	adds	r1, #1
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 800350e:	2000      	movs	r0, #0
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 8003510:	8119      	strh	r1, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 8003512:	e9c4 0203 	strd	r0, r2, [r4, #12]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
 8003516:	60d4      	str	r4, [r2, #12]
        p_rdy_list->TailPtr     = p_tcb;
 8003518:	605c      	str	r4, [r3, #4]
 800351a:	e710      	b.n	800333e <OS_Post+0x7a>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 800351c:	460e      	mov	r6, r1
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 800351e:	9b06      	ldr	r3, [sp, #24]
            p_pend_data->RdyMsgSize = msg_size;                     /*      store the size of the message posted      */
 8003520:	f8a6 c018 	strh.w	ip, [r6, #24]
            p_pend_data->RdyMsgPtr  = p_void;                       /*      store the message posted                  */
 8003524:	e9c6 0204 	strd	r0, r2, [r6, #16]
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 8003528:	61f3      	str	r3, [r6, #28]
             if (p_obj != (OS_PEND_OBJ *)0) {
 800352a:	2800      	cmp	r0, #0
 800352c:	f47f af50 	bne.w	80033d0 <OS_Post+0x10c>
 8003530:	e782      	b.n	8003438 <OS_Post+0x174>
        if (p_obj == p_pend_data->PendObjPtr) {                     /* Did we find the object posted to?              */
 8003532:	460e      	mov	r6, r1
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 8003534:	9b06      	ldr	r3, [sp, #24]
            p_pend_data->RdyMsgSize = msg_size;                     /*      store the size of the message posted      */
 8003536:	f8a6 c018 	strh.w	ip, [r6, #24]
            p_pend_data->RdyMsgPtr  = p_void;                       /*      store the message posted                  */
 800353a:	e9c6 0204 	strd	r0, r2, [r6, #16]
            p_pend_data->RdyTS      = ts;                           /*      save the timestamp of the post            */
 800353e:	61f3      	str	r3, [r6, #28]
             if (p_obj != (OS_PEND_OBJ *)0) {
 8003540:	2800      	cmp	r0, #0
 8003542:	f47f af12 	bne.w	800336a <OS_Post+0xa6>
 8003546:	e6db      	b.n	8003300 <OS_Post+0x3c>
        p_obj->DbgNamePtr = (CPU_CHAR *)((void *)" ");      /* No other task pending on object                        */
 8003548:	61c1      	str	r1, [r0, #28]
 800354a:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
 800354e:	e773      	b.n	8003438 <OS_Post+0x174>
 8003550:	61c1      	str	r1, [r0, #28]
 8003552:	f894 5036 	ldrb.w	r5, [r4, #54]	; 0x36
 8003556:	e6d3      	b.n	8003300 <OS_Post+0x3c>
 8003558:	0800a6f8 	.word	0x0800a6f8
 800355c:	20003624 	.word	0x20003624
 8003560:	2000349c 	.word	0x2000349c

08003564 <OS_RdyListInsert>:
{
 8003564:	b538      	push	{r3, r4, r5, lr}
 8003566:	4604      	mov	r4, r0
    OS_PrioInsert(p_tcb->Prio);
 8003568:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
 800356c:	f000 fb56 	bl	8003c1c <OS_PrioInsert>
    if (p_tcb->Prio == OSPrioCur) {                         /* Are we readying a task at the same prio?               */
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <OS_RdyListInsert+0x74>)
 8003572:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8003576:	7812      	ldrb	r2, [r2, #0]
 8003578:	429a      	cmp	r2, r3
 800357a:	d016      	beq.n	80035aa <OS_RdyListInsert+0x46>
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 800357c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003580:	4916      	ldr	r1, [pc, #88]	; (80035dc <OS_RdyListInsert+0x78>)
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	18c8      	adds	r0, r1, r3
 8003586:	8902      	ldrh	r2, [r0, #8]
 8003588:	b142      	cbz	r2, 800359c <OS_RdyListInsert+0x38>
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
 800358a:	58cd      	ldr	r5, [r1, r3]
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 800358c:	3201      	adds	r2, #1
 800358e:	8102      	strh	r2, [r0, #8]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
 8003590:	2200      	movs	r2, #0
 8003592:	e9c4 5203 	strd	r5, r2, [r4, #12]
        p_tcb2->PrevPtr        = p_tcb;
 8003596:	612c      	str	r4, [r5, #16]
        p_rdy_list->HeadPtr    = p_tcb;
 8003598:	50cc      	str	r4, [r1, r3]
}
 800359a:	bd38      	pop	{r3, r4, r5, pc}
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 800359c:	2501      	movs	r5, #1
 800359e:	8105      	strh	r5, [r0, #8]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
 80035a0:	e9c4 2203 	strd	r2, r2, [r4, #12]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 80035a4:	50cc      	str	r4, [r1, r3]
        p_rdy_list->TailPtr    =  p_tcb;
 80035a6:	6044      	str	r4, [r0, #4]
}
 80035a8:	bd38      	pop	{r3, r4, r5, pc}
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 80035aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80035ae:	480b      	ldr	r0, [pc, #44]	; (80035dc <OS_RdyListInsert+0x78>)
 80035b0:	0092      	lsls	r2, r2, #2
 80035b2:	1883      	adds	r3, r0, r2
 80035b4:	8919      	ldrh	r1, [r3, #8]
 80035b6:	b931      	cbnz	r1, 80035c6 <OS_RdyListInsert+0x62>
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 80035b8:	2501      	movs	r5, #1
 80035ba:	811d      	strh	r5, [r3, #8]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
 80035bc:	e9c4 1103 	strd	r1, r1, [r4, #12]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 80035c0:	5084      	str	r4, [r0, r2]
        p_rdy_list->TailPtr     = p_tcb;
 80035c2:	605c      	str	r4, [r3, #4]
}
 80035c4:	bd38      	pop	{r3, r4, r5, pc}
        p_tcb2                  = p_rdy_list->TailPtr;
 80035c6:	685a      	ldr	r2, [r3, #4]
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 80035c8:	3101      	adds	r1, #1
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 80035ca:	2000      	movs	r0, #0
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 80035cc:	8119      	strh	r1, [r3, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 80035ce:	e9c4 0203 	strd	r0, r2, [r4, #12]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
 80035d2:	60d4      	str	r4, [r2, #12]
        p_rdy_list->TailPtr     = p_tcb;
 80035d4:	605c      	str	r4, [r3, #4]
}
 80035d6:	bd38      	pop	{r3, r4, r5, pc}
 80035d8:	20003624 	.word	0x20003624
 80035dc:	2000349c 	.word	0x2000349c

080035e0 <OS_RdyListInsertHead>:
    p_rdy_list = &OSRdyList[p_tcb->Prio];
 80035e0:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 80035e4:	490c      	ldr	r1, [pc, #48]	; (8003618 <OS_RdyListInsertHead+0x38>)
 80035e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80035ea:	009b      	lsls	r3, r3, #2
{
 80035ec:	b430      	push	{r4, r5}
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 80035ee:	18cc      	adds	r4, r1, r3
 80035f0:	8922      	ldrh	r2, [r4, #8]
 80035f2:	b14a      	cbz	r2, 8003608 <OS_RdyListInsertHead+0x28>
        p_tcb->NextPtr         = p_rdy_list->HeadPtr;       /*         Adjust new OS_TCBs links                       */
 80035f4:	58cd      	ldr	r5, [r1, r3]
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 80035f6:	3201      	adds	r2, #1
 80035f8:	8122      	strh	r2, [r4, #8]
        p_tcb->PrevPtr         = (OS_TCB    *)0;
 80035fa:	2200      	movs	r2, #0
 80035fc:	e9c0 5203 	strd	r5, r2, [r0, #12]
        p_tcb2->PrevPtr        = p_tcb;
 8003600:	6128      	str	r0, [r5, #16]
        p_rdy_list->HeadPtr    = p_tcb;
 8003602:	50c8      	str	r0, [r1, r3]
}
 8003604:	bc30      	pop	{r4, r5}
 8003606:	4770      	bx	lr
        p_rdy_list->NbrEntries =  (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8003608:	2501      	movs	r5, #1
 800360a:	8125      	strh	r5, [r4, #8]
        p_tcb->PrevPtr         =  (OS_TCB   *)0;
 800360c:	e9c0 2203 	strd	r2, r2, [r0, #12]
        p_rdy_list->TailPtr    =  p_tcb;
 8003610:	6060      	str	r0, [r4, #4]
        p_rdy_list->HeadPtr    =  p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 8003612:	50c8      	str	r0, [r1, r3]
}
 8003614:	bc30      	pop	{r4, r5}
 8003616:	4770      	bx	lr
 8003618:	2000349c 	.word	0x2000349c

0800361c <OS_RdyListInsertTail>:
    p_rdy_list = &OSRdyList[p_tcb->Prio];
 800361c:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
{
 8003620:	b430      	push	{r4, r5}
    if (p_rdy_list->NbrEntries == (OS_OBJ_QTY)0) {          /* CASE 0: Insert when there are no entries               */
 8003622:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8003626:	4c0b      	ldr	r4, [pc, #44]	; (8003654 <OS_RdyListInsertTail+0x38>)
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	18e2      	adds	r2, r4, r3
 800362c:	8911      	ldrh	r1, [r2, #8]
 800362e:	b149      	cbz	r1, 8003644 <OS_RdyListInsertTail+0x28>
        p_tcb2                  = p_rdy_list->TailPtr;
 8003630:	6853      	ldr	r3, [r2, #4]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 8003632:	2400      	movs	r4, #0
        p_rdy_list->NbrEntries++;                           /*         One more OS_TCB in the list                    */
 8003634:	3101      	adds	r1, #1
 8003636:	8111      	strh	r1, [r2, #8]
        p_tcb->NextPtr          = (OS_TCB   *)0;            /*         Adjust new OS_TCBs links                       */
 8003638:	e9c0 4303 	strd	r4, r3, [r0, #12]
        p_tcb2->NextPtr         = p_tcb;                    /*         Adjust old tail of list's links                */
 800363c:	60d8      	str	r0, [r3, #12]
}
 800363e:	bc30      	pop	{r4, r5}
        p_rdy_list->TailPtr     = p_tcb;
 8003640:	6050      	str	r0, [r2, #4]
}
 8003642:	4770      	bx	lr
        p_rdy_list->NbrEntries  = (OS_OBJ_QTY)1;            /*         This is the first entry                        */
 8003644:	2501      	movs	r5, #1
 8003646:	8115      	strh	r5, [r2, #8]
        p_tcb->PrevPtr          = (OS_TCB   *)0;
 8003648:	e9c0 1103 	strd	r1, r1, [r0, #12]
        p_rdy_list->HeadPtr     = p_tcb;                    /*         Both list pointers point to this OS_TCB        */
 800364c:	50e0      	str	r0, [r4, r3]
        p_rdy_list->TailPtr     = p_tcb;
 800364e:	6050      	str	r0, [r2, #4]
}
 8003650:	bc30      	pop	{r4, r5}
 8003652:	4770      	bx	lr
 8003654:	2000349c 	.word	0x2000349c

08003658 <OS_RdyListRemove>:
{
 8003658:	b570      	push	{r4, r5, r6, lr}
    p_tcb1     = p_tcb->PrevPtr;                            /* Point to next and previous OS_TCB in the list          */
 800365a:	6901      	ldr	r1, [r0, #16]
{
 800365c:	4604      	mov	r4, r0
    p_rdy_list = &OSRdyList[p_tcb->Prio];
 800365e:	f890 0037 	ldrb.w	r0, [r0, #55]	; 0x37
    p_tcb2     = p_tcb->NextPtr;
 8003662:	68e3      	ldr	r3, [r4, #12]
    if (p_tcb1 == (OS_TCB *)0) {                            /* Was the OS_TCB to remove was at the head?              */
 8003664:	b171      	cbz	r1, 8003684 <OS_RdyListRemove+0x2c>
        p_rdy_list->NbrEntries--;                           /* No,  one less entry                                    */
 8003666:	4a17      	ldr	r2, [pc, #92]	; (80036c4 <OS_RdyListRemove+0x6c>)
 8003668:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800366c:	eb02 0080 	add.w	r0, r2, r0, lsl #2
 8003670:	8902      	ldrh	r2, [r0, #8]
 8003672:	3a01      	subs	r2, #1
 8003674:	8102      	strh	r2, [r0, #8]
        p_tcb1->NextPtr = p_tcb2;
 8003676:	60cb      	str	r3, [r1, #12]
        if (p_tcb2 == (OS_TCB *)0) {
 8003678:	b19b      	cbz	r3, 80036a2 <OS_RdyListRemove+0x4a>
            p_tcb2->PrevPtr     = p_tcb1;
 800367a:	6119      	str	r1, [r3, #16]
    p_tcb->PrevPtr = (OS_TCB *)0;
 800367c:	2300      	movs	r3, #0
    p_tcb->NextPtr = (OS_TCB *)0;
 800367e:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 8003682:	bd70      	pop	{r4, r5, r6, pc}
        if (p_tcb2 == (OS_TCB *)0) {                        /* Yes, was it the only OS_TCB?                           */
 8003684:	b193      	cbz	r3, 80036ac <OS_RdyListRemove+0x54>
            p_rdy_list->NbrEntries--;                       /*      No,  one less entry                               */
 8003686:	4d0f      	ldr	r5, [pc, #60]	; (80036c4 <OS_RdyListRemove+0x6c>)
 8003688:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800368c:	0080      	lsls	r0, r0, #2
 800368e:	182e      	adds	r6, r5, r0
 8003690:	8932      	ldrh	r2, [r6, #8]
 8003692:	3a01      	subs	r2, #1
 8003694:	8132      	strh	r2, [r6, #8]
            p_tcb2->PrevPtr        = (OS_TCB   *)0;         /*           adjust back link of new list head            */
 8003696:	6119      	str	r1, [r3, #16]
            p_rdy_list->HeadPtr    = p_tcb2;                /*           adjust OS_RDY_LIST's new head                */
 8003698:	502b      	str	r3, [r5, r0]
    p_tcb->PrevPtr = (OS_TCB *)0;
 800369a:	2300      	movs	r3, #0
    p_tcb->NextPtr = (OS_TCB *)0;
 800369c:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 80036a0:	bd70      	pop	{r4, r5, r6, pc}
    p_tcb->PrevPtr = (OS_TCB *)0;
 80036a2:	2300      	movs	r3, #0
            p_rdy_list->TailPtr = p_tcb1;                   /*      Removing the TCB at the tail, adj the tail ptr    */
 80036a4:	6041      	str	r1, [r0, #4]
    p_tcb->NextPtr = (OS_TCB *)0;
 80036a6:	e9c4 3303 	strd	r3, r3, [r4, #12]
}
 80036aa:	bd70      	pop	{r4, r5, r6, pc}
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 80036ac:	4d05      	ldr	r5, [pc, #20]	; (80036c4 <OS_RdyListRemove+0x6c>)
 80036ae:	eb00 0240 	add.w	r2, r0, r0, lsl #1
 80036b2:	0092      	lsls	r2, r2, #2
 80036b4:	18a9      	adds	r1, r5, r2
            p_rdy_list->HeadPtr    = (OS_TCB   *)0;
 80036b6:	50ab      	str	r3, [r5, r2]
            p_rdy_list->NbrEntries = (OS_OBJ_QTY)0;         /*      Yes, no more entries                              */
 80036b8:	810b      	strh	r3, [r1, #8]
            p_rdy_list->TailPtr    = (OS_TCB   *)0;
 80036ba:	604b      	str	r3, [r1, #4]
            OS_PrioRemove(p_tcb->Prio);
 80036bc:	f000 fac2 	bl	8003c44 <OS_PrioRemove>
 80036c0:	e7dc      	b.n	800367c <OS_RdyListRemove+0x24>
 80036c2:	bf00      	nop
 80036c4:	2000349c 	.word	0x2000349c

080036c8 <OS_SchedRoundRobin>:
{
 80036c8:	b538      	push	{r3, r4, r5, lr}
    if (OSSchedRoundRobinEn != DEF_TRUE) {                  /* Make sure round-robin has been enabled                 */
 80036ca:	4b1c      	ldr	r3, [pc, #112]	; (800373c <OS_SchedRoundRobin+0x74>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d000      	beq.n	80036d4 <OS_SchedRoundRobin+0xc>
}
 80036d2:	bd38      	pop	{r3, r4, r5, pc}
 80036d4:	4604      	mov	r4, r0
    CPU_CRITICAL_ENTER();
 80036d6:	f7fc fd87 	bl	80001e8 <CPU_SR_Save>
    p_tcb = p_rdy_list->HeadPtr;                            /* Decrement time quanta counter                          */
 80036da:	6823      	ldr	r3, [r4, #0]
    CPU_CRITICAL_ENTER();
 80036dc:	4601      	mov	r1, r0
    if (p_tcb == (OS_TCB *)0) {
 80036de:	b13b      	cbz	r3, 80036f0 <OS_SchedRoundRobin+0x28>
    if (p_tcb == &OSIdleTaskTCB) {
 80036e0:	4a17      	ldr	r2, [pc, #92]	; (8003740 <OS_SchedRoundRobin+0x78>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d004      	beq.n	80036f0 <OS_SchedRoundRobin+0x28>
    if (p_tcb->TimeQuantaCtr > (OS_TICK)0) {
 80036e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036e8:	b132      	cbz	r2, 80036f8 <OS_SchedRoundRobin+0x30>
        p_tcb->TimeQuantaCtr--;
 80036ea:	3a01      	subs	r2, #1
 80036ec:	65da      	str	r2, [r3, #92]	; 0x5c
    if (p_tcb->TimeQuantaCtr > (OS_TICK)0) {                /* Task not done with its time quanta                     */
 80036ee:	b11a      	cbz	r2, 80036f8 <OS_SchedRoundRobin+0x30>
}
 80036f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    CPU_CRITICAL_EXIT();
 80036f4:	f7fc bd7c 	b.w	80001f0 <CPU_SR_Restore>
    if (p_rdy_list->NbrEntries < (OS_OBJ_QTY)2) {           /* See if it's time to time slice current task            */
 80036f8:	8922      	ldrh	r2, [r4, #8]
 80036fa:	2a01      	cmp	r2, #1
 80036fc:	d912      	bls.n	8003724 <OS_SchedRoundRobin+0x5c>
    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {        /* Can't round-robin if the scheduler is locked           */
 80036fe:	4811      	ldr	r0, [pc, #68]	; (8003744 <OS_SchedRoundRobin+0x7c>)
 8003700:	7805      	ldrb	r5, [r0, #0]
 8003702:	b97d      	cbnz	r5, 8003724 <OS_SchedRoundRobin+0x5c>
    switch (p_rdy_list->NbrEntries) {
 8003704:	2a02      	cmp	r2, #2
 8003706:	6860      	ldr	r0, [r4, #4]
 8003708:	d011      	beq.n	800372e <OS_SchedRoundRobin+0x66>
             p_tcb3              = p_tcb1->NextPtr;         /* Point to new list head                                 */
 800370a:	68da      	ldr	r2, [r3, #12]
             p_tcb3->PrevPtr     = (OS_TCB *)0;             /* Adjust back    link of new list head                   */
 800370c:	6115      	str	r5, [r2, #16]
             p_tcb1->PrevPtr     = p_tcb2;                  /* Adjust back    link of new list tail                   */
 800370e:	e9c3 5003 	strd	r5, r0, [r3, #12]
             p_tcb2->NextPtr     = p_tcb1;                  /* Adjust forward link of old list tail                   */
 8003712:	60c3      	str	r3, [r0, #12]
             p_rdy_list->HeadPtr = p_tcb3;                  /* Adjust new list head and tail pointers                 */
 8003714:	6022      	str	r2, [r4, #0]
             p_rdy_list->TailPtr = p_tcb1;
 8003716:	4610      	mov	r0, r2
 8003718:	6063      	str	r3, [r4, #4]
    if (p_tcb->TimeQuanta == (OS_TICK)0) {                  /* See if we need to use the default time slice           */
 800371a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800371c:	b90b      	cbnz	r3, 8003722 <OS_SchedRoundRobin+0x5a>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <OS_SchedRoundRobin+0x80>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	65c3      	str	r3, [r0, #92]	; 0x5c
    CPU_CRITICAL_EXIT();
 8003724:	4608      	mov	r0, r1
}
 8003726:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    CPU_CRITICAL_EXIT();
 800372a:	f7fc bd61 	b.w	80001f0 <CPU_SR_Restore>
             p_tcb1->NextPtr     = (OS_TCB *)0;
 800372e:	e9c3 5003 	strd	r5, r0, [r3, #12]
             p_tcb2->NextPtr     = p_tcb1;
 8003732:	e9c0 3503 	strd	r3, r5, [r0, #12]
             p_rdy_list->TailPtr = p_tcb1;
 8003736:	e9c4 0300 	strd	r0, r3, [r4]
 800373a:	e7ee      	b.n	800371a <OS_SchedRoundRobin+0x52>
 800373c:	20003800 	.word	0x20003800
 8003740:	20003714 	.word	0x20003714
 8003744:	20003498 	.word	0x20003498
 8003748:	200037e0 	.word	0x200037e0

0800374c <OS_Dbg_Init>:
    p_temp16 = (CPU_INT16U const *)&OSDbg_VersionNbr;

    p_temp08 = p_temp08;                                     /* Prevent compiler warning for not using 'p_temp'        */
    p_temp16 = p_temp16;
    p_temp32 = p_temp32;
}
 800374c:	4770      	bx	lr
 800374e:	bf00      	nop

08003750 <OS_FlagInit>:
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 8003750:	4903      	ldr	r1, [pc, #12]	; (8003760 <OS_FlagInit+0x10>)
#endif

    OSFlagQty        = (OS_OBJ_QTY   )0;
 8003752:	4a04      	ldr	r2, [pc, #16]	; (8003764 <OS_FlagInit+0x14>)
    OSFlagDbgListPtr = (OS_FLAG_GRP *)0;
 8003754:	2300      	movs	r3, #0
 8003756:	600b      	str	r3, [r1, #0]
    OSFlagQty        = (OS_OBJ_QTY   )0;
 8003758:	8013      	strh	r3, [r2, #0]
   *p_err            = OS_ERR_NONE;
 800375a:	8003      	strh	r3, [r0, #0]
}
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	200037f0 	.word	0x200037f0
 8003764:	200037ec 	.word	0x200037ec

08003768 <OS_MemInit>:
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSMemDbgListPtr = (OS_MEM   *)0;
 8003768:	4903      	ldr	r1, [pc, #12]	; (8003778 <OS_MemInit+0x10>)
#endif

    OSMemQty        = (OS_OBJ_QTY)0;
 800376a:	4a04      	ldr	r2, [pc, #16]	; (800377c <OS_MemInit+0x14>)
    OSMemDbgListPtr = (OS_MEM   *)0;
 800376c:	2300      	movs	r3, #0
 800376e:	600b      	str	r3, [r1, #0]
    OSMemQty        = (OS_OBJ_QTY)0;
 8003770:	8013      	strh	r3, [r2, #0]
   *p_err           = OS_ERR_NONE;
 8003772:	8003      	strh	r3, [r0, #0]
}
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	200037dc 	.word	0x200037dc
 800377c:	200037f8 	.word	0x200037f8

08003780 <OS_MsgPoolInit>:
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 8003780:	4b1a      	ldr	r3, [pc, #104]	; (80037ec <OS_MsgPoolInit+0x6c>)
{
 8003782:	b470      	push	{r4, r5, r6}
    if (OSCfg_MsgPoolBasePtr == (OS_MSG *)0) {
 8003784:	681c      	ldr	r4, [r3, #0]
 8003786:	b354      	cbz	r4, 80037de <OS_MsgPoolInit+0x5e>
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
        return;
    }
    if (OSCfg_MsgPoolSize == (OS_MSG_QTY)0) {
 8003788:	4b19      	ldr	r3, [pc, #100]	; (80037f0 <OS_MsgPoolInit+0x70>)
 800378a:	881e      	ldrh	r6, [r3, #0]
 800378c:	b316      	cbz	r6, 80037d4 <OS_MsgPoolInit+0x54>

    p_msg1 = OSCfg_MsgPoolBasePtr;
    p_msg2 = OSCfg_MsgPoolBasePtr;
    p_msg2++;
    loops  = OSCfg_MsgPoolSize - 1u;
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 800378e:	2e01      	cmp	r6, #1
    p_msg2++;
 8003790:	f104 0310 	add.w	r3, r4, #16
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 8003794:	d028      	beq.n	80037e8 <OS_MsgPoolInit+0x68>
 8003796:	1eb1      	subs	r1, r6, #2
 8003798:	b289      	uxth	r1, r1
 800379a:	1c8d      	adds	r5, r1, #2
 800379c:	eb04 1505 	add.w	r5, r4, r5, lsl #4
        p_msg1->NextPtr = p_msg2;
        p_msg1->MsgPtr  = (void      *)0;
 80037a0:	2200      	movs	r2, #0
        p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 80037a2:	f823 2c08 	strh.w	r2, [r3, #-8]
        p_msg1->MsgTS   = (CPU_TS     )0u;
 80037a6:	f843 2c04 	str.w	r2, [r3, #-4]
        p_msg1->MsgPtr  = (void      *)0;
 80037aa:	e943 3204 	strd	r3, r2, [r3, #-16]
        p_msg1++;
        p_msg2++;
 80037ae:	3310      	adds	r3, #16
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 80037b0:	42ab      	cmp	r3, r5
 80037b2:	d1f6      	bne.n	80037a2 <OS_MsgPoolInit+0x22>
 80037b4:	1c4b      	adds	r3, r1, #1
 80037b6:	eb04 1303 	add.w	r3, r4, r3, lsl #4
    p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
    p_msg1->MsgPtr  = (void      *)0;
    p_msg1->MsgSize = (OS_MSG_SIZE)0u;
    p_msg1->MsgTS   = (CPU_TS     )0u;

    OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
 80037ba:	490e      	ldr	r1, [pc, #56]	; (80037f4 <OS_MsgPoolInit+0x74>)
    p_msg1->NextPtr = (OS_MSG    *)0;                       /* Last OS_MSG                                            */
 80037bc:	2200      	movs	r2, #0
    p_msg1->MsgPtr  = (void      *)0;
 80037be:	e9c3 2200 	strd	r2, r2, [r3]
    p_msg1->MsgSize = (OS_MSG_SIZE)0u;
 80037c2:	811a      	strh	r2, [r3, #8]
    OSMsgPool.NextPtr    =  OSCfg_MsgPoolBasePtr;
 80037c4:	600c      	str	r4, [r1, #0]
    OSMsgPool.NbrFree    =  OSCfg_MsgPoolSize;
 80037c6:	808e      	strh	r6, [r1, #4]
    p_msg1->MsgTS   = (CPU_TS     )0u;
 80037c8:	60da      	str	r2, [r3, #12]
    OSMsgPool.NbrUsed    = (OS_MSG_QTY)0;
 80037ca:	80ca      	strh	r2, [r1, #6]
#if OS_CFG_DBG_EN > 0u
    OSMsgPool.NbrUsedMax = (OS_MSG_QTY)0;
 80037cc:	810a      	strh	r2, [r1, #8]
#endif
   *p_err                =  OS_ERR_NONE;
}
 80037ce:	bc70      	pop	{r4, r5, r6}
   *p_err                =  OS_ERR_NONE;
 80037d0:	8002      	strh	r2, [r0, #0]
}
 80037d2:	4770      	bx	lr
       *p_err = OS_ERR_MSG_POOL_EMPTY;
 80037d4:	f245 731d 	movw	r3, #22301	; 0x571d
 80037d8:	8003      	strh	r3, [r0, #0]
}
 80037da:	bc70      	pop	{r4, r5, r6}
 80037dc:	4770      	bx	lr
       *p_err = OS_ERR_MSG_POOL_NULL_PTR;
 80037de:	f245 731e 	movw	r3, #22302	; 0x571e
 80037e2:	8003      	strh	r3, [r0, #0]
}
 80037e4:	bc70      	pop	{r4, r5, r6}
 80037e6:	4770      	bx	lr
    for (i = 0u; i < loops; i++) {                          /* Init. list of free OS_MSGs                             */
 80037e8:	4623      	mov	r3, r4
 80037ea:	e7e6      	b.n	80037ba <OS_MsgPoolInit+0x3a>
 80037ec:	0800a6b0 	.word	0x0800a6b0
 80037f0:	0800a6b4 	.word	0x0800a6b4
 80037f4:	20003708 	.word	0x20003708

080037f8 <OS_MsgQInit>:

void  OS_MsgQInit (OS_MSG_Q    *p_msg_q,
                   OS_MSG_QTY   size)
{
    p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
    p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
 80037f8:	2300      	movs	r3, #0
    p_msg_q->NbrEntriesSize = (OS_MSG_QTY)size;
 80037fa:	8101      	strh	r1, [r0, #8]
    p_msg_q->NbrEntries     = (OS_MSG_QTY)0;
 80037fc:	8143      	strh	r3, [r0, #10]
#if OS_CFG_DBG_EN > 0u
    p_msg_q->NbrEntriesMax  = (OS_MSG_QTY)0;
 80037fe:	8183      	strh	r3, [r0, #12]
#endif
    p_msg_q->InPtr          = (OS_MSG   *)0;
    p_msg_q->OutPtr         = (OS_MSG   *)0;
 8003800:	e9c0 3300 	strd	r3, r3, [r0]
}
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop

08003808 <OSMutexCreate>:
*/

void  OSMutexCreate (OS_MUTEX  *p_mutex,
                     CPU_CHAR  *p_name,
                     OS_ERR    *p_err)
{
 8003808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to be called from an ISR                   */
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <OSMutexCreate+0x6c>)
 800380e:	781d      	ldrb	r5, [r3, #0]
 8003810:	bb5d      	cbnz	r5, 800386a <OSMutexCreate+0x62>
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 8003812:	b328      	cbz	r0, 8003860 <OSMutexCreate+0x58>
 8003814:	4604      	mov	r4, r0
 8003816:	460f      	mov	r7, r1
 8003818:	4616      	mov	r6, r2
       *p_err = OS_ERR_OBJ_PTR_NULL;
        return;
    }
#endif

    OS_CRITICAL_ENTER();
 800381a:	f7fc fce5 	bl	80001e8 <CPU_SR_Save>
#if OS_OBJ_TYPE_REQ > 0u
    p_mutex->Type              =  OS_OBJ_TYPE_MUTEX;        /* Mark the data structure as a mutex                     */
 800381e:	4b16      	ldr	r3, [pc, #88]	; (8003878 <OSMutexCreate+0x70>)
 8003820:	6023      	str	r3, [r4, #0]
    OS_CRITICAL_ENTER();
 8003822:	4680      	mov	r8, r0
#endif
#if OS_CFG_DBG_EN > 0u
    p_mutex->NamePtr           =  p_name;
 8003824:	6067      	str	r7, [r4, #4]
#else
    (void)&p_name;
#endif
    p_mutex->MutexGrpNextPtr   = (OS_MUTEX     *)0;
    p_mutex->OwnerTCBPtr       = (OS_TCB       *)0;
 8003826:	e9c4 5508 	strd	r5, r5, [r4, #32]
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)0;         /* Mutex is available                                     */
 800382a:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
    p_mutex->TS                = (CPU_TS        )0;
 800382e:	62e5      	str	r5, [r4, #44]	; 0x2c
    OS_PendListInit(&p_mutex->PendList);                    /* Initialize the waiting list                            */
 8003830:	f104 0008 	add.w	r0, r4, #8
 8003834:	f7ff fd12 	bl	800325c <OS_PendListInit>
#if OS_CFG_DBG_EN > 0u
void  OS_MutexDbgListAdd (OS_MUTEX  *p_mutex)
{
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 8003838:	4910      	ldr	r1, [pc, #64]	; (800387c <OSMutexCreate+0x74>)
    p_mutex->DbgNamePtr               = (CPU_CHAR *)((void *)" ");
 800383a:	4a11      	ldr	r2, [pc, #68]	; (8003880 <OSMutexCreate+0x78>)
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 800383c:	680b      	ldr	r3, [r1, #0]
    p_mutex->DbgPrevPtr               = (OS_MUTEX *)0;
 800383e:	6165      	str	r5, [r4, #20]
        p_mutex->DbgNextPtr           = (OS_MUTEX *)0;
 8003840:	e9c4 3206 	strd	r3, r2, [r4, #24]
    if (OSMutexDbgListPtr == (OS_MUTEX *)0) {
 8003844:	b103      	cbz	r3, 8003848 <OSMutexCreate+0x40>
    } else {
        p_mutex->DbgNextPtr           =  OSMutexDbgListPtr;
        OSMutexDbgListPtr->DbgPrevPtr =  p_mutex;
 8003846:	615c      	str	r4, [r3, #20]
    OSMutexQty++;
 8003848:	4a0e      	ldr	r2, [pc, #56]	; (8003884 <OSMutexCreate+0x7c>)
    }
    OSMutexDbgListPtr                 =  p_mutex;
 800384a:	600c      	str	r4, [r1, #0]
    OSMutexQty++;
 800384c:	8813      	ldrh	r3, [r2, #0]
    OS_CRITICAL_EXIT_NO_SCHED();
 800384e:	4640      	mov	r0, r8
    OSMutexQty++;
 8003850:	3301      	adds	r3, #1
 8003852:	8013      	strh	r3, [r2, #0]
    OS_CRITICAL_EXIT_NO_SCHED();
 8003854:	f7fc fccc 	bl	80001f0 <CPU_SR_Restore>
   *p_err = OS_ERR_NONE;
 8003858:	2300      	movs	r3, #0
 800385a:	8033      	strh	r3, [r6, #0]
}
 800385c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8003860:	f645 53c3 	movw	r3, #24003	; 0x5dc3
 8003864:	8013      	strh	r3, [r2, #0]
}
 8003866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       *p_err = OS_ERR_CREATE_ISR;
 800386a:	f642 63e1 	movw	r3, #12001	; 0x2ee1
 800386e:	8013      	strh	r3, [r2, #0]
}
 8003870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003874:	20003704 	.word	0x20003704
 8003878:	5854554d 	.word	0x5854554d
 800387c:	20003804 	.word	0x20003804
 8003880:	0800a6f8 	.word	0x0800a6f8
 8003884:	200037fa 	.word	0x200037fa

08003888 <OSMutexPend>:
{
 8003888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 800388c:	4c68      	ldr	r4, [pc, #416]	; (8003a30 <OSMutexPend+0x1a8>)
 800388e:	7824      	ldrb	r4, [r4, #0]
{
 8003890:	b089      	sub	sp, #36	; 0x24
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8003892:	b134      	cbz	r4, 80038a2 <OSMutexPend+0x1a>
       *p_err = OS_ERR_PEND_ISR;
 8003894:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003896:	f246 13ae 	movw	r3, #25006	; 0x61ae
 800389a:	8013      	strh	r3, [r2, #0]
}
 800389c:	b009      	add	sp, #36	; 0x24
 800389e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate arguments                                     */
 80038a2:	b150      	cbz	r0, 80038ba <OSMutexPend+0x32>
    switch (opt) {                                          /* Validate 'opt'                                         */
 80038a4:	b182      	cbz	r2, 80038c8 <OSMutexPend+0x40>
 80038a6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80038aa:	d00d      	beq.n	80038c8 <OSMutexPend+0x40>
            *p_err = OS_ERR_OPT_INVALID;
 80038ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80038ae:	f645 6325 	movw	r3, #24101	; 0x5e25
 80038b2:	8013      	strh	r3, [r2, #0]
}
 80038b4:	b009      	add	sp, #36	; 0x24
 80038b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       *p_err = OS_ERR_OBJ_PTR_NULL;
 80038ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80038bc:	f645 53c3 	movw	r3, #24003	; 0x5dc3
 80038c0:	8013      	strh	r3, [r2, #0]
}
 80038c2:	b009      	add	sp, #36	; 0x24
 80038c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 80038c8:	4c5a      	ldr	r4, [pc, #360]	; (8003a34 <OSMutexPend+0x1ac>)
 80038ca:	6805      	ldr	r5, [r0, #0]
 80038cc:	42a5      	cmp	r5, r4
 80038ce:	d006      	beq.n	80038de <OSMutexPend+0x56>
       *p_err = OS_ERR_OBJ_TYPE;
 80038d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80038d2:	f645 53c4 	movw	r3, #24004	; 0x5dc4
 80038d6:	8013      	strh	r3, [r2, #0]
}
 80038d8:	b009      	add	sp, #36	; 0x24
 80038da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038de:	461f      	mov	r7, r3
 80038e0:	4615      	mov	r5, r2
 80038e2:	460e      	mov	r6, r1
 80038e4:	4604      	mov	r4, r0
    if (p_ts != (CPU_TS *)0) {
 80038e6:	b1cb      	cbz	r3, 800391c <OSMutexPend+0x94>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 80038e8:	2300      	movs	r3, #0
 80038ea:	603b      	str	r3, [r7, #0]
    CPU_CRITICAL_ENTER();
 80038ec:	f7fc fc7c 	bl	80001e8 <CPU_SR_Save>
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 80038f0:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    CPU_CRITICAL_ENTER();
 80038f4:	4680      	mov	r8, r0
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 80038f6:	b9fb      	cbnz	r3, 8003938 <OSMutexPend+0xb0>
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 80038f8:	4b4f      	ldr	r3, [pc, #316]	; (8003a38 <OSMutexPend+0x1b0>)
           *p_ts  = p_mutex->TS;
 80038fa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6263      	str	r3, [r4, #36]	; 0x24
        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8003900:	2101      	movs	r1, #1
 8003902:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
           *p_ts  = p_mutex->TS;
 8003906:	603a      	str	r2, [r7, #0]
************************************************************************************************************************
*/

void  OS_MutexGrpAdd (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 8003908:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800390a:	6222      	str	r2, [r4, #32]
        CPU_CRITICAL_EXIT();
 800390c:	4640      	mov	r0, r8
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 800390e:	63dc      	str	r4, [r3, #60]	; 0x3c
        CPU_CRITICAL_EXIT();
 8003910:	f7fc fc6e 	bl	80001f0 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 8003914:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003916:	2300      	movs	r3, #0
 8003918:	8013      	strh	r3, [r2, #0]
        return;
 800391a:	e7bf      	b.n	800389c <OSMutexPend+0x14>
    CPU_CRITICAL_ENTER();
 800391c:	f7fc fc64 	bl	80001e8 <CPU_SR_Save>
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 8003920:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    CPU_CRITICAL_ENTER();
 8003924:	4680      	mov	r8, r0
    if (p_mutex->OwnerNestingCtr == (OS_NESTING_CTR)0) {    /* Resource available?                                    */
 8003926:	2b00      	cmp	r3, #0
 8003928:	d151      	bne.n	80039ce <OSMutexPend+0x146>
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 800392a:	4b43      	ldr	r3, [pc, #268]	; (8003a38 <OSMutexPend+0x1b0>)
        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 800392c:	2201      	movs	r2, #1
        p_mutex->OwnerTCBPtr       =  OSTCBCurPtr;          /* Yes, caller may proceed                                */
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6263      	str	r3, [r4, #36]	; 0x24
        p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8003932:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 8003936:	e7e7      	b.n	8003908 <OSMutexPend+0x80>
    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {              /* See if current task is already the owner of the mutex  */
 8003938:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8003a38 <OSMutexPend+0x1b0>
 800393c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800393e:	f8d9 2000 	ldr.w	r2, [r9]
 8003942:	4282      	cmp	r2, r0
 8003944:	d055      	beq.n	80039f2 <OSMutexPend+0x16a>
    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 8003946:	042b      	lsls	r3, r5, #16
 8003948:	d461      	bmi.n	8003a0e <OSMutexPend+0x186>
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 800394a:	4b3c      	ldr	r3, [pc, #240]	; (8003a3c <OSMutexPend+0x1b4>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d155      	bne.n	80039fe <OSMutexPend+0x176>
    if (p_tcb->Prio > OSTCBCurPtr->Prio) {                  /* See if mutex owner has a lower priority than current   */
 8003952:	f892 1037 	ldrb.w	r1, [r2, #55]	; 0x37
 8003956:	f890 3037 	ldrb.w	r3, [r0, #55]	; 0x37
 800395a:	428b      	cmp	r3, r1
 800395c:	d85f      	bhi.n	8003a1e <OSMutexPend+0x196>
    OS_Pend(&pend_data,                                     /* Block task pending on Mutex                            */
 800395e:	4633      	mov	r3, r6
 8003960:	2204      	movs	r2, #4
 8003962:	4621      	mov	r1, r4
 8003964:	4668      	mov	r0, sp
 8003966:	f7ff fb77 	bl	8003058 <OS_Pend>
    OS_CRITICAL_EXIT_NO_SCHED();
 800396a:	4640      	mov	r0, r8
 800396c:	f7fc fc40 	bl	80001f0 <CPU_SR_Restore>
    OSSched();                                              /* Find the next highest priority task ready to run       */
 8003970:	f7ff fa3e 	bl	8002df0 <OSSched>
    CPU_CRITICAL_ENTER();
 8003974:	f7fc fc38 	bl	80001e8 <CPU_SR_Save>
    switch (OSTCBCurPtr->PendStatus) {
 8003978:	f8d9 2000 	ldr.w	r2, [r9]
 800397c:	f892 3035 	ldrb.w	r3, [r2, #53]	; 0x35
 8003980:	2b03      	cmp	r3, #3
 8003982:	d84f      	bhi.n	8003a24 <OSMutexPend+0x19c>
 8003984:	e8df f003 	tbb	[pc, r3]
 8003988:	020c141c 	.word	0x020c141c
             if (p_ts != (CPU_TS *)0) {
 800398c:	b10f      	cbz	r7, 8003992 <OSMutexPend+0x10a>
                *p_ts  = (CPU_TS  )0;
 800398e:	2300      	movs	r3, #0
 8003990:	603b      	str	r3, [r7, #0]
            *p_err = OS_ERR_TIMEOUT;
 8003992:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003994:	f247 23d9 	movw	r3, #29401	; 0x72d9
 8003998:	8013      	strh	r3, [r2, #0]
    CPU_CRITICAL_EXIT();
 800399a:	f7fc fc29 	bl	80001f0 <CPU_SR_Restore>
 800399e:	e77d      	b.n	800389c <OSMutexPend+0x14>
             if (p_ts != (CPU_TS *)0) {
 80039a0:	b10f      	cbz	r7, 80039a6 <OSMutexPend+0x11e>
                *p_ts  = OSTCBCurPtr->TS;
 80039a2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80039a4:	603b      	str	r3, [r7, #0]
            *p_err = OS_ERR_OBJ_DEL;
 80039a6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039a8:	f645 53c2 	movw	r3, #24002	; 0x5dc2
 80039ac:	8013      	strh	r3, [r2, #0]
             break;
 80039ae:	e7f4      	b.n	800399a <OSMutexPend+0x112>
             if (p_ts != (CPU_TS *)0) {
 80039b0:	b10f      	cbz	r7, 80039b6 <OSMutexPend+0x12e>
                *p_ts  = OSTCBCurPtr->TS;
 80039b2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80039b4:	603b      	str	r3, [r7, #0]
            *p_err = OS_ERR_PEND_ABORT;
 80039b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039b8:	f246 13a9 	movw	r3, #25001	; 0x61a9
 80039bc:	8013      	strh	r3, [r2, #0]
             break;
 80039be:	e7ec      	b.n	800399a <OSMutexPend+0x112>
             if (p_ts != (CPU_TS *)0) {
 80039c0:	b10f      	cbz	r7, 80039c6 <OSMutexPend+0x13e>
                *p_ts  = OSTCBCurPtr->TS;
 80039c2:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80039c4:	603b      	str	r3, [r7, #0]
            *p_err = OS_ERR_NONE;
 80039c6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039c8:	2300      	movs	r3, #0
 80039ca:	8013      	strh	r3, [r2, #0]
             break;
 80039cc:	e7e5      	b.n	800399a <OSMutexPend+0x112>
    if (OSTCBCurPtr == p_mutex->OwnerTCBPtr) {              /* See if current task is already the owner of the mutex  */
 80039ce:	f8df 9068 	ldr.w	r9, [pc, #104]	; 8003a38 <OSMutexPend+0x1b0>
 80039d2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80039d4:	f8d9 2000 	ldr.w	r2, [r9]
 80039d8:	4282      	cmp	r2, r0
 80039da:	d1b4      	bne.n	8003946 <OSMutexPend+0xbe>
        p_mutex->OwnerNestingCtr++;
 80039dc:	3301      	adds	r3, #1
 80039de:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
        CPU_CRITICAL_EXIT();
 80039e2:	4640      	mov	r0, r8
 80039e4:	f7fc fc04 	bl	80001f0 <CPU_SR_Restore>
       *p_err = OS_ERR_MUTEX_OWNER;                         /* Indicate that current task already owns the mutex      */
 80039e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80039ea:	f245 7382 	movw	r3, #22402	; 0x5782
 80039ee:	8013      	strh	r3, [r2, #0]
        return;
 80039f0:	e754      	b.n	800389c <OSMutexPend+0x14>
        p_mutex->OwnerNestingCtr++;
 80039f2:	3301      	adds	r3, #1
           *p_ts  = p_mutex->TS;
 80039f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
        p_mutex->OwnerNestingCtr++;
 80039f6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
           *p_ts  = p_mutex->TS;
 80039fa:	603a      	str	r2, [r7, #0]
 80039fc:	e7f1      	b.n	80039e2 <OSMutexPend+0x15a>
            CPU_CRITICAL_EXIT();
 80039fe:	4640      	mov	r0, r8
 8003a00:	f7fc fbf6 	bl	80001f0 <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 8003a04:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a06:	f646 5363 	movw	r3, #28003	; 0x6d63
 8003a0a:	8013      	strh	r3, [r2, #0]
            return;
 8003a0c:	e746      	b.n	800389c <OSMutexPend+0x14>
        CPU_CRITICAL_EXIT();
 8003a0e:	4640      	mov	r0, r8
 8003a10:	f7fc fbee 	bl	80001f0 <CPU_SR_Restore>
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 8003a14:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a16:	f246 13b0 	movw	r3, #25008	; 0x61b0
 8003a1a:	8013      	strh	r3, [r2, #0]
        return;
 8003a1c:	e73e      	b.n	800389c <OSMutexPend+0x14>
        OS_TaskChangePrio(p_tcb, OSTCBCurPtr->Prio);
 8003a1e:	f000 fc0f 	bl	8004240 <OS_TaskChangePrio>
 8003a22:	e79c      	b.n	800395e <OSMutexPend+0xd6>
            *p_err = OS_ERR_STATUS_INVALID;
 8003a24:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8003a26:	f646 632e 	movw	r3, #28206	; 0x6e2e
 8003a2a:	8013      	strh	r3, [r2, #0]
             break;
 8003a2c:	e7b5      	b.n	800399a <OSMutexPend+0x112>
 8003a2e:	bf00      	nop
 8003a30:	20003704 	.word	0x20003704
 8003a34:	5854554d 	.word	0x5854554d
 8003a38:	200036ec 	.word	0x200036ec
 8003a3c:	20003498 	.word	0x20003498

08003a40 <OSMutexPost>:
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8003a40:	4b55      	ldr	r3, [pc, #340]	; (8003b98 <OSMutexPost+0x158>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	b9ab      	cbnz	r3, 8003a72 <OSMutexPost+0x32>
    if (p_mutex == (OS_MUTEX *)0) {                         /* Validate 'p_mutex'                                     */
 8003a46:	b1c0      	cbz	r0, 8003a7a <OSMutexPost+0x3a>
    switch (opt) {                                          /* Validate 'opt'                                         */
 8003a48:	b131      	cbz	r1, 8003a58 <OSMutexPost+0x18>
 8003a4a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003a4e:	d003      	beq.n	8003a58 <OSMutexPost+0x18>
            *p_err =  OS_ERR_OPT_INVALID;
 8003a50:	f645 6325 	movw	r3, #24101	; 0x5e25
 8003a54:	8013      	strh	r3, [r2, #0]
 8003a56:	4770      	bx	lr
{
 8003a58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 8003a5c:	4b4f      	ldr	r3, [pc, #316]	; (8003b9c <OSMutexPost+0x15c>)
 8003a5e:	6804      	ldr	r4, [r0, #0]
 8003a60:	429c      	cmp	r4, r3
{
 8003a62:	b082      	sub	sp, #8
    if (p_mutex->Type != OS_OBJ_TYPE_MUTEX) {               /* Make sure mutex was created                            */
 8003a64:	d00d      	beq.n	8003a82 <OSMutexPost+0x42>
       *p_err = OS_ERR_OBJ_TYPE;
 8003a66:	f645 53c4 	movw	r3, #24004	; 0x5dc4
 8003a6a:	8013      	strh	r3, [r2, #0]
}
 8003a6c:	b002      	add	sp, #8
 8003a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
       *p_err = OS_ERR_POST_ISR;
 8003a72:	f246 230e 	movw	r3, #25102	; 0x620e
 8003a76:	8013      	strh	r3, [r2, #0]
        return;
 8003a78:	4770      	bx	lr
       *p_err = OS_ERR_OBJ_PTR_NULL;
 8003a7a:	f645 53c3 	movw	r3, #24003	; 0x5dc3
 8003a7e:	8013      	strh	r3, [r2, #0]
        return;
 8003a80:	4770      	bx	lr
 8003a82:	4604      	mov	r4, r0
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
 8003a84:	f8df 911c 	ldr.w	r9, [pc, #284]	; 8003ba4 <OSMutexPost+0x164>
 8003a88:	4615      	mov	r5, r2
 8003a8a:	460e      	mov	r6, r1
    CPU_CRITICAL_ENTER();
 8003a8c:	f7fc fbac 	bl	80001e8 <CPU_SR_Save>
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
 8003a90:	f8d9 3000 	ldr.w	r3, [r9]
 8003a94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8003a96:	429a      	cmp	r2, r3
    CPU_CRITICAL_ENTER();
 8003a98:	4607      	mov	r7, r0
    if (OSTCBCurPtr != p_mutex->OwnerTCBPtr) {              /* Make sure the mutex owner is releasing the mutex       */
 8003a9a:	d005      	beq.n	8003aa8 <OSMutexPost+0x68>
        CPU_CRITICAL_EXIT();
 8003a9c:	f7fc fba8 	bl	80001f0 <CPU_SR_Restore>
       *p_err = OS_ERR_MUTEX_NOT_OWNER;
 8003aa0:	f245 7381 	movw	r3, #22401	; 0x5781
 8003aa4:	802b      	strh	r3, [r5, #0]
        return;
 8003aa6:	e7e1      	b.n	8003a6c <OSMutexPost+0x2c>
    ts          = OS_TS_GET();                              /* Get timestamp                                          */
 8003aa8:	f7fe ff94 	bl	80029d4 <CPU_TS_TmrRd>
    p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
 8003aac:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    p_mutex->TS = ts;
 8003ab0:	62e0      	str	r0, [r4, #44]	; 0x2c
    p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b2db      	uxtb	r3, r3
    ts          = OS_TS_GET();                              /* Get timestamp                                          */
 8003ab6:	4680      	mov	r8, r0
    p_mutex->OwnerNestingCtr--;                             /* Decrement owner's nesting counter                      */
 8003ab8:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    if (p_mutex->OwnerNestingCtr > (OS_NESTING_CTR)0) {     /* Are we done with all nestings?                         */
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d157      	bne.n	8003b70 <OSMutexPost+0x130>
    OS_MutexGrpRemove(OSTCBCurPtr, p_mutex);                /* Remove mutex from owner's group                        */
 8003ac0:	f8d9 0000 	ldr.w	r0, [r9]

void  OS_MutexGrpRemove (OS_TCB  *p_tcb, OS_MUTEX  *p_mutex)
{
    OS_MUTEX  **pp_mutex;

    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8003ac4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c

    while(*pp_mutex != p_mutex) {
 8003ac6:	42a2      	cmp	r2, r4
 8003ac8:	d101      	bne.n	8003ace <OSMutexPost+0x8e>
 8003aca:	e062      	b.n	8003b92 <OSMutexPost+0x152>
 8003acc:	461a      	mov	r2, r3
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8003ace:	6a13      	ldr	r3, [r2, #32]
    while(*pp_mutex != p_mutex) {
 8003ad0:	429c      	cmp	r4, r3
 8003ad2:	d1fb      	bne.n	8003acc <OSMutexPost+0x8c>
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8003ad4:	f102 0120 	add.w	r1, r2, #32
 8003ad8:	4622      	mov	r2, r4
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on mutex?                             */
 8003ada:	f8b4 a010 	ldrh.w	sl, [r4, #16]
    }

    *pp_mutex = (*pp_mutex)->MutexGrpNextPtr;
 8003ade:	6a13      	ldr	r3, [r2, #32]
 8003ae0:	600b      	str	r3, [r1, #0]
    if (p_pend_list->NbrEntries == (OS_OBJ_QTY)0) {         /* Any task waiting on mutex?                             */
 8003ae2:	f1ba 0f00 	cmp.w	sl, #0
 8003ae6:	d04a      	beq.n	8003b7e <OSMutexPost+0x13e>
    if (OSTCBCurPtr->Prio != OSTCBCurPtr->BasePrio) {       /* Has owner inherited a priority?                        */
 8003ae8:	f890 e037 	ldrb.w	lr, [r0, #55]	; 0x37
 8003aec:	f890 c038 	ldrb.w	ip, [r0, #56]	; 0x38
 8003af0:	45e6      	cmp	lr, ip
 8003af2:	d023      	beq.n	8003b3c <OSMutexPost+0xfc>
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8003af4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    OS_PRIO        highest_prio;
    OS_PRIO        prio;
    OS_PEND_DATA  *p_head;


    highest_prio = OS_CFG_PRIO_MAX - 1u;
 8003af6:	211f      	movs	r1, #31
    pp_mutex = &p_tcb->MutexGrpHeadPtr;

    while(*pp_mutex != (OS_MUTEX *)0) {
 8003af8:	b153      	cbz	r3, 8003b10 <OSMutexPost+0xd0>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 8003afa:	689a      	ldr	r2, [r3, #8]
        if (p_head!= (OS_PEND_DATA *)0) {
 8003afc:	b12a      	cbz	r2, 8003b0a <OSMutexPost+0xca>
            prio = p_head->TCBPtr->Prio;
 8003afe:	6892      	ldr	r2, [r2, #8]
 8003b00:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 8003b04:	4291      	cmp	r1, r2
 8003b06:	bf28      	it	cs
 8003b08:	4611      	movcs	r1, r2
            if(prio < highest_prio) {
                highest_prio = prio;
            }
        }
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
    while(*pp_mutex != (OS_MUTEX *)0) {
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1f4      	bne.n	8003afa <OSMutexPost+0xba>
        prio_new = prio_new > OSTCBCurPtr->BasePrio ? OSTCBCurPtr->BasePrio : prio_new;
 8003b10:	458c      	cmp	ip, r1
 8003b12:	bf28      	it	cs
 8003b14:	468c      	movcs	ip, r1
        if (prio_new > OSTCBCurPtr->Prio) {
 8003b16:	45e6      	cmp	lr, ip
        prio_new = prio_new > OSTCBCurPtr->BasePrio ? OSTCBCurPtr->BasePrio : prio_new;
 8003b18:	46e2      	mov	sl, ip
        if (prio_new > OSTCBCurPtr->Prio) {
 8003b1a:	d20f      	bcs.n	8003b3c <OSMutexPost+0xfc>
            OS_RdyListRemove(OSTCBCurPtr);
 8003b1c:	f7ff fd9c 	bl	8003658 <OS_RdyListRemove>
            OSTCBCurPtr->Prio = prio_new;                   /* Lower owner's priority back to its original one        */
 8003b20:	f8d9 3000 	ldr.w	r3, [r9]
            OS_PrioInsert(prio_new);
 8003b24:	4650      	mov	r0, sl
            OSTCBCurPtr->Prio = prio_new;                   /* Lower owner's priority back to its original one        */
 8003b26:	f883 a037 	strb.w	sl, [r3, #55]	; 0x37
            OS_PrioInsert(prio_new);
 8003b2a:	f000 f877 	bl	8003c1c <OS_PrioInsert>
            OS_RdyListInsertTail(OSTCBCurPtr);              /* Insert owner in ready list at new priority             */
 8003b2e:	f8d9 0000 	ldr.w	r0, [r9]
 8003b32:	f7ff fd73 	bl	800361c <OS_RdyListInsertTail>
            OSPrioCur         = prio_new;
 8003b36:	4b1a      	ldr	r3, [pc, #104]	; (8003ba0 <OSMutexPost+0x160>)
 8003b38:	f883 a000 	strb.w	sl, [r3]
    p_tcb                      = p_pend_list->HeadPtr->TCBPtr;
 8003b3c:	68a2      	ldr	r2, [r4, #8]
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8003b3e:	2301      	movs	r3, #1
    p_tcb                      = p_pend_list->HeadPtr->TCBPtr;
 8003b40:	6891      	ldr	r1, [r2, #8]
    p_mutex->OwnerNestingCtr   = (OS_NESTING_CTR)1;
 8003b42:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
    p_mutex->MutexGrpNextPtr = p_tcb->MutexGrpHeadPtr;      /* The mutex grp is not sorted add to head of list.       */
 8003b46:	6bca      	ldr	r2, [r1, #60]	; 0x3c
 8003b48:	6222      	str	r2, [r4, #32]
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8003b4a:	2300      	movs	r3, #0
    p_mutex->OwnerTCBPtr       = p_tcb;                     /* Give mutex to new owner                                */
 8003b4c:	6261      	str	r1, [r4, #36]	; 0x24
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8003b4e:	461a      	mov	r2, r3
    p_tcb->MutexGrpHeadPtr   = p_mutex;
 8003b50:	63cc      	str	r4, [r1, #60]	; 0x3c
    OS_Post((OS_PEND_OBJ *)((void *)p_mutex),
 8003b52:	4620      	mov	r0, r4
 8003b54:	f8cd 8000 	str.w	r8, [sp]
 8003b58:	f7ff fbb4 	bl	80032c4 <OS_Post>
    OS_CRITICAL_EXIT_NO_SCHED();
 8003b5c:	4638      	mov	r0, r7
 8003b5e:	f7fc fb47 	bl	80001f0 <CPU_SR_Restore>
    if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 8003b62:	0433      	lsls	r3, r6, #16
 8003b64:	d401      	bmi.n	8003b6a <OSMutexPost+0x12a>
        OSSched();                                          /* Run the scheduler                                      */
 8003b66:	f7ff f943 	bl	8002df0 <OSSched>
   *p_err = OS_ERR_NONE;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	802b      	strh	r3, [r5, #0]
 8003b6e:	e77d      	b.n	8003a6c <OSMutexPost+0x2c>
        OS_CRITICAL_EXIT();                                 /* No                                                     */
 8003b70:	4638      	mov	r0, r7
 8003b72:	f7fc fb3d 	bl	80001f0 <CPU_SR_Restore>
       *p_err = OS_ERR_MUTEX_NESTING;
 8003b76:	f245 7383 	movw	r3, #22403	; 0x5783
 8003b7a:	802b      	strh	r3, [r5, #0]
        return;
 8003b7c:	e776      	b.n	8003a6c <OSMutexPost+0x2c>
        p_mutex->OwnerTCBPtr     = (OS_TCB       *)0;       /* No                                                     */
 8003b7e:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
        p_mutex->OwnerNestingCtr = (OS_NESTING_CTR)0;
 8003b82:	f884 a028 	strb.w	sl, [r4, #40]	; 0x28
        OS_CRITICAL_EXIT();
 8003b86:	4638      	mov	r0, r7
 8003b88:	f7fc fb32 	bl	80001f0 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 8003b8c:	f8a5 a000 	strh.w	sl, [r5]
        return;
 8003b90:	e76c      	b.n	8003a6c <OSMutexPost+0x2c>
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8003b92:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8003b96:	e7a0      	b.n	8003ada <OSMutexPost+0x9a>
 8003b98:	20003704 	.word	0x20003704
 8003b9c:	5854554d 	.word	0x5854554d
 8003ba0:	20003624 	.word	0x20003624
 8003ba4:	200036ec 	.word	0x200036ec

08003ba8 <OS_MutexInit>:
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 8003ba8:	4903      	ldr	r1, [pc, #12]	; (8003bb8 <OS_MutexInit+0x10>)
    OSMutexQty        = (OS_OBJ_QTY)0;
 8003baa:	4a04      	ldr	r2, [pc, #16]	; (8003bbc <OS_MutexInit+0x14>)
    OSMutexDbgListPtr = (OS_MUTEX *)0;
 8003bac:	2300      	movs	r3, #0
 8003bae:	600b      	str	r3, [r1, #0]
    OSMutexQty        = (OS_OBJ_QTY)0;
 8003bb0:	8013      	strh	r3, [r2, #0]
   *p_err             =  OS_ERR_NONE;
 8003bb2:	8003      	strh	r3, [r0, #0]
}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop
 8003bb8:	20003804 	.word	0x20003804
 8003bbc:	200037fa 	.word	0x200037fa

08003bc0 <OS_MutexGrpPrioFindHighest>:
    pp_mutex = &p_tcb->MutexGrpHeadPtr;
 8003bc0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    highest_prio = OS_CFG_PRIO_MAX - 1u;
 8003bc2:	201f      	movs	r0, #31
    while(*pp_mutex != (OS_MUTEX *)0) {
 8003bc4:	b15b      	cbz	r3, 8003bde <OS_MutexGrpPrioFindHighest+0x1e>
        p_head = (*pp_mutex)->PendList.HeadPtr;
 8003bc6:	689a      	ldr	r2, [r3, #8]
        if (p_head!= (OS_PEND_DATA *)0) {
 8003bc8:	b12a      	cbz	r2, 8003bd6 <OS_MutexGrpPrioFindHighest+0x16>
            prio = p_head->TCBPtr->Prio;
 8003bca:	6892      	ldr	r2, [r2, #8]
 8003bcc:	f892 2037 	ldrb.w	r2, [r2, #55]	; 0x37
 8003bd0:	4290      	cmp	r0, r2
 8003bd2:	bf28      	it	cs
 8003bd4:	4610      	movcs	r0, r2
        pp_mutex = &(*pp_mutex)->MutexGrpNextPtr;
 8003bd6:	6a1b      	ldr	r3, [r3, #32]
    while(*pp_mutex != (OS_MUTEX *)0) {
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d1f4      	bne.n	8003bc6 <OS_MutexGrpPrioFindHighest+0x6>
 8003bdc:	4770      	bx	lr
    }

    return (highest_prio);
}
 8003bde:	4770      	bx	lr

08003be0 <OS_PrioInit>:
    CPU_DATA  i;


                                                            /* Clear the bitmap table ... no task is ready            */
    for (i = 0u; i < OS_PRIO_TBL_SIZE; i++) {
         OSPrioTbl[i] = (CPU_DATA)0;
 8003be0:	4b01      	ldr	r3, [pc, #4]	; (8003be8 <OS_PrioInit+0x8>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	601a      	str	r2, [r3, #0]
    }
}
 8003be6:	4770      	bx	lr
 8003be8:	20003494 	.word	0x20003494

08003bec <OS_PrioGetHighest>:
    OS_PRIO    prio;


    prio  = (OS_PRIO)0;
    p_tbl = &OSPrioTbl[0];
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <OS_PrioGetHighest+0x2c>)
 8003bee:	6818      	ldr	r0, [r3, #0]
{
 8003bf0:	b510      	push	{r4, lr}
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 8003bf2:	b958      	cbnz	r0, 8003c0c <OS_PrioGetHighest+0x20>
    prio  = (OS_PRIO)0;
 8003bf4:	4604      	mov	r4, r0
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 8003bf6:	f853 0f04 	ldr.w	r0, [r3, #4]!
        prio += DEF_INT_CPU_NBR_BITS;                       /* Compute the step of each CPU_DATA entry                */
 8003bfa:	3420      	adds	r4, #32
 8003bfc:	b2e4      	uxtb	r4, r4
    while (*p_tbl == (CPU_DATA)0) {                         /* Search the bitmap table for the highest priority       */
 8003bfe:	2800      	cmp	r0, #0
 8003c00:	d0f9      	beq.n	8003bf6 <OS_PrioGetHighest+0xa>
        p_tbl++;
    }
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
 8003c02:	f7fc fafc 	bl	80001fe <CPU_CntLeadZeros>
 8003c06:	4420      	add	r0, r4
    return (prio);
}
 8003c08:	b2c0      	uxtb	r0, r0
 8003c0a:	bd10      	pop	{r4, pc}
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
 8003c0c:	f7fc faf7 	bl	80001fe <CPU_CntLeadZeros>
    prio  = (OS_PRIO)0;
 8003c10:	2400      	movs	r4, #0
    prio += (OS_PRIO)CPU_CntLeadZeros(*p_tbl);              /* Find the position of the first bit set at the entry    */
 8003c12:	4420      	add	r0, r4
}
 8003c14:	b2c0      	uxtb	r0, r0
 8003c16:	bd10      	pop	{r4, pc}
 8003c18:	20003494 	.word	0x20003494

08003c1c <OS_PrioInsert>:

    ix             = prio / DEF_INT_CPU_NBR_BITS;
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
    bit            = 1u;
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
    OSPrioTbl[ix] |= bit;
 8003c1c:	0941      	lsrs	r1, r0, #5
 8003c1e:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <OS_PrioInsert+0x24>)
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 8003c20:	f000 001f 	and.w	r0, r0, #31
{
 8003c24:	b410      	push	{r4}
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8003c26:	f1c0 001f 	rsb	r0, r0, #31
    OSPrioTbl[ix] |= bit;
 8003c2a:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	fa03 f000 	lsl.w	r0, r3, r0
    OSPrioTbl[ix] |= bit;
 8003c34:	4320      	orrs	r0, r4
 8003c36:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
}
 8003c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c3e:	4770      	bx	lr
 8003c40:	20003494 	.word	0x20003494

08003c44 <OS_PrioRemove>:
* Note(s)    : 1) This function is INTERNAL to uC/OS-III and your application MUST NOT call it.
************************************************************************************************************************
*/

void  OS_PrioRemove (OS_PRIO  prio)
{
 8003c44:	b410      	push	{r4}

    ix             = prio / DEF_INT_CPU_NBR_BITS;
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
    bit            = 1u;
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
    OSPrioTbl[ix] &= ~bit;
 8003c46:	4909      	ldr	r1, [pc, #36]	; (8003c6c <OS_PrioRemove+0x28>)
 8003c48:	0944      	lsrs	r4, r0, #5
    bit_nbr        = (CPU_DATA)prio & (DEF_INT_CPU_NBR_BITS - 1u);
 8003c4a:	f000 001f 	and.w	r0, r0, #31
    OSPrioTbl[ix] &= ~bit;
 8003c4e:	f851 3024 	ldr.w	r3, [r1, r4, lsl #2]
    bit          <<= (DEF_INT_CPU_NBR_BITS - 1u) - bit_nbr;
 8003c52:	f1c0 001f 	rsb	r0, r0, #31
 8003c56:	2201      	movs	r2, #1
 8003c58:	fa02 f000 	lsl.w	r0, r2, r0
    OSPrioTbl[ix] &= ~bit;
 8003c5c:	ea23 0300 	bic.w	r3, r3, r0
 8003c60:	f841 3024 	str.w	r3, [r1, r4, lsl #2]
}
 8003c64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop
 8003c6c:	20003494 	.word	0x20003494

08003c70 <OS_QInit>:
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSQDbgListPtr = (OS_Q *)0;
 8003c70:	4903      	ldr	r1, [pc, #12]	; (8003c80 <OS_QInit+0x10>)
#endif

    OSQQty        = (OS_OBJ_QTY)0;
 8003c72:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <OS_QInit+0x14>)
    OSQDbgListPtr = (OS_Q *)0;
 8003c74:	2300      	movs	r3, #0
 8003c76:	600b      	str	r3, [r1, #0]
    OSQQty        = (OS_OBJ_QTY)0;
 8003c78:	8013      	strh	r3, [r2, #0]
   *p_err         = OS_ERR_NONE;
 8003c7a:	8003      	strh	r3, [r0, #0]
}
 8003c7c:	4770      	bx	lr
 8003c7e:	bf00      	nop
 8003c80:	200037d4 	.word	0x200037d4
 8003c84:	200036f0 	.word	0x200036f0

08003c88 <OS_SemInit>:
        return;
    }
#endif

#if OS_CFG_DBG_EN > 0u
    OSSemDbgListPtr = (OS_SEM *)0;
 8003c88:	4903      	ldr	r1, [pc, #12]	; (8003c98 <OS_SemInit+0x10>)
#endif

    OSSemQty        = (OS_OBJ_QTY)0;
 8003c8a:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <OS_SemInit+0x14>)
    OSSemDbgListPtr = (OS_SEM *)0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	600b      	str	r3, [r1, #0]
    OSSemQty        = (OS_OBJ_QTY)0;
 8003c90:	8013      	strh	r3, [r2, #0]
   *p_err           = OS_ERR_NONE;
 8003c92:	8003      	strh	r3, [r0, #0]
}
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	20003620 	.word	0x20003620
 8003c9c:	200037d8 	.word	0x200037d8

08003ca0 <OSTaskCreate>:
                    OS_MSG_QTY     q_size,
                    OS_TICK        time_quanta,
                    void          *p_ext,
                    OS_OPT         opt,
                    OS_ERR        *p_err)
{
 8003ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ---------- CANNOT CREATE A TASK FROM AN ISR ---------- */
 8003ca4:	4c8e      	ldr	r4, [pc, #568]	; (8003ee0 <OSTaskCreate+0x240>)
{
 8003ca6:	b08b      	sub	sp, #44	; 0x2c
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ---------- CANNOT CREATE A TASK FROM AN ISR ---------- */
 8003ca8:	f894 c000 	ldrb.w	ip, [r4]
{
 8003cac:	f89d 8050 	ldrb.w	r8, [sp, #80]	; 0x50
 8003cb0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 8003cb2:	f8bd b060 	ldrh.w	fp, [sp, #96]	; 0x60
 8003cb6:	f8bd a06c 	ldrh.w	sl, [sp, #108]	; 0x6c
 8003cba:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 8003cbe:	9402      	str	r4, [sp, #8]
 8003cc0:	e9dd 9419 	ldrd	r9, r4, [sp, #100]	; 0x64
 8003cc4:	9403      	str	r4, [sp, #12]
 8003cc6:	9c1c      	ldr	r4, [sp, #112]	; 0x70
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* ---------- CANNOT CREATE A TASK FROM AN ISR ---------- */
 8003cc8:	f1bc 0f00 	cmp.w	ip, #0
 8003ccc:	f040 80d1 	bne.w	8003e72 <OSTaskCreate+0x1d2>
        return;
    }
#endif

#if OS_CFG_ARG_CHK_EN > 0u                                  /* ---------------- VALIDATE ARGUMENTS ------------------ */
    if (p_tcb == (OS_TCB *)0) {                             /* User must supply a valid OS_TCB                        */
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	f000 80d4 	beq.w	8003e7e <OSTaskCreate+0x1de>
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TCB_INVALID;
        return;
    }
    if (p_task == (OS_TASK_PTR)0) {                         /* User must supply a valid task                          */
 8003cd6:	2a00      	cmp	r2, #0
 8003cd8:	f000 80df 	beq.w	8003e9a <OSTaskCreate+0x1fa>
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_TASK_INVALID;
        return;
    }
    if (p_stk_base == (CPU_STK *)0) {                       /* User must supply a valid stack base address            */
 8003cdc:	2e00      	cmp	r6, #0
 8003cde:	f000 80e2 	beq.w	8003ea6 <OSTaskCreate+0x206>
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_INVALID;
        return;
    }
    if (stk_size < OSCfg_StkSizeMin) {                      /* User must supply a valid minimum stack size            */
 8003ce2:	f8df c218 	ldr.w	ip, [pc, #536]	; 8003efc <OSTaskCreate+0x25c>
 8003ce6:	f8dc 7000 	ldr.w	r7, [ip]
 8003cea:	42af      	cmp	r7, r5
 8003cec:	f200 80cd 	bhi.w	8003e8a <OSTaskCreate+0x1ea>
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_SIZE_INVALID;
        return;
    }
    if (stk_limit >= stk_size) {                            /* User must supply a valid stack limit                   */
 8003cf0:	9f02      	ldr	r7, [sp, #8]
 8003cf2:	42bd      	cmp	r5, r7
 8003cf4:	f240 80db 	bls.w	8003eae <OSTaskCreate+0x20e>
        TRACE_OS_TASK_CREATE_FAILED(p_tcb);                 /* Record the event.                                      */
#endif
       *p_err = OS_ERR_STK_LIMIT_INVALID;
        return;
    }
    if (prio >= OS_CFG_PRIO_MAX) {                          /* Priority must be within 0 and OS_CFG_PRIO_MAX-1        */
 8003cf8:	f1b8 0f1f 	cmp.w	r8, #31
 8003cfc:	f200 80c9 	bhi.w	8003e92 <OSTaskCreate+0x1f2>
            return;
        }
    }
#endif

    if (prio == (OS_CFG_PRIO_MAX - 1u)) {
 8003d00:	d104      	bne.n	8003d0c <OSTaskCreate+0x6c>
        if (p_tcb != &OSIdleTaskTCB) {
 8003d02:	f8df c1fc 	ldr.w	ip, [pc, #508]	; 8003f00 <OSTaskCreate+0x260>
 8003d06:	4560      	cmp	r0, ip
 8003d08:	f040 80c3 	bne.w	8003e92 <OSTaskCreate+0x1f2>
 8003d0c:	e9cd 1207 	strd	r1, r2, [sp, #28]
    p_tcb->MsgPtr             = (void          *)0;
    p_tcb->MsgSize            = (OS_MSG_SIZE    )0u;
#endif

#if OS_CFG_TASK_Q_EN > 0u
    OS_MsgQInit(&p_tcb->MsgQ,
 8003d10:	f100 0768 	add.w	r7, r0, #104	; 0x68
    p_tcb->NamePtr            = (CPU_CHAR      *)((void *)"?Task");
 8003d14:	4a73      	ldr	r2, [pc, #460]	; (8003ee4 <OSTaskCreate+0x244>)
 8003d16:	9305      	str	r3, [sp, #20]
    p_tcb->StkPtr             = (CPU_STK       *)0;
 8003d18:	2300      	movs	r3, #0
    OS_MsgQInit(&p_tcb->MsgQ,
 8003d1a:	4619      	mov	r1, r3
    p_tcb->NamePtr            = (CPU_CHAR      *)((void *)"?Task");
 8003d1c:	6202      	str	r2, [r0, #32]
    p_tcb->StkPtr             = (CPU_STK       *)0;
 8003d1e:	6003      	str	r3, [r0, #0]
    p_tcb->ExtPtr             = (void          *)0;
 8003d20:	e9c0 3301 	strd	r3, r3, [r0, #4]
    p_tcb->PrevPtr            = (OS_TCB        *)0;
 8003d24:	e9c0 3303 	strd	r3, r3, [r0, #12]
    p_tcb->TickPrevPtr        = (OS_TCB        *)0;
 8003d28:	e9c0 3305 	strd	r3, r3, [r0, #20]
    p_tcb->TickListPtr        = (OS_TICK_LIST  *)0;
 8003d2c:	61c3      	str	r3, [r0, #28]
    p_tcb->TaskEntryAddr      = (OS_TASK_PTR    )0;
 8003d2e:	e9c0 3309 	strd	r3, r3, [r0, #36]	; 0x24
    p_tcb->TaskEntryArg       = (void          *)0;
 8003d32:	62c3      	str	r3, [r0, #44]	; 0x2c
    p_tcb->PendDataTblPtr     = (OS_PEND_DATA  *)0;
 8003d34:	6303      	str	r3, [r0, #48]	; 0x30
    p_tcb->PendDataTblEntries = (OS_OBJ_QTY     )0u;
 8003d36:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    p_tcb->TS                 = (CPU_TS         )0u;
 8003d3a:	6483      	str	r3, [r0, #72]	; 0x48
    p_tcb->MsgPtr             = (void          *)0;
 8003d3c:	6603      	str	r3, [r0, #96]	; 0x60
    p_tcb->MsgSize            = (OS_MSG_SIZE    )0u;
 8003d3e:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
    p_tcb->NamePtr            = (CPU_CHAR      *)((void *)"?Task");
 8003d42:	9004      	str	r0, [sp, #16]
    OS_MsgQInit(&p_tcb->MsgQ,
 8003d44:	4638      	mov	r0, r7
 8003d46:	9706      	str	r7, [sp, #24]
 8003d48:	9309      	str	r3, [sp, #36]	; 0x24
 8003d4a:	f7ff fd55 	bl	80037f8 <OS_MsgQInit>
                (OS_MSG_QTY)0u);
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->MsgQPendTime       = (CPU_TS         )0u;
 8003d4e:	9f04      	ldr	r7, [sp, #16]
 8003d50:	9b09      	ldr	r3, [sp, #36]	; 0x24
    p_tcb->MsgQPendTimeMax    = (CPU_TS         )0u;
#endif
#endif

#if OS_CFG_FLAG_EN > 0u
    p_tcb->FlagsPend          = (OS_FLAGS       )0u;
 8003d52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    p_tcb->MsgQPendTimeMax    = (CPU_TS         )0u;
 8003d56:	e9c7 331e 	strd	r3, r3, [r7, #120]	; 0x78
    p_tcb->FlagsOpt           = (OS_OPT         )0u;
 8003d5a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
    p_tcb->FlagsRdy           = (OS_FLAGS       )0u;
 8003d5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
#endif

#if OS_CFG_TASK_REG_TBL_SIZE > 0u
    for (reg_id = 0u; reg_id < OS_CFG_TASK_REG_TBL_SIZE; reg_id++) {
        p_tcb->RegTbl[reg_id] = (OS_REG)0u;
 8003d62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    for (id = 0u; id < OS_CFG_TLS_TBL_SIZE; id++) {
        p_tcb->TLS_Tbl[id]    = (OS_TLS)0;
    }
#endif

    p_tcb->SemCtr             = (OS_SEM_CTR     )0u;
 8003d66:	64fb      	str	r3, [r7, #76]	; 0x4c
#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->SemPendTime        = (CPU_TS         )0u;
    p_tcb->SemPendTimeMax     = (CPU_TS         )0u;
 8003d68:	e9c7 332a 	strd	r3, r3, [r7, #168]	; 0xa8
#endif

#if ((OS_CFG_DBG_EN > 0u) || (OS_CFG_STAT_TASK_STK_CHK_EN > 0u))
    p_tcb->StkSize            = (CPU_STK_SIZE   )0u;
 8003d6c:	643b      	str	r3, [r7, #64]	; 0x40
#endif


#if OS_CFG_TASK_SUSPEND_EN > 0u
    p_tcb->SuspendCtr         = (OS_NESTING_CTR )0u;
 8003d6e:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
#if OS_CFG_STAT_TASK_STK_CHK_EN > 0u
    p_tcb->StkFree            = (CPU_STK_SIZE   )0u;
    p_tcb->StkUsed            = (CPU_STK_SIZE   )0u;
#endif

    p_tcb->Opt                = (OS_OPT         )0u;
 8003d72:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

    p_tcb->TickRemain         = (OS_TICK        )0u;
    p_tcb->TickCtrPrev        = (OS_TICK        )0u;
 8003d76:	e9c7 3314 	strd	r3, r3, [r7, #80]	; 0x50

#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    p_tcb->TimeQuanta         = (OS_TICK        )0u;
    p_tcb->TimeQuantaCtr      = (OS_TICK        )0u;
 8003d7a:	e9c7 3316 	strd	r3, r3, [r7, #88]	; 0x58
#endif

#if OS_CFG_TASK_PROFILE_EN > 0u
    p_tcb->CPUUsage           = (OS_CPU_USAGE   )0u;
    p_tcb->CPUUsageMax        = (OS_CPU_USAGE   )0u;
    p_tcb->CtxSwCtr           = (OS_CTX_SW_CTR  )0u;
 8003d7e:	e9c7 3324 	strd	r3, r3, [r7, #144]	; 0x90
    p_tcb->CyclesDelta        = (CPU_TS         )0u;
 8003d82:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    ts                        = OS_TS_GET();                /* Read the current timestamp and save                    */
 8003d86:	f7fe fe25 	bl	80029d4 <CPU_TS_TmrRd>
#endif
#if OS_CFG_SCHED_LOCK_TIME_MEAS_EN > 0u
    p_tcb->SchedLockTimeMax   = (CPU_TS         )0u;
#endif

    p_tcb->PendOn             = (OS_STATE       )OS_TASK_PEND_ON_NOTHING;
 8003d8a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
    p_tcb->CyclesTotal        = (OS_CYCLES      )0u;
 8003d8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    p_tcb->PendOn             = (OS_STATE       )OS_TASK_PEND_ON_NOTHING;
 8003d90:	637a      	str	r2, [r7, #52]	; 0x34
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
 8003d92:	f00a 0203 	and.w	r2, sl, #3
    p_tcb->PendStatus         = (OS_STATUS      )OS_STATUS_PEND_OK;
    p_tcb->TaskState          = (OS_STATE       )OS_TASK_STATE_RDY;

    p_tcb->Prio               = (OS_PRIO        )OS_PRIO_INIT;
#if OS_CFG_MUTEX_EN > 0u
    p_tcb->BasePrio           = (OS_PRIO        )OS_PRIO_INIT;
 8003d96:	f04f 0c20 	mov.w	ip, #32
#endif

#if OS_CFG_DBG_EN > 0u
    p_tcb->DbgPrevPtr         = (OS_TCB        *)0;
    p_tcb->DbgNextPtr         = (OS_TCB        *)0;
    p_tcb->DbgNamePtr         = (CPU_CHAR      *)((void *)" ");
 8003d9a:	4953      	ldr	r1, [pc, #332]	; (8003ee8 <OSTaskCreate+0x248>)
    p_tcb->CyclesStart        = ts;
 8003d9c:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
 8003da0:	2a03      	cmp	r2, #3
    p_tcb->CyclesTotal        = (OS_CYCLES      )0u;
 8003da2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    p_tcb->SchedLockTimeMax   = (CPU_TS         )0u;
 8003da6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    p_tcb->MutexGrpHeadPtr    = (OS_MUTEX      *)0;
 8003daa:	63fb      	str	r3, [r7, #60]	; 0x3c
    p_tcb->DbgNextPtr         = (OS_TCB        *)0;
 8003dac:	e9c7 332d 	strd	r3, r3, [r7, #180]	; 0xb4
    p_tcb->BasePrio           = (OS_PRIO        )OS_PRIO_INIT;
 8003db0:	f887 c038 	strb.w	ip, [r7, #56]	; 0x38
    p_tcb->DbgNamePtr         = (CPU_CHAR      *)((void *)" ");
 8003db4:	f8c7 10bc 	str.w	r1, [r7, #188]	; 0xbc
   *p_err = OS_ERR_NONE;
 8003db8:	8023      	strh	r3, [r4, #0]
        if ((opt & OS_OPT_TASK_STK_CLR) != (OS_OPT)0) {     /* See if stack needs to be cleared                       */
 8003dba:	f000 8087 	beq.w	8003ecc <OSTaskCreate+0x22c>
    p_stk_limit = p_stk_base + stk_limit;
 8003dbe:	9b02      	ldr	r3, [sp, #8]
    p_sp = OSTaskStkInit(p_task,
 8003dc0:	9c08      	ldr	r4, [sp, #32]
 8003dc2:	9905      	ldr	r1, [sp, #20]
    p_stk_limit = p_stk_base + stk_limit;
 8003dc4:	eb06 0783 	add.w	r7, r6, r3, lsl #2
    p_sp = OSTaskStkInit(p_task,
 8003dc8:	463b      	mov	r3, r7
 8003dca:	4632      	mov	r2, r6
 8003dcc:	e9cd 5a00 	strd	r5, sl, [sp]
 8003dd0:	4620      	mov	r0, r4
 8003dd2:	f7fe fe93 	bl	8002afc <OSTaskStkInit>
    p_tcb->StkLimitPtr   = p_stk_limit;                     /* Save the stack limit pointer                           */
 8003dd6:	9b04      	ldr	r3, [sp, #16]
    p_tcb->TaskEntryArg  = p_arg;                           /* Save task entry argument                               */
 8003dd8:	9905      	ldr	r1, [sp, #20]
    p_tcb->StkLimitPtr   = p_stk_limit;                     /* Save the stack limit pointer                           */
 8003dda:	609f      	str	r7, [r3, #8]
 8003ddc:	461a      	mov	r2, r3
    p_tcb->StkPtr        = p_sp;                            /* Save the new top-of-stack pointer                      */
 8003dde:	6018      	str	r0, [r3, #0]
    p_tcb->TaskEntryAddr = p_task;                          /* Save task entry point address                          */
 8003de0:	6294      	str	r4, [r2, #40]	; 0x28
    p_tcb->TaskEntryArg  = p_arg;                           /* Save task entry argument                               */
 8003de2:	62d9      	str	r1, [r3, #44]	; 0x2c
    p_tcb->NamePtr       = p_name;                          /* Save task name                                         */
 8003de4:	9907      	ldr	r1, [sp, #28]
 8003de6:	6219      	str	r1, [r3, #32]
    p_tcb->Prio          = prio;                            /* Save the task's priority                               */
 8003de8:	f883 8037 	strb.w	r8, [r3, #55]	; 0x37
    p_tcb->BasePrio      = prio;                            /* Set the base priority                                  */
 8003dec:	f883 8038 	strb.w	r8, [r3, #56]	; 0x38
    p_tcb->TimeQuanta    = time_quanta;                     /* Save the #ticks for time slice (0 means not sliced)    */
 8003df0:	f8c3 9058 	str.w	r9, [r3, #88]	; 0x58
    if (time_quanta == (OS_TICK)0) {
 8003df4:	f1b9 0f00 	cmp.w	r9, #0
 8003df8:	d103      	bne.n	8003e02 <OSTaskCreate+0x162>
        p_tcb->TimeQuantaCtr = OSSchedRoundRobinDfltTimeQuanta;
 8003dfa:	4b3c      	ldr	r3, [pc, #240]	; (8003eec <OSTaskCreate+0x24c>)
 8003dfc:	f8d3 9000 	ldr.w	r9, [r3]
 8003e00:	9b04      	ldr	r3, [sp, #16]
    p_tcb->ExtPtr        = p_ext;                           /* Save pointer to TCB extension                          */
 8003e02:	9903      	ldr	r1, [sp, #12]
 8003e04:	6059      	str	r1, [r3, #4]
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
 8003e06:	2400      	movs	r4, #0
    p_tcb->StkBasePtr    = p_stk_base;                      /* Save pointer to the base address of the stack          */
 8003e08:	625e      	str	r6, [r3, #36]	; 0x24
    p_tcb->StkSize       = stk_size;                        /* Save the stack size (in number of CPU_STK elements)    */
 8003e0a:	641d      	str	r5, [r3, #64]	; 0x40
    p_tcb->Opt           = opt;                             /* Save task options                                      */
 8003e0c:	461e      	mov	r6, r3
 8003e0e:	f8c3 905c 	str.w	r9, [r3, #92]	; 0x5c
 8003e12:	f8a3 a044 	strh.w	sl, [r3, #68]	; 0x44
    OS_MsgQInit(&p_tcb->MsgQ,                               /* Initialize the task's message queue                    */
 8003e16:	4659      	mov	r1, fp
        p_tcb->RegTbl[reg_nbr] = (OS_REG)0;
 8003e18:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
    OS_MsgQInit(&p_tcb->MsgQ,                               /* Initialize the task's message queue                    */
 8003e1c:	9806      	ldr	r0, [sp, #24]
 8003e1e:	f7ff fceb 	bl	80037f8 <OS_MsgQInit>
    OSTaskCreateHook(p_tcb);                                /* Call user defined hook                                 */
 8003e22:	4630      	mov	r0, r6
 8003e24:	f7fe fe66 	bl	8002af4 <OSTaskCreateHook>
    OS_CRITICAL_ENTER();
 8003e28:	f7fc f9de 	bl	80001e8 <CPU_SR_Save>
 8003e2c:	4605      	mov	r5, r0
    OS_PrioInsert(p_tcb->Prio);
 8003e2e:	f896 0037 	ldrb.w	r0, [r6, #55]	; 0x37
 8003e32:	f7ff fef3 	bl	8003c1c <OS_PrioInsert>
    OS_RdyListInsertTail(p_tcb);
 8003e36:	4630      	mov	r0, r6
 8003e38:	f7ff fbf0 	bl	800361c <OS_RdyListInsertTail>
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 8003e3c:	492c      	ldr	r1, [pc, #176]	; (8003ef0 <OSTaskCreate+0x250>)
    p_tcb->DbgPrevPtr                = (OS_TCB *)0;
 8003e3e:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 8003e42:	680b      	ldr	r3, [r1, #0]
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 8003e44:	9a04      	ldr	r2, [sp, #16]
    if (OSTaskDbgListPtr == (OS_TCB *)0) {
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d03c      	beq.n	8003ec4 <OSTaskCreate+0x224>
        p_tcb->DbgNextPtr            =  OSTaskDbgListPtr;
 8003e4a:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8003e4e:	4614      	mov	r4, r2
        OSTaskDbgListPtr->DbgPrevPtr =  p_tcb;
 8003e50:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 8003e54:	4a27      	ldr	r2, [pc, #156]	; (8003ef4 <OSTaskCreate+0x254>)
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 8003e56:	4828      	ldr	r0, [pc, #160]	; (8003ef8 <OSTaskCreate+0x258>)
    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 8003e58:	8813      	ldrh	r3, [r2, #0]
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 8003e5a:	7800      	ldrb	r0, [r0, #0]
    OSTaskDbgListPtr                 =  p_tcb;
 8003e5c:	600c      	str	r4, [r1, #0]
    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 8003e5e:	3301      	adds	r3, #1
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 8003e60:	2801      	cmp	r0, #1
    OSTaskQty++;                                            /* Increment the #tasks counter                           */
 8003e62:	8013      	strh	r3, [r2, #0]
        OS_CRITICAL_EXIT();
 8003e64:	4628      	mov	r0, r5
    if (OSRunning != OS_STATE_OS_RUNNING) {                 /* Return if multitasking has not started                 */
 8003e66:	d026      	beq.n	8003eb6 <OSTaskCreate+0x216>
}
 8003e68:	b00b      	add	sp, #44	; 0x2c
 8003e6a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        OS_CRITICAL_EXIT();
 8003e6e:	f7fc b9bf 	b.w	80001f0 <CPU_SR_Restore>
       *p_err = OS_ERR_TASK_CREATE_ISR;
 8003e72:	f247 134a 	movw	r3, #29002	; 0x714a
 8003e76:	8023      	strh	r3, [r4, #0]
}
 8003e78:	b00b      	add	sp, #44	; 0x2c
 8003e7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       *p_err = OS_ERR_TCB_INVALID;
 8003e7e:	f247 13ad 	movw	r3, #29101	; 0x71ad
 8003e82:	8023      	strh	r3, [r4, #0]
}
 8003e84:	b00b      	add	sp, #44	; 0x2c
 8003e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       *p_err = OS_ERR_STK_SIZE_INVALID;
 8003e8a:	f646 6330 	movw	r3, #28208	; 0x6e30
 8003e8e:	8023      	strh	r3, [r4, #0]
        return;
 8003e90:	e7f2      	b.n	8003e78 <OSTaskCreate+0x1d8>
       *p_err = OS_ERR_PRIO_INVALID;
 8003e92:	f246 2373 	movw	r3, #25203	; 0x6273
 8003e96:	8023      	strh	r3, [r4, #0]
        return;
 8003e98:	e7ee      	b.n	8003e78 <OSTaskCreate+0x1d8>
       *p_err = OS_ERR_TASK_INVALID;
 8003e9a:	f247 134f 	movw	r3, #29007	; 0x714f
 8003e9e:	8023      	strh	r3, [r4, #0]
}
 8003ea0:	b00b      	add	sp, #44	; 0x2c
 8003ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
       *p_err = OS_ERR_STK_INVALID;
 8003ea6:	f646 632f 	movw	r3, #28207	; 0x6e2f
 8003eaa:	8023      	strh	r3, [r4, #0]
        return;
 8003eac:	e7e4      	b.n	8003e78 <OSTaskCreate+0x1d8>
       *p_err = OS_ERR_STK_LIMIT_INVALID;
 8003eae:	f646 6331 	movw	r3, #28209	; 0x6e31
 8003eb2:	8023      	strh	r3, [r4, #0]
        return;
 8003eb4:	e7e0      	b.n	8003e78 <OSTaskCreate+0x1d8>
    OS_CRITICAL_EXIT_NO_SCHED();
 8003eb6:	f7fc f99b 	bl	80001f0 <CPU_SR_Restore>
}
 8003eba:	b00b      	add	sp, #44	; 0x2c
 8003ebc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    OSSched();
 8003ec0:	f7fe bf96 	b.w	8002df0 <OSSched>
        p_tcb->DbgNextPtr            = (OS_TCB *)0;
 8003ec4:	f8c2 30b8 	str.w	r3, [r2, #184]	; 0xb8
 8003ec8:	4614      	mov	r4, r2
 8003eca:	e7c3      	b.n	8003e54 <OSTaskCreate+0x1b4>
            for (i = 0u; i < stk_size; i++) {               /* Stack grows from HIGH to LOW memory                    */
 8003ecc:	2d00      	cmp	r5, #0
 8003ece:	f43f af76 	beq.w	8003dbe <OSTaskCreate+0x11e>
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	00aa      	lsls	r2, r5, #2
 8003ed6:	4630      	mov	r0, r6
 8003ed8:	f001 ffe3 	bl	8005ea2 <memset>
 8003edc:	e76f      	b.n	8003dbe <OSTaskCreate+0x11e>
 8003ede:	bf00      	nop
 8003ee0:	20003704 	.word	0x20003704
 8003ee4:	0800a6fc 	.word	0x0800a6fc
 8003ee8:	0800a6f8 	.word	0x0800a6f8
 8003eec:	200037e0 	.word	0x200037e0
 8003ef0:	200036fc 	.word	0x200036fc
 8003ef4:	20003706 	.word	0x20003706
 8003ef8:	2000349a 	.word	0x2000349a
 8003efc:	0800a6b8 	.word	0x0800a6b8
 8003f00:	20003714 	.word	0x20003714

08003f04 <OSTaskSemPend>:
{
 8003f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if (OSIntNestingCtr > (OS_NESTING_CTR)0) {              /* Not allowed to call from an ISR                        */
 8003f08:	4c51      	ldr	r4, [pc, #324]	; (8004050 <OSTaskSemPend+0x14c>)
 8003f0a:	7824      	ldrb	r4, [r4, #0]
 8003f0c:	2c00      	cmp	r4, #0
 8003f0e:	d142      	bne.n	8003f96 <OSTaskSemPend+0x92>
    switch (opt) {                                          /* Validate 'opt'                                         */
 8003f10:	b141      	cbz	r1, 8003f24 <OSTaskSemPend+0x20>
 8003f12:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003f16:	d005      	beq.n	8003f24 <OSTaskSemPend+0x20>
            *p_err = OS_ERR_OPT_INVALID;
 8003f18:	f645 6225 	movw	r2, #24101	; 0x5e25
 8003f1c:	801a      	strh	r2, [r3, #0]
}
 8003f1e:	4620      	mov	r0, r4
 8003f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f24:	461d      	mov	r5, r3
 8003f26:	4617      	mov	r7, r2
 8003f28:	4688      	mov	r8, r1
 8003f2a:	4682      	mov	sl, r0
    if (p_ts != (CPU_TS *)0) {
 8003f2c:	2a00      	cmp	r2, #0
 8003f2e:	d053      	beq.n	8003fd8 <OSTaskSemPend+0xd4>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8003f30:	2300      	movs	r3, #0
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 8003f32:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8004058 <OSTaskSemPend+0x154>
       *p_ts  = (CPU_TS  )0;                                /* Initialize the returned timestamp                      */
 8003f36:	6013      	str	r3, [r2, #0]
    CPU_CRITICAL_ENTER();
 8003f38:	f7fc f956 	bl	80001e8 <CPU_SR_Save>
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 8003f3c:	f8d9 3000 	ldr.w	r3, [r9]
 8003f40:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    CPU_CRITICAL_ENTER();
 8003f42:	4606      	mov	r6, r0
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 8003f44:	bb74      	cbnz	r4, 8003fa4 <OSTaskSemPend+0xa0>
    if ((opt & OS_OPT_PEND_NON_BLOCKING) != (OS_OPT)0) {    /* Caller wants to block if not available?                */
 8003f46:	f418 4f00 	tst.w	r8, #32768	; 0x8000
 8003f4a:	d161      	bne.n	8004010 <OSTaskSemPend+0x10c>
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't pend when the scheduler is locked                */
 8003f4c:	4b41      	ldr	r3, [pc, #260]	; (8004054 <OSTaskSemPend+0x150>)
 8003f4e:	781c      	ldrb	r4, [r3, #0]
 8003f50:	2c00      	cmp	r4, #0
 8003f52:	d14e      	bne.n	8003ff2 <OSTaskSemPend+0xee>
    OS_Pend((OS_PEND_DATA *)0,                              /* Block task pending on Signal                           */
 8003f54:	4653      	mov	r3, sl
 8003f56:	2207      	movs	r2, #7
 8003f58:	4621      	mov	r1, r4
 8003f5a:	4620      	mov	r0, r4
 8003f5c:	f7ff f87c 	bl	8003058 <OS_Pend>
    OS_CRITICAL_EXIT_NO_SCHED();
 8003f60:	4630      	mov	r0, r6
 8003f62:	f7fc f945 	bl	80001f0 <CPU_SR_Restore>
    OSSched();                                              /* Find next highest priority task ready to run           */
 8003f66:	f7fe ff43 	bl	8002df0 <OSSched>
    CPU_CRITICAL_ENTER();
 8003f6a:	f7fc f93d 	bl	80001e8 <CPU_SR_Save>
    switch (OSTCBCurPtr->PendStatus) {                      /* See if we timed-out or aborted                         */
 8003f6e:	f8d9 3000 	ldr.w	r3, [r9]
 8003f72:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8003f76:	2a01      	cmp	r2, #1
    CPU_CRITICAL_ENTER();
 8003f78:	4606      	mov	r6, r0
    switch (OSTCBCurPtr->PendStatus) {                      /* See if we timed-out or aborted                         */
 8003f7a:	d042      	beq.n	8004002 <OSTaskSemPend+0xfe>
 8003f7c:	d350      	bcc.n	8004020 <OSTaskSemPend+0x11c>
 8003f7e:	2a03      	cmp	r2, #3
 8003f80:	d162      	bne.n	8004048 <OSTaskSemPend+0x144>
             if (p_ts != (CPU_TS *)0) {
 8003f82:	b107      	cbz	r7, 8003f86 <OSTaskSemPend+0x82>
                *p_ts  = (CPU_TS  )0;
 8003f84:	603c      	str	r4, [r7, #0]
            *p_err = OS_ERR_TIMEOUT;                        /* Indicate that we didn't get event within TO            */
 8003f86:	f247 22d9 	movw	r2, #29401	; 0x72d9
 8003f8a:	802a      	strh	r2, [r5, #0]
    CPU_CRITICAL_EXIT();
 8003f8c:	4630      	mov	r0, r6
    ctr = OSTCBCurPtr->SemCtr;
 8003f8e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    CPU_CRITICAL_EXIT();
 8003f90:	f7fc f92e 	bl	80001f0 <CPU_SR_Restore>
    return (ctr);
 8003f94:	e7c3      	b.n	8003f1e <OSTaskSemPend+0x1a>
       *p_err = OS_ERR_PEND_ISR;
 8003f96:	f246 12ae 	movw	r2, #25006	; 0x61ae
        return ((OS_SEM_CTR)0);
 8003f9a:	2400      	movs	r4, #0
       *p_err = OS_ERR_PEND_ISR;
 8003f9c:	801a      	strh	r2, [r3, #0]
}
 8003f9e:	4620      	mov	r0, r4
 8003fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        OSTCBCurPtr->SemCtr--;
 8003fa4:	3c01      	subs	r4, #1
           *p_ts  = OSTCBCurPtr->TS;
 8003fa6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
        OSTCBCurPtr->SemCtr--;
 8003fa8:	64dc      	str	r4, [r3, #76]	; 0x4c
           *p_ts  = OSTCBCurPtr->TS;
 8003faa:	603a      	str	r2, [r7, #0]
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8003fac:	f7fe fd12 	bl	80029d4 <CPU_TS_TmrRd>
 8003fb0:	f8d9 2000 	ldr.w	r2, [r9]
 8003fb4:	6c93      	ldr	r3, [r2, #72]	; 0x48
        if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8003fb6:	f8d2 10ac 	ldr.w	r1, [r2, #172]	; 0xac
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8003fba:	1ac0      	subs	r0, r0, r3
        if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8003fbc:	4288      	cmp	r0, r1
        OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8003fbe:	f8c2 00a8 	str.w	r0, [r2, #168]	; 0xa8
            OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 8003fc2:	bf88      	it	hi
 8003fc4:	f8c2 00ac 	strhi.w	r0, [r2, #172]	; 0xac
        CPU_CRITICAL_EXIT();
 8003fc8:	4630      	mov	r0, r6
 8003fca:	f7fc f911 	bl	80001f0 <CPU_SR_Restore>
       *p_err = OS_ERR_NONE;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	802b      	strh	r3, [r5, #0]
}
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 8003fd8:	f8df 907c 	ldr.w	r9, [pc, #124]	; 8004058 <OSTaskSemPend+0x154>
    CPU_CRITICAL_ENTER();
 8003fdc:	f7fc f904 	bl	80001e8 <CPU_SR_Save>
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 8003fe0:	f8d9 3000 	ldr.w	r3, [r9]
 8003fe4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
    CPU_CRITICAL_ENTER();
 8003fe6:	4606      	mov	r6, r0
    if (OSTCBCurPtr->SemCtr > (OS_SEM_CTR)0) {              /* See if task already been signaled                      */
 8003fe8:	2c00      	cmp	r4, #0
 8003fea:	d0ac      	beq.n	8003f46 <OSTaskSemPend+0x42>
        OSTCBCurPtr->SemCtr--;
 8003fec:	3c01      	subs	r4, #1
 8003fee:	64dc      	str	r4, [r3, #76]	; 0x4c
 8003ff0:	e7dc      	b.n	8003fac <OSTaskSemPend+0xa8>
            CPU_CRITICAL_EXIT();
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f7fc f8fc 	bl	80001f0 <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 8003ff8:	f646 5363 	movw	r3, #28003	; 0x6d63
 8003ffc:	802b      	strh	r3, [r5, #0]
            return ((OS_SEM_CTR)0);
 8003ffe:	2400      	movs	r4, #0
 8004000:	e78d      	b.n	8003f1e <OSTaskSemPend+0x1a>
             if (p_ts != (CPU_TS *)0) {
 8004002:	b10f      	cbz	r7, 8004008 <OSTaskSemPend+0x104>
                *p_ts  =  OSTCBCurPtr->TS;
 8004004:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004006:	603a      	str	r2, [r7, #0]
            *p_err = OS_ERR_PEND_ABORT;                     /* Indicate that we aborted                               */
 8004008:	f246 12a9 	movw	r2, #25001	; 0x61a9
 800400c:	802a      	strh	r2, [r5, #0]
             break;
 800400e:	e7bd      	b.n	8003f8c <OSTaskSemPend+0x88>
        CPU_CRITICAL_EXIT();        
 8004010:	4630      	mov	r0, r6
 8004012:	f7fc f8ed 	bl	80001f0 <CPU_SR_Restore>
       *p_err = OS_ERR_PEND_WOULD_BLOCK;                    /* No                                                     */
 8004016:	f246 13b0 	movw	r3, #25008	; 0x61b0
 800401a:	802b      	strh	r3, [r5, #0]
        return ((OS_SEM_CTR)0);
 800401c:	2400      	movs	r4, #0
 800401e:	e77e      	b.n	8003f1e <OSTaskSemPend+0x1a>
             if (p_ts != (CPU_TS *)0) {
 8004020:	b17f      	cbz	r7, 8004042 <OSTaskSemPend+0x13e>
                *p_ts                    =  OSTCBCurPtr->TS;
 8004022:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004024:	603b      	str	r3, [r7, #0]
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8004026:	f7fe fcd5 	bl	80029d4 <CPU_TS_TmrRd>
 800402a:	f8d9 3000 	ldr.w	r3, [r9]
 800402e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
                if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8004030:	f8d3 10ac 	ldr.w	r1, [r3, #172]	; 0xac
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8004034:	1a80      	subs	r0, r0, r2
                if (OSTCBCurPtr->SemPendTimeMax < OSTCBCurPtr->SemPendTime) {
 8004036:	4288      	cmp	r0, r1
                OSTCBCurPtr->SemPendTime = OS_TS_GET() - OSTCBCurPtr->TS;
 8004038:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
                    OSTCBCurPtr->SemPendTimeMax = OSTCBCurPtr->SemPendTime;
 800403c:	bf88      	it	hi
 800403e:	f8c3 00ac 	strhi.w	r0, [r3, #172]	; 0xac
            *p_err = OS_ERR_NONE;
 8004042:	2200      	movs	r2, #0
 8004044:	802a      	strh	r2, [r5, #0]
             break;
 8004046:	e7a1      	b.n	8003f8c <OSTaskSemPend+0x88>
            *p_err = OS_ERR_STATUS_INVALID;
 8004048:	f646 622e 	movw	r2, #28206	; 0x6e2e
 800404c:	802a      	strh	r2, [r5, #0]
             break;
 800404e:	e79d      	b.n	8003f8c <OSTaskSemPend+0x88>
 8004050:	20003704 	.word	0x20003704
 8004054:	20003498 	.word	0x20003498
 8004058:	200036ec 	.word	0x200036ec

0800405c <OSTaskSemPost>:
{
 800405c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004060:	4606      	mov	r6, r0
 8004062:	b082      	sub	sp, #8
 8004064:	4617      	mov	r7, r2
    switch (opt) {                                          /* Validate 'opt'                                         */
 8004066:	460d      	mov	r5, r1
 8004068:	b151      	cbz	r1, 8004080 <OSTaskSemPost+0x24>
 800406a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800406e:	d007      	beq.n	8004080 <OSTaskSemPost+0x24>
            *p_err =  OS_ERR_OPT_INVALID;
 8004070:	f645 6325 	movw	r3, #24101	; 0x5e25
 8004074:	8013      	strh	r3, [r2, #0]
             return ((OS_SEM_CTR)0u);
 8004076:	2400      	movs	r4, #0
}
 8004078:	4620      	mov	r0, r4
 800407a:	b002      	add	sp, #8
 800407c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ts = OS_TS_GET();                                       /* Get timestamp                                          */
 8004080:	f7fe fca8 	bl	80029d4 <CPU_TS_TmrRd>
 8004084:	4681      	mov	r9, r0
    OS_SEM_CTR  ctr;
    CPU_SR_ALLOC();



    OS_CRITICAL_ENTER();
 8004086:	f7fc f8af 	bl	80001e8 <CPU_SR_Save>
 800408a:	4680      	mov	r8, r0
    if (p_tcb == (OS_TCB *)0) {                             /* Post signal to 'self'?                                 */
 800408c:	b31e      	cbz	r6, 80040d6 <OSTaskSemPost+0x7a>
        p_tcb = OSTCBCurPtr;
    }
    p_tcb->TS = ts;
   *p_err     = OS_ERR_NONE;                                /* Assume we won't have any errors                        */
 800408e:	2400      	movs	r4, #0
    p_tcb->TS = ts;
 8004090:	f8c6 9048 	str.w	r9, [r6, #72]	; 0x48
   *p_err     = OS_ERR_NONE;                                /* Assume we won't have any errors                        */
 8004094:	803c      	strh	r4, [r7, #0]
    switch (p_tcb->TaskState) {
 8004096:	f896 3036 	ldrb.w	r3, [r6, #54]	; 0x36
 800409a:	2b07      	cmp	r3, #7
 800409c:	d810      	bhi.n	80040c0 <OSTaskSemPost+0x64>
 800409e:	2201      	movs	r2, #1
 80040a0:	409a      	lsls	r2, r3
 80040a2:	f012 0acc 	ands.w	sl, r2, #204	; 0xcc
 80040a6:	d119      	bne.n	80040dc <OSTaskSemPost+0x80>
 80040a8:	f012 0f33 	tst.w	r2, #51	; 0x33
 80040ac:	d008      	beq.n	80040c0 <OSTaskSemPost+0x64>
                          return ((OS_SEM_CTR)0);
                      }
                      break;

                 case 4u:
                      if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 80040ae:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 80040b0:	1c60      	adds	r0, r4, #1
 80040b2:	d038      	beq.n	8004126 <OSTaskSemPost+0xca>
                      break;

                 default:
                      break;
             }
             p_tcb->SemCtr++;                               /* Task signaled is not pending on anything               */
 80040b4:	3401      	adds	r4, #1
 80040b6:	64f4      	str	r4, [r6, #76]	; 0x4c
             ctr = p_tcb->SemCtr;
             OS_CRITICAL_EXIT();
 80040b8:	4640      	mov	r0, r8
 80040ba:	f7fc f899 	bl	80001f0 <CPU_SR_Restore>
 80040be:	e7db      	b.n	8004078 <OSTaskSemPost+0x1c>
                 OS_CRITICAL_EXIT();
             }
             break;

        default:
             OS_CRITICAL_EXIT();
 80040c0:	4640      	mov	r0, r8
 80040c2:	f7fc f895 	bl	80001f0 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
             ctr   = (OS_SEM_CTR)0;
 80040c6:	2400      	movs	r4, #0
            *p_err = OS_ERR_STATE_INVALID;
 80040c8:	f646 632d 	movw	r3, #28205	; 0x6e2d
}
 80040cc:	4620      	mov	r0, r4
            *p_err = OS_ERR_STATE_INVALID;
 80040ce:	803b      	strh	r3, [r7, #0]
}
 80040d0:	b002      	add	sp, #8
 80040d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_tcb = OSTCBCurPtr;
 80040d6:	4b18      	ldr	r3, [pc, #96]	; (8004138 <OSTaskSemPost+0xdc>)
 80040d8:	681e      	ldr	r6, [r3, #0]
 80040da:	e7d8      	b.n	800408e <OSTaskSemPost+0x32>
             if (p_tcb->PendOn == OS_TASK_PEND_ON_TASK_SEM) {   /* Is task signaled waiting for a signal?             */
 80040dc:	f896 3034 	ldrb.w	r3, [r6, #52]	; 0x34
 80040e0:	2b07      	cmp	r3, #7
 80040e2:	d00f      	beq.n	8004104 <OSTaskSemPost+0xa8>
                          if (p_tcb->SemCtr == DEF_INT_32U_MAX_VAL) {
 80040e4:	6cf3      	ldr	r3, [r6, #76]	; 0x4c
 80040e6:	1c5a      	adds	r2, r3, #1
 80040e8:	d005      	beq.n	80040f6 <OSTaskSemPost+0x9a>
                 p_tcb->SemCtr++;                           /* No,  Task signaled is NOT pending on semaphore ...     */
 80040ea:	1c5c      	adds	r4, r3, #1
 80040ec:	64f4      	str	r4, [r6, #76]	; 0x4c
                 OS_CRITICAL_EXIT();
 80040ee:	4640      	mov	r0, r8
 80040f0:	f7fc f87e 	bl	80001f0 <CPU_SR_Restore>
 80040f4:	e7c0      	b.n	8004078 <OSTaskSemPost+0x1c>
                              OS_CRITICAL_EXIT();
 80040f6:	4640      	mov	r0, r8
 80040f8:	f7fc f87a 	bl	80001f0 <CPU_SR_Restore>
                             *p_err = OS_ERR_SEM_OVF;
 80040fc:	f646 53c5 	movw	r3, #28101	; 0x6dc5
 8004100:	803b      	strh	r3, [r7, #0]
 8004102:	e7b9      	b.n	8004078 <OSTaskSemPost+0x1c>
                 OS_Post((OS_PEND_OBJ *)0,                      /*      Task is pending on signal                     */
 8004104:	4623      	mov	r3, r4
 8004106:	4622      	mov	r2, r4
 8004108:	4620      	mov	r0, r4
 800410a:	4631      	mov	r1, r6
 800410c:	f8cd 9000 	str.w	r9, [sp]
 8004110:	f7ff f8d8 	bl	80032c4 <OS_Post>
                 OS_CRITICAL_EXIT_NO_SCHED();
 8004114:	4640      	mov	r0, r8
                 ctr = p_tcb->SemCtr;
 8004116:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
                 OS_CRITICAL_EXIT_NO_SCHED();
 8004118:	f7fc f86a 	bl	80001f0 <CPU_SR_Restore>
                 if ((opt & OS_OPT_POST_NO_SCHED) == (OS_OPT)0) {
 800411c:	0429      	lsls	r1, r5, #16
 800411e:	d4ab      	bmi.n	8004078 <OSTaskSemPost+0x1c>
                     OSSched();                                 /* Run the scheduler                                  */
 8004120:	f7fe fe66 	bl	8002df0 <OSSched>
 8004124:	e7a8      	b.n	8004078 <OSTaskSemPost+0x1c>
                          OS_CRITICAL_EXIT();
 8004126:	4640      	mov	r0, r8
 8004128:	f7fc f862 	bl	80001f0 <CPU_SR_Restore>
                         *p_err = OS_ERR_SEM_OVF;
 800412c:	f646 53c5 	movw	r3, #28101	; 0x6dc5
                          return ((OS_SEM_CTR)0);
 8004130:	4654      	mov	r4, sl
                         *p_err = OS_ERR_SEM_OVF;
 8004132:	803b      	strh	r3, [r7, #0]
 8004134:	e7a0      	b.n	8004078 <OSTaskSemPost+0x1c>
 8004136:	bf00      	nop
 8004138:	200036ec 	.word	0x200036ec

0800413c <OS_TaskInit>:
{
 800413c:	b410      	push	{r4}
    OSTaskQty        = (OS_OBJ_QTY   )0;                    /* Clear the number of tasks                              */
 800413e:	4905      	ldr	r1, [pc, #20]	; (8004154 <OS_TaskInit+0x18>)
    OSTaskDbgListPtr = (OS_TCB      *)0;
 8004140:	4c05      	ldr	r4, [pc, #20]	; (8004158 <OS_TaskInit+0x1c>)
    OSTaskCtxSwCtr   = (OS_CTX_SW_CTR)0;                    /* Clear the context switch counter                       */
 8004142:	4a06      	ldr	r2, [pc, #24]	; (800415c <OS_TaskInit+0x20>)
    OSTaskDbgListPtr = (OS_TCB      *)0;
 8004144:	2300      	movs	r3, #0
 8004146:	6023      	str	r3, [r4, #0]
    OSTaskQty        = (OS_OBJ_QTY   )0;                    /* Clear the number of tasks                              */
 8004148:	800b      	strh	r3, [r1, #0]
    OSTaskCtxSwCtr   = (OS_CTX_SW_CTR)0;                    /* Clear the context switch counter                       */
 800414a:	6013      	str	r3, [r2, #0]
}
 800414c:	f85d 4b04 	ldr.w	r4, [sp], #4
   *p_err            = OS_ERR_NONE;
 8004150:	8003      	strh	r3, [r0, #0]
}
 8004152:	4770      	bx	lr
 8004154:	20003706 	.word	0x20003706
 8004158:	200036fc 	.word	0x200036fc
 800415c:	20003700 	.word	0x20003700

08004160 <OS_TaskReturn>:
{
 8004160:	b500      	push	{lr}
    OSTaskReturnHook(OSTCBCurPtr);                          /* Call hook to let user decide on what to do             */
 8004162:	4b07      	ldr	r3, [pc, #28]	; (8004180 <OS_TaskReturn+0x20>)
{
 8004164:	b083      	sub	sp, #12
    OSTaskReturnHook(OSTCBCurPtr);                          /* Call hook to let user decide on what to do             */
 8004166:	6818      	ldr	r0, [r3, #0]
 8004168:	f7fe fcc6 	bl	8002af8 <OSTaskReturnHook>
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <OS_TaskReturn+0x24>)
 800416e:	681c      	ldr	r4, [r3, #0]
        OSTimeDly((OS_TICK )OSCfg_TickRate_Hz,
 8004170:	f10d 0206 	add.w	r2, sp, #6
 8004174:	2100      	movs	r1, #0
 8004176:	4620      	mov	r0, r4
 8004178:	f000 fabe 	bl	80046f8 <OSTimeDly>
 800417c:	e7f8      	b.n	8004170 <OS_TaskReturn+0x10>
 800417e:	bf00      	nop
 8004180:	200036ec 	.word	0x200036ec
 8004184:	0800a6bc 	.word	0x0800a6bc

08004188 <OS_TaskSuspend>:
*/

#if OS_CFG_TASK_SUSPEND_EN > 0u
void  OS_TaskSuspend (OS_TCB  *p_tcb,
                      OS_ERR  *p_err)
{
 8004188:	b570      	push	{r4, r5, r6, lr}
 800418a:	4604      	mov	r4, r0
 800418c:	460d      	mov	r5, r1
    CPU_SR_ALLOC();


    CPU_CRITICAL_ENTER();
 800418e:	f7fc f82b 	bl	80001e8 <CPU_SR_Save>
    if (p_tcb == (OS_TCB *)0) {                             /* See if specified to suspend self                       */
        p_tcb = OSTCBCurPtr;
 8004192:	4b29      	ldr	r3, [pc, #164]	; (8004238 <OS_TaskSuspend+0xb0>)
    CPU_CRITICAL_ENTER();
 8004194:	4606      	mov	r6, r0
    if (p_tcb == (OS_TCB *)0) {                             /* See if specified to suspend self                       */
 8004196:	b174      	cbz	r4, 80041b6 <OS_TaskSuspend+0x2e>
    }

    if (p_tcb == OSTCBCurPtr) {
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	42a3      	cmp	r3, r4
 800419c:	d00c      	beq.n	80041b8 <OS_TaskSuspend+0x30>
           *p_err = OS_ERR_SCHED_LOCKED;
            return;
        }
    }

   *p_err = OS_ERR_NONE;
 800419e:	2300      	movs	r3, #0
 80041a0:	802b      	strh	r3, [r5, #0]
    switch (p_tcb->TaskState) {
 80041a2:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 80041a6:	2b07      	cmp	r3, #7
 80041a8:	d83e      	bhi.n	8004228 <OS_TaskSuspend+0xa0>
 80041aa:	e8df f003 	tbb	[pc, r3]
 80041ae:	2c1c      	.short	0x2c1c
 80041b0:	10103b39 	.word	0x10103b39
 80041b4:	1010      	.short	0x1010
        p_tcb = OSTCBCurPtr;
 80041b6:	681c      	ldr	r4, [r3, #0]
        if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0) {    /* Can't suspend when the scheduler is locked             */
 80041b8:	4b20      	ldr	r3, [pc, #128]	; (800423c <OS_TaskSuspend+0xb4>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0ee      	beq.n	800419e <OS_TaskSuspend+0x16>
            CPU_CRITICAL_EXIT();
 80041c0:	4630      	mov	r0, r6
 80041c2:	f7fc f815 	bl	80001f0 <CPU_SR_Restore>
           *p_err = OS_ERR_SCHED_LOCKED;
 80041c6:	f646 5363 	movw	r3, #28003	; 0x6d63
 80041ca:	802b      	strh	r3, [r5, #0]
            *p_err = OS_ERR_STATE_INVALID;
             return;
    }

    OSSched();
}
 80041cc:	bd70      	pop	{r4, r5, r6, pc}
             p_tcb->SuspendCtr++;
 80041ce:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
 80041d2:	3301      	adds	r3, #1
             CPU_CRITICAL_EXIT();
 80041d4:	4630      	mov	r0, r6
             p_tcb->SuspendCtr++;
 80041d6:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
             CPU_CRITICAL_EXIT();
 80041da:	f7fc f809 	bl	80001f0 <CPU_SR_Restore>
}
 80041de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    OSSched();
 80041e2:	f7fe be05 	b.w	8002df0 <OSSched>
             p_tcb->TaskState  =  OS_TASK_STATE_SUSPENDED;
 80041e6:	2204      	movs	r2, #4
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80041e8:	2301      	movs	r3, #1
             p_tcb->TaskState  =  OS_TASK_STATE_SUSPENDED;
 80041ea:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 80041ee:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
             OS_RdyListRemove(p_tcb);
 80041f2:	4620      	mov	r0, r4
 80041f4:	f7ff fa30 	bl	8003658 <OS_RdyListRemove>
             OS_CRITICAL_EXIT_NO_SCHED();
 80041f8:	4630      	mov	r0, r6
 80041fa:	f7fb fff9 	bl	80001f0 <CPU_SR_Restore>
}
 80041fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    OSSched();
 8004202:	f7fe bdf5 	b.w	8002df0 <OSSched>
             p_tcb->TaskState  = OS_TASK_STATE_DLY_SUSPENDED;
 8004206:	2205      	movs	r2, #5
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8004208:	2301      	movs	r3, #1
             CPU_CRITICAL_EXIT();
 800420a:	4630      	mov	r0, r6
             p_tcb->TaskState  = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED;
 800420c:	f884 2036 	strb.w	r2, [r4, #54]	; 0x36
             p_tcb->SuspendCtr = (OS_NESTING_CTR)1;
 8004210:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
             CPU_CRITICAL_EXIT();
 8004214:	f7fb ffec 	bl	80001f0 <CPU_SR_Restore>
}
 8004218:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    OSSched();
 800421c:	f7fe bde8 	b.w	8002df0 <OSSched>
             p_tcb->TaskState  = OS_TASK_STATE_PEND_SUSPENDED;
 8004220:	2206      	movs	r2, #6
 8004222:	e7f1      	b.n	8004208 <OS_TaskSuspend+0x80>
             p_tcb->TaskState  = OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED;
 8004224:	2207      	movs	r2, #7
 8004226:	e7ef      	b.n	8004208 <OS_TaskSuspend+0x80>
             CPU_CRITICAL_EXIT();
 8004228:	4630      	mov	r0, r6
 800422a:	f7fb ffe1 	bl	80001f0 <CPU_SR_Restore>
            *p_err = OS_ERR_STATE_INVALID;
 800422e:	f646 632d 	movw	r3, #28205	; 0x6e2d
 8004232:	802b      	strh	r3, [r5, #0]
}
 8004234:	bd70      	pop	{r4, r5, r6, pc}
 8004236:	bf00      	nop
 8004238:	200036ec 	.word	0x200036ec
 800423c:	20003498 	.word	0x20003498

08004240 <OS_TaskChangePrio>:
************************************************************************************************************************
*/

void  OS_TaskChangePrio(OS_TCB  *p_tcb,
                        OS_PRIO  prio_new)
{
 8004240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004242:	f890 6037 	ldrb.w	r6, [r0, #55]	; 0x37
 8004246:	4604      	mov	r4, r0
 8004248:	460d      	mov	r5, r1
 800424a:	2701      	movs	r7, #1
    do {
        p_tcb_owner = (OS_TCB *)0;
#if OS_CFG_MUTEX_EN > 0
        prio_cur    = p_tcb->Prio;
#endif
        switch (p_tcb->TaskState) {
 800424c:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8004250:	2b07      	cmp	r3, #7
                          OS_PendListChangePrio(p_tcb);
                          break;

                     case OS_TASK_PEND_ON_MUTEX:
#if OS_CFG_MUTEX_EN > 0
                          OS_PendListChangePrio(p_tcb);
 8004252:	4620      	mov	r0, r4
 8004254:	fa07 f203 	lsl.w	r2, r7, r3
 8004258:	d81a      	bhi.n	8004290 <OS_TaskChangePrio+0x50>
 800425a:	f012 0fcc 	tst.w	r2, #204	; 0xcc
 800425e:	d02c      	beq.n	80042ba <OS_TaskChangePrio+0x7a>
                 switch (p_tcb->PendOn) {                   /* What to do depends on what we are pending on           */
 8004260:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 8004264:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
 8004268:	2b06      	cmp	r3, #6
 800426a:	fa07 f203 	lsl.w	r2, r7, r3
 800426e:	d80f      	bhi.n	8004290 <OS_TaskChangePrio+0x50>
 8004270:	f012 0f6a 	tst.w	r2, #106	; 0x6a
 8004274:	d136      	bne.n	80042e4 <OS_TaskChangePrio+0xa4>
 8004276:	06d3      	lsls	r3, r2, #27
 8004278:	d50a      	bpl.n	8004290 <OS_TaskChangePrio+0x50>
                          OS_PendListChangePrio(p_tcb);
 800427a:	f7fe ffa5 	bl	80031c8 <OS_PendListChangePrio>
                          p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 800427e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004280:	68db      	ldr	r3, [r3, #12]
                          if (prio_cur > prio_new) {         /* Are we increasing the priority?                        */
 8004282:	42b5      	cmp	r5, r6
                          p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 8004284:	6a5c      	ldr	r4, [r3, #36]	; 0x24
                          if (prio_cur > prio_new) {         /* Are we increasing the priority?                        */
 8004286:	d204      	bcs.n	8004292 <OS_TaskChangePrio+0x52>
                              if (p_tcb_owner->Prio <= prio_new) {/* Yes, do we need to give this prio to the owner?   */
 8004288:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
 800428c:	42ae      	cmp	r6, r5
 800428e:	d8dd      	bhi.n	800424c <OS_TaskChangePrio+0xc>
            default:
                 return;
        }
        p_tcb = p_tcb_owner;
    } while (p_tcb != (OS_TCB *)0);
}
 8004290:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                              if (p_tcb_owner->Prio == prio_cur) {/* No, is it required to check for a lower prio?     */
 8004292:	f894 3037 	ldrb.w	r3, [r4, #55]	; 0x37
 8004296:	42b3      	cmp	r3, r6
 8004298:	d001      	beq.n	800429e <OS_TaskChangePrio+0x5e>
 800429a:	461e      	mov	r6, r3
 800429c:	e7d6      	b.n	800424c <OS_TaskChangePrio+0xc>
                                  prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 800429e:	4620      	mov	r0, r4
 80042a0:	f7ff fc8e 	bl	8003bc0 <OS_MutexGrpPrioFindHighest>
                                  prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 80042a4:	f894 5038 	ldrb.w	r5, [r4, #56]	; 0x38
                                  if (prio_new == p_tcb_owner->Prio) {
 80042a8:	f894 6037 	ldrb.w	r6, [r4, #55]	; 0x37
                                  prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 80042ac:	4285      	cmp	r5, r0
 80042ae:	bf28      	it	cs
 80042b0:	4605      	movcs	r5, r0
 80042b2:	b2ed      	uxtb	r5, r5
                                  if (prio_new == p_tcb_owner->Prio) {
 80042b4:	42ae      	cmp	r6, r5
 80042b6:	d1c9      	bne.n	800424c <OS_TaskChangePrio+0xc>
}
 80042b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042ba:	f012 0f32 	tst.w	r2, #50	; 0x32
 80042be:	d115      	bne.n	80042ec <OS_TaskChangePrio+0xac>
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1e5      	bne.n	8004290 <OS_TaskChangePrio+0x50>
                 OS_RdyListRemove(p_tcb);                   /* Remove from current priority                           */
 80042c4:	f7ff f9c8 	bl	8003658 <OS_RdyListRemove>
                 OS_PrioInsert(p_tcb->Prio);
 80042c8:	4628      	mov	r0, r5
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 80042ca:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
                 OS_PrioInsert(p_tcb->Prio);
 80042ce:	f7ff fca5 	bl	8003c1c <OS_PrioInsert>
                 if (p_tcb == OSTCBCurPtr) {
 80042d2:	4b0a      	ldr	r3, [pc, #40]	; (80042fc <OS_TaskChangePrio+0xbc>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	42a3      	cmp	r3, r4
                     OS_RdyListInsertHead(p_tcb);
 80042d8:	4620      	mov	r0, r4
                 if (p_tcb == OSTCBCurPtr) {
 80042da:	d00a      	beq.n	80042f2 <OS_TaskChangePrio+0xb2>
}
 80042dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                     OS_RdyListInsertTail(p_tcb);
 80042e0:	f7ff b99c 	b.w	800361c <OS_RdyListInsertTail>
}
 80042e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                          OS_PendListChangePrio(p_tcb);
 80042e8:	f7fe bf6e 	b.w	80031c8 <OS_PendListChangePrio>
                 p_tcb->Prio = prio_new;                    /* Set new task priority                                  */
 80042ec:	f884 5037 	strb.w	r5, [r4, #55]	; 0x37
}
 80042f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80042f2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                     OS_RdyListInsertHead(p_tcb);
 80042f6:	f7ff b973 	b.w	80035e0 <OS_RdyListInsertHead>
 80042fa:	bf00      	nop
 80042fc:	200036ec 	.word	0x200036ec

08004300 <OS_TickTask>:
* Note(s)    : This function is INTERNAL to uC/OS-III and your application should not call it.
************************************************************************************************************************
*/

void  OS_TickTask (void  *p_arg)
{
 8004300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004304:	4e69      	ldr	r6, [pc, #420]	; (80044ac <OS_TickTask+0x1ac>)
 8004306:	f8df b1b0 	ldr.w	fp, [pc, #432]	; 80044b8 <OS_TickTask+0x1b8>
 800430a:	b087      	sub	sp, #28


    (void)&p_arg;                                               /* Prevent compiler warning                             */

    while (DEF_ON) {
        (void)OSTaskSemPend((OS_TICK  )0,
 800430c:	f04f 0800 	mov.w	r8, #0
 8004310:	2200      	movs	r2, #0
 8004312:	f10d 0316 	add.w	r3, sp, #22
 8004316:	4611      	mov	r1, r2
 8004318:	4610      	mov	r0, r2
 800431a:	f7ff fdf3 	bl	8003f04 <OSTaskSemPend>
                            (OS_OPT   )OS_OPT_PEND_BLOCKING,
                            (CPU_TS  *)0,
                            (OS_ERR  *)&err);                   /* Wait for signal from tick interrupt                  */
        if (err == OS_ERR_NONE) {
 800431e:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f4      	bne.n	8004310 <OS_TickTask+0x10>
            OS_CRITICAL_ENTER();
 8004326:	f7fb ff5f 	bl	80001e8 <CPU_SR_Save>
            OSTickCtr++;                                        /* Keep track of the number of ticks                    */
 800432a:	4a61      	ldr	r2, [pc, #388]	; (80044b0 <OS_TickTask+0x1b0>)
 800432c:	6813      	ldr	r3, [r2, #0]
 800432e:	3301      	adds	r3, #1
 8004330:	6013      	str	r3, [r2, #0]
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
            TRACE_OS_TICK_INCREMENT(OSTickCtr);                 /* Record the event.                                    */
#endif
            OS_CRITICAL_EXIT();
 8004332:	f7fb ff5d 	bl	80001f0 <CPU_SR_Restore>
#endif
    CPU_SR_ALLOC();

                                                              
                                                                        
    OS_CRITICAL_ENTER();
 8004336:	f7fb ff57 	bl	80001e8 <CPU_SR_Save>
 800433a:	4607      	mov	r7, r0
    ts_start    = OS_TS_GET();
 800433c:	f7fe fb4a 	bl	80029d4 <CPU_TS_TmrRd>
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
#endif
    p_list      = &OSTickListDly;
    p_tcb       = p_list->TCB_Ptr;                                      
 8004340:	6834      	ldr	r4, [r6, #0]
    ts_start    = OS_TS_GET();
 8004342:	4682      	mov	sl, r0
    if (p_tcb != (OS_TCB *)0) {
 8004344:	2c00      	cmp	r4, #0
 8004346:	f000 80ae 	beq.w	80044a6 <OS_TickTask+0x1a6>
        p_tcb->TickRemain--;
 800434a:	6d25      	ldr	r5, [r4, #80]	; 0x50
 800434c:	3d01      	subs	r5, #1
 800434e:	6525      	str	r5, [r4, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 8004350:	b17d      	cbz	r5, 8004372 <OS_TickTask+0x72>
 8004352:	e0a8      	b.n	80044a6 <OS_TickTask+0x1a6>
            nbr_updated++;											    /* Keep track of the number of TCBs updated          */
#endif
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
                p_tcb->TaskState = OS_TASK_STATE_RDY;
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
            } else if (p_tcb->TaskState == OS_TASK_STATE_DLY_SUSPENDED) {
 8004354:	2b05      	cmp	r3, #5
                p_tcb->TaskState = OS_TASK_STATE_SUSPENDED;
 8004356:	bf04      	itt	eq
 8004358:	2304      	moveq	r3, #4
 800435a:	f884 3036 	strbeq.w	r3, [r4, #54]	; 0x36
            }

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 800435e:	6964      	ldr	r4, [r4, #20]
 8004360:	6034      	str	r4, [r6, #0]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
            if (p_tcb == (OS_TCB *)0) {
 8004362:	b1ac      	cbz	r4, 8004390 <OS_TickTask+0x90>
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
#endif
                break;
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 8004364:	88b3      	ldrh	r3, [r6, #4]
        while (p_tcb->TickRemain == 0u) {
 8004366:	6d22      	ldr	r2, [r4, #80]	; 0x50
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 8004368:	f8c4 8018 	str.w	r8, [r4, #24]
                p_list->NbrEntries--;
 800436c:	3b01      	subs	r3, #1
 800436e:	80b3      	strh	r3, [r6, #4]
        while (p_tcb->TickRemain == 0u) {
 8004370:	b97a      	cbnz	r2, 8004392 <OS_TickTask+0x92>
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
 8004372:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
            nbr_updated++;											    /* Keep track of the number of TCBs updated          */
 8004376:	3501      	adds	r5, #1
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
 8004378:	2b01      	cmp	r3, #1
            nbr_updated++;											    /* Keep track of the number of TCBs updated          */
 800437a:	b2ad      	uxth	r5, r5
            if (p_tcb->TaskState == OS_TASK_STATE_DLY) {
 800437c:	d1ea      	bne.n	8004354 <OS_TickTask+0x54>
                p_tcb->TaskState = OS_TASK_STATE_RDY;
 800437e:	f884 8036 	strb.w	r8, [r4, #54]	; 0x36
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 8004382:	4620      	mov	r0, r4
 8004384:	f7ff f8ee 	bl	8003564 <OS_RdyListInsert>
            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8004388:	6964      	ldr	r4, [r4, #20]
 800438a:	6034      	str	r4, [r6, #0]
            if (p_tcb == (OS_TCB *)0) {
 800438c:	2c00      	cmp	r4, #0
 800438e:	d1e9      	bne.n	8004364 <OS_TickTask+0x64>
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 8004390:	80b4      	strh	r4, [r6, #4]
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 8004392:	80f5      	strh	r5, [r6, #6]
#endif
    ts_delta_dly       = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 8004394:	f7fe fb1e 	bl	80029d4 <CPU_TS_TmrRd>
 8004398:	9003      	str	r0, [sp, #12]
    OS_CRITICAL_EXIT();
 800439a:	4638      	mov	r0, r7
 800439c:	f7fb ff28 	bl	80001f0 <CPU_SR_Restore>
#endif
    CPU_SR_ALLOC();

                                                              
                                                                        
    OS_CRITICAL_ENTER();                                                /* ======= UPDATE TASKS WAITING WITH TIMEOUT ======= */
 80043a0:	f7fb ff22 	bl	80001e8 <CPU_SR_Save>
 80043a4:	9001      	str	r0, [sp, #4]
    ts_start    = OS_TS_GET();
 80043a6:	f7fe fb15 	bl	80029d4 <CPU_TS_TmrRd>
#if OS_CFG_DBG_EN > 0u
    nbr_updated = (OS_OBJ_QTY)0u;
#endif
    p_list      = &OSTickListTimeout;
    p_tcb       = p_list->TCB_Ptr;                                  
 80043aa:	f8db 5000 	ldr.w	r5, [fp]
    ts_start    = OS_TS_GET();
 80043ae:	9002      	str	r0, [sp, #8]
    if (p_tcb != (OS_TCB *)0) {
 80043b0:	2d00      	cmp	r5, #0
 80043b2:	d049      	beq.n	8004448 <OS_TickTask+0x148>
        p_tcb->TickRemain--;
 80043b4:	6d2c      	ldr	r4, [r5, #80]	; 0x50
 80043b6:	3c01      	subs	r4, #1
 80043b8:	652c      	str	r4, [r5, #80]	; 0x50
        while (p_tcb->TickRemain == 0u) {
 80043ba:	2c00      	cmp	r4, #0
 80043bc:	d144      	bne.n	8004448 <OS_TickTask+0x148>
            } else if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {

                p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
            }
            p_tcb->PendStatus = OS_STATUS_PEND_TIMEOUT;                 /* Indicate pend timed out                           */
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */
 80043be:	f44f 7740 	mov.w	r7, #768	; 0x300
 80043c2:	e020      	b.n	8004406 <OS_TickTask+0x106>
            } else if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED) {
 80043c4:	2b07      	cmp	r3, #7
                p_tcb->TaskState  = OS_TASK_STATE_SUSPENDED;
 80043c6:	bf04      	itt	eq
 80043c8:	2304      	moveq	r3, #4
 80043ca:	f885 3036 	strbeq.w	r3, [r5, #54]	; 0x36
            p_tcb->PendOn     = OS_TASK_PEND_ON_NOTHING;                /* Indicate no longer pending                        */
 80043ce:	86af      	strh	r7, [r5, #52]	; 0x34

#if OS_CFG_MUTEX_EN > 0u
            if(p_tcb_owner != (OS_TCB *)0) {
 80043d0:	f1b9 0f00 	cmp.w	r9, #0
 80043d4:	d009      	beq.n	80043ea <OS_TickTask+0xea>
                if ((p_tcb_owner->Prio != p_tcb_owner->BasePrio) &&
 80043d6:	f899 3037 	ldrb.w	r3, [r9, #55]	; 0x37
 80043da:	f899 2038 	ldrb.w	r2, [r9, #56]	; 0x38
 80043de:	429a      	cmp	r2, r3
 80043e0:	d003      	beq.n	80043ea <OS_TickTask+0xea>
 80043e2:	f895 2037 	ldrb.w	r2, [r5, #55]	; 0x37
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d045      	beq.n	8004476 <OS_TickTask+0x176>
                    }
                }
            }
#endif

            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 80043ea:	696d      	ldr	r5, [r5, #20]
 80043ec:	f8cb 5000 	str.w	r5, [fp]
            p_tcb           = p_list->TCB_Ptr;                          /* Get 'p_tcb' again for loop                        */
            if (p_tcb == (OS_TCB *)0) {
 80043f0:	2d00      	cmp	r5, #0
 80043f2:	d055      	beq.n	80044a0 <OS_TickTask+0x1a0>
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
#endif
                break;
            } else {
#if OS_CFG_DBG_EN > 0u
                p_list->NbrEntries--;
 80043f4:	f8bb 3004 	ldrh.w	r3, [fp, #4]
        while (p_tcb->TickRemain == 0u) {
 80043f8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
#endif
                p_tcb->TickPrevPtr = (OS_TCB *)0;
 80043fa:	f8c5 8018 	str.w	r8, [r5, #24]
                p_list->NbrEntries--;
 80043fe:	3b01      	subs	r3, #1
 8004400:	f8ab 3004 	strh.w	r3, [fp, #4]
        while (p_tcb->TickRemain == 0u) {
 8004404:	bb0a      	cbnz	r2, 800444a <OS_TickTask+0x14a>
            if (p_tcb->PendOn == OS_TASK_PEND_ON_MUTEX) {
 8004406:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
 800440a:	2b04      	cmp	r3, #4
                p_tcb_owner = ((OS_MUTEX *)p_tcb->PendDataTblPtr->PendObjPtr)->OwnerTCBPtr;
 800440c:	bf02      	ittt	eq
 800440e:	6b2b      	ldreq	r3, [r5, #48]	; 0x30
 8004410:	68db      	ldreq	r3, [r3, #12]
 8004412:	f8d3 9024 	ldreq.w	r9, [r3, #36]	; 0x24
            p_tcb->MsgPtr  = (void      *)0;
 8004416:	f8c5 8060 	str.w	r8, [r5, #96]	; 0x60
            p_tcb->MsgSize = (OS_MSG_SIZE)0u;
 800441a:	f8a5 8064 	strh.w	r8, [r5, #100]	; 0x64
            p_tcb_owner = (OS_TCB *)0;
 800441e:	bf18      	it	ne
 8004420:	f04f 0900 	movne.w	r9, #0
            p_tcb->TS      = OS_TS_GET();
 8004424:	f7fe fad6 	bl	80029d4 <CPU_TS_TmrRd>
 8004428:	64a8      	str	r0, [r5, #72]	; 0x48
            OS_PendListRemove(p_tcb);                                   /* Remove from wait list                             */
 800442a:	4628      	mov	r0, r5
 800442c:	f7fe ff1c 	bl	8003268 <OS_PendListRemove>
            if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8004430:	f895 3036 	ldrb.w	r3, [r5, #54]	; 0x36
            nbr_updated++;
 8004434:	3401      	adds	r4, #1
            if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 8004436:	2b03      	cmp	r3, #3
            nbr_updated++;
 8004438:	b2a4      	uxth	r4, r4
            if (p_tcb->TaskState == OS_TASK_STATE_PEND_TIMEOUT) {
 800443a:	d1c3      	bne.n	80043c4 <OS_TickTask+0xc4>
                OS_RdyListInsert(p_tcb);                                /* Insert the task in the ready list                 */
 800443c:	4628      	mov	r0, r5
 800443e:	f7ff f891 	bl	8003564 <OS_RdyListInsert>
                p_tcb->TaskState  = OS_TASK_STATE_RDY;
 8004442:	f885 8036 	strb.w	r8, [r5, #54]	; 0x36
 8004446:	e7c2      	b.n	80043ce <OS_TickTask+0xce>
    nbr_updated = (OS_OBJ_QTY)0u;
 8004448:	2400      	movs	r4, #0
 800444a:	9b03      	ldr	r3, [sp, #12]
            }
        }
    }
#if OS_CFG_DBG_EN > 0u
    p_list->NbrUpdated = nbr_updated;
 800444c:	f8ab 4006 	strh.w	r4, [fp, #6]
 8004450:	eba3 050a 	sub.w	r5, r3, sl
#endif
    ts_delta_timeout   = OS_TS_GET() - ts_start;                        /* Measure execution time of the update              */
 8004454:	f7fe fabe 	bl	80029d4 <CPU_TS_TmrRd>
 8004458:	4604      	mov	r4, r0
    OS_CRITICAL_EXIT();                                                 /* ------------------------------------------------- */
 800445a:	9801      	ldr	r0, [sp, #4]
 800445c:	f7fb fec8 	bl	80001f0 <CPU_SR_Restore>
            ts_delta         = ts_delta_dly + ts_delta_timeout; /* Compute total execution time of list updates         */
 8004460:	9b02      	ldr	r3, [sp, #8]
 8004462:	1aed      	subs	r5, r5, r3
            if (OSTickTaskTimeMax < ts_delta) {
 8004464:	4b13      	ldr	r3, [pc, #76]	; (80044b4 <OS_TickTask+0x1b4>)
 8004466:	681b      	ldr	r3, [r3, #0]
            ts_delta         = ts_delta_dly + ts_delta_timeout; /* Compute total execution time of list updates         */
 8004468:	442c      	add	r4, r5
            if (OSTickTaskTimeMax < ts_delta) {
 800446a:	42a3      	cmp	r3, r4
 800446c:	f4bf af50 	bcs.w	8004310 <OS_TickTask+0x10>
                OSTickTaskTimeMax = ts_delta;
 8004470:	4b10      	ldr	r3, [pc, #64]	; (80044b4 <OS_TickTask+0x1b4>)
 8004472:	601c      	str	r4, [r3, #0]
 8004474:	e74a      	b.n	800430c <OS_TickTask+0xc>
                    prio_new = OS_MutexGrpPrioFindHighest(p_tcb_owner);
 8004476:	4648      	mov	r0, r9
 8004478:	f7ff fba2 	bl	8003bc0 <OS_MutexGrpPrioFindHighest>
                    prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 800447c:	f899 1038 	ldrb.w	r1, [r9, #56]	; 0x38
                    if(prio_new != p_tcb_owner->Prio) {
 8004480:	f899 3037 	ldrb.w	r3, [r9, #55]	; 0x37
                    prio_new = prio_new > p_tcb_owner->BasePrio ? p_tcb_owner->BasePrio : prio_new;
 8004484:	4281      	cmp	r1, r0
 8004486:	bf28      	it	cs
 8004488:	4601      	movcs	r1, r0
 800448a:	b2c9      	uxtb	r1, r1
                    if(prio_new != p_tcb_owner->Prio) {
 800448c:	428b      	cmp	r3, r1
 800448e:	d0ac      	beq.n	80043ea <OS_TickTask+0xea>
                        OS_TaskChangePrio(p_tcb_owner, prio_new);
 8004490:	4648      	mov	r0, r9
 8004492:	f7ff fed5 	bl	8004240 <OS_TaskChangePrio>
            p_list->TCB_Ptr = p_tcb->TickNextPtr;
 8004496:	696d      	ldr	r5, [r5, #20]
 8004498:	f8cb 5000 	str.w	r5, [fp]
            if (p_tcb == (OS_TCB *)0) {
 800449c:	2d00      	cmp	r5, #0
 800449e:	d1a9      	bne.n	80043f4 <OS_TickTask+0xf4>
                p_list->NbrEntries = (OS_OBJ_QTY)0u;
 80044a0:	f8ab 5004 	strh.w	r5, [fp, #4]
 80044a4:	e7d1      	b.n	800444a <OS_TickTask+0x14a>
    nbr_updated = (OS_OBJ_QTY)0u;
 80044a6:	2500      	movs	r5, #0
 80044a8:	e773      	b.n	8004392 <OS_TickTask+0x92>
 80044aa:	bf00      	nop
 80044ac:	20003808 	.word	0x20003808
 80044b0:	200037e4 	.word	0x200037e4
 80044b4:	200037fc 	.word	0x200037fc
 80044b8:	20003810 	.word	0x20003810

080044bc <OS_TickTaskInit>:
{
 80044bc:	b530      	push	{r4, r5, lr}
    if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
 80044be:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <OS_TickTaskInit+0x74>)
    OSTickCtr                    = (OS_TICK)0u;                         /* Clear the tick counter                            */
 80044c0:	4d1c      	ldr	r5, [pc, #112]	; (8004534 <OS_TickTaskInit+0x78>)
    if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
 80044c2:	681c      	ldr	r4, [r3, #0]
    OSTickListDly.TCB_Ptr        = (OS_TCB   *)0;
 80044c4:	491c      	ldr	r1, [pc, #112]	; (8004538 <OS_TickTaskInit+0x7c>)
    OSTickListTimeout.TCB_Ptr    = (OS_TCB   *)0;
 80044c6:	4a1d      	ldr	r2, [pc, #116]	; (800453c <OS_TickTaskInit+0x80>)
    OSTickCtr                    = (OS_TICK)0u;                         /* Clear the tick counter                            */
 80044c8:	2300      	movs	r3, #0
{
 80044ca:	b08b      	sub	sp, #44	; 0x2c
    OSTickCtr                    = (OS_TICK)0u;                         /* Clear the tick counter                            */
 80044cc:	602b      	str	r3, [r5, #0]
    OSTickListDly.NbrEntries     = (OS_OBJ_QTY)0;
 80044ce:	e9c1 3300 	strd	r3, r3, [r1]
    OSTickListTimeout.NbrEntries = (OS_OBJ_QTY)0;
 80044d2:	e9c2 3300 	strd	r3, r3, [r2]
    if (OSCfg_TickTaskStkBasePtr == (CPU_STK *)0) {
 80044d6:	b19c      	cbz	r4, 8004500 <OS_TickTaskInit+0x44>
    if (OSCfg_TickTaskStkSize < OSCfg_StkSizeMin) {
 80044d8:	4a19      	ldr	r2, [pc, #100]	; (8004540 <OS_TickTaskInit+0x84>)
 80044da:	491a      	ldr	r1, [pc, #104]	; (8004544 <OS_TickTaskInit+0x88>)
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	6809      	ldr	r1, [r1, #0]
 80044e0:	428a      	cmp	r2, r1
 80044e2:	d308      	bcc.n	80044f6 <OS_TickTaskInit+0x3a>
    if (OSCfg_TickTaskPrio >= (OS_CFG_PRIO_MAX - 1u)) {                 /* Only one task at the 'Idle Task' priority         */
 80044e4:	4918      	ldr	r1, [pc, #96]	; (8004548 <OS_TickTaskInit+0x8c>)
 80044e6:	7809      	ldrb	r1, [r1, #0]
 80044e8:	291e      	cmp	r1, #30
 80044ea:	d90e      	bls.n	800450a <OS_TickTaskInit+0x4e>
       *p_err = OS_ERR_TICK_PRIO_INVALID;
 80044ec:	f247 2311 	movw	r3, #29201	; 0x7211
 80044f0:	8003      	strh	r3, [r0, #0]
}
 80044f2:	b00b      	add	sp, #44	; 0x2c
 80044f4:	bd30      	pop	{r4, r5, pc}
       *p_err = OS_ERR_TICK_STK_SIZE_INVALID;
 80044f6:	f247 2313 	movw	r3, #29203	; 0x7213
 80044fa:	8003      	strh	r3, [r0, #0]
}
 80044fc:	b00b      	add	sp, #44	; 0x2c
 80044fe:	bd30      	pop	{r4, r5, pc}
       *p_err = OS_ERR_TICK_STK_INVALID;
 8004500:	f247 2312 	movw	r3, #29202	; 0x7212
 8004504:	8003      	strh	r3, [r0, #0]
}
 8004506:	b00b      	add	sp, #44	; 0x2c
 8004508:	bd30      	pop	{r4, r5, pc}
    OSTaskCreate((OS_TCB     *)&OSTickTaskTCB,
 800450a:	4d10      	ldr	r5, [pc, #64]	; (800454c <OS_TickTaskInit+0x90>)
 800450c:	9008      	str	r0, [sp, #32]
 800450e:	682d      	ldr	r5, [r5, #0]
 8004510:	9203      	str	r2, [sp, #12]
 8004512:	200b      	movs	r0, #11
 8004514:	e9cd 1400 	strd	r1, r4, [sp]
 8004518:	9007      	str	r0, [sp, #28]
 800451a:	9306      	str	r3, [sp, #24]
 800451c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004520:	9502      	str	r5, [sp, #8]
 8004522:	4a0b      	ldr	r2, [pc, #44]	; (8004550 <OS_TickTaskInit+0x94>)
 8004524:	490b      	ldr	r1, [pc, #44]	; (8004554 <OS_TickTaskInit+0x98>)
 8004526:	480c      	ldr	r0, [pc, #48]	; (8004558 <OS_TickTaskInit+0x9c>)
 8004528:	f7ff fbba 	bl	8003ca0 <OSTaskCreate>
}
 800452c:	b00b      	add	sp, #44	; 0x2c
 800452e:	bd30      	pop	{r4, r5, pc}
 8004530:	0800a6c4 	.word	0x0800a6c4
 8004534:	200037e4 	.word	0x200037e4
 8004538:	20003808 	.word	0x20003808
 800453c:	20003810 	.word	0x20003810
 8004540:	0800a6cc 	.word	0x0800a6cc
 8004544:	0800a6b8 	.word	0x0800a6b8
 8004548:	0800a6c0 	.word	0x0800a6c0
 800454c:	0800a6c8 	.word	0x0800a6c8
 8004550:	08004301 	.word	0x08004301
 8004554:	0800a704 	.word	0x0800a704
 8004558:	20003628 	.word	0x20003628

0800455c <OS_TickListInsert>:
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 800455c:	6803      	ldr	r3, [r0, #0]
{
 800455e:	b470      	push	{r4, r5, r6}
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 8004560:	b90b      	cbnz	r3, 8004566 <OS_TickListInsert+0xa>
 8004562:	e022      	b.n	80045aa <OS_TickListInsert+0x4e>
 8004564:	462b      	mov	r3, r5
            if (remain <= p_tcb2->TickRemain) {
 8004566:	6d1c      	ldr	r4, [r3, #80]	; 0x50
 8004568:	4294      	cmp	r4, r2
 800456a:	d20d      	bcs.n	8004588 <OS_TickListInsert+0x2c>
                p_tcb2  = p_tcb2->TickNextPtr;
 800456c:	695d      	ldr	r5, [r3, #20]
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
 800456e:	1b12      	subs	r2, r2, r4
        while (p_tcb2 != (OS_TCB *)0) {
 8004570:	2d00      	cmp	r5, #0
 8004572:	d1f7      	bne.n	8004564 <OS_TickListInsert+0x8>
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8004574:	8884      	ldrh	r4, [r0, #4]
        p_tcb->TickRemain   = remain;                       
 8004576:	650a      	str	r2, [r1, #80]	; 0x50
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8004578:	1c62      	adds	r2, r4, #1
        p_tcb->TickNextPtr  = (OS_TCB *)0;    
 800457a:	e9c1 5305 	strd	r5, r3, [r1, #20]
        p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;                   /*           Link the list to the TCB                */
 800457e:	61c8      	str	r0, [r1, #28]
}
 8004580:	bc70      	pop	{r4, r5, r6}
        p_tcb1->TickNextPtr = p_tcb;
 8004582:	6159      	str	r1, [r3, #20]
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 8004584:	8082      	strh	r2, [r0, #4]
}
 8004586:	4770      	bx	lr
 8004588:	8884      	ldrh	r4, [r0, #4]
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 800458a:	699d      	ldr	r5, [r3, #24]
                    p_tcb->TickRemain   = remain;                       /*      Yes, Store remaining time                    */                                          
 800458c:	650a      	str	r2, [r1, #80]	; 0x50
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 800458e:	6d1e      	ldr	r6, [r3, #80]	; 0x50
                    p_tcb->TickPrevPtr  = (OS_TCB *)0;
 8004590:	618d      	str	r5, [r1, #24]
 8004592:	3401      	adds	r4, #1
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 8004594:	1ab2      	subs	r2, r6, r2
                    p_tcb->TickNextPtr  = p_tcb2;    
 8004596:	614b      	str	r3, [r1, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           Link TCB to this list                   */
 8004598:	61c8      	str	r0, [r1, #28]
 800459a:	b2a4      	uxth	r4, r4
                    p_tcb2->TickPrevPtr = p_tcb;
 800459c:	6199      	str	r1, [r3, #24]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 800459e:	651a      	str	r2, [r3, #80]	; 0x50
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 80045a0:	b165      	cbz	r5, 80045bc <OS_TickListInsert+0x60>
                    p_tcb1->TickNextPtr = p_tcb;
 80045a2:	6169      	str	r1, [r5, #20]
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 80045a4:	8084      	strh	r4, [r0, #4]
}
 80045a6:	bc70      	pop	{r4, r5, r6}
 80045a8:	4770      	bx	lr
        p_list->NbrEntries = 1u;                                        /*      List contains 1 entry                        */
 80045aa:	2401      	movs	r4, #1
        p_tcb->TickRemain  = time;                                      /* Yes, Store time in TCB                            */
 80045ac:	650a      	str	r2, [r1, #80]	; 0x50
        p_tcb->TickPrevPtr = (OS_TCB *)0;
 80045ae:	e9c1 3305 	strd	r3, r3, [r1, #20]
        p_tcb->TickListPtr = (OS_TICK_LIST *)p_list;                    /*      Link to this list                            */
 80045b2:	61c8      	str	r0, [r1, #28]
        p_list->NbrEntries = 1u;                                        /*      List contains 1 entry                        */
 80045b4:	8084      	strh	r4, [r0, #4]
        p_list->TCB_Ptr    = p_tcb;                                     /*      Point to TCB of task to place in the list    */
 80045b6:	6001      	str	r1, [r0, #0]
}
 80045b8:	bc70      	pop	{r4, r5, r6}
 80045ba:	4770      	bx	lr
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 80045bc:	8084      	strh	r4, [r0, #4]
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
 80045be:	6001      	str	r1, [r0, #0]
}
 80045c0:	bc70      	pop	{r4, r5, r6}
 80045c2:	4770      	bx	lr

080045c4 <OS_TickListInsertDly>:
    if (opt == OS_OPT_TIME_MATCH) {                                     /* MATCH to absolute OSTickCtr value mode            */
 80045c4:	2a04      	cmp	r2, #4
{
 80045c6:	b4f0      	push	{r4, r5, r6, r7}
    if (opt == OS_OPT_TIME_MATCH) {                                     /* MATCH to absolute OSTickCtr value mode            */
 80045c8:	d02e      	beq.n	8004628 <OS_TickListInsertDly+0x64>
    } else if (opt == OS_OPT_TIME_PERIODIC) {                           /* PERIODIC mode.                                    */
 80045ca:	2a08      	cmp	r2, #8
 80045cc:	d01c      	beq.n	8004608 <OS_TickListInsertDly+0x44>
    } else if (time > (OS_TICK)0u) {                                    /* RELATIVE time delay mode                          */
 80045ce:	2900      	cmp	r1, #0
 80045d0:	d031      	beq.n	8004636 <OS_TickListInsertDly+0x72>
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 80045d2:	4e32      	ldr	r6, [pc, #200]	; (800469c <OS_TickListInsertDly+0xd8>)
 80045d4:	6832      	ldr	r2, [r6, #0]
    p_tcb->TaskState = OS_TASK_STATE_DLY;
 80045d6:	2401      	movs	r4, #1
 80045d8:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
    if (p_list->TCB_Ptr == (OS_TCB *)0) {                               /* Is the list empty?                                */
 80045dc:	b90a      	cbnz	r2, 80045e2 <OS_TickListInsertDly+0x1e>
 80045de:	e049      	b.n	8004674 <OS_TickListInsertDly+0xb0>
        while (p_tcb2 != (OS_TCB *)0) {
 80045e0:	462a      	mov	r2, r5
            if (remain <= p_tcb2->TickRemain) {
 80045e2:	6d14      	ldr	r4, [r2, #80]	; 0x50
 80045e4:	428c      	cmp	r4, r1
 80045e6:	d22d      	bcs.n	8004644 <OS_TickListInsertDly+0x80>
                p_tcb2  = p_tcb2->TickNextPtr;
 80045e8:	6955      	ldr	r5, [r2, #20]
                remain -= p_tcb2->TickRemain;                           /*           Point to the next TCB in the list       */
 80045ea:	1b09      	subs	r1, r1, r4
        while (p_tcb2 != (OS_TCB *)0) {
 80045ec:	2d00      	cmp	r5, #0
 80045ee:	d1f7      	bne.n	80045e0 <OS_TickListInsertDly+0x1c>
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 80045f0:	88b4      	ldrh	r4, [r6, #4]
        p_tcb->TickRemain   = remain;                       
 80045f2:	6501      	str	r1, [r0, #80]	; 0x50
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 80045f4:	1c61      	adds	r1, r4, #1
        p_tcb->TickNextPtr  = (OS_TCB *)0;    
 80045f6:	e9c0 5205 	strd	r5, r2, [r0, #20]
        p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;                   /*           Link the list to the TCB                */
 80045fa:	61c6      	str	r6, [r0, #28]
        p_list->NbrEntries++;                                           /*           List contains an extra entry            */
 80045fc:	80b1      	strh	r1, [r6, #4]
        p_tcb1->TickNextPtr = p_tcb;
 80045fe:	6150      	str	r0, [r2, #20]
   *p_err = OS_ERR_NONE;
 8004600:	2200      	movs	r2, #0
 8004602:	801a      	strh	r2, [r3, #0]
}
 8004604:	bcf0      	pop	{r4, r5, r6, r7}
 8004606:	4770      	bx	lr
        if ((OSTickCtr - p_tcb->TickCtrPrev) > time) {
 8004608:	4a25      	ldr	r2, [pc, #148]	; (80046a0 <OS_TickListInsertDly+0xdc>)
 800460a:	6d45      	ldr	r5, [r0, #84]	; 0x54
 800460c:	6812      	ldr	r2, [r2, #0]
 800460e:	1b54      	subs	r4, r2, r5
 8004610:	428c      	cmp	r4, r1
 8004612:	d827      	bhi.n	8004664 <OS_TickListInsertDly+0xa0>
            remain = time - (OSTickCtr - p_tcb->TickCtrPrev);
 8004614:	1aaa      	subs	r2, r5, r2
 8004616:	440a      	add	r2, r1
            if ((remain > OS_TICK_TH_RDY) ||                            /* If delay time has already passed, ...             */
 8004618:	1e56      	subs	r6, r2, #1
 800461a:	f116 1f01 	cmn.w	r6, #65537	; 0x10001
 800461e:	d830      	bhi.n	8004682 <OS_TickListInsertDly+0xbe>
            p_tcb->TickCtrPrev += time;
 8004620:	4429      	add	r1, r5
 8004622:	6541      	str	r1, [r0, #84]	; 0x54
 8004624:	4611      	mov	r1, r2
 8004626:	e7d4      	b.n	80045d2 <OS_TickListInsertDly+0xe>
        remain = time - OSTickCtr;
 8004628:	4a1d      	ldr	r2, [pc, #116]	; (80046a0 <OS_TickListInsertDly+0xdc>)
 800462a:	6812      	ldr	r2, [r2, #0]
 800462c:	1a89      	subs	r1, r1, r2
        if ((remain > OS_TICK_TH_RDY) ||                                /* If delay already occurred, ...                    */
 800462e:	1e4a      	subs	r2, r1, #1
 8004630:	f112 1f01 	cmn.w	r2, #65537	; 0x10001
 8004634:	d9cd      	bls.n	80045d2 <OS_TickListInsertDly+0xe>
            p_tcb->TickRemain = (OS_TICK)0u;
 8004636:	2100      	movs	r1, #0
           *p_err             =  OS_ERR_TIME_ZERO_DLY;                  /* ... do NOT delay.                                 */
 8004638:	f247 227e 	movw	r2, #29310	; 0x727e
            p_tcb->TickRemain = (OS_TICK)0u;
 800463c:	6501      	str	r1, [r0, #80]	; 0x50
}
 800463e:	bcf0      	pop	{r4, r5, r6, r7}
           *p_err             =  OS_ERR_TIME_ZERO_DLY;                  /* ... do NOT delay.                                 */
 8004640:	801a      	strh	r2, [r3, #0]
}
 8004642:	4770      	bx	lr
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 8004644:	6995      	ldr	r5, [r2, #24]
 8004646:	88b4      	ldrh	r4, [r6, #4]
                    p_tcb->TickRemain   = remain;                       /*      Yes, Store remaining time                    */                                          
 8004648:	6501      	str	r1, [r0, #80]	; 0x50
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 800464a:	6d17      	ldr	r7, [r2, #80]	; 0x50
                    p_tcb->TickPrevPtr  = (OS_TCB *)0;
 800464c:	6185      	str	r5, [r0, #24]
 800464e:	3401      	adds	r4, #1
 8004650:	b2a4      	uxth	r4, r4
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 8004652:	1a79      	subs	r1, r7, r1
                    p_tcb->TickNextPtr  = p_tcb2;    
 8004654:	6142      	str	r2, [r0, #20]
                    p_tcb->TickListPtr  = (OS_TICK_LIST *)p_list;       /*           Link TCB to this list                   */
 8004656:	61c6      	str	r6, [r0, #28]
                if (p_tcb2->TickPrevPtr == (OS_TCB *)0) {               /*      Insert before the first entry in the list?   */
 8004658:	b13d      	cbz	r5, 800466a <OS_TickListInsertDly+0xa6>
                    p_tcb2->TickPrevPtr = p_tcb;
 800465a:	6190      	str	r0, [r2, #24]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 800465c:	6511      	str	r1, [r2, #80]	; 0x50
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 800465e:	80b4      	strh	r4, [r6, #4]
                    p_tcb1->TickNextPtr = p_tcb;
 8004660:	6168      	str	r0, [r5, #20]
 8004662:	e7cd      	b.n	8004600 <OS_TickListInsertDly+0x3c>
            p_tcb->TickCtrPrev = OSTickCtr + time;
 8004664:	440a      	add	r2, r1
 8004666:	6542      	str	r2, [r0, #84]	; 0x54
 8004668:	e7b3      	b.n	80045d2 <OS_TickListInsertDly+0xe>
                    p_list->TCB_Ptr     = p_tcb;                        /*           Add TCB to the list                     */
 800466a:	6030      	str	r0, [r6, #0]
                    p_tcb2->TickPrevPtr = p_tcb;
 800466c:	6190      	str	r0, [r2, #24]
                    p_list->NbrEntries++;                               /*           List contains an extra entry            */
 800466e:	80b4      	strh	r4, [r6, #4]
                    p_tcb2->TickRemain -= remain;                       /*           Reduce time of next entry in the list   */
 8004670:	6511      	str	r1, [r2, #80]	; 0x50
 8004672:	e7c5      	b.n	8004600 <OS_TickListInsertDly+0x3c>
        p_tcb->TickRemain  = time;                                      /* Yes, Store time in TCB                            */
 8004674:	6501      	str	r1, [r0, #80]	; 0x50
        p_tcb->TickPrevPtr = (OS_TCB *)0;
 8004676:	e9c0 2205 	strd	r2, r2, [r0, #20]
        p_tcb->TickListPtr = (OS_TICK_LIST *)p_list;                    /*      Link to this list                            */
 800467a:	61c6      	str	r6, [r0, #28]
        p_list->TCB_Ptr    = p_tcb;                                     /*      Point to TCB of task to place in the list    */
 800467c:	6030      	str	r0, [r6, #0]
        p_list->NbrEntries = 1u;                                        /*      List contains 1 entry                        */
 800467e:	80b4      	strh	r4, [r6, #4]
 8004680:	e7be      	b.n	8004600 <OS_TickListInsertDly+0x3c>
                p_tcb->TickCtrPrev += time + time * ((OSTickCtr - p_tcb->TickCtrPrev) / time); /* Try to recover the period  */
 8004682:	fbb4 f4f1 	udiv	r4, r4, r1
 8004686:	fb04 1101 	mla	r1, r4, r1, r1
 800468a:	4429      	add	r1, r5
                p_tcb->TickRemain   = (OS_TICK)0u;
 800468c:	2400      	movs	r4, #0
               *p_err               =  OS_ERR_TIME_ZERO_DLY;            /* ... do NOT delay.                                 */
 800468e:	f247 227e 	movw	r2, #29310	; 0x727e
                p_tcb->TickRemain   = (OS_TICK)0u;
 8004692:	e9c0 4114 	strd	r4, r1, [r0, #80]	; 0x50
               *p_err               =  OS_ERR_TIME_ZERO_DLY;            /* ... do NOT delay.                                 */
 8004696:	801a      	strh	r2, [r3, #0]
                return;
 8004698:	e7b4      	b.n	8004604 <OS_TickListInsertDly+0x40>
 800469a:	bf00      	nop
 800469c:	20003808 	.word	0x20003808
 80046a0:	200037e4 	.word	0x200037e4

080046a4 <OS_TickListRemove>:
    p_list = (OS_TICK_LIST *)p_tcb->TickListPtr;
 80046a4:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
{
 80046a8:	b470      	push	{r4, r5, r6}
    p_tcb2  = p_tcb->TickNextPtr;
 80046aa:	6943      	ldr	r3, [r0, #20]
    if (p_tcb1 == (OS_TCB *)0) {
 80046ac:	b182      	cbz	r2, 80046d0 <OS_TickListRemove+0x2c>
        p_tcb1->TickNextPtr = p_tcb2;    
 80046ae:	6153      	str	r3, [r2, #20]
        if (p_tcb2 != (OS_TCB *)0) {
 80046b0:	b123      	cbz	r3, 80046bc <OS_TickListRemove+0x18>
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta list              */
 80046b2:	6d05      	ldr	r5, [r0, #80]	; 0x50
 80046b4:	6d1c      	ldr	r4, [r3, #80]	; 0x50
            p_tcb2->TickPrevPtr = p_tcb1;
 80046b6:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta list              */
 80046b8:	442c      	add	r4, r5
 80046ba:	651c      	str	r4, [r3, #80]	; 0x50
        p_list->NbrEntries--;
 80046bc:	888a      	ldrh	r2, [r1, #4]
        p_tcb->TickPrevPtr  = (OS_TCB       *)0;
 80046be:	2300      	movs	r3, #0
        p_list->NbrEntries--;
 80046c0:	3a01      	subs	r2, #1
        p_tcb->TickPrevPtr  = (OS_TCB       *)0;
 80046c2:	6183      	str	r3, [r0, #24]
        p_list->NbrEntries--;
 80046c4:	808a      	strh	r2, [r1, #4]
        p_tcb->TickNextPtr  = (OS_TCB       *)0;
 80046c6:	6143      	str	r3, [r0, #20]
        p_tcb->TickRemain   = (OS_TICK       )0u;
 80046c8:	6503      	str	r3, [r0, #80]	; 0x50
        p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 80046ca:	61c3      	str	r3, [r0, #28]
}
 80046cc:	bc70      	pop	{r4, r5, r6}
 80046ce:	4770      	bx	lr
        if (p_tcb2 == (OS_TCB *)0) {                                    /* Remove ONLY entry in the list?                    */
 80046d0:	b16b      	cbz	r3, 80046ee <OS_TickListRemove+0x4a>
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta                   */
 80046d2:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 80046d4:	6d06      	ldr	r6, [r0, #80]	; 0x50
            p_list->NbrEntries--;
 80046d6:	888c      	ldrh	r4, [r1, #4]
            p_tcb2->TickPrevPtr = (OS_TCB       *)0;
 80046d8:	619a      	str	r2, [r3, #24]
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta                   */
 80046da:	4435      	add	r5, r6
            p_list->NbrEntries--;
 80046dc:	3c01      	subs	r4, #1
            p_tcb2->TickRemain += p_tcb->TickRemain;                    /* Add back the ticks to the delta                   */
 80046de:	651d      	str	r5, [r3, #80]	; 0x50
            p_list->NbrEntries--;
 80046e0:	808c      	strh	r4, [r1, #4]
            p_list->TCB_Ptr    = p_tcb2;
 80046e2:	600b      	str	r3, [r1, #0]
}
 80046e4:	bc70      	pop	{r4, r5, r6}
            p_tcb->TickNextPtr  = (OS_TCB       *)0;
 80046e6:	6142      	str	r2, [r0, #20]
            p_tcb->TickRemain   = (OS_TICK       )0u;
 80046e8:	6502      	str	r2, [r0, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 80046ea:	61c2      	str	r2, [r0, #28]
}
 80046ec:	4770      	bx	lr
            p_list->TCB_Ptr    = (OS_TCB        *)0;
 80046ee:	600b      	str	r3, [r1, #0]
            p_list->NbrEntries = (OS_OBJ_QTY    )0u;
 80046f0:	808b      	strh	r3, [r1, #4]
            p_tcb->TickRemain   = (OS_TICK       )0u;
 80046f2:	6503      	str	r3, [r0, #80]	; 0x50
            p_tcb->TickListPtr  = (OS_TICK_LIST *)0;
 80046f4:	61c3      	str	r3, [r0, #28]
 80046f6:	e7e9      	b.n	80046cc <OS_TickListRemove+0x28>

080046f8 <OSTimeDly>:
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 80046f8:	4b20      	ldr	r3, [pc, #128]	; (800477c <OSTimeDly+0x84>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	b97b      	cbnz	r3, 800471e <OSTimeDly+0x26>
       *p_err = OS_ERR_TIME_DLY_ISR;
        return;
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 80046fe:	4b20      	ldr	r3, [pc, #128]	; (8004780 <OSTimeDly+0x88>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	b943      	cbnz	r3, 8004716 <OSTimeDly+0x1e>
       *p_err = OS_ERR_SCHED_LOCKED;
        return;
    }

    switch (opt) {
 8004704:	2908      	cmp	r1, #8
 8004706:	d82b      	bhi.n	8004760 <OSTimeDly+0x68>
 8004708:	e8df f001 	tbb	[pc, r1]
 800470c:	2a0d2a0d 	.word	0x2a0d2a0d
 8004710:	2a2a2a0e 	.word	0x2a2a2a0e
 8004714:	0d          	.byte	0x0d
 8004715:	00          	.byte	0x00
       *p_err = OS_ERR_SCHED_LOCKED;
 8004716:	f646 5363 	movw	r3, #28003	; 0x6d63
 800471a:	8013      	strh	r3, [r2, #0]
        return;
 800471c:	4770      	bx	lr
       *p_err = OS_ERR_TIME_DLY_ISR;
 800471e:	f247 2375 	movw	r3, #29301	; 0x7275
 8004722:	8013      	strh	r3, [r2, #0]
        return;
 8004724:	4770      	bx	lr
        case OS_OPT_TIME_DLY:
        case OS_OPT_TIME_TIMEOUT:
        case OS_OPT_TIME_PERIODIC:
             if (dly == (OS_TICK)0u) {                      /* 0 means no delay!                                      */
 8004726:	b320      	cbz	r0, 8004772 <OSTimeDly+0x7a>
{
 8004728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800472c:	4614      	mov	r4, r2
 800472e:	460d      	mov	r5, r1
 8004730:	4606      	mov	r6, r0
        default:
            *p_err = OS_ERR_OPT_INVALID;
             return;
    }

    OS_CRITICAL_ENTER();
 8004732:	f7fb fd59 	bl	80001e8 <CPU_SR_Save>
    OS_TickListInsertDly(OSTCBCurPtr,
 8004736:	4f13      	ldr	r7, [pc, #76]	; (8004784 <OSTimeDly+0x8c>)
 8004738:	462a      	mov	r2, r5
    OS_CRITICAL_ENTER();
 800473a:	4680      	mov	r8, r0
    OS_TickListInsertDly(OSTCBCurPtr,
 800473c:	4631      	mov	r1, r6
 800473e:	6838      	ldr	r0, [r7, #0]
 8004740:	4623      	mov	r3, r4
 8004742:	f7ff ff3f 	bl	80045c4 <OS_TickListInsertDly>
                         dly,
                         opt,
                         p_err);
    if (*p_err != OS_ERR_NONE) {
 8004746:	8825      	ldrh	r5, [r4, #0]
 8004748:	b975      	cbnz	r5, 8004768 <OSTimeDly+0x70>
         return;
    }
#if (defined(TRACE_CFG_EN) && (TRACE_CFG_EN > 0u))
    TRACE_OS_TASK_DLY(dly);                                 /* Record the event.                                      */
#endif
    OS_RdyListRemove(OSTCBCurPtr);                          /* Remove current task from ready list                    */
 800474a:	6838      	ldr	r0, [r7, #0]
 800474c:	f7fe ff84 	bl	8003658 <OS_RdyListRemove>
    OS_CRITICAL_EXIT_NO_SCHED();
 8004750:	4640      	mov	r0, r8
 8004752:	f7fb fd4d 	bl	80001f0 <CPU_SR_Restore>
    OSSched();                                              /* Find next task to run!                                 */
 8004756:	f7fe fb4b 	bl	8002df0 <OSSched>
   *p_err = OS_ERR_NONE;
 800475a:	8025      	strh	r5, [r4, #0]
}
 800475c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            *p_err = OS_ERR_OPT_INVALID;
 8004760:	f645 6325 	movw	r3, #24101	; 0x5e25
 8004764:	8013      	strh	r3, [r2, #0]
 8004766:	4770      	bx	lr
         OS_CRITICAL_EXIT_NO_SCHED();
 8004768:	4640      	mov	r0, r8
}
 800476a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
         OS_CRITICAL_EXIT_NO_SCHED();
 800476e:	f7fb bd3f 	b.w	80001f0 <CPU_SR_Restore>
                *p_err = OS_ERR_TIME_ZERO_DLY;
 8004772:	f247 237e 	movw	r3, #29310	; 0x727e
 8004776:	8013      	strh	r3, [r2, #0]
                 return;
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	20003704 	.word	0x20003704
 8004780:	20003498 	.word	0x20003498
 8004784:	200036ec 	.word	0x200036ec

08004788 <OSTimeDlyHMSM>:
                     CPU_INT16U   minutes,
                     CPU_INT16U   seconds,
                     CPU_INT32U   milli,
                     OS_OPT       opt,
                     OS_ERR      *p_err)
{
 8004788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        return;
    }
#endif

#if OS_CFG_CALLED_FROM_ISR_CHK_EN > 0u
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 800478c:	4c43      	ldr	r4, [pc, #268]	; (800489c <OSTimeDlyHMSM+0x114>)
{
 800478e:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 8004792:	7825      	ldrb	r5, [r4, #0]
{
 8004794:	9c07      	ldr	r4, [sp, #28]
    if (OSIntNestingCtr > (OS_NESTING_CTR)0u) {             /* Not allowed to call from an ISR                        */
 8004796:	b995      	cbnz	r5, 80047be <OSTimeDlyHMSM+0x36>
       *p_err = OS_ERR_TIME_DLY_ISR;
        return;
    }
#endif

    if (OSSchedLockNestingCtr > (OS_NESTING_CTR)0u) {       /* Can't delay when the scheduler is locked               */
 8004798:	4d41      	ldr	r5, [pc, #260]	; (80048a0 <OSTimeDlyHMSM+0x118>)
 800479a:	782d      	ldrb	r5, [r5, #0]
 800479c:	b955      	cbnz	r5, 80047b4 <OSTimeDlyHMSM+0x2c>
       *p_err = OS_ERR_SCHED_LOCKED;
        return;
    }

    opt_time = opt & OS_OPT_TIME_MASK;                      /* Retrieve time options only.                            */
 800479e:	f006 070e 	and.w	r7, r6, #14
    switch (opt_time) {
 80047a2:	2f08      	cmp	r7, #8
 80047a4:	d84a      	bhi.n	800483c <OSTimeDlyHMSM+0xb4>
 80047a6:	e8df f007 	tbb	[pc, r7]
 80047aa:	490f      	.short	0x490f
 80047ac:	4911490f 	.word	0x4911490f
 80047b0:	4949      	.short	0x4949
 80047b2:	0f          	.byte	0x0f
 80047b3:	00          	.byte	0x00
       *p_err = OS_ERR_SCHED_LOCKED;
 80047b4:	f646 5363 	movw	r3, #28003	; 0x6d63
 80047b8:	8023      	strh	r3, [r4, #0]
        OSSched();                                          /* Find next task to run!                                 */
       *p_err = OS_ERR_NONE;
    } else {
       *p_err = OS_ERR_TIME_ZERO_DLY;
    }
}
 80047ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
       *p_err = OS_ERR_TIME_DLY_ISR;
 80047be:	f247 2375 	movw	r3, #29301	; 0x7275
 80047c2:	8023      	strh	r3, [r4, #0]
}
 80047c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
             if (milli == (CPU_INT32U)0u) {                 /* Make sure we didn't specify a 0 delay                  */
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d047      	beq.n	800485c <OSTimeDlyHMSM+0xd4>
    opt_invalid = DEF_BIT_IS_SET_ANY(opt, ~OS_OPT_TIME_OPTS_MASK);
 80047cc:	f026 051e 	bic.w	r5, r6, #30
    if (opt_invalid == DEF_YES) {
 80047d0:	bba5      	cbnz	r5, 800483c <OSTimeDlyHMSM+0xb4>
    if (opt_non_strict != DEF_YES) {
 80047d2:	06f5      	lsls	r5, r6, #27
 80047d4:	d437      	bmi.n	8004846 <OSTimeDlyHMSM+0xbe>
         if (milli   > (CPU_INT32U)999u) {
 80047d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047da:	d24d      	bcs.n	8004878 <OSTimeDlyHMSM+0xf0>
         if (seconds > (CPU_INT16U)59u) {
 80047dc:	2a3b      	cmp	r2, #59	; 0x3b
 80047de:	d84f      	bhi.n	8004880 <OSTimeDlyHMSM+0xf8>
         if (minutes > (CPU_INT16U)59u) {
 80047e0:	293b      	cmp	r1, #59	; 0x3b
 80047e2:	d845      	bhi.n	8004870 <OSTimeDlyHMSM+0xe8>
         if (hours   > (CPU_INT16U)99u) {
 80047e4:	2863      	cmp	r0, #99	; 0x63
 80047e6:	d835      	bhi.n	8004854 <OSTimeDlyHMSM+0xcc>
    tick_rate = OSCfg_TickRate_Hz;
 80047e8:	4d2e      	ldr	r5, [pc, #184]	; (80048a4 <OSTimeDlyHMSM+0x11c>)
              + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
 80047ea:	f8df c0c0 	ldr.w	ip, [pc, #192]	; 80048ac <OSTimeDlyHMSM+0x124>
    tick_rate = OSCfg_TickRate_Hz;
 80047ee:	682e      	ldr	r6, [r5, #0]
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 80047f0:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
 80047f4:	f44f 6561 	mov.w	r5, #3600	; 0xe10
 80047f8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 80047fc:	fb05 1000 	mla	r0, r5, r0, r1
              + (tick_rate * ((OS_TICK)milli + (OS_TICK)500u / tick_rate)) / (OS_TICK)1000u;
 8004800:	f44f 75fa 	mov.w	r5, #500	; 0x1f4
 8004804:	fbb5 f5f6 	udiv	r5, r5, r6
 8004808:	441d      	add	r5, r3
 800480a:	fb06 f505 	mul.w	r5, r6, r5
 800480e:	fbac 3505 	umull	r3, r5, ip, r5
 8004812:	09ad      	lsrs	r5, r5, #6
    ticks     = ((OS_TICK)hours * (OS_TICK)3600u + (OS_TICK)minutes * (OS_TICK)60u + (OS_TICK)seconds) * tick_rate
 8004814:	fb06 5500 	mla	r5, r6, r0, r5
    if (ticks > (OS_TICK)0u) {
 8004818:	b335      	cbz	r5, 8004868 <OSTimeDlyHMSM+0xe0>
        OS_CRITICAL_ENTER();
 800481a:	f7fb fce5 	bl	80001e8 <CPU_SR_Save>
        OS_TickListInsertDly(OSTCBCurPtr,
 800481e:	4e22      	ldr	r6, [pc, #136]	; (80048a8 <OSTimeDlyHMSM+0x120>)
 8004820:	4629      	mov	r1, r5
        OS_CRITICAL_ENTER();
 8004822:	4680      	mov	r8, r0
        OS_TickListInsertDly(OSTCBCurPtr,
 8004824:	463a      	mov	r2, r7
 8004826:	6830      	ldr	r0, [r6, #0]
 8004828:	4623      	mov	r3, r4
 800482a:	f7ff fecb 	bl	80045c4 <OS_TickListInsertDly>
        if (*p_err != OS_ERR_NONE) {
 800482e:	8825      	ldrh	r5, [r4, #0]
 8004830:	b355      	cbz	r5, 8004888 <OSTimeDlyHMSM+0x100>
             OS_CRITICAL_EXIT_NO_SCHED();
 8004832:	4640      	mov	r0, r8
}
 8004834:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
             OS_CRITICAL_EXIT_NO_SCHED();
 8004838:	f7fb bcda 	b.w	80001f0 <CPU_SR_Restore>
       *p_err = OS_ERR_OPT_INVALID;
 800483c:	f645 6325 	movw	r3, #24101	; 0x5e25
 8004840:	8023      	strh	r3, [r4, #0]
}
 8004842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         if (minutes > (CPU_INT16U)9999u) {
 8004846:	f242 750f 	movw	r5, #9999	; 0x270f
 800484a:	42a9      	cmp	r1, r5
 800484c:	d810      	bhi.n	8004870 <OSTimeDlyHMSM+0xe8>
         if (hours   > (CPU_INT16U)999u) {
 800484e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8004852:	d3c9      	bcc.n	80047e8 <OSTimeDlyHMSM+0x60>
            *p_err = OS_ERR_TIME_INVALID_HOURS;
 8004854:	f247 2378 	movw	r3, #29304	; 0x7278
 8004858:	8023      	strh	r3, [r4, #0]
             return;
 800485a:	e7ae      	b.n	80047ba <OSTimeDlyHMSM+0x32>
                 if (seconds == (CPU_INT16U)0u) {
 800485c:	2a00      	cmp	r2, #0
 800485e:	d1b5      	bne.n	80047cc <OSTimeDlyHMSM+0x44>
                     if (minutes == (CPU_INT16U)0u) {
 8004860:	2900      	cmp	r1, #0
 8004862:	d1b3      	bne.n	80047cc <OSTimeDlyHMSM+0x44>
                         if (hours == (CPU_INT16U)0u) {
 8004864:	2800      	cmp	r0, #0
 8004866:	d1b1      	bne.n	80047cc <OSTimeDlyHMSM+0x44>
                            *p_err = OS_ERR_TIME_ZERO_DLY;
 8004868:	f247 237e 	movw	r3, #29310	; 0x727e
 800486c:	8023      	strh	r3, [r4, #0]
                             return;
 800486e:	e7a4      	b.n	80047ba <OSTimeDlyHMSM+0x32>
            *p_err = OS_ERR_TIME_INVALID_MINUTES;
 8004870:	f247 2379 	movw	r3, #29305	; 0x7279
 8004874:	8023      	strh	r3, [r4, #0]
             return;
 8004876:	e7a0      	b.n	80047ba <OSTimeDlyHMSM+0x32>
            *p_err = OS_ERR_TIME_INVALID_MILLISECONDS;
 8004878:	f247 237b 	movw	r3, #29307	; 0x727b
 800487c:	8023      	strh	r3, [r4, #0]
             return;
 800487e:	e79c      	b.n	80047ba <OSTimeDlyHMSM+0x32>
            *p_err = OS_ERR_TIME_INVALID_SECONDS;
 8004880:	f247 237a 	movw	r3, #29306	; 0x727a
 8004884:	8023      	strh	r3, [r4, #0]
             return;
 8004886:	e798      	b.n	80047ba <OSTimeDlyHMSM+0x32>
        OS_RdyListRemove(OSTCBCurPtr);                      /* Remove current task from ready list                    */
 8004888:	6830      	ldr	r0, [r6, #0]
 800488a:	f7fe fee5 	bl	8003658 <OS_RdyListRemove>
        OS_CRITICAL_EXIT_NO_SCHED();
 800488e:	4640      	mov	r0, r8
 8004890:	f7fb fcae 	bl	80001f0 <CPU_SR_Restore>
        OSSched();                                          /* Find next task to run!                                 */
 8004894:	f7fe faac 	bl	8002df0 <OSSched>
       *p_err = OS_ERR_NONE;
 8004898:	8025      	strh	r5, [r4, #0]
 800489a:	e78e      	b.n	80047ba <OSTimeDlyHMSM+0x32>
 800489c:	20003704 	.word	0x20003704
 80048a0:	20003498 	.word	0x20003498
 80048a4:	0800a6bc 	.word	0x0800a6bc
 80048a8:	200036ec 	.word	0x200036ec
 80048ac:	10624dd3 	.word	0x10624dd3

080048b0 <OSTimeTick>:
* Returns    : none
************************************************************************************************************************
*/

void  OSTimeTick (void)
{
 80048b0:	b500      	push	{lr}
 80048b2:	b083      	sub	sp, #12
#if OS_CFG_ISR_POST_DEFERRED_EN > 0u
    CPU_TS  ts;
#endif


    OSTimeTickHook();                                       /* Call user definable hook                               */
 80048b4:	f7fe fa26 	bl	8002d04 <OSTimeTickHook>
                (CPU_TS     ) ts,
                (OS_ERR    *)&err);

#else

   (void)OSTaskSemPost((OS_TCB *)&OSTickTaskTCB,            /* Signal tick task                                       */
 80048b8:	f10d 0206 	add.w	r2, sp, #6
 80048bc:	2100      	movs	r1, #0
 80048be:	4807      	ldr	r0, [pc, #28]	; (80048dc <OSTimeTick+0x2c>)
 80048c0:	f7ff fbcc 	bl	800405c <OSTaskSemPost>
                       (OS_OPT  ) OS_OPT_POST_NONE,
                       (OS_ERR *)&err);


#if OS_CFG_SCHED_ROUND_ROBIN_EN > 0u
    OS_SchedRoundRobin(&OSRdyList[OSPrioCur]);
 80048c4:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <OSTimeTick+0x30>)
 80048c6:	4807      	ldr	r0, [pc, #28]	; (80048e4 <OSTimeTick+0x34>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80048ce:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80048d2:	f7fe fef9 	bl	80036c8 <OS_SchedRoundRobin>
                      (OS_ERR *)&err);
    }
#endif

#endif
}
 80048d6:	b003      	add	sp, #12
 80048d8:	f85d fb04 	ldr.w	pc, [sp], #4
 80048dc:	20003628 	.word	0x20003628
 80048e0:	20003624 	.word	0x20003624
 80048e4:	2000349c 	.word	0x2000349c

080048e8 <Help_Callback>:
    }



uint8_t Help_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 80048e8:	b538      	push	{r3, r4, r5, lr}

    static uint16_t count = 0;

    CLI_Command_t* command_list_ptr = Cammand_List[count];
 80048ea:	4d0a      	ldr	r5, [pc, #40]	; (8004914 <Help_Callback+0x2c>)
 80048ec:	4b0a      	ldr	r3, [pc, #40]	; (8004918 <Help_Callback+0x30>)
 80048ee:	882c      	ldrh	r4, [r5, #0]

    strncpy(cli_tx_out_buffer, command_list_ptr->CLI_Command_Description, max_buffer_len);
 80048f0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80048f4:	4608      	mov	r0, r1
 80048f6:	6859      	ldr	r1, [r3, #4]
 80048f8:	f001 fb17 	bl	8005f2a <strncpy>

    count++;
    if (count < Command_Count)
 80048fc:	4b07      	ldr	r3, [pc, #28]	; (800491c <Help_Callback+0x34>)
    count++;
 80048fe:	3401      	adds	r4, #1
    if (count < Command_Count)
 8004900:	881b      	ldrh	r3, [r3, #0]
    count++;
 8004902:	b2a4      	uxth	r4, r4
    if (count < Command_Count)
 8004904:	42a3      	cmp	r3, r4
	{
	return 1; //call again to generate next output
	}

    count = 0;
 8004906:	bf98      	it	ls
 8004908:	2000      	movls	r0, #0
    count++;
 800490a:	802c      	strh	r4, [r5, #0]
	return 1; //call again to generate next output
 800490c:	bf8c      	ite	hi
 800490e:	2001      	movhi	r0, #1
    count = 0;
 8004910:	8028      	strhls	r0, [r5, #0]

    return 0; // operation complete do not call again

    }
 8004912:	bd38      	pop	{r3, r4, r5, pc}
 8004914:	20000b1a 	.word	0x20000b1a
 8004918:	20000a50 	.word	0x20000a50
 800491c:	20000b18 	.word	0x20000b18

08004920 <CLI_Add_Cammand>:
    {
 8004920:	b570      	push	{r4, r5, r6, lr}
    if (Command_Count < MAX_COMMANDS)
 8004922:	4e09      	ldr	r6, [pc, #36]	; (8004948 <CLI_Add_Cammand+0x28>)
 8004924:	8835      	ldrh	r5, [r6, #0]
 8004926:	2d31      	cmp	r5, #49	; 0x31
 8004928:	d80b      	bhi.n	8004942 <CLI_Add_Cammand+0x22>
 800492a:	4604      	mov	r4, r0
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 800492c:	6800      	ldr	r0, [r0, #0]
 800492e:	f7fb fcf7 	bl	8000320 <strlen>
	Cammand_List[Command_Count] = command_def;
 8004932:	4a06      	ldr	r2, [pc, #24]	; (800494c <CLI_Add_Cammand+0x2c>)
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 8004934:	8120      	strh	r0, [r4, #8]
	Command_Count++;
 8004936:	1c6b      	adds	r3, r5, #1
	Cammand_List[Command_Count] = command_def;
 8004938:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
	Command_Count++;
 800493c:	8033      	strh	r3, [r6, #0]
	return 1; // command added successful
 800493e:	2001      	movs	r0, #1
    }
 8004940:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8004942:	2000      	movs	r0, #0
    }
 8004944:	bd70      	pop	{r4, r5, r6, pc}
 8004946:	bf00      	nop
 8004948:	20000b18 	.word	0x20000b18
 800494c:	20000a50 	.word	0x20000a50

08004950 <CLI_Process_Cammand>:
    for (uint16_t i = 0; i < Command_Count; i++)
 8004950:	4b1a      	ldr	r3, [pc, #104]	; (80049bc <CLI_Process_Cammand+0x6c>)
    {
 8004952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (uint16_t i = 0; i < Command_Count; i++)
 8004956:	881f      	ldrh	r7, [r3, #0]
    {
 8004958:	4606      	mov	r6, r0
 800495a:	4688      	mov	r8, r1
 800495c:	4691      	mov	r9, r2
    for (uint16_t i = 0; i < Command_Count; i++)
 800495e:	b1a7      	cbz	r7, 800498a <CLI_Process_Cammand+0x3a>
 8004960:	4c17      	ldr	r4, [pc, #92]	; (80049c0 <CLI_Process_Cammand+0x70>)
 8004962:	3f01      	subs	r7, #1
 8004964:	b2bb      	uxth	r3, r7
 8004966:	1d27      	adds	r7, r4, #4
 8004968:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	command_list_ptr = Cammand_List[i];
 800496c:	f854 5b04 	ldr.w	r5, [r4], #4
	if ((cli_in_buffer[cmd_len] == ' ')
 8004970:	892b      	ldrh	r3, [r5, #8]
	    if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command,
 8004972:	461a      	mov	r2, r3
		|| (cli_in_buffer[cmd_len] == 0x00))
 8004974:	5cf3      	ldrb	r3, [r6, r3]
 8004976:	f013 0fdf 	tst.w	r3, #223	; 0xdf
	    if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command,
 800497a:	4630      	mov	r0, r6
		|| (cli_in_buffer[cmd_len] == 0x00))
 800497c:	d103      	bne.n	8004986 <CLI_Process_Cammand+0x36>
	    if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command,
 800497e:	6829      	ldr	r1, [r5, #0]
 8004980:	f001 fac1 	bl	8005f06 <strncmp>
 8004984:	b188      	cbz	r0, 80049aa <CLI_Process_Cammand+0x5a>
    for (uint16_t i = 0; i < Command_Count; i++)
 8004986:	42a7      	cmp	r7, r4
 8004988:	d1f0      	bne.n	800496c <CLI_Process_Cammand+0x1c>
	strncpy(cli_tx_out_buffer, cli_in_buffer, max_buffer_len);
 800498a:	464a      	mov	r2, r9
 800498c:	4631      	mov	r1, r6
 800498e:	4640      	mov	r0, r8
 8004990:	f001 facb 	bl	8005f2a <strncpy>
	strcat(cli_tx_out_buffer, CMD_Not_Recognized_Sring);
 8004994:	4640      	mov	r0, r8
 8004996:	f7fb fcc3 	bl	8000320 <strlen>
 800499a:	2251      	movs	r2, #81	; 0x51
 800499c:	4440      	add	r0, r8
 800499e:	4909      	ldr	r1, [pc, #36]	; (80049c4 <CLI_Process_Cammand+0x74>)
 80049a0:	f001 fa74 	bl	8005e8c <memcpy>
    }
 80049a4:	2000      	movs	r0, #0
 80049a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (command_list_ptr->CLI_Callback != NULL)
 80049aa:	68eb      	ldr	r3, [r5, #12]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d0f9      	beq.n	80049a4 <CLI_Process_Cammand+0x54>
		xreturn = command_list_ptr->CLI_Callback(
 80049b0:	464a      	mov	r2, r9
 80049b2:	4641      	mov	r1, r8
 80049b4:	4630      	mov	r0, r6
    }
 80049b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		xreturn = command_list_ptr->CLI_Callback(
 80049ba:	4718      	bx	r3
 80049bc:	20000b18 	.word	0x20000b18
 80049c0:	20000a50 	.word	0x20000a50
 80049c4:	0800a718 	.word	0x0800a718

080049c8 <CLI_Get_Parameter>:
    {
 80049c8:	b470      	push	{r4, r5, r6}
    *param_number_len = 0;
 80049ca:	2400      	movs	r4, #0
 80049cc:	8014      	strh	r4, [r2, #0]
    while (uxParametersFound < param_number)
 80049ce:	b1a1      	cbz	r1, 80049fa <CLI_Get_Parameter+0x32>
 80049d0:	1e4e      	subs	r6, r1, #1
 80049d2:	7803      	ldrb	r3, [r0, #0]
 80049d4:	b2b6      	uxth	r6, r6
	while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) != ' '))
 80049d6:	b91b      	cbnz	r3, 80049e0 <CLI_Get_Parameter+0x18>
 80049d8:	e00f      	b.n	80049fa <CLI_Get_Parameter+0x32>
 80049da:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80049de:	b163      	cbz	r3, 80049fa <CLI_Get_Parameter+0x32>
 80049e0:	2b20      	cmp	r3, #32
 80049e2:	d1fa      	bne.n	80049da <CLI_Get_Parameter+0x12>
	while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) == ' '))
 80049e4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d0fb      	beq.n	80049e4 <CLI_Get_Parameter+0x1c>
	if (*cli_in_buffer != 0x00)
 80049ec:	b12b      	cbz	r3, 80049fa <CLI_Get_Parameter+0x32>
	    if (uxParametersFound == param_number)
 80049ee:	42b4      	cmp	r4, r6
 80049f0:	d006      	beq.n	8004a00 <CLI_Get_Parameter+0x38>
 80049f2:	3401      	adds	r4, #1
    while (uxParametersFound < param_number)
 80049f4:	b2a5      	uxth	r5, r4
 80049f6:	42a9      	cmp	r1, r5
 80049f8:	d8ed      	bhi.n	80049d6 <CLI_Get_Parameter+0xe>
		    pcReturn = NULL;
 80049fa:	2000      	movs	r0, #0
    }
 80049fc:	bc70      	pop	{r4, r5, r6}
 80049fe:	4770      	bx	lr
		while (((*cli_in_buffer) != 0x00)
 8004a00:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8004a04:	d0f9      	beq.n	80049fa <CLI_Get_Parameter+0x32>
	    cli_in_buffer++;
 8004a06:	4604      	mov	r4, r0
		while (((*cli_in_buffer) != 0x00)
 8004a08:	2101      	movs	r1, #1
 8004a0a:	e000      	b.n	8004a0e <CLI_Get_Parameter+0x46>
 8004a0c:	4619      	mov	r1, r3
		    (*param_number_len)++;
 8004a0e:	8011      	strh	r1, [r2, #0]
		while (((*cli_in_buffer) != 0x00)
 8004a10:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8004a14:	1c4b      	adds	r3, r1, #1
 8004a16:	f015 0fdf 	tst.w	r5, #223	; 0xdf
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	d1f6      	bne.n	8004a0c <CLI_Get_Parameter+0x44>
		if (*param_number_len == 0)
 8004a1e:	2900      	cmp	r1, #0
 8004a20:	d0eb      	beq.n	80049fa <CLI_Get_Parameter+0x32>
    }
 8004a22:	bc70      	pop	{r4, r5, r6}
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop

08004a28 <CLI_Add_Help_Cammand>:
    // require only if generated output in callback is larger than output buffer
    // to split generated output
	};

void CLI_Add_Help_Cammand()
    {
 8004a28:	b570      	push	{r4, r5, r6, lr}
    if (Command_Count < MAX_COMMANDS)
 8004a2a:	4d07      	ldr	r5, [pc, #28]	; (8004a48 <CLI_Add_Help_Cammand+0x20>)
 8004a2c:	882c      	ldrh	r4, [r5, #0]
 8004a2e:	2c31      	cmp	r4, #49	; 0x31
 8004a30:	d809      	bhi.n	8004a46 <CLI_Add_Help_Cammand+0x1e>
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 8004a32:	4e06      	ldr	r6, [pc, #24]	; (8004a4c <CLI_Add_Help_Cammand+0x24>)
 8004a34:	6830      	ldr	r0, [r6, #0]
 8004a36:	f7fb fc73 	bl	8000320 <strlen>
	Cammand_List[Command_Count] = command_def;
 8004a3a:	4b05      	ldr	r3, [pc, #20]	; (8004a50 <CLI_Add_Help_Cammand+0x28>)
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 8004a3c:	8130      	strh	r0, [r6, #8]
	Cammand_List[Command_Count] = command_def;
 8004a3e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
	Command_Count++;
 8004a42:	3401      	adds	r4, #1
 8004a44:	802c      	strh	r4, [r5, #0]
    CLI_Add_Cammand(&Help_Defination);
    }
 8004a46:	bd70      	pop	{r4, r5, r6, pc}
 8004a48:	20000b18 	.word	0x20000b18
 8004a4c:	20000008 	.word	0x20000008
 8004a50:	20000a50 	.word	0x20000a50

08004a54 <UART_TX_Task>:
                  &os_err);

    }

static  void  UART_TX_Task (void *p_arg)
{
 8004a54:	b500      	push	{lr}
 8004a56:	b085      	sub	sp, #20
    OS_ERR  os_err;

    OSMutexPend(&CLI_UART_Mutex,0,OS_OPT_PEND_BLOCKING,0,&os_err);
 8004a58:	2300      	movs	r3, #0
 8004a5a:	f10d 040e 	add.w	r4, sp, #14
 8004a5e:	461a      	mov	r2, r3
 8004a60:	4619      	mov	r1, r3
 8004a62:	4808      	ldr	r0, [pc, #32]	; (8004a84 <UART_TX_Task+0x30>)
 8004a64:	9400      	str	r4, [sp, #0]
 8004a66:	f7fe ff0f 	bl	8003888 <OSMutexPend>

    CLI_UART_Send_String("\r\nSTM32 CLI over uart demo.\r\nCalculator app\r\n");
 8004a6a:	4807      	ldr	r0, [pc, #28]	; (8004a88 <UART_TX_Task+0x34>)
 8004a6c:	f000 fd72 	bl	8005554 <CLI_UART_Send_String>

    OSMutexPost(&CLI_UART_Mutex,OS_OPT_POST_NONE,&os_err);
 8004a70:	2100      	movs	r1, #0
 8004a72:	4804      	ldr	r0, [pc, #16]	; (8004a84 <UART_TX_Task+0x30>)
 8004a74:	4622      	mov	r2, r4
 8004a76:	f7fe ffe3 	bl	8003a40 <OSMutexPost>

    OS_TaskSuspend((OS_TCB*)&UART_Task_TCB,&os_err);
 8004a7a:	4621      	mov	r1, r4
 8004a7c:	4803      	ldr	r0, [pc, #12]	; (8004a8c <UART_TX_Task+0x38>)
 8004a7e:	f7ff fb83 	bl	8004188 <OS_TaskSuspend>
 8004a82:	e7fe      	b.n	8004a82 <UART_TX_Task+0x2e>
 8004a84:	20003818 	.word	0x20003818
 8004a88:	0800a7c0 	.word	0x0800a7c0
 8004a8c:	20000f1c 	.word	0x20000f1c

08004a90 <Add_Callback>:
    {
 8004a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a94:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 8004a96:	ad06      	add	r5, sp, #24
 8004a98:	2300      	movs	r3, #0
    int32_t sum = 0;
 8004a9a:	4698      	mov	r8, r3
    uint16_t param_len = 0;
 8004a9c:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 8004aa0:	461c      	mov	r4, r3
    char str_to_int[11] = "0";
 8004aa2:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 8004aa4:	2301      	movs	r3, #1
    {
 8004aa6:	4606      	mov	r6, r0
 8004aa8:	468a      	mov	sl, r1
    uint8_t is_command_valid = 1;
 8004aaa:	9301      	str	r3, [sp, #4]
    char str_to_int[11] = "0";
 8004aac:	f04f 0930 	mov.w	r9, #48	; 0x30
	param_number++; //param number, starting from first
 8004ab0:	1c63      	adds	r3, r4, #1
 8004ab2:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 8004ab6:	4659      	mov	r1, fp
 8004ab8:	462a      	mov	r2, r5
 8004aba:	4630      	mov	r0, r6
 8004abc:	f7ff ff84 	bl	80049c8 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d07d      	beq.n	8004bc0 <Add_Callback+0x130>
    char str_to_int[11] = "0";
 8004ac4:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8004ac8:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 8004acc:	7802      	ldrb	r2, [r0, #0]
 8004ace:	2a2d      	cmp	r2, #45	; 0x2d
 8004ad0:	bf03      	ittte	eq
 8004ad2:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 8004ad4:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 8004ad8:	3001      	addeq	r0, #1
    if (*param == '-')
 8004ada:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 8004adc:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004ae0:	d067      	beq.n	8004bb2 <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004ae2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004ae6:	2909      	cmp	r1, #9
 8004ae8:	d85f      	bhi.n	8004baa <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004aea:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 8004aee:	7842      	ldrb	r2, [r0, #1]
 8004af0:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004af4:	d05d      	beq.n	8004bb2 <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004af6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004afa:	2909      	cmp	r1, #9
 8004afc:	d855      	bhi.n	8004baa <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004afe:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 8004b02:	7882      	ldrb	r2, [r0, #2]
 8004b04:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004b08:	d053      	beq.n	8004bb2 <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004b0a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004b0e:	2909      	cmp	r1, #9
 8004b10:	d84b      	bhi.n	8004baa <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004b12:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 8004b16:	78c2      	ldrb	r2, [r0, #3]
 8004b18:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004b1c:	d049      	beq.n	8004bb2 <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004b1e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004b22:	2909      	cmp	r1, #9
 8004b24:	d841      	bhi.n	8004baa <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004b26:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 8004b2a:	7902      	ldrb	r2, [r0, #4]
 8004b2c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004b30:	d03f      	beq.n	8004bb2 <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004b32:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004b36:	2909      	cmp	r1, #9
 8004b38:	d837      	bhi.n	8004baa <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004b3a:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 8004b3e:	7942      	ldrb	r2, [r0, #5]
 8004b40:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004b44:	d035      	beq.n	8004bb2 <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004b46:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004b4a:	2909      	cmp	r1, #9
 8004b4c:	d82d      	bhi.n	8004baa <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004b4e:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 8004b52:	7982      	ldrb	r2, [r0, #6]
 8004b54:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004b58:	d02b      	beq.n	8004bb2 <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004b5a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004b5e:	2909      	cmp	r1, #9
 8004b60:	d823      	bhi.n	8004baa <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004b62:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 8004b66:	79c2      	ldrb	r2, [r0, #7]
 8004b68:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004b6c:	d021      	beq.n	8004bb2 <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004b6e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004b72:	2909      	cmp	r1, #9
 8004b74:	d819      	bhi.n	8004baa <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004b76:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 8004b7a:	7a02      	ldrb	r2, [r0, #8]
 8004b7c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004b80:	d017      	beq.n	8004bb2 <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004b82:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004b86:	2909      	cmp	r1, #9
 8004b88:	d80f      	bhi.n	8004baa <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004b8a:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 8004b8e:	7a42      	ldrb	r2, [r0, #9]
 8004b90:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004b94:	d00d      	beq.n	8004bb2 <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8004b96:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004b9a:	2909      	cmp	r1, #9
 8004b9c:	d805      	bhi.n	8004baa <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8004b9e:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 8004ba2:	7a82      	ldrb	r2, [r0, #10]
 8004ba4:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004ba8:	d003      	beq.n	8004bb2 <Add_Callback+0x122>
		is_command_valid = 0;
 8004baa:	2300      	movs	r3, #0
 8004bac:	9301      	str	r3, [sp, #4]
 8004bae:	465c      	mov	r4, fp
 8004bb0:	e77e      	b.n	8004ab0 <Add_Callback+0x20>
	*value = sign * atoi(str_to_int);
 8004bb2:	a803      	add	r0, sp, #12
 8004bb4:	f001 f93b 	bl	8005e2e <atoi>
		sum += tmp;
 8004bb8:	fb04 8800 	mla	r8, r4, r0, r8
		is_command_valid = 0;
 8004bbc:	465c      	mov	r4, fp
 8004bbe:	e777      	b.n	8004ab0 <Add_Callback+0x20>
    if (!param_count)
 8004bc0:	b10c      	cbz	r4, 8004bc6 <Add_Callback+0x136>
    if (is_command_valid)
 8004bc2:	9b01      	ldr	r3, [sp, #4]
 8004bc4:	b9eb      	cbnz	r3, 8004c02 <Add_Callback+0x172>
    strcat(cli_tx_out_buffer, cmd1);
 8004bc6:	4650      	mov	r0, sl
 8004bc8:	f7fb fbaa 	bl	8000320 <strlen>
 8004bcc:	4c11      	ldr	r4, [pc, #68]	; (8004c14 <Add_Callback+0x184>)
 8004bce:	4605      	mov	r5, r0
 8004bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bd2:	eb0a 0705 	add.w	r7, sl, r5
 8004bd6:	f84a 0005 	str.w	r0, [sl, r5]
 8004bda:	8824      	ldrh	r4, [r4, #0]
 8004bdc:	6079      	str	r1, [r7, #4]
 8004bde:	f105 0012 	add.w	r0, r5, #18
 8004be2:	60ba      	str	r2, [r7, #8]
 8004be4:	60fb      	str	r3, [r7, #12]
 8004be6:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 8004be8:	4450      	add	r0, sl
 8004bea:	4631      	mov	r1, r6
 8004bec:	f001 f982 	bl	8005ef4 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 8004bf0:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <Add_Callback+0x188>)
 8004bf2:	881a      	ldrh	r2, [r3, #0]
 8004bf4:	789b      	ldrb	r3, [r3, #2]
 8004bf6:	8002      	strh	r2, [r0, #0]
 8004bf8:	7083      	strb	r3, [r0, #2]
    }
 8004bfa:	2000      	movs	r0, #0
 8004bfc:	b007      	add	sp, #28
 8004bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) sum);
 8004c02:	4642      	mov	r2, r8
 8004c04:	4650      	mov	r0, sl
 8004c06:	4905      	ldr	r1, [pc, #20]	; (8004c1c <Add_Callback+0x18c>)
 8004c08:	f001 f954 	bl	8005eb4 <sprintf>
    }
 8004c0c:	2000      	movs	r0, #0
 8004c0e:	b007      	add	sp, #28
 8004c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c14:	0800a7ac 	.word	0x0800a7ac
 8004c18:	0800a7a8 	.word	0x0800a7a8
 8004c1c:	0800a7a4 	.word	0x0800a7a4

08004c20 <Mul_Callback>:
    {
 8004c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c24:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 8004c26:	ad06      	add	r5, sp, #24
 8004c28:	2300      	movs	r3, #0
    int32_t rslt = 1;
 8004c2a:	f04f 0801 	mov.w	r8, #1
    uint16_t param_len = 0;
 8004c2e:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 8004c32:	461c      	mov	r4, r3
    {
 8004c34:	4606      	mov	r6, r0
 8004c36:	468a      	mov	sl, r1
    char str_to_int[11] = "0";
 8004c38:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 8004c3a:	f8cd 8004 	str.w	r8, [sp, #4]
    char str_to_int[11] = "0";
 8004c3e:	f04f 0930 	mov.w	r9, #48	; 0x30
	param_number++; //param number, starting from first
 8004c42:	1c63      	adds	r3, r4, #1
 8004c44:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 8004c48:	4659      	mov	r1, fp
 8004c4a:	462a      	mov	r2, r5
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	f7ff febb 	bl	80049c8 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 8004c52:	2800      	cmp	r0, #0
 8004c54:	d07f      	beq.n	8004d56 <Mul_Callback+0x136>
    char str_to_int[11] = "0";
 8004c56:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8004c5a:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 8004c5e:	7802      	ldrb	r2, [r0, #0]
 8004c60:	2a2d      	cmp	r2, #45	; 0x2d
 8004c62:	bf03      	ittte	eq
 8004c64:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 8004c66:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 8004c6a:	3001      	addeq	r0, #1
    if (*param == '-')
 8004c6c:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 8004c6e:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004c72:	d067      	beq.n	8004d44 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8004c74:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004c78:	2909      	cmp	r1, #9
 8004c7a:	d85f      	bhi.n	8004d3c <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8004c7c:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 8004c80:	7842      	ldrb	r2, [r0, #1]
 8004c82:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004c86:	d05d      	beq.n	8004d44 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8004c88:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004c8c:	2909      	cmp	r1, #9
 8004c8e:	d855      	bhi.n	8004d3c <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8004c90:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 8004c94:	7882      	ldrb	r2, [r0, #2]
 8004c96:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004c9a:	d053      	beq.n	8004d44 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8004c9c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004ca0:	2909      	cmp	r1, #9
 8004ca2:	d84b      	bhi.n	8004d3c <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8004ca4:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 8004ca8:	78c2      	ldrb	r2, [r0, #3]
 8004caa:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004cae:	d049      	beq.n	8004d44 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8004cb0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004cb4:	2909      	cmp	r1, #9
 8004cb6:	d841      	bhi.n	8004d3c <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8004cb8:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 8004cbc:	7902      	ldrb	r2, [r0, #4]
 8004cbe:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004cc2:	d03f      	beq.n	8004d44 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8004cc4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004cc8:	2909      	cmp	r1, #9
 8004cca:	d837      	bhi.n	8004d3c <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8004ccc:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 8004cd0:	7942      	ldrb	r2, [r0, #5]
 8004cd2:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004cd6:	d035      	beq.n	8004d44 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8004cd8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004cdc:	2909      	cmp	r1, #9
 8004cde:	d82d      	bhi.n	8004d3c <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8004ce0:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 8004ce4:	7982      	ldrb	r2, [r0, #6]
 8004ce6:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004cea:	d02b      	beq.n	8004d44 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8004cec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004cf0:	2909      	cmp	r1, #9
 8004cf2:	d823      	bhi.n	8004d3c <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8004cf4:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 8004cf8:	79c2      	ldrb	r2, [r0, #7]
 8004cfa:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004cfe:	d021      	beq.n	8004d44 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8004d00:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004d04:	2909      	cmp	r1, #9
 8004d06:	d819      	bhi.n	8004d3c <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8004d08:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 8004d0c:	7a02      	ldrb	r2, [r0, #8]
 8004d0e:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004d12:	d017      	beq.n	8004d44 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8004d14:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004d18:	2909      	cmp	r1, #9
 8004d1a:	d80f      	bhi.n	8004d3c <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8004d1c:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 8004d20:	7a42      	ldrb	r2, [r0, #9]
 8004d22:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004d26:	d00d      	beq.n	8004d44 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8004d28:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004d2c:	2909      	cmp	r1, #9
 8004d2e:	d805      	bhi.n	8004d3c <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8004d30:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 8004d34:	7a82      	ldrb	r2, [r0, #10]
 8004d36:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004d3a:	d003      	beq.n	8004d44 <Mul_Callback+0x124>
		is_command_valid = 0;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	9301      	str	r3, [sp, #4]
 8004d40:	465c      	mov	r4, fp
 8004d42:	e77e      	b.n	8004c42 <Mul_Callback+0x22>
	*value = sign * atoi(str_to_int);
 8004d44:	a803      	add	r0, sp, #12
 8004d46:	f001 f872 	bl	8005e2e <atoi>
 8004d4a:	fb04 f000 	mul.w	r0, r4, r0
		rslt *= tmp;
 8004d4e:	fb00 f808 	mul.w	r8, r0, r8
		is_command_valid = 0;
 8004d52:	465c      	mov	r4, fp
 8004d54:	e775      	b.n	8004c42 <Mul_Callback+0x22>
    if (!param_count)
 8004d56:	b10c      	cbz	r4, 8004d5c <Mul_Callback+0x13c>
    if (is_command_valid)
 8004d58:	9b01      	ldr	r3, [sp, #4]
 8004d5a:	b9eb      	cbnz	r3, 8004d98 <Mul_Callback+0x178>
    strcat(cli_tx_out_buffer, cmd1);
 8004d5c:	4650      	mov	r0, sl
 8004d5e:	f7fb fadf 	bl	8000320 <strlen>
 8004d62:	4c12      	ldr	r4, [pc, #72]	; (8004dac <Mul_Callback+0x18c>)
 8004d64:	4605      	mov	r5, r0
 8004d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d68:	eb0a 0705 	add.w	r7, sl, r5
 8004d6c:	f84a 0005 	str.w	r0, [sl, r5]
 8004d70:	8824      	ldrh	r4, [r4, #0]
 8004d72:	6079      	str	r1, [r7, #4]
 8004d74:	f105 0012 	add.w	r0, r5, #18
 8004d78:	60ba      	str	r2, [r7, #8]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 8004d7e:	4450      	add	r0, sl
 8004d80:	4631      	mov	r1, r6
 8004d82:	f001 f8b7 	bl	8005ef4 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 8004d86:	4b0a      	ldr	r3, [pc, #40]	; (8004db0 <Mul_Callback+0x190>)
 8004d88:	881a      	ldrh	r2, [r3, #0]
 8004d8a:	789b      	ldrb	r3, [r3, #2]
 8004d8c:	8002      	strh	r2, [r0, #0]
 8004d8e:	7083      	strb	r3, [r0, #2]
    }
 8004d90:	2000      	movs	r0, #0
 8004d92:	b007      	add	sp, #28
 8004d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 8004d98:	4642      	mov	r2, r8
 8004d9a:	4650      	mov	r0, sl
 8004d9c:	4905      	ldr	r1, [pc, #20]	; (8004db4 <Mul_Callback+0x194>)
 8004d9e:	f001 f889 	bl	8005eb4 <sprintf>
    }
 8004da2:	2000      	movs	r0, #0
 8004da4:	b007      	add	sp, #28
 8004da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004daa:	bf00      	nop
 8004dac:	0800a7ac 	.word	0x0800a7ac
 8004db0:	0800a7a8 	.word	0x0800a7a8
 8004db4:	0800a7a4 	.word	0x0800a7a4

08004db8 <Div_Callback>:
    {
 8004db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dbc:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 8004dbe:	ad06      	add	r5, sp, #24
 8004dc0:	2300      	movs	r3, #0
    int32_t rslt = 1;
 8004dc2:	f04f 0801 	mov.w	r8, #1
    uint16_t param_len = 0;
 8004dc6:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 8004dca:	461c      	mov	r4, r3
    {
 8004dcc:	4606      	mov	r6, r0
 8004dce:	468a      	mov	sl, r1
    char str_to_int[11] = "0";
 8004dd0:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 8004dd2:	f8cd 8004 	str.w	r8, [sp, #4]
    char str_to_int[11] = "0";
 8004dd6:	f04f 0930 	mov.w	r9, #48	; 0x30
	param_number++; //param number, starting from first
 8004dda:	1c63      	adds	r3, r4, #1
 8004ddc:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 8004de0:	4659      	mov	r1, fp
 8004de2:	462a      	mov	r2, r5
 8004de4:	4630      	mov	r0, r6
 8004de6:	f7ff fdef 	bl	80049c8 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 8004dea:	2800      	cmp	r0, #0
 8004dec:	f000 8083 	beq.w	8004ef6 <Div_Callback+0x13e>
    char str_to_int[11] = "0";
 8004df0:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8004df4:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 8004df8:	7802      	ldrb	r2, [r0, #0]
 8004dfa:	2a2d      	cmp	r2, #45	; 0x2d
 8004dfc:	bf03      	ittte	eq
 8004dfe:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 8004e00:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 8004e04:	3001      	addeq	r0, #1
    if (*param == '-')
 8004e06:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 8004e08:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004e0c:	d067      	beq.n	8004ede <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004e0e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e12:	2909      	cmp	r1, #9
 8004e14:	d85f      	bhi.n	8004ed6 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004e16:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 8004e1a:	7842      	ldrb	r2, [r0, #1]
 8004e1c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004e20:	d05d      	beq.n	8004ede <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004e22:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e26:	2909      	cmp	r1, #9
 8004e28:	d855      	bhi.n	8004ed6 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004e2a:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 8004e2e:	7882      	ldrb	r2, [r0, #2]
 8004e30:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004e34:	d053      	beq.n	8004ede <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004e36:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e3a:	2909      	cmp	r1, #9
 8004e3c:	d84b      	bhi.n	8004ed6 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004e3e:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 8004e42:	78c2      	ldrb	r2, [r0, #3]
 8004e44:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004e48:	d049      	beq.n	8004ede <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004e4a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e4e:	2909      	cmp	r1, #9
 8004e50:	d841      	bhi.n	8004ed6 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004e52:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 8004e56:	7902      	ldrb	r2, [r0, #4]
 8004e58:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004e5c:	d03f      	beq.n	8004ede <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004e5e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e62:	2909      	cmp	r1, #9
 8004e64:	d837      	bhi.n	8004ed6 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004e66:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 8004e6a:	7942      	ldrb	r2, [r0, #5]
 8004e6c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004e70:	d035      	beq.n	8004ede <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004e72:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e76:	2909      	cmp	r1, #9
 8004e78:	d82d      	bhi.n	8004ed6 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004e7a:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 8004e7e:	7982      	ldrb	r2, [r0, #6]
 8004e80:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004e84:	d02b      	beq.n	8004ede <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004e86:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e8a:	2909      	cmp	r1, #9
 8004e8c:	d823      	bhi.n	8004ed6 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004e8e:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 8004e92:	79c2      	ldrb	r2, [r0, #7]
 8004e94:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004e98:	d021      	beq.n	8004ede <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004e9a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004e9e:	2909      	cmp	r1, #9
 8004ea0:	d819      	bhi.n	8004ed6 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004ea2:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 8004ea6:	7a02      	ldrb	r2, [r0, #8]
 8004ea8:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004eac:	d017      	beq.n	8004ede <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004eae:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004eb2:	2909      	cmp	r1, #9
 8004eb4:	d80f      	bhi.n	8004ed6 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004eb6:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 8004eba:	7a42      	ldrb	r2, [r0, #9]
 8004ebc:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004ec0:	d00d      	beq.n	8004ede <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004ec2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004ec6:	2909      	cmp	r1, #9
 8004ec8:	d805      	bhi.n	8004ed6 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004eca:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 8004ece:	7a82      	ldrb	r2, [r0, #10]
 8004ed0:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004ed4:	d003      	beq.n	8004ede <Div_Callback+0x126>
		is_command_valid = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	9301      	str	r3, [sp, #4]
	param_number++; //param number, starting from first
 8004eda:	465c      	mov	r4, fp
 8004edc:	e77d      	b.n	8004dda <Div_Callback+0x22>
	*value = sign * atoi(str_to_int);
 8004ede:	a803      	add	r0, sp, #12
 8004ee0:	f000 ffa5 	bl	8005e2e <atoi>
		if (param_count == 1)
 8004ee4:	f1bb 0f01 	cmp.w	fp, #1
	*value = sign * atoi(str_to_int);
 8004ee8:	fb04 f000 	mul.w	r0, r4, r0
		if (param_count == 1)
 8004eec:	d025      	beq.n	8004f3a <Div_Callback+0x182>
		    rslt /= tmp;
 8004eee:	fb98 f8f0 	sdiv	r8, r8, r0
	param_number++; //param number, starting from first
 8004ef2:	465c      	mov	r4, fp
 8004ef4:	e771      	b.n	8004dda <Div_Callback+0x22>
    if (param_count != 2)
 8004ef6:	2c02      	cmp	r4, #2
 8004ef8:	d101      	bne.n	8004efe <Div_Callback+0x146>
    if (is_command_valid)
 8004efa:	9b01      	ldr	r3, [sp, #4]
 8004efc:	bb03      	cbnz	r3, 8004f40 <Div_Callback+0x188>
    strcat(cli_tx_out_buffer, cmd1);
 8004efe:	4650      	mov	r0, sl
 8004f00:	f7fb fa0e 	bl	8000320 <strlen>
 8004f04:	4c13      	ldr	r4, [pc, #76]	; (8004f54 <Div_Callback+0x19c>)
 8004f06:	4605      	mov	r5, r0
 8004f08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004f0a:	eb0a 0705 	add.w	r7, sl, r5
 8004f0e:	f84a 0005 	str.w	r0, [sl, r5]
 8004f12:	8824      	ldrh	r4, [r4, #0]
 8004f14:	6079      	str	r1, [r7, #4]
 8004f16:	f105 0012 	add.w	r0, r5, #18
 8004f1a:	60ba      	str	r2, [r7, #8]
 8004f1c:	60fb      	str	r3, [r7, #12]
 8004f1e:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 8004f20:	4450      	add	r0, sl
 8004f22:	4631      	mov	r1, r6
 8004f24:	f000 ffe6 	bl	8005ef4 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 8004f28:	4b0b      	ldr	r3, [pc, #44]	; (8004f58 <Div_Callback+0x1a0>)
 8004f2a:	881a      	ldrh	r2, [r3, #0]
 8004f2c:	789b      	ldrb	r3, [r3, #2]
 8004f2e:	8002      	strh	r2, [r0, #0]
 8004f30:	7083      	strb	r3, [r0, #2]
    }
 8004f32:	2000      	movs	r0, #0
 8004f34:	b007      	add	sp, #28
 8004f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*value = sign * atoi(str_to_int);
 8004f3a:	4680      	mov	r8, r0
	param_number++; //param number, starting from first
 8004f3c:	465c      	mov	r4, fp
 8004f3e:	e74c      	b.n	8004dda <Div_Callback+0x22>
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 8004f40:	4642      	mov	r2, r8
 8004f42:	4650      	mov	r0, sl
 8004f44:	4905      	ldr	r1, [pc, #20]	; (8004f5c <Div_Callback+0x1a4>)
 8004f46:	f000 ffb5 	bl	8005eb4 <sprintf>
    }
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	b007      	add	sp, #28
 8004f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f52:	bf00      	nop
 8004f54:	0800a7ac 	.word	0x0800a7ac
 8004f58:	0800a7a8 	.word	0x0800a7a8
 8004f5c:	0800a7a4 	.word	0x0800a7a4

08004f60 <Sqrt_Callback>:
    {
 8004f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 8004f66:	ad06      	add	r5, sp, #24
 8004f68:	2300      	movs	r3, #0
    int32_t rslt = 1;
 8004f6a:	f04f 0a01 	mov.w	sl, #1
    uint16_t param_len = 0;
 8004f6e:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 8004f72:	461c      	mov	r4, r3
    {
 8004f74:	4606      	mov	r6, r0
 8004f76:	4689      	mov	r9, r1
    char str_to_int[11] = "0";
 8004f78:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 8004f7a:	f8cd a004 	str.w	sl, [sp, #4]
    char str_to_int[11] = "0";
 8004f7e:	f04f 0830 	mov.w	r8, #48	; 0x30
	param_number++; //param number, starting from first
 8004f82:	1c63      	adds	r3, r4, #1
 8004f84:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 8004f88:	4659      	mov	r1, fp
 8004f8a:	462a      	mov	r2, r5
 8004f8c:	4630      	mov	r0, r6
 8004f8e:	f7ff fd1b 	bl	80049c8 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 8004f92:	2800      	cmp	r0, #0
 8004f94:	f000 8089 	beq.w	80050aa <Sqrt_Callback+0x14a>
    char str_to_int[11] = "0";
 8004f98:	e9cd 8703 	strd	r8, r7, [sp, #12]
 8004f9c:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 8004fa0:	7802      	ldrb	r2, [r0, #0]
 8004fa2:	2a2d      	cmp	r2, #45	; 0x2d
 8004fa4:	bf03      	ittte	eq
 8004fa6:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 8004fa8:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 8004fac:	3001      	addeq	r0, #1
    if (*param == '-')
 8004fae:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 8004fb0:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004fb4:	d067      	beq.n	8005086 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004fb6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004fba:	2909      	cmp	r1, #9
 8004fbc:	d85f      	bhi.n	800507e <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004fbe:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 8004fc2:	7842      	ldrb	r2, [r0, #1]
 8004fc4:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004fc8:	d05d      	beq.n	8005086 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004fca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004fce:	2909      	cmp	r1, #9
 8004fd0:	d855      	bhi.n	800507e <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004fd2:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 8004fd6:	7882      	ldrb	r2, [r0, #2]
 8004fd8:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004fdc:	d053      	beq.n	8005086 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004fde:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004fe2:	2909      	cmp	r1, #9
 8004fe4:	d84b      	bhi.n	800507e <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004fe6:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 8004fea:	78c2      	ldrb	r2, [r0, #3]
 8004fec:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8004ff0:	d049      	beq.n	8005086 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8004ff2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004ff6:	2909      	cmp	r1, #9
 8004ff8:	d841      	bhi.n	800507e <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 8004ffa:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 8004ffe:	7902      	ldrb	r2, [r0, #4]
 8005000:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005004:	d03f      	beq.n	8005086 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8005006:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800500a:	2909      	cmp	r1, #9
 800500c:	d837      	bhi.n	800507e <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 800500e:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 8005012:	7942      	ldrb	r2, [r0, #5]
 8005014:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005018:	d035      	beq.n	8005086 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 800501a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800501e:	2909      	cmp	r1, #9
 8005020:	d82d      	bhi.n	800507e <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 8005022:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 8005026:	7982      	ldrb	r2, [r0, #6]
 8005028:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800502c:	d02b      	beq.n	8005086 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 800502e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005032:	2909      	cmp	r1, #9
 8005034:	d823      	bhi.n	800507e <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 8005036:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 800503a:	79c2      	ldrb	r2, [r0, #7]
 800503c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005040:	d021      	beq.n	8005086 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8005042:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005046:	2909      	cmp	r1, #9
 8005048:	d819      	bhi.n	800507e <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 800504a:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 800504e:	7a02      	ldrb	r2, [r0, #8]
 8005050:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005054:	d017      	beq.n	8005086 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8005056:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800505a:	2909      	cmp	r1, #9
 800505c:	d80f      	bhi.n	800507e <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 800505e:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 8005062:	7a42      	ldrb	r2, [r0, #9]
 8005064:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005068:	d00d      	beq.n	8005086 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 800506a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800506e:	2909      	cmp	r1, #9
 8005070:	d805      	bhi.n	800507e <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 8005072:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 8005076:	7a82      	ldrb	r2, [r0, #10]
 8005078:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800507c:	d003      	beq.n	8005086 <Sqrt_Callback+0x126>
		is_command_valid = 0;
 800507e:	2300      	movs	r3, #0
 8005080:	9301      	str	r3, [sp, #4]
 8005082:	465c      	mov	r4, fp
 8005084:	e77d      	b.n	8004f82 <Sqrt_Callback+0x22>
	*value = sign * atoi(str_to_int);
 8005086:	a803      	add	r0, sp, #12
 8005088:	f000 fed1 	bl	8005e2e <atoi>
		rslt = sqrt(tmp);
 800508c:	fb04 f000 	mul.w	r0, r4, r0
 8005090:	f7fb faf0 	bl	8000674 <__aeabi_i2d>
 8005094:	ec41 0b10 	vmov	d0, r0, r1
 8005098:	f004 fb1a 	bl	80096d0 <sqrt>
 800509c:	ec51 0b10 	vmov	r0, r1, d0
 80050a0:	f7fb fe02 	bl	8000ca8 <__aeabi_d2iz>
		is_command_valid = 0;
 80050a4:	465c      	mov	r4, fp
		rslt = sqrt(tmp);
 80050a6:	4682      	mov	sl, r0
 80050a8:	e76b      	b.n	8004f82 <Sqrt_Callback+0x22>
    if (param_count != 1)
 80050aa:	2c01      	cmp	r4, #1
 80050ac:	d101      	bne.n	80050b2 <Sqrt_Callback+0x152>
    if (is_command_valid)
 80050ae:	9b01      	ldr	r3, [sp, #4]
 80050b0:	b9eb      	cbnz	r3, 80050ee <Sqrt_Callback+0x18e>
    strcat(cli_tx_out_buffer, cmd1);
 80050b2:	4648      	mov	r0, r9
 80050b4:	f7fb f934 	bl	8000320 <strlen>
 80050b8:	4c11      	ldr	r4, [pc, #68]	; (8005100 <Sqrt_Callback+0x1a0>)
 80050ba:	4605      	mov	r5, r0
 80050bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050be:	eb09 0705 	add.w	r7, r9, r5
 80050c2:	f849 0005 	str.w	r0, [r9, r5]
 80050c6:	8824      	ldrh	r4, [r4, #0]
 80050c8:	6079      	str	r1, [r7, #4]
 80050ca:	f105 0012 	add.w	r0, r5, #18
 80050ce:	60ba      	str	r2, [r7, #8]
 80050d0:	60fb      	str	r3, [r7, #12]
 80050d2:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 80050d4:	4448      	add	r0, r9
 80050d6:	4631      	mov	r1, r6
 80050d8:	f000 ff0c 	bl	8005ef4 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 80050dc:	4b09      	ldr	r3, [pc, #36]	; (8005104 <Sqrt_Callback+0x1a4>)
 80050de:	881a      	ldrh	r2, [r3, #0]
 80050e0:	789b      	ldrb	r3, [r3, #2]
 80050e2:	8002      	strh	r2, [r0, #0]
 80050e4:	7083      	strb	r3, [r0, #2]
    }
 80050e6:	2000      	movs	r0, #0
 80050e8:	b007      	add	sp, #28
 80050ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 80050ee:	4652      	mov	r2, sl
 80050f0:	4648      	mov	r0, r9
 80050f2:	4905      	ldr	r1, [pc, #20]	; (8005108 <Sqrt_Callback+0x1a8>)
 80050f4:	f000 fede 	bl	8005eb4 <sprintf>
    }
 80050f8:	2000      	movs	r0, #0
 80050fa:	b007      	add	sp, #28
 80050fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005100:	0800a7ac 	.word	0x0800a7ac
 8005104:	0800a7a8 	.word	0x0800a7a8
 8005108:	0800a7a4 	.word	0x0800a7a4

0800510c <Sub_Callback>:
    {
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 8005112:	ad06      	add	r5, sp, #24
 8005114:	2300      	movs	r3, #0
    int32_t rslt = 0;
 8005116:	4698      	mov	r8, r3
    uint16_t param_len = 0;
 8005118:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 800511c:	461c      	mov	r4, r3
    char str_to_int[11] = "0";
 800511e:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 8005120:	2301      	movs	r3, #1
    {
 8005122:	4606      	mov	r6, r0
 8005124:	468a      	mov	sl, r1
    uint8_t is_command_valid = 1;
 8005126:	9301      	str	r3, [sp, #4]
    char str_to_int[11] = "0";
 8005128:	f04f 0930 	mov.w	r9, #48	; 0x30
	param_number++; //param number, starting from first
 800512c:	1c63      	adds	r3, r4, #1
 800512e:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 8005132:	4659      	mov	r1, fp
 8005134:	462a      	mov	r2, r5
 8005136:	4630      	mov	r0, r6
 8005138:	f7ff fc46 	bl	80049c8 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 800513c:	2800      	cmp	r0, #0
 800513e:	f000 8083 	beq.w	8005248 <Sub_Callback+0x13c>
    char str_to_int[11] = "0";
 8005142:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8005146:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 800514a:	7802      	ldrb	r2, [r0, #0]
 800514c:	2a2d      	cmp	r2, #45	; 0x2d
 800514e:	bf03      	ittte	eq
 8005150:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 8005152:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 8005156:	3001      	addeq	r0, #1
    if (*param == '-')
 8005158:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 800515a:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800515e:	d067      	beq.n	8005230 <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005160:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005164:	2909      	cmp	r1, #9
 8005166:	d85f      	bhi.n	8005228 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005168:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 800516c:	7842      	ldrb	r2, [r0, #1]
 800516e:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005172:	d05d      	beq.n	8005230 <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005174:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005178:	2909      	cmp	r1, #9
 800517a:	d855      	bhi.n	8005228 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 800517c:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 8005180:	7882      	ldrb	r2, [r0, #2]
 8005182:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005186:	d053      	beq.n	8005230 <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005188:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800518c:	2909      	cmp	r1, #9
 800518e:	d84b      	bhi.n	8005228 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005190:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 8005194:	78c2      	ldrb	r2, [r0, #3]
 8005196:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800519a:	d049      	beq.n	8005230 <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 800519c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80051a0:	2909      	cmp	r1, #9
 80051a2:	d841      	bhi.n	8005228 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 80051a4:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 80051a8:	7902      	ldrb	r2, [r0, #4]
 80051aa:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80051ae:	d03f      	beq.n	8005230 <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80051b0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80051b4:	2909      	cmp	r1, #9
 80051b6:	d837      	bhi.n	8005228 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 80051b8:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 80051bc:	7942      	ldrb	r2, [r0, #5]
 80051be:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80051c2:	d035      	beq.n	8005230 <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80051c4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80051c8:	2909      	cmp	r1, #9
 80051ca:	d82d      	bhi.n	8005228 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 80051cc:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 80051d0:	7982      	ldrb	r2, [r0, #6]
 80051d2:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80051d6:	d02b      	beq.n	8005230 <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80051d8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80051dc:	2909      	cmp	r1, #9
 80051de:	d823      	bhi.n	8005228 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 80051e0:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 80051e4:	79c2      	ldrb	r2, [r0, #7]
 80051e6:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80051ea:	d021      	beq.n	8005230 <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80051ec:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80051f0:	2909      	cmp	r1, #9
 80051f2:	d819      	bhi.n	8005228 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 80051f4:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 80051f8:	7a02      	ldrb	r2, [r0, #8]
 80051fa:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80051fe:	d017      	beq.n	8005230 <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005200:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005204:	2909      	cmp	r1, #9
 8005206:	d80f      	bhi.n	8005228 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005208:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 800520c:	7a42      	ldrb	r2, [r0, #9]
 800520e:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005212:	d00d      	beq.n	8005230 <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005214:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005218:	2909      	cmp	r1, #9
 800521a:	d805      	bhi.n	8005228 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 800521c:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 8005220:	7a82      	ldrb	r2, [r0, #10]
 8005222:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8005226:	d003      	beq.n	8005230 <Sub_Callback+0x124>
		is_command_valid = 0;
 8005228:	2300      	movs	r3, #0
 800522a:	9301      	str	r3, [sp, #4]
	param_number++; //param number, starting from first
 800522c:	465c      	mov	r4, fp
 800522e:	e77d      	b.n	800512c <Sub_Callback+0x20>
	*value = sign * atoi(str_to_int);
 8005230:	a803      	add	r0, sp, #12
 8005232:	f000 fdfc 	bl	8005e2e <atoi>
		if (param_count == 1)
 8005236:	f1bb 0f01 	cmp.w	fp, #1
	*value = sign * atoi(str_to_int);
 800523a:	fb04 f000 	mul.w	r0, r4, r0
		if (param_count == 1)
 800523e:	d024      	beq.n	800528a <Sub_Callback+0x17e>
		    rslt -= tmp;
 8005240:	eba8 0800 	sub.w	r8, r8, r0
	param_number++; //param number, starting from first
 8005244:	465c      	mov	r4, fp
 8005246:	e771      	b.n	800512c <Sub_Callback+0x20>
    if (!param_count)
 8005248:	b10c      	cbz	r4, 800524e <Sub_Callback+0x142>
    if (is_command_valid)
 800524a:	9b01      	ldr	r3, [sp, #4]
 800524c:	bb03      	cbnz	r3, 8005290 <Sub_Callback+0x184>
    strcat(cli_tx_out_buffer, cmd1);
 800524e:	4650      	mov	r0, sl
 8005250:	f7fb f866 	bl	8000320 <strlen>
 8005254:	4c13      	ldr	r4, [pc, #76]	; (80052a4 <Sub_Callback+0x198>)
 8005256:	4605      	mov	r5, r0
 8005258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800525a:	eb0a 0705 	add.w	r7, sl, r5
 800525e:	f84a 0005 	str.w	r0, [sl, r5]
 8005262:	8824      	ldrh	r4, [r4, #0]
 8005264:	6079      	str	r1, [r7, #4]
 8005266:	f105 0012 	add.w	r0, r5, #18
 800526a:	60ba      	str	r2, [r7, #8]
 800526c:	60fb      	str	r3, [r7, #12]
 800526e:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 8005270:	4450      	add	r0, sl
 8005272:	4631      	mov	r1, r6
 8005274:	f000 fe3e 	bl	8005ef4 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 8005278:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <Sub_Callback+0x19c>)
 800527a:	881a      	ldrh	r2, [r3, #0]
 800527c:	789b      	ldrb	r3, [r3, #2]
 800527e:	8002      	strh	r2, [r0, #0]
 8005280:	7083      	strb	r3, [r0, #2]
    }
 8005282:	2000      	movs	r0, #0
 8005284:	b007      	add	sp, #28
 8005286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*value = sign * atoi(str_to_int);
 800528a:	4680      	mov	r8, r0
	param_number++; //param number, starting from first
 800528c:	465c      	mov	r4, fp
 800528e:	e74d      	b.n	800512c <Sub_Callback+0x20>
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 8005290:	4642      	mov	r2, r8
 8005292:	4650      	mov	r0, sl
 8005294:	4905      	ldr	r1, [pc, #20]	; (80052ac <Sub_Callback+0x1a0>)
 8005296:	f000 fe0d 	bl	8005eb4 <sprintf>
    }
 800529a:	2000      	movs	r0, #0
 800529c:	b007      	add	sp, #28
 800529e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052a2:	bf00      	nop
 80052a4:	0800a7ac 	.word	0x0800a7ac
 80052a8:	0800a7a8 	.word	0x0800a7a8
 80052ac:	0800a7a4 	.word	0x0800a7a4

080052b0 <Pow_Callback>:
    {
 80052b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052b4:	b089      	sub	sp, #36	; 0x24
    uint16_t param_len = 0;
 80052b6:	ae08      	add	r6, sp, #32
 80052b8:	2300      	movs	r3, #0
    int32_t rslt = 1;
 80052ba:	f04f 0901 	mov.w	r9, #1
    uint16_t param_len = 0;
 80052be:	f826 3d0e 	strh.w	r3, [r6, #-14]!
    uint8_t param_number = 0;
 80052c2:	461d      	mov	r5, r3
    {
 80052c4:	4607      	mov	r7, r0
 80052c6:	468b      	mov	fp, r1
    char str_to_int[11] = "0";
 80052c8:	4698      	mov	r8, r3
    uint8_t is_command_valid = 1;
 80052ca:	f8cd 9004 	str.w	r9, [sp, #4]
    char str_to_int[11] = "0";
 80052ce:	f04f 0a30 	mov.w	sl, #48	; 0x30
	param_number++; //param number, starting from first
 80052d2:	1c6c      	adds	r4, r5, #1
 80052d4:	b2e4      	uxtb	r4, r4
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 80052d6:	4621      	mov	r1, r4
 80052d8:	4632      	mov	r2, r6
 80052da:	4638      	mov	r0, r7
 80052dc:	f7ff fb74 	bl	80049c8 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 80052e0:	2800      	cmp	r0, #0
 80052e2:	f000 8092 	beq.w	800540a <Pow_Callback+0x15a>
    char str_to_int[11] = "0";
 80052e6:	e9cd a805 	strd	sl, r8, [sp, #20]
 80052ea:	f8cd 801b 	str.w	r8, [sp, #27]
    if (*param == '-')
 80052ee:	7803      	ldrb	r3, [r0, #0]
 80052f0:	2b2d      	cmp	r3, #45	; 0x2d
 80052f2:	bf03      	ittte	eq
 80052f4:	7843      	ldrbeq	r3, [r0, #1]
	param++;
 80052f6:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
 80052fa:	3001      	addeq	r0, #1
    if (*param == '-')
 80052fc:	2501      	movne	r5, #1
    while (*param != '\0' && *param != ' ')
 80052fe:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8005302:	d067      	beq.n	80053d4 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005304:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005308:	2a09      	cmp	r2, #9
 800530a:	d85f      	bhi.n	80053cc <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 800530c:	f88d 3014 	strb.w	r3, [sp, #20]
    while (*param != '\0' && *param != ' ')
 8005310:	7843      	ldrb	r3, [r0, #1]
 8005312:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8005316:	d05d      	beq.n	80053d4 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005318:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800531c:	2a09      	cmp	r2, #9
 800531e:	d855      	bhi.n	80053cc <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005320:	f88d 3015 	strb.w	r3, [sp, #21]
    while (*param != '\0' && *param != ' ')
 8005324:	7883      	ldrb	r3, [r0, #2]
 8005326:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 800532a:	d053      	beq.n	80053d4 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 800532c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005330:	2a09      	cmp	r2, #9
 8005332:	d84b      	bhi.n	80053cc <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005334:	f88d 3016 	strb.w	r3, [sp, #22]
    while (*param != '\0' && *param != ' ')
 8005338:	78c3      	ldrb	r3, [r0, #3]
 800533a:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 800533e:	d049      	beq.n	80053d4 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005340:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005344:	2a09      	cmp	r2, #9
 8005346:	d841      	bhi.n	80053cc <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005348:	f88d 3017 	strb.w	r3, [sp, #23]
    while (*param != '\0' && *param != ' ')
 800534c:	7903      	ldrb	r3, [r0, #4]
 800534e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8005352:	d03f      	beq.n	80053d4 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005354:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005358:	2a09      	cmp	r2, #9
 800535a:	d837      	bhi.n	80053cc <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 800535c:	f88d 3018 	strb.w	r3, [sp, #24]
    while (*param != '\0' && *param != ' ')
 8005360:	7943      	ldrb	r3, [r0, #5]
 8005362:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8005366:	d035      	beq.n	80053d4 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005368:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800536c:	2a09      	cmp	r2, #9
 800536e:	d82d      	bhi.n	80053cc <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005370:	f88d 3019 	strb.w	r3, [sp, #25]
    while (*param != '\0' && *param != ' ')
 8005374:	7983      	ldrb	r3, [r0, #6]
 8005376:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 800537a:	d02b      	beq.n	80053d4 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 800537c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005380:	2a09      	cmp	r2, #9
 8005382:	d823      	bhi.n	80053cc <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005384:	f88d 301a 	strb.w	r3, [sp, #26]
    while (*param != '\0' && *param != ' ')
 8005388:	79c3      	ldrb	r3, [r0, #7]
 800538a:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 800538e:	d021      	beq.n	80053d4 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8005390:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8005394:	2a09      	cmp	r2, #9
 8005396:	d819      	bhi.n	80053cc <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8005398:	f88d 301b 	strb.w	r3, [sp, #27]
    while (*param != '\0' && *param != ' ')
 800539c:	7a03      	ldrb	r3, [r0, #8]
 800539e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80053a2:	d017      	beq.n	80053d4 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80053a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80053a8:	2a09      	cmp	r2, #9
 80053aa:	d80f      	bhi.n	80053cc <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 80053ac:	f88d 301c 	strb.w	r3, [sp, #28]
    while (*param != '\0' && *param != ' ')
 80053b0:	7a43      	ldrb	r3, [r0, #9]
 80053b2:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80053b6:	d00d      	beq.n	80053d4 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80053b8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80053bc:	2a09      	cmp	r2, #9
 80053be:	d805      	bhi.n	80053cc <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 80053c0:	f88d 301d 	strb.w	r3, [sp, #29]
    while (*param != '\0' && *param != ' ')
 80053c4:	7a83      	ldrb	r3, [r0, #10]
 80053c6:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80053ca:	d003      	beq.n	80053d4 <Pow_Callback+0x124>
		is_command_valid = 0;
 80053cc:	2300      	movs	r3, #0
 80053ce:	9301      	str	r3, [sp, #4]
	param_number++; //param number, starting from first
 80053d0:	4625      	mov	r5, r4
 80053d2:	e77e      	b.n	80052d2 <Pow_Callback+0x22>
	*value = sign * atoi(str_to_int);
 80053d4:	a805      	add	r0, sp, #20
 80053d6:	f000 fd2a 	bl	8005e2e <atoi>
		if (param_count == 1)
 80053da:	2c01      	cmp	r4, #1
	*value = sign * atoi(str_to_int);
 80053dc:	fb05 f000 	mul.w	r0, r5, r0
		if (param_count == 1)
 80053e0:	d035      	beq.n	800544e <Pow_Callback+0x19e>
		    rslt = pow(rslt, tmp);
 80053e2:	f7fb f947 	bl	8000674 <__aeabi_i2d>
 80053e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053ea:	4648      	mov	r0, r9
 80053ec:	f7fb f942 	bl	8000674 <__aeabi_i2d>
 80053f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80053f4:	ec41 0b10 	vmov	d0, r0, r1
 80053f8:	f003 fffa 	bl	80093f0 <pow>
 80053fc:	ec51 0b10 	vmov	r0, r1, d0
 8005400:	f7fb fc52 	bl	8000ca8 <__aeabi_d2iz>
	param_number++; //param number, starting from first
 8005404:	4625      	mov	r5, r4
		    rslt = pow(rslt, tmp);
 8005406:	4681      	mov	r9, r0
 8005408:	e763      	b.n	80052d2 <Pow_Callback+0x22>
    if (param_count != 2)
 800540a:	2d02      	cmp	r5, #2
 800540c:	d101      	bne.n	8005412 <Pow_Callback+0x162>
    if (is_command_valid)
 800540e:	9b01      	ldr	r3, [sp, #4]
 8005410:	bb03      	cbnz	r3, 8005454 <Pow_Callback+0x1a4>
    strcat(cli_tx_out_buffer, cmd1);
 8005412:	4658      	mov	r0, fp
 8005414:	f7fa ff84 	bl	8000320 <strlen>
 8005418:	4c13      	ldr	r4, [pc, #76]	; (8005468 <Pow_Callback+0x1b8>)
 800541a:	4605      	mov	r5, r0
 800541c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800541e:	eb0b 0605 	add.w	r6, fp, r5
 8005422:	f84b 0005 	str.w	r0, [fp, r5]
 8005426:	8824      	ldrh	r4, [r4, #0]
 8005428:	6071      	str	r1, [r6, #4]
 800542a:	f105 0012 	add.w	r0, r5, #18
 800542e:	60b2      	str	r2, [r6, #8]
 8005430:	60f3      	str	r3, [r6, #12]
 8005432:	8234      	strh	r4, [r6, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 8005434:	4458      	add	r0, fp
 8005436:	4639      	mov	r1, r7
 8005438:	f000 fd5c 	bl	8005ef4 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 800543c:	4b0b      	ldr	r3, [pc, #44]	; (800546c <Pow_Callback+0x1bc>)
 800543e:	881a      	ldrh	r2, [r3, #0]
 8005440:	789b      	ldrb	r3, [r3, #2]
 8005442:	8002      	strh	r2, [r0, #0]
 8005444:	7083      	strb	r3, [r0, #2]
    }
 8005446:	2000      	movs	r0, #0
 8005448:	b009      	add	sp, #36	; 0x24
 800544a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*value = sign * atoi(str_to_int);
 800544e:	4681      	mov	r9, r0
	param_number++; //param number, starting from first
 8005450:	4625      	mov	r5, r4
 8005452:	e73e      	b.n	80052d2 <Pow_Callback+0x22>
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 8005454:	464a      	mov	r2, r9
 8005456:	4658      	mov	r0, fp
 8005458:	4905      	ldr	r1, [pc, #20]	; (8005470 <Pow_Callback+0x1c0>)
 800545a:	f000 fd2b 	bl	8005eb4 <sprintf>
    }
 800545e:	2000      	movs	r0, #0
 8005460:	b009      	add	sp, #36	; 0x24
 8005462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005466:	bf00      	nop
 8005468:	0800a7ac 	.word	0x0800a7ac
 800546c:	0800a7a8 	.word	0x0800a7a8
 8005470:	0800a7a4 	.word	0x0800a7a4

08005474 <CLI_Add_All_Commands>:
    {
 8005474:	b500      	push	{lr}
    CLI_Add_Cammand(&Add_Defination);
 8005476:	4816      	ldr	r0, [pc, #88]	; (80054d0 <CLI_Add_All_Commands+0x5c>)
    {
 8005478:	b08d      	sub	sp, #52	; 0x34
    CLI_Add_Cammand(&Add_Defination);
 800547a:	f7ff fa51 	bl	8004920 <CLI_Add_Cammand>
    CLI_Add_Cammand(&Sub_Defination);
 800547e:	4815      	ldr	r0, [pc, #84]	; (80054d4 <CLI_Add_All_Commands+0x60>)
 8005480:	f7ff fa4e 	bl	8004920 <CLI_Add_Cammand>
    CLI_Add_Cammand(&Mul_Defination);
 8005484:	4814      	ldr	r0, [pc, #80]	; (80054d8 <CLI_Add_All_Commands+0x64>)
 8005486:	f7ff fa4b 	bl	8004920 <CLI_Add_Cammand>
    CLI_Add_Cammand(&Div_Defination);
 800548a:	4814      	ldr	r0, [pc, #80]	; (80054dc <CLI_Add_All_Commands+0x68>)
 800548c:	f7ff fa48 	bl	8004920 <CLI_Add_Cammand>
    CLI_Add_Cammand(&Pow_Defination);
 8005490:	4813      	ldr	r0, [pc, #76]	; (80054e0 <CLI_Add_All_Commands+0x6c>)
 8005492:	f7ff fa45 	bl	8004920 <CLI_Add_Cammand>
    CLI_Add_Cammand(&Sqrt_Defination);
 8005496:	4813      	ldr	r0, [pc, #76]	; (80054e4 <CLI_Add_All_Commands+0x70>)
 8005498:	f7ff fa42 	bl	8004920 <CLI_Add_Cammand>
    OSTaskCreate(&UART_Task_TCB,                               /* Create the startup task                              */
 800549c:	4b12      	ldr	r3, [pc, #72]	; (80054e8 <CLI_Add_All_Commands+0x74>)
 800549e:	9301      	str	r3, [sp, #4]
 80054a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054a2:	9302      	str	r3, [sp, #8]
 80054a4:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
 80054a8:	2300      	movs	r3, #0
 80054aa:	2203      	movs	r2, #3
 80054ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054b0:	e9cd 2007 	strd	r2, r0, [sp, #28]
 80054b4:	9200      	str	r2, [sp, #0]
 80054b6:	e9cd 1303 	strd	r1, r3, [sp, #12]
 80054ba:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80054be:	4a0b      	ldr	r2, [pc, #44]	; (80054ec <CLI_Add_All_Commands+0x78>)
 80054c0:	490b      	ldr	r1, [pc, #44]	; (80054f0 <CLI_Add_All_Commands+0x7c>)
 80054c2:	480c      	ldr	r0, [pc, #48]	; (80054f4 <CLI_Add_All_Commands+0x80>)
 80054c4:	f7fe fbec 	bl	8003ca0 <OSTaskCreate>
    }
 80054c8:	b00d      	add	sp, #52	; 0x34
 80054ca:	f85d fb04 	ldr.w	pc, [sp], #4
 80054ce:	bf00      	nop
 80054d0:	20000018 	.word	0x20000018
 80054d4:	20000068 	.word	0x20000068
 80054d8:	20000038 	.word	0x20000038
 80054dc:	20000028 	.word	0x20000028
 80054e0:	20000048 	.word	0x20000048
 80054e4:	20000058 	.word	0x20000058
 80054e8:	20000b1c 	.word	0x20000b1c
 80054ec:	08004a55 	.word	0x08004a55
 80054f0:	0800a8e8 	.word	0x0800a8e8
 80054f4:	20000f1c 	.word	0x20000f1c

080054f8 <CLI_UART_Thread_Add>:
OS_MUTEX CLI_UART_Mutex;



void CLI_UART_Thread_Add()
    {
 80054f8:	b510      	push	{r4, lr}
 80054fa:	b08c      	sub	sp, #48	; 0x30

    OS_ERR  os_err;

    OSMutexCreate((OS_MUTEX*)&CLI_UART_Mutex,
 80054fc:	f10d 042e 	add.w	r4, sp, #46	; 0x2e
 8005500:	4622      	mov	r2, r4
 8005502:	490e      	ldr	r1, [pc, #56]	; (800553c <CLI_UART_Thread_Add+0x44>)
 8005504:	480e      	ldr	r0, [pc, #56]	; (8005540 <CLI_UART_Thread_Add+0x48>)
 8005506:	f7fe f97f 	bl	8003808 <OSMutexCreate>
		  (CPU_CHAR*)"CLI_UART_Mutex",
		  (OS_ERR*	) &os_err);


    OSTaskCreate(&CLI_UART_Task_TCB,                               /* Create the startup task                              */
 800550a:	4b0e      	ldr	r3, [pc, #56]	; (8005544 <CLI_UART_Thread_Add+0x4c>)
 800550c:	9408      	str	r4, [sp, #32]
 800550e:	f8d3 40cc 	ldr.w	r4, [r3, #204]	; 0xcc
 8005512:	9301      	str	r3, [sp, #4]
 8005514:	2003      	movs	r0, #3
 8005516:	2300      	movs	r3, #0
 8005518:	f44f 7100 	mov.w	r1, #512	; 0x200
 800551c:	2202      	movs	r2, #2
 800551e:	e9cd 3006 	strd	r3, r0, [sp, #24]
 8005522:	9103      	str	r1, [sp, #12]
 8005524:	9200      	str	r2, [sp, #0]
 8005526:	9402      	str	r4, [sp, #8]
 8005528:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800552c:	4a06      	ldr	r2, [pc, #24]	; (8005548 <CLI_UART_Thread_Add+0x50>)
 800552e:	4907      	ldr	r1, [pc, #28]	; (800554c <CLI_UART_Thread_Add+0x54>)
 8005530:	4807      	ldr	r0, [pc, #28]	; (8005550 <CLI_UART_Thread_Add+0x58>)
 8005532:	f7fe fbb5 	bl	8003ca0 <OSTaskCreate>
                  0u,
                  0u,
                  0u,
                  (OS_OPT_TASK_STK_CHK | OS_OPT_TASK_STK_CLR),
                  &os_err);
    }
 8005536:	b00c      	add	sp, #48	; 0x30
 8005538:	bd10      	pop	{r4, pc}
 800553a:	bf00      	nop
 800553c:	0800a8d4 	.word	0x0800a8d4
 8005540:	20003818 	.word	0x20003818
 8005544:	200010dc 	.word	0x200010dc
 8005548:	08005599 	.word	0x08005599
 800554c:	0800a8e4 	.word	0x0800a8e4
 8005550:	200018dc 	.word	0x200018dc

08005554 <CLI_UART_Send_String>:

void CLI_UART_Send_Char(char data)
    {
    CLI_UART->Instance->DR = (data);
 8005554:	4b08      	ldr	r3, [pc, #32]	; (8005578 <CLI_UART_Send_String+0x24>)
    while (__HAL_UART_GET_FLAG(CLI_UART,UART_FLAG_TC) == 0)
	;
    }

void CLI_UART_Send_String(char* data)
    {
 8005556:	b410      	push	{r4}
    CLI_UART->Instance->DR = (data);
 8005558:	681c      	ldr	r4, [r3, #0]
 800555a:	1e41      	subs	r1, r0, #1
 800555c:	307f      	adds	r0, #127	; 0x7f
    uint16_t count = 0;
    while (*data)
 800555e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005562:	b133      	cbz	r3, 8005572 <CLI_UART_Send_String+0x1e>
    CLI_UART->Instance->DR = (data);
 8005564:	6822      	ldr	r2, [r4, #0]
 8005566:	6053      	str	r3, [r2, #4]
    while (__HAL_UART_GET_FLAG(CLI_UART,UART_FLAG_TC) == 0)
 8005568:	6813      	ldr	r3, [r2, #0]
 800556a:	065b      	lsls	r3, r3, #25
 800556c:	d5fc      	bpl.n	8005568 <CLI_UART_Send_String+0x14>
	{
	CLI_UART_Send_Char(*data++);
	count++;
	if (count == OUTPUT_BUFFER_SIZE)
 800556e:	4281      	cmp	r1, r0
 8005570:	d1f5      	bne.n	800555e <CLI_UART_Send_String+0xa>
	    {
	    break;
	    }
	}
    }
 8005572:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	20000078 	.word	0x20000078

0800557c <CLI_UART_Send_String_DMA>:

void CLI_UART_Send_String_DMA(const char* data)
    {
 800557c:	b510      	push	{r4, lr}
 800557e:	4604      	mov	r4, r0
    HAL_UART_Transmit_DMA(CLI_UART, (uint8_t*) data, strlen(data));
 8005580:	f7fa fece 	bl	8000320 <strlen>
 8005584:	4b03      	ldr	r3, [pc, #12]	; (8005594 <CLI_UART_Send_String_DMA+0x18>)
 8005586:	b282      	uxth	r2, r0
 8005588:	4621      	mov	r1, r4
 800558a:	6818      	ldr	r0, [r3, #0]
    }
 800558c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit_DMA(CLI_UART, (uint8_t*) data, strlen(data));
 8005590:	f7fd b80a 	b.w	80025a8 <HAL_UART_Transmit_DMA>
 8005594:	20000078 	.word	0x20000078

08005598 <CLI_UART_Task>:
    sprintf(int_to_str, "%0.2f", num);
    CLI_UART_Send_String(int_to_str);
    }

static void CLI_UART_Task(void* argument)
    {
 8005598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800559c:	b087      	sub	sp, #28
    OS_ERR  os_err;

    //static uint8_t rx_char_count; // function variable, must be static in polling mode
    uint8_t rx_char_count = 0; // task variable need not to be static
    uint8_t call_again = 0;
    char rx_char = 0;
 800559e:	2400      	movs	r4, #0
    CLI_Add_All_Commands();

    Ring_Buffer_Init(&UART_Ring_Buffer_Handle, UART_DMA_RX_Buffer,
    UART_RING_BUFFER_SIZE);

    HAL_UART_Receive_DMA(CLI_UART, (uint8_t*) UART_DMA_RX_Buffer,
 80055a0:	f8df b1cc 	ldr.w	fp, [pc, #460]	; 8005770 <CLI_UART_Task+0x1d8>
    char rx_char = 0;
 80055a4:	f88d 4015 	strb.w	r4, [sp, #21]
    CLI_Add_Help_Cammand();
 80055a8:	f7ff fa3e 	bl	8004a28 <CLI_Add_Help_Cammand>
    CLI_Add_All_Commands();
 80055ac:	f7ff ff62 	bl	8005474 <CLI_Add_All_Commands>
    Ring_Buffer_Init(&UART_Ring_Buffer_Handle, UART_DMA_RX_Buffer,
 80055b0:	2280      	movs	r2, #128	; 0x80
 80055b2:	4966      	ldr	r1, [pc, #408]	; (800574c <CLI_UART_Task+0x1b4>)
 80055b4:	4866      	ldr	r0, [pc, #408]	; (8005750 <CLI_UART_Task+0x1b8>)
 80055b6:	4d67      	ldr	r5, [pc, #412]	; (8005754 <CLI_UART_Task+0x1bc>)
 80055b8:	4f67      	ldr	r7, [pc, #412]	; (8005758 <CLI_UART_Task+0x1c0>)
 80055ba:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 8005774 <CLI_UART_Task+0x1dc>

	/*data is written to buffer via uart DMA in background*/
	/* need to update Write_Index manually */
	UPDATE_RING_BUFFER();

	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 80055be:	4e64      	ldr	r6, [pc, #400]	; (8005750 <CLI_UART_Task+0x1b8>)
	    else //else update command buffer
		{

		if (!rx_char_count)
		    {
		    memset(CLI_CMD_Buffer, 0x00, INPUT_BUFFER_SIZE); //reset cmd buffer
 80055c0:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8005764 <CLI_UART_Task+0x1cc>
    Ring_Buffer_Init(&UART_Ring_Buffer_Handle, UART_DMA_RX_Buffer,
 80055c4:	f000 fa4a 	bl	8005a5c <Ring_Buffer_Init>
    HAL_UART_Receive_DMA(CLI_UART, (uint8_t*) UART_DMA_RX_Buffer,
 80055c8:	4960      	ldr	r1, [pc, #384]	; (800574c <CLI_UART_Task+0x1b4>)
 80055ca:	f8db 0000 	ldr.w	r0, [fp]
 80055ce:	2280      	movs	r2, #128	; 0x80
 80055d0:	f7fd f826 	bl	8002620 <HAL_UART_Receive_DMA>
    __HAL_UART_ENABLE_IT(CLI_UART, UART_IT_IDLE);
 80055d4:	f8db 3000 	ldr.w	r3, [fp]
    OSMutexPend(&CLI_UART_Mutex,0,OS_OPT_PEND_BLOCKING,0,&os_err);
 80055d8:	4860      	ldr	r0, [pc, #384]	; (800575c <CLI_UART_Task+0x1c4>)
    __HAL_UART_ENABLE_IT(CLI_UART, UART_IT_IDLE);
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	68d3      	ldr	r3, [r2, #12]
    OSMutexPend(&CLI_UART_Mutex,0,OS_OPT_PEND_BLOCKING,0,&os_err);
 80055de:	f10d 0a16 	add.w	sl, sp, #22
    __HAL_UART_ENABLE_IT(CLI_UART, UART_IT_IDLE);
 80055e2:	f043 0310 	orr.w	r3, r3, #16
 80055e6:	60d3      	str	r3, [r2, #12]
    OSMutexPend(&CLI_UART_Mutex,0,OS_OPT_PEND_BLOCKING,0,&os_err);
 80055e8:	4621      	mov	r1, r4
 80055ea:	4623      	mov	r3, r4
 80055ec:	4622      	mov	r2, r4
 80055ee:	f8cd a000 	str.w	sl, [sp]
 80055f2:	f7fe f949 	bl	8003888 <OSMutexPend>
    CLI_UART_Send_String_DMA(pcWelcomeMessage);
 80055f6:	485a      	ldr	r0, [pc, #360]	; (8005760 <CLI_UART_Task+0x1c8>)
 80055f8:	f7ff ffc0 	bl	800557c <CLI_UART_Send_String_DMA>
    OSTaskSemPend(0,OS_OPT_PEND_BLOCKING,0,&os_err);
 80055fc:	4653      	mov	r3, sl
 80055fe:	4622      	mov	r2, r4
 8005600:	4621      	mov	r1, r4
 8005602:	4620      	mov	r0, r4
 8005604:	f7fe fc7e 	bl	8003f04 <OSTaskSemPend>
	OSMutexPost(&CLI_UART_Mutex,OS_OPT_POST_NONE,&os_err);
 8005608:	4652      	mov	r2, sl
 800560a:	2100      	movs	r1, #0
 800560c:	4853      	ldr	r0, [pc, #332]	; (800575c <CLI_UART_Task+0x1c4>)
 800560e:	f7fe fa17 	bl	8003a40 <OSMutexPost>
	OSTaskSemPend(0,OS_OPT_PEND_BLOCKING,0,&os_err);
 8005612:	2200      	movs	r2, #0
 8005614:	4611      	mov	r1, r2
 8005616:	4653      	mov	r3, sl
 8005618:	4610      	mov	r0, r2
 800561a:	f7fe fc73 	bl	8003f04 <OSTaskSemPend>
	OSMutexPend(&CLI_UART_Mutex,0,OS_OPT_PEND_BLOCKING,0,&os_err);
 800561e:	2300      	movs	r3, #0
 8005620:	461a      	mov	r2, r3
 8005622:	4619      	mov	r1, r3
 8005624:	f8cd a000 	str.w	sl, [sp]
 8005628:	484c      	ldr	r0, [pc, #304]	; (800575c <CLI_UART_Task+0x1c4>)
 800562a:	f7fe f92d 	bl	8003888 <OSMutexPend>
	UPDATE_RING_BUFFER();
 800562e:	f8db 3000 	ldr.w	r3, [fp]
 8005632:	4a47      	ldr	r2, [pc, #284]	; (8005750 <CLI_UART_Task+0x1b8>)
 8005634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800563e:	8093      	strh	r3, [r2, #4]
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8005640:	4630      	mov	r0, r6
 8005642:	f000 fa2b 	bl	8005a9c <Ring_Buffer_Get_Count>
 8005646:	2800      	cmp	r0, #0
 8005648:	d0de      	beq.n	8005608 <CLI_UART_Task+0x70>
	    Ring_Buffer_Get_Char(&UART_Ring_Buffer_Handle, &rx_char);
 800564a:	f10d 0115 	add.w	r1, sp, #21
 800564e:	4630      	mov	r0, r6
 8005650:	f000 fa0a 	bl	8005a68 <Ring_Buffer_Get_Char>
	    if (rx_char == '\r')
 8005654:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8005658:	2b0d      	cmp	r3, #13
 800565a:	d026      	beq.n	80056aa <CLI_UART_Task+0x112>
		if (!rx_char_count)
 800565c:	b19c      	cbz	r4, 8005686 <CLI_UART_Task+0xee>
		    }

		if ((rx_char == '\b') || (rx_char == 0x7F)) // backspace or delete
 800565e:	2b08      	cmp	r3, #8
 8005660:	d01c      	beq.n	800569c <CLI_UART_Task+0x104>
 8005662:	2b7f      	cmp	r3, #127	; 0x7f
 8005664:	d01a      	beq.n	800569c <CLI_UART_Task+0x104>
			}
		    }
		else
		    {
		    // accumulate characters in input buffer
		    if ((rx_char >= ' ') && (rx_char <= '~'))
 8005666:	f1a3 0220 	sub.w	r2, r3, #32
 800566a:	2a5e      	cmp	r2, #94	; 0x5e
 800566c:	d8e8      	bhi.n	8005640 <CLI_UART_Task+0xa8>
			{
			if (rx_char_count < INPUT_BUFFER_SIZE)
 800566e:	0622      	lsls	r2, r4, #24
 8005670:	d4e6      	bmi.n	8005640 <CLI_UART_Task+0xa8>
			    {
			    CLI_CMD_Buffer[rx_char_count] = rx_char;
 8005672:	493c      	ldr	r1, [pc, #240]	; (8005764 <CLI_UART_Task+0x1cc>)
			    rx_char_count++;
 8005674:	1c62      	adds	r2, r4, #1
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8005676:	4630      	mov	r0, r6
			    CLI_CMD_Buffer[rx_char_count] = rx_char;
 8005678:	550b      	strb	r3, [r1, r4]
			    rx_char_count++;
 800567a:	b2d4      	uxtb	r4, r2
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 800567c:	f000 fa0e 	bl	8005a9c <Ring_Buffer_Get_Count>
 8005680:	2800      	cmp	r0, #0
 8005682:	d1e2      	bne.n	800564a <CLI_UART_Task+0xb2>
 8005684:	e7c0      	b.n	8005608 <CLI_UART_Task+0x70>
		    memset(CLI_CMD_Buffer, 0x00, INPUT_BUFFER_SIZE); //reset cmd buffer
 8005686:	2280      	movs	r2, #128	; 0x80
 8005688:	4621      	mov	r1, r4
 800568a:	4648      	mov	r0, r9
 800568c:	9303      	str	r3, [sp, #12]
 800568e:	f000 fc08 	bl	8005ea2 <memset>
		if ((rx_char == '\b') || (rx_char == 0x7F)) // backspace or delete
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	2b08      	cmp	r3, #8
 8005696:	d150      	bne.n	800573a <CLI_UART_Task+0x1a2>
		rx_char_count = 0; //reset CLI_CMD_Buffer index
 8005698:	2400      	movs	r4, #0
 800569a:	e7d1      	b.n	8005640 <CLI_UART_Task+0xa8>
			rx_char_count--;
 800569c:	3c01      	subs	r4, #1
 800569e:	b2e4      	uxtb	r4, r4
			CLI_CMD_Buffer[rx_char_count] = '\0';
 80056a0:	4b30      	ldr	r3, [pc, #192]	; (8005764 <CLI_UART_Task+0x1cc>)
 80056a2:	f04f 0200 	mov.w	r2, #0
 80056a6:	551a      	strb	r2, [r3, r4]
 80056a8:	e7ca      	b.n	8005640 <CLI_UART_Task+0xa8>
		Ring_Buffer_Get_Char(&UART_Ring_Buffer_Handle, &rx_char); //remove \n, if there is
 80056aa:	f10d 0115 	add.w	r1, sp, #21
 80056ae:	4630      	mov	r0, r6
 80056b0:	f000 f9da 	bl	8005a68 <Ring_Buffer_Get_Char>
		Ring_Buffer_Flush(&UART_Ring_Buffer_Handle); //reset ring buffer
 80056b4:	4630      	mov	r0, r6
 80056b6:	f000 f9ed 	bl	8005a94 <Ring_Buffer_Flush>
		    memset(CLI_Output_Buffer, 0x00, OUTPUT_BUFFER_SIZE); //reset output buffer
 80056ba:	2280      	movs	r2, #128	; 0x80
 80056bc:	2100      	movs	r1, #0
 80056be:	4628      	mov	r0, r5
 80056c0:	f000 fbef 	bl	8005ea2 <memset>
		    call_again = CLI_Process_Cammand(CLI_CMD_Buffer,
 80056c4:	2280      	movs	r2, #128	; 0x80
 80056c6:	4629      	mov	r1, r5
 80056c8:	4648      	mov	r0, r9
 80056ca:	f7ff f941 	bl	8004950 <CLI_Process_Cammand>
		    if (CLI_Output_Buffer[0] != '\0')
 80056ce:	782b      	ldrb	r3, [r5, #0]
		    call_again = CLI_Process_Cammand(CLI_CMD_Buffer,
 80056d0:	4604      	mov	r4, r0
		    if (CLI_Output_Buffer[0] != '\0')
 80056d2:	b98b      	cbnz	r3, 80056f8 <CLI_UART_Task+0x160>
		while (call_again);
 80056d4:	2c00      	cmp	r4, #0
 80056d6:	d1f0      	bne.n	80056ba <CLI_UART_Task+0x122>
    CLI_UART->Instance->DR = (data);
 80056d8:	f8db 3000 	ldr.w	r3, [fp]
 80056dc:	4922      	ldr	r1, [pc, #136]	; (8005768 <CLI_UART_Task+0x1d0>)
 80056de:	681a      	ldr	r2, [r3, #0]
    while (*data)
 80056e0:	230a      	movs	r3, #10
    CLI_UART->Instance->DR = (data);
 80056e2:	6053      	str	r3, [r2, #4]
    while (__HAL_UART_GET_FLAG(CLI_UART,UART_FLAG_TC) == 0)
 80056e4:	6813      	ldr	r3, [r2, #0]
 80056e6:	0658      	lsls	r0, r3, #25
 80056e8:	d5fc      	bpl.n	80056e4 <CLI_UART_Task+0x14c>
	if (count == OUTPUT_BUFFER_SIZE)
 80056ea:	4588      	cmp	r8, r1
 80056ec:	d0d4      	beq.n	8005698 <CLI_UART_Task+0x100>
    while (*data)
 80056ee:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f5      	bne.n	80056e2 <CLI_UART_Task+0x14a>
 80056f6:	e7cf      	b.n	8005698 <CLI_UART_Task+0x100>
    HAL_UART_Transmit_DMA(CLI_UART, (uint8_t*) data, strlen(data));
 80056f8:	4628      	mov	r0, r5
 80056fa:	f7fa fe11 	bl	8000320 <strlen>
 80056fe:	4629      	mov	r1, r5
 8005700:	b282      	uxth	r2, r0
 8005702:	f8db 0000 	ldr.w	r0, [fp]
 8005706:	f7fc ff4f 	bl	80025a8 <HAL_UART_Transmit_DMA>
			OSTaskSemPend(0,OS_OPT_PEND_BLOCKING,0,&os_err);
 800570a:	2200      	movs	r2, #0
 800570c:	4611      	mov	r1, r2
 800570e:	4653      	mov	r3, sl
 8005710:	4610      	mov	r0, r2
 8005712:	f7fe fbf7 	bl	8003f04 <OSTaskSemPend>
    CLI_UART->Instance->DR = (data);
 8005716:	f8db 3000 	ldr.w	r3, [fp]
 800571a:	4914      	ldr	r1, [pc, #80]	; (800576c <CLI_UART_Task+0x1d4>)
 800571c:	681a      	ldr	r2, [r3, #0]
    while (*data)
 800571e:	230a      	movs	r3, #10
    CLI_UART->Instance->DR = (data);
 8005720:	6053      	str	r3, [r2, #4]
    while (__HAL_UART_GET_FLAG(CLI_UART,UART_FLAG_TC) == 0)
 8005722:	6813      	ldr	r3, [r2, #0]
 8005724:	065b      	lsls	r3, r3, #25
 8005726:	d5fc      	bpl.n	8005722 <CLI_UART_Task+0x18a>
	if (count == OUTPUT_BUFFER_SIZE)
 8005728:	42b9      	cmp	r1, r7
 800572a:	d0d3      	beq.n	80056d4 <CLI_UART_Task+0x13c>
    while (*data)
 800572c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1f5      	bne.n	8005720 <CLI_UART_Task+0x188>
		while (call_again);
 8005734:	2c00      	cmp	r4, #0
 8005736:	d1c0      	bne.n	80056ba <CLI_UART_Task+0x122>
 8005738:	e7ce      	b.n	80056d8 <CLI_UART_Task+0x140>
		if ((rx_char == '\b') || (rx_char == 0x7F)) // backspace or delete
 800573a:	2b7f      	cmp	r3, #127	; 0x7f
 800573c:	d0ac      	beq.n	8005698 <CLI_UART_Task+0x100>
		    if ((rx_char >= ' ') && (rx_char <= '~'))
 800573e:	f1a3 0220 	sub.w	r2, r3, #32
 8005742:	2a5e      	cmp	r2, #94	; 0x5e
 8005744:	f63f af7c 	bhi.w	8005640 <CLI_UART_Task+0xa8>
 8005748:	e793      	b.n	8005672 <CLI_UART_Task+0xda>
 800574a:	bf00      	nop
 800574c:	2000199c 	.word	0x2000199c
 8005750:	20001a1c 	.word	0x20001a1c
 8005754:	2000105c 	.word	0x2000105c
 8005758:	0800a977 	.word	0x0800a977
 800575c:	20003818 	.word	0x20003818
 8005760:	0800a898 	.word	0x0800a898
 8005764:	20000fdc 	.word	0x20000fdc
 8005768:	0800a8f4 	.word	0x0800a8f4
 800576c:	0800a8f8 	.word	0x0800a8f8
 8005770:	20000078 	.word	0x20000078
 8005774:	0800a973 	.word	0x0800a973

08005778 <HAL_UART_TxCpltCallback>:
         // the interrupt has ended
         OSIntExit();
    }

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
    {
 8005778:	b510      	push	{r4, lr}
 800577a:	b082      	sub	sp, #8
         CPU_CRITICAL_ENTER();
 800577c:	f7fa fd34 	bl	80001e8 <CPU_SR_Save>
 8005780:	4604      	mov	r4, r0
         OSIntEnter();
 8005782:	f7fd fae3 	bl	8002d4c <OSIntEnter>
         CPU_CRITICAL_EXIT();
 8005786:	4620      	mov	r0, r4
 8005788:	f7fa fd32 	bl	80001f0 <CPU_SR_Restore>
         OSTaskSemPost(&CLI_UART_Task_TCB,OS_OPT_PEND_BLOCKING,&os_err);
 800578c:	f10d 0206 	add.w	r2, sp, #6
 8005790:	2100      	movs	r1, #0
 8005792:	4803      	ldr	r0, [pc, #12]	; (80057a0 <HAL_UART_TxCpltCallback+0x28>)
 8005794:	f7fe fc62 	bl	800405c <OSTaskSemPost>
         OSIntExit();
 8005798:	f7fd fae8 	bl	8002d6c <OSIntExit>
    CLI_UART_Task_Wakeup();
    }
 800579c:	b002      	add	sp, #8
 800579e:	bd10      	pop	{r4, pc}
 80057a0:	200018dc 	.word	0x200018dc

080057a4 <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
    {

    }
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop

080057a8 <CLI_UART_RX_ISR>:

void CLI_UART_RX_ISR()
    {

    if (__HAL_UART_GET_IT_SOURCE(CLI_UART, UART_IT_IDLE))
 80057a8:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <CLI_UART_RX_ISR+0x3c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	68da      	ldr	r2, [r3, #12]
 80057b0:	06d2      	lsls	r2, r2, #27
 80057b2:	d400      	bmi.n	80057b6 <CLI_UART_RX_ISR+0xe>
 80057b4:	4770      	bx	lr
    {
 80057b6:	b510      	push	{r4, lr}
 80057b8:	b082      	sub	sp, #8
	 PE (Parity error), FE (Framing error), NE (Noise error), ORE (Overrun
	 error) and IDLE (Idle line detected) flags are cleared by software
	 sequence: a read operation to USART_SR register followed by a read
	 operation to USART_DR register.
	 */
	(void) __HAL_UART_GET_FLAG(CLI_UART, UART_FLAG_IDLE);
 80057ba:	681a      	ldr	r2, [r3, #0]
	(void) CLI_UART->Instance->DR;
 80057bc:	685b      	ldr	r3, [r3, #4]
         CPU_CRITICAL_ENTER();
 80057be:	f7fa fd13 	bl	80001e8 <CPU_SR_Save>
 80057c2:	4604      	mov	r4, r0
         OSIntEnter();
 80057c4:	f7fd fac2 	bl	8002d4c <OSIntEnter>
         CPU_CRITICAL_EXIT();
 80057c8:	4620      	mov	r0, r4
 80057ca:	f7fa fd11 	bl	80001f0 <CPU_SR_Restore>
         OSTaskSemPost(&CLI_UART_Task_TCB,OS_OPT_PEND_BLOCKING,&os_err);
 80057ce:	f10d 0206 	add.w	r2, sp, #6
 80057d2:	2100      	movs	r1, #0
 80057d4:	4804      	ldr	r0, [pc, #16]	; (80057e8 <CLI_UART_RX_ISR+0x40>)
 80057d6:	f7fe fc41 	bl	800405c <OSTaskSemPost>
         OSIntExit();
 80057da:	f7fd fac7 	bl	8002d6c <OSIntExit>

	CLI_UART_Task_Wakeup();
	}
    }
 80057de:	b002      	add	sp, #8
 80057e0:	bd10      	pop	{r4, pc}
 80057e2:	bf00      	nop
 80057e4:	20000078 	.word	0x20000078
 80057e8:	200018dc 	.word	0x200018dc

080057ec <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80057ec:	b510      	push	{r4, lr}
 80057ee:	b082      	sub	sp, #8
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80057f0:	2400      	movs	r4, #0
 80057f2:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <MX_DMA_Init+0x44>)
 80057f4:	9401      	str	r4, [sp, #4]
 80057f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057f8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80057fc:	631a      	str	r2, [r3, #48]	; 0x30
 80057fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005800:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8005804:	4622      	mov	r2, r4
 8005806:	4621      	mov	r1, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005808:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800580a:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 800580c:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800580e:	f7fb fc53 	bl	80010b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8005812:	2010      	movs	r0, #16
 8005814:	f7fb fc96 	bl	8001144 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8005818:	4622      	mov	r2, r4
 800581a:	4621      	mov	r1, r4
 800581c:	2011      	movs	r0, #17
 800581e:	f7fb fc4b 	bl	80010b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8005822:	2011      	movs	r0, #17

}
 8005824:	b002      	add	sp, #8
 8005826:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800582a:	f7fb bc8b 	b.w	8001144 <HAL_NVIC_EnableIRQ>
 800582e:	bf00      	nop
 8005830:	40023800 	.word	0x40023800

08005834 <MX_GPIO_Init>:
     PB3   ------> SPI1_SCK
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8005834:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005838:	2400      	movs	r4, #0
{
 800583a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800583c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8005840:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005844:	4b51      	ldr	r3, [pc, #324]	; (800598c <MX_GPIO_Init+0x158>)
 8005846:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005848:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800584a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L6470_CS_GPIO_Port, L6470_CS_Pin, GPIO_PIN_SET);
 800584c:	4e50      	ldr	r6, [pc, #320]	; (8005990 <MX_GPIO_Init+0x15c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L6470_RST_STBY_GPIO_Port, L6470_RST_STBY_Pin, GPIO_PIN_RESET);
 800584e:	4d51      	ldr	r5, [pc, #324]	; (8005994 <MX_GPIO_Init+0x160>)

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|L6470_Flag_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005850:	4f51      	ldr	r7, [pc, #324]	; (8005998 <MX_GPIO_Init+0x164>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005852:	f042 0204 	orr.w	r2, r2, #4
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
 8005858:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800585a:	f002 0204 	and.w	r2, r2, #4
 800585e:	9201      	str	r2, [sp, #4]
 8005860:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005862:	9402      	str	r4, [sp, #8]
 8005864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005866:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800586a:	631a      	str	r2, [r3, #48]	; 0x30
 800586c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800586e:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8005872:	9202      	str	r2, [sp, #8]
 8005874:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005876:	9403      	str	r4, [sp, #12]
 8005878:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800587a:	f042 0201 	orr.w	r2, r2, #1
 800587e:	631a      	str	r2, [r3, #48]	; 0x30
 8005880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005882:	f002 0201 	and.w	r2, r2, #1
 8005886:	9203      	str	r2, [sp, #12]
 8005888:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800588a:	9404      	str	r4, [sp, #16]
 800588c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800588e:	f042 0202 	orr.w	r2, r2, #2
 8005892:	631a      	str	r2, [r3, #48]	; 0x30
 8005894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(L6470_CS_GPIO_Port, L6470_CS_Pin, GPIO_PIN_SET);
 800589c:	4630      	mov	r0, r6
 800589e:	2201      	movs	r2, #1
 80058a0:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80058a2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(L6470_CS_GPIO_Port, L6470_CS_Pin, GPIO_PIN_SET);
 80058a4:	f7fc f884 	bl	80019b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80058a8:	4622      	mov	r2, r4
 80058aa:	4630      	mov	r0, r6
 80058ac:	2120      	movs	r1, #32
 80058ae:	f7fc f87f 	bl	80019b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L6470_RST_STBY_GPIO_Port, L6470_RST_STBY_Pin, GPIO_PIN_RESET);
 80058b2:	4622      	mov	r2, r4
 80058b4:	4628      	mov	r0, r5
 80058b6:	2120      	movs	r1, #32
 80058b8:	f7fc f87a 	bl	80019b0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80058bc:	4b37      	ldr	r3, [pc, #220]	; (800599c <MX_GPIO_Init+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058be:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = B1_Pin|L6470_Flag_INT_Pin;
 80058c0:	f242 0202 	movw	r2, #8194	; 0x2002
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058c4:	a905      	add	r1, sp, #20
 80058c6:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80058c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80058cc:	f7fb ff20 	bl	8001710 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L6470_BUSY_SYNC_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80058d0:	4b33      	ldr	r3, [pc, #204]	; (80059a0 <MX_GPIO_Init+0x16c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058d2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = L6470_BUSY_SYNC_INT_Pin;
 80058d4:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_Init(L6470_BUSY_SYNC_INT_GPIO_Port, &GPIO_InitStruct);
 80058d8:	4638      	mov	r0, r7
 80058da:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80058dc:	e9cd 8305 	strd	r8, r3, [sp, #20]
  HAL_GPIO_Init(L6470_BUSY_SYNC_INT_GPIO_Port, &GPIO_InitStruct);
 80058e0:	f7fb ff16 	bl	8001710 <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = L6470_CS_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058e4:	a905      	add	r1, sp, #20
 80058e6:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = L6470_CS_Pin|LD2_Pin;
 80058e8:	2330      	movs	r3, #48	; 0x30

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80058ea:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = L6470_CS_Pin|LD2_Pin;
 80058ec:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80058ee:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058f2:	e9cd 8406 	strd	r8, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058f6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058f8:	f7fb ff0a 	bl	8001710 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058fc:	4630      	mov	r0, r6
 80058fe:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005900:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8005902:	2605      	movs	r6, #5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005904:	e9cd 3905 	strd	r3, r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005908:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800590a:	e9cd 7608 	strd	r7, r6, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800590e:	f7fb feff 	bl	8001710 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005912:	a905      	add	r1, sp, #20
 8005914:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005916:	2308      	movs	r3, #8
 8005918:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800591a:	e9cd 9406 	strd	r9, r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800591e:	e9cd 7608 	strd	r7, r6, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005922:	f7fb fef5 	bl	8001710 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L6470_RST_STBY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(L6470_RST_STBY_GPIO_Port, &GPIO_InitStruct);
 8005926:	a905      	add	r1, sp, #20
 8005928:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = L6470_RST_STBY_Pin;
 800592a:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800592c:	2311      	movs	r3, #17
 800592e:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005932:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(L6470_RST_STBY_GPIO_Port, &GPIO_InitStruct);
 8005936:	f7fb feeb 	bl	8001710 <HAL_GPIO_Init>
  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800593a:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800593c:	a905      	add	r1, sp, #20
 800593e:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005940:	2212      	movs	r2, #18
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005942:	f44f 7540 	mov.w	r5, #768	; 0x300
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005946:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005948:	e9cd 5205 	strd	r5, r2, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800594c:	e9cd 8707 	strd	r8, r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005950:	f7fb fede 	bl	8001710 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8005954:	4622      	mov	r2, r4
 8005956:	4621      	mov	r1, r4
 8005958:	2006      	movs	r0, #6
 800595a:	f7fb fbad 	bl	80010b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800595e:	2006      	movs	r0, #6
 8005960:	f7fb fbf0 	bl	8001144 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8005964:	4622      	mov	r2, r4
 8005966:	4621      	mov	r1, r4
 8005968:	2007      	movs	r0, #7
 800596a:	f7fb fba5 	bl	80010b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800596e:	2007      	movs	r0, #7
 8005970:	f7fb fbe8 	bl	8001144 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8005974:	4622      	mov	r2, r4
 8005976:	4621      	mov	r1, r4
 8005978:	2028      	movs	r0, #40	; 0x28
 800597a:	f7fb fb9d 	bl	80010b8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800597e:	2028      	movs	r0, #40	; 0x28
 8005980:	f7fb fbe0 	bl	8001144 <HAL_NVIC_EnableIRQ>

}
 8005984:	b00b      	add	sp, #44	; 0x2c
 8005986:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800598a:	bf00      	nop
 800598c:	40023800 	.word	0x40023800
 8005990:	40020000 	.word	0x40020000
 8005994:	40020400 	.word	0x40020400
 8005998:	40020800 	.word	0x40020800
 800599c:	10210000 	.word	0x10210000
 80059a0:	10110000 	.word	0x10110000

080059a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80059a4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059a6:	2400      	movs	r4, #0
{
 80059a8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059aa:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 80059ae:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059b2:	e9cd 4404 	strd	r4, r4, [sp, #16]
 80059b6:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80059ba:	4b1d      	ldr	r3, [pc, #116]	; (8005a30 <SystemClock_Config+0x8c>)
 80059bc:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80059be:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80059c0:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 80059c2:	6c19      	ldr	r1, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80059c4:	4a1b      	ldr	r2, [pc, #108]	; (8005a34 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80059c6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80059ca:	6419      	str	r1, [r3, #64]	; 0x40
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059d2:	9301      	str	r3, [sp, #4]
 80059d4:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80059d6:	9402      	str	r4, [sp, #8]
 80059d8:	6813      	ldr	r3, [r2, #0]
 80059da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80059de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80059e6:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80059e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80059ec:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80059ee:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80059f0:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80059f2:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
 80059f4:	f44f 71a8 	mov.w	r1, #336	; 0x150
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80059f8:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80059fa:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80059fc:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80059fe:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLM = 16;
 8005a00:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a02:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8005a04:	2307      	movs	r3, #7
 8005a06:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005a0a:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005a0c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005a0e:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005a10:	f7fc f80c 	bl	8001a2c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a14:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005a16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005a1a:	a803      	add	r0, sp, #12
 8005a1c:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005a1e:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005a22:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005a24:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005a26:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005a28:	f7fc fa84 	bl	8001f34 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8005a2c:	b015      	add	sp, #84	; 0x54
 8005a2e:	bd30      	pop	{r4, r5, pc}
 8005a30:	40023800 	.word	0x40023800
 8005a34:	40007000 	.word	0x40007000

08005a38 <main>:
{
 8005a38:	b508      	push	{r3, lr}
  ucos_main();
 8005a3a:	f000 f8ff 	bl	8005c3c <ucos_main>
  HAL_Init();
 8005a3e:	f7fb faff 	bl	8001040 <HAL_Init>
  SystemClock_Config();
 8005a42:	f7ff ffaf 	bl	80059a4 <SystemClock_Config>
  MX_GPIO_Init();
 8005a46:	f7ff fef5 	bl	8005834 <MX_GPIO_Init>
  MX_DMA_Init();
 8005a4a:	f7ff fecf 	bl	80057ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 8005a4e:	f000 f929 	bl	8005ca4 <MX_USART2_UART_Init>
 8005a52:	e7fe      	b.n	8005a52 <main+0x1a>

08005a54 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop

08005a58 <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop

08005a5c <Ring_Buffer_Init>:

void Ring_Buffer_Init(Ring_Buffer_t* handle, char* buffer, uint16_t size)
    {
    handle->Buffer        =  buffer;
    handle->Read_Index    =  0;
    handle->Write_Index   =  0;
 8005a5c:	2300      	movs	r3, #0
    handle->Buffer        =  buffer;
 8005a5e:	6001      	str	r1, [r0, #0]
    handle->Size          =  size;
 8005a60:	8102      	strh	r2, [r0, #8]
    handle->Write_Index   =  0;
 8005a62:	6043      	str	r3, [r0, #4]
    }
 8005a64:	4770      	bx	lr
 8005a66:	bf00      	nop

08005a68 <Ring_Buffer_Get_Char>:


uint8_t Ring_Buffer_Get_Char(Ring_Buffer_t* handle, char* data)
    {

    if (handle->Read_Index == handle->Write_Index)
 8005a68:	88c3      	ldrh	r3, [r0, #6]
 8005a6a:	8882      	ldrh	r2, [r0, #4]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d00d      	beq.n	8005a8c <Ring_Buffer_Get_Char+0x24>
	{
	*data = 0;
	return 0;
	}

    *data = handle->Buffer[handle->Read_Index];
 8005a70:	6802      	ldr	r2, [r0, #0]
 8005a72:	5cd3      	ldrb	r3, [r2, r3]
 8005a74:	700b      	strb	r3, [r1, #0]

    handle->Read_Index++;
 8005a76:	88c3      	ldrh	r3, [r0, #6]

    if (handle->Read_Index == handle->Size)
 8005a78:	8902      	ldrh	r2, [r0, #8]
    handle->Read_Index++;
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	b29b      	uxth	r3, r3
    if (handle->Read_Index == handle->Size)
 8005a7e:	429a      	cmp	r2, r3
    handle->Read_Index++;
 8005a80:	80c3      	strh	r3, [r0, #6]
	{
	handle->Read_Index = 0;
 8005a82:	bf04      	itt	eq
 8005a84:	2300      	moveq	r3, #0
 8005a86:	80c3      	strheq	r3, [r0, #6]
	}

    return 1;
 8005a88:	2001      	movs	r0, #1
    }
 8005a8a:	4770      	bx	lr
	*data = 0;
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	7008      	strb	r0, [r1, #0]
	return 0;
 8005a90:	4770      	bx	lr
 8005a92:	bf00      	nop

08005a94 <Ring_Buffer_Flush>:
    }


void Ring_Buffer_Flush(Ring_Buffer_t* handle)
    {
    handle->Read_Index = handle->Write_Index;
 8005a94:	8883      	ldrh	r3, [r0, #4]
 8005a96:	80c3      	strh	r3, [r0, #6]
    }
 8005a98:	4770      	bx	lr
 8005a9a:	bf00      	nop

08005a9c <Ring_Buffer_Get_Count>:


uint16_t Ring_Buffer_Get_Count(Ring_Buffer_t* handle)
    {
    if (handle->Write_Index >= handle->Read_Index)
 8005a9c:	8883      	ldrh	r3, [r0, #4]
 8005a9e:	88c2      	ldrh	r2, [r0, #6]
 8005aa0:	4293      	cmp	r3, r2
	{
	return (handle->Write_Index - handle->Read_Index);
	}
    return (handle->Size - (handle->Read_Index - handle->Write_Index ));
 8005aa2:	bf3b      	ittet	cc
 8005aa4:	8900      	ldrhcc	r0, [r0, #8]
 8005aa6:	18c0      	addcc	r0, r0, r3
	return (handle->Write_Index - handle->Read_Index);
 8005aa8:	1a98      	subcs	r0, r3, r2
    return (handle->Size - (handle->Read_Index - handle->Write_Index ));
 8005aaa:	1a80      	subcc	r0, r0, r2
 8005aac:	b280      	uxth	r0, r0
    }
 8005aae:	4770      	bx	lr

08005ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005ab0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005ab2:	4b0c      	ldr	r3, [pc, #48]	; (8005ae4 <HAL_MspInit+0x34>)
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	9100      	str	r1, [sp, #0]
 8005ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005abe:	645a      	str	r2, [r3, #68]	; 0x44
 8005ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ac2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8005ac6:	9200      	str	r2, [sp, #0]
 8005ac8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005aca:	9101      	str	r1, [sp, #4]
 8005acc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ace:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005ade:	b002      	add	sp, #8
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40023800 	.word	0x40023800

08005ae8 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005ae8:	4770      	bx	lr
 8005aea:	bf00      	nop

08005aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005aec:	e7fe      	b.n	8005aec <HardFault_Handler>
 8005aee:	bf00      	nop

08005af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005af0:	e7fe      	b.n	8005af0 <MemManage_Handler>
 8005af2:	bf00      	nop

08005af4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005af4:	e7fe      	b.n	8005af4 <BusFault_Handler>
 8005af6:	bf00      	nop

08005af8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005af8:	e7fe      	b.n	8005af8 <UsageFault_Handler>
 8005afa:	bf00      	nop

08005afc <SVC_Handler>:
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop

08005b00 <DebugMon_Handler>:
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop

08005b04 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8005b04:	2001      	movs	r0, #1
 8005b06:	f7fb bf85 	b.w	8001a14 <HAL_GPIO_EXTI_IRQHandler>
 8005b0a:	bf00      	nop

08005b0c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8005b0c:	2002      	movs	r0, #2
 8005b0e:	f7fb bf81 	b.w	8001a14 <HAL_GPIO_EXTI_IRQHandler>
 8005b12:	bf00      	nop

08005b14 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8005b14:	4801      	ldr	r0, [pc, #4]	; (8005b1c <DMA1_Stream5_IRQHandler+0x8>)
 8005b16:	f7fb bd25 	b.w	8001564 <HAL_DMA_IRQHandler>
 8005b1a:	bf00      	nop
 8005b1c:	20003848 	.word	0x20003848

08005b20 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005b20:	4801      	ldr	r0, [pc, #4]	; (8005b28 <DMA1_Stream6_IRQHandler+0x8>)
 8005b22:	f7fb bd1f 	b.w	8001564 <HAL_DMA_IRQHandler>
 8005b26:	bf00      	nop
 8005b28:	200038a8 	.word	0x200038a8

08005b2c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8005b2c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005b2e:	4803      	ldr	r0, [pc, #12]	; (8005b3c <USART2_IRQHandler+0x10>)
 8005b30:	f7fc fe6c 	bl	800280c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  CLI_UART_RX_ISR();
  /* USER CODE END USART2_IRQn 1 */
}
 8005b34:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  CLI_UART_RX_ISR();
 8005b38:	f7ff be36 	b.w	80057a8 <CLI_UART_RX_ISR>
 8005b3c:	20003908 	.word	0x20003908

08005b40 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005b40:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8005b44:	f7fb bf66 	b.w	8001a14 <HAL_GPIO_EXTI_IRQHandler>

08005b48 <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005b48:	4a0c      	ldr	r2, [pc, #48]	; (8005b7c <_sbrk+0x34>)
{
 8005b4a:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8005b4c:	6813      	ldr	r3, [r2, #0]
 8005b4e:	b133      	cbz	r3, 8005b5e <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8005b50:	4418      	add	r0, r3
 8005b52:	4669      	mov	r1, sp
 8005b54:	4288      	cmp	r0, r1
 8005b56:	d808      	bhi.n	8005b6a <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8005b58:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8005b5e:	4b08      	ldr	r3, [pc, #32]	; (8005b80 <_sbrk+0x38>)
 8005b60:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8005b62:	4418      	add	r0, r3
 8005b64:	4669      	mov	r1, sp
 8005b66:	4288      	cmp	r0, r1
 8005b68:	d9f6      	bls.n	8005b58 <_sbrk+0x10>
		errno = ENOMEM;
 8005b6a:	f000 f965 	bl	8005e38 <__errno>
 8005b6e:	230c      	movs	r3, #12
 8005b70:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005b72:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	bd08      	pop	{r3, pc}
 8005b7a:	bf00      	nop
 8005b7c:	20001a28 	.word	0x20001a28
 8005b80:	20003958 	.word	0x20003958

08005b84 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b84:	4910      	ldr	r1, [pc, #64]	; (8005bc8 <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8005b86:	4b11      	ldr	r3, [pc, #68]	; (8005bcc <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b88:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005b8c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8005b90:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005b92:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8005b96:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8005b98:	4c0d      	ldr	r4, [pc, #52]	; (8005bd0 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8005b9a:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8005b9c:	f042 0201 	orr.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8005ba2:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005baa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005bae:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8005bb0:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005bb2:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005bb4:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8005bb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005bbc:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8005bbe:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005bc0:	608c      	str	r4, [r1, #8]
#endif
}
 8005bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	e000ed00 	.word	0xe000ed00
 8005bcc:	40023800 	.word	0x40023800
 8005bd0:	24003010 	.word	0x24003010

08005bd4 <StartupTask>:

extern UART_HandleTypeDef huart2;


static  void  StartupTask (void *p_arg)
{
 8005bd4:	b500      	push	{lr}
 8005bd6:	b085      	sub	sp, #20


   (void)p_arg;

   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8005bd8:	f7fb fa32 	bl	8001040 <HAL_Init>

   /* Configure the system clock */
   SystemClock_Config();
 8005bdc:	f7ff fee2 	bl	80059a4 <SystemClock_Config>

   /*config systic to generate tick interrupt*/
   HAL_SYSTICK_Config(SystemCoreClock /OS_CFG_TICK_RATE_HZ);
 8005be0:	4a13      	ldr	r2, [pc, #76]	; (8005c30 <StartupTask+0x5c>)
 8005be2:	4b14      	ldr	r3, [pc, #80]	; (8005c34 <StartupTask+0x60>)
 8005be4:	6810      	ldr	r0, [r2, #0]
#ifdef CPU_CFG_INT_DIS_MEAS_EN
    CPU_IntDisMeasMaxCurReset();
#endif

    while (DEF_TRUE) {                                          /* Task body, always written as an infinite loop.       */
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8005be6:	4e14      	ldr	r6, [pc, #80]	; (8005c38 <StartupTask+0x64>)
   HAL_SYSTICK_Config(SystemCoreClock /OS_CFG_TICK_RATE_HZ);
 8005be8:	fba3 3000 	umull	r3, r0, r3, r0
 8005bec:	0980      	lsrs	r0, r0, #6
 8005bee:	f7fb fabd 	bl	800116c <HAL_SYSTICK_Config>
   HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0U);
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	210f      	movs	r1, #15
 8005bf6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bfa:	f7fb fa5d 	bl	80010b8 <HAL_NVIC_SetPriority>
   MX_GPIO_Init();
 8005bfe:	f7ff fe19 	bl	8005834 <MX_GPIO_Init>
   MX_DMA_Init();
 8005c02:	f7ff fdf3 	bl	80057ec <MX_DMA_Init>
   MX_USART2_UART_Init();
 8005c06:	f000 f84d 	bl	8005ca4 <MX_USART2_UART_Init>
   CLI_UART_Thread_Add();
 8005c0a:	f7ff fc75 	bl	80054f8 <CLI_UART_Thread_Add>
 8005c0e:	f10d 050e 	add.w	r5, sp, #14
        OSTimeDlyHMSM(0u, 0u, 0u, 100u,
 8005c12:	2400      	movs	r4, #0
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8005c14:	4630      	mov	r0, r6
 8005c16:	2120      	movs	r1, #32
 8005c18:	f7fb fee4 	bl	80019e4 <HAL_GPIO_TogglePin>
        OSTimeDlyHMSM(0u, 0u, 0u, 100u,
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	e9cd 4500 	strd	r4, r5, [sp]
 8005c22:	4611      	mov	r1, r2
 8005c24:	4610      	mov	r0, r2
 8005c26:	2364      	movs	r3, #100	; 0x64
 8005c28:	f7fe fdae 	bl	8004788 <OSTimeDlyHMSM>
 8005c2c:	e7f2      	b.n	8005c14 <StartupTask+0x40>
 8005c2e:	bf00      	nop
 8005c30:	2000007c 	.word	0x2000007c
 8005c34:	10624dd3 	.word	0x10624dd3
 8005c38:	40020000 	.word	0x40020000

08005c3c <ucos_main>:
{
 8005c3c:	b500      	push	{lr}
 8005c3e:	b08d      	sub	sp, #52	; 0x34
    OSInit(&os_err);                                            /* Initialize uC/OS-III                                 */
 8005c40:	f10d 042e 	add.w	r4, sp, #46	; 0x2e
    Mem_Init();                                                 /* Initialize Memory Managment Module                   */
 8005c44:	f7fc fee8 	bl	8002a18 <Mem_Init>
    CPU_IntDis();                                               /* Disable all Interrupts                               */
 8005c48:	f7fa faca 	bl	80001e0 <CPU_IntDis>
    CPU_Init();                                                 /* Initialize the uC/CPU services                       */
 8005c4c:	f7fc fec8 	bl	80029e0 <CPU_Init>
    OSInit(&os_err);                                            /* Initialize uC/OS-III                                 */
 8005c50:	4620      	mov	r0, r4
 8005c52:	f7fd f963 	bl	8002f1c <OSInit>
    if (os_err != OS_ERR_NONE) {
 8005c56:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8005c5a:	b103      	cbz	r3, 8005c5e <ucos_main+0x22>
 8005c5c:	e7fe      	b.n	8005c5c <ucos_main+0x20>
    OSTaskCreate(&StartupTaskTCB,                               /* Create the startup task                              */
 8005c5e:	490d      	ldr	r1, [pc, #52]	; (8005c94 <ucos_main+0x58>)
 8005c60:	9408      	str	r4, [sp, #32]
 8005c62:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 8005c64:	9306      	str	r3, [sp, #24]
 8005c66:	2203      	movs	r2, #3
 8005c68:	2080      	movs	r0, #128	; 0x80
 8005c6a:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005c6e:	e9cd 1501 	strd	r1, r5, [sp, #4]
 8005c72:	9207      	str	r2, [sp, #28]
 8005c74:	9200      	str	r2, [sp, #0]
 8005c76:	9003      	str	r0, [sp, #12]
 8005c78:	4a07      	ldr	r2, [pc, #28]	; (8005c98 <ucos_main+0x5c>)
 8005c7a:	4908      	ldr	r1, [pc, #32]	; (8005c9c <ucos_main+0x60>)
 8005c7c:	4808      	ldr	r0, [pc, #32]	; (8005ca0 <ucos_main+0x64>)
 8005c7e:	f7fe f80f 	bl	8003ca0 <OSTaskCreate>
    if (os_err != OS_ERR_NONE) {
 8005c82:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8005c86:	b103      	cbz	r3, 8005c8a <ucos_main+0x4e>
 8005c88:	e7fe      	b.n	8005c88 <ucos_main+0x4c>
    OSStart(&os_err);                                           /* Start multitasking (i.e. give control to uC/OS-III)  */
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	f7fd f8ee 	bl	8002e6c <OSStart>
 8005c90:	e7fe      	b.n	8005c90 <ucos_main+0x54>
 8005c92:	bf00      	nop
 8005c94:	20001a2c 	.word	0x20001a2c
 8005c98:	08005bd5 	.word	0x08005bd5
 8005c9c:	0800a920 	.word	0x0800a920
 8005ca0:	20001c2c 	.word	0x20001c2c

08005ca4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8005ca4:	4b0b      	ldr	r3, [pc, #44]	; (8005cd4 <MX_USART2_UART_Init+0x30>)
 8005ca6:	4a0c      	ldr	r2, [pc, #48]	; (8005cd8 <MX_USART2_UART_Init+0x34>)
{
 8005ca8:	b510      	push	{r4, lr}
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005caa:	210c      	movs	r1, #12
  huart2.Instance = USART2;
 8005cac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8005cae:	f44f 4416 	mov.w	r4, #38400	; 0x9600
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005cb2:	2200      	movs	r2, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005cb4:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 38400;
 8005cb6:	605c      	str	r4, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005cb8:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005cba:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8005cbe:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005cc0:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005cc4:	f7fc fa5c 	bl	8002180 <HAL_UART_Init>
 8005cc8:	b900      	cbnz	r0, 8005ccc <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 8005cca:	bd10      	pop	{r4, pc}
 8005ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8005cd0:	f7ff bec0 	b.w	8005a54 <Error_Handler>
 8005cd4:	20003908 	.word	0x20003908
 8005cd8:	40004400 	.word	0x40004400

08005cdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005cdc:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8005cde:	6802      	ldr	r2, [r0, #0]
 8005ce0:	4b38      	ldr	r3, [pc, #224]	; (8005dc4 <HAL_UART_MspInit+0xe8>)
{
 8005ce2:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce4:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 8005ce6:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ce8:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8005cec:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8005cf0:	9407      	str	r4, [sp, #28]
  if(uartHandle->Instance==USART2)
 8005cf2:	d001      	beq.n	8005cf8 <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8005cf4:	b008      	add	sp, #32
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8005cf8:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8005cfc:	9401      	str	r4, [sp, #4]
 8005cfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005d00:	4d31      	ldr	r5, [pc, #196]	; (8005dc8 <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005d02:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005d06:	641a      	str	r2, [r3, #64]	; 0x40
 8005d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005d0a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005d0e:	9201      	str	r2, [sp, #4]
 8005d10:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d12:	9402      	str	r4, [sp, #8]
 8005d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	631a      	str	r2, [r3, #48]	; 0x30
 8005d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d1e:	f003 0301 	and.w	r3, r3, #1
 8005d22:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8005d24:	230c      	movs	r3, #12
 8005d26:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d28:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d2a:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d2c:	9304      	str	r3, [sp, #16]
 8005d2e:	4606      	mov	r6, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d30:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d32:	4826      	ldr	r0, [pc, #152]	; (8005dcc <HAL_UART_MspInit+0xf0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d34:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005d36:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d38:	f7fb fcea 	bl	8001710 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8005d3c:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <HAL_UART_MspInit+0xf4>)
 8005d3e:	602b      	str	r3, [r5, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005d40:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d44:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8005d48:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005d4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8005d50:	6068      	str	r0, [r5, #4]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005d52:	4628      	mov	r0, r5
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d54:	60ac      	str	r4, [r5, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d56:	60ec      	str	r4, [r5, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d58:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d5c:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005d5e:	6129      	str	r1, [r5, #16]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005d60:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005d64:	f7fb fa1c 	bl	80011a0 <HAL_DMA_Init>
 8005d68:	bb28      	cbnz	r0, 8005db6 <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005d6a:	4c1a      	ldr	r4, [pc, #104]	; (8005dd4 <HAL_UART_MspInit+0xf8>)
 8005d6c:	4a1a      	ldr	r2, [pc, #104]	; (8005dd8 <HAL_UART_MspInit+0xfc>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005d6e:	6375      	str	r5, [r6, #52]	; 0x34
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005d70:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d74:	2340      	movs	r3, #64	; 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d76:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005d7a:	6022      	str	r2, [r4, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8005d7c:	6060      	str	r0, [r4, #4]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005d7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d82:	60a3      	str	r3, [r4, #8]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005d84:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d86:	2300      	movs	r3, #0
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8005d88:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d8a:	6121      	str	r1, [r4, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8005d8c:	6222      	str	r2, [r4, #32]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d8e:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d90:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005d94:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d96:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005d98:	f7fb fa02 	bl	80011a0 <HAL_DMA_Init>
 8005d9c:	b970      	cbnz	r0, 8005dbc <HAL_UART_MspInit+0xe0>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005d9e:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005da0:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005da2:	4611      	mov	r1, r2
 8005da4:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8005da6:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8005da8:	f7fb f986 	bl	80010b8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005dac:	2026      	movs	r0, #38	; 0x26
 8005dae:	f7fb f9c9 	bl	8001144 <HAL_NVIC_EnableIRQ>
}
 8005db2:	b008      	add	sp, #32
 8005db4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8005db6:	f7ff fe4d 	bl	8005a54 <Error_Handler>
 8005dba:	e7d6      	b.n	8005d6a <HAL_UART_MspInit+0x8e>
      Error_Handler();
 8005dbc:	f7ff fe4a 	bl	8005a54 <Error_Handler>
 8005dc0:	e7ed      	b.n	8005d9e <HAL_UART_MspInit+0xc2>
 8005dc2:	bf00      	nop
 8005dc4:	40004400 	.word	0x40004400
 8005dc8:	20003848 	.word	0x20003848
 8005dcc:	40020000 	.word	0x40020000
 8005dd0:	40026088 	.word	0x40026088
 8005dd4:	200038a8 	.word	0x200038a8
 8005dd8:	400260a0 	.word	0x400260a0

08005ddc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8005ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e14 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005de0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005de2:	e003      	b.n	8005dec <LoopCopyDataInit>

08005de4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005de4:	4b0c      	ldr	r3, [pc, #48]	; (8005e18 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005de6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005de8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005dea:	3104      	adds	r1, #4

08005dec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005dec:	480b      	ldr	r0, [pc, #44]	; (8005e1c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005dee:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005df0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005df2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005df4:	d3f6      	bcc.n	8005de4 <CopyDataInit>
  ldr  r2, =_sbss
 8005df6:	4a0b      	ldr	r2, [pc, #44]	; (8005e24 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005df8:	e002      	b.n	8005e00 <LoopFillZerobss>

08005dfa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005dfa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005dfc:	f842 3b04 	str.w	r3, [r2], #4

08005e00 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005e00:	4b09      	ldr	r3, [pc, #36]	; (8005e28 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005e02:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005e04:	d3f9      	bcc.n	8005dfa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005e06:	f7ff febd 	bl	8005b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e0a:	f000 f81b 	bl	8005e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e0e:	f7ff fe13 	bl	8005a38 <main>
  bx  lr    
 8005e12:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8005e14:	20017fff 	.word	0x20017fff
  ldr  r3, =_sidata
 8005e18:	0800abfc 	.word	0x0800abfc
  ldr  r0, =_sdata
 8005e1c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005e20:	20000a34 	.word	0x20000a34
  ldr  r2, =_sbss
 8005e24:	20000a34 	.word	0x20000a34
  ldr  r3, = _ebss
 8005e28:	20003958 	.word	0x20003958

08005e2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e2c:	e7fe      	b.n	8005e2c <ADC_IRQHandler>

08005e2e <atoi>:
 8005e2e:	220a      	movs	r2, #10
 8005e30:	2100      	movs	r1, #0
 8005e32:	f000 b90b 	b.w	800604c <strtol>
	...

08005e38 <__errno>:
 8005e38:	4b01      	ldr	r3, [pc, #4]	; (8005e40 <__errno+0x8>)
 8005e3a:	6818      	ldr	r0, [r3, #0]
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	20000080 	.word	0x20000080

08005e44 <__libc_init_array>:
 8005e44:	b570      	push	{r4, r5, r6, lr}
 8005e46:	4e0d      	ldr	r6, [pc, #52]	; (8005e7c <__libc_init_array+0x38>)
 8005e48:	4c0d      	ldr	r4, [pc, #52]	; (8005e80 <__libc_init_array+0x3c>)
 8005e4a:	1ba4      	subs	r4, r4, r6
 8005e4c:	10a4      	asrs	r4, r4, #2
 8005e4e:	2500      	movs	r5, #0
 8005e50:	42a5      	cmp	r5, r4
 8005e52:	d109      	bne.n	8005e68 <__libc_init_array+0x24>
 8005e54:	4e0b      	ldr	r6, [pc, #44]	; (8005e84 <__libc_init_array+0x40>)
 8005e56:	4c0c      	ldr	r4, [pc, #48]	; (8005e88 <__libc_init_array+0x44>)
 8005e58:	f004 fb7c 	bl	800a554 <_init>
 8005e5c:	1ba4      	subs	r4, r4, r6
 8005e5e:	10a4      	asrs	r4, r4, #2
 8005e60:	2500      	movs	r5, #0
 8005e62:	42a5      	cmp	r5, r4
 8005e64:	d105      	bne.n	8005e72 <__libc_init_array+0x2e>
 8005e66:	bd70      	pop	{r4, r5, r6, pc}
 8005e68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e6c:	4798      	blx	r3
 8005e6e:	3501      	adds	r5, #1
 8005e70:	e7ee      	b.n	8005e50 <__libc_init_array+0xc>
 8005e72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005e76:	4798      	blx	r3
 8005e78:	3501      	adds	r5, #1
 8005e7a:	e7f2      	b.n	8005e62 <__libc_init_array+0x1e>
 8005e7c:	0800abf0 	.word	0x0800abf0
 8005e80:	0800abf0 	.word	0x0800abf0
 8005e84:	0800abf0 	.word	0x0800abf0
 8005e88:	0800abf8 	.word	0x0800abf8

08005e8c <memcpy>:
 8005e8c:	b510      	push	{r4, lr}
 8005e8e:	1e43      	subs	r3, r0, #1
 8005e90:	440a      	add	r2, r1
 8005e92:	4291      	cmp	r1, r2
 8005e94:	d100      	bne.n	8005e98 <memcpy+0xc>
 8005e96:	bd10      	pop	{r4, pc}
 8005e98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005ea0:	e7f7      	b.n	8005e92 <memcpy+0x6>

08005ea2 <memset>:
 8005ea2:	4402      	add	r2, r0
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d100      	bne.n	8005eac <memset+0xa>
 8005eaa:	4770      	bx	lr
 8005eac:	f803 1b01 	strb.w	r1, [r3], #1
 8005eb0:	e7f9      	b.n	8005ea6 <memset+0x4>
	...

08005eb4 <sprintf>:
 8005eb4:	b40e      	push	{r1, r2, r3}
 8005eb6:	b500      	push	{lr}
 8005eb8:	b09c      	sub	sp, #112	; 0x70
 8005eba:	ab1d      	add	r3, sp, #116	; 0x74
 8005ebc:	9002      	str	r0, [sp, #8]
 8005ebe:	9006      	str	r0, [sp, #24]
 8005ec0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ec4:	4809      	ldr	r0, [pc, #36]	; (8005eec <sprintf+0x38>)
 8005ec6:	9107      	str	r1, [sp, #28]
 8005ec8:	9104      	str	r1, [sp, #16]
 8005eca:	4909      	ldr	r1, [pc, #36]	; (8005ef0 <sprintf+0x3c>)
 8005ecc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ed0:	9105      	str	r1, [sp, #20]
 8005ed2:	6800      	ldr	r0, [r0, #0]
 8005ed4:	9301      	str	r3, [sp, #4]
 8005ed6:	a902      	add	r1, sp, #8
 8005ed8:	f000 f8ce 	bl	8006078 <_svfprintf_r>
 8005edc:	9b02      	ldr	r3, [sp, #8]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	701a      	strb	r2, [r3, #0]
 8005ee2:	b01c      	add	sp, #112	; 0x70
 8005ee4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ee8:	b003      	add	sp, #12
 8005eea:	4770      	bx	lr
 8005eec:	20000080 	.word	0x20000080
 8005ef0:	ffff0208 	.word	0xffff0208

08005ef4 <stpcpy>:
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005efa:	4618      	mov	r0, r3
 8005efc:	f803 2b01 	strb.w	r2, [r3], #1
 8005f00:	2a00      	cmp	r2, #0
 8005f02:	d1f8      	bne.n	8005ef6 <stpcpy+0x2>
 8005f04:	4770      	bx	lr

08005f06 <strncmp>:
 8005f06:	b510      	push	{r4, lr}
 8005f08:	b16a      	cbz	r2, 8005f26 <strncmp+0x20>
 8005f0a:	3901      	subs	r1, #1
 8005f0c:	1884      	adds	r4, r0, r2
 8005f0e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005f12:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d103      	bne.n	8005f22 <strncmp+0x1c>
 8005f1a:	42a0      	cmp	r0, r4
 8005f1c:	d001      	beq.n	8005f22 <strncmp+0x1c>
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1f5      	bne.n	8005f0e <strncmp+0x8>
 8005f22:	1a98      	subs	r0, r3, r2
 8005f24:	bd10      	pop	{r4, pc}
 8005f26:	4610      	mov	r0, r2
 8005f28:	e7fc      	b.n	8005f24 <strncmp+0x1e>

08005f2a <strncpy>:
 8005f2a:	b570      	push	{r4, r5, r6, lr}
 8005f2c:	3901      	subs	r1, #1
 8005f2e:	4604      	mov	r4, r0
 8005f30:	b902      	cbnz	r2, 8005f34 <strncpy+0xa>
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	4623      	mov	r3, r4
 8005f36:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8005f3a:	f803 5b01 	strb.w	r5, [r3], #1
 8005f3e:	1e56      	subs	r6, r2, #1
 8005f40:	b92d      	cbnz	r5, 8005f4e <strncpy+0x24>
 8005f42:	4414      	add	r4, r2
 8005f44:	42a3      	cmp	r3, r4
 8005f46:	d0f4      	beq.n	8005f32 <strncpy+0x8>
 8005f48:	f803 5b01 	strb.w	r5, [r3], #1
 8005f4c:	e7fa      	b.n	8005f44 <strncpy+0x1a>
 8005f4e:	461c      	mov	r4, r3
 8005f50:	4632      	mov	r2, r6
 8005f52:	e7ed      	b.n	8005f30 <strncpy+0x6>

08005f54 <_strtol_l.isra.0>:
 8005f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f58:	4680      	mov	r8, r0
 8005f5a:	4689      	mov	r9, r1
 8005f5c:	4692      	mov	sl, r2
 8005f5e:	461e      	mov	r6, r3
 8005f60:	460f      	mov	r7, r1
 8005f62:	463d      	mov	r5, r7
 8005f64:	9808      	ldr	r0, [sp, #32]
 8005f66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005f6a:	f002 fa0d 	bl	8008388 <__locale_ctype_ptr_l>
 8005f6e:	4420      	add	r0, r4
 8005f70:	7843      	ldrb	r3, [r0, #1]
 8005f72:	f013 0308 	ands.w	r3, r3, #8
 8005f76:	d132      	bne.n	8005fde <_strtol_l.isra.0+0x8a>
 8005f78:	2c2d      	cmp	r4, #45	; 0x2d
 8005f7a:	d132      	bne.n	8005fe2 <_strtol_l.isra.0+0x8e>
 8005f7c:	787c      	ldrb	r4, [r7, #1]
 8005f7e:	1cbd      	adds	r5, r7, #2
 8005f80:	2201      	movs	r2, #1
 8005f82:	2e00      	cmp	r6, #0
 8005f84:	d05d      	beq.n	8006042 <_strtol_l.isra.0+0xee>
 8005f86:	2e10      	cmp	r6, #16
 8005f88:	d109      	bne.n	8005f9e <_strtol_l.isra.0+0x4a>
 8005f8a:	2c30      	cmp	r4, #48	; 0x30
 8005f8c:	d107      	bne.n	8005f9e <_strtol_l.isra.0+0x4a>
 8005f8e:	782b      	ldrb	r3, [r5, #0]
 8005f90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005f94:	2b58      	cmp	r3, #88	; 0x58
 8005f96:	d14f      	bne.n	8006038 <_strtol_l.isra.0+0xe4>
 8005f98:	786c      	ldrb	r4, [r5, #1]
 8005f9a:	2610      	movs	r6, #16
 8005f9c:	3502      	adds	r5, #2
 8005f9e:	2a00      	cmp	r2, #0
 8005fa0:	bf14      	ite	ne
 8005fa2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8005fa6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8005faa:	2700      	movs	r7, #0
 8005fac:	fbb1 fcf6 	udiv	ip, r1, r6
 8005fb0:	4638      	mov	r0, r7
 8005fb2:	fb06 1e1c 	mls	lr, r6, ip, r1
 8005fb6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8005fba:	2b09      	cmp	r3, #9
 8005fbc:	d817      	bhi.n	8005fee <_strtol_l.isra.0+0x9a>
 8005fbe:	461c      	mov	r4, r3
 8005fc0:	42a6      	cmp	r6, r4
 8005fc2:	dd23      	ble.n	800600c <_strtol_l.isra.0+0xb8>
 8005fc4:	1c7b      	adds	r3, r7, #1
 8005fc6:	d007      	beq.n	8005fd8 <_strtol_l.isra.0+0x84>
 8005fc8:	4584      	cmp	ip, r0
 8005fca:	d31c      	bcc.n	8006006 <_strtol_l.isra.0+0xb2>
 8005fcc:	d101      	bne.n	8005fd2 <_strtol_l.isra.0+0x7e>
 8005fce:	45a6      	cmp	lr, r4
 8005fd0:	db19      	blt.n	8006006 <_strtol_l.isra.0+0xb2>
 8005fd2:	fb00 4006 	mla	r0, r0, r6, r4
 8005fd6:	2701      	movs	r7, #1
 8005fd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005fdc:	e7eb      	b.n	8005fb6 <_strtol_l.isra.0+0x62>
 8005fde:	462f      	mov	r7, r5
 8005fe0:	e7bf      	b.n	8005f62 <_strtol_l.isra.0+0xe>
 8005fe2:	2c2b      	cmp	r4, #43	; 0x2b
 8005fe4:	bf04      	itt	eq
 8005fe6:	1cbd      	addeq	r5, r7, #2
 8005fe8:	787c      	ldrbeq	r4, [r7, #1]
 8005fea:	461a      	mov	r2, r3
 8005fec:	e7c9      	b.n	8005f82 <_strtol_l.isra.0+0x2e>
 8005fee:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8005ff2:	2b19      	cmp	r3, #25
 8005ff4:	d801      	bhi.n	8005ffa <_strtol_l.isra.0+0xa6>
 8005ff6:	3c37      	subs	r4, #55	; 0x37
 8005ff8:	e7e2      	b.n	8005fc0 <_strtol_l.isra.0+0x6c>
 8005ffa:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8005ffe:	2b19      	cmp	r3, #25
 8006000:	d804      	bhi.n	800600c <_strtol_l.isra.0+0xb8>
 8006002:	3c57      	subs	r4, #87	; 0x57
 8006004:	e7dc      	b.n	8005fc0 <_strtol_l.isra.0+0x6c>
 8006006:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800600a:	e7e5      	b.n	8005fd8 <_strtol_l.isra.0+0x84>
 800600c:	1c7b      	adds	r3, r7, #1
 800600e:	d108      	bne.n	8006022 <_strtol_l.isra.0+0xce>
 8006010:	2322      	movs	r3, #34	; 0x22
 8006012:	f8c8 3000 	str.w	r3, [r8]
 8006016:	4608      	mov	r0, r1
 8006018:	f1ba 0f00 	cmp.w	sl, #0
 800601c:	d107      	bne.n	800602e <_strtol_l.isra.0+0xda>
 800601e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006022:	b102      	cbz	r2, 8006026 <_strtol_l.isra.0+0xd2>
 8006024:	4240      	negs	r0, r0
 8006026:	f1ba 0f00 	cmp.w	sl, #0
 800602a:	d0f8      	beq.n	800601e <_strtol_l.isra.0+0xca>
 800602c:	b10f      	cbz	r7, 8006032 <_strtol_l.isra.0+0xde>
 800602e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006032:	f8ca 9000 	str.w	r9, [sl]
 8006036:	e7f2      	b.n	800601e <_strtol_l.isra.0+0xca>
 8006038:	2430      	movs	r4, #48	; 0x30
 800603a:	2e00      	cmp	r6, #0
 800603c:	d1af      	bne.n	8005f9e <_strtol_l.isra.0+0x4a>
 800603e:	2608      	movs	r6, #8
 8006040:	e7ad      	b.n	8005f9e <_strtol_l.isra.0+0x4a>
 8006042:	2c30      	cmp	r4, #48	; 0x30
 8006044:	d0a3      	beq.n	8005f8e <_strtol_l.isra.0+0x3a>
 8006046:	260a      	movs	r6, #10
 8006048:	e7a9      	b.n	8005f9e <_strtol_l.isra.0+0x4a>
	...

0800604c <strtol>:
 800604c:	4b08      	ldr	r3, [pc, #32]	; (8006070 <strtol+0x24>)
 800604e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006050:	681c      	ldr	r4, [r3, #0]
 8006052:	4d08      	ldr	r5, [pc, #32]	; (8006074 <strtol+0x28>)
 8006054:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006056:	2b00      	cmp	r3, #0
 8006058:	bf08      	it	eq
 800605a:	462b      	moveq	r3, r5
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	4613      	mov	r3, r2
 8006060:	460a      	mov	r2, r1
 8006062:	4601      	mov	r1, r0
 8006064:	4620      	mov	r0, r4
 8006066:	f7ff ff75 	bl	8005f54 <_strtol_l.isra.0>
 800606a:	b003      	add	sp, #12
 800606c:	bd30      	pop	{r4, r5, pc}
 800606e:	bf00      	nop
 8006070:	20000080 	.word	0x20000080
 8006074:	200004b4 	.word	0x200004b4

08006078 <_svfprintf_r>:
 8006078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800607c:	b0d3      	sub	sp, #332	; 0x14c
 800607e:	4688      	mov	r8, r1
 8006080:	4693      	mov	fp, r2
 8006082:	461e      	mov	r6, r3
 8006084:	9003      	str	r0, [sp, #12]
 8006086:	f002 f983 	bl	8008390 <_localeconv_r>
 800608a:	6803      	ldr	r3, [r0, #0]
 800608c:	9316      	str	r3, [sp, #88]	; 0x58
 800608e:	4618      	mov	r0, r3
 8006090:	f7fa f946 	bl	8000320 <strlen>
 8006094:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8006098:	900d      	str	r0, [sp, #52]	; 0x34
 800609a:	0618      	lsls	r0, r3, #24
 800609c:	d518      	bpl.n	80060d0 <_svfprintf_r+0x58>
 800609e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80060a2:	b9ab      	cbnz	r3, 80060d0 <_svfprintf_r+0x58>
 80060a4:	2140      	movs	r1, #64	; 0x40
 80060a6:	9803      	ldr	r0, [sp, #12]
 80060a8:	f002 f982 	bl	80083b0 <_malloc_r>
 80060ac:	f8c8 0000 	str.w	r0, [r8]
 80060b0:	f8c8 0010 	str.w	r0, [r8, #16]
 80060b4:	b948      	cbnz	r0, 80060ca <_svfprintf_r+0x52>
 80060b6:	9a03      	ldr	r2, [sp, #12]
 80060b8:	230c      	movs	r3, #12
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060c0:	930e      	str	r3, [sp, #56]	; 0x38
 80060c2:	980e      	ldr	r0, [sp, #56]	; 0x38
 80060c4:	b053      	add	sp, #332	; 0x14c
 80060c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ca:	2340      	movs	r3, #64	; 0x40
 80060cc:	f8c8 3014 	str.w	r3, [r8, #20]
 80060d0:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 80063f8 <_svfprintf_r+0x380>
 80060d4:	2300      	movs	r3, #0
 80060d6:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 80060da:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80060de:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 80060e2:	ac29      	add	r4, sp, #164	; 0xa4
 80060e4:	9426      	str	r4, [sp, #152]	; 0x98
 80060e6:	9304      	str	r3, [sp, #16]
 80060e8:	9309      	str	r3, [sp, #36]	; 0x24
 80060ea:	9312      	str	r3, [sp, #72]	; 0x48
 80060ec:	9319      	str	r3, [sp, #100]	; 0x64
 80060ee:	930e      	str	r3, [sp, #56]	; 0x38
 80060f0:	465d      	mov	r5, fp
 80060f2:	462b      	mov	r3, r5
 80060f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80060f8:	b112      	cbz	r2, 8006100 <_svfprintf_r+0x88>
 80060fa:	2a25      	cmp	r2, #37	; 0x25
 80060fc:	f040 80e4 	bne.w	80062c8 <_svfprintf_r+0x250>
 8006100:	ebb5 070b 	subs.w	r7, r5, fp
 8006104:	d00e      	beq.n	8006124 <_svfprintf_r+0xac>
 8006106:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006108:	443b      	add	r3, r7
 800610a:	9328      	str	r3, [sp, #160]	; 0xa0
 800610c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800610e:	3301      	adds	r3, #1
 8006110:	2b07      	cmp	r3, #7
 8006112:	e9c4 b700 	strd	fp, r7, [r4]
 8006116:	9327      	str	r3, [sp, #156]	; 0x9c
 8006118:	f300 80d8 	bgt.w	80062cc <_svfprintf_r+0x254>
 800611c:	3408      	adds	r4, #8
 800611e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006120:	443b      	add	r3, r7
 8006122:	930e      	str	r3, [sp, #56]	; 0x38
 8006124:	782b      	ldrb	r3, [r5, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f001 81b4 	beq.w	8007494 <_svfprintf_r+0x141c>
 800612c:	1c6b      	adds	r3, r5, #1
 800612e:	930c      	str	r3, [sp, #48]	; 0x30
 8006130:	2300      	movs	r3, #0
 8006132:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8006136:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800613a:	930f      	str	r3, [sp, #60]	; 0x3c
 800613c:	469a      	mov	sl, r3
 800613e:	270a      	movs	r7, #10
 8006140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	9306      	str	r3, [sp, #24]
 8006146:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006148:	3301      	adds	r3, #1
 800614a:	930c      	str	r3, [sp, #48]	; 0x30
 800614c:	9b06      	ldr	r3, [sp, #24]
 800614e:	3b20      	subs	r3, #32
 8006150:	2b5a      	cmp	r3, #90	; 0x5a
 8006152:	f200 8624 	bhi.w	8006d9e <_svfprintf_r+0xd26>
 8006156:	a201      	add	r2, pc, #4	; (adr r2, 800615c <_svfprintf_r+0xe4>)
 8006158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615c:	0800635f 	.word	0x0800635f
 8006160:	08006d9f 	.word	0x08006d9f
 8006164:	08006d9f 	.word	0x08006d9f
 8006168:	08006371 	.word	0x08006371
 800616c:	08006d9f 	.word	0x08006d9f
 8006170:	08006d9f 	.word	0x08006d9f
 8006174:	08006d9f 	.word	0x08006d9f
 8006178:	08006325 	.word	0x08006325
 800617c:	08006d9f 	.word	0x08006d9f
 8006180:	08006d9f 	.word	0x08006d9f
 8006184:	08006377 	.word	0x08006377
 8006188:	0800638f 	.word	0x0800638f
 800618c:	08006d9f 	.word	0x08006d9f
 8006190:	08006389 	.word	0x08006389
 8006194:	08006393 	.word	0x08006393
 8006198:	08006d9f 	.word	0x08006d9f
 800619c:	080063c7 	.word	0x080063c7
 80061a0:	080063cd 	.word	0x080063cd
 80061a4:	080063cd 	.word	0x080063cd
 80061a8:	080063cd 	.word	0x080063cd
 80061ac:	080063cd 	.word	0x080063cd
 80061b0:	080063cd 	.word	0x080063cd
 80061b4:	080063cd 	.word	0x080063cd
 80061b8:	080063cd 	.word	0x080063cd
 80061bc:	080063cd 	.word	0x080063cd
 80061c0:	080063cd 	.word	0x080063cd
 80061c4:	08006d9f 	.word	0x08006d9f
 80061c8:	08006d9f 	.word	0x08006d9f
 80061cc:	08006d9f 	.word	0x08006d9f
 80061d0:	08006d9f 	.word	0x08006d9f
 80061d4:	08006d9f 	.word	0x08006d9f
 80061d8:	08006d9f 	.word	0x08006d9f
 80061dc:	08006d9f 	.word	0x08006d9f
 80061e0:	080064cf 	.word	0x080064cf
 80061e4:	08006d9f 	.word	0x08006d9f
 80061e8:	08006439 	.word	0x08006439
 80061ec:	0800645b 	.word	0x0800645b
 80061f0:	080064cf 	.word	0x080064cf
 80061f4:	080064cf 	.word	0x080064cf
 80061f8:	080064cf 	.word	0x080064cf
 80061fc:	08006d9f 	.word	0x08006d9f
 8006200:	08006d9f 	.word	0x08006d9f
 8006204:	08006d9f 	.word	0x08006d9f
 8006208:	08006d9f 	.word	0x08006d9f
 800620c:	080063ed 	.word	0x080063ed
 8006210:	08006d9f 	.word	0x08006d9f
 8006214:	08006d9f 	.word	0x08006d9f
 8006218:	080069a1 	.word	0x080069a1
 800621c:	08006d9f 	.word	0x08006d9f
 8006220:	08006d9f 	.word	0x08006d9f
 8006224:	08006d9f 	.word	0x08006d9f
 8006228:	08006a2d 	.word	0x08006a2d
 800622c:	08006d9f 	.word	0x08006d9f
 8006230:	08006c0f 	.word	0x08006c0f
 8006234:	08006d9f 	.word	0x08006d9f
 8006238:	08006d9f 	.word	0x08006d9f
 800623c:	080062e5 	.word	0x080062e5
 8006240:	08006d9f 	.word	0x08006d9f
 8006244:	08006d9f 	.word	0x08006d9f
 8006248:	08006d9f 	.word	0x08006d9f
 800624c:	08006d9f 	.word	0x08006d9f
 8006250:	08006d9f 	.word	0x08006d9f
 8006254:	08006d9f 	.word	0x08006d9f
 8006258:	08006d9f 	.word	0x08006d9f
 800625c:	08006d9f 	.word	0x08006d9f
 8006260:	080064cf 	.word	0x080064cf
 8006264:	08006d9f 	.word	0x08006d9f
 8006268:	08006439 	.word	0x08006439
 800626c:	0800645f 	.word	0x0800645f
 8006270:	080064cf 	.word	0x080064cf
 8006274:	080064cf 	.word	0x080064cf
 8006278:	080064cf 	.word	0x080064cf
 800627c:	08006405 	.word	0x08006405
 8006280:	0800645f 	.word	0x0800645f
 8006284:	0800642d 	.word	0x0800642d
 8006288:	08006d9f 	.word	0x08006d9f
 800628c:	0800641f 	.word	0x0800641f
 8006290:	08006d9f 	.word	0x08006d9f
 8006294:	0800695b 	.word	0x0800695b
 8006298:	080069a5 	.word	0x080069a5
 800629c:	08006a0d 	.word	0x08006a0d
 80062a0:	0800642d 	.word	0x0800642d
 80062a4:	08006d9f 	.word	0x08006d9f
 80062a8:	08006a2d 	.word	0x08006a2d
 80062ac:	08006141 	.word	0x08006141
 80062b0:	08006c13 	.word	0x08006c13
 80062b4:	08006d9f 	.word	0x08006d9f
 80062b8:	08006d9f 	.word	0x08006d9f
 80062bc:	08006c51 	.word	0x08006c51
 80062c0:	08006d9f 	.word	0x08006d9f
 80062c4:	08006141 	.word	0x08006141
 80062c8:	461d      	mov	r5, r3
 80062ca:	e712      	b.n	80060f2 <_svfprintf_r+0x7a>
 80062cc:	aa26      	add	r2, sp, #152	; 0x98
 80062ce:	4641      	mov	r1, r8
 80062d0:	9803      	ldr	r0, [sp, #12]
 80062d2:	f002 fdb7 	bl	8008e44 <__ssprint_r>
 80062d6:	2800      	cmp	r0, #0
 80062d8:	f040 8166 	bne.w	80065a8 <_svfprintf_r+0x530>
 80062dc:	ac29      	add	r4, sp, #164	; 0xa4
 80062de:	e71e      	b.n	800611e <_svfprintf_r+0xa6>
 80062e0:	461e      	mov	r6, r3
 80062e2:	e72d      	b.n	8006140 <_svfprintf_r+0xc8>
 80062e4:	4b46      	ldr	r3, [pc, #280]	; (8006400 <_svfprintf_r+0x388>)
 80062e6:	9318      	str	r3, [sp, #96]	; 0x60
 80062e8:	f01a 0f20 	tst.w	sl, #32
 80062ec:	f000 84b3 	beq.w	8006c56 <_svfprintf_r+0xbde>
 80062f0:	3607      	adds	r6, #7
 80062f2:	f026 0607 	bic.w	r6, r6, #7
 80062f6:	f106 0308 	add.w	r3, r6, #8
 80062fa:	e9d6 6700 	ldrd	r6, r7, [r6]
 80062fe:	9308      	str	r3, [sp, #32]
 8006300:	f01a 0f01 	tst.w	sl, #1
 8006304:	d00a      	beq.n	800631c <_svfprintf_r+0x2a4>
 8006306:	ea56 0307 	orrs.w	r3, r6, r7
 800630a:	d007      	beq.n	800631c <_svfprintf_r+0x2a4>
 800630c:	2330      	movs	r3, #48	; 0x30
 800630e:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8006312:	9b06      	ldr	r3, [sp, #24]
 8006314:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8006318:	f04a 0a02 	orr.w	sl, sl, #2
 800631c:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8006320:	2302      	movs	r3, #2
 8006322:	e34d      	b.n	80069c0 <_svfprintf_r+0x948>
 8006324:	9803      	ldr	r0, [sp, #12]
 8006326:	f002 f833 	bl	8008390 <_localeconv_r>
 800632a:	6843      	ldr	r3, [r0, #4]
 800632c:	9319      	str	r3, [sp, #100]	; 0x64
 800632e:	4618      	mov	r0, r3
 8006330:	f7f9 fff6 	bl	8000320 <strlen>
 8006334:	9012      	str	r0, [sp, #72]	; 0x48
 8006336:	9803      	ldr	r0, [sp, #12]
 8006338:	f002 f82a 	bl	8008390 <_localeconv_r>
 800633c:	6883      	ldr	r3, [r0, #8]
 800633e:	9309      	str	r3, [sp, #36]	; 0x24
 8006340:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006342:	2b00      	cmp	r3, #0
 8006344:	f43f aefc 	beq.w	8006140 <_svfprintf_r+0xc8>
 8006348:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800634a:	2b00      	cmp	r3, #0
 800634c:	f43f aef8 	beq.w	8006140 <_svfprintf_r+0xc8>
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	f43f aef4 	beq.w	8006140 <_svfprintf_r+0xc8>
 8006358:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800635c:	e6f0      	b.n	8006140 <_svfprintf_r+0xc8>
 800635e:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8006362:	2b00      	cmp	r3, #0
 8006364:	f47f aeec 	bne.w	8006140 <_svfprintf_r+0xc8>
 8006368:	2320      	movs	r3, #32
 800636a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800636e:	e6e7      	b.n	8006140 <_svfprintf_r+0xc8>
 8006370:	f04a 0a01 	orr.w	sl, sl, #1
 8006374:	e6e4      	b.n	8006140 <_svfprintf_r+0xc8>
 8006376:	6832      	ldr	r2, [r6, #0]
 8006378:	920f      	str	r2, [sp, #60]	; 0x3c
 800637a:	2a00      	cmp	r2, #0
 800637c:	f106 0304 	add.w	r3, r6, #4
 8006380:	daae      	bge.n	80062e0 <_svfprintf_r+0x268>
 8006382:	4252      	negs	r2, r2
 8006384:	920f      	str	r2, [sp, #60]	; 0x3c
 8006386:	461e      	mov	r6, r3
 8006388:	f04a 0a04 	orr.w	sl, sl, #4
 800638c:	e6d8      	b.n	8006140 <_svfprintf_r+0xc8>
 800638e:	232b      	movs	r3, #43	; 0x2b
 8006390:	e7eb      	b.n	800636a <_svfprintf_r+0x2f2>
 8006392:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006394:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006396:	7812      	ldrb	r2, [r2, #0]
 8006398:	9206      	str	r2, [sp, #24]
 800639a:	2a2a      	cmp	r2, #42	; 0x2a
 800639c:	f103 0301 	add.w	r3, r3, #1
 80063a0:	d10f      	bne.n	80063c2 <_svfprintf_r+0x34a>
 80063a2:	6835      	ldr	r5, [r6, #0]
 80063a4:	930c      	str	r3, [sp, #48]	; 0x30
 80063a6:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 80063aa:	3604      	adds	r6, #4
 80063ac:	e6c8      	b.n	8006140 <_svfprintf_r+0xc8>
 80063ae:	fb07 2505 	mla	r5, r7, r5, r2
 80063b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063b6:	9206      	str	r2, [sp, #24]
 80063b8:	9a06      	ldr	r2, [sp, #24]
 80063ba:	3a30      	subs	r2, #48	; 0x30
 80063bc:	2a09      	cmp	r2, #9
 80063be:	d9f6      	bls.n	80063ae <_svfprintf_r+0x336>
 80063c0:	e6c3      	b.n	800614a <_svfprintf_r+0xd2>
 80063c2:	2500      	movs	r5, #0
 80063c4:	e7f8      	b.n	80063b8 <_svfprintf_r+0x340>
 80063c6:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 80063ca:	e6b9      	b.n	8006140 <_svfprintf_r+0xc8>
 80063cc:	2200      	movs	r2, #0
 80063ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80063d0:	920f      	str	r2, [sp, #60]	; 0x3c
 80063d2:	9a06      	ldr	r2, [sp, #24]
 80063d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063d6:	3a30      	subs	r2, #48	; 0x30
 80063d8:	fb07 2201 	mla	r2, r7, r1, r2
 80063dc:	920f      	str	r2, [sp, #60]	; 0x3c
 80063de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063e2:	9206      	str	r2, [sp, #24]
 80063e4:	3a30      	subs	r2, #48	; 0x30
 80063e6:	2a09      	cmp	r2, #9
 80063e8:	d9f3      	bls.n	80063d2 <_svfprintf_r+0x35a>
 80063ea:	e6ae      	b.n	800614a <_svfprintf_r+0xd2>
 80063ec:	f04a 0a08 	orr.w	sl, sl, #8
 80063f0:	e6a6      	b.n	8006140 <_svfprintf_r+0xc8>
 80063f2:	bf00      	nop
 80063f4:	f3af 8000 	nop.w
	...
 8006400:	0800a955 	.word	0x0800a955
 8006404:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b68      	cmp	r3, #104	; 0x68
 800640a:	bf01      	itttt	eq
 800640c:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 800640e:	3301      	addeq	r3, #1
 8006410:	930c      	streq	r3, [sp, #48]	; 0x30
 8006412:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 8006416:	bf18      	it	ne
 8006418:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800641c:	e690      	b.n	8006140 <_svfprintf_r+0xc8>
 800641e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b6c      	cmp	r3, #108	; 0x6c
 8006424:	d105      	bne.n	8006432 <_svfprintf_r+0x3ba>
 8006426:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006428:	3301      	adds	r3, #1
 800642a:	930c      	str	r3, [sp, #48]	; 0x30
 800642c:	f04a 0a20 	orr.w	sl, sl, #32
 8006430:	e686      	b.n	8006140 <_svfprintf_r+0xc8>
 8006432:	f04a 0a10 	orr.w	sl, sl, #16
 8006436:	e683      	b.n	8006140 <_svfprintf_r+0xc8>
 8006438:	1d33      	adds	r3, r6, #4
 800643a:	9308      	str	r3, [sp, #32]
 800643c:	2000      	movs	r0, #0
 800643e:	6833      	ldr	r3, [r6, #0]
 8006440:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8006444:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8006448:	4681      	mov	r9, r0
 800644a:	2501      	movs	r5, #1
 800644c:	9010      	str	r0, [sp, #64]	; 0x40
 800644e:	4607      	mov	r7, r0
 8006450:	9007      	str	r0, [sp, #28]
 8006452:	4606      	mov	r6, r0
 8006454:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8006458:	e301      	b.n	8006a5e <_svfprintf_r+0x9e6>
 800645a:	f04a 0a10 	orr.w	sl, sl, #16
 800645e:	f01a 0f20 	tst.w	sl, #32
 8006462:	d021      	beq.n	80064a8 <_svfprintf_r+0x430>
 8006464:	3607      	adds	r6, #7
 8006466:	f026 0607 	bic.w	r6, r6, #7
 800646a:	f106 0308 	add.w	r3, r6, #8
 800646e:	e9d6 6700 	ldrd	r6, r7, [r6]
 8006472:	9308      	str	r3, [sp, #32]
 8006474:	2e00      	cmp	r6, #0
 8006476:	f177 0300 	sbcs.w	r3, r7, #0
 800647a:	da06      	bge.n	800648a <_svfprintf_r+0x412>
 800647c:	4276      	negs	r6, r6
 800647e:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8006482:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8006486:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800648a:	1c6b      	adds	r3, r5, #1
 800648c:	f040 83f6 	bne.w	8006c7c <_svfprintf_r+0xc04>
 8006490:	2f00      	cmp	r7, #0
 8006492:	bf08      	it	eq
 8006494:	2e0a      	cmpeq	r6, #10
 8006496:	f080 8427 	bcs.w	8006ce8 <_svfprintf_r+0xc70>
 800649a:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 800649e:	3630      	adds	r6, #48	; 0x30
 80064a0:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 80064a4:	f000 bc0d 	b.w	8006cc2 <_svfprintf_r+0xc4a>
 80064a8:	1d33      	adds	r3, r6, #4
 80064aa:	f01a 0f10 	tst.w	sl, #16
 80064ae:	9308      	str	r3, [sp, #32]
 80064b0:	d002      	beq.n	80064b8 <_svfprintf_r+0x440>
 80064b2:	6836      	ldr	r6, [r6, #0]
 80064b4:	17f7      	asrs	r7, r6, #31
 80064b6:	e7dd      	b.n	8006474 <_svfprintf_r+0x3fc>
 80064b8:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80064bc:	6836      	ldr	r6, [r6, #0]
 80064be:	d001      	beq.n	80064c4 <_svfprintf_r+0x44c>
 80064c0:	b236      	sxth	r6, r6
 80064c2:	e7f7      	b.n	80064b4 <_svfprintf_r+0x43c>
 80064c4:	f41a 7f00 	tst.w	sl, #512	; 0x200
 80064c8:	bf18      	it	ne
 80064ca:	b276      	sxtbne	r6, r6
 80064cc:	e7f2      	b.n	80064b4 <_svfprintf_r+0x43c>
 80064ce:	3607      	adds	r6, #7
 80064d0:	f026 0607 	bic.w	r6, r6, #7
 80064d4:	ed96 7b00 	vldr	d7, [r6]
 80064d8:	f106 0308 	add.w	r3, r6, #8
 80064dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80064e0:	9308      	str	r3, [sp, #32]
 80064e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064e4:	931a      	str	r3, [sp, #104]	; 0x68
 80064e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80064ec:	931b      	str	r3, [sp, #108]	; 0x6c
 80064ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064f2:	4bb2      	ldr	r3, [pc, #712]	; (80067bc <_svfprintf_r+0x744>)
 80064f4:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80064f8:	f7fa fbc0 	bl	8000c7c <__aeabi_dcmpun>
 80064fc:	bb00      	cbnz	r0, 8006540 <_svfprintf_r+0x4c8>
 80064fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006502:	4bae      	ldr	r3, [pc, #696]	; (80067bc <_svfprintf_r+0x744>)
 8006504:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 8006508:	f7fa fb9a 	bl	8000c40 <__aeabi_dcmple>
 800650c:	b9c0      	cbnz	r0, 8006540 <_svfprintf_r+0x4c8>
 800650e:	2200      	movs	r2, #0
 8006510:	2300      	movs	r3, #0
 8006512:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006516:	f7fa fb89 	bl	8000c2c <__aeabi_dcmplt>
 800651a:	b110      	cbz	r0, 8006522 <_svfprintf_r+0x4aa>
 800651c:	232d      	movs	r3, #45	; 0x2d
 800651e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8006522:	4aa7      	ldr	r2, [pc, #668]	; (80067c0 <_svfprintf_r+0x748>)
 8006524:	4ba7      	ldr	r3, [pc, #668]	; (80067c4 <_svfprintf_r+0x74c>)
 8006526:	9906      	ldr	r1, [sp, #24]
 8006528:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 800652c:	2947      	cmp	r1, #71	; 0x47
 800652e:	bfcc      	ite	gt
 8006530:	4693      	movgt	fp, r2
 8006532:	469b      	movle	fp, r3
 8006534:	f04f 0900 	mov.w	r9, #0
 8006538:	2503      	movs	r5, #3
 800653a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 800653e:	e3c6      	b.n	8006cce <_svfprintf_r+0xc56>
 8006540:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006544:	4610      	mov	r0, r2
 8006546:	4619      	mov	r1, r3
 8006548:	f7fa fb98 	bl	8000c7c <__aeabi_dcmpun>
 800654c:	4681      	mov	r9, r0
 800654e:	b140      	cbz	r0, 8006562 <_svfprintf_r+0x4ea>
 8006550:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006552:	4a9d      	ldr	r2, [pc, #628]	; (80067c8 <_svfprintf_r+0x750>)
 8006554:	2b00      	cmp	r3, #0
 8006556:	bfbc      	itt	lt
 8006558:	232d      	movlt	r3, #45	; 0x2d
 800655a:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 800655e:	4b9b      	ldr	r3, [pc, #620]	; (80067cc <_svfprintf_r+0x754>)
 8006560:	e7e1      	b.n	8006526 <_svfprintf_r+0x4ae>
 8006562:	9b06      	ldr	r3, [sp, #24]
 8006564:	f023 0320 	bic.w	r3, r3, #32
 8006568:	2b41      	cmp	r3, #65	; 0x41
 800656a:	9307      	str	r3, [sp, #28]
 800656c:	d125      	bne.n	80065ba <_svfprintf_r+0x542>
 800656e:	2330      	movs	r3, #48	; 0x30
 8006570:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 8006574:	9b06      	ldr	r3, [sp, #24]
 8006576:	2b61      	cmp	r3, #97	; 0x61
 8006578:	bf14      	ite	ne
 800657a:	2358      	movne	r3, #88	; 0x58
 800657c:	2378      	moveq	r3, #120	; 0x78
 800657e:	2d63      	cmp	r5, #99	; 0x63
 8006580:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 8006584:	f04a 0a02 	orr.w	sl, sl, #2
 8006588:	f340 8108 	ble.w	800679c <_svfprintf_r+0x724>
 800658c:	1c69      	adds	r1, r5, #1
 800658e:	9803      	ldr	r0, [sp, #12]
 8006590:	f001 ff0e 	bl	80083b0 <_malloc_r>
 8006594:	4683      	mov	fp, r0
 8006596:	2800      	cmp	r0, #0
 8006598:	f040 8103 	bne.w	80067a2 <_svfprintf_r+0x72a>
 800659c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80065a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065a4:	f8a8 300c 	strh.w	r3, [r8, #12]
 80065a8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80065ac:	f013 0f40 	tst.w	r3, #64	; 0x40
 80065b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065b2:	bf18      	it	ne
 80065b4:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 80065b8:	e582      	b.n	80060c0 <_svfprintf_r+0x48>
 80065ba:	1c69      	adds	r1, r5, #1
 80065bc:	f000 80f3 	beq.w	80067a6 <_svfprintf_r+0x72e>
 80065c0:	9b07      	ldr	r3, [sp, #28]
 80065c2:	2b47      	cmp	r3, #71	; 0x47
 80065c4:	d102      	bne.n	80065cc <_svfprintf_r+0x554>
 80065c6:	2d00      	cmp	r5, #0
 80065c8:	f000 80ef 	beq.w	80067aa <_svfprintf_r+0x732>
 80065cc:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 80065d0:	9310      	str	r3, [sp, #64]	; 0x40
 80065d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f280 80eb 	bge.w	80067b0 <_svfprintf_r+0x738>
 80065da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065dc:	9314      	str	r3, [sp, #80]	; 0x50
 80065de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065e0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80065e4:	9315      	str	r3, [sp, #84]	; 0x54
 80065e6:	232d      	movs	r3, #45	; 0x2d
 80065e8:	9313      	str	r3, [sp, #76]	; 0x4c
 80065ea:	9b07      	ldr	r3, [sp, #28]
 80065ec:	2b41      	cmp	r3, #65	; 0x41
 80065ee:	f040 8105 	bne.w	80067fc <_svfprintf_r+0x784>
 80065f2:	a820      	add	r0, sp, #128	; 0x80
 80065f4:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80065f8:	f002 fbde 	bl	8008db8 <frexp>
 80065fc:	2200      	movs	r2, #0
 80065fe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006602:	ec51 0b10 	vmov	r0, r1, d0
 8006606:	f7fa f89f 	bl	8000748 <__aeabi_dmul>
 800660a:	2200      	movs	r2, #0
 800660c:	2300      	movs	r3, #0
 800660e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006612:	f7fa fb01 	bl	8000c18 <__aeabi_dcmpeq>
 8006616:	b108      	cbz	r0, 800661c <_svfprintf_r+0x5a4>
 8006618:	2301      	movs	r3, #1
 800661a:	9320      	str	r3, [sp, #128]	; 0x80
 800661c:	4f6c      	ldr	r7, [pc, #432]	; (80067d0 <_svfprintf_r+0x758>)
 800661e:	4b6d      	ldr	r3, [pc, #436]	; (80067d4 <_svfprintf_r+0x75c>)
 8006620:	9a06      	ldr	r2, [sp, #24]
 8006622:	2a61      	cmp	r2, #97	; 0x61
 8006624:	bf08      	it	eq
 8006626:	461f      	moveq	r7, r3
 8006628:	9711      	str	r7, [sp, #68]	; 0x44
 800662a:	465e      	mov	r6, fp
 800662c:	1e6f      	subs	r7, r5, #1
 800662e:	2200      	movs	r2, #0
 8006630:	4b69      	ldr	r3, [pc, #420]	; (80067d8 <_svfprintf_r+0x760>)
 8006632:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006636:	f7fa f887 	bl	8000748 <__aeabi_dmul>
 800663a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800663e:	f7fa fb33 	bl	8000ca8 <__aeabi_d2iz>
 8006642:	901c      	str	r0, [sp, #112]	; 0x70
 8006644:	f7fa f816 	bl	8000674 <__aeabi_i2d>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006650:	f7f9 fec2 	bl	80003d8 <__aeabi_dsub>
 8006654:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8006656:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006658:	971d      	str	r7, [sp, #116]	; 0x74
 800665a:	5c9b      	ldrb	r3, [r3, r2]
 800665c:	f806 3b01 	strb.w	r3, [r6], #1
 8006660:	1c7a      	adds	r2, r7, #1
 8006662:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006666:	d006      	beq.n	8006676 <_svfprintf_r+0x5fe>
 8006668:	2200      	movs	r2, #0
 800666a:	2300      	movs	r3, #0
 800666c:	3f01      	subs	r7, #1
 800666e:	f7fa fad3 	bl	8000c18 <__aeabi_dcmpeq>
 8006672:	2800      	cmp	r0, #0
 8006674:	d0db      	beq.n	800662e <_svfprintf_r+0x5b6>
 8006676:	2200      	movs	r2, #0
 8006678:	4b58      	ldr	r3, [pc, #352]	; (80067dc <_svfprintf_r+0x764>)
 800667a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800667e:	f7fa faf3 	bl	8000c68 <__aeabi_dcmpgt>
 8006682:	b960      	cbnz	r0, 800669e <_svfprintf_r+0x626>
 8006684:	2200      	movs	r2, #0
 8006686:	4b55      	ldr	r3, [pc, #340]	; (80067dc <_svfprintf_r+0x764>)
 8006688:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800668c:	f7fa fac4 	bl	8000c18 <__aeabi_dcmpeq>
 8006690:	2800      	cmp	r0, #0
 8006692:	f000 80ae 	beq.w	80067f2 <_svfprintf_r+0x77a>
 8006696:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006698:	07db      	lsls	r3, r3, #31
 800669a:	f140 80aa 	bpl.w	80067f2 <_svfprintf_r+0x77a>
 800669e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80066a0:	9624      	str	r6, [sp, #144]	; 0x90
 80066a2:	7bd9      	ldrb	r1, [r3, #15]
 80066a4:	2030      	movs	r0, #48	; 0x30
 80066a6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80066a8:	1e53      	subs	r3, r2, #1
 80066aa:	9324      	str	r3, [sp, #144]	; 0x90
 80066ac:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 80066b0:	428b      	cmp	r3, r1
 80066b2:	f000 8095 	beq.w	80067e0 <_svfprintf_r+0x768>
 80066b6:	2b39      	cmp	r3, #57	; 0x39
 80066b8:	bf0b      	itete	eq
 80066ba:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 80066bc:	3301      	addne	r3, #1
 80066be:	7a9b      	ldrbeq	r3, [r3, #10]
 80066c0:	b2db      	uxtbne	r3, r3
 80066c2:	f802 3c01 	strb.w	r3, [r2, #-1]
 80066c6:	4633      	mov	r3, r6
 80066c8:	eba3 030b 	sub.w	r3, r3, fp
 80066cc:	9304      	str	r3, [sp, #16]
 80066ce:	9b07      	ldr	r3, [sp, #28]
 80066d0:	9e20      	ldr	r6, [sp, #128]	; 0x80
 80066d2:	2b47      	cmp	r3, #71	; 0x47
 80066d4:	f040 80d7 	bne.w	8006886 <_svfprintf_r+0x80e>
 80066d8:	1cf7      	adds	r7, r6, #3
 80066da:	db02      	blt.n	80066e2 <_svfprintf_r+0x66a>
 80066dc:	42b5      	cmp	r5, r6
 80066de:	f280 80fd 	bge.w	80068dc <_svfprintf_r+0x864>
 80066e2:	9b06      	ldr	r3, [sp, #24]
 80066e4:	3b02      	subs	r3, #2
 80066e6:	9306      	str	r3, [sp, #24]
 80066e8:	9906      	ldr	r1, [sp, #24]
 80066ea:	f89d 2018 	ldrb.w	r2, [sp, #24]
 80066ee:	f021 0120 	bic.w	r1, r1, #32
 80066f2:	2941      	cmp	r1, #65	; 0x41
 80066f4:	bf08      	it	eq
 80066f6:	320f      	addeq	r2, #15
 80066f8:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
 80066fc:	bf06      	itte	eq
 80066fe:	b2d2      	uxtbeq	r2, r2
 8006700:	2101      	moveq	r1, #1
 8006702:	2100      	movne	r1, #0
 8006704:	2b00      	cmp	r3, #0
 8006706:	9320      	str	r3, [sp, #128]	; 0x80
 8006708:	bfb8      	it	lt
 800670a:	f1c6 0301 	rsblt	r3, r6, #1
 800670e:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 8006712:	bfb4      	ite	lt
 8006714:	222d      	movlt	r2, #45	; 0x2d
 8006716:	222b      	movge	r2, #43	; 0x2b
 8006718:	2b09      	cmp	r3, #9
 800671a:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 800671e:	f340 80c9 	ble.w	80068b4 <_svfprintf_r+0x83c>
 8006722:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 8006726:	250a      	movs	r5, #10
 8006728:	fb93 f0f5 	sdiv	r0, r3, r5
 800672c:	fb05 3310 	mls	r3, r5, r0, r3
 8006730:	3330      	adds	r3, #48	; 0x30
 8006732:	2809      	cmp	r0, #9
 8006734:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006738:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 800673c:	4603      	mov	r3, r0
 800673e:	f300 80b2 	bgt.w	80068a6 <_svfprintf_r+0x82e>
 8006742:	3330      	adds	r3, #48	; 0x30
 8006744:	f801 3c01 	strb.w	r3, [r1, #-1]
 8006748:	3a02      	subs	r2, #2
 800674a:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 800674e:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 8006752:	4282      	cmp	r2, r0
 8006754:	4619      	mov	r1, r3
 8006756:	f0c0 80a8 	bcc.w	80068aa <_svfprintf_r+0x832>
 800675a:	9a04      	ldr	r2, [sp, #16]
 800675c:	ab22      	add	r3, sp, #136	; 0x88
 800675e:	1acb      	subs	r3, r1, r3
 8006760:	2a01      	cmp	r2, #1
 8006762:	9317      	str	r3, [sp, #92]	; 0x5c
 8006764:	eb03 0502 	add.w	r5, r3, r2
 8006768:	dc02      	bgt.n	8006770 <_svfprintf_r+0x6f8>
 800676a:	f01a 0f01 	tst.w	sl, #1
 800676e:	d001      	beq.n	8006774 <_svfprintf_r+0x6fc>
 8006770:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006772:	441d      	add	r5, r3
 8006774:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8006778:	2700      	movs	r7, #0
 800677a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800677e:	9310      	str	r3, [sp, #64]	; 0x40
 8006780:	9707      	str	r7, [sp, #28]
 8006782:	463e      	mov	r6, r7
 8006784:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 8315 	beq.w	8006db6 <_svfprintf_r+0xd3e>
 800678c:	232d      	movs	r3, #45	; 0x2d
 800678e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8006792:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8006796:	2300      	movs	r3, #0
 8006798:	9310      	str	r3, [sp, #64]	; 0x40
 800679a:	e160      	b.n	8006a5e <_svfprintf_r+0x9e6>
 800679c:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 80067a0:	e714      	b.n	80065cc <_svfprintf_r+0x554>
 80067a2:	4681      	mov	r9, r0
 80067a4:	e712      	b.n	80065cc <_svfprintf_r+0x554>
 80067a6:	2506      	movs	r5, #6
 80067a8:	e710      	b.n	80065cc <_svfprintf_r+0x554>
 80067aa:	46a9      	mov	r9, r5
 80067ac:	2501      	movs	r5, #1
 80067ae:	e70d      	b.n	80065cc <_svfprintf_r+0x554>
 80067b0:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 80067b4:	2300      	movs	r3, #0
 80067b6:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 80067ba:	e715      	b.n	80065e8 <_svfprintf_r+0x570>
 80067bc:	7fefffff 	.word	0x7fefffff
 80067c0:	0800a938 	.word	0x0800a938
 80067c4:	0800a934 	.word	0x0800a934
 80067c8:	0800a940 	.word	0x0800a940
 80067cc:	0800a93c 	.word	0x0800a93c
 80067d0:	0800a955 	.word	0x0800a955
 80067d4:	0800a944 	.word	0x0800a944
 80067d8:	40300000 	.word	0x40300000
 80067dc:	3fe00000 	.word	0x3fe00000
 80067e0:	f802 0c01 	strb.w	r0, [r2, #-1]
 80067e4:	e75f      	b.n	80066a6 <_svfprintf_r+0x62e>
 80067e6:	f803 1b01 	strb.w	r1, [r3], #1
 80067ea:	1af2      	subs	r2, r6, r3
 80067ec:	2a00      	cmp	r2, #0
 80067ee:	dafa      	bge.n	80067e6 <_svfprintf_r+0x76e>
 80067f0:	e76a      	b.n	80066c8 <_svfprintf_r+0x650>
 80067f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80067f4:	4633      	mov	r3, r6
 80067f6:	2130      	movs	r1, #48	; 0x30
 80067f8:	4416      	add	r6, r2
 80067fa:	e7f6      	b.n	80067ea <_svfprintf_r+0x772>
 80067fc:	9b07      	ldr	r3, [sp, #28]
 80067fe:	2b46      	cmp	r3, #70	; 0x46
 8006800:	d004      	beq.n	800680c <_svfprintf_r+0x794>
 8006802:	2b45      	cmp	r3, #69	; 0x45
 8006804:	d13a      	bne.n	800687c <_svfprintf_r+0x804>
 8006806:	1c6e      	adds	r6, r5, #1
 8006808:	2102      	movs	r1, #2
 800680a:	e001      	b.n	8006810 <_svfprintf_r+0x798>
 800680c:	462e      	mov	r6, r5
 800680e:	2103      	movs	r1, #3
 8006810:	ab24      	add	r3, sp, #144	; 0x90
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	ab21      	add	r3, sp, #132	; 0x84
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	4632      	mov	r2, r6
 800681a:	ab20      	add	r3, sp, #128	; 0x80
 800681c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 8006820:	9803      	ldr	r0, [sp, #12]
 8006822:	f000 fee5 	bl	80075f0 <_dtoa_r>
 8006826:	9b07      	ldr	r3, [sp, #28]
 8006828:	2b47      	cmp	r3, #71	; 0x47
 800682a:	4683      	mov	fp, r0
 800682c:	d102      	bne.n	8006834 <_svfprintf_r+0x7bc>
 800682e:	f01a 0f01 	tst.w	sl, #1
 8006832:	d026      	beq.n	8006882 <_svfprintf_r+0x80a>
 8006834:	9b07      	ldr	r3, [sp, #28]
 8006836:	2b46      	cmp	r3, #70	; 0x46
 8006838:	eb0b 0706 	add.w	r7, fp, r6
 800683c:	d10f      	bne.n	800685e <_svfprintf_r+0x7e6>
 800683e:	f89b 3000 	ldrb.w	r3, [fp]
 8006842:	2b30      	cmp	r3, #48	; 0x30
 8006844:	d109      	bne.n	800685a <_svfprintf_r+0x7e2>
 8006846:	2200      	movs	r2, #0
 8006848:	2300      	movs	r3, #0
 800684a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800684e:	f7fa f9e3 	bl	8000c18 <__aeabi_dcmpeq>
 8006852:	b910      	cbnz	r0, 800685a <_svfprintf_r+0x7e2>
 8006854:	f1c6 0601 	rsb	r6, r6, #1
 8006858:	9620      	str	r6, [sp, #128]	; 0x80
 800685a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800685c:	441f      	add	r7, r3
 800685e:	2200      	movs	r2, #0
 8006860:	2300      	movs	r3, #0
 8006862:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 8006866:	f7fa f9d7 	bl	8000c18 <__aeabi_dcmpeq>
 800686a:	b948      	cbnz	r0, 8006880 <_svfprintf_r+0x808>
 800686c:	2230      	movs	r2, #48	; 0x30
 800686e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006870:	429f      	cmp	r7, r3
 8006872:	d906      	bls.n	8006882 <_svfprintf_r+0x80a>
 8006874:	1c59      	adds	r1, r3, #1
 8006876:	9124      	str	r1, [sp, #144]	; 0x90
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	e7f8      	b.n	800686e <_svfprintf_r+0x7f6>
 800687c:	462e      	mov	r6, r5
 800687e:	e7c3      	b.n	8006808 <_svfprintf_r+0x790>
 8006880:	9724      	str	r7, [sp, #144]	; 0x90
 8006882:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006884:	e720      	b.n	80066c8 <_svfprintf_r+0x650>
 8006886:	9b07      	ldr	r3, [sp, #28]
 8006888:	2b46      	cmp	r3, #70	; 0x46
 800688a:	f47f af2d 	bne.w	80066e8 <_svfprintf_r+0x670>
 800688e:	2e00      	cmp	r6, #0
 8006890:	dd1d      	ble.n	80068ce <_svfprintf_r+0x856>
 8006892:	b915      	cbnz	r5, 800689a <_svfprintf_r+0x822>
 8006894:	f01a 0f01 	tst.w	sl, #1
 8006898:	d034      	beq.n	8006904 <_svfprintf_r+0x88c>
 800689a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800689c:	18f3      	adds	r3, r6, r3
 800689e:	441d      	add	r5, r3
 80068a0:	2366      	movs	r3, #102	; 0x66
 80068a2:	9306      	str	r3, [sp, #24]
 80068a4:	e033      	b.n	800690e <_svfprintf_r+0x896>
 80068a6:	460a      	mov	r2, r1
 80068a8:	e73e      	b.n	8006728 <_svfprintf_r+0x6b0>
 80068aa:	f812 1b01 	ldrb.w	r1, [r2], #1
 80068ae:	f803 1b01 	strb.w	r1, [r3], #1
 80068b2:	e74e      	b.n	8006752 <_svfprintf_r+0x6da>
 80068b4:	b941      	cbnz	r1, 80068c8 <_svfprintf_r+0x850>
 80068b6:	2230      	movs	r2, #48	; 0x30
 80068b8:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 80068bc:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 80068c0:	3330      	adds	r3, #48	; 0x30
 80068c2:	1c51      	adds	r1, r2, #1
 80068c4:	7013      	strb	r3, [r2, #0]
 80068c6:	e748      	b.n	800675a <_svfprintf_r+0x6e2>
 80068c8:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 80068cc:	e7f8      	b.n	80068c0 <_svfprintf_r+0x848>
 80068ce:	b915      	cbnz	r5, 80068d6 <_svfprintf_r+0x85e>
 80068d0:	f01a 0f01 	tst.w	sl, #1
 80068d4:	d018      	beq.n	8006908 <_svfprintf_r+0x890>
 80068d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068d8:	3301      	adds	r3, #1
 80068da:	e7e0      	b.n	800689e <_svfprintf_r+0x826>
 80068dc:	9b04      	ldr	r3, [sp, #16]
 80068de:	42b3      	cmp	r3, r6
 80068e0:	dc06      	bgt.n	80068f0 <_svfprintf_r+0x878>
 80068e2:	f01a 0f01 	tst.w	sl, #1
 80068e6:	d025      	beq.n	8006934 <_svfprintf_r+0x8bc>
 80068e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068ea:	18f5      	adds	r5, r6, r3
 80068ec:	2367      	movs	r3, #103	; 0x67
 80068ee:	e7d8      	b.n	80068a2 <_svfprintf_r+0x82a>
 80068f0:	9b04      	ldr	r3, [sp, #16]
 80068f2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80068f4:	2e00      	cmp	r6, #0
 80068f6:	eb03 0502 	add.w	r5, r3, r2
 80068fa:	dcf7      	bgt.n	80068ec <_svfprintf_r+0x874>
 80068fc:	f1c6 0301 	rsb	r3, r6, #1
 8006900:	441d      	add	r5, r3
 8006902:	e7f3      	b.n	80068ec <_svfprintf_r+0x874>
 8006904:	4635      	mov	r5, r6
 8006906:	e7cb      	b.n	80068a0 <_svfprintf_r+0x828>
 8006908:	2366      	movs	r3, #102	; 0x66
 800690a:	9306      	str	r3, [sp, #24]
 800690c:	2501      	movs	r5, #1
 800690e:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 8006912:	9307      	str	r3, [sp, #28]
 8006914:	d01f      	beq.n	8006956 <_svfprintf_r+0x8de>
 8006916:	2700      	movs	r7, #0
 8006918:	2e00      	cmp	r6, #0
 800691a:	9707      	str	r7, [sp, #28]
 800691c:	f77f af32 	ble.w	8006784 <_svfprintf_r+0x70c>
 8006920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	2bff      	cmp	r3, #255	; 0xff
 8006926:	d107      	bne.n	8006938 <_svfprintf_r+0x8c0>
 8006928:	9b07      	ldr	r3, [sp, #28]
 800692a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800692c:	443b      	add	r3, r7
 800692e:	fb02 5503 	mla	r5, r2, r3, r5
 8006932:	e727      	b.n	8006784 <_svfprintf_r+0x70c>
 8006934:	4635      	mov	r5, r6
 8006936:	e7d9      	b.n	80068ec <_svfprintf_r+0x874>
 8006938:	42b3      	cmp	r3, r6
 800693a:	daf5      	bge.n	8006928 <_svfprintf_r+0x8b0>
 800693c:	1af6      	subs	r6, r6, r3
 800693e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006940:	785b      	ldrb	r3, [r3, #1]
 8006942:	b133      	cbz	r3, 8006952 <_svfprintf_r+0x8da>
 8006944:	9b07      	ldr	r3, [sp, #28]
 8006946:	3301      	adds	r3, #1
 8006948:	9307      	str	r3, [sp, #28]
 800694a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694c:	3301      	adds	r3, #1
 800694e:	9309      	str	r3, [sp, #36]	; 0x24
 8006950:	e7e6      	b.n	8006920 <_svfprintf_r+0x8a8>
 8006952:	3701      	adds	r7, #1
 8006954:	e7e4      	b.n	8006920 <_svfprintf_r+0x8a8>
 8006956:	9f07      	ldr	r7, [sp, #28]
 8006958:	e714      	b.n	8006784 <_svfprintf_r+0x70c>
 800695a:	4632      	mov	r2, r6
 800695c:	f01a 0f20 	tst.w	sl, #32
 8006960:	f852 3b04 	ldr.w	r3, [r2], #4
 8006964:	9208      	str	r2, [sp, #32]
 8006966:	d009      	beq.n	800697c <_svfprintf_r+0x904>
 8006968:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800696a:	4610      	mov	r0, r2
 800696c:	17d1      	asrs	r1, r2, #31
 800696e:	e9c3 0100 	strd	r0, r1, [r3]
 8006972:	9e08      	ldr	r6, [sp, #32]
 8006974:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8006978:	f7ff bbba 	b.w	80060f0 <_svfprintf_r+0x78>
 800697c:	f01a 0f10 	tst.w	sl, #16
 8006980:	d002      	beq.n	8006988 <_svfprintf_r+0x910>
 8006982:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006984:	601a      	str	r2, [r3, #0]
 8006986:	e7f4      	b.n	8006972 <_svfprintf_r+0x8fa>
 8006988:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800698c:	d002      	beq.n	8006994 <_svfprintf_r+0x91c>
 800698e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006990:	801a      	strh	r2, [r3, #0]
 8006992:	e7ee      	b.n	8006972 <_svfprintf_r+0x8fa>
 8006994:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006998:	d0f3      	beq.n	8006982 <_svfprintf_r+0x90a>
 800699a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	e7e8      	b.n	8006972 <_svfprintf_r+0x8fa>
 80069a0:	f04a 0a10 	orr.w	sl, sl, #16
 80069a4:	f01a 0f20 	tst.w	sl, #32
 80069a8:	d01e      	beq.n	80069e8 <_svfprintf_r+0x970>
 80069aa:	3607      	adds	r6, #7
 80069ac:	f026 0607 	bic.w	r6, r6, #7
 80069b0:	f106 0308 	add.w	r3, r6, #8
 80069b4:	e9d6 6700 	ldrd	r6, r7, [r6]
 80069b8:	9308      	str	r3, [sp, #32]
 80069ba:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80069be:	2300      	movs	r3, #0
 80069c0:	2200      	movs	r2, #0
 80069c2:	1c69      	adds	r1, r5, #1
 80069c4:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 80069c8:	f000 815b 	beq.w	8006c82 <_svfprintf_r+0xc0a>
 80069cc:	4652      	mov	r2, sl
 80069ce:	ea56 0107 	orrs.w	r1, r6, r7
 80069d2:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80069d6:	f040 8154 	bne.w	8006c82 <_svfprintf_r+0xc0a>
 80069da:	2d00      	cmp	r5, #0
 80069dc:	f000 81d5 	beq.w	8006d8a <_svfprintf_r+0xd12>
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	f040 8151 	bne.w	8006c88 <_svfprintf_r+0xc10>
 80069e6:	e558      	b.n	800649a <_svfprintf_r+0x422>
 80069e8:	1d33      	adds	r3, r6, #4
 80069ea:	f01a 0f10 	tst.w	sl, #16
 80069ee:	9308      	str	r3, [sp, #32]
 80069f0:	d001      	beq.n	80069f6 <_svfprintf_r+0x97e>
 80069f2:	6836      	ldr	r6, [r6, #0]
 80069f4:	e003      	b.n	80069fe <_svfprintf_r+0x986>
 80069f6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 80069fa:	d002      	beq.n	8006a02 <_svfprintf_r+0x98a>
 80069fc:	8836      	ldrh	r6, [r6, #0]
 80069fe:	2700      	movs	r7, #0
 8006a00:	e7db      	b.n	80069ba <_svfprintf_r+0x942>
 8006a02:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006a06:	d0f4      	beq.n	80069f2 <_svfprintf_r+0x97a>
 8006a08:	7836      	ldrb	r6, [r6, #0]
 8006a0a:	e7f8      	b.n	80069fe <_svfprintf_r+0x986>
 8006a0c:	1d33      	adds	r3, r6, #4
 8006a0e:	9308      	str	r3, [sp, #32]
 8006a10:	f647 0330 	movw	r3, #30768	; 0x7830
 8006a14:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8006a18:	2278      	movs	r2, #120	; 0x78
 8006a1a:	4bb0      	ldr	r3, [pc, #704]	; (8006cdc <_svfprintf_r+0xc64>)
 8006a1c:	9318      	str	r3, [sp, #96]	; 0x60
 8006a1e:	6836      	ldr	r6, [r6, #0]
 8006a20:	9206      	str	r2, [sp, #24]
 8006a22:	2700      	movs	r7, #0
 8006a24:	f04a 0a02 	orr.w	sl, sl, #2
 8006a28:	2302      	movs	r3, #2
 8006a2a:	e7c9      	b.n	80069c0 <_svfprintf_r+0x948>
 8006a2c:	1d33      	adds	r3, r6, #4
 8006a2e:	f8d6 b000 	ldr.w	fp, [r6]
 8006a32:	9308      	str	r3, [sp, #32]
 8006a34:	2600      	movs	r6, #0
 8006a36:	1c68      	adds	r0, r5, #1
 8006a38:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 8006a3c:	f000 80e1 	beq.w	8006c02 <_svfprintf_r+0xb8a>
 8006a40:	462a      	mov	r2, r5
 8006a42:	4631      	mov	r1, r6
 8006a44:	4658      	mov	r0, fp
 8006a46:	f7f9 fc73 	bl	8000330 <memchr>
 8006a4a:	4681      	mov	r9, r0
 8006a4c:	2800      	cmp	r0, #0
 8006a4e:	f43f ad74 	beq.w	800653a <_svfprintf_r+0x4c2>
 8006a52:	eba0 050b 	sub.w	r5, r0, fp
 8006a56:	46b1      	mov	r9, r6
 8006a58:	9610      	str	r6, [sp, #64]	; 0x40
 8006a5a:	4637      	mov	r7, r6
 8006a5c:	9607      	str	r6, [sp, #28]
 8006a5e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a60:	42ab      	cmp	r3, r5
 8006a62:	bfb8      	it	lt
 8006a64:	462b      	movlt	r3, r5
 8006a66:	9311      	str	r3, [sp, #68]	; 0x44
 8006a68:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8006a6c:	b113      	cbz	r3, 8006a74 <_svfprintf_r+0x9fc>
 8006a6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006a70:	3301      	adds	r3, #1
 8006a72:	9311      	str	r3, [sp, #68]	; 0x44
 8006a74:	f01a 0302 	ands.w	r3, sl, #2
 8006a78:	931c      	str	r3, [sp, #112]	; 0x70
 8006a7a:	bf1e      	ittt	ne
 8006a7c:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8006a7e:	3302      	addne	r3, #2
 8006a80:	9311      	strne	r3, [sp, #68]	; 0x44
 8006a82:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8006a86:	931d      	str	r3, [sp, #116]	; 0x74
 8006a88:	d122      	bne.n	8006ad0 <_svfprintf_r+0xa58>
 8006a8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a8c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a8e:	1a9b      	subs	r3, r3, r2
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	9313      	str	r3, [sp, #76]	; 0x4c
 8006a94:	dd1c      	ble.n	8006ad0 <_svfprintf_r+0xa58>
 8006a96:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006a98:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8006a9c:	2810      	cmp	r0, #16
 8006a9e:	4890      	ldr	r0, [pc, #576]	; (8006ce0 <_svfprintf_r+0xc68>)
 8006aa0:	6020      	str	r0, [r4, #0]
 8006aa2:	f102 0201 	add.w	r2, r2, #1
 8006aa6:	f104 0108 	add.w	r1, r4, #8
 8006aaa:	f300 8188 	bgt.w	8006dbe <_svfprintf_r+0xd46>
 8006aae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006ab0:	6060      	str	r0, [r4, #4]
 8006ab2:	4403      	add	r3, r0
 8006ab4:	2a07      	cmp	r2, #7
 8006ab6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8006aba:	f340 8195 	ble.w	8006de8 <_svfprintf_r+0xd70>
 8006abe:	aa26      	add	r2, sp, #152	; 0x98
 8006ac0:	4641      	mov	r1, r8
 8006ac2:	9803      	ldr	r0, [sp, #12]
 8006ac4:	f002 f9be 	bl	8008e44 <__ssprint_r>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	f040 84c1 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006ace:	ac29      	add	r4, sp, #164	; 0xa4
 8006ad0:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8006ad4:	b173      	cbz	r3, 8006af4 <_svfprintf_r+0xa7c>
 8006ad6:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8006ada:	6023      	str	r3, [r4, #0]
 8006adc:	2301      	movs	r3, #1
 8006ade:	6063      	str	r3, [r4, #4]
 8006ae0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006ae2:	3301      	adds	r3, #1
 8006ae4:	9328      	str	r3, [sp, #160]	; 0xa0
 8006ae6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006ae8:	3301      	adds	r3, #1
 8006aea:	2b07      	cmp	r3, #7
 8006aec:	9327      	str	r3, [sp, #156]	; 0x9c
 8006aee:	f300 817d 	bgt.w	8006dec <_svfprintf_r+0xd74>
 8006af2:	3408      	adds	r4, #8
 8006af4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8006af6:	b16b      	cbz	r3, 8006b14 <_svfprintf_r+0xa9c>
 8006af8:	ab1f      	add	r3, sp, #124	; 0x7c
 8006afa:	6023      	str	r3, [r4, #0]
 8006afc:	2302      	movs	r3, #2
 8006afe:	6063      	str	r3, [r4, #4]
 8006b00:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006b02:	3302      	adds	r3, #2
 8006b04:	9328      	str	r3, [sp, #160]	; 0xa0
 8006b06:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006b08:	3301      	adds	r3, #1
 8006b0a:	2b07      	cmp	r3, #7
 8006b0c:	9327      	str	r3, [sp, #156]	; 0x9c
 8006b0e:	f300 8177 	bgt.w	8006e00 <_svfprintf_r+0xd88>
 8006b12:	3408      	adds	r4, #8
 8006b14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006b16:	2b80      	cmp	r3, #128	; 0x80
 8006b18:	d122      	bne.n	8006b60 <_svfprintf_r+0xae8>
 8006b1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b1c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006b1e:	1a9b      	subs	r3, r3, r2
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	9313      	str	r3, [sp, #76]	; 0x4c
 8006b24:	dd1c      	ble.n	8006b60 <_svfprintf_r+0xae8>
 8006b26:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006b28:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8006b2c:	2810      	cmp	r0, #16
 8006b2e:	486d      	ldr	r0, [pc, #436]	; (8006ce4 <_svfprintf_r+0xc6c>)
 8006b30:	6020      	str	r0, [r4, #0]
 8006b32:	f102 0201 	add.w	r2, r2, #1
 8006b36:	f104 0108 	add.w	r1, r4, #8
 8006b3a:	f300 816b 	bgt.w	8006e14 <_svfprintf_r+0xd9c>
 8006b3e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8006b40:	6060      	str	r0, [r4, #4]
 8006b42:	4403      	add	r3, r0
 8006b44:	2a07      	cmp	r2, #7
 8006b46:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8006b4a:	f340 8178 	ble.w	8006e3e <_svfprintf_r+0xdc6>
 8006b4e:	aa26      	add	r2, sp, #152	; 0x98
 8006b50:	4641      	mov	r1, r8
 8006b52:	9803      	ldr	r0, [sp, #12]
 8006b54:	f002 f976 	bl	8008e44 <__ssprint_r>
 8006b58:	2800      	cmp	r0, #0
 8006b5a:	f040 8479 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006b5e:	ac29      	add	r4, sp, #164	; 0xa4
 8006b60:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006b62:	1b5b      	subs	r3, r3, r5
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	9310      	str	r3, [sp, #64]	; 0x40
 8006b68:	dd1c      	ble.n	8006ba4 <_svfprintf_r+0xb2c>
 8006b6a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006b6c:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8006b70:	2810      	cmp	r0, #16
 8006b72:	485c      	ldr	r0, [pc, #368]	; (8006ce4 <_svfprintf_r+0xc6c>)
 8006b74:	6020      	str	r0, [r4, #0]
 8006b76:	f102 0201 	add.w	r2, r2, #1
 8006b7a:	f104 0108 	add.w	r1, r4, #8
 8006b7e:	f300 8160 	bgt.w	8006e42 <_svfprintf_r+0xdca>
 8006b82:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006b84:	6060      	str	r0, [r4, #4]
 8006b86:	4403      	add	r3, r0
 8006b88:	2a07      	cmp	r2, #7
 8006b8a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8006b8e:	f340 816d 	ble.w	8006e6c <_svfprintf_r+0xdf4>
 8006b92:	aa26      	add	r2, sp, #152	; 0x98
 8006b94:	4641      	mov	r1, r8
 8006b96:	9803      	ldr	r0, [sp, #12]
 8006b98:	f002 f954 	bl	8008e44 <__ssprint_r>
 8006b9c:	2800      	cmp	r0, #0
 8006b9e:	f040 8457 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006ba2:	ac29      	add	r4, sp, #164	; 0xa4
 8006ba4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006ba6:	9310      	str	r3, [sp, #64]	; 0x40
 8006ba8:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8006bac:	f040 8160 	bne.w	8006e70 <_svfprintf_r+0xdf8>
 8006bb0:	e9c4 b500 	strd	fp, r5, [r4]
 8006bb4:	441d      	add	r5, r3
 8006bb6:	9528      	str	r5, [sp, #160]	; 0xa0
 8006bb8:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006bba:	3301      	adds	r3, #1
 8006bbc:	2b07      	cmp	r3, #7
 8006bbe:	9327      	str	r3, [sp, #156]	; 0x9c
 8006bc0:	f300 819c 	bgt.w	8006efc <_svfprintf_r+0xe84>
 8006bc4:	3408      	adds	r4, #8
 8006bc6:	f01a 0f04 	tst.w	sl, #4
 8006bca:	f040 8423 	bne.w	8007414 <_svfprintf_r+0x139c>
 8006bce:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8006bd2:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006bd4:	428a      	cmp	r2, r1
 8006bd6:	bfac      	ite	ge
 8006bd8:	189b      	addge	r3, r3, r2
 8006bda:	185b      	addlt	r3, r3, r1
 8006bdc:	930e      	str	r3, [sp, #56]	; 0x38
 8006bde:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006be0:	b13b      	cbz	r3, 8006bf2 <_svfprintf_r+0xb7a>
 8006be2:	aa26      	add	r2, sp, #152	; 0x98
 8006be4:	4641      	mov	r1, r8
 8006be6:	9803      	ldr	r0, [sp, #12]
 8006be8:	f002 f92c 	bl	8008e44 <__ssprint_r>
 8006bec:	2800      	cmp	r0, #0
 8006bee:	f040 842f 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	9327      	str	r3, [sp, #156]	; 0x9c
 8006bf6:	f1b9 0f00 	cmp.w	r9, #0
 8006bfa:	f040 8445 	bne.w	8007488 <_svfprintf_r+0x1410>
 8006bfe:	ac29      	add	r4, sp, #164	; 0xa4
 8006c00:	e6b7      	b.n	8006972 <_svfprintf_r+0x8fa>
 8006c02:	4658      	mov	r0, fp
 8006c04:	f7f9 fb8c 	bl	8000320 <strlen>
 8006c08:	46b1      	mov	r9, r6
 8006c0a:	4605      	mov	r5, r0
 8006c0c:	e495      	b.n	800653a <_svfprintf_r+0x4c2>
 8006c0e:	f04a 0a10 	orr.w	sl, sl, #16
 8006c12:	f01a 0f20 	tst.w	sl, #32
 8006c16:	d009      	beq.n	8006c2c <_svfprintf_r+0xbb4>
 8006c18:	3607      	adds	r6, #7
 8006c1a:	f026 0607 	bic.w	r6, r6, #7
 8006c1e:	f106 0308 	add.w	r3, r6, #8
 8006c22:	e9d6 6700 	ldrd	r6, r7, [r6]
 8006c26:	9308      	str	r3, [sp, #32]
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e6c9      	b.n	80069c0 <_svfprintf_r+0x948>
 8006c2c:	1d33      	adds	r3, r6, #4
 8006c2e:	f01a 0f10 	tst.w	sl, #16
 8006c32:	9308      	str	r3, [sp, #32]
 8006c34:	d001      	beq.n	8006c3a <_svfprintf_r+0xbc2>
 8006c36:	6836      	ldr	r6, [r6, #0]
 8006c38:	e003      	b.n	8006c42 <_svfprintf_r+0xbca>
 8006c3a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006c3e:	d002      	beq.n	8006c46 <_svfprintf_r+0xbce>
 8006c40:	8836      	ldrh	r6, [r6, #0]
 8006c42:	2700      	movs	r7, #0
 8006c44:	e7f0      	b.n	8006c28 <_svfprintf_r+0xbb0>
 8006c46:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006c4a:	d0f4      	beq.n	8006c36 <_svfprintf_r+0xbbe>
 8006c4c:	7836      	ldrb	r6, [r6, #0]
 8006c4e:	e7f8      	b.n	8006c42 <_svfprintf_r+0xbca>
 8006c50:	4b22      	ldr	r3, [pc, #136]	; (8006cdc <_svfprintf_r+0xc64>)
 8006c52:	f7ff bb48 	b.w	80062e6 <_svfprintf_r+0x26e>
 8006c56:	1d33      	adds	r3, r6, #4
 8006c58:	f01a 0f10 	tst.w	sl, #16
 8006c5c:	9308      	str	r3, [sp, #32]
 8006c5e:	d001      	beq.n	8006c64 <_svfprintf_r+0xbec>
 8006c60:	6836      	ldr	r6, [r6, #0]
 8006c62:	e003      	b.n	8006c6c <_svfprintf_r+0xbf4>
 8006c64:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8006c68:	d003      	beq.n	8006c72 <_svfprintf_r+0xbfa>
 8006c6a:	8836      	ldrh	r6, [r6, #0]
 8006c6c:	2700      	movs	r7, #0
 8006c6e:	f7ff bb47 	b.w	8006300 <_svfprintf_r+0x288>
 8006c72:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8006c76:	d0f3      	beq.n	8006c60 <_svfprintf_r+0xbe8>
 8006c78:	7836      	ldrb	r6, [r6, #0]
 8006c7a:	e7f7      	b.n	8006c6c <_svfprintf_r+0xbf4>
 8006c7c:	4652      	mov	r2, sl
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e6a5      	b.n	80069ce <_svfprintf_r+0x956>
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	f43f ac04 	beq.w	8006490 <_svfprintf_r+0x418>
 8006c88:	2b02      	cmp	r3, #2
 8006c8a:	d06c      	beq.n	8006d66 <_svfprintf_r+0xcee>
 8006c8c:	ab52      	add	r3, sp, #328	; 0x148
 8006c8e:	08f1      	lsrs	r1, r6, #3
 8006c90:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8006c94:	08f8      	lsrs	r0, r7, #3
 8006c96:	f006 0207 	and.w	r2, r6, #7
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	460e      	mov	r6, r1
 8006c9e:	3230      	adds	r2, #48	; 0x30
 8006ca0:	ea56 0107 	orrs.w	r1, r6, r7
 8006ca4:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8006ca8:	f803 2c01 	strb.w	r2, [r3, #-1]
 8006cac:	d114      	bne.n	8006cd8 <_svfprintf_r+0xc60>
 8006cae:	f01a 0f01 	tst.w	sl, #1
 8006cb2:	d006      	beq.n	8006cc2 <_svfprintf_r+0xc4a>
 8006cb4:	2a30      	cmp	r2, #48	; 0x30
 8006cb6:	d004      	beq.n	8006cc2 <_svfprintf_r+0xc4a>
 8006cb8:	2230      	movs	r2, #48	; 0x30
 8006cba:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8006cbe:	f1a3 0b02 	sub.w	fp, r3, #2
 8006cc2:	ab52      	add	r3, sp, #328	; 0x148
 8006cc4:	9510      	str	r5, [sp, #64]	; 0x40
 8006cc6:	f04f 0900 	mov.w	r9, #0
 8006cca:	eba3 050b 	sub.w	r5, r3, fp
 8006cce:	464f      	mov	r7, r9
 8006cd0:	f8cd 901c 	str.w	r9, [sp, #28]
 8006cd4:	464e      	mov	r6, r9
 8006cd6:	e6c2      	b.n	8006a5e <_svfprintf_r+0x9e6>
 8006cd8:	465b      	mov	r3, fp
 8006cda:	e7d8      	b.n	8006c8e <_svfprintf_r+0xc16>
 8006cdc:	0800a944 	.word	0x0800a944
 8006ce0:	0800a968 	.word	0x0800a968
 8006ce4:	0800a978 	.word	0x0800a978
 8006ce8:	2300      	movs	r3, #0
 8006cea:	9304      	str	r3, [sp, #16]
 8006cec:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8006cf0:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8006cf4:	9307      	str	r3, [sp, #28]
 8006cf6:	220a      	movs	r2, #10
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	4630      	mov	r0, r6
 8006cfc:	4639      	mov	r1, r7
 8006cfe:	f7f9 fffb 	bl	8000cf8 <__aeabi_uldivmod>
 8006d02:	9b04      	ldr	r3, [sp, #16]
 8006d04:	3301      	adds	r3, #1
 8006d06:	9304      	str	r3, [sp, #16]
 8006d08:	9b07      	ldr	r3, [sp, #28]
 8006d0a:	3230      	adds	r2, #48	; 0x30
 8006d0c:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8006d10:	f809 2c01 	strb.w	r2, [r9, #-1]
 8006d14:	b1d3      	cbz	r3, 8006d4c <_svfprintf_r+0xcd4>
 8006d16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d18:	9a04      	ldr	r2, [sp, #16]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d115      	bne.n	8006d4c <_svfprintf_r+0xcd4>
 8006d20:	2aff      	cmp	r2, #255	; 0xff
 8006d22:	d013      	beq.n	8006d4c <_svfprintf_r+0xcd4>
 8006d24:	2f00      	cmp	r7, #0
 8006d26:	bf08      	it	eq
 8006d28:	2e0a      	cmpeq	r6, #10
 8006d2a:	d30f      	bcc.n	8006d4c <_svfprintf_r+0xcd4>
 8006d2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006d2e:	9919      	ldr	r1, [sp, #100]	; 0x64
 8006d30:	ebab 0b03 	sub.w	fp, fp, r3
 8006d34:	461a      	mov	r2, r3
 8006d36:	4658      	mov	r0, fp
 8006d38:	f7ff f8f7 	bl	8005f2a <strncpy>
 8006d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3e:	785b      	ldrb	r3, [r3, #1]
 8006d40:	b11b      	cbz	r3, 8006d4a <_svfprintf_r+0xcd2>
 8006d42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d44:	3301      	adds	r3, #1
 8006d46:	9309      	str	r3, [sp, #36]	; 0x24
 8006d48:	2300      	movs	r3, #0
 8006d4a:	9304      	str	r3, [sp, #16]
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	4630      	mov	r0, r6
 8006d50:	4639      	mov	r1, r7
 8006d52:	220a      	movs	r2, #10
 8006d54:	f7f9 ffd0 	bl	8000cf8 <__aeabi_uldivmod>
 8006d58:	4606      	mov	r6, r0
 8006d5a:	460f      	mov	r7, r1
 8006d5c:	ea56 0307 	orrs.w	r3, r6, r7
 8006d60:	d0af      	beq.n	8006cc2 <_svfprintf_r+0xc4a>
 8006d62:	46d9      	mov	r9, fp
 8006d64:	e7c7      	b.n	8006cf6 <_svfprintf_r+0xc7e>
 8006d66:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8006d6a:	f006 030f 	and.w	r3, r6, #15
 8006d6e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006d70:	5cd3      	ldrb	r3, [r2, r3]
 8006d72:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8006d76:	0933      	lsrs	r3, r6, #4
 8006d78:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8006d7c:	093a      	lsrs	r2, r7, #4
 8006d7e:	461e      	mov	r6, r3
 8006d80:	4617      	mov	r7, r2
 8006d82:	ea56 0307 	orrs.w	r3, r6, r7
 8006d86:	d1f0      	bne.n	8006d6a <_svfprintf_r+0xcf2>
 8006d88:	e79b      	b.n	8006cc2 <_svfprintf_r+0xc4a>
 8006d8a:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d197      	bne.n	8006cc2 <_svfprintf_r+0xc4a>
 8006d92:	07d2      	lsls	r2, r2, #31
 8006d94:	bf44      	itt	mi
 8006d96:	2330      	movmi	r3, #48	; 0x30
 8006d98:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8006d9c:	e791      	b.n	8006cc2 <_svfprintf_r+0xc4a>
 8006d9e:	9b06      	ldr	r3, [sp, #24]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 8377 	beq.w	8007494 <_svfprintf_r+0x141c>
 8006da6:	2000      	movs	r0, #0
 8006da8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8006dac:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8006db0:	9608      	str	r6, [sp, #32]
 8006db2:	f7ff bb49 	b.w	8006448 <_svfprintf_r+0x3d0>
 8006db6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8006dba:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006dbc:	e4ec      	b.n	8006798 <_svfprintf_r+0x720>
 8006dbe:	2010      	movs	r0, #16
 8006dc0:	4403      	add	r3, r0
 8006dc2:	2a07      	cmp	r2, #7
 8006dc4:	6060      	str	r0, [r4, #4]
 8006dc6:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8006dca:	dd08      	ble.n	8006dde <_svfprintf_r+0xd66>
 8006dcc:	aa26      	add	r2, sp, #152	; 0x98
 8006dce:	4641      	mov	r1, r8
 8006dd0:	9803      	ldr	r0, [sp, #12]
 8006dd2:	f002 f837 	bl	8008e44 <__ssprint_r>
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	f040 833a 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006ddc:	a929      	add	r1, sp, #164	; 0xa4
 8006dde:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006de0:	3b10      	subs	r3, #16
 8006de2:	9313      	str	r3, [sp, #76]	; 0x4c
 8006de4:	460c      	mov	r4, r1
 8006de6:	e656      	b.n	8006a96 <_svfprintf_r+0xa1e>
 8006de8:	460c      	mov	r4, r1
 8006dea:	e671      	b.n	8006ad0 <_svfprintf_r+0xa58>
 8006dec:	aa26      	add	r2, sp, #152	; 0x98
 8006dee:	4641      	mov	r1, r8
 8006df0:	9803      	ldr	r0, [sp, #12]
 8006df2:	f002 f827 	bl	8008e44 <__ssprint_r>
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f040 832a 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006dfc:	ac29      	add	r4, sp, #164	; 0xa4
 8006dfe:	e679      	b.n	8006af4 <_svfprintf_r+0xa7c>
 8006e00:	aa26      	add	r2, sp, #152	; 0x98
 8006e02:	4641      	mov	r1, r8
 8006e04:	9803      	ldr	r0, [sp, #12]
 8006e06:	f002 f81d 	bl	8008e44 <__ssprint_r>
 8006e0a:	2800      	cmp	r0, #0
 8006e0c:	f040 8320 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006e10:	ac29      	add	r4, sp, #164	; 0xa4
 8006e12:	e67f      	b.n	8006b14 <_svfprintf_r+0xa9c>
 8006e14:	2010      	movs	r0, #16
 8006e16:	4403      	add	r3, r0
 8006e18:	2a07      	cmp	r2, #7
 8006e1a:	6060      	str	r0, [r4, #4]
 8006e1c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8006e20:	dd08      	ble.n	8006e34 <_svfprintf_r+0xdbc>
 8006e22:	aa26      	add	r2, sp, #152	; 0x98
 8006e24:	4641      	mov	r1, r8
 8006e26:	9803      	ldr	r0, [sp, #12]
 8006e28:	f002 f80c 	bl	8008e44 <__ssprint_r>
 8006e2c:	2800      	cmp	r0, #0
 8006e2e:	f040 830f 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006e32:	a929      	add	r1, sp, #164	; 0xa4
 8006e34:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006e36:	3b10      	subs	r3, #16
 8006e38:	9313      	str	r3, [sp, #76]	; 0x4c
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	e673      	b.n	8006b26 <_svfprintf_r+0xaae>
 8006e3e:	460c      	mov	r4, r1
 8006e40:	e68e      	b.n	8006b60 <_svfprintf_r+0xae8>
 8006e42:	2010      	movs	r0, #16
 8006e44:	4403      	add	r3, r0
 8006e46:	2a07      	cmp	r2, #7
 8006e48:	6060      	str	r0, [r4, #4]
 8006e4a:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8006e4e:	dd08      	ble.n	8006e62 <_svfprintf_r+0xdea>
 8006e50:	aa26      	add	r2, sp, #152	; 0x98
 8006e52:	4641      	mov	r1, r8
 8006e54:	9803      	ldr	r0, [sp, #12]
 8006e56:	f001 fff5 	bl	8008e44 <__ssprint_r>
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	f040 82f8 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006e60:	a929      	add	r1, sp, #164	; 0xa4
 8006e62:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006e64:	3b10      	subs	r3, #16
 8006e66:	9310      	str	r3, [sp, #64]	; 0x40
 8006e68:	460c      	mov	r4, r1
 8006e6a:	e67e      	b.n	8006b6a <_svfprintf_r+0xaf2>
 8006e6c:	460c      	mov	r4, r1
 8006e6e:	e699      	b.n	8006ba4 <_svfprintf_r+0xb2c>
 8006e70:	9b06      	ldr	r3, [sp, #24]
 8006e72:	2b65      	cmp	r3, #101	; 0x65
 8006e74:	f340 8234 	ble.w	80072e0 <_svfprintf_r+0x1268>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006e80:	f7f9 feca 	bl	8000c18 <__aeabi_dcmpeq>
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d069      	beq.n	8006f5c <_svfprintf_r+0xee4>
 8006e88:	4b6e      	ldr	r3, [pc, #440]	; (8007044 <_svfprintf_r+0xfcc>)
 8006e8a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006e8c:	6023      	str	r3, [r4, #0]
 8006e8e:	2301      	movs	r3, #1
 8006e90:	441d      	add	r5, r3
 8006e92:	6063      	str	r3, [r4, #4]
 8006e94:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006e96:	9528      	str	r5, [sp, #160]	; 0xa0
 8006e98:	3301      	adds	r3, #1
 8006e9a:	2b07      	cmp	r3, #7
 8006e9c:	9327      	str	r3, [sp, #156]	; 0x9c
 8006e9e:	dc37      	bgt.n	8006f10 <_svfprintf_r+0xe98>
 8006ea0:	3408      	adds	r4, #8
 8006ea2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006ea4:	9a04      	ldr	r2, [sp, #16]
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	db03      	blt.n	8006eb2 <_svfprintf_r+0xe3a>
 8006eaa:	f01a 0f01 	tst.w	sl, #1
 8006eae:	f43f ae8a 	beq.w	8006bc6 <_svfprintf_r+0xb4e>
 8006eb2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006eb4:	6023      	str	r3, [r4, #0]
 8006eb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006eb8:	6063      	str	r3, [r4, #4]
 8006eba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ebc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006ebe:	4413      	add	r3, r2
 8006ec0:	9328      	str	r3, [sp, #160]	; 0xa0
 8006ec2:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006ec4:	3301      	adds	r3, #1
 8006ec6:	2b07      	cmp	r3, #7
 8006ec8:	9327      	str	r3, [sp, #156]	; 0x9c
 8006eca:	dc2b      	bgt.n	8006f24 <_svfprintf_r+0xeac>
 8006ecc:	3408      	adds	r4, #8
 8006ece:	9b04      	ldr	r3, [sp, #16]
 8006ed0:	1e5d      	subs	r5, r3, #1
 8006ed2:	2d00      	cmp	r5, #0
 8006ed4:	f77f ae77 	ble.w	8006bc6 <_svfprintf_r+0xb4e>
 8006ed8:	4e5b      	ldr	r6, [pc, #364]	; (8007048 <_svfprintf_r+0xfd0>)
 8006eda:	2710      	movs	r7, #16
 8006edc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8006ee0:	2d10      	cmp	r5, #16
 8006ee2:	f103 0301 	add.w	r3, r3, #1
 8006ee6:	f104 0108 	add.w	r1, r4, #8
 8006eea:	6026      	str	r6, [r4, #0]
 8006eec:	dc24      	bgt.n	8006f38 <_svfprintf_r+0xec0>
 8006eee:	6065      	str	r5, [r4, #4]
 8006ef0:	2b07      	cmp	r3, #7
 8006ef2:	4415      	add	r5, r2
 8006ef4:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8006ef8:	f340 8289 	ble.w	800740e <_svfprintf_r+0x1396>
 8006efc:	aa26      	add	r2, sp, #152	; 0x98
 8006efe:	4641      	mov	r1, r8
 8006f00:	9803      	ldr	r0, [sp, #12]
 8006f02:	f001 ff9f 	bl	8008e44 <__ssprint_r>
 8006f06:	2800      	cmp	r0, #0
 8006f08:	f040 82a2 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006f0c:	ac29      	add	r4, sp, #164	; 0xa4
 8006f0e:	e65a      	b.n	8006bc6 <_svfprintf_r+0xb4e>
 8006f10:	aa26      	add	r2, sp, #152	; 0x98
 8006f12:	4641      	mov	r1, r8
 8006f14:	9803      	ldr	r0, [sp, #12]
 8006f16:	f001 ff95 	bl	8008e44 <__ssprint_r>
 8006f1a:	2800      	cmp	r0, #0
 8006f1c:	f040 8298 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006f20:	ac29      	add	r4, sp, #164	; 0xa4
 8006f22:	e7be      	b.n	8006ea2 <_svfprintf_r+0xe2a>
 8006f24:	aa26      	add	r2, sp, #152	; 0x98
 8006f26:	4641      	mov	r1, r8
 8006f28:	9803      	ldr	r0, [sp, #12]
 8006f2a:	f001 ff8b 	bl	8008e44 <__ssprint_r>
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f040 828e 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006f34:	ac29      	add	r4, sp, #164	; 0xa4
 8006f36:	e7ca      	b.n	8006ece <_svfprintf_r+0xe56>
 8006f38:	3210      	adds	r2, #16
 8006f3a:	2b07      	cmp	r3, #7
 8006f3c:	6067      	str	r7, [r4, #4]
 8006f3e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8006f42:	dd08      	ble.n	8006f56 <_svfprintf_r+0xede>
 8006f44:	aa26      	add	r2, sp, #152	; 0x98
 8006f46:	4641      	mov	r1, r8
 8006f48:	9803      	ldr	r0, [sp, #12]
 8006f4a:	f001 ff7b 	bl	8008e44 <__ssprint_r>
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	f040 827e 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006f54:	a929      	add	r1, sp, #164	; 0xa4
 8006f56:	3d10      	subs	r5, #16
 8006f58:	460c      	mov	r4, r1
 8006f5a:	e7bf      	b.n	8006edc <_svfprintf_r+0xe64>
 8006f5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	dc74      	bgt.n	800704c <_svfprintf_r+0xfd4>
 8006f62:	4b38      	ldr	r3, [pc, #224]	; (8007044 <_svfprintf_r+0xfcc>)
 8006f64:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8006f66:	6023      	str	r3, [r4, #0]
 8006f68:	2301      	movs	r3, #1
 8006f6a:	441d      	add	r5, r3
 8006f6c:	6063      	str	r3, [r4, #4]
 8006f6e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006f70:	9528      	str	r5, [sp, #160]	; 0xa0
 8006f72:	3301      	adds	r3, #1
 8006f74:	2b07      	cmp	r3, #7
 8006f76:	9327      	str	r3, [sp, #156]	; 0x9c
 8006f78:	dc3e      	bgt.n	8006ff8 <_svfprintf_r+0xf80>
 8006f7a:	3408      	adds	r4, #8
 8006f7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8006f7e:	b92b      	cbnz	r3, 8006f8c <_svfprintf_r+0xf14>
 8006f80:	9b04      	ldr	r3, [sp, #16]
 8006f82:	b91b      	cbnz	r3, 8006f8c <_svfprintf_r+0xf14>
 8006f84:	f01a 0f01 	tst.w	sl, #1
 8006f88:	f43f ae1d 	beq.w	8006bc6 <_svfprintf_r+0xb4e>
 8006f8c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f92:	6063      	str	r3, [r4, #4]
 8006f94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f96:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006f98:	4413      	add	r3, r2
 8006f9a:	9328      	str	r3, [sp, #160]	; 0xa0
 8006f9c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	2b07      	cmp	r3, #7
 8006fa2:	9327      	str	r3, [sp, #156]	; 0x9c
 8006fa4:	dc32      	bgt.n	800700c <_svfprintf_r+0xf94>
 8006fa6:	3408      	adds	r4, #8
 8006fa8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8006faa:	2d00      	cmp	r5, #0
 8006fac:	da1b      	bge.n	8006fe6 <_svfprintf_r+0xf6e>
 8006fae:	4e26      	ldr	r6, [pc, #152]	; (8007048 <_svfprintf_r+0xfd0>)
 8006fb0:	426d      	negs	r5, r5
 8006fb2:	4623      	mov	r3, r4
 8006fb4:	2710      	movs	r7, #16
 8006fb6:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8006fba:	2d10      	cmp	r5, #16
 8006fbc:	f102 0201 	add.w	r2, r2, #1
 8006fc0:	f104 0408 	add.w	r4, r4, #8
 8006fc4:	601e      	str	r6, [r3, #0]
 8006fc6:	dc2b      	bgt.n	8007020 <_svfprintf_r+0xfa8>
 8006fc8:	605d      	str	r5, [r3, #4]
 8006fca:	2a07      	cmp	r2, #7
 8006fcc:	440d      	add	r5, r1
 8006fce:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 8006fd2:	dd08      	ble.n	8006fe6 <_svfprintf_r+0xf6e>
 8006fd4:	aa26      	add	r2, sp, #152	; 0x98
 8006fd6:	4641      	mov	r1, r8
 8006fd8:	9803      	ldr	r0, [sp, #12]
 8006fda:	f001 ff33 	bl	8008e44 <__ssprint_r>
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f040 8236 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8006fe4:	ac29      	add	r4, sp, #164	; 0xa4
 8006fe6:	9b04      	ldr	r3, [sp, #16]
 8006fe8:	6063      	str	r3, [r4, #4]
 8006fea:	9a04      	ldr	r2, [sp, #16]
 8006fec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8006fee:	f8c4 b000 	str.w	fp, [r4]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	9328      	str	r3, [sp, #160]	; 0xa0
 8006ff6:	e5df      	b.n	8006bb8 <_svfprintf_r+0xb40>
 8006ff8:	aa26      	add	r2, sp, #152	; 0x98
 8006ffa:	4641      	mov	r1, r8
 8006ffc:	9803      	ldr	r0, [sp, #12]
 8006ffe:	f001 ff21 	bl	8008e44 <__ssprint_r>
 8007002:	2800      	cmp	r0, #0
 8007004:	f040 8224 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8007008:	ac29      	add	r4, sp, #164	; 0xa4
 800700a:	e7b7      	b.n	8006f7c <_svfprintf_r+0xf04>
 800700c:	aa26      	add	r2, sp, #152	; 0x98
 800700e:	4641      	mov	r1, r8
 8007010:	9803      	ldr	r0, [sp, #12]
 8007012:	f001 ff17 	bl	8008e44 <__ssprint_r>
 8007016:	2800      	cmp	r0, #0
 8007018:	f040 821a 	bne.w	8007450 <_svfprintf_r+0x13d8>
 800701c:	ac29      	add	r4, sp, #164	; 0xa4
 800701e:	e7c3      	b.n	8006fa8 <_svfprintf_r+0xf30>
 8007020:	3110      	adds	r1, #16
 8007022:	2a07      	cmp	r2, #7
 8007024:	605f      	str	r7, [r3, #4]
 8007026:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 800702a:	dd08      	ble.n	800703e <_svfprintf_r+0xfc6>
 800702c:	aa26      	add	r2, sp, #152	; 0x98
 800702e:	4641      	mov	r1, r8
 8007030:	9803      	ldr	r0, [sp, #12]
 8007032:	f001 ff07 	bl	8008e44 <__ssprint_r>
 8007036:	2800      	cmp	r0, #0
 8007038:	f040 820a 	bne.w	8007450 <_svfprintf_r+0x13d8>
 800703c:	ac29      	add	r4, sp, #164	; 0xa4
 800703e:	3d10      	subs	r5, #16
 8007040:	4623      	mov	r3, r4
 8007042:	e7b8      	b.n	8006fb6 <_svfprintf_r+0xf3e>
 8007044:	0800a966 	.word	0x0800a966
 8007048:	0800a978 	.word	0x0800a978
 800704c:	9b04      	ldr	r3, [sp, #16]
 800704e:	42b3      	cmp	r3, r6
 8007050:	bfa8      	it	ge
 8007052:	4633      	movge	r3, r6
 8007054:	2b00      	cmp	r3, #0
 8007056:	461d      	mov	r5, r3
 8007058:	dd0b      	ble.n	8007072 <_svfprintf_r+0xffa>
 800705a:	e9c4 b300 	strd	fp, r3, [r4]
 800705e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007060:	442b      	add	r3, r5
 8007062:	9328      	str	r3, [sp, #160]	; 0xa0
 8007064:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007066:	3301      	adds	r3, #1
 8007068:	2b07      	cmp	r3, #7
 800706a:	9327      	str	r3, [sp, #156]	; 0x9c
 800706c:	f300 8086 	bgt.w	800717c <_svfprintf_r+0x1104>
 8007070:	3408      	adds	r4, #8
 8007072:	2d00      	cmp	r5, #0
 8007074:	bfac      	ite	ge
 8007076:	1b75      	subge	r5, r6, r5
 8007078:	4635      	movlt	r5, r6
 800707a:	2d00      	cmp	r5, #0
 800707c:	dd19      	ble.n	80070b2 <_svfprintf_r+0x103a>
 800707e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8007082:	4896      	ldr	r0, [pc, #600]	; (80072dc <_svfprintf_r+0x1264>)
 8007084:	6020      	str	r0, [r4, #0]
 8007086:	2d10      	cmp	r5, #16
 8007088:	f103 0301 	add.w	r3, r3, #1
 800708c:	f104 0108 	add.w	r1, r4, #8
 8007090:	dc7e      	bgt.n	8007190 <_svfprintf_r+0x1118>
 8007092:	6065      	str	r5, [r4, #4]
 8007094:	2b07      	cmp	r3, #7
 8007096:	4415      	add	r5, r2
 8007098:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800709c:	f340 808b 	ble.w	80071b6 <_svfprintf_r+0x113e>
 80070a0:	aa26      	add	r2, sp, #152	; 0x98
 80070a2:	4641      	mov	r1, r8
 80070a4:	9803      	ldr	r0, [sp, #12]
 80070a6:	f001 fecd 	bl	8008e44 <__ssprint_r>
 80070aa:	2800      	cmp	r0, #0
 80070ac:	f040 81d0 	bne.w	8007450 <_svfprintf_r+0x13d8>
 80070b0:	ac29      	add	r4, sp, #164	; 0xa4
 80070b2:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 80070b6:	445e      	add	r6, fp
 80070b8:	d009      	beq.n	80070ce <_svfprintf_r+0x1056>
 80070ba:	9b07      	ldr	r3, [sp, #28]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d17c      	bne.n	80071ba <_svfprintf_r+0x1142>
 80070c0:	2f00      	cmp	r7, #0
 80070c2:	d17c      	bne.n	80071be <_svfprintf_r+0x1146>
 80070c4:	9b04      	ldr	r3, [sp, #16]
 80070c6:	445b      	add	r3, fp
 80070c8:	429e      	cmp	r6, r3
 80070ca:	bf28      	it	cs
 80070cc:	461e      	movcs	r6, r3
 80070ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80070d0:	9a04      	ldr	r2, [sp, #16]
 80070d2:	4293      	cmp	r3, r2
 80070d4:	db02      	blt.n	80070dc <_svfprintf_r+0x1064>
 80070d6:	f01a 0f01 	tst.w	sl, #1
 80070da:	d00e      	beq.n	80070fa <_svfprintf_r+0x1082>
 80070dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80070de:	6023      	str	r3, [r4, #0]
 80070e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070e2:	6063      	str	r3, [r4, #4]
 80070e4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80070e6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80070e8:	4413      	add	r3, r2
 80070ea:	9328      	str	r3, [sp, #160]	; 0xa0
 80070ec:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80070ee:	3301      	adds	r3, #1
 80070f0:	2b07      	cmp	r3, #7
 80070f2:	9327      	str	r3, [sp, #156]	; 0x9c
 80070f4:	f300 80dd 	bgt.w	80072b2 <_svfprintf_r+0x123a>
 80070f8:	3408      	adds	r4, #8
 80070fa:	9b04      	ldr	r3, [sp, #16]
 80070fc:	9a04      	ldr	r2, [sp, #16]
 80070fe:	eb0b 0503 	add.w	r5, fp, r3
 8007102:	1bab      	subs	r3, r5, r6
 8007104:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007106:	1b55      	subs	r5, r2, r5
 8007108:	429d      	cmp	r5, r3
 800710a:	bfa8      	it	ge
 800710c:	461d      	movge	r5, r3
 800710e:	2d00      	cmp	r5, #0
 8007110:	dd0b      	ble.n	800712a <_svfprintf_r+0x10b2>
 8007112:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007114:	442b      	add	r3, r5
 8007116:	9328      	str	r3, [sp, #160]	; 0xa0
 8007118:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800711a:	3301      	adds	r3, #1
 800711c:	2b07      	cmp	r3, #7
 800711e:	e9c4 6500 	strd	r6, r5, [r4]
 8007122:	9327      	str	r3, [sp, #156]	; 0x9c
 8007124:	f300 80cf 	bgt.w	80072c6 <_svfprintf_r+0x124e>
 8007128:	3408      	adds	r4, #8
 800712a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800712c:	9a04      	ldr	r2, [sp, #16]
 800712e:	2d00      	cmp	r5, #0
 8007130:	eba2 0303 	sub.w	r3, r2, r3
 8007134:	bfac      	ite	ge
 8007136:	1b5d      	subge	r5, r3, r5
 8007138:	461d      	movlt	r5, r3
 800713a:	2d00      	cmp	r5, #0
 800713c:	f77f ad43 	ble.w	8006bc6 <_svfprintf_r+0xb4e>
 8007140:	4e66      	ldr	r6, [pc, #408]	; (80072dc <_svfprintf_r+0x1264>)
 8007142:	2710      	movs	r7, #16
 8007144:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8007148:	2d10      	cmp	r5, #16
 800714a:	f103 0301 	add.w	r3, r3, #1
 800714e:	f104 0108 	add.w	r1, r4, #8
 8007152:	6026      	str	r6, [r4, #0]
 8007154:	f77f aecb 	ble.w	8006eee <_svfprintf_r+0xe76>
 8007158:	3210      	adds	r2, #16
 800715a:	2b07      	cmp	r3, #7
 800715c:	6067      	str	r7, [r4, #4]
 800715e:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8007162:	dd08      	ble.n	8007176 <_svfprintf_r+0x10fe>
 8007164:	aa26      	add	r2, sp, #152	; 0x98
 8007166:	4641      	mov	r1, r8
 8007168:	9803      	ldr	r0, [sp, #12]
 800716a:	f001 fe6b 	bl	8008e44 <__ssprint_r>
 800716e:	2800      	cmp	r0, #0
 8007170:	f040 816e 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8007174:	a929      	add	r1, sp, #164	; 0xa4
 8007176:	3d10      	subs	r5, #16
 8007178:	460c      	mov	r4, r1
 800717a:	e7e3      	b.n	8007144 <_svfprintf_r+0x10cc>
 800717c:	aa26      	add	r2, sp, #152	; 0x98
 800717e:	4641      	mov	r1, r8
 8007180:	9803      	ldr	r0, [sp, #12]
 8007182:	f001 fe5f 	bl	8008e44 <__ssprint_r>
 8007186:	2800      	cmp	r0, #0
 8007188:	f040 8162 	bne.w	8007450 <_svfprintf_r+0x13d8>
 800718c:	ac29      	add	r4, sp, #164	; 0xa4
 800718e:	e770      	b.n	8007072 <_svfprintf_r+0xffa>
 8007190:	2010      	movs	r0, #16
 8007192:	4402      	add	r2, r0
 8007194:	2b07      	cmp	r3, #7
 8007196:	6060      	str	r0, [r4, #4]
 8007198:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800719c:	dd08      	ble.n	80071b0 <_svfprintf_r+0x1138>
 800719e:	aa26      	add	r2, sp, #152	; 0x98
 80071a0:	4641      	mov	r1, r8
 80071a2:	9803      	ldr	r0, [sp, #12]
 80071a4:	f001 fe4e 	bl	8008e44 <__ssprint_r>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	f040 8151 	bne.w	8007450 <_svfprintf_r+0x13d8>
 80071ae:	a929      	add	r1, sp, #164	; 0xa4
 80071b0:	3d10      	subs	r5, #16
 80071b2:	460c      	mov	r4, r1
 80071b4:	e763      	b.n	800707e <_svfprintf_r+0x1006>
 80071b6:	460c      	mov	r4, r1
 80071b8:	e77b      	b.n	80070b2 <_svfprintf_r+0x103a>
 80071ba:	2f00      	cmp	r7, #0
 80071bc:	d049      	beq.n	8007252 <_svfprintf_r+0x11da>
 80071be:	3f01      	subs	r7, #1
 80071c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071c2:	6023      	str	r3, [r4, #0]
 80071c4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80071c6:	6063      	str	r3, [r4, #4]
 80071c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80071ca:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80071cc:	4413      	add	r3, r2
 80071ce:	9328      	str	r3, [sp, #160]	; 0xa0
 80071d0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80071d2:	3301      	adds	r3, #1
 80071d4:	2b07      	cmp	r3, #7
 80071d6:	9327      	str	r3, [sp, #156]	; 0x9c
 80071d8:	dc42      	bgt.n	8007260 <_svfprintf_r+0x11e8>
 80071da:	3408      	adds	r4, #8
 80071dc:	9b04      	ldr	r3, [sp, #16]
 80071de:	445b      	add	r3, fp
 80071e0:	1b9a      	subs	r2, r3, r6
 80071e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	4293      	cmp	r3, r2
 80071e8:	bfa8      	it	ge
 80071ea:	4613      	movge	r3, r2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	461d      	mov	r5, r3
 80071f0:	dd0a      	ble.n	8007208 <_svfprintf_r+0x1190>
 80071f2:	e9c4 6300 	strd	r6, r3, [r4]
 80071f6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80071f8:	442b      	add	r3, r5
 80071fa:	9328      	str	r3, [sp, #160]	; 0xa0
 80071fc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80071fe:	3301      	adds	r3, #1
 8007200:	2b07      	cmp	r3, #7
 8007202:	9327      	str	r3, [sp, #156]	; 0x9c
 8007204:	dc36      	bgt.n	8007274 <_svfprintf_r+0x11fc>
 8007206:	3408      	adds	r4, #8
 8007208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2d00      	cmp	r5, #0
 800720e:	bfac      	ite	ge
 8007210:	1b5d      	subge	r5, r3, r5
 8007212:	461d      	movlt	r5, r3
 8007214:	2d00      	cmp	r5, #0
 8007216:	dd18      	ble.n	800724a <_svfprintf_r+0x11d2>
 8007218:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 800721c:	482f      	ldr	r0, [pc, #188]	; (80072dc <_svfprintf_r+0x1264>)
 800721e:	6020      	str	r0, [r4, #0]
 8007220:	2d10      	cmp	r5, #16
 8007222:	f102 0201 	add.w	r2, r2, #1
 8007226:	f104 0108 	add.w	r1, r4, #8
 800722a:	dc2d      	bgt.n	8007288 <_svfprintf_r+0x1210>
 800722c:	442b      	add	r3, r5
 800722e:	2a07      	cmp	r2, #7
 8007230:	6065      	str	r5, [r4, #4]
 8007232:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8007236:	dd3a      	ble.n	80072ae <_svfprintf_r+0x1236>
 8007238:	aa26      	add	r2, sp, #152	; 0x98
 800723a:	4641      	mov	r1, r8
 800723c:	9803      	ldr	r0, [sp, #12]
 800723e:	f001 fe01 	bl	8008e44 <__ssprint_r>
 8007242:	2800      	cmp	r0, #0
 8007244:	f040 8104 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8007248:	ac29      	add	r4, sp, #164	; 0xa4
 800724a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	441e      	add	r6, r3
 8007250:	e733      	b.n	80070ba <_svfprintf_r+0x1042>
 8007252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007254:	3b01      	subs	r3, #1
 8007256:	9309      	str	r3, [sp, #36]	; 0x24
 8007258:	9b07      	ldr	r3, [sp, #28]
 800725a:	3b01      	subs	r3, #1
 800725c:	9307      	str	r3, [sp, #28]
 800725e:	e7af      	b.n	80071c0 <_svfprintf_r+0x1148>
 8007260:	aa26      	add	r2, sp, #152	; 0x98
 8007262:	4641      	mov	r1, r8
 8007264:	9803      	ldr	r0, [sp, #12]
 8007266:	f001 fded 	bl	8008e44 <__ssprint_r>
 800726a:	2800      	cmp	r0, #0
 800726c:	f040 80f0 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8007270:	ac29      	add	r4, sp, #164	; 0xa4
 8007272:	e7b3      	b.n	80071dc <_svfprintf_r+0x1164>
 8007274:	aa26      	add	r2, sp, #152	; 0x98
 8007276:	4641      	mov	r1, r8
 8007278:	9803      	ldr	r0, [sp, #12]
 800727a:	f001 fde3 	bl	8008e44 <__ssprint_r>
 800727e:	2800      	cmp	r0, #0
 8007280:	f040 80e6 	bne.w	8007450 <_svfprintf_r+0x13d8>
 8007284:	ac29      	add	r4, sp, #164	; 0xa4
 8007286:	e7bf      	b.n	8007208 <_svfprintf_r+0x1190>
 8007288:	2010      	movs	r0, #16
 800728a:	4403      	add	r3, r0
 800728c:	2a07      	cmp	r2, #7
 800728e:	6060      	str	r0, [r4, #4]
 8007290:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8007294:	dd08      	ble.n	80072a8 <_svfprintf_r+0x1230>
 8007296:	aa26      	add	r2, sp, #152	; 0x98
 8007298:	4641      	mov	r1, r8
 800729a:	9803      	ldr	r0, [sp, #12]
 800729c:	f001 fdd2 	bl	8008e44 <__ssprint_r>
 80072a0:	2800      	cmp	r0, #0
 80072a2:	f040 80d5 	bne.w	8007450 <_svfprintf_r+0x13d8>
 80072a6:	a929      	add	r1, sp, #164	; 0xa4
 80072a8:	3d10      	subs	r5, #16
 80072aa:	460c      	mov	r4, r1
 80072ac:	e7b4      	b.n	8007218 <_svfprintf_r+0x11a0>
 80072ae:	460c      	mov	r4, r1
 80072b0:	e7cb      	b.n	800724a <_svfprintf_r+0x11d2>
 80072b2:	aa26      	add	r2, sp, #152	; 0x98
 80072b4:	4641      	mov	r1, r8
 80072b6:	9803      	ldr	r0, [sp, #12]
 80072b8:	f001 fdc4 	bl	8008e44 <__ssprint_r>
 80072bc:	2800      	cmp	r0, #0
 80072be:	f040 80c7 	bne.w	8007450 <_svfprintf_r+0x13d8>
 80072c2:	ac29      	add	r4, sp, #164	; 0xa4
 80072c4:	e719      	b.n	80070fa <_svfprintf_r+0x1082>
 80072c6:	aa26      	add	r2, sp, #152	; 0x98
 80072c8:	4641      	mov	r1, r8
 80072ca:	9803      	ldr	r0, [sp, #12]
 80072cc:	f001 fdba 	bl	8008e44 <__ssprint_r>
 80072d0:	2800      	cmp	r0, #0
 80072d2:	f040 80bd 	bne.w	8007450 <_svfprintf_r+0x13d8>
 80072d6:	ac29      	add	r4, sp, #164	; 0xa4
 80072d8:	e727      	b.n	800712a <_svfprintf_r+0x10b2>
 80072da:	bf00      	nop
 80072dc:	0800a978 	.word	0x0800a978
 80072e0:	9a04      	ldr	r2, [sp, #16]
 80072e2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80072e4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80072e6:	2a01      	cmp	r2, #1
 80072e8:	f105 0501 	add.w	r5, r5, #1
 80072ec:	f103 0301 	add.w	r3, r3, #1
 80072f0:	f104 0608 	add.w	r6, r4, #8
 80072f4:	dc02      	bgt.n	80072fc <_svfprintf_r+0x1284>
 80072f6:	f01a 0f01 	tst.w	sl, #1
 80072fa:	d07d      	beq.n	80073f8 <_svfprintf_r+0x1380>
 80072fc:	2201      	movs	r2, #1
 80072fe:	2b07      	cmp	r3, #7
 8007300:	f8c4 b000 	str.w	fp, [r4]
 8007304:	6062      	str	r2, [r4, #4]
 8007306:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800730a:	dd08      	ble.n	800731e <_svfprintf_r+0x12a6>
 800730c:	aa26      	add	r2, sp, #152	; 0x98
 800730e:	4641      	mov	r1, r8
 8007310:	9803      	ldr	r0, [sp, #12]
 8007312:	f001 fd97 	bl	8008e44 <__ssprint_r>
 8007316:	2800      	cmp	r0, #0
 8007318:	f040 809a 	bne.w	8007450 <_svfprintf_r+0x13d8>
 800731c:	ae29      	add	r6, sp, #164	; 0xa4
 800731e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007320:	6033      	str	r3, [r6, #0]
 8007322:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007324:	6073      	str	r3, [r6, #4]
 8007326:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007328:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800732a:	4413      	add	r3, r2
 800732c:	9328      	str	r3, [sp, #160]	; 0xa0
 800732e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8007330:	3301      	adds	r3, #1
 8007332:	2b07      	cmp	r3, #7
 8007334:	9327      	str	r3, [sp, #156]	; 0x9c
 8007336:	dc31      	bgt.n	800739c <_svfprintf_r+0x1324>
 8007338:	3608      	adds	r6, #8
 800733a:	9b04      	ldr	r3, [sp, #16]
 800733c:	2200      	movs	r2, #0
 800733e:	1e5c      	subs	r4, r3, #1
 8007340:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007344:	2300      	movs	r3, #0
 8007346:	f7f9 fc67 	bl	8000c18 <__aeabi_dcmpeq>
 800734a:	2800      	cmp	r0, #0
 800734c:	d12f      	bne.n	80073ae <_svfprintf_r+0x1336>
 800734e:	f10b 0301 	add.w	r3, fp, #1
 8007352:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8007354:	9904      	ldr	r1, [sp, #16]
 8007356:	e9c6 3400 	strd	r3, r4, [r6]
 800735a:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800735c:	3201      	adds	r2, #1
 800735e:	3b01      	subs	r3, #1
 8007360:	440b      	add	r3, r1
 8007362:	2a07      	cmp	r2, #7
 8007364:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8007368:	dd4f      	ble.n	800740a <_svfprintf_r+0x1392>
 800736a:	aa26      	add	r2, sp, #152	; 0x98
 800736c:	4641      	mov	r1, r8
 800736e:	9803      	ldr	r0, [sp, #12]
 8007370:	f001 fd68 	bl	8008e44 <__ssprint_r>
 8007374:	2800      	cmp	r0, #0
 8007376:	d16b      	bne.n	8007450 <_svfprintf_r+0x13d8>
 8007378:	ae29      	add	r6, sp, #164	; 0xa4
 800737a:	ab22      	add	r3, sp, #136	; 0x88
 800737c:	6033      	str	r3, [r6, #0]
 800737e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007380:	6073      	str	r3, [r6, #4]
 8007382:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007384:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007386:	4413      	add	r3, r2
 8007388:	9328      	str	r3, [sp, #160]	; 0xa0
 800738a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800738c:	3301      	adds	r3, #1
 800738e:	2b07      	cmp	r3, #7
 8007390:	9327      	str	r3, [sp, #156]	; 0x9c
 8007392:	f73f adb3 	bgt.w	8006efc <_svfprintf_r+0xe84>
 8007396:	f106 0408 	add.w	r4, r6, #8
 800739a:	e414      	b.n	8006bc6 <_svfprintf_r+0xb4e>
 800739c:	aa26      	add	r2, sp, #152	; 0x98
 800739e:	4641      	mov	r1, r8
 80073a0:	9803      	ldr	r0, [sp, #12]
 80073a2:	f001 fd4f 	bl	8008e44 <__ssprint_r>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	d152      	bne.n	8007450 <_svfprintf_r+0x13d8>
 80073aa:	ae29      	add	r6, sp, #164	; 0xa4
 80073ac:	e7c5      	b.n	800733a <_svfprintf_r+0x12c2>
 80073ae:	2c00      	cmp	r4, #0
 80073b0:	dde3      	ble.n	800737a <_svfprintf_r+0x1302>
 80073b2:	4d3e      	ldr	r5, [pc, #248]	; (80074ac <_svfprintf_r+0x1434>)
 80073b4:	2710      	movs	r7, #16
 80073b6:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80073ba:	2c10      	cmp	r4, #16
 80073bc:	f103 0301 	add.w	r3, r3, #1
 80073c0:	f106 0108 	add.w	r1, r6, #8
 80073c4:	6035      	str	r5, [r6, #0]
 80073c6:	dc07      	bgt.n	80073d8 <_svfprintf_r+0x1360>
 80073c8:	6074      	str	r4, [r6, #4]
 80073ca:	2b07      	cmp	r3, #7
 80073cc:	4414      	add	r4, r2
 80073ce:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 80073d2:	dcca      	bgt.n	800736a <_svfprintf_r+0x12f2>
 80073d4:	460e      	mov	r6, r1
 80073d6:	e7d0      	b.n	800737a <_svfprintf_r+0x1302>
 80073d8:	3210      	adds	r2, #16
 80073da:	2b07      	cmp	r3, #7
 80073dc:	6077      	str	r7, [r6, #4]
 80073de:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 80073e2:	dd06      	ble.n	80073f2 <_svfprintf_r+0x137a>
 80073e4:	aa26      	add	r2, sp, #152	; 0x98
 80073e6:	4641      	mov	r1, r8
 80073e8:	9803      	ldr	r0, [sp, #12]
 80073ea:	f001 fd2b 	bl	8008e44 <__ssprint_r>
 80073ee:	bb78      	cbnz	r0, 8007450 <_svfprintf_r+0x13d8>
 80073f0:	a929      	add	r1, sp, #164	; 0xa4
 80073f2:	3c10      	subs	r4, #16
 80073f4:	460e      	mov	r6, r1
 80073f6:	e7de      	b.n	80073b6 <_svfprintf_r+0x133e>
 80073f8:	2201      	movs	r2, #1
 80073fa:	2b07      	cmp	r3, #7
 80073fc:	f8c4 b000 	str.w	fp, [r4]
 8007400:	6062      	str	r2, [r4, #4]
 8007402:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8007406:	ddb8      	ble.n	800737a <_svfprintf_r+0x1302>
 8007408:	e7af      	b.n	800736a <_svfprintf_r+0x12f2>
 800740a:	3608      	adds	r6, #8
 800740c:	e7b5      	b.n	800737a <_svfprintf_r+0x1302>
 800740e:	460c      	mov	r4, r1
 8007410:	f7ff bbd9 	b.w	8006bc6 <_svfprintf_r+0xb4e>
 8007414:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007416:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007418:	1a9d      	subs	r5, r3, r2
 800741a:	2d00      	cmp	r5, #0
 800741c:	f77f abd7 	ble.w	8006bce <_svfprintf_r+0xb56>
 8007420:	4e23      	ldr	r6, [pc, #140]	; (80074b0 <_svfprintf_r+0x1438>)
 8007422:	2710      	movs	r7, #16
 8007424:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8007428:	2d10      	cmp	r5, #16
 800742a:	f103 0301 	add.w	r3, r3, #1
 800742e:	6026      	str	r6, [r4, #0]
 8007430:	dc18      	bgt.n	8007464 <_svfprintf_r+0x13ec>
 8007432:	6065      	str	r5, [r4, #4]
 8007434:	2b07      	cmp	r3, #7
 8007436:	4415      	add	r5, r2
 8007438:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 800743c:	f77f abc7 	ble.w	8006bce <_svfprintf_r+0xb56>
 8007440:	aa26      	add	r2, sp, #152	; 0x98
 8007442:	4641      	mov	r1, r8
 8007444:	9803      	ldr	r0, [sp, #12]
 8007446:	f001 fcfd 	bl	8008e44 <__ssprint_r>
 800744a:	2800      	cmp	r0, #0
 800744c:	f43f abbf 	beq.w	8006bce <_svfprintf_r+0xb56>
 8007450:	f1b9 0f00 	cmp.w	r9, #0
 8007454:	f43f a8a8 	beq.w	80065a8 <_svfprintf_r+0x530>
 8007458:	4649      	mov	r1, r9
 800745a:	9803      	ldr	r0, [sp, #12]
 800745c:	f000 fed8 	bl	8008210 <_free_r>
 8007460:	f7ff b8a2 	b.w	80065a8 <_svfprintf_r+0x530>
 8007464:	3210      	adds	r2, #16
 8007466:	2b07      	cmp	r3, #7
 8007468:	6067      	str	r7, [r4, #4]
 800746a:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800746e:	dc02      	bgt.n	8007476 <_svfprintf_r+0x13fe>
 8007470:	3408      	adds	r4, #8
 8007472:	3d10      	subs	r5, #16
 8007474:	e7d6      	b.n	8007424 <_svfprintf_r+0x13ac>
 8007476:	aa26      	add	r2, sp, #152	; 0x98
 8007478:	4641      	mov	r1, r8
 800747a:	9803      	ldr	r0, [sp, #12]
 800747c:	f001 fce2 	bl	8008e44 <__ssprint_r>
 8007480:	2800      	cmp	r0, #0
 8007482:	d1e5      	bne.n	8007450 <_svfprintf_r+0x13d8>
 8007484:	ac29      	add	r4, sp, #164	; 0xa4
 8007486:	e7f4      	b.n	8007472 <_svfprintf_r+0x13fa>
 8007488:	4649      	mov	r1, r9
 800748a:	9803      	ldr	r0, [sp, #12]
 800748c:	f000 fec0 	bl	8008210 <_free_r>
 8007490:	f7ff bbb5 	b.w	8006bfe <_svfprintf_r+0xb86>
 8007494:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8007496:	2b00      	cmp	r3, #0
 8007498:	f43f a886 	beq.w	80065a8 <_svfprintf_r+0x530>
 800749c:	aa26      	add	r2, sp, #152	; 0x98
 800749e:	4641      	mov	r1, r8
 80074a0:	9803      	ldr	r0, [sp, #12]
 80074a2:	f001 fccf 	bl	8008e44 <__ssprint_r>
 80074a6:	f7ff b87f 	b.w	80065a8 <_svfprintf_r+0x530>
 80074aa:	bf00      	nop
 80074ac:	0800a978 	.word	0x0800a978
 80074b0:	0800a968 	.word	0x0800a968

080074b4 <register_fini>:
 80074b4:	4b02      	ldr	r3, [pc, #8]	; (80074c0 <register_fini+0xc>)
 80074b6:	b113      	cbz	r3, 80074be <register_fini+0xa>
 80074b8:	4802      	ldr	r0, [pc, #8]	; (80074c4 <register_fini+0x10>)
 80074ba:	f000 b805 	b.w	80074c8 <atexit>
 80074be:	4770      	bx	lr
 80074c0:	00000000 	.word	0x00000000
 80074c4:	08008141 	.word	0x08008141

080074c8 <atexit>:
 80074c8:	2300      	movs	r3, #0
 80074ca:	4601      	mov	r1, r0
 80074cc:	461a      	mov	r2, r3
 80074ce:	4618      	mov	r0, r3
 80074d0:	f001 bd4a 	b.w	8008f68 <__register_exitproc>

080074d4 <quorem>:
 80074d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d8:	6903      	ldr	r3, [r0, #16]
 80074da:	690c      	ldr	r4, [r1, #16]
 80074dc:	42a3      	cmp	r3, r4
 80074de:	4680      	mov	r8, r0
 80074e0:	f2c0 8082 	blt.w	80075e8 <quorem+0x114>
 80074e4:	3c01      	subs	r4, #1
 80074e6:	f101 0714 	add.w	r7, r1, #20
 80074ea:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80074ee:	f100 0614 	add.w	r6, r0, #20
 80074f2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80074f6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80074fa:	eb06 030c 	add.w	r3, r6, ip
 80074fe:	3501      	adds	r5, #1
 8007500:	eb07 090c 	add.w	r9, r7, ip
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	fbb0 f5f5 	udiv	r5, r0, r5
 800750a:	b395      	cbz	r5, 8007572 <quorem+0x9e>
 800750c:	f04f 0a00 	mov.w	sl, #0
 8007510:	4638      	mov	r0, r7
 8007512:	46b6      	mov	lr, r6
 8007514:	46d3      	mov	fp, sl
 8007516:	f850 2b04 	ldr.w	r2, [r0], #4
 800751a:	b293      	uxth	r3, r2
 800751c:	fb05 a303 	mla	r3, r5, r3, sl
 8007520:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007524:	b29b      	uxth	r3, r3
 8007526:	ebab 0303 	sub.w	r3, fp, r3
 800752a:	0c12      	lsrs	r2, r2, #16
 800752c:	f8de b000 	ldr.w	fp, [lr]
 8007530:	fb05 a202 	mla	r2, r5, r2, sl
 8007534:	fa13 f38b 	uxtah	r3, r3, fp
 8007538:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800753c:	fa1f fb82 	uxth.w	fp, r2
 8007540:	f8de 2000 	ldr.w	r2, [lr]
 8007544:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007548:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800754c:	b29b      	uxth	r3, r3
 800754e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007552:	4581      	cmp	r9, r0
 8007554:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007558:	f84e 3b04 	str.w	r3, [lr], #4
 800755c:	d2db      	bcs.n	8007516 <quorem+0x42>
 800755e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007562:	b933      	cbnz	r3, 8007572 <quorem+0x9e>
 8007564:	9b01      	ldr	r3, [sp, #4]
 8007566:	3b04      	subs	r3, #4
 8007568:	429e      	cmp	r6, r3
 800756a:	461a      	mov	r2, r3
 800756c:	d330      	bcc.n	80075d0 <quorem+0xfc>
 800756e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007572:	4640      	mov	r0, r8
 8007574:	f001 fb5a 	bl	8008c2c <__mcmp>
 8007578:	2800      	cmp	r0, #0
 800757a:	db25      	blt.n	80075c8 <quorem+0xf4>
 800757c:	3501      	adds	r5, #1
 800757e:	4630      	mov	r0, r6
 8007580:	f04f 0c00 	mov.w	ip, #0
 8007584:	f857 2b04 	ldr.w	r2, [r7], #4
 8007588:	f8d0 e000 	ldr.w	lr, [r0]
 800758c:	b293      	uxth	r3, r2
 800758e:	ebac 0303 	sub.w	r3, ip, r3
 8007592:	0c12      	lsrs	r2, r2, #16
 8007594:	fa13 f38e 	uxtah	r3, r3, lr
 8007598:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800759c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075a6:	45b9      	cmp	r9, r7
 80075a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80075ac:	f840 3b04 	str.w	r3, [r0], #4
 80075b0:	d2e8      	bcs.n	8007584 <quorem+0xb0>
 80075b2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80075b6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80075ba:	b92a      	cbnz	r2, 80075c8 <quorem+0xf4>
 80075bc:	3b04      	subs	r3, #4
 80075be:	429e      	cmp	r6, r3
 80075c0:	461a      	mov	r2, r3
 80075c2:	d30b      	bcc.n	80075dc <quorem+0x108>
 80075c4:	f8c8 4010 	str.w	r4, [r8, #16]
 80075c8:	4628      	mov	r0, r5
 80075ca:	b003      	add	sp, #12
 80075cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075d0:	6812      	ldr	r2, [r2, #0]
 80075d2:	3b04      	subs	r3, #4
 80075d4:	2a00      	cmp	r2, #0
 80075d6:	d1ca      	bne.n	800756e <quorem+0x9a>
 80075d8:	3c01      	subs	r4, #1
 80075da:	e7c5      	b.n	8007568 <quorem+0x94>
 80075dc:	6812      	ldr	r2, [r2, #0]
 80075de:	3b04      	subs	r3, #4
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	d1ef      	bne.n	80075c4 <quorem+0xf0>
 80075e4:	3c01      	subs	r4, #1
 80075e6:	e7ea      	b.n	80075be <quorem+0xea>
 80075e8:	2000      	movs	r0, #0
 80075ea:	e7ee      	b.n	80075ca <quorem+0xf6>
 80075ec:	0000      	movs	r0, r0
	...

080075f0 <_dtoa_r>:
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	b097      	sub	sp, #92	; 0x5c
 80075f6:	ec57 6b10 	vmov	r6, r7, d0
 80075fa:	9106      	str	r1, [sp, #24]
 80075fc:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80075fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8007600:	4604      	mov	r4, r0
 8007602:	9312      	str	r3, [sp, #72]	; 0x48
 8007604:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8007606:	e9cd 6700 	strd	r6, r7, [sp]
 800760a:	b141      	cbz	r1, 800761e <_dtoa_r+0x2e>
 800760c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800760e:	604a      	str	r2, [r1, #4]
 8007610:	2301      	movs	r3, #1
 8007612:	4093      	lsls	r3, r2
 8007614:	608b      	str	r3, [r1, #8]
 8007616:	f001 f944 	bl	80088a2 <_Bfree>
 800761a:	2300      	movs	r3, #0
 800761c:	6423      	str	r3, [r4, #64]	; 0x40
 800761e:	1e3b      	subs	r3, r7, #0
 8007620:	bfb9      	ittee	lt
 8007622:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007626:	9301      	strlt	r3, [sp, #4]
 8007628:	2300      	movge	r3, #0
 800762a:	602b      	strge	r3, [r5, #0]
 800762c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007630:	4baf      	ldr	r3, [pc, #700]	; (80078f0 <_dtoa_r+0x300>)
 8007632:	bfbc      	itt	lt
 8007634:	2201      	movlt	r2, #1
 8007636:	602a      	strlt	r2, [r5, #0]
 8007638:	ea33 0308 	bics.w	r3, r3, r8
 800763c:	d116      	bne.n	800766c <_dtoa_r+0x7c>
 800763e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007640:	f242 730f 	movw	r3, #9999	; 0x270f
 8007644:	6013      	str	r3, [r2, #0]
 8007646:	9b00      	ldr	r3, [sp, #0]
 8007648:	b923      	cbnz	r3, 8007654 <_dtoa_r+0x64>
 800764a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800764e:	2800      	cmp	r0, #0
 8007650:	f000 8543 	beq.w	80080da <_dtoa_r+0xaea>
 8007654:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007656:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007904 <_dtoa_r+0x314>
 800765a:	b11b      	cbz	r3, 8007664 <_dtoa_r+0x74>
 800765c:	f10b 0303 	add.w	r3, fp, #3
 8007660:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	4658      	mov	r0, fp
 8007666:	b017      	add	sp, #92	; 0x5c
 8007668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007670:	2200      	movs	r2, #0
 8007672:	2300      	movs	r3, #0
 8007674:	4630      	mov	r0, r6
 8007676:	4639      	mov	r1, r7
 8007678:	f7f9 face 	bl	8000c18 <__aeabi_dcmpeq>
 800767c:	4681      	mov	r9, r0
 800767e:	b160      	cbz	r0, 800769a <_dtoa_r+0xaa>
 8007680:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007682:	2301      	movs	r3, #1
 8007684:	6013      	str	r3, [r2, #0]
 8007686:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 8522 	beq.w	80080d2 <_dtoa_r+0xae2>
 800768e:	4b99      	ldr	r3, [pc, #612]	; (80078f4 <_dtoa_r+0x304>)
 8007690:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007692:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8007696:	6013      	str	r3, [r2, #0]
 8007698:	e7e4      	b.n	8007664 <_dtoa_r+0x74>
 800769a:	aa14      	add	r2, sp, #80	; 0x50
 800769c:	a915      	add	r1, sp, #84	; 0x54
 800769e:	ec47 6b10 	vmov	d0, r6, r7
 80076a2:	4620      	mov	r0, r4
 80076a4:	f001 fb39 	bl	8008d1a <__d2b>
 80076a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80076ac:	9004      	str	r0, [sp, #16]
 80076ae:	2d00      	cmp	r5, #0
 80076b0:	d07c      	beq.n	80077ac <_dtoa_r+0x1bc>
 80076b2:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80076b6:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80076ba:	46b2      	mov	sl, r6
 80076bc:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80076c0:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80076c4:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80076c8:	2200      	movs	r2, #0
 80076ca:	4b8b      	ldr	r3, [pc, #556]	; (80078f8 <_dtoa_r+0x308>)
 80076cc:	4650      	mov	r0, sl
 80076ce:	4659      	mov	r1, fp
 80076d0:	f7f8 fe82 	bl	80003d8 <__aeabi_dsub>
 80076d4:	a380      	add	r3, pc, #512	; (adr r3, 80078d8 <_dtoa_r+0x2e8>)
 80076d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076da:	f7f9 f835 	bl	8000748 <__aeabi_dmul>
 80076de:	a380      	add	r3, pc, #512	; (adr r3, 80078e0 <_dtoa_r+0x2f0>)
 80076e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e4:	f7f8 fe7a 	bl	80003dc <__adddf3>
 80076e8:	4606      	mov	r6, r0
 80076ea:	4628      	mov	r0, r5
 80076ec:	460f      	mov	r7, r1
 80076ee:	f7f8 ffc1 	bl	8000674 <__aeabi_i2d>
 80076f2:	a37d      	add	r3, pc, #500	; (adr r3, 80078e8 <_dtoa_r+0x2f8>)
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	f7f9 f826 	bl	8000748 <__aeabi_dmul>
 80076fc:	4602      	mov	r2, r0
 80076fe:	460b      	mov	r3, r1
 8007700:	4630      	mov	r0, r6
 8007702:	4639      	mov	r1, r7
 8007704:	f7f8 fe6a 	bl	80003dc <__adddf3>
 8007708:	4606      	mov	r6, r0
 800770a:	460f      	mov	r7, r1
 800770c:	f7f9 facc 	bl	8000ca8 <__aeabi_d2iz>
 8007710:	2200      	movs	r2, #0
 8007712:	4682      	mov	sl, r0
 8007714:	2300      	movs	r3, #0
 8007716:	4630      	mov	r0, r6
 8007718:	4639      	mov	r1, r7
 800771a:	f7f9 fa87 	bl	8000c2c <__aeabi_dcmplt>
 800771e:	b148      	cbz	r0, 8007734 <_dtoa_r+0x144>
 8007720:	4650      	mov	r0, sl
 8007722:	f7f8 ffa7 	bl	8000674 <__aeabi_i2d>
 8007726:	4632      	mov	r2, r6
 8007728:	463b      	mov	r3, r7
 800772a:	f7f9 fa75 	bl	8000c18 <__aeabi_dcmpeq>
 800772e:	b908      	cbnz	r0, 8007734 <_dtoa_r+0x144>
 8007730:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007734:	f1ba 0f16 	cmp.w	sl, #22
 8007738:	d859      	bhi.n	80077ee <_dtoa_r+0x1fe>
 800773a:	4970      	ldr	r1, [pc, #448]	; (80078fc <_dtoa_r+0x30c>)
 800773c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007740:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007744:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007748:	f7f9 fa8e 	bl	8000c68 <__aeabi_dcmpgt>
 800774c:	2800      	cmp	r0, #0
 800774e:	d050      	beq.n	80077f2 <_dtoa_r+0x202>
 8007750:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007754:	2300      	movs	r3, #0
 8007756:	930f      	str	r3, [sp, #60]	; 0x3c
 8007758:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800775a:	1b5d      	subs	r5, r3, r5
 800775c:	f1b5 0801 	subs.w	r8, r5, #1
 8007760:	bf49      	itett	mi
 8007762:	f1c5 0301 	rsbmi	r3, r5, #1
 8007766:	2300      	movpl	r3, #0
 8007768:	9305      	strmi	r3, [sp, #20]
 800776a:	f04f 0800 	movmi.w	r8, #0
 800776e:	bf58      	it	pl
 8007770:	9305      	strpl	r3, [sp, #20]
 8007772:	f1ba 0f00 	cmp.w	sl, #0
 8007776:	db3e      	blt.n	80077f6 <_dtoa_r+0x206>
 8007778:	2300      	movs	r3, #0
 800777a:	44d0      	add	r8, sl
 800777c:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007780:	9307      	str	r3, [sp, #28]
 8007782:	9b06      	ldr	r3, [sp, #24]
 8007784:	2b09      	cmp	r3, #9
 8007786:	f200 808d 	bhi.w	80078a4 <_dtoa_r+0x2b4>
 800778a:	2b05      	cmp	r3, #5
 800778c:	bfc4      	itt	gt
 800778e:	3b04      	subgt	r3, #4
 8007790:	9306      	strgt	r3, [sp, #24]
 8007792:	9b06      	ldr	r3, [sp, #24]
 8007794:	f1a3 0302 	sub.w	r3, r3, #2
 8007798:	bfcc      	ite	gt
 800779a:	2500      	movgt	r5, #0
 800779c:	2501      	movle	r5, #1
 800779e:	2b03      	cmp	r3, #3
 80077a0:	f200 808c 	bhi.w	80078bc <_dtoa_r+0x2cc>
 80077a4:	e8df f003 	tbb	[pc, r3]
 80077a8:	6e317c7a 	.word	0x6e317c7a
 80077ac:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80077b0:	441d      	add	r5, r3
 80077b2:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80077b6:	2820      	cmp	r0, #32
 80077b8:	dd13      	ble.n	80077e2 <_dtoa_r+0x1f2>
 80077ba:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80077be:	9b00      	ldr	r3, [sp, #0]
 80077c0:	fa08 f800 	lsl.w	r8, r8, r0
 80077c4:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80077c8:	fa23 f000 	lsr.w	r0, r3, r0
 80077cc:	ea48 0000 	orr.w	r0, r8, r0
 80077d0:	f7f8 ff40 	bl	8000654 <__aeabi_ui2d>
 80077d4:	2301      	movs	r3, #1
 80077d6:	4682      	mov	sl, r0
 80077d8:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80077dc:	3d01      	subs	r5, #1
 80077de:	9313      	str	r3, [sp, #76]	; 0x4c
 80077e0:	e772      	b.n	80076c8 <_dtoa_r+0xd8>
 80077e2:	9b00      	ldr	r3, [sp, #0]
 80077e4:	f1c0 0020 	rsb	r0, r0, #32
 80077e8:	fa03 f000 	lsl.w	r0, r3, r0
 80077ec:	e7f0      	b.n	80077d0 <_dtoa_r+0x1e0>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e7b1      	b.n	8007756 <_dtoa_r+0x166>
 80077f2:	900f      	str	r0, [sp, #60]	; 0x3c
 80077f4:	e7b0      	b.n	8007758 <_dtoa_r+0x168>
 80077f6:	9b05      	ldr	r3, [sp, #20]
 80077f8:	eba3 030a 	sub.w	r3, r3, sl
 80077fc:	9305      	str	r3, [sp, #20]
 80077fe:	f1ca 0300 	rsb	r3, sl, #0
 8007802:	9307      	str	r3, [sp, #28]
 8007804:	2300      	movs	r3, #0
 8007806:	930e      	str	r3, [sp, #56]	; 0x38
 8007808:	e7bb      	b.n	8007782 <_dtoa_r+0x192>
 800780a:	2301      	movs	r3, #1
 800780c:	930a      	str	r3, [sp, #40]	; 0x28
 800780e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007810:	2b00      	cmp	r3, #0
 8007812:	dd56      	ble.n	80078c2 <_dtoa_r+0x2d2>
 8007814:	9302      	str	r3, [sp, #8]
 8007816:	4699      	mov	r9, r3
 8007818:	2200      	movs	r2, #0
 800781a:	6462      	str	r2, [r4, #68]	; 0x44
 800781c:	2204      	movs	r2, #4
 800781e:	f102 0014 	add.w	r0, r2, #20
 8007822:	4298      	cmp	r0, r3
 8007824:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007826:	d951      	bls.n	80078cc <_dtoa_r+0x2dc>
 8007828:	4620      	mov	r0, r4
 800782a:	f001 f815 	bl	8008858 <_Balloc>
 800782e:	f1b9 0f0e 	cmp.w	r9, #14
 8007832:	4683      	mov	fp, r0
 8007834:	6420      	str	r0, [r4, #64]	; 0x40
 8007836:	f200 80e8 	bhi.w	8007a0a <_dtoa_r+0x41a>
 800783a:	2d00      	cmp	r5, #0
 800783c:	f000 80e5 	beq.w	8007a0a <_dtoa_r+0x41a>
 8007840:	ed9d 7b00 	vldr	d7, [sp]
 8007844:	f1ba 0f00 	cmp.w	sl, #0
 8007848:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800784c:	dd76      	ble.n	800793c <_dtoa_r+0x34c>
 800784e:	4a2b      	ldr	r2, [pc, #172]	; (80078fc <_dtoa_r+0x30c>)
 8007850:	f00a 030f 	and.w	r3, sl, #15
 8007854:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007858:	ed93 7b00 	vldr	d7, [r3]
 800785c:	ea4f 162a 	mov.w	r6, sl, asr #4
 8007860:	06f0      	lsls	r0, r6, #27
 8007862:	ed8d 7b08 	vstr	d7, [sp, #32]
 8007866:	d567      	bpl.n	8007938 <_dtoa_r+0x348>
 8007868:	4b25      	ldr	r3, [pc, #148]	; (8007900 <_dtoa_r+0x310>)
 800786a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800786e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007872:	f7f9 f893 	bl	800099c <__aeabi_ddiv>
 8007876:	e9cd 0100 	strd	r0, r1, [sp]
 800787a:	f006 060f 	and.w	r6, r6, #15
 800787e:	2503      	movs	r5, #3
 8007880:	4f1f      	ldr	r7, [pc, #124]	; (8007900 <_dtoa_r+0x310>)
 8007882:	e04e      	b.n	8007922 <_dtoa_r+0x332>
 8007884:	2301      	movs	r3, #1
 8007886:	930a      	str	r3, [sp, #40]	; 0x28
 8007888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800788a:	4453      	add	r3, sl
 800788c:	f103 0901 	add.w	r9, r3, #1
 8007890:	9302      	str	r3, [sp, #8]
 8007892:	464b      	mov	r3, r9
 8007894:	2b01      	cmp	r3, #1
 8007896:	bfb8      	it	lt
 8007898:	2301      	movlt	r3, #1
 800789a:	e7bd      	b.n	8007818 <_dtoa_r+0x228>
 800789c:	2300      	movs	r3, #0
 800789e:	e7b5      	b.n	800780c <_dtoa_r+0x21c>
 80078a0:	2300      	movs	r3, #0
 80078a2:	e7f0      	b.n	8007886 <_dtoa_r+0x296>
 80078a4:	2501      	movs	r5, #1
 80078a6:	2300      	movs	r3, #0
 80078a8:	9306      	str	r3, [sp, #24]
 80078aa:	950a      	str	r5, [sp, #40]	; 0x28
 80078ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80078b0:	9302      	str	r3, [sp, #8]
 80078b2:	4699      	mov	r9, r3
 80078b4:	2200      	movs	r2, #0
 80078b6:	2312      	movs	r3, #18
 80078b8:	920b      	str	r2, [sp, #44]	; 0x2c
 80078ba:	e7ad      	b.n	8007818 <_dtoa_r+0x228>
 80078bc:	2301      	movs	r3, #1
 80078be:	930a      	str	r3, [sp, #40]	; 0x28
 80078c0:	e7f4      	b.n	80078ac <_dtoa_r+0x2bc>
 80078c2:	2301      	movs	r3, #1
 80078c4:	9302      	str	r3, [sp, #8]
 80078c6:	4699      	mov	r9, r3
 80078c8:	461a      	mov	r2, r3
 80078ca:	e7f5      	b.n	80078b8 <_dtoa_r+0x2c8>
 80078cc:	3101      	adds	r1, #1
 80078ce:	6461      	str	r1, [r4, #68]	; 0x44
 80078d0:	0052      	lsls	r2, r2, #1
 80078d2:	e7a4      	b.n	800781e <_dtoa_r+0x22e>
 80078d4:	f3af 8000 	nop.w
 80078d8:	636f4361 	.word	0x636f4361
 80078dc:	3fd287a7 	.word	0x3fd287a7
 80078e0:	8b60c8b3 	.word	0x8b60c8b3
 80078e4:	3fc68a28 	.word	0x3fc68a28
 80078e8:	509f79fb 	.word	0x509f79fb
 80078ec:	3fd34413 	.word	0x3fd34413
 80078f0:	7ff00000 	.word	0x7ff00000
 80078f4:	0800a967 	.word	0x0800a967
 80078f8:	3ff80000 	.word	0x3ff80000
 80078fc:	0800a9c8 	.word	0x0800a9c8
 8007900:	0800a9a0 	.word	0x0800a9a0
 8007904:	0800a991 	.word	0x0800a991
 8007908:	07f1      	lsls	r1, r6, #31
 800790a:	d508      	bpl.n	800791e <_dtoa_r+0x32e>
 800790c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007910:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007914:	f7f8 ff18 	bl	8000748 <__aeabi_dmul>
 8007918:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800791c:	3501      	adds	r5, #1
 800791e:	1076      	asrs	r6, r6, #1
 8007920:	3708      	adds	r7, #8
 8007922:	2e00      	cmp	r6, #0
 8007924:	d1f0      	bne.n	8007908 <_dtoa_r+0x318>
 8007926:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800792a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800792e:	f7f9 f835 	bl	800099c <__aeabi_ddiv>
 8007932:	e9cd 0100 	strd	r0, r1, [sp]
 8007936:	e01a      	b.n	800796e <_dtoa_r+0x37e>
 8007938:	2502      	movs	r5, #2
 800793a:	e7a1      	b.n	8007880 <_dtoa_r+0x290>
 800793c:	f000 80a0 	beq.w	8007a80 <_dtoa_r+0x490>
 8007940:	f1ca 0600 	rsb	r6, sl, #0
 8007944:	4b9f      	ldr	r3, [pc, #636]	; (8007bc4 <_dtoa_r+0x5d4>)
 8007946:	4fa0      	ldr	r7, [pc, #640]	; (8007bc8 <_dtoa_r+0x5d8>)
 8007948:	f006 020f 	and.w	r2, r6, #15
 800794c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007954:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007958:	f7f8 fef6 	bl	8000748 <__aeabi_dmul>
 800795c:	e9cd 0100 	strd	r0, r1, [sp]
 8007960:	1136      	asrs	r6, r6, #4
 8007962:	2300      	movs	r3, #0
 8007964:	2502      	movs	r5, #2
 8007966:	2e00      	cmp	r6, #0
 8007968:	d17f      	bne.n	8007a6a <_dtoa_r+0x47a>
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1e1      	bne.n	8007932 <_dtoa_r+0x342>
 800796e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007970:	2b00      	cmp	r3, #0
 8007972:	f000 8087 	beq.w	8007a84 <_dtoa_r+0x494>
 8007976:	e9dd 6700 	ldrd	r6, r7, [sp]
 800797a:	2200      	movs	r2, #0
 800797c:	4b93      	ldr	r3, [pc, #588]	; (8007bcc <_dtoa_r+0x5dc>)
 800797e:	4630      	mov	r0, r6
 8007980:	4639      	mov	r1, r7
 8007982:	f7f9 f953 	bl	8000c2c <__aeabi_dcmplt>
 8007986:	2800      	cmp	r0, #0
 8007988:	d07c      	beq.n	8007a84 <_dtoa_r+0x494>
 800798a:	f1b9 0f00 	cmp.w	r9, #0
 800798e:	d079      	beq.n	8007a84 <_dtoa_r+0x494>
 8007990:	9b02      	ldr	r3, [sp, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	dd35      	ble.n	8007a02 <_dtoa_r+0x412>
 8007996:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800799a:	9308      	str	r3, [sp, #32]
 800799c:	4639      	mov	r1, r7
 800799e:	2200      	movs	r2, #0
 80079a0:	4b8b      	ldr	r3, [pc, #556]	; (8007bd0 <_dtoa_r+0x5e0>)
 80079a2:	4630      	mov	r0, r6
 80079a4:	f7f8 fed0 	bl	8000748 <__aeabi_dmul>
 80079a8:	e9cd 0100 	strd	r0, r1, [sp]
 80079ac:	9f02      	ldr	r7, [sp, #8]
 80079ae:	3501      	adds	r5, #1
 80079b0:	4628      	mov	r0, r5
 80079b2:	f7f8 fe5f 	bl	8000674 <__aeabi_i2d>
 80079b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80079ba:	f7f8 fec5 	bl	8000748 <__aeabi_dmul>
 80079be:	2200      	movs	r2, #0
 80079c0:	4b84      	ldr	r3, [pc, #528]	; (8007bd4 <_dtoa_r+0x5e4>)
 80079c2:	f7f8 fd0b 	bl	80003dc <__adddf3>
 80079c6:	4605      	mov	r5, r0
 80079c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80079cc:	2f00      	cmp	r7, #0
 80079ce:	d15d      	bne.n	8007a8c <_dtoa_r+0x49c>
 80079d0:	2200      	movs	r2, #0
 80079d2:	4b81      	ldr	r3, [pc, #516]	; (8007bd8 <_dtoa_r+0x5e8>)
 80079d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079d8:	f7f8 fcfe 	bl	80003d8 <__aeabi_dsub>
 80079dc:	462a      	mov	r2, r5
 80079de:	4633      	mov	r3, r6
 80079e0:	e9cd 0100 	strd	r0, r1, [sp]
 80079e4:	f7f9 f940 	bl	8000c68 <__aeabi_dcmpgt>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	f040 8288 	bne.w	8007efe <_dtoa_r+0x90e>
 80079ee:	462a      	mov	r2, r5
 80079f0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80079f4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80079f8:	f7f9 f918 	bl	8000c2c <__aeabi_dcmplt>
 80079fc:	2800      	cmp	r0, #0
 80079fe:	f040 827c 	bne.w	8007efa <_dtoa_r+0x90a>
 8007a02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a06:	e9cd 2300 	strd	r2, r3, [sp]
 8007a0a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	f2c0 8150 	blt.w	8007cb2 <_dtoa_r+0x6c2>
 8007a12:	f1ba 0f0e 	cmp.w	sl, #14
 8007a16:	f300 814c 	bgt.w	8007cb2 <_dtoa_r+0x6c2>
 8007a1a:	4b6a      	ldr	r3, [pc, #424]	; (8007bc4 <_dtoa_r+0x5d4>)
 8007a1c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007a20:	ed93 7b00 	vldr	d7, [r3]
 8007a24:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007a2c:	f280 80d8 	bge.w	8007be0 <_dtoa_r+0x5f0>
 8007a30:	f1b9 0f00 	cmp.w	r9, #0
 8007a34:	f300 80d4 	bgt.w	8007be0 <_dtoa_r+0x5f0>
 8007a38:	f040 825e 	bne.w	8007ef8 <_dtoa_r+0x908>
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	4b66      	ldr	r3, [pc, #408]	; (8007bd8 <_dtoa_r+0x5e8>)
 8007a40:	ec51 0b17 	vmov	r0, r1, d7
 8007a44:	f7f8 fe80 	bl	8000748 <__aeabi_dmul>
 8007a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a4c:	f7f9 f902 	bl	8000c54 <__aeabi_dcmpge>
 8007a50:	464f      	mov	r7, r9
 8007a52:	464e      	mov	r6, r9
 8007a54:	2800      	cmp	r0, #0
 8007a56:	f040 8234 	bne.w	8007ec2 <_dtoa_r+0x8d2>
 8007a5a:	2331      	movs	r3, #49	; 0x31
 8007a5c:	f10b 0501 	add.w	r5, fp, #1
 8007a60:	f88b 3000 	strb.w	r3, [fp]
 8007a64:	f10a 0a01 	add.w	sl, sl, #1
 8007a68:	e22f      	b.n	8007eca <_dtoa_r+0x8da>
 8007a6a:	07f2      	lsls	r2, r6, #31
 8007a6c:	d505      	bpl.n	8007a7a <_dtoa_r+0x48a>
 8007a6e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a72:	f7f8 fe69 	bl	8000748 <__aeabi_dmul>
 8007a76:	3501      	adds	r5, #1
 8007a78:	2301      	movs	r3, #1
 8007a7a:	1076      	asrs	r6, r6, #1
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	e772      	b.n	8007966 <_dtoa_r+0x376>
 8007a80:	2502      	movs	r5, #2
 8007a82:	e774      	b.n	800796e <_dtoa_r+0x37e>
 8007a84:	f8cd a020 	str.w	sl, [sp, #32]
 8007a88:	464f      	mov	r7, r9
 8007a8a:	e791      	b.n	80079b0 <_dtoa_r+0x3c0>
 8007a8c:	4b4d      	ldr	r3, [pc, #308]	; (8007bc4 <_dtoa_r+0x5d4>)
 8007a8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a92:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8007a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d047      	beq.n	8007b2c <_dtoa_r+0x53c>
 8007a9c:	4602      	mov	r2, r0
 8007a9e:	460b      	mov	r3, r1
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	494e      	ldr	r1, [pc, #312]	; (8007bdc <_dtoa_r+0x5ec>)
 8007aa4:	f7f8 ff7a 	bl	800099c <__aeabi_ddiv>
 8007aa8:	462a      	mov	r2, r5
 8007aaa:	4633      	mov	r3, r6
 8007aac:	f7f8 fc94 	bl	80003d8 <__aeabi_dsub>
 8007ab0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007ab4:	465d      	mov	r5, fp
 8007ab6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007aba:	f7f9 f8f5 	bl	8000ca8 <__aeabi_d2iz>
 8007abe:	4606      	mov	r6, r0
 8007ac0:	f7f8 fdd8 	bl	8000674 <__aeabi_i2d>
 8007ac4:	4602      	mov	r2, r0
 8007ac6:	460b      	mov	r3, r1
 8007ac8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007acc:	f7f8 fc84 	bl	80003d8 <__aeabi_dsub>
 8007ad0:	3630      	adds	r6, #48	; 0x30
 8007ad2:	f805 6b01 	strb.w	r6, [r5], #1
 8007ad6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007ada:	e9cd 0100 	strd	r0, r1, [sp]
 8007ade:	f7f9 f8a5 	bl	8000c2c <__aeabi_dcmplt>
 8007ae2:	2800      	cmp	r0, #0
 8007ae4:	d163      	bne.n	8007bae <_dtoa_r+0x5be>
 8007ae6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007aea:	2000      	movs	r0, #0
 8007aec:	4937      	ldr	r1, [pc, #220]	; (8007bcc <_dtoa_r+0x5dc>)
 8007aee:	f7f8 fc73 	bl	80003d8 <__aeabi_dsub>
 8007af2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007af6:	f7f9 f899 	bl	8000c2c <__aeabi_dcmplt>
 8007afa:	2800      	cmp	r0, #0
 8007afc:	f040 80b7 	bne.w	8007c6e <_dtoa_r+0x67e>
 8007b00:	eba5 030b 	sub.w	r3, r5, fp
 8007b04:	429f      	cmp	r7, r3
 8007b06:	f77f af7c 	ble.w	8007a02 <_dtoa_r+0x412>
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	4b30      	ldr	r3, [pc, #192]	; (8007bd0 <_dtoa_r+0x5e0>)
 8007b0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b12:	f7f8 fe19 	bl	8000748 <__aeabi_dmul>
 8007b16:	2200      	movs	r2, #0
 8007b18:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b1c:	4b2c      	ldr	r3, [pc, #176]	; (8007bd0 <_dtoa_r+0x5e0>)
 8007b1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b22:	f7f8 fe11 	bl	8000748 <__aeabi_dmul>
 8007b26:	e9cd 0100 	strd	r0, r1, [sp]
 8007b2a:	e7c4      	b.n	8007ab6 <_dtoa_r+0x4c6>
 8007b2c:	462a      	mov	r2, r5
 8007b2e:	4633      	mov	r3, r6
 8007b30:	f7f8 fe0a 	bl	8000748 <__aeabi_dmul>
 8007b34:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007b38:	eb0b 0507 	add.w	r5, fp, r7
 8007b3c:	465e      	mov	r6, fp
 8007b3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b42:	f7f9 f8b1 	bl	8000ca8 <__aeabi_d2iz>
 8007b46:	4607      	mov	r7, r0
 8007b48:	f7f8 fd94 	bl	8000674 <__aeabi_i2d>
 8007b4c:	3730      	adds	r7, #48	; 0x30
 8007b4e:	4602      	mov	r2, r0
 8007b50:	460b      	mov	r3, r1
 8007b52:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b56:	f7f8 fc3f 	bl	80003d8 <__aeabi_dsub>
 8007b5a:	f806 7b01 	strb.w	r7, [r6], #1
 8007b5e:	42ae      	cmp	r6, r5
 8007b60:	e9cd 0100 	strd	r0, r1, [sp]
 8007b64:	f04f 0200 	mov.w	r2, #0
 8007b68:	d126      	bne.n	8007bb8 <_dtoa_r+0x5c8>
 8007b6a:	4b1c      	ldr	r3, [pc, #112]	; (8007bdc <_dtoa_r+0x5ec>)
 8007b6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007b70:	f7f8 fc34 	bl	80003dc <__adddf3>
 8007b74:	4602      	mov	r2, r0
 8007b76:	460b      	mov	r3, r1
 8007b78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b7c:	f7f9 f874 	bl	8000c68 <__aeabi_dcmpgt>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d174      	bne.n	8007c6e <_dtoa_r+0x67e>
 8007b84:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007b88:	2000      	movs	r0, #0
 8007b8a:	4914      	ldr	r1, [pc, #80]	; (8007bdc <_dtoa_r+0x5ec>)
 8007b8c:	f7f8 fc24 	bl	80003d8 <__aeabi_dsub>
 8007b90:	4602      	mov	r2, r0
 8007b92:	460b      	mov	r3, r1
 8007b94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b98:	f7f9 f848 	bl	8000c2c <__aeabi_dcmplt>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	f43f af30 	beq.w	8007a02 <_dtoa_r+0x412>
 8007ba2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007ba6:	2b30      	cmp	r3, #48	; 0x30
 8007ba8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8007bac:	d002      	beq.n	8007bb4 <_dtoa_r+0x5c4>
 8007bae:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007bb2:	e04a      	b.n	8007c4a <_dtoa_r+0x65a>
 8007bb4:	4615      	mov	r5, r2
 8007bb6:	e7f4      	b.n	8007ba2 <_dtoa_r+0x5b2>
 8007bb8:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <_dtoa_r+0x5e0>)
 8007bba:	f7f8 fdc5 	bl	8000748 <__aeabi_dmul>
 8007bbe:	e9cd 0100 	strd	r0, r1, [sp]
 8007bc2:	e7bc      	b.n	8007b3e <_dtoa_r+0x54e>
 8007bc4:	0800a9c8 	.word	0x0800a9c8
 8007bc8:	0800a9a0 	.word	0x0800a9a0
 8007bcc:	3ff00000 	.word	0x3ff00000
 8007bd0:	40240000 	.word	0x40240000
 8007bd4:	401c0000 	.word	0x401c0000
 8007bd8:	40140000 	.word	0x40140000
 8007bdc:	3fe00000 	.word	0x3fe00000
 8007be0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007be4:	465d      	mov	r5, fp
 8007be6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007bea:	4630      	mov	r0, r6
 8007bec:	4639      	mov	r1, r7
 8007bee:	f7f8 fed5 	bl	800099c <__aeabi_ddiv>
 8007bf2:	f7f9 f859 	bl	8000ca8 <__aeabi_d2iz>
 8007bf6:	4680      	mov	r8, r0
 8007bf8:	f7f8 fd3c 	bl	8000674 <__aeabi_i2d>
 8007bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c00:	f7f8 fda2 	bl	8000748 <__aeabi_dmul>
 8007c04:	4602      	mov	r2, r0
 8007c06:	460b      	mov	r3, r1
 8007c08:	4630      	mov	r0, r6
 8007c0a:	4639      	mov	r1, r7
 8007c0c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007c10:	f7f8 fbe2 	bl	80003d8 <__aeabi_dsub>
 8007c14:	f805 6b01 	strb.w	r6, [r5], #1
 8007c18:	eba5 060b 	sub.w	r6, r5, fp
 8007c1c:	45b1      	cmp	r9, r6
 8007c1e:	4602      	mov	r2, r0
 8007c20:	460b      	mov	r3, r1
 8007c22:	d139      	bne.n	8007c98 <_dtoa_r+0x6a8>
 8007c24:	f7f8 fbda 	bl	80003dc <__adddf3>
 8007c28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	460f      	mov	r7, r1
 8007c30:	f7f9 f81a 	bl	8000c68 <__aeabi_dcmpgt>
 8007c34:	b9c8      	cbnz	r0, 8007c6a <_dtoa_r+0x67a>
 8007c36:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	4639      	mov	r1, r7
 8007c3e:	f7f8 ffeb 	bl	8000c18 <__aeabi_dcmpeq>
 8007c42:	b110      	cbz	r0, 8007c4a <_dtoa_r+0x65a>
 8007c44:	f018 0f01 	tst.w	r8, #1
 8007c48:	d10f      	bne.n	8007c6a <_dtoa_r+0x67a>
 8007c4a:	9904      	ldr	r1, [sp, #16]
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 fe28 	bl	80088a2 <_Bfree>
 8007c52:	2300      	movs	r3, #0
 8007c54:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007c56:	702b      	strb	r3, [r5, #0]
 8007c58:	f10a 0301 	add.w	r3, sl, #1
 8007c5c:	6013      	str	r3, [r2, #0]
 8007c5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f43f acff 	beq.w	8007664 <_dtoa_r+0x74>
 8007c66:	601d      	str	r5, [r3, #0]
 8007c68:	e4fc      	b.n	8007664 <_dtoa_r+0x74>
 8007c6a:	f8cd a020 	str.w	sl, [sp, #32]
 8007c6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007c72:	2a39      	cmp	r2, #57	; 0x39
 8007c74:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8007c78:	d108      	bne.n	8007c8c <_dtoa_r+0x69c>
 8007c7a:	459b      	cmp	fp, r3
 8007c7c:	d10a      	bne.n	8007c94 <_dtoa_r+0x6a4>
 8007c7e:	9b08      	ldr	r3, [sp, #32]
 8007c80:	3301      	adds	r3, #1
 8007c82:	9308      	str	r3, [sp, #32]
 8007c84:	2330      	movs	r3, #48	; 0x30
 8007c86:	f88b 3000 	strb.w	r3, [fp]
 8007c8a:	465b      	mov	r3, fp
 8007c8c:	781a      	ldrb	r2, [r3, #0]
 8007c8e:	3201      	adds	r2, #1
 8007c90:	701a      	strb	r2, [r3, #0]
 8007c92:	e78c      	b.n	8007bae <_dtoa_r+0x5be>
 8007c94:	461d      	mov	r5, r3
 8007c96:	e7ea      	b.n	8007c6e <_dtoa_r+0x67e>
 8007c98:	2200      	movs	r2, #0
 8007c9a:	4b9b      	ldr	r3, [pc, #620]	; (8007f08 <_dtoa_r+0x918>)
 8007c9c:	f7f8 fd54 	bl	8000748 <__aeabi_dmul>
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	4606      	mov	r6, r0
 8007ca6:	460f      	mov	r7, r1
 8007ca8:	f7f8 ffb6 	bl	8000c18 <__aeabi_dcmpeq>
 8007cac:	2800      	cmp	r0, #0
 8007cae:	d09a      	beq.n	8007be6 <_dtoa_r+0x5f6>
 8007cb0:	e7cb      	b.n	8007c4a <_dtoa_r+0x65a>
 8007cb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007cb4:	2a00      	cmp	r2, #0
 8007cb6:	f000 808b 	beq.w	8007dd0 <_dtoa_r+0x7e0>
 8007cba:	9a06      	ldr	r2, [sp, #24]
 8007cbc:	2a01      	cmp	r2, #1
 8007cbe:	dc6e      	bgt.n	8007d9e <_dtoa_r+0x7ae>
 8007cc0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007cc2:	2a00      	cmp	r2, #0
 8007cc4:	d067      	beq.n	8007d96 <_dtoa_r+0x7a6>
 8007cc6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007cca:	9f07      	ldr	r7, [sp, #28]
 8007ccc:	9d05      	ldr	r5, [sp, #20]
 8007cce:	9a05      	ldr	r2, [sp, #20]
 8007cd0:	2101      	movs	r1, #1
 8007cd2:	441a      	add	r2, r3
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	9205      	str	r2, [sp, #20]
 8007cd8:	4498      	add	r8, r3
 8007cda:	f000 fe74 	bl	80089c6 <__i2b>
 8007cde:	4606      	mov	r6, r0
 8007ce0:	2d00      	cmp	r5, #0
 8007ce2:	dd0c      	ble.n	8007cfe <_dtoa_r+0x70e>
 8007ce4:	f1b8 0f00 	cmp.w	r8, #0
 8007ce8:	dd09      	ble.n	8007cfe <_dtoa_r+0x70e>
 8007cea:	4545      	cmp	r5, r8
 8007cec:	9a05      	ldr	r2, [sp, #20]
 8007cee:	462b      	mov	r3, r5
 8007cf0:	bfa8      	it	ge
 8007cf2:	4643      	movge	r3, r8
 8007cf4:	1ad2      	subs	r2, r2, r3
 8007cf6:	9205      	str	r2, [sp, #20]
 8007cf8:	1aed      	subs	r5, r5, r3
 8007cfa:	eba8 0803 	sub.w	r8, r8, r3
 8007cfe:	9b07      	ldr	r3, [sp, #28]
 8007d00:	b1eb      	cbz	r3, 8007d3e <_dtoa_r+0x74e>
 8007d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d067      	beq.n	8007dd8 <_dtoa_r+0x7e8>
 8007d08:	b18f      	cbz	r7, 8007d2e <_dtoa_r+0x73e>
 8007d0a:	4631      	mov	r1, r6
 8007d0c:	463a      	mov	r2, r7
 8007d0e:	4620      	mov	r0, r4
 8007d10:	f000 fef8 	bl	8008b04 <__pow5mult>
 8007d14:	9a04      	ldr	r2, [sp, #16]
 8007d16:	4601      	mov	r1, r0
 8007d18:	4606      	mov	r6, r0
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f000 fe5c 	bl	80089d8 <__multiply>
 8007d20:	9904      	ldr	r1, [sp, #16]
 8007d22:	9008      	str	r0, [sp, #32]
 8007d24:	4620      	mov	r0, r4
 8007d26:	f000 fdbc 	bl	80088a2 <_Bfree>
 8007d2a:	9b08      	ldr	r3, [sp, #32]
 8007d2c:	9304      	str	r3, [sp, #16]
 8007d2e:	9b07      	ldr	r3, [sp, #28]
 8007d30:	1bda      	subs	r2, r3, r7
 8007d32:	d004      	beq.n	8007d3e <_dtoa_r+0x74e>
 8007d34:	9904      	ldr	r1, [sp, #16]
 8007d36:	4620      	mov	r0, r4
 8007d38:	f000 fee4 	bl	8008b04 <__pow5mult>
 8007d3c:	9004      	str	r0, [sp, #16]
 8007d3e:	2101      	movs	r1, #1
 8007d40:	4620      	mov	r0, r4
 8007d42:	f000 fe40 	bl	80089c6 <__i2b>
 8007d46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d48:	4607      	mov	r7, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	f000 81cf 	beq.w	80080ee <_dtoa_r+0xafe>
 8007d50:	461a      	mov	r2, r3
 8007d52:	4601      	mov	r1, r0
 8007d54:	4620      	mov	r0, r4
 8007d56:	f000 fed5 	bl	8008b04 <__pow5mult>
 8007d5a:	9b06      	ldr	r3, [sp, #24]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	4607      	mov	r7, r0
 8007d60:	dc40      	bgt.n	8007de4 <_dtoa_r+0x7f4>
 8007d62:	9b00      	ldr	r3, [sp, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d139      	bne.n	8007ddc <_dtoa_r+0x7ec>
 8007d68:	9b01      	ldr	r3, [sp, #4]
 8007d6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d136      	bne.n	8007de0 <_dtoa_r+0x7f0>
 8007d72:	9b01      	ldr	r3, [sp, #4]
 8007d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d78:	0d1b      	lsrs	r3, r3, #20
 8007d7a:	051b      	lsls	r3, r3, #20
 8007d7c:	b12b      	cbz	r3, 8007d8a <_dtoa_r+0x79a>
 8007d7e:	9b05      	ldr	r3, [sp, #20]
 8007d80:	3301      	adds	r3, #1
 8007d82:	9305      	str	r3, [sp, #20]
 8007d84:	f108 0801 	add.w	r8, r8, #1
 8007d88:	2301      	movs	r3, #1
 8007d8a:	9307      	str	r3, [sp, #28]
 8007d8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d12a      	bne.n	8007de8 <_dtoa_r+0x7f8>
 8007d92:	2001      	movs	r0, #1
 8007d94:	e030      	b.n	8007df8 <_dtoa_r+0x808>
 8007d96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d98:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007d9c:	e795      	b.n	8007cca <_dtoa_r+0x6da>
 8007d9e:	9b07      	ldr	r3, [sp, #28]
 8007da0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8007da4:	42bb      	cmp	r3, r7
 8007da6:	bfbf      	itttt	lt
 8007da8:	9b07      	ldrlt	r3, [sp, #28]
 8007daa:	9707      	strlt	r7, [sp, #28]
 8007dac:	1afa      	sublt	r2, r7, r3
 8007dae:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007db0:	bfbb      	ittet	lt
 8007db2:	189b      	addlt	r3, r3, r2
 8007db4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007db6:	1bdf      	subge	r7, r3, r7
 8007db8:	2700      	movlt	r7, #0
 8007dba:	f1b9 0f00 	cmp.w	r9, #0
 8007dbe:	bfb5      	itete	lt
 8007dc0:	9b05      	ldrlt	r3, [sp, #20]
 8007dc2:	9d05      	ldrge	r5, [sp, #20]
 8007dc4:	eba3 0509 	sublt.w	r5, r3, r9
 8007dc8:	464b      	movge	r3, r9
 8007dca:	bfb8      	it	lt
 8007dcc:	2300      	movlt	r3, #0
 8007dce:	e77e      	b.n	8007cce <_dtoa_r+0x6de>
 8007dd0:	9f07      	ldr	r7, [sp, #28]
 8007dd2:	9d05      	ldr	r5, [sp, #20]
 8007dd4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007dd6:	e783      	b.n	8007ce0 <_dtoa_r+0x6f0>
 8007dd8:	9a07      	ldr	r2, [sp, #28]
 8007dda:	e7ab      	b.n	8007d34 <_dtoa_r+0x744>
 8007ddc:	2300      	movs	r3, #0
 8007dde:	e7d4      	b.n	8007d8a <_dtoa_r+0x79a>
 8007de0:	9b00      	ldr	r3, [sp, #0]
 8007de2:	e7d2      	b.n	8007d8a <_dtoa_r+0x79a>
 8007de4:	2300      	movs	r3, #0
 8007de6:	9307      	str	r3, [sp, #28]
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8007dee:	6918      	ldr	r0, [r3, #16]
 8007df0:	f000 fd9b 	bl	800892a <__hi0bits>
 8007df4:	f1c0 0020 	rsb	r0, r0, #32
 8007df8:	4440      	add	r0, r8
 8007dfa:	f010 001f 	ands.w	r0, r0, #31
 8007dfe:	d047      	beq.n	8007e90 <_dtoa_r+0x8a0>
 8007e00:	f1c0 0320 	rsb	r3, r0, #32
 8007e04:	2b04      	cmp	r3, #4
 8007e06:	dd3b      	ble.n	8007e80 <_dtoa_r+0x890>
 8007e08:	9b05      	ldr	r3, [sp, #20]
 8007e0a:	f1c0 001c 	rsb	r0, r0, #28
 8007e0e:	4403      	add	r3, r0
 8007e10:	9305      	str	r3, [sp, #20]
 8007e12:	4405      	add	r5, r0
 8007e14:	4480      	add	r8, r0
 8007e16:	9b05      	ldr	r3, [sp, #20]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	dd05      	ble.n	8007e28 <_dtoa_r+0x838>
 8007e1c:	461a      	mov	r2, r3
 8007e1e:	9904      	ldr	r1, [sp, #16]
 8007e20:	4620      	mov	r0, r4
 8007e22:	f000 feaf 	bl	8008b84 <__lshift>
 8007e26:	9004      	str	r0, [sp, #16]
 8007e28:	f1b8 0f00 	cmp.w	r8, #0
 8007e2c:	dd05      	ble.n	8007e3a <_dtoa_r+0x84a>
 8007e2e:	4639      	mov	r1, r7
 8007e30:	4642      	mov	r2, r8
 8007e32:	4620      	mov	r0, r4
 8007e34:	f000 fea6 	bl	8008b84 <__lshift>
 8007e38:	4607      	mov	r7, r0
 8007e3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007e3c:	b353      	cbz	r3, 8007e94 <_dtoa_r+0x8a4>
 8007e3e:	4639      	mov	r1, r7
 8007e40:	9804      	ldr	r0, [sp, #16]
 8007e42:	f000 fef3 	bl	8008c2c <__mcmp>
 8007e46:	2800      	cmp	r0, #0
 8007e48:	da24      	bge.n	8007e94 <_dtoa_r+0x8a4>
 8007e4a:	2300      	movs	r3, #0
 8007e4c:	220a      	movs	r2, #10
 8007e4e:	9904      	ldr	r1, [sp, #16]
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 fd2f 	bl	80088b4 <__multadd>
 8007e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e58:	9004      	str	r0, [sp, #16]
 8007e5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	f000 814c 	beq.w	80080fc <_dtoa_r+0xb0c>
 8007e64:	2300      	movs	r3, #0
 8007e66:	4631      	mov	r1, r6
 8007e68:	220a      	movs	r2, #10
 8007e6a:	4620      	mov	r0, r4
 8007e6c:	f000 fd22 	bl	80088b4 <__multadd>
 8007e70:	9b02      	ldr	r3, [sp, #8]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	4606      	mov	r6, r0
 8007e76:	dc4f      	bgt.n	8007f18 <_dtoa_r+0x928>
 8007e78:	9b06      	ldr	r3, [sp, #24]
 8007e7a:	2b02      	cmp	r3, #2
 8007e7c:	dd4c      	ble.n	8007f18 <_dtoa_r+0x928>
 8007e7e:	e011      	b.n	8007ea4 <_dtoa_r+0x8b4>
 8007e80:	d0c9      	beq.n	8007e16 <_dtoa_r+0x826>
 8007e82:	9a05      	ldr	r2, [sp, #20]
 8007e84:	331c      	adds	r3, #28
 8007e86:	441a      	add	r2, r3
 8007e88:	9205      	str	r2, [sp, #20]
 8007e8a:	441d      	add	r5, r3
 8007e8c:	4498      	add	r8, r3
 8007e8e:	e7c2      	b.n	8007e16 <_dtoa_r+0x826>
 8007e90:	4603      	mov	r3, r0
 8007e92:	e7f6      	b.n	8007e82 <_dtoa_r+0x892>
 8007e94:	f1b9 0f00 	cmp.w	r9, #0
 8007e98:	dc38      	bgt.n	8007f0c <_dtoa_r+0x91c>
 8007e9a:	9b06      	ldr	r3, [sp, #24]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	dd35      	ble.n	8007f0c <_dtoa_r+0x91c>
 8007ea0:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ea4:	9b02      	ldr	r3, [sp, #8]
 8007ea6:	b963      	cbnz	r3, 8007ec2 <_dtoa_r+0x8d2>
 8007ea8:	4639      	mov	r1, r7
 8007eaa:	2205      	movs	r2, #5
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 fd01 	bl	80088b4 <__multadd>
 8007eb2:	4601      	mov	r1, r0
 8007eb4:	4607      	mov	r7, r0
 8007eb6:	9804      	ldr	r0, [sp, #16]
 8007eb8:	f000 feb8 	bl	8008c2c <__mcmp>
 8007ebc:	2800      	cmp	r0, #0
 8007ebe:	f73f adcc 	bgt.w	8007a5a <_dtoa_r+0x46a>
 8007ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ec4:	465d      	mov	r5, fp
 8007ec6:	ea6f 0a03 	mvn.w	sl, r3
 8007eca:	f04f 0900 	mov.w	r9, #0
 8007ece:	4639      	mov	r1, r7
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f000 fce6 	bl	80088a2 <_Bfree>
 8007ed6:	2e00      	cmp	r6, #0
 8007ed8:	f43f aeb7 	beq.w	8007c4a <_dtoa_r+0x65a>
 8007edc:	f1b9 0f00 	cmp.w	r9, #0
 8007ee0:	d005      	beq.n	8007eee <_dtoa_r+0x8fe>
 8007ee2:	45b1      	cmp	r9, r6
 8007ee4:	d003      	beq.n	8007eee <_dtoa_r+0x8fe>
 8007ee6:	4649      	mov	r1, r9
 8007ee8:	4620      	mov	r0, r4
 8007eea:	f000 fcda 	bl	80088a2 <_Bfree>
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f000 fcd6 	bl	80088a2 <_Bfree>
 8007ef6:	e6a8      	b.n	8007c4a <_dtoa_r+0x65a>
 8007ef8:	2700      	movs	r7, #0
 8007efa:	463e      	mov	r6, r7
 8007efc:	e7e1      	b.n	8007ec2 <_dtoa_r+0x8d2>
 8007efe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007f02:	463e      	mov	r6, r7
 8007f04:	e5a9      	b.n	8007a5a <_dtoa_r+0x46a>
 8007f06:	bf00      	nop
 8007f08:	40240000 	.word	0x40240000
 8007f0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f0e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	f000 80f9 	beq.w	800810a <_dtoa_r+0xb1a>
 8007f18:	2d00      	cmp	r5, #0
 8007f1a:	dd05      	ble.n	8007f28 <_dtoa_r+0x938>
 8007f1c:	4631      	mov	r1, r6
 8007f1e:	462a      	mov	r2, r5
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 fe2f 	bl	8008b84 <__lshift>
 8007f26:	4606      	mov	r6, r0
 8007f28:	9b07      	ldr	r3, [sp, #28]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d04c      	beq.n	8007fc8 <_dtoa_r+0x9d8>
 8007f2e:	6871      	ldr	r1, [r6, #4]
 8007f30:	4620      	mov	r0, r4
 8007f32:	f000 fc91 	bl	8008858 <_Balloc>
 8007f36:	6932      	ldr	r2, [r6, #16]
 8007f38:	3202      	adds	r2, #2
 8007f3a:	4605      	mov	r5, r0
 8007f3c:	0092      	lsls	r2, r2, #2
 8007f3e:	f106 010c 	add.w	r1, r6, #12
 8007f42:	300c      	adds	r0, #12
 8007f44:	f7fd ffa2 	bl	8005e8c <memcpy>
 8007f48:	2201      	movs	r2, #1
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f000 fe19 	bl	8008b84 <__lshift>
 8007f52:	9b00      	ldr	r3, [sp, #0]
 8007f54:	f8cd b014 	str.w	fp, [sp, #20]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	46b1      	mov	r9, r6
 8007f5e:	9307      	str	r3, [sp, #28]
 8007f60:	4606      	mov	r6, r0
 8007f62:	4639      	mov	r1, r7
 8007f64:	9804      	ldr	r0, [sp, #16]
 8007f66:	f7ff fab5 	bl	80074d4 <quorem>
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	4605      	mov	r5, r0
 8007f6e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007f72:	9804      	ldr	r0, [sp, #16]
 8007f74:	f000 fe5a 	bl	8008c2c <__mcmp>
 8007f78:	4632      	mov	r2, r6
 8007f7a:	9000      	str	r0, [sp, #0]
 8007f7c:	4639      	mov	r1, r7
 8007f7e:	4620      	mov	r0, r4
 8007f80:	f000 fe6e 	bl	8008c60 <__mdiff>
 8007f84:	68c3      	ldr	r3, [r0, #12]
 8007f86:	4602      	mov	r2, r0
 8007f88:	bb03      	cbnz	r3, 8007fcc <_dtoa_r+0x9dc>
 8007f8a:	4601      	mov	r1, r0
 8007f8c:	9008      	str	r0, [sp, #32]
 8007f8e:	9804      	ldr	r0, [sp, #16]
 8007f90:	f000 fe4c 	bl	8008c2c <__mcmp>
 8007f94:	9a08      	ldr	r2, [sp, #32]
 8007f96:	4603      	mov	r3, r0
 8007f98:	4611      	mov	r1, r2
 8007f9a:	4620      	mov	r0, r4
 8007f9c:	9308      	str	r3, [sp, #32]
 8007f9e:	f000 fc80 	bl	80088a2 <_Bfree>
 8007fa2:	9b08      	ldr	r3, [sp, #32]
 8007fa4:	b9a3      	cbnz	r3, 8007fd0 <_dtoa_r+0x9e0>
 8007fa6:	9a06      	ldr	r2, [sp, #24]
 8007fa8:	b992      	cbnz	r2, 8007fd0 <_dtoa_r+0x9e0>
 8007faa:	9a07      	ldr	r2, [sp, #28]
 8007fac:	b982      	cbnz	r2, 8007fd0 <_dtoa_r+0x9e0>
 8007fae:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007fb2:	d029      	beq.n	8008008 <_dtoa_r+0xa18>
 8007fb4:	9b00      	ldr	r3, [sp, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dd01      	ble.n	8007fbe <_dtoa_r+0x9ce>
 8007fba:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8007fbe:	9b05      	ldr	r3, [sp, #20]
 8007fc0:	1c5d      	adds	r5, r3, #1
 8007fc2:	f883 8000 	strb.w	r8, [r3]
 8007fc6:	e782      	b.n	8007ece <_dtoa_r+0x8de>
 8007fc8:	4630      	mov	r0, r6
 8007fca:	e7c2      	b.n	8007f52 <_dtoa_r+0x962>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e7e3      	b.n	8007f98 <_dtoa_r+0x9a8>
 8007fd0:	9a00      	ldr	r2, [sp, #0]
 8007fd2:	2a00      	cmp	r2, #0
 8007fd4:	db04      	blt.n	8007fe0 <_dtoa_r+0x9f0>
 8007fd6:	d125      	bne.n	8008024 <_dtoa_r+0xa34>
 8007fd8:	9a06      	ldr	r2, [sp, #24]
 8007fda:	bb1a      	cbnz	r2, 8008024 <_dtoa_r+0xa34>
 8007fdc:	9a07      	ldr	r2, [sp, #28]
 8007fde:	bb0a      	cbnz	r2, 8008024 <_dtoa_r+0xa34>
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	ddec      	ble.n	8007fbe <_dtoa_r+0x9ce>
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	9904      	ldr	r1, [sp, #16]
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f000 fdcb 	bl	8008b84 <__lshift>
 8007fee:	4639      	mov	r1, r7
 8007ff0:	9004      	str	r0, [sp, #16]
 8007ff2:	f000 fe1b 	bl	8008c2c <__mcmp>
 8007ff6:	2800      	cmp	r0, #0
 8007ff8:	dc03      	bgt.n	8008002 <_dtoa_r+0xa12>
 8007ffa:	d1e0      	bne.n	8007fbe <_dtoa_r+0x9ce>
 8007ffc:	f018 0f01 	tst.w	r8, #1
 8008000:	d0dd      	beq.n	8007fbe <_dtoa_r+0x9ce>
 8008002:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008006:	d1d8      	bne.n	8007fba <_dtoa_r+0x9ca>
 8008008:	9b05      	ldr	r3, [sp, #20]
 800800a:	9a05      	ldr	r2, [sp, #20]
 800800c:	1c5d      	adds	r5, r3, #1
 800800e:	2339      	movs	r3, #57	; 0x39
 8008010:	7013      	strb	r3, [r2, #0]
 8008012:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008016:	2b39      	cmp	r3, #57	; 0x39
 8008018:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800801c:	d04f      	beq.n	80080be <_dtoa_r+0xace>
 800801e:	3301      	adds	r3, #1
 8008020:	7013      	strb	r3, [r2, #0]
 8008022:	e754      	b.n	8007ece <_dtoa_r+0x8de>
 8008024:	9a05      	ldr	r2, [sp, #20]
 8008026:	2b00      	cmp	r3, #0
 8008028:	f102 0501 	add.w	r5, r2, #1
 800802c:	dd06      	ble.n	800803c <_dtoa_r+0xa4c>
 800802e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008032:	d0e9      	beq.n	8008008 <_dtoa_r+0xa18>
 8008034:	f108 0801 	add.w	r8, r8, #1
 8008038:	9b05      	ldr	r3, [sp, #20]
 800803a:	e7c2      	b.n	8007fc2 <_dtoa_r+0x9d2>
 800803c:	9a02      	ldr	r2, [sp, #8]
 800803e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008042:	eba5 030b 	sub.w	r3, r5, fp
 8008046:	4293      	cmp	r3, r2
 8008048:	d021      	beq.n	800808e <_dtoa_r+0xa9e>
 800804a:	2300      	movs	r3, #0
 800804c:	220a      	movs	r2, #10
 800804e:	9904      	ldr	r1, [sp, #16]
 8008050:	4620      	mov	r0, r4
 8008052:	f000 fc2f 	bl	80088b4 <__multadd>
 8008056:	45b1      	cmp	r9, r6
 8008058:	9004      	str	r0, [sp, #16]
 800805a:	f04f 0300 	mov.w	r3, #0
 800805e:	f04f 020a 	mov.w	r2, #10
 8008062:	4649      	mov	r1, r9
 8008064:	4620      	mov	r0, r4
 8008066:	d105      	bne.n	8008074 <_dtoa_r+0xa84>
 8008068:	f000 fc24 	bl	80088b4 <__multadd>
 800806c:	4681      	mov	r9, r0
 800806e:	4606      	mov	r6, r0
 8008070:	9505      	str	r5, [sp, #20]
 8008072:	e776      	b.n	8007f62 <_dtoa_r+0x972>
 8008074:	f000 fc1e 	bl	80088b4 <__multadd>
 8008078:	4631      	mov	r1, r6
 800807a:	4681      	mov	r9, r0
 800807c:	2300      	movs	r3, #0
 800807e:	220a      	movs	r2, #10
 8008080:	4620      	mov	r0, r4
 8008082:	f000 fc17 	bl	80088b4 <__multadd>
 8008086:	4606      	mov	r6, r0
 8008088:	e7f2      	b.n	8008070 <_dtoa_r+0xa80>
 800808a:	f04f 0900 	mov.w	r9, #0
 800808e:	2201      	movs	r2, #1
 8008090:	9904      	ldr	r1, [sp, #16]
 8008092:	4620      	mov	r0, r4
 8008094:	f000 fd76 	bl	8008b84 <__lshift>
 8008098:	4639      	mov	r1, r7
 800809a:	9004      	str	r0, [sp, #16]
 800809c:	f000 fdc6 	bl	8008c2c <__mcmp>
 80080a0:	2800      	cmp	r0, #0
 80080a2:	dcb6      	bgt.n	8008012 <_dtoa_r+0xa22>
 80080a4:	d102      	bne.n	80080ac <_dtoa_r+0xabc>
 80080a6:	f018 0f01 	tst.w	r8, #1
 80080aa:	d1b2      	bne.n	8008012 <_dtoa_r+0xa22>
 80080ac:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80080b0:	2b30      	cmp	r3, #48	; 0x30
 80080b2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80080b6:	f47f af0a 	bne.w	8007ece <_dtoa_r+0x8de>
 80080ba:	4615      	mov	r5, r2
 80080bc:	e7f6      	b.n	80080ac <_dtoa_r+0xabc>
 80080be:	4593      	cmp	fp, r2
 80080c0:	d105      	bne.n	80080ce <_dtoa_r+0xade>
 80080c2:	2331      	movs	r3, #49	; 0x31
 80080c4:	f10a 0a01 	add.w	sl, sl, #1
 80080c8:	f88b 3000 	strb.w	r3, [fp]
 80080cc:	e6ff      	b.n	8007ece <_dtoa_r+0x8de>
 80080ce:	4615      	mov	r5, r2
 80080d0:	e79f      	b.n	8008012 <_dtoa_r+0xa22>
 80080d2:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008138 <_dtoa_r+0xb48>
 80080d6:	f7ff bac5 	b.w	8007664 <_dtoa_r+0x74>
 80080da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80080dc:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800813c <_dtoa_r+0xb4c>
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f43f aabf 	beq.w	8007664 <_dtoa_r+0x74>
 80080e6:	f10b 0308 	add.w	r3, fp, #8
 80080ea:	f7ff bab9 	b.w	8007660 <_dtoa_r+0x70>
 80080ee:	9b06      	ldr	r3, [sp, #24]
 80080f0:	2b01      	cmp	r3, #1
 80080f2:	f77f ae36 	ble.w	8007d62 <_dtoa_r+0x772>
 80080f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80080f8:	9307      	str	r3, [sp, #28]
 80080fa:	e64a      	b.n	8007d92 <_dtoa_r+0x7a2>
 80080fc:	9b02      	ldr	r3, [sp, #8]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	dc03      	bgt.n	800810a <_dtoa_r+0xb1a>
 8008102:	9b06      	ldr	r3, [sp, #24]
 8008104:	2b02      	cmp	r3, #2
 8008106:	f73f aecd 	bgt.w	8007ea4 <_dtoa_r+0x8b4>
 800810a:	465d      	mov	r5, fp
 800810c:	4639      	mov	r1, r7
 800810e:	9804      	ldr	r0, [sp, #16]
 8008110:	f7ff f9e0 	bl	80074d4 <quorem>
 8008114:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008118:	f805 8b01 	strb.w	r8, [r5], #1
 800811c:	9a02      	ldr	r2, [sp, #8]
 800811e:	eba5 030b 	sub.w	r3, r5, fp
 8008122:	429a      	cmp	r2, r3
 8008124:	ddb1      	ble.n	800808a <_dtoa_r+0xa9a>
 8008126:	2300      	movs	r3, #0
 8008128:	220a      	movs	r2, #10
 800812a:	9904      	ldr	r1, [sp, #16]
 800812c:	4620      	mov	r0, r4
 800812e:	f000 fbc1 	bl	80088b4 <__multadd>
 8008132:	9004      	str	r0, [sp, #16]
 8008134:	e7ea      	b.n	800810c <_dtoa_r+0xb1c>
 8008136:	bf00      	nop
 8008138:	0800a966 	.word	0x0800a966
 800813c:	0800a988 	.word	0x0800a988

08008140 <__libc_fini_array>:
 8008140:	b538      	push	{r3, r4, r5, lr}
 8008142:	4d07      	ldr	r5, [pc, #28]	; (8008160 <__libc_fini_array+0x20>)
 8008144:	4c07      	ldr	r4, [pc, #28]	; (8008164 <__libc_fini_array+0x24>)
 8008146:	1b64      	subs	r4, r4, r5
 8008148:	10a4      	asrs	r4, r4, #2
 800814a:	b91c      	cbnz	r4, 8008154 <__libc_fini_array+0x14>
 800814c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008150:	f002 ba06 	b.w	800a560 <_fini>
 8008154:	3c01      	subs	r4, #1
 8008156:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800815a:	4798      	blx	r3
 800815c:	e7f5      	b.n	800814a <__libc_fini_array+0xa>
 800815e:	bf00      	nop
 8008160:	0800abf8 	.word	0x0800abf8
 8008164:	0800abfc 	.word	0x0800abfc

08008168 <_malloc_trim_r>:
 8008168:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800816c:	4605      	mov	r5, r0
 800816e:	2008      	movs	r0, #8
 8008170:	460c      	mov	r4, r1
 8008172:	f000 fedf 	bl	8008f34 <sysconf>
 8008176:	4f23      	ldr	r7, [pc, #140]	; (8008204 <_malloc_trim_r+0x9c>)
 8008178:	4680      	mov	r8, r0
 800817a:	4628      	mov	r0, r5
 800817c:	f000 fb60 	bl	8008840 <__malloc_lock>
 8008180:	68bb      	ldr	r3, [r7, #8]
 8008182:	685e      	ldr	r6, [r3, #4]
 8008184:	f026 0603 	bic.w	r6, r6, #3
 8008188:	1b34      	subs	r4, r6, r4
 800818a:	3c11      	subs	r4, #17
 800818c:	4444      	add	r4, r8
 800818e:	fbb4 f4f8 	udiv	r4, r4, r8
 8008192:	3c01      	subs	r4, #1
 8008194:	fb08 f404 	mul.w	r4, r8, r4
 8008198:	45a0      	cmp	r8, r4
 800819a:	dd05      	ble.n	80081a8 <_malloc_trim_r+0x40>
 800819c:	4628      	mov	r0, r5
 800819e:	f000 fb55 	bl	800884c <__malloc_unlock>
 80081a2:	2000      	movs	r0, #0
 80081a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081a8:	2100      	movs	r1, #0
 80081aa:	4628      	mov	r0, r5
 80081ac:	f000 fe3a 	bl	8008e24 <_sbrk_r>
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	4433      	add	r3, r6
 80081b4:	4298      	cmp	r0, r3
 80081b6:	d1f1      	bne.n	800819c <_malloc_trim_r+0x34>
 80081b8:	4261      	negs	r1, r4
 80081ba:	4628      	mov	r0, r5
 80081bc:	f000 fe32 	bl	8008e24 <_sbrk_r>
 80081c0:	3001      	adds	r0, #1
 80081c2:	d110      	bne.n	80081e6 <_malloc_trim_r+0x7e>
 80081c4:	2100      	movs	r1, #0
 80081c6:	4628      	mov	r0, r5
 80081c8:	f000 fe2c 	bl	8008e24 <_sbrk_r>
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	1a83      	subs	r3, r0, r2
 80081d0:	2b0f      	cmp	r3, #15
 80081d2:	dde3      	ble.n	800819c <_malloc_trim_r+0x34>
 80081d4:	490c      	ldr	r1, [pc, #48]	; (8008208 <_malloc_trim_r+0xa0>)
 80081d6:	6809      	ldr	r1, [r1, #0]
 80081d8:	1a40      	subs	r0, r0, r1
 80081da:	490c      	ldr	r1, [pc, #48]	; (800820c <_malloc_trim_r+0xa4>)
 80081dc:	f043 0301 	orr.w	r3, r3, #1
 80081e0:	6008      	str	r0, [r1, #0]
 80081e2:	6053      	str	r3, [r2, #4]
 80081e4:	e7da      	b.n	800819c <_malloc_trim_r+0x34>
 80081e6:	68bb      	ldr	r3, [r7, #8]
 80081e8:	4a08      	ldr	r2, [pc, #32]	; (800820c <_malloc_trim_r+0xa4>)
 80081ea:	1b36      	subs	r6, r6, r4
 80081ec:	f046 0601 	orr.w	r6, r6, #1
 80081f0:	605e      	str	r6, [r3, #4]
 80081f2:	6813      	ldr	r3, [r2, #0]
 80081f4:	4628      	mov	r0, r5
 80081f6:	1b1c      	subs	r4, r3, r4
 80081f8:	6014      	str	r4, [r2, #0]
 80081fa:	f000 fb27 	bl	800884c <__malloc_unlock>
 80081fe:	2001      	movs	r0, #1
 8008200:	e7d0      	b.n	80081a4 <_malloc_trim_r+0x3c>
 8008202:	bf00      	nop
 8008204:	20000620 	.word	0x20000620
 8008208:	20000a28 	.word	0x20000a28
 800820c:	20001cec 	.word	0x20001cec

08008210 <_free_r>:
 8008210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008214:	4604      	mov	r4, r0
 8008216:	4688      	mov	r8, r1
 8008218:	2900      	cmp	r1, #0
 800821a:	f000 80ab 	beq.w	8008374 <_free_r+0x164>
 800821e:	f000 fb0f 	bl	8008840 <__malloc_lock>
 8008222:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8008226:	4d54      	ldr	r5, [pc, #336]	; (8008378 <_free_r+0x168>)
 8008228:	f022 0001 	bic.w	r0, r2, #1
 800822c:	f1a8 0308 	sub.w	r3, r8, #8
 8008230:	181f      	adds	r7, r3, r0
 8008232:	68a9      	ldr	r1, [r5, #8]
 8008234:	687e      	ldr	r6, [r7, #4]
 8008236:	42b9      	cmp	r1, r7
 8008238:	f026 0603 	bic.w	r6, r6, #3
 800823c:	f002 0201 	and.w	r2, r2, #1
 8008240:	d11b      	bne.n	800827a <_free_r+0x6a>
 8008242:	4430      	add	r0, r6
 8008244:	b93a      	cbnz	r2, 8008256 <_free_r+0x46>
 8008246:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800824a:	1a9b      	subs	r3, r3, r2
 800824c:	4410      	add	r0, r2
 800824e:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 8008252:	60ca      	str	r2, [r1, #12]
 8008254:	6091      	str	r1, [r2, #8]
 8008256:	f040 0201 	orr.w	r2, r0, #1
 800825a:	605a      	str	r2, [r3, #4]
 800825c:	60ab      	str	r3, [r5, #8]
 800825e:	4b47      	ldr	r3, [pc, #284]	; (800837c <_free_r+0x16c>)
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4283      	cmp	r3, r0
 8008264:	d804      	bhi.n	8008270 <_free_r+0x60>
 8008266:	4b46      	ldr	r3, [pc, #280]	; (8008380 <_free_r+0x170>)
 8008268:	4620      	mov	r0, r4
 800826a:	6819      	ldr	r1, [r3, #0]
 800826c:	f7ff ff7c 	bl	8008168 <_malloc_trim_r>
 8008270:	4620      	mov	r0, r4
 8008272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008276:	f000 bae9 	b.w	800884c <__malloc_unlock>
 800827a:	607e      	str	r6, [r7, #4]
 800827c:	2a00      	cmp	r2, #0
 800827e:	d139      	bne.n	80082f4 <_free_r+0xe4>
 8008280:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8008284:	1a5b      	subs	r3, r3, r1
 8008286:	4408      	add	r0, r1
 8008288:	6899      	ldr	r1, [r3, #8]
 800828a:	f105 0c08 	add.w	ip, r5, #8
 800828e:	4561      	cmp	r1, ip
 8008290:	d032      	beq.n	80082f8 <_free_r+0xe8>
 8008292:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8008296:	f8c1 c00c 	str.w	ip, [r1, #12]
 800829a:	f8cc 1008 	str.w	r1, [ip, #8]
 800829e:	19b9      	adds	r1, r7, r6
 80082a0:	6849      	ldr	r1, [r1, #4]
 80082a2:	07c9      	lsls	r1, r1, #31
 80082a4:	d40a      	bmi.n	80082bc <_free_r+0xac>
 80082a6:	4430      	add	r0, r6
 80082a8:	68b9      	ldr	r1, [r7, #8]
 80082aa:	bb3a      	cbnz	r2, 80082fc <_free_r+0xec>
 80082ac:	4e35      	ldr	r6, [pc, #212]	; (8008384 <_free_r+0x174>)
 80082ae:	42b1      	cmp	r1, r6
 80082b0:	d124      	bne.n	80082fc <_free_r+0xec>
 80082b2:	e9c5 3304 	strd	r3, r3, [r5, #16]
 80082b6:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f040 0101 	orr.w	r1, r0, #1
 80082c0:	6059      	str	r1, [r3, #4]
 80082c2:	5018      	str	r0, [r3, r0]
 80082c4:	2a00      	cmp	r2, #0
 80082c6:	d1d3      	bne.n	8008270 <_free_r+0x60>
 80082c8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 80082cc:	d21a      	bcs.n	8008304 <_free_r+0xf4>
 80082ce:	08c0      	lsrs	r0, r0, #3
 80082d0:	1081      	asrs	r1, r0, #2
 80082d2:	2201      	movs	r2, #1
 80082d4:	408a      	lsls	r2, r1
 80082d6:	6869      	ldr	r1, [r5, #4]
 80082d8:	3001      	adds	r0, #1
 80082da:	430a      	orrs	r2, r1
 80082dc:	606a      	str	r2, [r5, #4]
 80082de:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80082e2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80082e6:	3a08      	subs	r2, #8
 80082e8:	e9c3 1202 	strd	r1, r2, [r3, #8]
 80082ec:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80082f0:	60cb      	str	r3, [r1, #12]
 80082f2:	e7bd      	b.n	8008270 <_free_r+0x60>
 80082f4:	2200      	movs	r2, #0
 80082f6:	e7d2      	b.n	800829e <_free_r+0x8e>
 80082f8:	2201      	movs	r2, #1
 80082fa:	e7d0      	b.n	800829e <_free_r+0x8e>
 80082fc:	68fe      	ldr	r6, [r7, #12]
 80082fe:	60ce      	str	r6, [r1, #12]
 8008300:	60b1      	str	r1, [r6, #8]
 8008302:	e7db      	b.n	80082bc <_free_r+0xac>
 8008304:	0a42      	lsrs	r2, r0, #9
 8008306:	2a04      	cmp	r2, #4
 8008308:	d813      	bhi.n	8008332 <_free_r+0x122>
 800830a:	0982      	lsrs	r2, r0, #6
 800830c:	3238      	adds	r2, #56	; 0x38
 800830e:	1c51      	adds	r1, r2, #1
 8008310:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8008314:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8008318:	428e      	cmp	r6, r1
 800831a:	d124      	bne.n	8008366 <_free_r+0x156>
 800831c:	2001      	movs	r0, #1
 800831e:	1092      	asrs	r2, r2, #2
 8008320:	fa00 f202 	lsl.w	r2, r0, r2
 8008324:	6868      	ldr	r0, [r5, #4]
 8008326:	4302      	orrs	r2, r0
 8008328:	606a      	str	r2, [r5, #4]
 800832a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800832e:	60b3      	str	r3, [r6, #8]
 8008330:	e7de      	b.n	80082f0 <_free_r+0xe0>
 8008332:	2a14      	cmp	r2, #20
 8008334:	d801      	bhi.n	800833a <_free_r+0x12a>
 8008336:	325b      	adds	r2, #91	; 0x5b
 8008338:	e7e9      	b.n	800830e <_free_r+0xfe>
 800833a:	2a54      	cmp	r2, #84	; 0x54
 800833c:	d802      	bhi.n	8008344 <_free_r+0x134>
 800833e:	0b02      	lsrs	r2, r0, #12
 8008340:	326e      	adds	r2, #110	; 0x6e
 8008342:	e7e4      	b.n	800830e <_free_r+0xfe>
 8008344:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8008348:	d802      	bhi.n	8008350 <_free_r+0x140>
 800834a:	0bc2      	lsrs	r2, r0, #15
 800834c:	3277      	adds	r2, #119	; 0x77
 800834e:	e7de      	b.n	800830e <_free_r+0xfe>
 8008350:	f240 5154 	movw	r1, #1364	; 0x554
 8008354:	428a      	cmp	r2, r1
 8008356:	bf9a      	itte	ls
 8008358:	0c82      	lsrls	r2, r0, #18
 800835a:	327c      	addls	r2, #124	; 0x7c
 800835c:	227e      	movhi	r2, #126	; 0x7e
 800835e:	e7d6      	b.n	800830e <_free_r+0xfe>
 8008360:	6889      	ldr	r1, [r1, #8]
 8008362:	428e      	cmp	r6, r1
 8008364:	d004      	beq.n	8008370 <_free_r+0x160>
 8008366:	684a      	ldr	r2, [r1, #4]
 8008368:	f022 0203 	bic.w	r2, r2, #3
 800836c:	4282      	cmp	r2, r0
 800836e:	d8f7      	bhi.n	8008360 <_free_r+0x150>
 8008370:	68ce      	ldr	r6, [r1, #12]
 8008372:	e7da      	b.n	800832a <_free_r+0x11a>
 8008374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008378:	20000620 	.word	0x20000620
 800837c:	20000a2c 	.word	0x20000a2c
 8008380:	20001d1c 	.word	0x20001d1c
 8008384:	20000628 	.word	0x20000628

08008388 <__locale_ctype_ptr_l>:
 8008388:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800838c:	4770      	bx	lr
	...

08008390 <_localeconv_r>:
 8008390:	4b04      	ldr	r3, [pc, #16]	; (80083a4 <_localeconv_r+0x14>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008396:	4b04      	ldr	r3, [pc, #16]	; (80083a8 <_localeconv_r+0x18>)
 8008398:	2800      	cmp	r0, #0
 800839a:	bf08      	it	eq
 800839c:	4618      	moveq	r0, r3
 800839e:	30f0      	adds	r0, #240	; 0xf0
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	20000080 	.word	0x20000080
 80083a8:	200004b4 	.word	0x200004b4

080083ac <__retarget_lock_acquire_recursive>:
 80083ac:	4770      	bx	lr

080083ae <__retarget_lock_release_recursive>:
 80083ae:	4770      	bx	lr

080083b0 <_malloc_r>:
 80083b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083b4:	f101 050b 	add.w	r5, r1, #11
 80083b8:	2d16      	cmp	r5, #22
 80083ba:	4606      	mov	r6, r0
 80083bc:	d906      	bls.n	80083cc <_malloc_r+0x1c>
 80083be:	f035 0507 	bics.w	r5, r5, #7
 80083c2:	d504      	bpl.n	80083ce <_malloc_r+0x1e>
 80083c4:	230c      	movs	r3, #12
 80083c6:	6033      	str	r3, [r6, #0]
 80083c8:	2400      	movs	r4, #0
 80083ca:	e1a8      	b.n	800871e <_malloc_r+0x36e>
 80083cc:	2510      	movs	r5, #16
 80083ce:	428d      	cmp	r5, r1
 80083d0:	d3f8      	bcc.n	80083c4 <_malloc_r+0x14>
 80083d2:	4630      	mov	r0, r6
 80083d4:	f000 fa34 	bl	8008840 <__malloc_lock>
 80083d8:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 80083dc:	4fc0      	ldr	r7, [pc, #768]	; (80086e0 <_malloc_r+0x330>)
 80083de:	d238      	bcs.n	8008452 <_malloc_r+0xa2>
 80083e0:	f105 0208 	add.w	r2, r5, #8
 80083e4:	443a      	add	r2, r7
 80083e6:	f1a2 0108 	sub.w	r1, r2, #8
 80083ea:	6854      	ldr	r4, [r2, #4]
 80083ec:	428c      	cmp	r4, r1
 80083ee:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 80083f2:	d102      	bne.n	80083fa <_malloc_r+0x4a>
 80083f4:	68d4      	ldr	r4, [r2, #12]
 80083f6:	42a2      	cmp	r2, r4
 80083f8:	d010      	beq.n	800841c <_malloc_r+0x6c>
 80083fa:	6863      	ldr	r3, [r4, #4]
 80083fc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8008400:	f023 0303 	bic.w	r3, r3, #3
 8008404:	60ca      	str	r2, [r1, #12]
 8008406:	4423      	add	r3, r4
 8008408:	6091      	str	r1, [r2, #8]
 800840a:	685a      	ldr	r2, [r3, #4]
 800840c:	f042 0201 	orr.w	r2, r2, #1
 8008410:	605a      	str	r2, [r3, #4]
 8008412:	4630      	mov	r0, r6
 8008414:	f000 fa1a 	bl	800884c <__malloc_unlock>
 8008418:	3408      	adds	r4, #8
 800841a:	e180      	b.n	800871e <_malloc_r+0x36e>
 800841c:	3302      	adds	r3, #2
 800841e:	4ab1      	ldr	r2, [pc, #708]	; (80086e4 <_malloc_r+0x334>)
 8008420:	693c      	ldr	r4, [r7, #16]
 8008422:	4294      	cmp	r4, r2
 8008424:	4611      	mov	r1, r2
 8008426:	d075      	beq.n	8008514 <_malloc_r+0x164>
 8008428:	6860      	ldr	r0, [r4, #4]
 800842a:	f020 0c03 	bic.w	ip, r0, #3
 800842e:	ebac 0005 	sub.w	r0, ip, r5
 8008432:	280f      	cmp	r0, #15
 8008434:	dd48      	ble.n	80084c8 <_malloc_r+0x118>
 8008436:	1963      	adds	r3, r4, r5
 8008438:	f045 0501 	orr.w	r5, r5, #1
 800843c:	6065      	str	r5, [r4, #4]
 800843e:	e9c7 3304 	strd	r3, r3, [r7, #16]
 8008442:	e9c3 2202 	strd	r2, r2, [r3, #8]
 8008446:	f040 0201 	orr.w	r2, r0, #1
 800844a:	605a      	str	r2, [r3, #4]
 800844c:	f844 000c 	str.w	r0, [r4, ip]
 8008450:	e7df      	b.n	8008412 <_malloc_r+0x62>
 8008452:	0a6b      	lsrs	r3, r5, #9
 8008454:	d02a      	beq.n	80084ac <_malloc_r+0xfc>
 8008456:	2b04      	cmp	r3, #4
 8008458:	d812      	bhi.n	8008480 <_malloc_r+0xd0>
 800845a:	09ab      	lsrs	r3, r5, #6
 800845c:	3338      	adds	r3, #56	; 0x38
 800845e:	1c5a      	adds	r2, r3, #1
 8008460:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 8008464:	f1a2 0c08 	sub.w	ip, r2, #8
 8008468:	6854      	ldr	r4, [r2, #4]
 800846a:	4564      	cmp	r4, ip
 800846c:	d006      	beq.n	800847c <_malloc_r+0xcc>
 800846e:	6862      	ldr	r2, [r4, #4]
 8008470:	f022 0203 	bic.w	r2, r2, #3
 8008474:	1b50      	subs	r0, r2, r5
 8008476:	280f      	cmp	r0, #15
 8008478:	dd1c      	ble.n	80084b4 <_malloc_r+0x104>
 800847a:	3b01      	subs	r3, #1
 800847c:	3301      	adds	r3, #1
 800847e:	e7ce      	b.n	800841e <_malloc_r+0x6e>
 8008480:	2b14      	cmp	r3, #20
 8008482:	d801      	bhi.n	8008488 <_malloc_r+0xd8>
 8008484:	335b      	adds	r3, #91	; 0x5b
 8008486:	e7ea      	b.n	800845e <_malloc_r+0xae>
 8008488:	2b54      	cmp	r3, #84	; 0x54
 800848a:	d802      	bhi.n	8008492 <_malloc_r+0xe2>
 800848c:	0b2b      	lsrs	r3, r5, #12
 800848e:	336e      	adds	r3, #110	; 0x6e
 8008490:	e7e5      	b.n	800845e <_malloc_r+0xae>
 8008492:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8008496:	d802      	bhi.n	800849e <_malloc_r+0xee>
 8008498:	0beb      	lsrs	r3, r5, #15
 800849a:	3377      	adds	r3, #119	; 0x77
 800849c:	e7df      	b.n	800845e <_malloc_r+0xae>
 800849e:	f240 5254 	movw	r2, #1364	; 0x554
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d804      	bhi.n	80084b0 <_malloc_r+0x100>
 80084a6:	0cab      	lsrs	r3, r5, #18
 80084a8:	337c      	adds	r3, #124	; 0x7c
 80084aa:	e7d8      	b.n	800845e <_malloc_r+0xae>
 80084ac:	233f      	movs	r3, #63	; 0x3f
 80084ae:	e7d6      	b.n	800845e <_malloc_r+0xae>
 80084b0:	237e      	movs	r3, #126	; 0x7e
 80084b2:	e7d4      	b.n	800845e <_malloc_r+0xae>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	68e1      	ldr	r1, [r4, #12]
 80084b8:	db04      	blt.n	80084c4 <_malloc_r+0x114>
 80084ba:	68a3      	ldr	r3, [r4, #8]
 80084bc:	60d9      	str	r1, [r3, #12]
 80084be:	608b      	str	r3, [r1, #8]
 80084c0:	18a3      	adds	r3, r4, r2
 80084c2:	e7a2      	b.n	800840a <_malloc_r+0x5a>
 80084c4:	460c      	mov	r4, r1
 80084c6:	e7d0      	b.n	800846a <_malloc_r+0xba>
 80084c8:	2800      	cmp	r0, #0
 80084ca:	e9c7 2204 	strd	r2, r2, [r7, #16]
 80084ce:	db07      	blt.n	80084e0 <_malloc_r+0x130>
 80084d0:	44a4      	add	ip, r4
 80084d2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 80084d6:	f043 0301 	orr.w	r3, r3, #1
 80084da:	f8cc 3004 	str.w	r3, [ip, #4]
 80084de:	e798      	b.n	8008412 <_malloc_r+0x62>
 80084e0:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f080 8099 	bcs.w	800861c <_malloc_r+0x26c>
 80084ea:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 80084ee:	ea4f 0eac 	mov.w	lr, ip, asr #2
 80084f2:	2201      	movs	r2, #1
 80084f4:	f10c 0c01 	add.w	ip, ip, #1
 80084f8:	fa02 f20e 	lsl.w	r2, r2, lr
 80084fc:	4310      	orrs	r0, r2
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 8008504:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 8008508:	3a08      	subs	r2, #8
 800850a:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800850e:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 8008512:	60c4      	str	r4, [r0, #12]
 8008514:	2001      	movs	r0, #1
 8008516:	109a      	asrs	r2, r3, #2
 8008518:	fa00 f202 	lsl.w	r2, r0, r2
 800851c:	6878      	ldr	r0, [r7, #4]
 800851e:	4290      	cmp	r0, r2
 8008520:	d326      	bcc.n	8008570 <_malloc_r+0x1c0>
 8008522:	4210      	tst	r0, r2
 8008524:	d106      	bne.n	8008534 <_malloc_r+0x184>
 8008526:	f023 0303 	bic.w	r3, r3, #3
 800852a:	0052      	lsls	r2, r2, #1
 800852c:	4210      	tst	r0, r2
 800852e:	f103 0304 	add.w	r3, r3, #4
 8008532:	d0fa      	beq.n	800852a <_malloc_r+0x17a>
 8008534:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 8008538:	46e1      	mov	r9, ip
 800853a:	4698      	mov	r8, r3
 800853c:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8008540:	454c      	cmp	r4, r9
 8008542:	f040 80af 	bne.w	80086a4 <_malloc_r+0x2f4>
 8008546:	f108 0801 	add.w	r8, r8, #1
 800854a:	f018 0f03 	tst.w	r8, #3
 800854e:	f109 0908 	add.w	r9, r9, #8
 8008552:	d1f3      	bne.n	800853c <_malloc_r+0x18c>
 8008554:	0798      	lsls	r0, r3, #30
 8008556:	f040 80e8 	bne.w	800872a <_malloc_r+0x37a>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	ea23 0302 	bic.w	r3, r3, r2
 8008560:	607b      	str	r3, [r7, #4]
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	0052      	lsls	r2, r2, #1
 8008566:	4290      	cmp	r0, r2
 8008568:	d302      	bcc.n	8008570 <_malloc_r+0x1c0>
 800856a:	2a00      	cmp	r2, #0
 800856c:	f040 80ec 	bne.w	8008748 <_malloc_r+0x398>
 8008570:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8008574:	f8da 4004 	ldr.w	r4, [sl, #4]
 8008578:	f024 0203 	bic.w	r2, r4, #3
 800857c:	42aa      	cmp	r2, r5
 800857e:	d303      	bcc.n	8008588 <_malloc_r+0x1d8>
 8008580:	1b53      	subs	r3, r2, r5
 8008582:	2b0f      	cmp	r3, #15
 8008584:	f300 8140 	bgt.w	8008808 <_malloc_r+0x458>
 8008588:	4b57      	ldr	r3, [pc, #348]	; (80086e8 <_malloc_r+0x338>)
 800858a:	9200      	str	r2, [sp, #0]
 800858c:	2008      	movs	r0, #8
 800858e:	681c      	ldr	r4, [r3, #0]
 8008590:	f000 fcd0 	bl	8008f34 <sysconf>
 8008594:	4b55      	ldr	r3, [pc, #340]	; (80086ec <_malloc_r+0x33c>)
 8008596:	9a00      	ldr	r2, [sp, #0]
 8008598:	6819      	ldr	r1, [r3, #0]
 800859a:	3410      	adds	r4, #16
 800859c:	3101      	adds	r1, #1
 800859e:	442c      	add	r4, r5
 80085a0:	bf1f      	itttt	ne
 80085a2:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
 80085a6:	1824      	addne	r4, r4, r0
 80085a8:	4241      	negne	r1, r0
 80085aa:	400c      	andne	r4, r1
 80085ac:	4680      	mov	r8, r0
 80085ae:	4621      	mov	r1, r4
 80085b0:	4630      	mov	r0, r6
 80085b2:	e9cd 2300 	strd	r2, r3, [sp]
 80085b6:	f000 fc35 	bl	8008e24 <_sbrk_r>
 80085ba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80085be:	4683      	mov	fp, r0
 80085c0:	f000 80fb 	beq.w	80087ba <_malloc_r+0x40a>
 80085c4:	9a00      	ldr	r2, [sp, #0]
 80085c6:	9b01      	ldr	r3, [sp, #4]
 80085c8:	eb0a 0102 	add.w	r1, sl, r2
 80085cc:	4281      	cmp	r1, r0
 80085ce:	d902      	bls.n	80085d6 <_malloc_r+0x226>
 80085d0:	45ba      	cmp	sl, r7
 80085d2:	f040 80f2 	bne.w	80087ba <_malloc_r+0x40a>
 80085d6:	f8df 9120 	ldr.w	r9, [pc, #288]	; 80086f8 <_malloc_r+0x348>
 80085da:	f8d9 0000 	ldr.w	r0, [r9]
 80085de:	4559      	cmp	r1, fp
 80085e0:	eb00 0e04 	add.w	lr, r0, r4
 80085e4:	f8c9 e000 	str.w	lr, [r9]
 80085e8:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 80085ec:	f040 80ae 	bne.w	800874c <_malloc_r+0x39c>
 80085f0:	ea11 0f0c 	tst.w	r1, ip
 80085f4:	f040 80aa 	bne.w	800874c <_malloc_r+0x39c>
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4414      	add	r4, r2
 80085fc:	f044 0401 	orr.w	r4, r4, #1
 8008600:	605c      	str	r4, [r3, #4]
 8008602:	4a3b      	ldr	r2, [pc, #236]	; (80086f0 <_malloc_r+0x340>)
 8008604:	f8d9 3000 	ldr.w	r3, [r9]
 8008608:	6811      	ldr	r1, [r2, #0]
 800860a:	428b      	cmp	r3, r1
 800860c:	bf88      	it	hi
 800860e:	6013      	strhi	r3, [r2, #0]
 8008610:	4a38      	ldr	r2, [pc, #224]	; (80086f4 <_malloc_r+0x344>)
 8008612:	6811      	ldr	r1, [r2, #0]
 8008614:	428b      	cmp	r3, r1
 8008616:	bf88      	it	hi
 8008618:	6013      	strhi	r3, [r2, #0]
 800861a:	e0ce      	b.n	80087ba <_malloc_r+0x40a>
 800861c:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8008620:	2a04      	cmp	r2, #4
 8008622:	d818      	bhi.n	8008656 <_malloc_r+0x2a6>
 8008624:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8008628:	3238      	adds	r2, #56	; 0x38
 800862a:	f102 0e01 	add.w	lr, r2, #1
 800862e:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 8008632:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 8008636:	45f0      	cmp	r8, lr
 8008638:	d12b      	bne.n	8008692 <_malloc_r+0x2e2>
 800863a:	1092      	asrs	r2, r2, #2
 800863c:	f04f 0c01 	mov.w	ip, #1
 8008640:	fa0c f202 	lsl.w	r2, ip, r2
 8008644:	4310      	orrs	r0, r2
 8008646:	6078      	str	r0, [r7, #4]
 8008648:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800864c:	f8c8 4008 	str.w	r4, [r8, #8]
 8008650:	f8ce 400c 	str.w	r4, [lr, #12]
 8008654:	e75e      	b.n	8008514 <_malloc_r+0x164>
 8008656:	2a14      	cmp	r2, #20
 8008658:	d801      	bhi.n	800865e <_malloc_r+0x2ae>
 800865a:	325b      	adds	r2, #91	; 0x5b
 800865c:	e7e5      	b.n	800862a <_malloc_r+0x27a>
 800865e:	2a54      	cmp	r2, #84	; 0x54
 8008660:	d803      	bhi.n	800866a <_malloc_r+0x2ba>
 8008662:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8008666:	326e      	adds	r2, #110	; 0x6e
 8008668:	e7df      	b.n	800862a <_malloc_r+0x27a>
 800866a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800866e:	d803      	bhi.n	8008678 <_malloc_r+0x2c8>
 8008670:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8008674:	3277      	adds	r2, #119	; 0x77
 8008676:	e7d8      	b.n	800862a <_malloc_r+0x27a>
 8008678:	f240 5e54 	movw	lr, #1364	; 0x554
 800867c:	4572      	cmp	r2, lr
 800867e:	bf9a      	itte	ls
 8008680:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8008684:	327c      	addls	r2, #124	; 0x7c
 8008686:	227e      	movhi	r2, #126	; 0x7e
 8008688:	e7cf      	b.n	800862a <_malloc_r+0x27a>
 800868a:	f8de e008 	ldr.w	lr, [lr, #8]
 800868e:	45f0      	cmp	r8, lr
 8008690:	d005      	beq.n	800869e <_malloc_r+0x2ee>
 8008692:	f8de 2004 	ldr.w	r2, [lr, #4]
 8008696:	f022 0203 	bic.w	r2, r2, #3
 800869a:	4562      	cmp	r2, ip
 800869c:	d8f5      	bhi.n	800868a <_malloc_r+0x2da>
 800869e:	f8de 800c 	ldr.w	r8, [lr, #12]
 80086a2:	e7d1      	b.n	8008648 <_malloc_r+0x298>
 80086a4:	6860      	ldr	r0, [r4, #4]
 80086a6:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 80086aa:	f020 0003 	bic.w	r0, r0, #3
 80086ae:	eba0 0a05 	sub.w	sl, r0, r5
 80086b2:	f1ba 0f0f 	cmp.w	sl, #15
 80086b6:	dd21      	ble.n	80086fc <_malloc_r+0x34c>
 80086b8:	68a2      	ldr	r2, [r4, #8]
 80086ba:	1963      	adds	r3, r4, r5
 80086bc:	f045 0501 	orr.w	r5, r5, #1
 80086c0:	6065      	str	r5, [r4, #4]
 80086c2:	f8c2 e00c 	str.w	lr, [r2, #12]
 80086c6:	f8ce 2008 	str.w	r2, [lr, #8]
 80086ca:	f04a 0201 	orr.w	r2, sl, #1
 80086ce:	e9c7 3304 	strd	r3, r3, [r7, #16]
 80086d2:	e9c3 1102 	strd	r1, r1, [r3, #8]
 80086d6:	605a      	str	r2, [r3, #4]
 80086d8:	f844 a000 	str.w	sl, [r4, r0]
 80086dc:	e699      	b.n	8008412 <_malloc_r+0x62>
 80086de:	bf00      	nop
 80086e0:	20000620 	.word	0x20000620
 80086e4:	20000628 	.word	0x20000628
 80086e8:	20001d1c 	.word	0x20001d1c
 80086ec:	20000a28 	.word	0x20000a28
 80086f0:	20001d14 	.word	0x20001d14
 80086f4:	20001d18 	.word	0x20001d18
 80086f8:	20001cec 	.word	0x20001cec
 80086fc:	f1ba 0f00 	cmp.w	sl, #0
 8008700:	db11      	blt.n	8008726 <_malloc_r+0x376>
 8008702:	4420      	add	r0, r4
 8008704:	6843      	ldr	r3, [r0, #4]
 8008706:	f043 0301 	orr.w	r3, r3, #1
 800870a:	6043      	str	r3, [r0, #4]
 800870c:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8008710:	4630      	mov	r0, r6
 8008712:	f8c3 e00c 	str.w	lr, [r3, #12]
 8008716:	f8ce 3008 	str.w	r3, [lr, #8]
 800871a:	f000 f897 	bl	800884c <__malloc_unlock>
 800871e:	4620      	mov	r0, r4
 8008720:	b003      	add	sp, #12
 8008722:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008726:	4674      	mov	r4, lr
 8008728:	e70a      	b.n	8008540 <_malloc_r+0x190>
 800872a:	f1ac 0008 	sub.w	r0, ip, #8
 800872e:	f8dc c000 	ldr.w	ip, [ip]
 8008732:	4584      	cmp	ip, r0
 8008734:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8008738:	f43f af0c 	beq.w	8008554 <_malloc_r+0x1a4>
 800873c:	e711      	b.n	8008562 <_malloc_r+0x1b2>
 800873e:	3304      	adds	r3, #4
 8008740:	0052      	lsls	r2, r2, #1
 8008742:	4210      	tst	r0, r2
 8008744:	d0fb      	beq.n	800873e <_malloc_r+0x38e>
 8008746:	e6f5      	b.n	8008534 <_malloc_r+0x184>
 8008748:	4643      	mov	r3, r8
 800874a:	e7fa      	b.n	8008742 <_malloc_r+0x392>
 800874c:	6818      	ldr	r0, [r3, #0]
 800874e:	9200      	str	r2, [sp, #0]
 8008750:	3001      	adds	r0, #1
 8008752:	bf1b      	ittet	ne
 8008754:	ebab 0101 	subne.w	r1, fp, r1
 8008758:	4471      	addne	r1, lr
 800875a:	f8c3 b000 	streq.w	fp, [r3]
 800875e:	f8c9 1000 	strne.w	r1, [r9]
 8008762:	f01b 0307 	ands.w	r3, fp, #7
 8008766:	bf1c      	itt	ne
 8008768:	f1c3 0308 	rsbne	r3, r3, #8
 800876c:	449b      	addne	fp, r3
 800876e:	445c      	add	r4, fp
 8008770:	4498      	add	r8, r3
 8008772:	ea04 030c 	and.w	r3, r4, ip
 8008776:	eba8 0803 	sub.w	r8, r8, r3
 800877a:	4641      	mov	r1, r8
 800877c:	4630      	mov	r0, r6
 800877e:	f000 fb51 	bl	8008e24 <_sbrk_r>
 8008782:	1c43      	adds	r3, r0, #1
 8008784:	bf04      	itt	eq
 8008786:	4658      	moveq	r0, fp
 8008788:	f04f 0800 	moveq.w	r8, #0
 800878c:	f8d9 3000 	ldr.w	r3, [r9]
 8008790:	f8c7 b008 	str.w	fp, [r7, #8]
 8008794:	eba0 000b 	sub.w	r0, r0, fp
 8008798:	4440      	add	r0, r8
 800879a:	4443      	add	r3, r8
 800879c:	f040 0001 	orr.w	r0, r0, #1
 80087a0:	45ba      	cmp	sl, r7
 80087a2:	9a00      	ldr	r2, [sp, #0]
 80087a4:	f8c9 3000 	str.w	r3, [r9]
 80087a8:	f8cb 0004 	str.w	r0, [fp, #4]
 80087ac:	f43f af29 	beq.w	8008602 <_malloc_r+0x252>
 80087b0:	2a0f      	cmp	r2, #15
 80087b2:	d810      	bhi.n	80087d6 <_malloc_r+0x426>
 80087b4:	2301      	movs	r3, #1
 80087b6:	f8cb 3004 	str.w	r3, [fp, #4]
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	685a      	ldr	r2, [r3, #4]
 80087be:	f022 0203 	bic.w	r2, r2, #3
 80087c2:	42aa      	cmp	r2, r5
 80087c4:	eba2 0305 	sub.w	r3, r2, r5
 80087c8:	d301      	bcc.n	80087ce <_malloc_r+0x41e>
 80087ca:	2b0f      	cmp	r3, #15
 80087cc:	dc1c      	bgt.n	8008808 <_malloc_r+0x458>
 80087ce:	4630      	mov	r0, r6
 80087d0:	f000 f83c 	bl	800884c <__malloc_unlock>
 80087d4:	e5f8      	b.n	80083c8 <_malloc_r+0x18>
 80087d6:	f8da 3004 	ldr.w	r3, [sl, #4]
 80087da:	f1a2 040c 	sub.w	r4, r2, #12
 80087de:	f024 0407 	bic.w	r4, r4, #7
 80087e2:	f003 0301 	and.w	r3, r3, #1
 80087e6:	4323      	orrs	r3, r4
 80087e8:	f8ca 3004 	str.w	r3, [sl, #4]
 80087ec:	2205      	movs	r2, #5
 80087ee:	eb0a 0304 	add.w	r3, sl, r4
 80087f2:	2c0f      	cmp	r4, #15
 80087f4:	e9c3 2201 	strd	r2, r2, [r3, #4]
 80087f8:	f67f af03 	bls.w	8008602 <_malloc_r+0x252>
 80087fc:	f10a 0108 	add.w	r1, sl, #8
 8008800:	4630      	mov	r0, r6
 8008802:	f7ff fd05 	bl	8008210 <_free_r>
 8008806:	e6fc      	b.n	8008602 <_malloc_r+0x252>
 8008808:	68bc      	ldr	r4, [r7, #8]
 800880a:	f045 0201 	orr.w	r2, r5, #1
 800880e:	4425      	add	r5, r4
 8008810:	f043 0301 	orr.w	r3, r3, #1
 8008814:	6062      	str	r2, [r4, #4]
 8008816:	60bd      	str	r5, [r7, #8]
 8008818:	606b      	str	r3, [r5, #4]
 800881a:	e5fa      	b.n	8008412 <_malloc_r+0x62>

0800881c <__ascii_mbtowc>:
 800881c:	b082      	sub	sp, #8
 800881e:	b901      	cbnz	r1, 8008822 <__ascii_mbtowc+0x6>
 8008820:	a901      	add	r1, sp, #4
 8008822:	b142      	cbz	r2, 8008836 <__ascii_mbtowc+0x1a>
 8008824:	b14b      	cbz	r3, 800883a <__ascii_mbtowc+0x1e>
 8008826:	7813      	ldrb	r3, [r2, #0]
 8008828:	600b      	str	r3, [r1, #0]
 800882a:	7812      	ldrb	r2, [r2, #0]
 800882c:	1c10      	adds	r0, r2, #0
 800882e:	bf18      	it	ne
 8008830:	2001      	movne	r0, #1
 8008832:	b002      	add	sp, #8
 8008834:	4770      	bx	lr
 8008836:	4610      	mov	r0, r2
 8008838:	e7fb      	b.n	8008832 <__ascii_mbtowc+0x16>
 800883a:	f06f 0001 	mvn.w	r0, #1
 800883e:	e7f8      	b.n	8008832 <__ascii_mbtowc+0x16>

08008840 <__malloc_lock>:
 8008840:	4801      	ldr	r0, [pc, #4]	; (8008848 <__malloc_lock+0x8>)
 8008842:	f7ff bdb3 	b.w	80083ac <__retarget_lock_acquire_recursive>
 8008846:	bf00      	nop
 8008848:	2000394c 	.word	0x2000394c

0800884c <__malloc_unlock>:
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <__malloc_unlock+0x8>)
 800884e:	f7ff bdae 	b.w	80083ae <__retarget_lock_release_recursive>
 8008852:	bf00      	nop
 8008854:	2000394c 	.word	0x2000394c

08008858 <_Balloc>:
 8008858:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800885a:	b570      	push	{r4, r5, r6, lr}
 800885c:	4605      	mov	r5, r0
 800885e:	460c      	mov	r4, r1
 8008860:	b17b      	cbz	r3, 8008882 <_Balloc+0x2a>
 8008862:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8008864:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8008868:	b9a0      	cbnz	r0, 8008894 <_Balloc+0x3c>
 800886a:	2101      	movs	r1, #1
 800886c:	fa01 f604 	lsl.w	r6, r1, r4
 8008870:	1d72      	adds	r2, r6, #5
 8008872:	0092      	lsls	r2, r2, #2
 8008874:	4628      	mov	r0, r5
 8008876:	f000 fbcd 	bl	8009014 <_calloc_r>
 800887a:	b148      	cbz	r0, 8008890 <_Balloc+0x38>
 800887c:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8008880:	e00b      	b.n	800889a <_Balloc+0x42>
 8008882:	2221      	movs	r2, #33	; 0x21
 8008884:	2104      	movs	r1, #4
 8008886:	f000 fbc5 	bl	8009014 <_calloc_r>
 800888a:	64e8      	str	r0, [r5, #76]	; 0x4c
 800888c:	2800      	cmp	r0, #0
 800888e:	d1e8      	bne.n	8008862 <_Balloc+0xa>
 8008890:	2000      	movs	r0, #0
 8008892:	bd70      	pop	{r4, r5, r6, pc}
 8008894:	6802      	ldr	r2, [r0, #0]
 8008896:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800889a:	2300      	movs	r3, #0
 800889c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80088a0:	e7f7      	b.n	8008892 <_Balloc+0x3a>

080088a2 <_Bfree>:
 80088a2:	b131      	cbz	r1, 80088b2 <_Bfree+0x10>
 80088a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80088a6:	684a      	ldr	r2, [r1, #4]
 80088a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80088ac:	6008      	str	r0, [r1, #0]
 80088ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80088b2:	4770      	bx	lr

080088b4 <__multadd>:
 80088b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b8:	690d      	ldr	r5, [r1, #16]
 80088ba:	461f      	mov	r7, r3
 80088bc:	4606      	mov	r6, r0
 80088be:	460c      	mov	r4, r1
 80088c0:	f101 0c14 	add.w	ip, r1, #20
 80088c4:	2300      	movs	r3, #0
 80088c6:	f8dc 0000 	ldr.w	r0, [ip]
 80088ca:	b281      	uxth	r1, r0
 80088cc:	fb02 7101 	mla	r1, r2, r1, r7
 80088d0:	0c0f      	lsrs	r7, r1, #16
 80088d2:	0c00      	lsrs	r0, r0, #16
 80088d4:	fb02 7000 	mla	r0, r2, r0, r7
 80088d8:	b289      	uxth	r1, r1
 80088da:	3301      	adds	r3, #1
 80088dc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80088e0:	429d      	cmp	r5, r3
 80088e2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80088e6:	f84c 1b04 	str.w	r1, [ip], #4
 80088ea:	dcec      	bgt.n	80088c6 <__multadd+0x12>
 80088ec:	b1d7      	cbz	r7, 8008924 <__multadd+0x70>
 80088ee:	68a3      	ldr	r3, [r4, #8]
 80088f0:	42ab      	cmp	r3, r5
 80088f2:	dc12      	bgt.n	800891a <__multadd+0x66>
 80088f4:	6861      	ldr	r1, [r4, #4]
 80088f6:	4630      	mov	r0, r6
 80088f8:	3101      	adds	r1, #1
 80088fa:	f7ff ffad 	bl	8008858 <_Balloc>
 80088fe:	6922      	ldr	r2, [r4, #16]
 8008900:	3202      	adds	r2, #2
 8008902:	f104 010c 	add.w	r1, r4, #12
 8008906:	4680      	mov	r8, r0
 8008908:	0092      	lsls	r2, r2, #2
 800890a:	300c      	adds	r0, #12
 800890c:	f7fd fabe 	bl	8005e8c <memcpy>
 8008910:	4621      	mov	r1, r4
 8008912:	4630      	mov	r0, r6
 8008914:	f7ff ffc5 	bl	80088a2 <_Bfree>
 8008918:	4644      	mov	r4, r8
 800891a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800891e:	3501      	adds	r5, #1
 8008920:	615f      	str	r7, [r3, #20]
 8008922:	6125      	str	r5, [r4, #16]
 8008924:	4620      	mov	r0, r4
 8008926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800892a <__hi0bits>:
 800892a:	0c02      	lsrs	r2, r0, #16
 800892c:	0412      	lsls	r2, r2, #16
 800892e:	4603      	mov	r3, r0
 8008930:	b9b2      	cbnz	r2, 8008960 <__hi0bits+0x36>
 8008932:	0403      	lsls	r3, r0, #16
 8008934:	2010      	movs	r0, #16
 8008936:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800893a:	bf04      	itt	eq
 800893c:	021b      	lsleq	r3, r3, #8
 800893e:	3008      	addeq	r0, #8
 8008940:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008944:	bf04      	itt	eq
 8008946:	011b      	lsleq	r3, r3, #4
 8008948:	3004      	addeq	r0, #4
 800894a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800894e:	bf04      	itt	eq
 8008950:	009b      	lsleq	r3, r3, #2
 8008952:	3002      	addeq	r0, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	db06      	blt.n	8008966 <__hi0bits+0x3c>
 8008958:	005b      	lsls	r3, r3, #1
 800895a:	d503      	bpl.n	8008964 <__hi0bits+0x3a>
 800895c:	3001      	adds	r0, #1
 800895e:	4770      	bx	lr
 8008960:	2000      	movs	r0, #0
 8008962:	e7e8      	b.n	8008936 <__hi0bits+0xc>
 8008964:	2020      	movs	r0, #32
 8008966:	4770      	bx	lr

08008968 <__lo0bits>:
 8008968:	6803      	ldr	r3, [r0, #0]
 800896a:	f013 0207 	ands.w	r2, r3, #7
 800896e:	4601      	mov	r1, r0
 8008970:	d00b      	beq.n	800898a <__lo0bits+0x22>
 8008972:	07da      	lsls	r2, r3, #31
 8008974:	d423      	bmi.n	80089be <__lo0bits+0x56>
 8008976:	0798      	lsls	r0, r3, #30
 8008978:	bf49      	itett	mi
 800897a:	085b      	lsrmi	r3, r3, #1
 800897c:	089b      	lsrpl	r3, r3, #2
 800897e:	2001      	movmi	r0, #1
 8008980:	600b      	strmi	r3, [r1, #0]
 8008982:	bf5c      	itt	pl
 8008984:	600b      	strpl	r3, [r1, #0]
 8008986:	2002      	movpl	r0, #2
 8008988:	4770      	bx	lr
 800898a:	b298      	uxth	r0, r3
 800898c:	b9a8      	cbnz	r0, 80089ba <__lo0bits+0x52>
 800898e:	0c1b      	lsrs	r3, r3, #16
 8008990:	2010      	movs	r0, #16
 8008992:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008996:	bf04      	itt	eq
 8008998:	0a1b      	lsreq	r3, r3, #8
 800899a:	3008      	addeq	r0, #8
 800899c:	071a      	lsls	r2, r3, #28
 800899e:	bf04      	itt	eq
 80089a0:	091b      	lsreq	r3, r3, #4
 80089a2:	3004      	addeq	r0, #4
 80089a4:	079a      	lsls	r2, r3, #30
 80089a6:	bf04      	itt	eq
 80089a8:	089b      	lsreq	r3, r3, #2
 80089aa:	3002      	addeq	r0, #2
 80089ac:	07da      	lsls	r2, r3, #31
 80089ae:	d402      	bmi.n	80089b6 <__lo0bits+0x4e>
 80089b0:	085b      	lsrs	r3, r3, #1
 80089b2:	d006      	beq.n	80089c2 <__lo0bits+0x5a>
 80089b4:	3001      	adds	r0, #1
 80089b6:	600b      	str	r3, [r1, #0]
 80089b8:	4770      	bx	lr
 80089ba:	4610      	mov	r0, r2
 80089bc:	e7e9      	b.n	8008992 <__lo0bits+0x2a>
 80089be:	2000      	movs	r0, #0
 80089c0:	4770      	bx	lr
 80089c2:	2020      	movs	r0, #32
 80089c4:	4770      	bx	lr

080089c6 <__i2b>:
 80089c6:	b510      	push	{r4, lr}
 80089c8:	460c      	mov	r4, r1
 80089ca:	2101      	movs	r1, #1
 80089cc:	f7ff ff44 	bl	8008858 <_Balloc>
 80089d0:	2201      	movs	r2, #1
 80089d2:	6144      	str	r4, [r0, #20]
 80089d4:	6102      	str	r2, [r0, #16]
 80089d6:	bd10      	pop	{r4, pc}

080089d8 <__multiply>:
 80089d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089dc:	4614      	mov	r4, r2
 80089de:	690a      	ldr	r2, [r1, #16]
 80089e0:	6923      	ldr	r3, [r4, #16]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	bfb8      	it	lt
 80089e6:	460b      	movlt	r3, r1
 80089e8:	4688      	mov	r8, r1
 80089ea:	bfbc      	itt	lt
 80089ec:	46a0      	movlt	r8, r4
 80089ee:	461c      	movlt	r4, r3
 80089f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80089f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80089f8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008a00:	eb07 0609 	add.w	r6, r7, r9
 8008a04:	42b3      	cmp	r3, r6
 8008a06:	bfb8      	it	lt
 8008a08:	3101      	addlt	r1, #1
 8008a0a:	f7ff ff25 	bl	8008858 <_Balloc>
 8008a0e:	f100 0514 	add.w	r5, r0, #20
 8008a12:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008a16:	462b      	mov	r3, r5
 8008a18:	2200      	movs	r2, #0
 8008a1a:	4573      	cmp	r3, lr
 8008a1c:	d316      	bcc.n	8008a4c <__multiply+0x74>
 8008a1e:	f104 0214 	add.w	r2, r4, #20
 8008a22:	f108 0114 	add.w	r1, r8, #20
 8008a26:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008a2a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008a2e:	9300      	str	r3, [sp, #0]
 8008a30:	9b00      	ldr	r3, [sp, #0]
 8008a32:	9201      	str	r2, [sp, #4]
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d80c      	bhi.n	8008a52 <__multiply+0x7a>
 8008a38:	2e00      	cmp	r6, #0
 8008a3a:	dd03      	ble.n	8008a44 <__multiply+0x6c>
 8008a3c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d05d      	beq.n	8008b00 <__multiply+0x128>
 8008a44:	6106      	str	r6, [r0, #16]
 8008a46:	b003      	add	sp, #12
 8008a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4c:	f843 2b04 	str.w	r2, [r3], #4
 8008a50:	e7e3      	b.n	8008a1a <__multiply+0x42>
 8008a52:	f8b2 b000 	ldrh.w	fp, [r2]
 8008a56:	f1bb 0f00 	cmp.w	fp, #0
 8008a5a:	d023      	beq.n	8008aa4 <__multiply+0xcc>
 8008a5c:	4689      	mov	r9, r1
 8008a5e:	46ac      	mov	ip, r5
 8008a60:	f04f 0800 	mov.w	r8, #0
 8008a64:	f859 4b04 	ldr.w	r4, [r9], #4
 8008a68:	f8dc a000 	ldr.w	sl, [ip]
 8008a6c:	b2a3      	uxth	r3, r4
 8008a6e:	fa1f fa8a 	uxth.w	sl, sl
 8008a72:	fb0b a303 	mla	r3, fp, r3, sl
 8008a76:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8008a7a:	f8dc 4000 	ldr.w	r4, [ip]
 8008a7e:	4443      	add	r3, r8
 8008a80:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008a84:	fb0b 840a 	mla	r4, fp, sl, r8
 8008a88:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8008a8c:	46e2      	mov	sl, ip
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008a94:	454f      	cmp	r7, r9
 8008a96:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8008a9a:	f84a 3b04 	str.w	r3, [sl], #4
 8008a9e:	d82b      	bhi.n	8008af8 <__multiply+0x120>
 8008aa0:	f8cc 8004 	str.w	r8, [ip, #4]
 8008aa4:	9b01      	ldr	r3, [sp, #4]
 8008aa6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008aaa:	3204      	adds	r2, #4
 8008aac:	f1ba 0f00 	cmp.w	sl, #0
 8008ab0:	d020      	beq.n	8008af4 <__multiply+0x11c>
 8008ab2:	682b      	ldr	r3, [r5, #0]
 8008ab4:	4689      	mov	r9, r1
 8008ab6:	46a8      	mov	r8, r5
 8008ab8:	f04f 0b00 	mov.w	fp, #0
 8008abc:	f8b9 c000 	ldrh.w	ip, [r9]
 8008ac0:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8008ac4:	fb0a 440c 	mla	r4, sl, ip, r4
 8008ac8:	445c      	add	r4, fp
 8008aca:	46c4      	mov	ip, r8
 8008acc:	b29b      	uxth	r3, r3
 8008ace:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8008ad2:	f84c 3b04 	str.w	r3, [ip], #4
 8008ad6:	f859 3b04 	ldr.w	r3, [r9], #4
 8008ada:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008ade:	0c1b      	lsrs	r3, r3, #16
 8008ae0:	fb0a b303 	mla	r3, sl, r3, fp
 8008ae4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008ae8:	454f      	cmp	r7, r9
 8008aea:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008aee:	d805      	bhi.n	8008afc <__multiply+0x124>
 8008af0:	f8c8 3004 	str.w	r3, [r8, #4]
 8008af4:	3504      	adds	r5, #4
 8008af6:	e79b      	b.n	8008a30 <__multiply+0x58>
 8008af8:	46d4      	mov	ip, sl
 8008afa:	e7b3      	b.n	8008a64 <__multiply+0x8c>
 8008afc:	46e0      	mov	r8, ip
 8008afe:	e7dd      	b.n	8008abc <__multiply+0xe4>
 8008b00:	3e01      	subs	r6, #1
 8008b02:	e799      	b.n	8008a38 <__multiply+0x60>

08008b04 <__pow5mult>:
 8008b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b08:	4615      	mov	r5, r2
 8008b0a:	f012 0203 	ands.w	r2, r2, #3
 8008b0e:	4606      	mov	r6, r0
 8008b10:	460f      	mov	r7, r1
 8008b12:	d007      	beq.n	8008b24 <__pow5mult+0x20>
 8008b14:	3a01      	subs	r2, #1
 8008b16:	4c1a      	ldr	r4, [pc, #104]	; (8008b80 <__pow5mult+0x7c>)
 8008b18:	2300      	movs	r3, #0
 8008b1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b1e:	f7ff fec9 	bl	80088b4 <__multadd>
 8008b22:	4607      	mov	r7, r0
 8008b24:	10ad      	asrs	r5, r5, #2
 8008b26:	d027      	beq.n	8008b78 <__pow5mult+0x74>
 8008b28:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8008b2a:	b944      	cbnz	r4, 8008b3e <__pow5mult+0x3a>
 8008b2c:	f240 2171 	movw	r1, #625	; 0x271
 8008b30:	4630      	mov	r0, r6
 8008b32:	f7ff ff48 	bl	80089c6 <__i2b>
 8008b36:	2300      	movs	r3, #0
 8008b38:	64b0      	str	r0, [r6, #72]	; 0x48
 8008b3a:	4604      	mov	r4, r0
 8008b3c:	6003      	str	r3, [r0, #0]
 8008b3e:	f04f 0800 	mov.w	r8, #0
 8008b42:	07eb      	lsls	r3, r5, #31
 8008b44:	d50a      	bpl.n	8008b5c <__pow5mult+0x58>
 8008b46:	4639      	mov	r1, r7
 8008b48:	4622      	mov	r2, r4
 8008b4a:	4630      	mov	r0, r6
 8008b4c:	f7ff ff44 	bl	80089d8 <__multiply>
 8008b50:	4639      	mov	r1, r7
 8008b52:	4681      	mov	r9, r0
 8008b54:	4630      	mov	r0, r6
 8008b56:	f7ff fea4 	bl	80088a2 <_Bfree>
 8008b5a:	464f      	mov	r7, r9
 8008b5c:	106d      	asrs	r5, r5, #1
 8008b5e:	d00b      	beq.n	8008b78 <__pow5mult+0x74>
 8008b60:	6820      	ldr	r0, [r4, #0]
 8008b62:	b938      	cbnz	r0, 8008b74 <__pow5mult+0x70>
 8008b64:	4622      	mov	r2, r4
 8008b66:	4621      	mov	r1, r4
 8008b68:	4630      	mov	r0, r6
 8008b6a:	f7ff ff35 	bl	80089d8 <__multiply>
 8008b6e:	6020      	str	r0, [r4, #0]
 8008b70:	f8c0 8000 	str.w	r8, [r0]
 8008b74:	4604      	mov	r4, r0
 8008b76:	e7e4      	b.n	8008b42 <__pow5mult+0x3e>
 8008b78:	4638      	mov	r0, r7
 8008b7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b7e:	bf00      	nop
 8008b80:	0800aa90 	.word	0x0800aa90

08008b84 <__lshift>:
 8008b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b88:	460c      	mov	r4, r1
 8008b8a:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b8e:	6923      	ldr	r3, [r4, #16]
 8008b90:	6849      	ldr	r1, [r1, #4]
 8008b92:	eb0a 0903 	add.w	r9, sl, r3
 8008b96:	68a3      	ldr	r3, [r4, #8]
 8008b98:	4607      	mov	r7, r0
 8008b9a:	4616      	mov	r6, r2
 8008b9c:	f109 0501 	add.w	r5, r9, #1
 8008ba0:	42ab      	cmp	r3, r5
 8008ba2:	db32      	blt.n	8008c0a <__lshift+0x86>
 8008ba4:	4638      	mov	r0, r7
 8008ba6:	f7ff fe57 	bl	8008858 <_Balloc>
 8008baa:	2300      	movs	r3, #0
 8008bac:	4680      	mov	r8, r0
 8008bae:	f100 0114 	add.w	r1, r0, #20
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	4553      	cmp	r3, sl
 8008bb6:	db2b      	blt.n	8008c10 <__lshift+0x8c>
 8008bb8:	6920      	ldr	r0, [r4, #16]
 8008bba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bbe:	f104 0314 	add.w	r3, r4, #20
 8008bc2:	f016 021f 	ands.w	r2, r6, #31
 8008bc6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bca:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008bce:	d025      	beq.n	8008c1c <__lshift+0x98>
 8008bd0:	f1c2 0e20 	rsb	lr, r2, #32
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	681e      	ldr	r6, [r3, #0]
 8008bd8:	468a      	mov	sl, r1
 8008bda:	4096      	lsls	r6, r2
 8008bdc:	4330      	orrs	r0, r6
 8008bde:	f84a 0b04 	str.w	r0, [sl], #4
 8008be2:	f853 0b04 	ldr.w	r0, [r3], #4
 8008be6:	459c      	cmp	ip, r3
 8008be8:	fa20 f00e 	lsr.w	r0, r0, lr
 8008bec:	d814      	bhi.n	8008c18 <__lshift+0x94>
 8008bee:	6048      	str	r0, [r1, #4]
 8008bf0:	b108      	cbz	r0, 8008bf6 <__lshift+0x72>
 8008bf2:	f109 0502 	add.w	r5, r9, #2
 8008bf6:	3d01      	subs	r5, #1
 8008bf8:	4638      	mov	r0, r7
 8008bfa:	f8c8 5010 	str.w	r5, [r8, #16]
 8008bfe:	4621      	mov	r1, r4
 8008c00:	f7ff fe4f 	bl	80088a2 <_Bfree>
 8008c04:	4640      	mov	r0, r8
 8008c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c0a:	3101      	adds	r1, #1
 8008c0c:	005b      	lsls	r3, r3, #1
 8008c0e:	e7c7      	b.n	8008ba0 <__lshift+0x1c>
 8008c10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8008c14:	3301      	adds	r3, #1
 8008c16:	e7cd      	b.n	8008bb4 <__lshift+0x30>
 8008c18:	4651      	mov	r1, sl
 8008c1a:	e7dc      	b.n	8008bd6 <__lshift+0x52>
 8008c1c:	3904      	subs	r1, #4
 8008c1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c22:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c26:	459c      	cmp	ip, r3
 8008c28:	d8f9      	bhi.n	8008c1e <__lshift+0x9a>
 8008c2a:	e7e4      	b.n	8008bf6 <__lshift+0x72>

08008c2c <__mcmp>:
 8008c2c:	6903      	ldr	r3, [r0, #16]
 8008c2e:	690a      	ldr	r2, [r1, #16]
 8008c30:	1a9b      	subs	r3, r3, r2
 8008c32:	b530      	push	{r4, r5, lr}
 8008c34:	d10c      	bne.n	8008c50 <__mcmp+0x24>
 8008c36:	0092      	lsls	r2, r2, #2
 8008c38:	3014      	adds	r0, #20
 8008c3a:	3114      	adds	r1, #20
 8008c3c:	1884      	adds	r4, r0, r2
 8008c3e:	4411      	add	r1, r2
 8008c40:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c44:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c48:	4295      	cmp	r5, r2
 8008c4a:	d003      	beq.n	8008c54 <__mcmp+0x28>
 8008c4c:	d305      	bcc.n	8008c5a <__mcmp+0x2e>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4618      	mov	r0, r3
 8008c52:	bd30      	pop	{r4, r5, pc}
 8008c54:	42a0      	cmp	r0, r4
 8008c56:	d3f3      	bcc.n	8008c40 <__mcmp+0x14>
 8008c58:	e7fa      	b.n	8008c50 <__mcmp+0x24>
 8008c5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c5e:	e7f7      	b.n	8008c50 <__mcmp+0x24>

08008c60 <__mdiff>:
 8008c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c64:	460d      	mov	r5, r1
 8008c66:	4607      	mov	r7, r0
 8008c68:	4611      	mov	r1, r2
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	4614      	mov	r4, r2
 8008c6e:	f7ff ffdd 	bl	8008c2c <__mcmp>
 8008c72:	1e06      	subs	r6, r0, #0
 8008c74:	d108      	bne.n	8008c88 <__mdiff+0x28>
 8008c76:	4631      	mov	r1, r6
 8008c78:	4638      	mov	r0, r7
 8008c7a:	f7ff fded 	bl	8008858 <_Balloc>
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8008c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c88:	bfa4      	itt	ge
 8008c8a:	4623      	movge	r3, r4
 8008c8c:	462c      	movge	r4, r5
 8008c8e:	4638      	mov	r0, r7
 8008c90:	6861      	ldr	r1, [r4, #4]
 8008c92:	bfa6      	itte	ge
 8008c94:	461d      	movge	r5, r3
 8008c96:	2600      	movge	r6, #0
 8008c98:	2601      	movlt	r6, #1
 8008c9a:	f7ff fddd 	bl	8008858 <_Balloc>
 8008c9e:	692b      	ldr	r3, [r5, #16]
 8008ca0:	60c6      	str	r6, [r0, #12]
 8008ca2:	6926      	ldr	r6, [r4, #16]
 8008ca4:	f105 0914 	add.w	r9, r5, #20
 8008ca8:	f104 0214 	add.w	r2, r4, #20
 8008cac:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008cb0:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8008cb4:	f100 0514 	add.w	r5, r0, #20
 8008cb8:	f04f 0e00 	mov.w	lr, #0
 8008cbc:	f852 ab04 	ldr.w	sl, [r2], #4
 8008cc0:	f859 4b04 	ldr.w	r4, [r9], #4
 8008cc4:	fa1e f18a 	uxtah	r1, lr, sl
 8008cc8:	b2a3      	uxth	r3, r4
 8008cca:	1ac9      	subs	r1, r1, r3
 8008ccc:	0c23      	lsrs	r3, r4, #16
 8008cce:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8008cd2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8008cd6:	b289      	uxth	r1, r1
 8008cd8:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008cdc:	45c8      	cmp	r8, r9
 8008cde:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8008ce2:	4694      	mov	ip, r2
 8008ce4:	f845 3b04 	str.w	r3, [r5], #4
 8008ce8:	d8e8      	bhi.n	8008cbc <__mdiff+0x5c>
 8008cea:	45bc      	cmp	ip, r7
 8008cec:	d304      	bcc.n	8008cf8 <__mdiff+0x98>
 8008cee:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8008cf2:	b183      	cbz	r3, 8008d16 <__mdiff+0xb6>
 8008cf4:	6106      	str	r6, [r0, #16]
 8008cf6:	e7c5      	b.n	8008c84 <__mdiff+0x24>
 8008cf8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008cfc:	fa1e f381 	uxtah	r3, lr, r1
 8008d00:	141a      	asrs	r2, r3, #16
 8008d02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008d06:	b29b      	uxth	r3, r3
 8008d08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d0c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008d10:	f845 3b04 	str.w	r3, [r5], #4
 8008d14:	e7e9      	b.n	8008cea <__mdiff+0x8a>
 8008d16:	3e01      	subs	r6, #1
 8008d18:	e7e9      	b.n	8008cee <__mdiff+0x8e>

08008d1a <__d2b>:
 8008d1a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d1e:	460e      	mov	r6, r1
 8008d20:	2101      	movs	r1, #1
 8008d22:	ec59 8b10 	vmov	r8, r9, d0
 8008d26:	4615      	mov	r5, r2
 8008d28:	f7ff fd96 	bl	8008858 <_Balloc>
 8008d2c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008d30:	4607      	mov	r7, r0
 8008d32:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008d36:	bb34      	cbnz	r4, 8008d86 <__d2b+0x6c>
 8008d38:	9301      	str	r3, [sp, #4]
 8008d3a:	f1b8 0300 	subs.w	r3, r8, #0
 8008d3e:	d027      	beq.n	8008d90 <__d2b+0x76>
 8008d40:	a802      	add	r0, sp, #8
 8008d42:	f840 3d08 	str.w	r3, [r0, #-8]!
 8008d46:	f7ff fe0f 	bl	8008968 <__lo0bits>
 8008d4a:	9900      	ldr	r1, [sp, #0]
 8008d4c:	b1f0      	cbz	r0, 8008d8c <__d2b+0x72>
 8008d4e:	9a01      	ldr	r2, [sp, #4]
 8008d50:	f1c0 0320 	rsb	r3, r0, #32
 8008d54:	fa02 f303 	lsl.w	r3, r2, r3
 8008d58:	430b      	orrs	r3, r1
 8008d5a:	40c2      	lsrs	r2, r0
 8008d5c:	617b      	str	r3, [r7, #20]
 8008d5e:	9201      	str	r2, [sp, #4]
 8008d60:	9b01      	ldr	r3, [sp, #4]
 8008d62:	61bb      	str	r3, [r7, #24]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	bf14      	ite	ne
 8008d68:	2102      	movne	r1, #2
 8008d6a:	2101      	moveq	r1, #1
 8008d6c:	6139      	str	r1, [r7, #16]
 8008d6e:	b1c4      	cbz	r4, 8008da2 <__d2b+0x88>
 8008d70:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008d74:	4404      	add	r4, r0
 8008d76:	6034      	str	r4, [r6, #0]
 8008d78:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008d7c:	6028      	str	r0, [r5, #0]
 8008d7e:	4638      	mov	r0, r7
 8008d80:	b003      	add	sp, #12
 8008d82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d8a:	e7d5      	b.n	8008d38 <__d2b+0x1e>
 8008d8c:	6179      	str	r1, [r7, #20]
 8008d8e:	e7e7      	b.n	8008d60 <__d2b+0x46>
 8008d90:	a801      	add	r0, sp, #4
 8008d92:	f7ff fde9 	bl	8008968 <__lo0bits>
 8008d96:	9b01      	ldr	r3, [sp, #4]
 8008d98:	617b      	str	r3, [r7, #20]
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	6139      	str	r1, [r7, #16]
 8008d9e:	3020      	adds	r0, #32
 8008da0:	e7e5      	b.n	8008d6e <__d2b+0x54>
 8008da2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8008da6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008daa:	6030      	str	r0, [r6, #0]
 8008dac:	6918      	ldr	r0, [r3, #16]
 8008dae:	f7ff fdbc 	bl	800892a <__hi0bits>
 8008db2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008db6:	e7e1      	b.n	8008d7c <__d2b+0x62>

08008db8 <frexp>:
 8008db8:	b570      	push	{r4, r5, r6, lr}
 8008dba:	2100      	movs	r1, #0
 8008dbc:	ec55 4b10 	vmov	r4, r5, d0
 8008dc0:	6001      	str	r1, [r0, #0]
 8008dc2:	4916      	ldr	r1, [pc, #88]	; (8008e1c <frexp+0x64>)
 8008dc4:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008dc8:	428b      	cmp	r3, r1
 8008dca:	4606      	mov	r6, r0
 8008dcc:	462a      	mov	r2, r5
 8008dce:	dc22      	bgt.n	8008e16 <frexp+0x5e>
 8008dd0:	ee10 1a10 	vmov	r1, s0
 8008dd4:	4319      	orrs	r1, r3
 8008dd6:	d01e      	beq.n	8008e16 <frexp+0x5e>
 8008dd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ddc:	da0d      	bge.n	8008dfa <frexp+0x42>
 8008dde:	2200      	movs	r2, #0
 8008de0:	4b0f      	ldr	r3, [pc, #60]	; (8008e20 <frexp+0x68>)
 8008de2:	ee10 0a10 	vmov	r0, s0
 8008de6:	4629      	mov	r1, r5
 8008de8:	f7f7 fcae 	bl	8000748 <__aeabi_dmul>
 8008dec:	460a      	mov	r2, r1
 8008dee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008df2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8008df6:	4604      	mov	r4, r0
 8008df8:	6031      	str	r1, [r6, #0]
 8008dfa:	6831      	ldr	r1, [r6, #0]
 8008dfc:	151b      	asrs	r3, r3, #20
 8008dfe:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8008e02:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8008e06:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 8008e0a:	440b      	add	r3, r1
 8008e0c:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8008e10:	6033      	str	r3, [r6, #0]
 8008e12:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8008e16:	ec45 4b10 	vmov	d0, r4, r5
 8008e1a:	bd70      	pop	{r4, r5, r6, pc}
 8008e1c:	7fefffff 	.word	0x7fefffff
 8008e20:	43500000 	.word	0x43500000

08008e24 <_sbrk_r>:
 8008e24:	b538      	push	{r3, r4, r5, lr}
 8008e26:	4c06      	ldr	r4, [pc, #24]	; (8008e40 <_sbrk_r+0x1c>)
 8008e28:	2300      	movs	r3, #0
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	4608      	mov	r0, r1
 8008e2e:	6023      	str	r3, [r4, #0]
 8008e30:	f7fc fe8a 	bl	8005b48 <_sbrk>
 8008e34:	1c43      	adds	r3, r0, #1
 8008e36:	d102      	bne.n	8008e3e <_sbrk_r+0x1a>
 8008e38:	6823      	ldr	r3, [r4, #0]
 8008e3a:	b103      	cbz	r3, 8008e3e <_sbrk_r+0x1a>
 8008e3c:	602b      	str	r3, [r5, #0]
 8008e3e:	bd38      	pop	{r3, r4, r5, pc}
 8008e40:	20003954 	.word	0x20003954

08008e44 <__ssprint_r>:
 8008e44:	6893      	ldr	r3, [r2, #8]
 8008e46:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e4a:	4681      	mov	r9, r0
 8008e4c:	460c      	mov	r4, r1
 8008e4e:	4616      	mov	r6, r2
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d05e      	beq.n	8008f12 <__ssprint_r+0xce>
 8008e54:	f04f 0b00 	mov.w	fp, #0
 8008e58:	f8d2 a000 	ldr.w	sl, [r2]
 8008e5c:	465f      	mov	r7, fp
 8008e5e:	b357      	cbz	r7, 8008eb6 <__ssprint_r+0x72>
 8008e60:	68a3      	ldr	r3, [r4, #8]
 8008e62:	429f      	cmp	r7, r3
 8008e64:	d340      	bcc.n	8008ee8 <__ssprint_r+0xa4>
 8008e66:	89a2      	ldrh	r2, [r4, #12]
 8008e68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008e6c:	d03c      	beq.n	8008ee8 <__ssprint_r+0xa4>
 8008e6e:	6825      	ldr	r5, [r4, #0]
 8008e70:	6921      	ldr	r1, [r4, #16]
 8008e72:	eba5 0801 	sub.w	r8, r5, r1
 8008e76:	6965      	ldr	r5, [r4, #20]
 8008e78:	2302      	movs	r3, #2
 8008e7a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e7e:	fb95 f5f3 	sdiv	r5, r5, r3
 8008e82:	f108 0301 	add.w	r3, r8, #1
 8008e86:	443b      	add	r3, r7
 8008e88:	429d      	cmp	r5, r3
 8008e8a:	bf38      	it	cc
 8008e8c:	461d      	movcc	r5, r3
 8008e8e:	0553      	lsls	r3, r2, #21
 8008e90:	d544      	bpl.n	8008f1c <__ssprint_r+0xd8>
 8008e92:	4629      	mov	r1, r5
 8008e94:	4648      	mov	r0, r9
 8008e96:	f7ff fa8b 	bl	80083b0 <_malloc_r>
 8008e9a:	b988      	cbnz	r0, 8008ec0 <__ssprint_r+0x7c>
 8008e9c:	230c      	movs	r3, #12
 8008e9e:	f8c9 3000 	str.w	r3, [r9]
 8008ea2:	89a3      	ldrh	r3, [r4, #12]
 8008ea4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ea8:	81a3      	strh	r3, [r4, #12]
 8008eaa:	2300      	movs	r3, #0
 8008eac:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8008eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008eb4:	e02f      	b.n	8008f16 <__ssprint_r+0xd2>
 8008eb6:	e9da b700 	ldrd	fp, r7, [sl]
 8008eba:	f10a 0a08 	add.w	sl, sl, #8
 8008ebe:	e7ce      	b.n	8008e5e <__ssprint_r+0x1a>
 8008ec0:	4642      	mov	r2, r8
 8008ec2:	6921      	ldr	r1, [r4, #16]
 8008ec4:	9001      	str	r0, [sp, #4]
 8008ec6:	f7fc ffe1 	bl	8005e8c <memcpy>
 8008eca:	89a2      	ldrh	r2, [r4, #12]
 8008ecc:	9b01      	ldr	r3, [sp, #4]
 8008ece:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8008ed2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008ed6:	81a2      	strh	r2, [r4, #12]
 8008ed8:	6123      	str	r3, [r4, #16]
 8008eda:	6165      	str	r5, [r4, #20]
 8008edc:	4443      	add	r3, r8
 8008ede:	eba5 0508 	sub.w	r5, r5, r8
 8008ee2:	6023      	str	r3, [r4, #0]
 8008ee4:	60a5      	str	r5, [r4, #8]
 8008ee6:	463b      	mov	r3, r7
 8008ee8:	42bb      	cmp	r3, r7
 8008eea:	bf28      	it	cs
 8008eec:	463b      	movcs	r3, r7
 8008eee:	461a      	mov	r2, r3
 8008ef0:	4659      	mov	r1, fp
 8008ef2:	6820      	ldr	r0, [r4, #0]
 8008ef4:	9301      	str	r3, [sp, #4]
 8008ef6:	f000 f8ba 	bl	800906e <memmove>
 8008efa:	68a2      	ldr	r2, [r4, #8]
 8008efc:	9b01      	ldr	r3, [sp, #4]
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	60a2      	str	r2, [r4, #8]
 8008f02:	6822      	ldr	r2, [r4, #0]
 8008f04:	4413      	add	r3, r2
 8008f06:	6023      	str	r3, [r4, #0]
 8008f08:	68b3      	ldr	r3, [r6, #8]
 8008f0a:	1bdf      	subs	r7, r3, r7
 8008f0c:	60b7      	str	r7, [r6, #8]
 8008f0e:	2f00      	cmp	r7, #0
 8008f10:	d1d1      	bne.n	8008eb6 <__ssprint_r+0x72>
 8008f12:	2000      	movs	r0, #0
 8008f14:	6070      	str	r0, [r6, #4]
 8008f16:	b003      	add	sp, #12
 8008f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f1c:	462a      	mov	r2, r5
 8008f1e:	4648      	mov	r0, r9
 8008f20:	f000 f8be 	bl	80090a0 <_realloc_r>
 8008f24:	4603      	mov	r3, r0
 8008f26:	2800      	cmp	r0, #0
 8008f28:	d1d6      	bne.n	8008ed8 <__ssprint_r+0x94>
 8008f2a:	6921      	ldr	r1, [r4, #16]
 8008f2c:	4648      	mov	r0, r9
 8008f2e:	f7ff f96f 	bl	8008210 <_free_r>
 8008f32:	e7b3      	b.n	8008e9c <__ssprint_r+0x58>

08008f34 <sysconf>:
 8008f34:	2808      	cmp	r0, #8
 8008f36:	b508      	push	{r3, lr}
 8008f38:	d006      	beq.n	8008f48 <sysconf+0x14>
 8008f3a:	f7fc ff7d 	bl	8005e38 <__errno>
 8008f3e:	2316      	movs	r3, #22
 8008f40:	6003      	str	r3, [r0, #0]
 8008f42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f46:	bd08      	pop	{r3, pc}
 8008f48:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8008f4c:	e7fb      	b.n	8008f46 <sysconf+0x12>

08008f4e <__ascii_wctomb>:
 8008f4e:	b149      	cbz	r1, 8008f64 <__ascii_wctomb+0x16>
 8008f50:	2aff      	cmp	r2, #255	; 0xff
 8008f52:	bf85      	ittet	hi
 8008f54:	238a      	movhi	r3, #138	; 0x8a
 8008f56:	6003      	strhi	r3, [r0, #0]
 8008f58:	700a      	strbls	r2, [r1, #0]
 8008f5a:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008f5e:	bf98      	it	ls
 8008f60:	2001      	movls	r0, #1
 8008f62:	4770      	bx	lr
 8008f64:	4608      	mov	r0, r1
 8008f66:	4770      	bx	lr

08008f68 <__register_exitproc>:
 8008f68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f6c:	4c26      	ldr	r4, [pc, #152]	; (8009008 <__register_exitproc+0xa0>)
 8008f6e:	4606      	mov	r6, r0
 8008f70:	6820      	ldr	r0, [r4, #0]
 8008f72:	4698      	mov	r8, r3
 8008f74:	460f      	mov	r7, r1
 8008f76:	4691      	mov	r9, r2
 8008f78:	f7ff fa18 	bl	80083ac <__retarget_lock_acquire_recursive>
 8008f7c:	4b23      	ldr	r3, [pc, #140]	; (800900c <__register_exitproc+0xa4>)
 8008f7e:	681d      	ldr	r5, [r3, #0]
 8008f80:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 8008f84:	b918      	cbnz	r0, 8008f8e <__register_exitproc+0x26>
 8008f86:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 8008f8a:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8008f8e:	6843      	ldr	r3, [r0, #4]
 8008f90:	2b1f      	cmp	r3, #31
 8008f92:	dd19      	ble.n	8008fc8 <__register_exitproc+0x60>
 8008f94:	4b1e      	ldr	r3, [pc, #120]	; (8009010 <__register_exitproc+0xa8>)
 8008f96:	b933      	cbnz	r3, 8008fa6 <__register_exitproc+0x3e>
 8008f98:	6820      	ldr	r0, [r4, #0]
 8008f9a:	f7ff fa08 	bl	80083ae <__retarget_lock_release_recursive>
 8008f9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fa6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8008faa:	f3af 8000 	nop.w
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	d0f2      	beq.n	8008f98 <__register_exitproc+0x30>
 8008fb2:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 8008fb6:	6003      	str	r3, [r0, #0]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	6042      	str	r2, [r0, #4]
 8008fbc:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 8008fc0:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 8008fc4:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 8008fc8:	6843      	ldr	r3, [r0, #4]
 8008fca:	b19e      	cbz	r6, 8008ff4 <__register_exitproc+0x8c>
 8008fcc:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 8008fd6:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 8008fda:	409a      	lsls	r2, r3
 8008fdc:	4311      	orrs	r1, r2
 8008fde:	2e02      	cmp	r6, #2
 8008fe0:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 8008fe4:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 8008fe8:	bf02      	ittt	eq
 8008fea:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 8008fee:	430a      	orreq	r2, r1
 8008ff0:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 8008ff4:	1c5a      	adds	r2, r3, #1
 8008ff6:	3302      	adds	r3, #2
 8008ff8:	6042      	str	r2, [r0, #4]
 8008ffa:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 8008ffe:	6820      	ldr	r0, [r4, #0]
 8009000:	f7ff f9d5 	bl	80083ae <__retarget_lock_release_recursive>
 8009004:	2000      	movs	r0, #0
 8009006:	e7cc      	b.n	8008fa2 <__register_exitproc+0x3a>
 8009008:	200004b0 	.word	0x200004b0
 800900c:	0800a930 	.word	0x0800a930
 8009010:	00000000 	.word	0x00000000

08009014 <_calloc_r>:
 8009014:	b510      	push	{r4, lr}
 8009016:	4351      	muls	r1, r2
 8009018:	f7ff f9ca 	bl	80083b0 <_malloc_r>
 800901c:	4604      	mov	r4, r0
 800901e:	b198      	cbz	r0, 8009048 <_calloc_r+0x34>
 8009020:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8009024:	f022 0203 	bic.w	r2, r2, #3
 8009028:	3a04      	subs	r2, #4
 800902a:	2a24      	cmp	r2, #36	; 0x24
 800902c:	d81b      	bhi.n	8009066 <_calloc_r+0x52>
 800902e:	2a13      	cmp	r2, #19
 8009030:	d917      	bls.n	8009062 <_calloc_r+0x4e>
 8009032:	2100      	movs	r1, #0
 8009034:	2a1b      	cmp	r2, #27
 8009036:	e9c0 1100 	strd	r1, r1, [r0]
 800903a:	d807      	bhi.n	800904c <_calloc_r+0x38>
 800903c:	f100 0308 	add.w	r3, r0, #8
 8009040:	2200      	movs	r2, #0
 8009042:	e9c3 2200 	strd	r2, r2, [r3]
 8009046:	609a      	str	r2, [r3, #8]
 8009048:	4620      	mov	r0, r4
 800904a:	bd10      	pop	{r4, pc}
 800904c:	2a24      	cmp	r2, #36	; 0x24
 800904e:	e9c0 1102 	strd	r1, r1, [r0, #8]
 8009052:	bf11      	iteee	ne
 8009054:	f100 0310 	addne.w	r3, r0, #16
 8009058:	6101      	streq	r1, [r0, #16]
 800905a:	f100 0318 	addeq.w	r3, r0, #24
 800905e:	6141      	streq	r1, [r0, #20]
 8009060:	e7ee      	b.n	8009040 <_calloc_r+0x2c>
 8009062:	4603      	mov	r3, r0
 8009064:	e7ec      	b.n	8009040 <_calloc_r+0x2c>
 8009066:	2100      	movs	r1, #0
 8009068:	f7fc ff1b 	bl	8005ea2 <memset>
 800906c:	e7ec      	b.n	8009048 <_calloc_r+0x34>

0800906e <memmove>:
 800906e:	4288      	cmp	r0, r1
 8009070:	b510      	push	{r4, lr}
 8009072:	eb01 0302 	add.w	r3, r1, r2
 8009076:	d807      	bhi.n	8009088 <memmove+0x1a>
 8009078:	1e42      	subs	r2, r0, #1
 800907a:	4299      	cmp	r1, r3
 800907c:	d00a      	beq.n	8009094 <memmove+0x26>
 800907e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009082:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009086:	e7f8      	b.n	800907a <memmove+0xc>
 8009088:	4283      	cmp	r3, r0
 800908a:	d9f5      	bls.n	8009078 <memmove+0xa>
 800908c:	1881      	adds	r1, r0, r2
 800908e:	1ad2      	subs	r2, r2, r3
 8009090:	42d3      	cmn	r3, r2
 8009092:	d100      	bne.n	8009096 <memmove+0x28>
 8009094:	bd10      	pop	{r4, pc}
 8009096:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800909a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800909e:	e7f7      	b.n	8009090 <memmove+0x22>

080090a0 <_realloc_r>:
 80090a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a4:	4682      	mov	sl, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	b929      	cbnz	r1, 80090b6 <_realloc_r+0x16>
 80090aa:	4611      	mov	r1, r2
 80090ac:	b003      	add	sp, #12
 80090ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090b2:	f7ff b97d 	b.w	80083b0 <_malloc_r>
 80090b6:	9201      	str	r2, [sp, #4]
 80090b8:	f7ff fbc2 	bl	8008840 <__malloc_lock>
 80090bc:	9a01      	ldr	r2, [sp, #4]
 80090be:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80090c2:	f102 080b 	add.w	r8, r2, #11
 80090c6:	f1b8 0f16 	cmp.w	r8, #22
 80090ca:	f1a4 0908 	sub.w	r9, r4, #8
 80090ce:	f025 0603 	bic.w	r6, r5, #3
 80090d2:	d90b      	bls.n	80090ec <_realloc_r+0x4c>
 80090d4:	f038 0807 	bics.w	r8, r8, #7
 80090d8:	d50a      	bpl.n	80090f0 <_realloc_r+0x50>
 80090da:	230c      	movs	r3, #12
 80090dc:	f8ca 3000 	str.w	r3, [sl]
 80090e0:	f04f 0b00 	mov.w	fp, #0
 80090e4:	4658      	mov	r0, fp
 80090e6:	b003      	add	sp, #12
 80090e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ec:	f04f 0810 	mov.w	r8, #16
 80090f0:	4590      	cmp	r8, r2
 80090f2:	d3f2      	bcc.n	80090da <_realloc_r+0x3a>
 80090f4:	45b0      	cmp	r8, r6
 80090f6:	f340 8170 	ble.w	80093da <_realloc_r+0x33a>
 80090fa:	49a9      	ldr	r1, [pc, #676]	; (80093a0 <_realloc_r+0x300>)
 80090fc:	9101      	str	r1, [sp, #4]
 80090fe:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8009102:	eb09 0306 	add.w	r3, r9, r6
 8009106:	459c      	cmp	ip, r3
 8009108:	6858      	ldr	r0, [r3, #4]
 800910a:	d005      	beq.n	8009118 <_realloc_r+0x78>
 800910c:	f020 0101 	bic.w	r1, r0, #1
 8009110:	4419      	add	r1, r3
 8009112:	6849      	ldr	r1, [r1, #4]
 8009114:	07cf      	lsls	r7, r1, #31
 8009116:	d447      	bmi.n	80091a8 <_realloc_r+0x108>
 8009118:	f020 0003 	bic.w	r0, r0, #3
 800911c:	459c      	cmp	ip, r3
 800911e:	eb06 0700 	add.w	r7, r6, r0
 8009122:	d119      	bne.n	8009158 <_realloc_r+0xb8>
 8009124:	f108 0110 	add.w	r1, r8, #16
 8009128:	42b9      	cmp	r1, r7
 800912a:	dc3f      	bgt.n	80091ac <_realloc_r+0x10c>
 800912c:	eb09 0308 	add.w	r3, r9, r8
 8009130:	9a01      	ldr	r2, [sp, #4]
 8009132:	eba7 0708 	sub.w	r7, r7, r8
 8009136:	f047 0701 	orr.w	r7, r7, #1
 800913a:	6093      	str	r3, [r2, #8]
 800913c:	605f      	str	r7, [r3, #4]
 800913e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	ea43 0308 	orr.w	r3, r3, r8
 800914a:	f844 3c04 	str.w	r3, [r4, #-4]
 800914e:	4650      	mov	r0, sl
 8009150:	f7ff fb7c 	bl	800884c <__malloc_unlock>
 8009154:	46a3      	mov	fp, r4
 8009156:	e7c5      	b.n	80090e4 <_realloc_r+0x44>
 8009158:	45b8      	cmp	r8, r7
 800915a:	dc27      	bgt.n	80091ac <_realloc_r+0x10c>
 800915c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 8009160:	60da      	str	r2, [r3, #12]
 8009162:	6093      	str	r3, [r2, #8]
 8009164:	eba7 0008 	sub.w	r0, r7, r8
 8009168:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800916c:	280f      	cmp	r0, #15
 800916e:	f002 0201 	and.w	r2, r2, #1
 8009172:	eb09 0307 	add.w	r3, r9, r7
 8009176:	f240 8132 	bls.w	80093de <_realloc_r+0x33e>
 800917a:	eb09 0108 	add.w	r1, r9, r8
 800917e:	ea48 0202 	orr.w	r2, r8, r2
 8009182:	f040 0001 	orr.w	r0, r0, #1
 8009186:	f8c9 2004 	str.w	r2, [r9, #4]
 800918a:	6048      	str	r0, [r1, #4]
 800918c:	685a      	ldr	r2, [r3, #4]
 800918e:	f042 0201 	orr.w	r2, r2, #1
 8009192:	605a      	str	r2, [r3, #4]
 8009194:	3108      	adds	r1, #8
 8009196:	4650      	mov	r0, sl
 8009198:	f7ff f83a 	bl	8008210 <_free_r>
 800919c:	4650      	mov	r0, sl
 800919e:	f7ff fb55 	bl	800884c <__malloc_unlock>
 80091a2:	f109 0b08 	add.w	fp, r9, #8
 80091a6:	e79d      	b.n	80090e4 <_realloc_r+0x44>
 80091a8:	2000      	movs	r0, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	07e9      	lsls	r1, r5, #31
 80091ae:	f100 80c6 	bmi.w	800933e <_realloc_r+0x29e>
 80091b2:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80091b6:	eba9 0505 	sub.w	r5, r9, r5
 80091ba:	6869      	ldr	r1, [r5, #4]
 80091bc:	f021 0103 	bic.w	r1, r1, #3
 80091c0:	eb01 0b06 	add.w	fp, r1, r6
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	f000 8086 	beq.w	80092d6 <_realloc_r+0x236>
 80091ca:	459c      	cmp	ip, r3
 80091cc:	eb00 070b 	add.w	r7, r0, fp
 80091d0:	d149      	bne.n	8009266 <_realloc_r+0x1c6>
 80091d2:	f108 0310 	add.w	r3, r8, #16
 80091d6:	42bb      	cmp	r3, r7
 80091d8:	dc7d      	bgt.n	80092d6 <_realloc_r+0x236>
 80091da:	46ab      	mov	fp, r5
 80091dc:	68eb      	ldr	r3, [r5, #12]
 80091de:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 80091e2:	60d3      	str	r3, [r2, #12]
 80091e4:	609a      	str	r2, [r3, #8]
 80091e6:	1f32      	subs	r2, r6, #4
 80091e8:	2a24      	cmp	r2, #36	; 0x24
 80091ea:	d837      	bhi.n	800925c <_realloc_r+0x1bc>
 80091ec:	2a13      	cmp	r2, #19
 80091ee:	d933      	bls.n	8009258 <_realloc_r+0x1b8>
 80091f0:	6823      	ldr	r3, [r4, #0]
 80091f2:	60ab      	str	r3, [r5, #8]
 80091f4:	6863      	ldr	r3, [r4, #4]
 80091f6:	60eb      	str	r3, [r5, #12]
 80091f8:	2a1b      	cmp	r2, #27
 80091fa:	d81b      	bhi.n	8009234 <_realloc_r+0x194>
 80091fc:	3408      	adds	r4, #8
 80091fe:	f105 0310 	add.w	r3, r5, #16
 8009202:	6822      	ldr	r2, [r4, #0]
 8009204:	601a      	str	r2, [r3, #0]
 8009206:	6862      	ldr	r2, [r4, #4]
 8009208:	605a      	str	r2, [r3, #4]
 800920a:	68a2      	ldr	r2, [r4, #8]
 800920c:	609a      	str	r2, [r3, #8]
 800920e:	eb05 0308 	add.w	r3, r5, r8
 8009212:	9a01      	ldr	r2, [sp, #4]
 8009214:	eba7 0708 	sub.w	r7, r7, r8
 8009218:	f047 0701 	orr.w	r7, r7, #1
 800921c:	6093      	str	r3, [r2, #8]
 800921e:	605f      	str	r7, [r3, #4]
 8009220:	686b      	ldr	r3, [r5, #4]
 8009222:	f003 0301 	and.w	r3, r3, #1
 8009226:	ea43 0308 	orr.w	r3, r3, r8
 800922a:	606b      	str	r3, [r5, #4]
 800922c:	4650      	mov	r0, sl
 800922e:	f7ff fb0d 	bl	800884c <__malloc_unlock>
 8009232:	e757      	b.n	80090e4 <_realloc_r+0x44>
 8009234:	68a3      	ldr	r3, [r4, #8]
 8009236:	612b      	str	r3, [r5, #16]
 8009238:	68e3      	ldr	r3, [r4, #12]
 800923a:	616b      	str	r3, [r5, #20]
 800923c:	2a24      	cmp	r2, #36	; 0x24
 800923e:	bf01      	itttt	eq
 8009240:	6923      	ldreq	r3, [r4, #16]
 8009242:	61ab      	streq	r3, [r5, #24]
 8009244:	6962      	ldreq	r2, [r4, #20]
 8009246:	61ea      	streq	r2, [r5, #28]
 8009248:	bf19      	ittee	ne
 800924a:	3410      	addne	r4, #16
 800924c:	f105 0318 	addne.w	r3, r5, #24
 8009250:	f105 0320 	addeq.w	r3, r5, #32
 8009254:	3418      	addeq	r4, #24
 8009256:	e7d4      	b.n	8009202 <_realloc_r+0x162>
 8009258:	465b      	mov	r3, fp
 800925a:	e7d2      	b.n	8009202 <_realloc_r+0x162>
 800925c:	4621      	mov	r1, r4
 800925e:	4658      	mov	r0, fp
 8009260:	f7ff ff05 	bl	800906e <memmove>
 8009264:	e7d3      	b.n	800920e <_realloc_r+0x16e>
 8009266:	45b8      	cmp	r8, r7
 8009268:	dc35      	bgt.n	80092d6 <_realloc_r+0x236>
 800926a:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800926e:	4628      	mov	r0, r5
 8009270:	60da      	str	r2, [r3, #12]
 8009272:	6093      	str	r3, [r2, #8]
 8009274:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8009278:	68eb      	ldr	r3, [r5, #12]
 800927a:	60d3      	str	r3, [r2, #12]
 800927c:	609a      	str	r2, [r3, #8]
 800927e:	1f32      	subs	r2, r6, #4
 8009280:	2a24      	cmp	r2, #36	; 0x24
 8009282:	d824      	bhi.n	80092ce <_realloc_r+0x22e>
 8009284:	2a13      	cmp	r2, #19
 8009286:	d908      	bls.n	800929a <_realloc_r+0x1fa>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	60ab      	str	r3, [r5, #8]
 800928c:	6863      	ldr	r3, [r4, #4]
 800928e:	60eb      	str	r3, [r5, #12]
 8009290:	2a1b      	cmp	r2, #27
 8009292:	d80a      	bhi.n	80092aa <_realloc_r+0x20a>
 8009294:	3408      	adds	r4, #8
 8009296:	f105 0010 	add.w	r0, r5, #16
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	6003      	str	r3, [r0, #0]
 800929e:	6863      	ldr	r3, [r4, #4]
 80092a0:	6043      	str	r3, [r0, #4]
 80092a2:	68a3      	ldr	r3, [r4, #8]
 80092a4:	6083      	str	r3, [r0, #8]
 80092a6:	46a9      	mov	r9, r5
 80092a8:	e75c      	b.n	8009164 <_realloc_r+0xc4>
 80092aa:	68a3      	ldr	r3, [r4, #8]
 80092ac:	612b      	str	r3, [r5, #16]
 80092ae:	68e3      	ldr	r3, [r4, #12]
 80092b0:	616b      	str	r3, [r5, #20]
 80092b2:	2a24      	cmp	r2, #36	; 0x24
 80092b4:	bf01      	itttt	eq
 80092b6:	6923      	ldreq	r3, [r4, #16]
 80092b8:	61ab      	streq	r3, [r5, #24]
 80092ba:	6963      	ldreq	r3, [r4, #20]
 80092bc:	61eb      	streq	r3, [r5, #28]
 80092be:	bf19      	ittee	ne
 80092c0:	3410      	addne	r4, #16
 80092c2:	f105 0018 	addne.w	r0, r5, #24
 80092c6:	f105 0020 	addeq.w	r0, r5, #32
 80092ca:	3418      	addeq	r4, #24
 80092cc:	e7e5      	b.n	800929a <_realloc_r+0x1fa>
 80092ce:	4621      	mov	r1, r4
 80092d0:	f7ff fecd 	bl	800906e <memmove>
 80092d4:	e7e7      	b.n	80092a6 <_realloc_r+0x206>
 80092d6:	45d8      	cmp	r8, fp
 80092d8:	dc31      	bgt.n	800933e <_realloc_r+0x29e>
 80092da:	4628      	mov	r0, r5
 80092dc:	68eb      	ldr	r3, [r5, #12]
 80092de:	f850 2f08 	ldr.w	r2, [r0, #8]!
 80092e2:	60d3      	str	r3, [r2, #12]
 80092e4:	609a      	str	r2, [r3, #8]
 80092e6:	1f32      	subs	r2, r6, #4
 80092e8:	2a24      	cmp	r2, #36	; 0x24
 80092ea:	d824      	bhi.n	8009336 <_realloc_r+0x296>
 80092ec:	2a13      	cmp	r2, #19
 80092ee:	d908      	bls.n	8009302 <_realloc_r+0x262>
 80092f0:	6823      	ldr	r3, [r4, #0]
 80092f2:	60ab      	str	r3, [r5, #8]
 80092f4:	6863      	ldr	r3, [r4, #4]
 80092f6:	60eb      	str	r3, [r5, #12]
 80092f8:	2a1b      	cmp	r2, #27
 80092fa:	d80a      	bhi.n	8009312 <_realloc_r+0x272>
 80092fc:	3408      	adds	r4, #8
 80092fe:	f105 0010 	add.w	r0, r5, #16
 8009302:	6823      	ldr	r3, [r4, #0]
 8009304:	6003      	str	r3, [r0, #0]
 8009306:	6863      	ldr	r3, [r4, #4]
 8009308:	6043      	str	r3, [r0, #4]
 800930a:	68a3      	ldr	r3, [r4, #8]
 800930c:	6083      	str	r3, [r0, #8]
 800930e:	465f      	mov	r7, fp
 8009310:	e7c9      	b.n	80092a6 <_realloc_r+0x206>
 8009312:	68a3      	ldr	r3, [r4, #8]
 8009314:	612b      	str	r3, [r5, #16]
 8009316:	68e3      	ldr	r3, [r4, #12]
 8009318:	616b      	str	r3, [r5, #20]
 800931a:	2a24      	cmp	r2, #36	; 0x24
 800931c:	bf01      	itttt	eq
 800931e:	6923      	ldreq	r3, [r4, #16]
 8009320:	61ab      	streq	r3, [r5, #24]
 8009322:	6963      	ldreq	r3, [r4, #20]
 8009324:	61eb      	streq	r3, [r5, #28]
 8009326:	bf19      	ittee	ne
 8009328:	3410      	addne	r4, #16
 800932a:	f105 0018 	addne.w	r0, r5, #24
 800932e:	f105 0020 	addeq.w	r0, r5, #32
 8009332:	3418      	addeq	r4, #24
 8009334:	e7e5      	b.n	8009302 <_realloc_r+0x262>
 8009336:	4621      	mov	r1, r4
 8009338:	f7ff fe99 	bl	800906e <memmove>
 800933c:	e7e7      	b.n	800930e <_realloc_r+0x26e>
 800933e:	4611      	mov	r1, r2
 8009340:	4650      	mov	r0, sl
 8009342:	f7ff f835 	bl	80083b0 <_malloc_r>
 8009346:	4683      	mov	fp, r0
 8009348:	2800      	cmp	r0, #0
 800934a:	f43f af6f 	beq.w	800922c <_realloc_r+0x18c>
 800934e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8009352:	f023 0301 	bic.w	r3, r3, #1
 8009356:	444b      	add	r3, r9
 8009358:	f1a0 0208 	sub.w	r2, r0, #8
 800935c:	4293      	cmp	r3, r2
 800935e:	d105      	bne.n	800936c <_realloc_r+0x2cc>
 8009360:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8009364:	f027 0703 	bic.w	r7, r7, #3
 8009368:	4437      	add	r7, r6
 800936a:	e6fb      	b.n	8009164 <_realloc_r+0xc4>
 800936c:	1f32      	subs	r2, r6, #4
 800936e:	2a24      	cmp	r2, #36	; 0x24
 8009370:	d82f      	bhi.n	80093d2 <_realloc_r+0x332>
 8009372:	2a13      	cmp	r2, #19
 8009374:	d92a      	bls.n	80093cc <_realloc_r+0x32c>
 8009376:	6823      	ldr	r3, [r4, #0]
 8009378:	6003      	str	r3, [r0, #0]
 800937a:	6863      	ldr	r3, [r4, #4]
 800937c:	6043      	str	r3, [r0, #4]
 800937e:	2a1b      	cmp	r2, #27
 8009380:	d810      	bhi.n	80093a4 <_realloc_r+0x304>
 8009382:	f104 0208 	add.w	r2, r4, #8
 8009386:	f100 0308 	add.w	r3, r0, #8
 800938a:	6811      	ldr	r1, [r2, #0]
 800938c:	6019      	str	r1, [r3, #0]
 800938e:	6851      	ldr	r1, [r2, #4]
 8009390:	6059      	str	r1, [r3, #4]
 8009392:	6892      	ldr	r2, [r2, #8]
 8009394:	609a      	str	r2, [r3, #8]
 8009396:	4621      	mov	r1, r4
 8009398:	4650      	mov	r0, sl
 800939a:	f7fe ff39 	bl	8008210 <_free_r>
 800939e:	e745      	b.n	800922c <_realloc_r+0x18c>
 80093a0:	20000620 	.word	0x20000620
 80093a4:	68a3      	ldr	r3, [r4, #8]
 80093a6:	6083      	str	r3, [r0, #8]
 80093a8:	68e3      	ldr	r3, [r4, #12]
 80093aa:	60c3      	str	r3, [r0, #12]
 80093ac:	2a24      	cmp	r2, #36	; 0x24
 80093ae:	bf01      	itttt	eq
 80093b0:	6923      	ldreq	r3, [r4, #16]
 80093b2:	6103      	streq	r3, [r0, #16]
 80093b4:	6961      	ldreq	r1, [r4, #20]
 80093b6:	6141      	streq	r1, [r0, #20]
 80093b8:	bf19      	ittee	ne
 80093ba:	f104 0210 	addne.w	r2, r4, #16
 80093be:	f100 0310 	addne.w	r3, r0, #16
 80093c2:	f104 0218 	addeq.w	r2, r4, #24
 80093c6:	f100 0318 	addeq.w	r3, r0, #24
 80093ca:	e7de      	b.n	800938a <_realloc_r+0x2ea>
 80093cc:	4603      	mov	r3, r0
 80093ce:	4622      	mov	r2, r4
 80093d0:	e7db      	b.n	800938a <_realloc_r+0x2ea>
 80093d2:	4621      	mov	r1, r4
 80093d4:	f7ff fe4b 	bl	800906e <memmove>
 80093d8:	e7dd      	b.n	8009396 <_realloc_r+0x2f6>
 80093da:	4637      	mov	r7, r6
 80093dc:	e6c2      	b.n	8009164 <_realloc_r+0xc4>
 80093de:	4317      	orrs	r7, r2
 80093e0:	f8c9 7004 	str.w	r7, [r9, #4]
 80093e4:	685a      	ldr	r2, [r3, #4]
 80093e6:	f042 0201 	orr.w	r2, r2, #1
 80093ea:	605a      	str	r2, [r3, #4]
 80093ec:	e6d6      	b.n	800919c <_realloc_r+0xfc>
 80093ee:	bf00      	nop

080093f0 <pow>:
 80093f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f4:	ed2d 8b04 	vpush	{d8-d9}
 80093f8:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80096cc <pow+0x2dc>
 80093fc:	b08d      	sub	sp, #52	; 0x34
 80093fe:	ec57 6b10 	vmov	r6, r7, d0
 8009402:	ec55 4b11 	vmov	r4, r5, d1
 8009406:	f000 f9bf 	bl	8009788 <__ieee754_pow>
 800940a:	f999 3000 	ldrsb.w	r3, [r9]
 800940e:	9300      	str	r3, [sp, #0]
 8009410:	3301      	adds	r3, #1
 8009412:	eeb0 8a40 	vmov.f32	s16, s0
 8009416:	eef0 8a60 	vmov.f32	s17, s1
 800941a:	46c8      	mov	r8, r9
 800941c:	d05f      	beq.n	80094de <pow+0xee>
 800941e:	4622      	mov	r2, r4
 8009420:	462b      	mov	r3, r5
 8009422:	4620      	mov	r0, r4
 8009424:	4629      	mov	r1, r5
 8009426:	f7f7 fc29 	bl	8000c7c <__aeabi_dcmpun>
 800942a:	4683      	mov	fp, r0
 800942c:	2800      	cmp	r0, #0
 800942e:	d156      	bne.n	80094de <pow+0xee>
 8009430:	4632      	mov	r2, r6
 8009432:	463b      	mov	r3, r7
 8009434:	4630      	mov	r0, r6
 8009436:	4639      	mov	r1, r7
 8009438:	f7f7 fc20 	bl	8000c7c <__aeabi_dcmpun>
 800943c:	9001      	str	r0, [sp, #4]
 800943e:	b1e8      	cbz	r0, 800947c <pow+0x8c>
 8009440:	2200      	movs	r2, #0
 8009442:	2300      	movs	r3, #0
 8009444:	4620      	mov	r0, r4
 8009446:	4629      	mov	r1, r5
 8009448:	f7f7 fbe6 	bl	8000c18 <__aeabi_dcmpeq>
 800944c:	2800      	cmp	r0, #0
 800944e:	d046      	beq.n	80094de <pow+0xee>
 8009450:	2301      	movs	r3, #1
 8009452:	9302      	str	r3, [sp, #8]
 8009454:	4b96      	ldr	r3, [pc, #600]	; (80096b0 <pow+0x2c0>)
 8009456:	9303      	str	r3, [sp, #12]
 8009458:	4b96      	ldr	r3, [pc, #600]	; (80096b4 <pow+0x2c4>)
 800945a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800945e:	2200      	movs	r2, #0
 8009460:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009464:	9b00      	ldr	r3, [sp, #0]
 8009466:	2b02      	cmp	r3, #2
 8009468:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800946c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009470:	d033      	beq.n	80094da <pow+0xea>
 8009472:	a802      	add	r0, sp, #8
 8009474:	f000 ff57 	bl	800a326 <matherr>
 8009478:	bb48      	cbnz	r0, 80094ce <pow+0xde>
 800947a:	e05d      	b.n	8009538 <pow+0x148>
 800947c:	f04f 0a00 	mov.w	sl, #0
 8009480:	f04f 0b00 	mov.w	fp, #0
 8009484:	4652      	mov	r2, sl
 8009486:	465b      	mov	r3, fp
 8009488:	4630      	mov	r0, r6
 800948a:	4639      	mov	r1, r7
 800948c:	f7f7 fbc4 	bl	8000c18 <__aeabi_dcmpeq>
 8009490:	ec4b ab19 	vmov	d9, sl, fp
 8009494:	2800      	cmp	r0, #0
 8009496:	d054      	beq.n	8009542 <pow+0x152>
 8009498:	4652      	mov	r2, sl
 800949a:	465b      	mov	r3, fp
 800949c:	4620      	mov	r0, r4
 800949e:	4629      	mov	r1, r5
 80094a0:	f7f7 fbba 	bl	8000c18 <__aeabi_dcmpeq>
 80094a4:	4680      	mov	r8, r0
 80094a6:	b318      	cbz	r0, 80094f0 <pow+0x100>
 80094a8:	2301      	movs	r3, #1
 80094aa:	9302      	str	r3, [sp, #8]
 80094ac:	4b80      	ldr	r3, [pc, #512]	; (80096b0 <pow+0x2c0>)
 80094ae:	9303      	str	r3, [sp, #12]
 80094b0:	9b01      	ldr	r3, [sp, #4]
 80094b2:	930a      	str	r3, [sp, #40]	; 0x28
 80094b4:	9b00      	ldr	r3, [sp, #0]
 80094b6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80094ba:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80094be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d0d5      	beq.n	8009472 <pow+0x82>
 80094c6:	4b7b      	ldr	r3, [pc, #492]	; (80096b4 <pow+0x2c4>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80094ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d0:	b11b      	cbz	r3, 80094da <pow+0xea>
 80094d2:	f7fc fcb1 	bl	8005e38 <__errno>
 80094d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094d8:	6003      	str	r3, [r0, #0]
 80094da:	ed9d 8b08 	vldr	d8, [sp, #32]
 80094de:	eeb0 0a48 	vmov.f32	s0, s16
 80094e2:	eef0 0a68 	vmov.f32	s1, s17
 80094e6:	b00d      	add	sp, #52	; 0x34
 80094e8:	ecbd 8b04 	vpop	{d8-d9}
 80094ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094f0:	ec45 4b10 	vmov	d0, r4, r5
 80094f4:	f000 ff0f 	bl	800a316 <finite>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d0f0      	beq.n	80094de <pow+0xee>
 80094fc:	4652      	mov	r2, sl
 80094fe:	465b      	mov	r3, fp
 8009500:	4620      	mov	r0, r4
 8009502:	4629      	mov	r1, r5
 8009504:	f7f7 fb92 	bl	8000c2c <__aeabi_dcmplt>
 8009508:	2800      	cmp	r0, #0
 800950a:	d0e8      	beq.n	80094de <pow+0xee>
 800950c:	2301      	movs	r3, #1
 800950e:	9302      	str	r3, [sp, #8]
 8009510:	4b67      	ldr	r3, [pc, #412]	; (80096b0 <pow+0x2c0>)
 8009512:	9303      	str	r3, [sp, #12]
 8009514:	f999 3000 	ldrsb.w	r3, [r9]
 8009518:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800951c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009520:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009524:	b913      	cbnz	r3, 800952c <pow+0x13c>
 8009526:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800952a:	e7a2      	b.n	8009472 <pow+0x82>
 800952c:	4962      	ldr	r1, [pc, #392]	; (80096b8 <pow+0x2c8>)
 800952e:	2000      	movs	r0, #0
 8009530:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009534:	2b02      	cmp	r3, #2
 8009536:	d19c      	bne.n	8009472 <pow+0x82>
 8009538:	f7fc fc7e 	bl	8005e38 <__errno>
 800953c:	2321      	movs	r3, #33	; 0x21
 800953e:	6003      	str	r3, [r0, #0]
 8009540:	e7c5      	b.n	80094ce <pow+0xde>
 8009542:	eeb0 0a48 	vmov.f32	s0, s16
 8009546:	eef0 0a68 	vmov.f32	s1, s17
 800954a:	f000 fee4 	bl	800a316 <finite>
 800954e:	9000      	str	r0, [sp, #0]
 8009550:	2800      	cmp	r0, #0
 8009552:	f040 8081 	bne.w	8009658 <pow+0x268>
 8009556:	ec47 6b10 	vmov	d0, r6, r7
 800955a:	f000 fedc 	bl	800a316 <finite>
 800955e:	2800      	cmp	r0, #0
 8009560:	d07a      	beq.n	8009658 <pow+0x268>
 8009562:	ec45 4b10 	vmov	d0, r4, r5
 8009566:	f000 fed6 	bl	800a316 <finite>
 800956a:	2800      	cmp	r0, #0
 800956c:	d074      	beq.n	8009658 <pow+0x268>
 800956e:	ec53 2b18 	vmov	r2, r3, d8
 8009572:	ee18 0a10 	vmov	r0, s16
 8009576:	4619      	mov	r1, r3
 8009578:	f7f7 fb80 	bl	8000c7c <__aeabi_dcmpun>
 800957c:	f999 9000 	ldrsb.w	r9, [r9]
 8009580:	4b4b      	ldr	r3, [pc, #300]	; (80096b0 <pow+0x2c0>)
 8009582:	b1b0      	cbz	r0, 80095b2 <pow+0x1c2>
 8009584:	2201      	movs	r2, #1
 8009586:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800958a:	9b00      	ldr	r3, [sp, #0]
 800958c:	930a      	str	r3, [sp, #40]	; 0x28
 800958e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009592:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8009596:	f1b9 0f00 	cmp.w	r9, #0
 800959a:	d0c4      	beq.n	8009526 <pow+0x136>
 800959c:	4652      	mov	r2, sl
 800959e:	465b      	mov	r3, fp
 80095a0:	4650      	mov	r0, sl
 80095a2:	4659      	mov	r1, fp
 80095a4:	f7f7 f9fa 	bl	800099c <__aeabi_ddiv>
 80095a8:	f1b9 0f02 	cmp.w	r9, #2
 80095ac:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80095b0:	e7c1      	b.n	8009536 <pow+0x146>
 80095b2:	2203      	movs	r2, #3
 80095b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095b8:	900a      	str	r0, [sp, #40]	; 0x28
 80095ba:	4629      	mov	r1, r5
 80095bc:	4620      	mov	r0, r4
 80095be:	2200      	movs	r2, #0
 80095c0:	4b3e      	ldr	r3, [pc, #248]	; (80096bc <pow+0x2cc>)
 80095c2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80095c6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80095ca:	f7f7 f8bd 	bl	8000748 <__aeabi_dmul>
 80095ce:	4604      	mov	r4, r0
 80095d0:	460d      	mov	r5, r1
 80095d2:	f1b9 0f00 	cmp.w	r9, #0
 80095d6:	d124      	bne.n	8009622 <pow+0x232>
 80095d8:	4b39      	ldr	r3, [pc, #228]	; (80096c0 <pow+0x2d0>)
 80095da:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80095de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80095e2:	4630      	mov	r0, r6
 80095e4:	4652      	mov	r2, sl
 80095e6:	465b      	mov	r3, fp
 80095e8:	4639      	mov	r1, r7
 80095ea:	f7f7 fb1f 	bl	8000c2c <__aeabi_dcmplt>
 80095ee:	2800      	cmp	r0, #0
 80095f0:	d056      	beq.n	80096a0 <pow+0x2b0>
 80095f2:	ec45 4b10 	vmov	d0, r4, r5
 80095f6:	f000 fea3 	bl	800a340 <rint>
 80095fa:	4622      	mov	r2, r4
 80095fc:	462b      	mov	r3, r5
 80095fe:	ec51 0b10 	vmov	r0, r1, d0
 8009602:	f7f7 fb09 	bl	8000c18 <__aeabi_dcmpeq>
 8009606:	b920      	cbnz	r0, 8009612 <pow+0x222>
 8009608:	4b2e      	ldr	r3, [pc, #184]	; (80096c4 <pow+0x2d4>)
 800960a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800960e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009612:	f998 3000 	ldrsb.w	r3, [r8]
 8009616:	2b02      	cmp	r3, #2
 8009618:	d142      	bne.n	80096a0 <pow+0x2b0>
 800961a:	f7fc fc0d 	bl	8005e38 <__errno>
 800961e:	2322      	movs	r3, #34	; 0x22
 8009620:	e78d      	b.n	800953e <pow+0x14e>
 8009622:	4b29      	ldr	r3, [pc, #164]	; (80096c8 <pow+0x2d8>)
 8009624:	2200      	movs	r2, #0
 8009626:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800962a:	4630      	mov	r0, r6
 800962c:	4652      	mov	r2, sl
 800962e:	465b      	mov	r3, fp
 8009630:	4639      	mov	r1, r7
 8009632:	f7f7 fafb 	bl	8000c2c <__aeabi_dcmplt>
 8009636:	2800      	cmp	r0, #0
 8009638:	d0eb      	beq.n	8009612 <pow+0x222>
 800963a:	ec45 4b10 	vmov	d0, r4, r5
 800963e:	f000 fe7f 	bl	800a340 <rint>
 8009642:	4622      	mov	r2, r4
 8009644:	462b      	mov	r3, r5
 8009646:	ec51 0b10 	vmov	r0, r1, d0
 800964a:	f7f7 fae5 	bl	8000c18 <__aeabi_dcmpeq>
 800964e:	2800      	cmp	r0, #0
 8009650:	d1df      	bne.n	8009612 <pow+0x222>
 8009652:	2200      	movs	r2, #0
 8009654:	4b18      	ldr	r3, [pc, #96]	; (80096b8 <pow+0x2c8>)
 8009656:	e7da      	b.n	800960e <pow+0x21e>
 8009658:	2200      	movs	r2, #0
 800965a:	2300      	movs	r3, #0
 800965c:	ec51 0b18 	vmov	r0, r1, d8
 8009660:	f7f7 fada 	bl	8000c18 <__aeabi_dcmpeq>
 8009664:	2800      	cmp	r0, #0
 8009666:	f43f af3a 	beq.w	80094de <pow+0xee>
 800966a:	ec47 6b10 	vmov	d0, r6, r7
 800966e:	f000 fe52 	bl	800a316 <finite>
 8009672:	2800      	cmp	r0, #0
 8009674:	f43f af33 	beq.w	80094de <pow+0xee>
 8009678:	ec45 4b10 	vmov	d0, r4, r5
 800967c:	f000 fe4b 	bl	800a316 <finite>
 8009680:	2800      	cmp	r0, #0
 8009682:	f43f af2c 	beq.w	80094de <pow+0xee>
 8009686:	2304      	movs	r3, #4
 8009688:	9302      	str	r3, [sp, #8]
 800968a:	4b09      	ldr	r3, [pc, #36]	; (80096b0 <pow+0x2c0>)
 800968c:	9303      	str	r3, [sp, #12]
 800968e:	2300      	movs	r3, #0
 8009690:	930a      	str	r3, [sp, #40]	; 0x28
 8009692:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009696:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800969a:	ed8d 9b08 	vstr	d9, [sp, #32]
 800969e:	e7b8      	b.n	8009612 <pow+0x222>
 80096a0:	a802      	add	r0, sp, #8
 80096a2:	f000 fe40 	bl	800a326 <matherr>
 80096a6:	2800      	cmp	r0, #0
 80096a8:	f47f af11 	bne.w	80094ce <pow+0xde>
 80096ac:	e7b5      	b.n	800961a <pow+0x22a>
 80096ae:	bf00      	nop
 80096b0:	0800ab9d 	.word	0x0800ab9d
 80096b4:	3ff00000 	.word	0x3ff00000
 80096b8:	fff00000 	.word	0xfff00000
 80096bc:	3fe00000 	.word	0x3fe00000
 80096c0:	47efffff 	.word	0x47efffff
 80096c4:	c7efffff 	.word	0xc7efffff
 80096c8:	7ff00000 	.word	0x7ff00000
 80096cc:	20000a30 	.word	0x20000a30

080096d0 <sqrt>:
 80096d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80096d4:	ed2d 8b02 	vpush	{d8}
 80096d8:	b08b      	sub	sp, #44	; 0x2c
 80096da:	ec55 4b10 	vmov	r4, r5, d0
 80096de:	f000 fd61 	bl	800a1a4 <__ieee754_sqrt>
 80096e2:	4b26      	ldr	r3, [pc, #152]	; (800977c <sqrt+0xac>)
 80096e4:	eeb0 8a40 	vmov.f32	s16, s0
 80096e8:	eef0 8a60 	vmov.f32	s17, s1
 80096ec:	f993 6000 	ldrsb.w	r6, [r3]
 80096f0:	1c73      	adds	r3, r6, #1
 80096f2:	d02a      	beq.n	800974a <sqrt+0x7a>
 80096f4:	4622      	mov	r2, r4
 80096f6:	462b      	mov	r3, r5
 80096f8:	4620      	mov	r0, r4
 80096fa:	4629      	mov	r1, r5
 80096fc:	f7f7 fabe 	bl	8000c7c <__aeabi_dcmpun>
 8009700:	4607      	mov	r7, r0
 8009702:	bb10      	cbnz	r0, 800974a <sqrt+0x7a>
 8009704:	f04f 0800 	mov.w	r8, #0
 8009708:	f04f 0900 	mov.w	r9, #0
 800970c:	4642      	mov	r2, r8
 800970e:	464b      	mov	r3, r9
 8009710:	4620      	mov	r0, r4
 8009712:	4629      	mov	r1, r5
 8009714:	f7f7 fa8a 	bl	8000c2c <__aeabi_dcmplt>
 8009718:	b1b8      	cbz	r0, 800974a <sqrt+0x7a>
 800971a:	2301      	movs	r3, #1
 800971c:	9300      	str	r3, [sp, #0]
 800971e:	4b18      	ldr	r3, [pc, #96]	; (8009780 <sqrt+0xb0>)
 8009720:	9301      	str	r3, [sp, #4]
 8009722:	9708      	str	r7, [sp, #32]
 8009724:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8009728:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800972c:	b9b6      	cbnz	r6, 800975c <sqrt+0x8c>
 800972e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8009732:	4668      	mov	r0, sp
 8009734:	f000 fdf7 	bl	800a326 <matherr>
 8009738:	b1d0      	cbz	r0, 8009770 <sqrt+0xa0>
 800973a:	9b08      	ldr	r3, [sp, #32]
 800973c:	b11b      	cbz	r3, 8009746 <sqrt+0x76>
 800973e:	f7fc fb7b 	bl	8005e38 <__errno>
 8009742:	9b08      	ldr	r3, [sp, #32]
 8009744:	6003      	str	r3, [r0, #0]
 8009746:	ed9d 8b06 	vldr	d8, [sp, #24]
 800974a:	eeb0 0a48 	vmov.f32	s0, s16
 800974e:	eef0 0a68 	vmov.f32	s1, s17
 8009752:	b00b      	add	sp, #44	; 0x2c
 8009754:	ecbd 8b02 	vpop	{d8}
 8009758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800975c:	4642      	mov	r2, r8
 800975e:	464b      	mov	r3, r9
 8009760:	4640      	mov	r0, r8
 8009762:	4649      	mov	r1, r9
 8009764:	f7f7 f91a 	bl	800099c <__aeabi_ddiv>
 8009768:	2e02      	cmp	r6, #2
 800976a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800976e:	d1e0      	bne.n	8009732 <sqrt+0x62>
 8009770:	f7fc fb62 	bl	8005e38 <__errno>
 8009774:	2321      	movs	r3, #33	; 0x21
 8009776:	6003      	str	r3, [r0, #0]
 8009778:	e7df      	b.n	800973a <sqrt+0x6a>
 800977a:	bf00      	nop
 800977c:	20000a30 	.word	0x20000a30
 8009780:	0800aba1 	.word	0x0800aba1
 8009784:	00000000 	.word	0x00000000

08009788 <__ieee754_pow>:
 8009788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978c:	b091      	sub	sp, #68	; 0x44
 800978e:	ed8d 1b00 	vstr	d1, [sp]
 8009792:	e9dd 2900 	ldrd	r2, r9, [sp]
 8009796:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800979a:	ea58 0302 	orrs.w	r3, r8, r2
 800979e:	ec57 6b10 	vmov	r6, r7, d0
 80097a2:	f000 84be 	beq.w	800a122 <__ieee754_pow+0x99a>
 80097a6:	4b7a      	ldr	r3, [pc, #488]	; (8009990 <__ieee754_pow+0x208>)
 80097a8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80097ac:	429c      	cmp	r4, r3
 80097ae:	463d      	mov	r5, r7
 80097b0:	ee10 aa10 	vmov	sl, s0
 80097b4:	dc09      	bgt.n	80097ca <__ieee754_pow+0x42>
 80097b6:	d103      	bne.n	80097c0 <__ieee754_pow+0x38>
 80097b8:	b93e      	cbnz	r6, 80097ca <__ieee754_pow+0x42>
 80097ba:	45a0      	cmp	r8, r4
 80097bc:	dc0d      	bgt.n	80097da <__ieee754_pow+0x52>
 80097be:	e001      	b.n	80097c4 <__ieee754_pow+0x3c>
 80097c0:	4598      	cmp	r8, r3
 80097c2:	dc02      	bgt.n	80097ca <__ieee754_pow+0x42>
 80097c4:	4598      	cmp	r8, r3
 80097c6:	d10e      	bne.n	80097e6 <__ieee754_pow+0x5e>
 80097c8:	b16a      	cbz	r2, 80097e6 <__ieee754_pow+0x5e>
 80097ca:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80097ce:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80097d2:	ea54 030a 	orrs.w	r3, r4, sl
 80097d6:	f000 84a4 	beq.w	800a122 <__ieee754_pow+0x99a>
 80097da:	486e      	ldr	r0, [pc, #440]	; (8009994 <__ieee754_pow+0x20c>)
 80097dc:	b011      	add	sp, #68	; 0x44
 80097de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e2:	f000 bda5 	b.w	800a330 <nan>
 80097e6:	2d00      	cmp	r5, #0
 80097e8:	da53      	bge.n	8009892 <__ieee754_pow+0x10a>
 80097ea:	4b6b      	ldr	r3, [pc, #428]	; (8009998 <__ieee754_pow+0x210>)
 80097ec:	4598      	cmp	r8, r3
 80097ee:	dc4d      	bgt.n	800988c <__ieee754_pow+0x104>
 80097f0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80097f4:	4598      	cmp	r8, r3
 80097f6:	dd4c      	ble.n	8009892 <__ieee754_pow+0x10a>
 80097f8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80097fc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009800:	2b14      	cmp	r3, #20
 8009802:	dd26      	ble.n	8009852 <__ieee754_pow+0xca>
 8009804:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009808:	fa22 f103 	lsr.w	r1, r2, r3
 800980c:	fa01 f303 	lsl.w	r3, r1, r3
 8009810:	4293      	cmp	r3, r2
 8009812:	d13e      	bne.n	8009892 <__ieee754_pow+0x10a>
 8009814:	f001 0101 	and.w	r1, r1, #1
 8009818:	f1c1 0b02 	rsb	fp, r1, #2
 800981c:	2a00      	cmp	r2, #0
 800981e:	d15b      	bne.n	80098d8 <__ieee754_pow+0x150>
 8009820:	4b5b      	ldr	r3, [pc, #364]	; (8009990 <__ieee754_pow+0x208>)
 8009822:	4598      	cmp	r8, r3
 8009824:	d124      	bne.n	8009870 <__ieee754_pow+0xe8>
 8009826:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800982a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800982e:	ea53 030a 	orrs.w	r3, r3, sl
 8009832:	f000 8476 	beq.w	800a122 <__ieee754_pow+0x99a>
 8009836:	4b59      	ldr	r3, [pc, #356]	; (800999c <__ieee754_pow+0x214>)
 8009838:	429c      	cmp	r4, r3
 800983a:	dd2d      	ble.n	8009898 <__ieee754_pow+0x110>
 800983c:	f1b9 0f00 	cmp.w	r9, #0
 8009840:	f280 8473 	bge.w	800a12a <__ieee754_pow+0x9a2>
 8009844:	2000      	movs	r0, #0
 8009846:	2100      	movs	r1, #0
 8009848:	ec41 0b10 	vmov	d0, r0, r1
 800984c:	b011      	add	sp, #68	; 0x44
 800984e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009852:	2a00      	cmp	r2, #0
 8009854:	d13e      	bne.n	80098d4 <__ieee754_pow+0x14c>
 8009856:	f1c3 0314 	rsb	r3, r3, #20
 800985a:	fa48 f103 	asr.w	r1, r8, r3
 800985e:	fa01 f303 	lsl.w	r3, r1, r3
 8009862:	4543      	cmp	r3, r8
 8009864:	f040 8469 	bne.w	800a13a <__ieee754_pow+0x9b2>
 8009868:	f001 0101 	and.w	r1, r1, #1
 800986c:	f1c1 0b02 	rsb	fp, r1, #2
 8009870:	4b4b      	ldr	r3, [pc, #300]	; (80099a0 <__ieee754_pow+0x218>)
 8009872:	4598      	cmp	r8, r3
 8009874:	d118      	bne.n	80098a8 <__ieee754_pow+0x120>
 8009876:	f1b9 0f00 	cmp.w	r9, #0
 800987a:	f280 845a 	bge.w	800a132 <__ieee754_pow+0x9aa>
 800987e:	4948      	ldr	r1, [pc, #288]	; (80099a0 <__ieee754_pow+0x218>)
 8009880:	4632      	mov	r2, r6
 8009882:	463b      	mov	r3, r7
 8009884:	2000      	movs	r0, #0
 8009886:	f7f7 f889 	bl	800099c <__aeabi_ddiv>
 800988a:	e7dd      	b.n	8009848 <__ieee754_pow+0xc0>
 800988c:	f04f 0b02 	mov.w	fp, #2
 8009890:	e7c4      	b.n	800981c <__ieee754_pow+0x94>
 8009892:	f04f 0b00 	mov.w	fp, #0
 8009896:	e7c1      	b.n	800981c <__ieee754_pow+0x94>
 8009898:	f1b9 0f00 	cmp.w	r9, #0
 800989c:	dad2      	bge.n	8009844 <__ieee754_pow+0xbc>
 800989e:	e9dd 0300 	ldrd	r0, r3, [sp]
 80098a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80098a6:	e7cf      	b.n	8009848 <__ieee754_pow+0xc0>
 80098a8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80098ac:	d106      	bne.n	80098bc <__ieee754_pow+0x134>
 80098ae:	4632      	mov	r2, r6
 80098b0:	463b      	mov	r3, r7
 80098b2:	4610      	mov	r0, r2
 80098b4:	4619      	mov	r1, r3
 80098b6:	f7f6 ff47 	bl	8000748 <__aeabi_dmul>
 80098ba:	e7c5      	b.n	8009848 <__ieee754_pow+0xc0>
 80098bc:	4b39      	ldr	r3, [pc, #228]	; (80099a4 <__ieee754_pow+0x21c>)
 80098be:	4599      	cmp	r9, r3
 80098c0:	d10a      	bne.n	80098d8 <__ieee754_pow+0x150>
 80098c2:	2d00      	cmp	r5, #0
 80098c4:	db08      	blt.n	80098d8 <__ieee754_pow+0x150>
 80098c6:	ec47 6b10 	vmov	d0, r6, r7
 80098ca:	b011      	add	sp, #68	; 0x44
 80098cc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d0:	f000 bc68 	b.w	800a1a4 <__ieee754_sqrt>
 80098d4:	f04f 0b00 	mov.w	fp, #0
 80098d8:	ec47 6b10 	vmov	d0, r6, r7
 80098dc:	f000 fd12 	bl	800a304 <fabs>
 80098e0:	ec51 0b10 	vmov	r0, r1, d0
 80098e4:	f1ba 0f00 	cmp.w	sl, #0
 80098e8:	d127      	bne.n	800993a <__ieee754_pow+0x1b2>
 80098ea:	b124      	cbz	r4, 80098f6 <__ieee754_pow+0x16e>
 80098ec:	4b2c      	ldr	r3, [pc, #176]	; (80099a0 <__ieee754_pow+0x218>)
 80098ee:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d121      	bne.n	800993a <__ieee754_pow+0x1b2>
 80098f6:	f1b9 0f00 	cmp.w	r9, #0
 80098fa:	da05      	bge.n	8009908 <__ieee754_pow+0x180>
 80098fc:	4602      	mov	r2, r0
 80098fe:	460b      	mov	r3, r1
 8009900:	2000      	movs	r0, #0
 8009902:	4927      	ldr	r1, [pc, #156]	; (80099a0 <__ieee754_pow+0x218>)
 8009904:	f7f7 f84a 	bl	800099c <__aeabi_ddiv>
 8009908:	2d00      	cmp	r5, #0
 800990a:	da9d      	bge.n	8009848 <__ieee754_pow+0xc0>
 800990c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009910:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009914:	ea54 030b 	orrs.w	r3, r4, fp
 8009918:	d108      	bne.n	800992c <__ieee754_pow+0x1a4>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4610      	mov	r0, r2
 8009920:	4619      	mov	r1, r3
 8009922:	f7f6 fd59 	bl	80003d8 <__aeabi_dsub>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	e7ac      	b.n	8009886 <__ieee754_pow+0xfe>
 800992c:	f1bb 0f01 	cmp.w	fp, #1
 8009930:	d18a      	bne.n	8009848 <__ieee754_pow+0xc0>
 8009932:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009936:	4619      	mov	r1, r3
 8009938:	e786      	b.n	8009848 <__ieee754_pow+0xc0>
 800993a:	0fed      	lsrs	r5, r5, #31
 800993c:	1e6b      	subs	r3, r5, #1
 800993e:	930d      	str	r3, [sp, #52]	; 0x34
 8009940:	ea5b 0303 	orrs.w	r3, fp, r3
 8009944:	d102      	bne.n	800994c <__ieee754_pow+0x1c4>
 8009946:	4632      	mov	r2, r6
 8009948:	463b      	mov	r3, r7
 800994a:	e7e8      	b.n	800991e <__ieee754_pow+0x196>
 800994c:	4b16      	ldr	r3, [pc, #88]	; (80099a8 <__ieee754_pow+0x220>)
 800994e:	4598      	cmp	r8, r3
 8009950:	f340 80fe 	ble.w	8009b50 <__ieee754_pow+0x3c8>
 8009954:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8009958:	4598      	cmp	r8, r3
 800995a:	dd0a      	ble.n	8009972 <__ieee754_pow+0x1ea>
 800995c:	4b0f      	ldr	r3, [pc, #60]	; (800999c <__ieee754_pow+0x214>)
 800995e:	429c      	cmp	r4, r3
 8009960:	dc0d      	bgt.n	800997e <__ieee754_pow+0x1f6>
 8009962:	f1b9 0f00 	cmp.w	r9, #0
 8009966:	f6bf af6d 	bge.w	8009844 <__ieee754_pow+0xbc>
 800996a:	a307      	add	r3, pc, #28	; (adr r3, 8009988 <__ieee754_pow+0x200>)
 800996c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009970:	e79f      	b.n	80098b2 <__ieee754_pow+0x12a>
 8009972:	4b0e      	ldr	r3, [pc, #56]	; (80099ac <__ieee754_pow+0x224>)
 8009974:	429c      	cmp	r4, r3
 8009976:	ddf4      	ble.n	8009962 <__ieee754_pow+0x1da>
 8009978:	4b09      	ldr	r3, [pc, #36]	; (80099a0 <__ieee754_pow+0x218>)
 800997a:	429c      	cmp	r4, r3
 800997c:	dd18      	ble.n	80099b0 <__ieee754_pow+0x228>
 800997e:	f1b9 0f00 	cmp.w	r9, #0
 8009982:	dcf2      	bgt.n	800996a <__ieee754_pow+0x1e2>
 8009984:	e75e      	b.n	8009844 <__ieee754_pow+0xbc>
 8009986:	bf00      	nop
 8009988:	8800759c 	.word	0x8800759c
 800998c:	7e37e43c 	.word	0x7e37e43c
 8009990:	7ff00000 	.word	0x7ff00000
 8009994:	0800a99e 	.word	0x0800a99e
 8009998:	433fffff 	.word	0x433fffff
 800999c:	3fefffff 	.word	0x3fefffff
 80099a0:	3ff00000 	.word	0x3ff00000
 80099a4:	3fe00000 	.word	0x3fe00000
 80099a8:	41e00000 	.word	0x41e00000
 80099ac:	3feffffe 	.word	0x3feffffe
 80099b0:	2200      	movs	r2, #0
 80099b2:	4b63      	ldr	r3, [pc, #396]	; (8009b40 <__ieee754_pow+0x3b8>)
 80099b4:	f7f6 fd10 	bl	80003d8 <__aeabi_dsub>
 80099b8:	a355      	add	r3, pc, #340	; (adr r3, 8009b10 <__ieee754_pow+0x388>)
 80099ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099be:	4604      	mov	r4, r0
 80099c0:	460d      	mov	r5, r1
 80099c2:	f7f6 fec1 	bl	8000748 <__aeabi_dmul>
 80099c6:	a354      	add	r3, pc, #336	; (adr r3, 8009b18 <__ieee754_pow+0x390>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	4606      	mov	r6, r0
 80099ce:	460f      	mov	r7, r1
 80099d0:	4620      	mov	r0, r4
 80099d2:	4629      	mov	r1, r5
 80099d4:	f7f6 feb8 	bl	8000748 <__aeabi_dmul>
 80099d8:	2200      	movs	r2, #0
 80099da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099de:	4b59      	ldr	r3, [pc, #356]	; (8009b44 <__ieee754_pow+0x3bc>)
 80099e0:	4620      	mov	r0, r4
 80099e2:	4629      	mov	r1, r5
 80099e4:	f7f6 feb0 	bl	8000748 <__aeabi_dmul>
 80099e8:	4602      	mov	r2, r0
 80099ea:	460b      	mov	r3, r1
 80099ec:	a14c      	add	r1, pc, #304	; (adr r1, 8009b20 <__ieee754_pow+0x398>)
 80099ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80099f2:	f7f6 fcf1 	bl	80003d8 <__aeabi_dsub>
 80099f6:	4622      	mov	r2, r4
 80099f8:	462b      	mov	r3, r5
 80099fa:	f7f6 fea5 	bl	8000748 <__aeabi_dmul>
 80099fe:	4602      	mov	r2, r0
 8009a00:	460b      	mov	r3, r1
 8009a02:	2000      	movs	r0, #0
 8009a04:	4950      	ldr	r1, [pc, #320]	; (8009b48 <__ieee754_pow+0x3c0>)
 8009a06:	f7f6 fce7 	bl	80003d8 <__aeabi_dsub>
 8009a0a:	4622      	mov	r2, r4
 8009a0c:	462b      	mov	r3, r5
 8009a0e:	4680      	mov	r8, r0
 8009a10:	4689      	mov	r9, r1
 8009a12:	4620      	mov	r0, r4
 8009a14:	4629      	mov	r1, r5
 8009a16:	f7f6 fe97 	bl	8000748 <__aeabi_dmul>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4640      	mov	r0, r8
 8009a20:	4649      	mov	r1, r9
 8009a22:	f7f6 fe91 	bl	8000748 <__aeabi_dmul>
 8009a26:	a340      	add	r3, pc, #256	; (adr r3, 8009b28 <__ieee754_pow+0x3a0>)
 8009a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a2c:	f7f6 fe8c 	bl	8000748 <__aeabi_dmul>
 8009a30:	4602      	mov	r2, r0
 8009a32:	460b      	mov	r3, r1
 8009a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a38:	f7f6 fcce 	bl	80003d8 <__aeabi_dsub>
 8009a3c:	4602      	mov	r2, r0
 8009a3e:	460b      	mov	r3, r1
 8009a40:	4604      	mov	r4, r0
 8009a42:	460d      	mov	r5, r1
 8009a44:	4630      	mov	r0, r6
 8009a46:	4639      	mov	r1, r7
 8009a48:	f7f6 fcc8 	bl	80003dc <__adddf3>
 8009a4c:	2000      	movs	r0, #0
 8009a4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009a52:	4632      	mov	r2, r6
 8009a54:	463b      	mov	r3, r7
 8009a56:	f7f6 fcbf 	bl	80003d8 <__aeabi_dsub>
 8009a5a:	4602      	mov	r2, r0
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	4620      	mov	r0, r4
 8009a60:	4629      	mov	r1, r5
 8009a62:	f7f6 fcb9 	bl	80003d8 <__aeabi_dsub>
 8009a66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009a68:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	4606      	mov	r6, r0
 8009a70:	460f      	mov	r7, r1
 8009a72:	f040 81eb 	bne.w	8009e4c <__ieee754_pow+0x6c4>
 8009a76:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009b30 <__ieee754_pow+0x3a8>
 8009a7a:	e9dd 4500 	ldrd	r4, r5, [sp]
 8009a7e:	2400      	movs	r4, #0
 8009a80:	4622      	mov	r2, r4
 8009a82:	462b      	mov	r3, r5
 8009a84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a8c:	f7f6 fca4 	bl	80003d8 <__aeabi_dsub>
 8009a90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a94:	f7f6 fe58 	bl	8000748 <__aeabi_dmul>
 8009a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a9c:	4680      	mov	r8, r0
 8009a9e:	4689      	mov	r9, r1
 8009aa0:	4630      	mov	r0, r6
 8009aa2:	4639      	mov	r1, r7
 8009aa4:	f7f6 fe50 	bl	8000748 <__aeabi_dmul>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	460b      	mov	r3, r1
 8009aac:	4640      	mov	r0, r8
 8009aae:	4649      	mov	r1, r9
 8009ab0:	f7f6 fc94 	bl	80003dc <__adddf3>
 8009ab4:	4622      	mov	r2, r4
 8009ab6:	462b      	mov	r3, r5
 8009ab8:	4680      	mov	r8, r0
 8009aba:	4689      	mov	r9, r1
 8009abc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009ac0:	f7f6 fe42 	bl	8000748 <__aeabi_dmul>
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4604      	mov	r4, r0
 8009ac8:	460d      	mov	r5, r1
 8009aca:	4602      	mov	r2, r0
 8009acc:	4649      	mov	r1, r9
 8009ace:	4640      	mov	r0, r8
 8009ad0:	e9cd 4500 	strd	r4, r5, [sp]
 8009ad4:	f7f6 fc82 	bl	80003dc <__adddf3>
 8009ad8:	4b1c      	ldr	r3, [pc, #112]	; (8009b4c <__ieee754_pow+0x3c4>)
 8009ada:	4299      	cmp	r1, r3
 8009adc:	4606      	mov	r6, r0
 8009ade:	460f      	mov	r7, r1
 8009ae0:	468b      	mov	fp, r1
 8009ae2:	f340 82f7 	ble.w	800a0d4 <__ieee754_pow+0x94c>
 8009ae6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009aea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009aee:	4303      	orrs	r3, r0
 8009af0:	f000 81ea 	beq.w	8009ec8 <__ieee754_pow+0x740>
 8009af4:	a310      	add	r3, pc, #64	; (adr r3, 8009b38 <__ieee754_pow+0x3b0>)
 8009af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009afe:	f7f6 fe23 	bl	8000748 <__aeabi_dmul>
 8009b02:	a30d      	add	r3, pc, #52	; (adr r3, 8009b38 <__ieee754_pow+0x3b0>)
 8009b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b08:	e6d5      	b.n	80098b6 <__ieee754_pow+0x12e>
 8009b0a:	bf00      	nop
 8009b0c:	f3af 8000 	nop.w
 8009b10:	60000000 	.word	0x60000000
 8009b14:	3ff71547 	.word	0x3ff71547
 8009b18:	f85ddf44 	.word	0xf85ddf44
 8009b1c:	3e54ae0b 	.word	0x3e54ae0b
 8009b20:	55555555 	.word	0x55555555
 8009b24:	3fd55555 	.word	0x3fd55555
 8009b28:	652b82fe 	.word	0x652b82fe
 8009b2c:	3ff71547 	.word	0x3ff71547
 8009b30:	00000000 	.word	0x00000000
 8009b34:	bff00000 	.word	0xbff00000
 8009b38:	8800759c 	.word	0x8800759c
 8009b3c:	7e37e43c 	.word	0x7e37e43c
 8009b40:	3ff00000 	.word	0x3ff00000
 8009b44:	3fd00000 	.word	0x3fd00000
 8009b48:	3fe00000 	.word	0x3fe00000
 8009b4c:	408fffff 	.word	0x408fffff
 8009b50:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8009b54:	f04f 0200 	mov.w	r2, #0
 8009b58:	da05      	bge.n	8009b66 <__ieee754_pow+0x3de>
 8009b5a:	4bd3      	ldr	r3, [pc, #844]	; (8009ea8 <__ieee754_pow+0x720>)
 8009b5c:	f7f6 fdf4 	bl	8000748 <__aeabi_dmul>
 8009b60:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009b64:	460c      	mov	r4, r1
 8009b66:	1523      	asrs	r3, r4, #20
 8009b68:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8009b6c:	4413      	add	r3, r2
 8009b6e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b70:	4bce      	ldr	r3, [pc, #824]	; (8009eac <__ieee754_pow+0x724>)
 8009b72:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009b76:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8009b7a:	429c      	cmp	r4, r3
 8009b7c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009b80:	dd08      	ble.n	8009b94 <__ieee754_pow+0x40c>
 8009b82:	4bcb      	ldr	r3, [pc, #812]	; (8009eb0 <__ieee754_pow+0x728>)
 8009b84:	429c      	cmp	r4, r3
 8009b86:	f340 815e 	ble.w	8009e46 <__ieee754_pow+0x6be>
 8009b8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b90:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8009b94:	f04f 0a00 	mov.w	sl, #0
 8009b98:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8009b9c:	930c      	str	r3, [sp, #48]	; 0x30
 8009b9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ba0:	4bc4      	ldr	r3, [pc, #784]	; (8009eb4 <__ieee754_pow+0x72c>)
 8009ba2:	4413      	add	r3, r2
 8009ba4:	ed93 7b00 	vldr	d7, [r3]
 8009ba8:	4629      	mov	r1, r5
 8009baa:	ec53 2b17 	vmov	r2, r3, d7
 8009bae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009bb2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009bb6:	f7f6 fc0f 	bl	80003d8 <__aeabi_dsub>
 8009bba:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009bbe:	4606      	mov	r6, r0
 8009bc0:	460f      	mov	r7, r1
 8009bc2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009bc6:	f7f6 fc09 	bl	80003dc <__adddf3>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	2000      	movs	r0, #0
 8009bd0:	49b9      	ldr	r1, [pc, #740]	; (8009eb8 <__ieee754_pow+0x730>)
 8009bd2:	f7f6 fee3 	bl	800099c <__aeabi_ddiv>
 8009bd6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8009bda:	4602      	mov	r2, r0
 8009bdc:	460b      	mov	r3, r1
 8009bde:	4630      	mov	r0, r6
 8009be0:	4639      	mov	r1, r7
 8009be2:	f7f6 fdb1 	bl	8000748 <__aeabi_dmul>
 8009be6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bea:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8009bee:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009bf2:	2300      	movs	r3, #0
 8009bf4:	9302      	str	r3, [sp, #8]
 8009bf6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009bfa:	106d      	asrs	r5, r5, #1
 8009bfc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009c00:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009c04:	2200      	movs	r2, #0
 8009c06:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009c0a:	4640      	mov	r0, r8
 8009c0c:	4649      	mov	r1, r9
 8009c0e:	4614      	mov	r4, r2
 8009c10:	461d      	mov	r5, r3
 8009c12:	f7f6 fd99 	bl	8000748 <__aeabi_dmul>
 8009c16:	4602      	mov	r2, r0
 8009c18:	460b      	mov	r3, r1
 8009c1a:	4630      	mov	r0, r6
 8009c1c:	4639      	mov	r1, r7
 8009c1e:	f7f6 fbdb 	bl	80003d8 <__aeabi_dsub>
 8009c22:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009c26:	4606      	mov	r6, r0
 8009c28:	460f      	mov	r7, r1
 8009c2a:	4620      	mov	r0, r4
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	f7f6 fbd3 	bl	80003d8 <__aeabi_dsub>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009c3a:	f7f6 fbcd 	bl	80003d8 <__aeabi_dsub>
 8009c3e:	4642      	mov	r2, r8
 8009c40:	464b      	mov	r3, r9
 8009c42:	f7f6 fd81 	bl	8000748 <__aeabi_dmul>
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	4630      	mov	r0, r6
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	f7f6 fbc3 	bl	80003d8 <__aeabi_dsub>
 8009c52:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009c56:	f7f6 fd77 	bl	8000748 <__aeabi_dmul>
 8009c5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c5e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009c62:	4610      	mov	r0, r2
 8009c64:	4619      	mov	r1, r3
 8009c66:	f7f6 fd6f 	bl	8000748 <__aeabi_dmul>
 8009c6a:	a37b      	add	r3, pc, #492	; (adr r3, 8009e58 <__ieee754_pow+0x6d0>)
 8009c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c70:	4604      	mov	r4, r0
 8009c72:	460d      	mov	r5, r1
 8009c74:	f7f6 fd68 	bl	8000748 <__aeabi_dmul>
 8009c78:	a379      	add	r3, pc, #484	; (adr r3, 8009e60 <__ieee754_pow+0x6d8>)
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	f7f6 fbad 	bl	80003dc <__adddf3>
 8009c82:	4622      	mov	r2, r4
 8009c84:	462b      	mov	r3, r5
 8009c86:	f7f6 fd5f 	bl	8000748 <__aeabi_dmul>
 8009c8a:	a377      	add	r3, pc, #476	; (adr r3, 8009e68 <__ieee754_pow+0x6e0>)
 8009c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c90:	f7f6 fba4 	bl	80003dc <__adddf3>
 8009c94:	4622      	mov	r2, r4
 8009c96:	462b      	mov	r3, r5
 8009c98:	f7f6 fd56 	bl	8000748 <__aeabi_dmul>
 8009c9c:	a374      	add	r3, pc, #464	; (adr r3, 8009e70 <__ieee754_pow+0x6e8>)
 8009c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca2:	f7f6 fb9b 	bl	80003dc <__adddf3>
 8009ca6:	4622      	mov	r2, r4
 8009ca8:	462b      	mov	r3, r5
 8009caa:	f7f6 fd4d 	bl	8000748 <__aeabi_dmul>
 8009cae:	a372      	add	r3, pc, #456	; (adr r3, 8009e78 <__ieee754_pow+0x6f0>)
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	f7f6 fb92 	bl	80003dc <__adddf3>
 8009cb8:	4622      	mov	r2, r4
 8009cba:	462b      	mov	r3, r5
 8009cbc:	f7f6 fd44 	bl	8000748 <__aeabi_dmul>
 8009cc0:	a36f      	add	r3, pc, #444	; (adr r3, 8009e80 <__ieee754_pow+0x6f8>)
 8009cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc6:	f7f6 fb89 	bl	80003dc <__adddf3>
 8009cca:	4622      	mov	r2, r4
 8009ccc:	4606      	mov	r6, r0
 8009cce:	460f      	mov	r7, r1
 8009cd0:	462b      	mov	r3, r5
 8009cd2:	4620      	mov	r0, r4
 8009cd4:	4629      	mov	r1, r5
 8009cd6:	f7f6 fd37 	bl	8000748 <__aeabi_dmul>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4630      	mov	r0, r6
 8009ce0:	4639      	mov	r1, r7
 8009ce2:	f7f6 fd31 	bl	8000748 <__aeabi_dmul>
 8009ce6:	4642      	mov	r2, r8
 8009ce8:	4604      	mov	r4, r0
 8009cea:	460d      	mov	r5, r1
 8009cec:	464b      	mov	r3, r9
 8009cee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009cf2:	f7f6 fb73 	bl	80003dc <__adddf3>
 8009cf6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009cfa:	f7f6 fd25 	bl	8000748 <__aeabi_dmul>
 8009cfe:	4622      	mov	r2, r4
 8009d00:	462b      	mov	r3, r5
 8009d02:	f7f6 fb6b 	bl	80003dc <__adddf3>
 8009d06:	4642      	mov	r2, r8
 8009d08:	4606      	mov	r6, r0
 8009d0a:	460f      	mov	r7, r1
 8009d0c:	464b      	mov	r3, r9
 8009d0e:	4640      	mov	r0, r8
 8009d10:	4649      	mov	r1, r9
 8009d12:	f7f6 fd19 	bl	8000748 <__aeabi_dmul>
 8009d16:	2200      	movs	r2, #0
 8009d18:	4b68      	ldr	r3, [pc, #416]	; (8009ebc <__ieee754_pow+0x734>)
 8009d1a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009d1e:	f7f6 fb5d 	bl	80003dc <__adddf3>
 8009d22:	4632      	mov	r2, r6
 8009d24:	463b      	mov	r3, r7
 8009d26:	f7f6 fb59 	bl	80003dc <__adddf3>
 8009d2a:	9802      	ldr	r0, [sp, #8]
 8009d2c:	460d      	mov	r5, r1
 8009d2e:	4604      	mov	r4, r0
 8009d30:	4602      	mov	r2, r0
 8009d32:	460b      	mov	r3, r1
 8009d34:	4640      	mov	r0, r8
 8009d36:	4649      	mov	r1, r9
 8009d38:	f7f6 fd06 	bl	8000748 <__aeabi_dmul>
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	4680      	mov	r8, r0
 8009d40:	4689      	mov	r9, r1
 8009d42:	4b5e      	ldr	r3, [pc, #376]	; (8009ebc <__ieee754_pow+0x734>)
 8009d44:	4620      	mov	r0, r4
 8009d46:	4629      	mov	r1, r5
 8009d48:	f7f6 fb46 	bl	80003d8 <__aeabi_dsub>
 8009d4c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009d50:	f7f6 fb42 	bl	80003d8 <__aeabi_dsub>
 8009d54:	4602      	mov	r2, r0
 8009d56:	460b      	mov	r3, r1
 8009d58:	4630      	mov	r0, r6
 8009d5a:	4639      	mov	r1, r7
 8009d5c:	f7f6 fb3c 	bl	80003d8 <__aeabi_dsub>
 8009d60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d64:	f7f6 fcf0 	bl	8000748 <__aeabi_dmul>
 8009d68:	4622      	mov	r2, r4
 8009d6a:	4606      	mov	r6, r0
 8009d6c:	460f      	mov	r7, r1
 8009d6e:	462b      	mov	r3, r5
 8009d70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009d74:	f7f6 fce8 	bl	8000748 <__aeabi_dmul>
 8009d78:	4602      	mov	r2, r0
 8009d7a:	460b      	mov	r3, r1
 8009d7c:	4630      	mov	r0, r6
 8009d7e:	4639      	mov	r1, r7
 8009d80:	f7f6 fb2c 	bl	80003dc <__adddf3>
 8009d84:	4606      	mov	r6, r0
 8009d86:	460f      	mov	r7, r1
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	4640      	mov	r0, r8
 8009d8e:	4649      	mov	r1, r9
 8009d90:	f7f6 fb24 	bl	80003dc <__adddf3>
 8009d94:	9802      	ldr	r0, [sp, #8]
 8009d96:	a33c      	add	r3, pc, #240	; (adr r3, 8009e88 <__ieee754_pow+0x700>)
 8009d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d9c:	4604      	mov	r4, r0
 8009d9e:	460d      	mov	r5, r1
 8009da0:	f7f6 fcd2 	bl	8000748 <__aeabi_dmul>
 8009da4:	4642      	mov	r2, r8
 8009da6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009daa:	464b      	mov	r3, r9
 8009dac:	4620      	mov	r0, r4
 8009dae:	4629      	mov	r1, r5
 8009db0:	f7f6 fb12 	bl	80003d8 <__aeabi_dsub>
 8009db4:	4602      	mov	r2, r0
 8009db6:	460b      	mov	r3, r1
 8009db8:	4630      	mov	r0, r6
 8009dba:	4639      	mov	r1, r7
 8009dbc:	f7f6 fb0c 	bl	80003d8 <__aeabi_dsub>
 8009dc0:	a333      	add	r3, pc, #204	; (adr r3, 8009e90 <__ieee754_pow+0x708>)
 8009dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dc6:	f7f6 fcbf 	bl	8000748 <__aeabi_dmul>
 8009dca:	a333      	add	r3, pc, #204	; (adr r3, 8009e98 <__ieee754_pow+0x710>)
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	4606      	mov	r6, r0
 8009dd2:	460f      	mov	r7, r1
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	4629      	mov	r1, r5
 8009dd8:	f7f6 fcb6 	bl	8000748 <__aeabi_dmul>
 8009ddc:	4602      	mov	r2, r0
 8009dde:	460b      	mov	r3, r1
 8009de0:	4630      	mov	r0, r6
 8009de2:	4639      	mov	r1, r7
 8009de4:	f7f6 fafa 	bl	80003dc <__adddf3>
 8009de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009dea:	4b35      	ldr	r3, [pc, #212]	; (8009ec0 <__ieee754_pow+0x738>)
 8009dec:	4413      	add	r3, r2
 8009dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009df2:	f7f6 faf3 	bl	80003dc <__adddf3>
 8009df6:	4604      	mov	r4, r0
 8009df8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dfa:	460d      	mov	r5, r1
 8009dfc:	f7f6 fc3a 	bl	8000674 <__aeabi_i2d>
 8009e00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e02:	4b30      	ldr	r3, [pc, #192]	; (8009ec4 <__ieee754_pow+0x73c>)
 8009e04:	4413      	add	r3, r2
 8009e06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e0a:	4606      	mov	r6, r0
 8009e0c:	460f      	mov	r7, r1
 8009e0e:	4622      	mov	r2, r4
 8009e10:	462b      	mov	r3, r5
 8009e12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009e16:	f7f6 fae1 	bl	80003dc <__adddf3>
 8009e1a:	4642      	mov	r2, r8
 8009e1c:	464b      	mov	r3, r9
 8009e1e:	f7f6 fadd 	bl	80003dc <__adddf3>
 8009e22:	4632      	mov	r2, r6
 8009e24:	463b      	mov	r3, r7
 8009e26:	f7f6 fad9 	bl	80003dc <__adddf3>
 8009e2a:	9802      	ldr	r0, [sp, #8]
 8009e2c:	4632      	mov	r2, r6
 8009e2e:	463b      	mov	r3, r7
 8009e30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e34:	f7f6 fad0 	bl	80003d8 <__aeabi_dsub>
 8009e38:	4642      	mov	r2, r8
 8009e3a:	464b      	mov	r3, r9
 8009e3c:	f7f6 facc 	bl	80003d8 <__aeabi_dsub>
 8009e40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009e44:	e607      	b.n	8009a56 <__ieee754_pow+0x2ce>
 8009e46:	f04f 0a01 	mov.w	sl, #1
 8009e4a:	e6a5      	b.n	8009b98 <__ieee754_pow+0x410>
 8009e4c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009ea0 <__ieee754_pow+0x718>
 8009e50:	e613      	b.n	8009a7a <__ieee754_pow+0x2f2>
 8009e52:	bf00      	nop
 8009e54:	f3af 8000 	nop.w
 8009e58:	4a454eef 	.word	0x4a454eef
 8009e5c:	3fca7e28 	.word	0x3fca7e28
 8009e60:	93c9db65 	.word	0x93c9db65
 8009e64:	3fcd864a 	.word	0x3fcd864a
 8009e68:	a91d4101 	.word	0xa91d4101
 8009e6c:	3fd17460 	.word	0x3fd17460
 8009e70:	518f264d 	.word	0x518f264d
 8009e74:	3fd55555 	.word	0x3fd55555
 8009e78:	db6fabff 	.word	0xdb6fabff
 8009e7c:	3fdb6db6 	.word	0x3fdb6db6
 8009e80:	33333303 	.word	0x33333303
 8009e84:	3fe33333 	.word	0x3fe33333
 8009e88:	e0000000 	.word	0xe0000000
 8009e8c:	3feec709 	.word	0x3feec709
 8009e90:	dc3a03fd 	.word	0xdc3a03fd
 8009e94:	3feec709 	.word	0x3feec709
 8009e98:	145b01f5 	.word	0x145b01f5
 8009e9c:	be3e2fe0 	.word	0xbe3e2fe0
 8009ea0:	00000000 	.word	0x00000000
 8009ea4:	3ff00000 	.word	0x3ff00000
 8009ea8:	43400000 	.word	0x43400000
 8009eac:	0003988e 	.word	0x0003988e
 8009eb0:	000bb679 	.word	0x000bb679
 8009eb4:	0800aba8 	.word	0x0800aba8
 8009eb8:	3ff00000 	.word	0x3ff00000
 8009ebc:	40080000 	.word	0x40080000
 8009ec0:	0800abc8 	.word	0x0800abc8
 8009ec4:	0800abb8 	.word	0x0800abb8
 8009ec8:	a3b4      	add	r3, pc, #720	; (adr r3, 800a19c <__ieee754_pow+0xa14>)
 8009eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ece:	4640      	mov	r0, r8
 8009ed0:	4649      	mov	r1, r9
 8009ed2:	f7f6 fa83 	bl	80003dc <__adddf3>
 8009ed6:	4622      	mov	r2, r4
 8009ed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009edc:	462b      	mov	r3, r5
 8009ede:	4630      	mov	r0, r6
 8009ee0:	4639      	mov	r1, r7
 8009ee2:	f7f6 fa79 	bl	80003d8 <__aeabi_dsub>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	460b      	mov	r3, r1
 8009eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009eee:	f7f6 febb 	bl	8000c68 <__aeabi_dcmpgt>
 8009ef2:	2800      	cmp	r0, #0
 8009ef4:	f47f adfe 	bne.w	8009af4 <__ieee754_pow+0x36c>
 8009ef8:	4aa3      	ldr	r2, [pc, #652]	; (800a188 <__ieee754_pow+0xa00>)
 8009efa:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009efe:	4293      	cmp	r3, r2
 8009f00:	f340 810a 	ble.w	800a118 <__ieee754_pow+0x990>
 8009f04:	151b      	asrs	r3, r3, #20
 8009f06:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009f0a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009f0e:	fa4a f303 	asr.w	r3, sl, r3
 8009f12:	445b      	add	r3, fp
 8009f14:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009f18:	4e9c      	ldr	r6, [pc, #624]	; (800a18c <__ieee754_pow+0xa04>)
 8009f1a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009f1e:	4116      	asrs	r6, r2
 8009f20:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009f24:	2000      	movs	r0, #0
 8009f26:	ea23 0106 	bic.w	r1, r3, r6
 8009f2a:	f1c2 0214 	rsb	r2, r2, #20
 8009f2e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009f32:	fa4a fa02 	asr.w	sl, sl, r2
 8009f36:	f1bb 0f00 	cmp.w	fp, #0
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	4620      	mov	r0, r4
 8009f40:	4629      	mov	r1, r5
 8009f42:	bfb8      	it	lt
 8009f44:	f1ca 0a00 	rsblt	sl, sl, #0
 8009f48:	f7f6 fa46 	bl	80003d8 <__aeabi_dsub>
 8009f4c:	e9cd 0100 	strd	r0, r1, [sp]
 8009f50:	4642      	mov	r2, r8
 8009f52:	464b      	mov	r3, r9
 8009f54:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f58:	f7f6 fa40 	bl	80003dc <__adddf3>
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	a378      	add	r3, pc, #480	; (adr r3, 800a140 <__ieee754_pow+0x9b8>)
 8009f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f64:	4604      	mov	r4, r0
 8009f66:	460d      	mov	r5, r1
 8009f68:	f7f6 fbee 	bl	8000748 <__aeabi_dmul>
 8009f6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009f70:	4606      	mov	r6, r0
 8009f72:	460f      	mov	r7, r1
 8009f74:	4620      	mov	r0, r4
 8009f76:	4629      	mov	r1, r5
 8009f78:	f7f6 fa2e 	bl	80003d8 <__aeabi_dsub>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	460b      	mov	r3, r1
 8009f80:	4640      	mov	r0, r8
 8009f82:	4649      	mov	r1, r9
 8009f84:	f7f6 fa28 	bl	80003d8 <__aeabi_dsub>
 8009f88:	a36f      	add	r3, pc, #444	; (adr r3, 800a148 <__ieee754_pow+0x9c0>)
 8009f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f8e:	f7f6 fbdb 	bl	8000748 <__aeabi_dmul>
 8009f92:	a36f      	add	r3, pc, #444	; (adr r3, 800a150 <__ieee754_pow+0x9c8>)
 8009f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f98:	4680      	mov	r8, r0
 8009f9a:	4689      	mov	r9, r1
 8009f9c:	4620      	mov	r0, r4
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	f7f6 fbd2 	bl	8000748 <__aeabi_dmul>
 8009fa4:	4602      	mov	r2, r0
 8009fa6:	460b      	mov	r3, r1
 8009fa8:	4640      	mov	r0, r8
 8009faa:	4649      	mov	r1, r9
 8009fac:	f7f6 fa16 	bl	80003dc <__adddf3>
 8009fb0:	4604      	mov	r4, r0
 8009fb2:	460d      	mov	r5, r1
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	460b      	mov	r3, r1
 8009fb8:	4630      	mov	r0, r6
 8009fba:	4639      	mov	r1, r7
 8009fbc:	f7f6 fa0e 	bl	80003dc <__adddf3>
 8009fc0:	4632      	mov	r2, r6
 8009fc2:	463b      	mov	r3, r7
 8009fc4:	4680      	mov	r8, r0
 8009fc6:	4689      	mov	r9, r1
 8009fc8:	f7f6 fa06 	bl	80003d8 <__aeabi_dsub>
 8009fcc:	4602      	mov	r2, r0
 8009fce:	460b      	mov	r3, r1
 8009fd0:	4620      	mov	r0, r4
 8009fd2:	4629      	mov	r1, r5
 8009fd4:	f7f6 fa00 	bl	80003d8 <__aeabi_dsub>
 8009fd8:	4642      	mov	r2, r8
 8009fda:	4606      	mov	r6, r0
 8009fdc:	460f      	mov	r7, r1
 8009fde:	464b      	mov	r3, r9
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	f7f6 fbb0 	bl	8000748 <__aeabi_dmul>
 8009fe8:	a35b      	add	r3, pc, #364	; (adr r3, 800a158 <__ieee754_pow+0x9d0>)
 8009fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fee:	4604      	mov	r4, r0
 8009ff0:	460d      	mov	r5, r1
 8009ff2:	f7f6 fba9 	bl	8000748 <__aeabi_dmul>
 8009ff6:	a35a      	add	r3, pc, #360	; (adr r3, 800a160 <__ieee754_pow+0x9d8>)
 8009ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ffc:	f7f6 f9ec 	bl	80003d8 <__aeabi_dsub>
 800a000:	4622      	mov	r2, r4
 800a002:	462b      	mov	r3, r5
 800a004:	f7f6 fba0 	bl	8000748 <__aeabi_dmul>
 800a008:	a357      	add	r3, pc, #348	; (adr r3, 800a168 <__ieee754_pow+0x9e0>)
 800a00a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a00e:	f7f6 f9e5 	bl	80003dc <__adddf3>
 800a012:	4622      	mov	r2, r4
 800a014:	462b      	mov	r3, r5
 800a016:	f7f6 fb97 	bl	8000748 <__aeabi_dmul>
 800a01a:	a355      	add	r3, pc, #340	; (adr r3, 800a170 <__ieee754_pow+0x9e8>)
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	f7f6 f9da 	bl	80003d8 <__aeabi_dsub>
 800a024:	4622      	mov	r2, r4
 800a026:	462b      	mov	r3, r5
 800a028:	f7f6 fb8e 	bl	8000748 <__aeabi_dmul>
 800a02c:	a352      	add	r3, pc, #328	; (adr r3, 800a178 <__ieee754_pow+0x9f0>)
 800a02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a032:	f7f6 f9d3 	bl	80003dc <__adddf3>
 800a036:	4622      	mov	r2, r4
 800a038:	462b      	mov	r3, r5
 800a03a:	f7f6 fb85 	bl	8000748 <__aeabi_dmul>
 800a03e:	4602      	mov	r2, r0
 800a040:	460b      	mov	r3, r1
 800a042:	4640      	mov	r0, r8
 800a044:	4649      	mov	r1, r9
 800a046:	f7f6 f9c7 	bl	80003d8 <__aeabi_dsub>
 800a04a:	4604      	mov	r4, r0
 800a04c:	460d      	mov	r5, r1
 800a04e:	4602      	mov	r2, r0
 800a050:	460b      	mov	r3, r1
 800a052:	4640      	mov	r0, r8
 800a054:	4649      	mov	r1, r9
 800a056:	f7f6 fb77 	bl	8000748 <__aeabi_dmul>
 800a05a:	2200      	movs	r2, #0
 800a05c:	e9cd 0100 	strd	r0, r1, [sp]
 800a060:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a064:	4620      	mov	r0, r4
 800a066:	4629      	mov	r1, r5
 800a068:	f7f6 f9b6 	bl	80003d8 <__aeabi_dsub>
 800a06c:	4602      	mov	r2, r0
 800a06e:	460b      	mov	r3, r1
 800a070:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a074:	f7f6 fc92 	bl	800099c <__aeabi_ddiv>
 800a078:	4632      	mov	r2, r6
 800a07a:	4604      	mov	r4, r0
 800a07c:	460d      	mov	r5, r1
 800a07e:	463b      	mov	r3, r7
 800a080:	4640      	mov	r0, r8
 800a082:	4649      	mov	r1, r9
 800a084:	f7f6 fb60 	bl	8000748 <__aeabi_dmul>
 800a088:	4632      	mov	r2, r6
 800a08a:	463b      	mov	r3, r7
 800a08c:	f7f6 f9a6 	bl	80003dc <__adddf3>
 800a090:	4602      	mov	r2, r0
 800a092:	460b      	mov	r3, r1
 800a094:	4620      	mov	r0, r4
 800a096:	4629      	mov	r1, r5
 800a098:	f7f6 f99e 	bl	80003d8 <__aeabi_dsub>
 800a09c:	4642      	mov	r2, r8
 800a09e:	464b      	mov	r3, r9
 800a0a0:	f7f6 f99a 	bl	80003d8 <__aeabi_dsub>
 800a0a4:	4602      	mov	r2, r0
 800a0a6:	460b      	mov	r3, r1
 800a0a8:	2000      	movs	r0, #0
 800a0aa:	4939      	ldr	r1, [pc, #228]	; (800a190 <__ieee754_pow+0xa08>)
 800a0ac:	f7f6 f994 	bl	80003d8 <__aeabi_dsub>
 800a0b0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800a0b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800a0b8:	4602      	mov	r2, r0
 800a0ba:	460b      	mov	r3, r1
 800a0bc:	da2f      	bge.n	800a11e <__ieee754_pow+0x996>
 800a0be:	4650      	mov	r0, sl
 800a0c0:	ec43 2b10 	vmov	d0, r2, r3
 800a0c4:	f000 f9c0 	bl	800a448 <scalbn>
 800a0c8:	ec51 0b10 	vmov	r0, r1, d0
 800a0cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a0d0:	f7ff bbf1 	b.w	80098b6 <__ieee754_pow+0x12e>
 800a0d4:	4b2f      	ldr	r3, [pc, #188]	; (800a194 <__ieee754_pow+0xa0c>)
 800a0d6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800a0da:	429e      	cmp	r6, r3
 800a0dc:	f77f af0c 	ble.w	8009ef8 <__ieee754_pow+0x770>
 800a0e0:	4b2d      	ldr	r3, [pc, #180]	; (800a198 <__ieee754_pow+0xa10>)
 800a0e2:	440b      	add	r3, r1
 800a0e4:	4303      	orrs	r3, r0
 800a0e6:	d00b      	beq.n	800a100 <__ieee754_pow+0x978>
 800a0e8:	a325      	add	r3, pc, #148	; (adr r3, 800a180 <__ieee754_pow+0x9f8>)
 800a0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a0f2:	f7f6 fb29 	bl	8000748 <__aeabi_dmul>
 800a0f6:	a322      	add	r3, pc, #136	; (adr r3, 800a180 <__ieee754_pow+0x9f8>)
 800a0f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fc:	f7ff bbdb 	b.w	80098b6 <__ieee754_pow+0x12e>
 800a100:	4622      	mov	r2, r4
 800a102:	462b      	mov	r3, r5
 800a104:	f7f6 f968 	bl	80003d8 <__aeabi_dsub>
 800a108:	4642      	mov	r2, r8
 800a10a:	464b      	mov	r3, r9
 800a10c:	f7f6 fda2 	bl	8000c54 <__aeabi_dcmpge>
 800a110:	2800      	cmp	r0, #0
 800a112:	f43f aef1 	beq.w	8009ef8 <__ieee754_pow+0x770>
 800a116:	e7e7      	b.n	800a0e8 <__ieee754_pow+0x960>
 800a118:	f04f 0a00 	mov.w	sl, #0
 800a11c:	e718      	b.n	8009f50 <__ieee754_pow+0x7c8>
 800a11e:	4621      	mov	r1, r4
 800a120:	e7d4      	b.n	800a0cc <__ieee754_pow+0x944>
 800a122:	2000      	movs	r0, #0
 800a124:	491a      	ldr	r1, [pc, #104]	; (800a190 <__ieee754_pow+0xa08>)
 800a126:	f7ff bb8f 	b.w	8009848 <__ieee754_pow+0xc0>
 800a12a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a12e:	f7ff bb8b 	b.w	8009848 <__ieee754_pow+0xc0>
 800a132:	4630      	mov	r0, r6
 800a134:	4639      	mov	r1, r7
 800a136:	f7ff bb87 	b.w	8009848 <__ieee754_pow+0xc0>
 800a13a:	4693      	mov	fp, r2
 800a13c:	f7ff bb98 	b.w	8009870 <__ieee754_pow+0xe8>
 800a140:	00000000 	.word	0x00000000
 800a144:	3fe62e43 	.word	0x3fe62e43
 800a148:	fefa39ef 	.word	0xfefa39ef
 800a14c:	3fe62e42 	.word	0x3fe62e42
 800a150:	0ca86c39 	.word	0x0ca86c39
 800a154:	be205c61 	.word	0xbe205c61
 800a158:	72bea4d0 	.word	0x72bea4d0
 800a15c:	3e663769 	.word	0x3e663769
 800a160:	c5d26bf1 	.word	0xc5d26bf1
 800a164:	3ebbbd41 	.word	0x3ebbbd41
 800a168:	af25de2c 	.word	0xaf25de2c
 800a16c:	3f11566a 	.word	0x3f11566a
 800a170:	16bebd93 	.word	0x16bebd93
 800a174:	3f66c16c 	.word	0x3f66c16c
 800a178:	5555553e 	.word	0x5555553e
 800a17c:	3fc55555 	.word	0x3fc55555
 800a180:	c2f8f359 	.word	0xc2f8f359
 800a184:	01a56e1f 	.word	0x01a56e1f
 800a188:	3fe00000 	.word	0x3fe00000
 800a18c:	000fffff 	.word	0x000fffff
 800a190:	3ff00000 	.word	0x3ff00000
 800a194:	4090cbff 	.word	0x4090cbff
 800a198:	3f6f3400 	.word	0x3f6f3400
 800a19c:	652b82fe 	.word	0x652b82fe
 800a1a0:	3c971547 	.word	0x3c971547

0800a1a4 <__ieee754_sqrt>:
 800a1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a8:	4955      	ldr	r1, [pc, #340]	; (800a300 <__ieee754_sqrt+0x15c>)
 800a1aa:	ec55 4b10 	vmov	r4, r5, d0
 800a1ae:	43a9      	bics	r1, r5
 800a1b0:	462b      	mov	r3, r5
 800a1b2:	462a      	mov	r2, r5
 800a1b4:	d112      	bne.n	800a1dc <__ieee754_sqrt+0x38>
 800a1b6:	ee10 2a10 	vmov	r2, s0
 800a1ba:	ee10 0a10 	vmov	r0, s0
 800a1be:	4629      	mov	r1, r5
 800a1c0:	f7f6 fac2 	bl	8000748 <__aeabi_dmul>
 800a1c4:	4602      	mov	r2, r0
 800a1c6:	460b      	mov	r3, r1
 800a1c8:	4620      	mov	r0, r4
 800a1ca:	4629      	mov	r1, r5
 800a1cc:	f7f6 f906 	bl	80003dc <__adddf3>
 800a1d0:	4604      	mov	r4, r0
 800a1d2:	460d      	mov	r5, r1
 800a1d4:	ec45 4b10 	vmov	d0, r4, r5
 800a1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1dc:	2d00      	cmp	r5, #0
 800a1de:	ee10 0a10 	vmov	r0, s0
 800a1e2:	4621      	mov	r1, r4
 800a1e4:	dc0f      	bgt.n	800a206 <__ieee754_sqrt+0x62>
 800a1e6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a1ea:	4330      	orrs	r0, r6
 800a1ec:	d0f2      	beq.n	800a1d4 <__ieee754_sqrt+0x30>
 800a1ee:	b155      	cbz	r5, 800a206 <__ieee754_sqrt+0x62>
 800a1f0:	ee10 2a10 	vmov	r2, s0
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	4629      	mov	r1, r5
 800a1f8:	f7f6 f8ee 	bl	80003d8 <__aeabi_dsub>
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	460b      	mov	r3, r1
 800a200:	f7f6 fbcc 	bl	800099c <__aeabi_ddiv>
 800a204:	e7e4      	b.n	800a1d0 <__ieee754_sqrt+0x2c>
 800a206:	151b      	asrs	r3, r3, #20
 800a208:	d073      	beq.n	800a2f2 <__ieee754_sqrt+0x14e>
 800a20a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a20e:	07dd      	lsls	r5, r3, #31
 800a210:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a214:	bf48      	it	mi
 800a216:	0fc8      	lsrmi	r0, r1, #31
 800a218:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800a21c:	bf44      	itt	mi
 800a21e:	0049      	lslmi	r1, r1, #1
 800a220:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800a224:	2500      	movs	r5, #0
 800a226:	1058      	asrs	r0, r3, #1
 800a228:	0fcb      	lsrs	r3, r1, #31
 800a22a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800a22e:	0049      	lsls	r1, r1, #1
 800a230:	2316      	movs	r3, #22
 800a232:	462c      	mov	r4, r5
 800a234:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800a238:	19a7      	adds	r7, r4, r6
 800a23a:	4297      	cmp	r7, r2
 800a23c:	bfde      	ittt	le
 800a23e:	19bc      	addle	r4, r7, r6
 800a240:	1bd2      	suble	r2, r2, r7
 800a242:	19ad      	addle	r5, r5, r6
 800a244:	0fcf      	lsrs	r7, r1, #31
 800a246:	3b01      	subs	r3, #1
 800a248:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800a24c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a250:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a254:	d1f0      	bne.n	800a238 <__ieee754_sqrt+0x94>
 800a256:	f04f 0c20 	mov.w	ip, #32
 800a25a:	469e      	mov	lr, r3
 800a25c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800a260:	42a2      	cmp	r2, r4
 800a262:	eb06 070e 	add.w	r7, r6, lr
 800a266:	dc02      	bgt.n	800a26e <__ieee754_sqrt+0xca>
 800a268:	d112      	bne.n	800a290 <__ieee754_sqrt+0xec>
 800a26a:	428f      	cmp	r7, r1
 800a26c:	d810      	bhi.n	800a290 <__ieee754_sqrt+0xec>
 800a26e:	2f00      	cmp	r7, #0
 800a270:	eb07 0e06 	add.w	lr, r7, r6
 800a274:	da42      	bge.n	800a2fc <__ieee754_sqrt+0x158>
 800a276:	f1be 0f00 	cmp.w	lr, #0
 800a27a:	db3f      	blt.n	800a2fc <__ieee754_sqrt+0x158>
 800a27c:	f104 0801 	add.w	r8, r4, #1
 800a280:	1b12      	subs	r2, r2, r4
 800a282:	428f      	cmp	r7, r1
 800a284:	bf88      	it	hi
 800a286:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800a28a:	1bc9      	subs	r1, r1, r7
 800a28c:	4433      	add	r3, r6
 800a28e:	4644      	mov	r4, r8
 800a290:	0052      	lsls	r2, r2, #1
 800a292:	f1bc 0c01 	subs.w	ip, ip, #1
 800a296:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800a29a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800a29e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800a2a2:	d1dd      	bne.n	800a260 <__ieee754_sqrt+0xbc>
 800a2a4:	430a      	orrs	r2, r1
 800a2a6:	d006      	beq.n	800a2b6 <__ieee754_sqrt+0x112>
 800a2a8:	1c5c      	adds	r4, r3, #1
 800a2aa:	bf13      	iteet	ne
 800a2ac:	3301      	addne	r3, #1
 800a2ae:	3501      	addeq	r5, #1
 800a2b0:	4663      	moveq	r3, ip
 800a2b2:	f023 0301 	bicne.w	r3, r3, #1
 800a2b6:	106a      	asrs	r2, r5, #1
 800a2b8:	085b      	lsrs	r3, r3, #1
 800a2ba:	07e9      	lsls	r1, r5, #31
 800a2bc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800a2c0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800a2c4:	bf48      	it	mi
 800a2c6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800a2ca:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800a2ce:	461c      	mov	r4, r3
 800a2d0:	e780      	b.n	800a1d4 <__ieee754_sqrt+0x30>
 800a2d2:	0aca      	lsrs	r2, r1, #11
 800a2d4:	3815      	subs	r0, #21
 800a2d6:	0549      	lsls	r1, r1, #21
 800a2d8:	2a00      	cmp	r2, #0
 800a2da:	d0fa      	beq.n	800a2d2 <__ieee754_sqrt+0x12e>
 800a2dc:	02d6      	lsls	r6, r2, #11
 800a2de:	d50a      	bpl.n	800a2f6 <__ieee754_sqrt+0x152>
 800a2e0:	f1c3 0420 	rsb	r4, r3, #32
 800a2e4:	fa21 f404 	lsr.w	r4, r1, r4
 800a2e8:	1e5d      	subs	r5, r3, #1
 800a2ea:	4099      	lsls	r1, r3
 800a2ec:	4322      	orrs	r2, r4
 800a2ee:	1b43      	subs	r3, r0, r5
 800a2f0:	e78b      	b.n	800a20a <__ieee754_sqrt+0x66>
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	e7f0      	b.n	800a2d8 <__ieee754_sqrt+0x134>
 800a2f6:	0052      	lsls	r2, r2, #1
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	e7ef      	b.n	800a2dc <__ieee754_sqrt+0x138>
 800a2fc:	46a0      	mov	r8, r4
 800a2fe:	e7bf      	b.n	800a280 <__ieee754_sqrt+0xdc>
 800a300:	7ff00000 	.word	0x7ff00000

0800a304 <fabs>:
 800a304:	ec51 0b10 	vmov	r0, r1, d0
 800a308:	ee10 2a10 	vmov	r2, s0
 800a30c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a310:	ec43 2b10 	vmov	d0, r2, r3
 800a314:	4770      	bx	lr

0800a316 <finite>:
 800a316:	ee10 3a90 	vmov	r3, s1
 800a31a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800a31e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a322:	0fc0      	lsrs	r0, r0, #31
 800a324:	4770      	bx	lr

0800a326 <matherr>:
 800a326:	2000      	movs	r0, #0
 800a328:	4770      	bx	lr
 800a32a:	0000      	movs	r0, r0
 800a32c:	0000      	movs	r0, r0
	...

0800a330 <nan>:
 800a330:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a338 <nan+0x8>
 800a334:	4770      	bx	lr
 800a336:	bf00      	nop
 800a338:	00000000 	.word	0x00000000
 800a33c:	7ff80000 	.word	0x7ff80000

0800a340 <rint>:
 800a340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a342:	ec51 0b10 	vmov	r0, r1, d0
 800a346:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a34a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a34e:	2e13      	cmp	r6, #19
 800a350:	460b      	mov	r3, r1
 800a352:	ee10 4a10 	vmov	r4, s0
 800a356:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a35a:	dc56      	bgt.n	800a40a <rint+0xca>
 800a35c:	2e00      	cmp	r6, #0
 800a35e:	da2b      	bge.n	800a3b8 <rint+0x78>
 800a360:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a364:	4302      	orrs	r2, r0
 800a366:	d023      	beq.n	800a3b0 <rint+0x70>
 800a368:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a36c:	4302      	orrs	r2, r0
 800a36e:	4254      	negs	r4, r2
 800a370:	4314      	orrs	r4, r2
 800a372:	0c4b      	lsrs	r3, r1, #17
 800a374:	0b24      	lsrs	r4, r4, #12
 800a376:	045b      	lsls	r3, r3, #17
 800a378:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a37c:	ea44 0103 	orr.w	r1, r4, r3
 800a380:	460b      	mov	r3, r1
 800a382:	492f      	ldr	r1, [pc, #188]	; (800a440 <rint+0x100>)
 800a384:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800a388:	e9d1 6700 	ldrd	r6, r7, [r1]
 800a38c:	4602      	mov	r2, r0
 800a38e:	4639      	mov	r1, r7
 800a390:	4630      	mov	r0, r6
 800a392:	f7f6 f823 	bl	80003dc <__adddf3>
 800a396:	e9cd 0100 	strd	r0, r1, [sp]
 800a39a:	463b      	mov	r3, r7
 800a39c:	4632      	mov	r2, r6
 800a39e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3a2:	f7f6 f819 	bl	80003d8 <__aeabi_dsub>
 800a3a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a3aa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a3ae:	4639      	mov	r1, r7
 800a3b0:	ec41 0b10 	vmov	d0, r0, r1
 800a3b4:	b003      	add	sp, #12
 800a3b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3b8:	4a22      	ldr	r2, [pc, #136]	; (800a444 <rint+0x104>)
 800a3ba:	4132      	asrs	r2, r6
 800a3bc:	ea01 0702 	and.w	r7, r1, r2
 800a3c0:	4307      	orrs	r7, r0
 800a3c2:	d0f5      	beq.n	800a3b0 <rint+0x70>
 800a3c4:	0852      	lsrs	r2, r2, #1
 800a3c6:	4011      	ands	r1, r2
 800a3c8:	430c      	orrs	r4, r1
 800a3ca:	d00b      	beq.n	800a3e4 <rint+0xa4>
 800a3cc:	ea23 0202 	bic.w	r2, r3, r2
 800a3d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a3d4:	2e13      	cmp	r6, #19
 800a3d6:	fa43 f306 	asr.w	r3, r3, r6
 800a3da:	bf0c      	ite	eq
 800a3dc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a3e0:	2400      	movne	r4, #0
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	4916      	ldr	r1, [pc, #88]	; (800a440 <rint+0x100>)
 800a3e6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a3ea:	4622      	mov	r2, r4
 800a3ec:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a3f0:	4620      	mov	r0, r4
 800a3f2:	4629      	mov	r1, r5
 800a3f4:	f7f5 fff2 	bl	80003dc <__adddf3>
 800a3f8:	e9cd 0100 	strd	r0, r1, [sp]
 800a3fc:	4622      	mov	r2, r4
 800a3fe:	462b      	mov	r3, r5
 800a400:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a404:	f7f5 ffe8 	bl	80003d8 <__aeabi_dsub>
 800a408:	e7d2      	b.n	800a3b0 <rint+0x70>
 800a40a:	2e33      	cmp	r6, #51	; 0x33
 800a40c:	dd07      	ble.n	800a41e <rint+0xde>
 800a40e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a412:	d1cd      	bne.n	800a3b0 <rint+0x70>
 800a414:	ee10 2a10 	vmov	r2, s0
 800a418:	f7f5 ffe0 	bl	80003dc <__adddf3>
 800a41c:	e7c8      	b.n	800a3b0 <rint+0x70>
 800a41e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800a422:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a426:	40f2      	lsrs	r2, r6
 800a428:	4210      	tst	r0, r2
 800a42a:	d0c1      	beq.n	800a3b0 <rint+0x70>
 800a42c:	0852      	lsrs	r2, r2, #1
 800a42e:	4210      	tst	r0, r2
 800a430:	bf1f      	itttt	ne
 800a432:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a436:	ea20 0202 	bicne.w	r2, r0, r2
 800a43a:	4134      	asrne	r4, r6
 800a43c:	4314      	orrne	r4, r2
 800a43e:	e7d1      	b.n	800a3e4 <rint+0xa4>
 800a440:	0800abd8 	.word	0x0800abd8
 800a444:	000fffff 	.word	0x000fffff

0800a448 <scalbn>:
 800a448:	b570      	push	{r4, r5, r6, lr}
 800a44a:	ec55 4b10 	vmov	r4, r5, d0
 800a44e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a452:	4606      	mov	r6, r0
 800a454:	462b      	mov	r3, r5
 800a456:	b9aa      	cbnz	r2, 800a484 <scalbn+0x3c>
 800a458:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a45c:	4323      	orrs	r3, r4
 800a45e:	d03b      	beq.n	800a4d8 <scalbn+0x90>
 800a460:	4b31      	ldr	r3, [pc, #196]	; (800a528 <scalbn+0xe0>)
 800a462:	4629      	mov	r1, r5
 800a464:	2200      	movs	r2, #0
 800a466:	ee10 0a10 	vmov	r0, s0
 800a46a:	f7f6 f96d 	bl	8000748 <__aeabi_dmul>
 800a46e:	4b2f      	ldr	r3, [pc, #188]	; (800a52c <scalbn+0xe4>)
 800a470:	429e      	cmp	r6, r3
 800a472:	4604      	mov	r4, r0
 800a474:	460d      	mov	r5, r1
 800a476:	da12      	bge.n	800a49e <scalbn+0x56>
 800a478:	a327      	add	r3, pc, #156	; (adr r3, 800a518 <scalbn+0xd0>)
 800a47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a47e:	f7f6 f963 	bl	8000748 <__aeabi_dmul>
 800a482:	e009      	b.n	800a498 <scalbn+0x50>
 800a484:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a488:	428a      	cmp	r2, r1
 800a48a:	d10c      	bne.n	800a4a6 <scalbn+0x5e>
 800a48c:	ee10 2a10 	vmov	r2, s0
 800a490:	4620      	mov	r0, r4
 800a492:	4629      	mov	r1, r5
 800a494:	f7f5 ffa2 	bl	80003dc <__adddf3>
 800a498:	4604      	mov	r4, r0
 800a49a:	460d      	mov	r5, r1
 800a49c:	e01c      	b.n	800a4d8 <scalbn+0x90>
 800a49e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	3a36      	subs	r2, #54	; 0x36
 800a4a6:	4432      	add	r2, r6
 800a4a8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a4ac:	428a      	cmp	r2, r1
 800a4ae:	dd0b      	ble.n	800a4c8 <scalbn+0x80>
 800a4b0:	ec45 4b11 	vmov	d1, r4, r5
 800a4b4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a520 <scalbn+0xd8>
 800a4b8:	f000 f83c 	bl	800a534 <copysign>
 800a4bc:	a318      	add	r3, pc, #96	; (adr r3, 800a520 <scalbn+0xd8>)
 800a4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c2:	ec51 0b10 	vmov	r0, r1, d0
 800a4c6:	e7da      	b.n	800a47e <scalbn+0x36>
 800a4c8:	2a00      	cmp	r2, #0
 800a4ca:	dd08      	ble.n	800a4de <scalbn+0x96>
 800a4cc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a4d0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a4d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a4d8:	ec45 4b10 	vmov	d0, r4, r5
 800a4dc:	bd70      	pop	{r4, r5, r6, pc}
 800a4de:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a4e2:	da0d      	bge.n	800a500 <scalbn+0xb8>
 800a4e4:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a4e8:	429e      	cmp	r6, r3
 800a4ea:	ec45 4b11 	vmov	d1, r4, r5
 800a4ee:	dce1      	bgt.n	800a4b4 <scalbn+0x6c>
 800a4f0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a518 <scalbn+0xd0>
 800a4f4:	f000 f81e 	bl	800a534 <copysign>
 800a4f8:	a307      	add	r3, pc, #28	; (adr r3, 800a518 <scalbn+0xd0>)
 800a4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fe:	e7e0      	b.n	800a4c2 <scalbn+0x7a>
 800a500:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a504:	3236      	adds	r2, #54	; 0x36
 800a506:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a50a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a50e:	4620      	mov	r0, r4
 800a510:	4629      	mov	r1, r5
 800a512:	2200      	movs	r2, #0
 800a514:	4b06      	ldr	r3, [pc, #24]	; (800a530 <scalbn+0xe8>)
 800a516:	e7b2      	b.n	800a47e <scalbn+0x36>
 800a518:	c2f8f359 	.word	0xc2f8f359
 800a51c:	01a56e1f 	.word	0x01a56e1f
 800a520:	8800759c 	.word	0x8800759c
 800a524:	7e37e43c 	.word	0x7e37e43c
 800a528:	43500000 	.word	0x43500000
 800a52c:	ffff3cb0 	.word	0xffff3cb0
 800a530:	3c900000 	.word	0x3c900000

0800a534 <copysign>:
 800a534:	ec51 0b10 	vmov	r0, r1, d0
 800a538:	ee11 0a90 	vmov	r0, s3
 800a53c:	ee10 2a10 	vmov	r2, s0
 800a540:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a544:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a548:	ea41 0300 	orr.w	r3, r1, r0
 800a54c:	ec43 2b10 	vmov	d0, r2, r3
 800a550:	4770      	bx	lr
	...

0800a554 <_init>:
 800a554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a556:	bf00      	nop
 800a558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a55a:	bc08      	pop	{r3}
 800a55c:	469e      	mov	lr, r3
 800a55e:	4770      	bx	lr

0800a560 <_fini>:
 800a560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a562:	bf00      	nop
 800a564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a566:	bc08      	pop	{r3}
 800a568:	469e      	mov	lr, r3
 800a56a:	4770      	bx	lr
