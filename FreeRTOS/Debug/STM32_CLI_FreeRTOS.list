
STM32_CLI_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c474  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000012c0  0800c618  0800c618  0001c618  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d8d8  0800d8d8  00020a44  2**0
                  CONTENTS
  4 .ARM          00000008  0800d8d8  0800d8d8  0001d8d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d8e0  0800d8e0  00020a44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d8e0  0800d8e0  0001d8e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d8e8  0800d8e8  0001d8e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a44  20000000  0800d8ec  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b754  20000a44  0800e330  00020a44  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c198  0800e330  0002c198  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020a44  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027a7a  00000000  00000000  00020a74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048b7  00000000  00000000  000484ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016556  00000000  00000000  0004cda5  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000eb8  00000000  00000000  00063300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00004568  00000000  00000000  000641b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a7d9  00000000  00000000  00068720  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00013906  00000000  00000000  00082ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00098a7d  00000000  00000000  000967ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0012f27c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003dc4  00000000  00000000  0012f2f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000a44 	.word	0x20000a44
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c5fc 	.word	0x0800c5fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000a48 	.word	0x20000a48
 80001dc:	0800c5fc 	.word	0x0800c5fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bcc:	f000 b972 	b.w	8000eb4 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	4688      	mov	r8, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14b      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4615      	mov	r5, r2
 8000bfa:	d967      	bls.n	8000ccc <__udivmoddi4+0xe4>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b14a      	cbz	r2, 8000c16 <__udivmoddi4+0x2e>
 8000c02:	f1c2 0720 	rsb	r7, r2, #32
 8000c06:	fa01 f302 	lsl.w	r3, r1, r2
 8000c0a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c0e:	4095      	lsls	r5, r2
 8000c10:	ea47 0803 	orr.w	r8, r7, r3
 8000c14:	4094      	lsls	r4, r2
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	0c23      	lsrs	r3, r4, #16
 8000c1c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c20:	fa1f fc85 	uxth.w	ip, r5
 8000c24:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c2c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d909      	bls.n	8000c48 <__udivmoddi4+0x60>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c3a:	f080 811b 	bcs.w	8000e74 <__udivmoddi4+0x28c>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 8118 	bls.w	8000e74 <__udivmoddi4+0x28c>
 8000c44:	3f02      	subs	r7, #2
 8000c46:	442b      	add	r3, r5
 8000c48:	1a5b      	subs	r3, r3, r1
 8000c4a:	b2a4      	uxth	r4, r4
 8000c4c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c50:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c58:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c5c:	45a4      	cmp	ip, r4
 8000c5e:	d909      	bls.n	8000c74 <__udivmoddi4+0x8c>
 8000c60:	192c      	adds	r4, r5, r4
 8000c62:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c66:	f080 8107 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c6a:	45a4      	cmp	ip, r4
 8000c6c:	f240 8104 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c70:	3802      	subs	r0, #2
 8000c72:	442c      	add	r4, r5
 8000c74:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c78:	eba4 040c 	sub.w	r4, r4, ip
 8000c7c:	2700      	movs	r7, #0
 8000c7e:	b11e      	cbz	r6, 8000c88 <__udivmoddi4+0xa0>
 8000c80:	40d4      	lsrs	r4, r2
 8000c82:	2300      	movs	r3, #0
 8000c84:	e9c6 4300 	strd	r4, r3, [r6]
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0xbe>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80eb 	beq.w	8000e6e <__udivmoddi4+0x286>
 8000c98:	2700      	movs	r7, #0
 8000c9a:	e9c6 0100 	strd	r0, r1, [r6]
 8000c9e:	4638      	mov	r0, r7
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca6:	fab3 f783 	clz	r7, r3
 8000caa:	2f00      	cmp	r7, #0
 8000cac:	d147      	bne.n	8000d3e <__udivmoddi4+0x156>
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d302      	bcc.n	8000cb8 <__udivmoddi4+0xd0>
 8000cb2:	4282      	cmp	r2, r0
 8000cb4:	f200 80fa 	bhi.w	8000eac <__udivmoddi4+0x2c4>
 8000cb8:	1a84      	subs	r4, r0, r2
 8000cba:	eb61 0303 	sbc.w	r3, r1, r3
 8000cbe:	2001      	movs	r0, #1
 8000cc0:	4698      	mov	r8, r3
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	d0e0      	beq.n	8000c88 <__udivmoddi4+0xa0>
 8000cc6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cca:	e7dd      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000ccc:	b902      	cbnz	r2, 8000cd0 <__udivmoddi4+0xe8>
 8000cce:	deff      	udf	#255	; 0xff
 8000cd0:	fab2 f282 	clz	r2, r2
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f040 808f 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cda:	1b49      	subs	r1, r1, r5
 8000cdc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce0:	fa1f f885 	uxth.w	r8, r5
 8000ce4:	2701      	movs	r7, #1
 8000ce6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf4:	fb08 f10c 	mul.w	r1, r8, ip
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	d907      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfc:	18eb      	adds	r3, r5, r3
 8000cfe:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4299      	cmp	r1, r3
 8000d06:	f200 80cd 	bhi.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d0a:	4684      	mov	ip, r0
 8000d0c:	1a59      	subs	r1, r3, r1
 8000d0e:	b2a3      	uxth	r3, r4
 8000d10:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d14:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d18:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d1c:	fb08 f800 	mul.w	r8, r8, r0
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	d907      	bls.n	8000d34 <__udivmoddi4+0x14c>
 8000d24:	192c      	adds	r4, r5, r4
 8000d26:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d2a:	d202      	bcs.n	8000d32 <__udivmoddi4+0x14a>
 8000d2c:	45a0      	cmp	r8, r4
 8000d2e:	f200 80b6 	bhi.w	8000e9e <__udivmoddi4+0x2b6>
 8000d32:	4618      	mov	r0, r3
 8000d34:	eba4 0408 	sub.w	r4, r4, r8
 8000d38:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d3c:	e79f      	b.n	8000c7e <__udivmoddi4+0x96>
 8000d3e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d42:	40bb      	lsls	r3, r7
 8000d44:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d48:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d4c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d50:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d54:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d58:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d62:	0c2c      	lsrs	r4, r5, #16
 8000d64:	fb08 3319 	mls	r3, r8, r9, r3
 8000d68:	fa1f fa8e 	uxth.w	sl, lr
 8000d6c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d70:	fb09 f40a 	mul.w	r4, r9, sl
 8000d74:	429c      	cmp	r4, r3
 8000d76:	fa02 f207 	lsl.w	r2, r2, r7
 8000d7a:	fa00 f107 	lsl.w	r1, r0, r7
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1e 0303 	adds.w	r3, lr, r3
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d88:	f080 8087 	bcs.w	8000e9a <__udivmoddi4+0x2b2>
 8000d8c:	429c      	cmp	r4, r3
 8000d8e:	f240 8084 	bls.w	8000e9a <__udivmoddi4+0x2b2>
 8000d92:	f1a9 0902 	sub.w	r9, r9, #2
 8000d96:	4473      	add	r3, lr
 8000d98:	1b1b      	subs	r3, r3, r4
 8000d9a:	b2ad      	uxth	r5, r5
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000da8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dac:	45a2      	cmp	sl, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1e 0404 	adds.w	r4, lr, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000db8:	d26b      	bcs.n	8000e92 <__udivmoddi4+0x2aa>
 8000dba:	45a2      	cmp	sl, r4
 8000dbc:	d969      	bls.n	8000e92 <__udivmoddi4+0x2aa>
 8000dbe:	3802      	subs	r0, #2
 8000dc0:	4474      	add	r4, lr
 8000dc2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	eba4 040a 	sub.w	r4, r4, sl
 8000dce:	454c      	cmp	r4, r9
 8000dd0:	46c2      	mov	sl, r8
 8000dd2:	464b      	mov	r3, r9
 8000dd4:	d354      	bcc.n	8000e80 <__udivmoddi4+0x298>
 8000dd6:	d051      	beq.n	8000e7c <__udivmoddi4+0x294>
 8000dd8:	2e00      	cmp	r6, #0
 8000dda:	d069      	beq.n	8000eb0 <__udivmoddi4+0x2c8>
 8000ddc:	ebb1 050a 	subs.w	r5, r1, sl
 8000de0:	eb64 0403 	sbc.w	r4, r4, r3
 8000de4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	40fc      	lsrs	r4, r7
 8000dec:	ea4c 0505 	orr.w	r5, ip, r5
 8000df0:	e9c6 5400 	strd	r5, r4, [r6]
 8000df4:	2700      	movs	r7, #0
 8000df6:	e747      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000df8:	f1c2 0320 	rsb	r3, r2, #32
 8000dfc:	fa20 f703 	lsr.w	r7, r0, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	fa01 f002 	lsl.w	r0, r1, r2
 8000e06:	fa21 f303 	lsr.w	r3, r1, r3
 8000e0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e0e:	4338      	orrs	r0, r7
 8000e10:	0c01      	lsrs	r1, r0, #16
 8000e12:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e16:	fa1f f885 	uxth.w	r8, r5
 8000e1a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e1e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e22:	fb07 f308 	mul.w	r3, r7, r8
 8000e26:	428b      	cmp	r3, r1
 8000e28:	fa04 f402 	lsl.w	r4, r4, r2
 8000e2c:	d907      	bls.n	8000e3e <__udivmoddi4+0x256>
 8000e2e:	1869      	adds	r1, r5, r1
 8000e30:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e34:	d22f      	bcs.n	8000e96 <__udivmoddi4+0x2ae>
 8000e36:	428b      	cmp	r3, r1
 8000e38:	d92d      	bls.n	8000e96 <__udivmoddi4+0x2ae>
 8000e3a:	3f02      	subs	r7, #2
 8000e3c:	4429      	add	r1, r5
 8000e3e:	1acb      	subs	r3, r1, r3
 8000e40:	b281      	uxth	r1, r0
 8000e42:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e46:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e4e:	fb00 f308 	mul.w	r3, r0, r8
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d907      	bls.n	8000e66 <__udivmoddi4+0x27e>
 8000e56:	1869      	adds	r1, r5, r1
 8000e58:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e5c:	d217      	bcs.n	8000e8e <__udivmoddi4+0x2a6>
 8000e5e:	428b      	cmp	r3, r1
 8000e60:	d915      	bls.n	8000e8e <__udivmoddi4+0x2a6>
 8000e62:	3802      	subs	r0, #2
 8000e64:	4429      	add	r1, r5
 8000e66:	1ac9      	subs	r1, r1, r3
 8000e68:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e6c:	e73b      	b.n	8000ce6 <__udivmoddi4+0xfe>
 8000e6e:	4637      	mov	r7, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e709      	b.n	8000c88 <__udivmoddi4+0xa0>
 8000e74:	4607      	mov	r7, r0
 8000e76:	e6e7      	b.n	8000c48 <__udivmoddi4+0x60>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6fb      	b.n	8000c74 <__udivmoddi4+0x8c>
 8000e7c:	4541      	cmp	r1, r8
 8000e7e:	d2ab      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e80:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e84:	eb69 020e 	sbc.w	r2, r9, lr
 8000e88:	3801      	subs	r0, #1
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	e7a4      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e8e:	4660      	mov	r0, ip
 8000e90:	e7e9      	b.n	8000e66 <__udivmoddi4+0x27e>
 8000e92:	4618      	mov	r0, r3
 8000e94:	e795      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e96:	4667      	mov	r7, ip
 8000e98:	e7d1      	b.n	8000e3e <__udivmoddi4+0x256>
 8000e9a:	4681      	mov	r9, r0
 8000e9c:	e77c      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	442c      	add	r4, r5
 8000ea2:	e747      	b.n	8000d34 <__udivmoddi4+0x14c>
 8000ea4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea8:	442b      	add	r3, r5
 8000eaa:	e72f      	b.n	8000d0c <__udivmoddi4+0x124>
 8000eac:	4638      	mov	r0, r7
 8000eae:	e708      	b.n	8000cc2 <__udivmoddi4+0xda>
 8000eb0:	4637      	mov	r7, r6
 8000eb2:	e6e9      	b.n	8000c88 <__udivmoddi4+0xa0>

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eba:	4a0e      	ldr	r2, [pc, #56]	; (8000ef4 <HAL_InitTick+0x3c>)
 8000ebc:	4b0e      	ldr	r3, [pc, #56]	; (8000ef8 <HAL_InitTick+0x40>)
 8000ebe:	7812      	ldrb	r2, [r2, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
{
 8000ec2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ec8:	fbb0 f0f2 	udiv	r0, r0, r2
 8000ecc:	fbb3 f0f0 	udiv	r0, r3, r0
 8000ed0:	f000 f8b8 	bl	8001044 <HAL_SYSTICK_Config>
 8000ed4:	b908      	cbnz	r0, 8000eda <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed6:	2d0f      	cmp	r5, #15
 8000ed8:	d901      	bls.n	8000ede <HAL_InitTick+0x26>
    return HAL_ERROR;
 8000eda:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000edc:	bd38      	pop	{r3, r4, r5, pc}
 8000ede:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	4629      	mov	r1, r5
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ee8:	f000 f852 	bl	8000f90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_InitTick+0x44>)
 8000eee:	4620      	mov	r0, r4
 8000ef0:	601d      	str	r5, [r3, #0]
}
 8000ef2:	bd38      	pop	{r3, r4, r5, pc}
 8000ef4:	20000000 	.word	0x20000000
 8000ef8:	20000090 	.word	0x20000090
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_Init>:
{
 8000f00:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f02:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <HAL_Init+0x30>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f0a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f12:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f1a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f1c:	2003      	movs	r0, #3
 8000f1e:	f000 f81b 	bl	8000f58 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f22:	200f      	movs	r0, #15
 8000f24:	f7ff ffc8 	bl	8000eb8 <HAL_InitTick>
  HAL_MspInit();
 8000f28:	f006 fe72 	bl	8007c10 <HAL_MspInit>
}
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	bd08      	pop	{r3, pc}
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f34:	4a03      	ldr	r2, [pc, #12]	; (8000f44 <HAL_IncTick+0x10>)
 8000f36:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HAL_IncTick+0x14>)
 8000f38:	6811      	ldr	r1, [r2, #0]
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	440b      	add	r3, r1
 8000f3e:	6013      	str	r3, [r2, #0]
}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20001148 	.word	0x20001148
 8000f48:	20000000 	.word	0x20000000

08000f4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f4c:	4b01      	ldr	r3, [pc, #4]	; (8000f54 <HAL_GetTick+0x8>)
 8000f4e:	6818      	ldr	r0, [r3, #0]
}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	20001148 	.word	0x20001148

08000f58 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f58:	1ec3      	subs	r3, r0, #3
 8000f5a:	2b04      	cmp	r3, #4
{
 8000f5c:	b510      	push	{r4, lr}
 8000f5e:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000f60:	d903      	bls.n	8000f6a <HAL_NVIC_SetPriorityGrouping+0x12>
 8000f62:	2192      	movs	r1, #146	; 0x92
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <HAL_NVIC_SetPriorityGrouping+0x30>)
 8000f66:	f006 fe27 	bl	8007bb8 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6a:	4a08      	ldr	r2, [pc, #32]	; (8000f8c <HAL_NVIC_SetPriorityGrouping+0x34>)
 8000f6c:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8000f72:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	0224      	lsls	r4, r4, #8
 8000f76:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f7a:	f404 64e0 	and.w	r4, r4, #1792	; 0x700
 8000f7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000f82:	431c      	orrs	r4, r3
  SCB->AIRCR =  reg_value;
 8000f84:	60d4      	str	r4, [r2, #12]
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f86:	bd10      	pop	{r4, pc}
 8000f88:	0800c634 	.word	0x0800c634
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
  uint32_t prioritygroup = 0x00U;
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000f90:	2a0f      	cmp	r2, #15
{ 
 8000f92:	b570      	push	{r4, r5, r6, lr}
 8000f94:	4616      	mov	r6, r2
 8000f96:	4605      	mov	r5, r0
 8000f98:	460c      	mov	r4, r1
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000f9a:	d834      	bhi.n	8001006 <HAL_NVIC_SetPriority+0x76>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000f9c:	2c0f      	cmp	r4, #15
 8000f9e:	d82d      	bhi.n	8000ffc <HAL_NVIC_SetPriority+0x6c>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b1b      	ldr	r3, [pc, #108]	; (8001010 <HAL_NVIC_SetPriority+0x80>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa8:	f1c3 0107 	rsb	r1, r3, #7
 8000fac:	2904      	cmp	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fae:	f103 0204 	add.w	r2, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb2:	bf28      	it	cs
 8000fb4:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb6:	2a06      	cmp	r2, #6
 8000fb8:	d917      	bls.n	8000fea <HAL_NVIC_SetPriority+0x5a>
 8000fba:	3b03      	subs	r3, #3
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fc0:	409a      	lsls	r2, r3
 8000fc2:	ea26 0602 	bic.w	r6, r6, r2

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000fca:	408a      	lsls	r2, r1
 8000fcc:	ea24 0202 	bic.w	r2, r4, r2
 8000fd0:	409a      	lsls	r2, r3
 8000fd2:	4332      	orrs	r2, r6
 8000fd4:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 8000fd6:	2d00      	cmp	r5, #0
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	db09      	blt.n	8000ff0 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	f105 4560 	add.w	r5, r5, #3758096384	; 0xe0000000
 8000fe0:	f505 4561 	add.w	r5, r5, #57600	; 0xe100
 8000fe4:	f885 2300 	strb.w	r2, [r5, #768]	; 0x300
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000fe8:	bd70      	pop	{r4, r5, r6, pc}
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fea:	2600      	movs	r6, #0
 8000fec:	4633      	mov	r3, r6
 8000fee:	e7ea      	b.n	8000fc6 <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <HAL_NVIC_SetPriority+0x84>)
 8000ff2:	f005 050f 	and.w	r5, r5, #15
 8000ff6:	442b      	add	r3, r5
 8000ff8:	761a      	strb	r2, [r3, #24]
 8000ffa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000ffc:	21ab      	movs	r1, #171	; 0xab
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <HAL_NVIC_SetPriority+0x88>)
 8001000:	f006 fdda 	bl	8007bb8 <assert_failed>
 8001004:	e7cc      	b.n	8000fa0 <HAL_NVIC_SetPriority+0x10>
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001006:	21aa      	movs	r1, #170	; 0xaa
 8001008:	4803      	ldr	r0, [pc, #12]	; (8001018 <HAL_NVIC_SetPriority+0x88>)
 800100a:	f006 fdd5 	bl	8007bb8 <assert_failed>
 800100e:	e7c5      	b.n	8000f9c <HAL_NVIC_SetPriority+0xc>
 8001010:	e000ed00 	.word	0xe000ed00
 8001014:	e000ecfc 	.word	0xe000ecfc
 8001018:	0800c634 	.word	0x0800c634

0800101c <HAL_NVIC_EnableIRQ>:
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800101c:	2800      	cmp	r0, #0
 800101e:	db08      	blt.n	8001032 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001020:	f000 011f 	and.w	r1, r0, #31
 8001024:	2301      	movs	r3, #1
 8001026:	0940      	lsrs	r0, r0, #5
 8001028:	4a04      	ldr	r2, [pc, #16]	; (800103c <HAL_NVIC_EnableIRQ+0x20>)
 800102a:	408b      	lsls	r3, r1
 800102c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001030:	4770      	bx	lr
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001032:	21be      	movs	r1, #190	; 0xbe
 8001034:	4802      	ldr	r0, [pc, #8]	; (8001040 <HAL_NVIC_EnableIRQ+0x24>)
 8001036:	f006 bdbf 	b.w	8007bb8 <assert_failed>
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100
 8001040:	0800c634 	.word	0x0800c634

08001044 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	3801      	subs	r0, #1
 8001046:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800104a:	d20e      	bcs.n	800106a <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800104e:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	4c08      	ldr	r4, [pc, #32]	; (8001074 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	20f0      	movs	r0, #240	; 0xf0
 8001056:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800105a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800105c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800105e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001062:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8001064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001068:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800106a:	2001      	movs	r0, #1
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e010 	.word	0xe000e010
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800107a:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ff66 	bl	8000f4c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001080:	2c00      	cmp	r4, #0
 8001082:	f000 80e4 	beq.w	800124e <HAL_DMA_Init+0x1d6>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001086:	6823      	ldr	r3, [r4, #0]
 8001088:	4ab1      	ldr	r2, [pc, #708]	; (8001350 <HAL_DMA_Init+0x2d8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	4605      	mov	r5, r0
 800108e:	d031      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 8001090:	3218      	adds	r2, #24
 8001092:	4293      	cmp	r3, r2
 8001094:	d02e      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 8001096:	3218      	adds	r2, #24
 8001098:	4293      	cmp	r3, r2
 800109a:	d02b      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 800109c:	3218      	adds	r2, #24
 800109e:	4293      	cmp	r3, r2
 80010a0:	d028      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 80010a2:	3218      	adds	r2, #24
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d025      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 80010a8:	3218      	adds	r2, #24
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d022      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 80010ae:	3218      	adds	r2, #24
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d01f      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 80010b4:	3218      	adds	r2, #24
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d01c      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 80010ba:	f502 7256 	add.w	r2, r2, #856	; 0x358
 80010be:	4293      	cmp	r3, r2
 80010c0:	d018      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 80010c2:	3218      	adds	r2, #24
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d015      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 80010c8:	3218      	adds	r2, #24
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d012      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 80010ce:	3218      	adds	r2, #24
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d00f      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 80010d4:	3218      	adds	r2, #24
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d00c      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 80010da:	3218      	adds	r2, #24
 80010dc:	4293      	cmp	r3, r2
 80010de:	d009      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 80010e0:	3218      	adds	r2, #24
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d006      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 80010e6:	3218      	adds	r2, #24
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d003      	beq.n	80010f4 <HAL_DMA_Init+0x7c>
 80010ec:	21b8      	movs	r1, #184	; 0xb8
 80010ee:	4899      	ldr	r0, [pc, #612]	; (8001354 <HAL_DMA_Init+0x2dc>)
 80010f0:	f006 fd62 	bl	8007bb8 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80010f4:	6863      	ldr	r3, [r4, #4]
 80010f6:	f033 63c0 	bics.w	r3, r3, #100663296	; 0x6000000
 80010fa:	d006      	beq.n	800110a <HAL_DMA_Init+0x92>
 80010fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001100:	d003      	beq.n	800110a <HAL_DMA_Init+0x92>
 8001102:	21b9      	movs	r1, #185	; 0xb9
 8001104:	4893      	ldr	r0, [pc, #588]	; (8001354 <HAL_DMA_Init+0x2dc>)
 8001106:	f006 fd57 	bl	8007bb8 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800110a:	68a3      	ldr	r3, [r4, #8]
 800110c:	f033 0240 	bics.w	r2, r3, #64	; 0x40
 8001110:	d002      	beq.n	8001118 <HAL_DMA_Init+0xa0>
 8001112:	2b80      	cmp	r3, #128	; 0x80
 8001114:	f040 80cb 	bne.w	80012ae <HAL_DMA_Init+0x236>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001118:	68e3      	ldr	r3, [r4, #12]
 800111a:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 800111e:	f040 80a2 	bne.w	8001266 <HAL_DMA_Init+0x1ee>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001122:	6923      	ldr	r3, [r4, #16]
 8001124:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8001128:	f040 8093 	bne.w	8001252 <HAL_DMA_Init+0x1da>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800112c:	6963      	ldr	r3, [r4, #20]
 800112e:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8001132:	d003      	beq.n	800113c <HAL_DMA_Init+0xc4>
 8001134:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001138:	f040 80c3 	bne.w	80012c2 <HAL_DMA_Init+0x24a>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800113c:	69a3      	ldr	r3, [r4, #24]
 800113e:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 8001142:	d003      	beq.n	800114c <HAL_DMA_Init+0xd4>
 8001144:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001148:	f040 80a7 	bne.w	800129a <HAL_DMA_Init+0x222>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800114c:	69e3      	ldr	r3, [r4, #28]
 800114e:	f033 0220 	bics.w	r2, r3, #32
 8001152:	d006      	beq.n	8001162 <HAL_DMA_Init+0xea>
 8001154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001158:	d003      	beq.n	8001162 <HAL_DMA_Init+0xea>
 800115a:	21bf      	movs	r1, #191	; 0xbf
 800115c:	487d      	ldr	r0, [pc, #500]	; (8001354 <HAL_DMA_Init+0x2dc>)
 800115e:	f006 fd2b 	bl	8007bb8 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8001162:	6a23      	ldr	r3, [r4, #32]
 8001164:	f433 3340 	bics.w	r3, r3, #196608	; 0x30000
 8001168:	d003      	beq.n	8001172 <HAL_DMA_Init+0xfa>
 800116a:	21c0      	movs	r1, #192	; 0xc0
 800116c:	4879      	ldr	r0, [pc, #484]	; (8001354 <HAL_DMA_Init+0x2dc>)
 800116e:	f006 fd23 	bl	8007bb8 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001172:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001174:	2b00      	cmp	r3, #0
 8001176:	d14d      	bne.n	8001214 <HAL_DMA_Init+0x19c>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001178:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800117a:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800117c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001180:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8001182:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8001184:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8001188:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 800118c:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800118e:	e005      	b.n	800119c <HAL_DMA_Init+0x124>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001190:	f7ff fedc 	bl	8000f4c <HAL_GetTick>
 8001194:	1b40      	subs	r0, r0, r5
 8001196:	2805      	cmp	r0, #5
 8001198:	d852      	bhi.n	8001240 <HAL_DMA_Init+0x1c8>
 800119a:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	07d1      	lsls	r1, r2, #31
 80011a0:	d4f6      	bmi.n	8001190 <HAL_DMA_Init+0x118>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011a2:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011a6:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011aa:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ac:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 80011ae:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b0:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011b2:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011b6:	430a      	orrs	r2, r1
 80011b8:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 80011ba:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011bc:	4866      	ldr	r0, [pc, #408]	; (8001358 <HAL_DMA_Init+0x2e0>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011be:	4332      	orrs	r2, r6
 80011c0:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80011c2:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011c6:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011c8:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ca:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011ce:	f000 8082 	beq.w	80012d6 <HAL_DMA_Init+0x25e>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80011d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80011d4:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80011d6:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80011da:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80011dc:	b2da      	uxtb	r2, r3
 80011de:	485f      	ldr	r0, [pc, #380]	; (800135c <HAL_DMA_Init+0x2e4>)
  hdma->Instance->FCR = tmp;
 80011e0:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80011e2:	3a10      	subs	r2, #16
 80011e4:	fba0 1202 	umull	r1, r2, r0, r2
 80011e8:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80011ea:	495d      	ldr	r1, [pc, #372]	; (8001360 <HAL_DMA_Init+0x2e8>)
 80011ec:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80011f0:	5c89      	ldrb	r1, [r1, r2]
 80011f2:	65e1      	str	r1, [r4, #92]	; 0x5c
 80011f4:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 80011f8:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80011fa:	bf88      	it	hi
 80011fc:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011fe:	223f      	movs	r2, #63	; 0x3f
 8001200:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 8001202:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001204:	2100      	movs	r1, #0
 8001206:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 8001208:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800120a:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800120c:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800120e:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 8001212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001214:	2b04      	cmp	r3, #4
 8001216:	d130      	bne.n	800127a <HAL_DMA_Init+0x202>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001218:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800121a:	2b03      	cmp	r3, #3
 800121c:	d838      	bhi.n	8001290 <HAL_DMA_Init+0x218>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800121e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001220:	f033 73c0 	bics.w	r3, r3, #25165824	; 0x1800000
 8001224:	d003      	beq.n	800122e <HAL_DMA_Init+0x1b6>
 8001226:	21c7      	movs	r1, #199	; 0xc7
 8001228:	484a      	ldr	r0, [pc, #296]	; (8001354 <HAL_DMA_Init+0x2dc>)
 800122a:	f006 fcc5 	bl	8007bb8 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 800122e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001230:	f433 03c0 	bics.w	r3, r3, #6291456	; 0x600000
 8001234:	d0a0      	beq.n	8001178 <HAL_DMA_Init+0x100>
 8001236:	21c8      	movs	r1, #200	; 0xc8
 8001238:	4846      	ldr	r0, [pc, #280]	; (8001354 <HAL_DMA_Init+0x2dc>)
 800123a:	f006 fcbd 	bl	8007bb8 <assert_failed>
 800123e:	e79b      	b.n	8001178 <HAL_DMA_Init+0x100>
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001240:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001242:	2220      	movs	r2, #32
 8001244:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8001246:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001248:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 800124c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 800124e:	2001      	movs	r0, #1
}
 8001250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001252:	21bc      	movs	r1, #188	; 0xbc
 8001254:	483f      	ldr	r0, [pc, #252]	; (8001354 <HAL_DMA_Init+0x2dc>)
 8001256:	f006 fcaf 	bl	8007bb8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800125a:	6963      	ldr	r3, [r4, #20]
 800125c:	f433 6200 	bics.w	r2, r3, #2048	; 0x800
 8001260:	f43f af6c 	beq.w	800113c <HAL_DMA_Init+0xc4>
 8001264:	e766      	b.n	8001134 <HAL_DMA_Init+0xbc>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8001266:	21bb      	movs	r1, #187	; 0xbb
 8001268:	483a      	ldr	r0, [pc, #232]	; (8001354 <HAL_DMA_Init+0x2dc>)
 800126a:	f006 fca5 	bl	8007bb8 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 800126e:	6923      	ldr	r3, [r4, #16]
 8001270:	f433 6380 	bics.w	r3, r3, #1024	; 0x400
 8001274:	f43f af5a 	beq.w	800112c <HAL_DMA_Init+0xb4>
 8001278:	e7eb      	b.n	8001252 <HAL_DMA_Init+0x1da>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800127a:	21c1      	movs	r1, #193	; 0xc1
 800127c:	4835      	ldr	r0, [pc, #212]	; (8001354 <HAL_DMA_Init+0x2dc>)
 800127e:	f006 fc9b 	bl	8007bb8 <assert_failed>
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001284:	2b00      	cmp	r3, #0
 8001286:	f43f af77 	beq.w	8001178 <HAL_DMA_Init+0x100>
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800128a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800128c:	2b03      	cmp	r3, #3
 800128e:	d9c6      	bls.n	800121e <HAL_DMA_Init+0x1a6>
 8001290:	21c6      	movs	r1, #198	; 0xc6
 8001292:	4830      	ldr	r0, [pc, #192]	; (8001354 <HAL_DMA_Init+0x2dc>)
 8001294:	f006 fc90 	bl	8007bb8 <assert_failed>
 8001298:	e7c1      	b.n	800121e <HAL_DMA_Init+0x1a6>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 800129a:	21be      	movs	r1, #190	; 0xbe
 800129c:	482d      	ldr	r0, [pc, #180]	; (8001354 <HAL_DMA_Init+0x2dc>)
 800129e:	f006 fc8b 	bl	8007bb8 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80012a2:	69e3      	ldr	r3, [r4, #28]
 80012a4:	f033 0220 	bics.w	r2, r3, #32
 80012a8:	f43f af5b 	beq.w	8001162 <HAL_DMA_Init+0xea>
 80012ac:	e752      	b.n	8001154 <HAL_DMA_Init+0xdc>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 80012ae:	21ba      	movs	r1, #186	; 0xba
 80012b0:	4828      	ldr	r0, [pc, #160]	; (8001354 <HAL_DMA_Init+0x2dc>)
 80012b2:	f006 fc81 	bl	8007bb8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 80012b6:	68e3      	ldr	r3, [r4, #12]
 80012b8:	f433 7300 	bics.w	r3, r3, #512	; 0x200
 80012bc:	f43f af31 	beq.w	8001122 <HAL_DMA_Init+0xaa>
 80012c0:	e7d1      	b.n	8001266 <HAL_DMA_Init+0x1ee>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80012c2:	21bd      	movs	r1, #189	; 0xbd
 80012c4:	4823      	ldr	r0, [pc, #140]	; (8001354 <HAL_DMA_Init+0x2dc>)
 80012c6:	f006 fc77 	bl	8007bb8 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80012ca:	69a3      	ldr	r3, [r4, #24]
 80012cc:	f433 5200 	bics.w	r2, r3, #8192	; 0x2000
 80012d0:	f43f af3c 	beq.w	800114c <HAL_DMA_Init+0xd4>
 80012d4:	e736      	b.n	8001144 <HAL_DMA_Init+0xcc>
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012d6:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 80012da:	4301      	orrs	r1, r0
 80012dc:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 80012de:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 80012e0:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 80012e2:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 80012e4:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012e8:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 80012ec:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012ee:	2800      	cmp	r0, #0
 80012f0:	f43f af74 	beq.w	80011dc <HAL_DMA_Init+0x164>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80012f4:	b18e      	cbz	r6, 800131a <HAL_DMA_Init+0x2a2>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80012f6:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 80012fa:	d01a      	beq.n	8001332 <HAL_DMA_Init+0x2ba>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80012fc:	2d02      	cmp	r5, #2
 80012fe:	d905      	bls.n	800130c <HAL_DMA_Init+0x294>
 8001300:	2d03      	cmp	r5, #3
 8001302:	f47f af6b 	bne.w	80011dc <HAL_DMA_Init+0x164>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001306:	01c2      	lsls	r2, r0, #7
 8001308:	f57f af68 	bpl.w	80011dc <HAL_DMA_Init+0x164>
        hdma->State = HAL_DMA_STATE_READY;
 800130c:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800130e:	2240      	movs	r2, #64	; 0x40
 8001310:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 8001312:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 8001314:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8001318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 800131a:	2d01      	cmp	r5, #1
 800131c:	d004      	beq.n	8001328 <HAL_DMA_Init+0x2b0>
 800131e:	d3f2      	bcc.n	8001306 <HAL_DMA_Init+0x28e>
 8001320:	2d02      	cmp	r5, #2
 8001322:	f47f af5b 	bne.w	80011dc <HAL_DMA_Init+0x164>
 8001326:	e7ee      	b.n	8001306 <HAL_DMA_Init+0x28e>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001328:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 800132c:	f47f af56 	bne.w	80011dc <HAL_DMA_Init+0x164>
 8001330:	e7ec      	b.n	800130c <HAL_DMA_Init+0x294>
    switch (tmp)
 8001332:	2d03      	cmp	r5, #3
 8001334:	f63f af52 	bhi.w	80011dc <HAL_DMA_Init+0x164>
 8001338:	a201      	add	r2, pc, #4	; (adr r2, 8001340 <HAL_DMA_Init+0x2c8>)
 800133a:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800133e:	bf00      	nop
 8001340:	0800130d 	.word	0x0800130d
 8001344:	08001307 	.word	0x08001307
 8001348:	0800130d 	.word	0x0800130d
 800134c:	08001329 	.word	0x08001329
 8001350:	40026010 	.word	0x40026010
 8001354:	0800c670 	.word	0x0800c670
 8001358:	f010803f 	.word	0xf010803f
 800135c:	aaaaaaab 	.word	0xaaaaaaab
 8001360:	0800c6a8 	.word	0x0800c6a8

08001364 <HAL_DMA_Start_IT>:
{
 8001364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001368:	4604      	mov	r4, r0
 800136a:	461d      	mov	r5, r3
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800136c:	1e58      	subs	r0, r3, #1
 800136e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8001372:	4298      	cmp	r0, r3
{
 8001374:	460f      	mov	r7, r1
 8001376:	4690      	mov	r8, r2
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001378:	6da6      	ldr	r6, [r4, #88]	; 0x58
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 800137a:	d83e      	bhi.n	80013fa <HAL_DMA_Start_IT+0x96>
  __HAL_LOCK(hdma);
 800137c:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001380:	2b01      	cmp	r3, #1
 8001382:	d043      	beq.n	800140c <HAL_DMA_Start_IT+0xa8>
  if(HAL_DMA_STATE_READY == hdma->State)
 8001384:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
  __HAL_LOCK(hdma);
 8001388:	2201      	movs	r2, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800138a:	4293      	cmp	r3, r2
  __HAL_LOCK(hdma);
 800138c:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001390:	d12d      	bne.n	80013ee <HAL_DMA_Start_IT+0x8a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001392:	6821      	ldr	r1, [r4, #0]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001394:	6de0      	ldr	r0, [r4, #92]	; 0x5c
    hdma->State = HAL_DMA_STATE_BUSY;
 8001396:	2202      	movs	r2, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001398:	2300      	movs	r3, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 800139a:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139e:	6563      	str	r3, [r4, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013a0:	680b      	ldr	r3, [r1, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013a2:	68a2      	ldr	r2, [r4, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80013a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013a8:	600b      	str	r3, [r1, #0]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013aa:	233f      	movs	r3, #63	; 0x3f
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80013ac:	2a40      	cmp	r2, #64	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013ae:	fa03 f300 	lsl.w	r3, r3, r0
  hdma->Instance->NDTR = DataLength;
 80013b2:	604d      	str	r5, [r1, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80013b4:	6c22      	ldr	r2, [r4, #64]	; 0x40
    hdma->Instance->PAR = DstAddress;
 80013b6:	bf0b      	itete	eq
 80013b8:	f8c1 8008 	streq.w	r8, [r1, #8]
    hdma->Instance->PAR = SrcAddress;
 80013bc:	608f      	strne	r7, [r1, #8]
    hdma->Instance->M0AR = SrcAddress;
 80013be:	60cf      	streq	r7, [r1, #12]
    hdma->Instance->M0AR = DstAddress;
 80013c0:	f8c1 800c 	strne.w	r8, [r1, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c4:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013c6:	680b      	ldr	r3, [r1, #0]
 80013c8:	f043 0316 	orr.w	r3, r3, #22
 80013cc:	600b      	str	r3, [r1, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80013ce:	694b      	ldr	r3, [r1, #20]
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	614b      	str	r3, [r1, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80013d6:	b11a      	cbz	r2, 80013e0 <HAL_DMA_Start_IT+0x7c>
      hdma->Instance->CR  |= DMA_IT_HT;
 80013d8:	680b      	ldr	r3, [r1, #0]
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	600b      	str	r3, [r1, #0]
    __HAL_DMA_ENABLE(hdma);
 80013e0:	680b      	ldr	r3, [r1, #0]
 80013e2:	f043 0301 	orr.w	r3, r3, #1
 80013e6:	600b      	str	r3, [r1, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013e8:	2000      	movs	r0, #0
}
 80013ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_UNLOCK(hdma);	  
 80013ee:	2300      	movs	r3, #0
 80013f0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    status = HAL_BUSY;
 80013f4:	2002      	movs	r0, #2
}
 80013f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80013fa:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_DMA_Start_IT+0xb0>)
 8001400:	f006 fbda 	bl	8007bb8 <assert_failed>
  __HAL_LOCK(hdma);
 8001404:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8001408:	2b01      	cmp	r3, #1
 800140a:	d1bb      	bne.n	8001384 <HAL_DMA_Start_IT+0x20>
 800140c:	2002      	movs	r0, #2
}
 800140e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001412:	bf00      	nop
 8001414:	0800c670 	.word	0x0800c670

08001418 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001418:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800141c:	2b02      	cmp	r3, #2
 800141e:	d003      	beq.n	8001428 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001420:	2380      	movs	r3, #128	; 0x80
 8001422:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8001424:	2001      	movs	r0, #1
 8001426:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8001428:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800142a:	2305      	movs	r3, #5
 800142c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8001430:	6813      	ldr	r3, [r2, #0]
 8001432:	f023 0301 	bic.w	r3, r3, #1
 8001436:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8001438:	2000      	movs	r0, #0
}
 800143a:	4770      	bx	lr

0800143c <HAL_DMA_IRQHandler>:
{
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8001440:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001442:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8001444:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001446:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8001448:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800144a:	4965      	ldr	r1, [pc, #404]	; (80015e0 <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800144c:	2208      	movs	r2, #8
 800144e:	409a      	lsls	r2, r3
 8001450:	422a      	tst	r2, r5
{
 8001452:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8001454:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001456:	d003      	beq.n	8001460 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001458:	6801      	ldr	r1, [r0, #0]
 800145a:	6808      	ldr	r0, [r1, #0]
 800145c:	0740      	lsls	r0, r0, #29
 800145e:	d459      	bmi.n	8001514 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001460:	2201      	movs	r2, #1
 8001462:	409a      	lsls	r2, r3
 8001464:	422a      	tst	r2, r5
 8001466:	d003      	beq.n	8001470 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001468:	6821      	ldr	r1, [r4, #0]
 800146a:	6949      	ldr	r1, [r1, #20]
 800146c:	0608      	lsls	r0, r1, #24
 800146e:	d474      	bmi.n	800155a <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001470:	2204      	movs	r2, #4
 8001472:	409a      	lsls	r2, r3
 8001474:	422a      	tst	r2, r5
 8001476:	d003      	beq.n	8001480 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001478:	6821      	ldr	r1, [r4, #0]
 800147a:	6809      	ldr	r1, [r1, #0]
 800147c:	0789      	lsls	r1, r1, #30
 800147e:	d466      	bmi.n	800154e <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001480:	2210      	movs	r2, #16
 8001482:	409a      	lsls	r2, r3
 8001484:	422a      	tst	r2, r5
 8001486:	d003      	beq.n	8001490 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001488:	6821      	ldr	r1, [r4, #0]
 800148a:	6808      	ldr	r0, [r1, #0]
 800148c:	0700      	lsls	r0, r0, #28
 800148e:	d44b      	bmi.n	8001528 <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001490:	2220      	movs	r2, #32
 8001492:	409a      	lsls	r2, r3
 8001494:	422a      	tst	r2, r5
 8001496:	d014      	beq.n	80014c2 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001498:	6821      	ldr	r1, [r4, #0]
 800149a:	6808      	ldr	r0, [r1, #0]
 800149c:	06c0      	lsls	r0, r0, #27
 800149e:	d510      	bpl.n	80014c2 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014a0:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014a2:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80014a6:	2a05      	cmp	r2, #5
 80014a8:	d063      	beq.n	8001572 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014aa:	680b      	ldr	r3, [r1, #0]
 80014ac:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014b0:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014b2:	d07e      	beq.n	80015b2 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014b4:	0319      	lsls	r1, r3, #12
 80014b6:	f140 8089 	bpl.w	80015cc <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 80014ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80014bc:	b10b      	cbz	r3, 80014c2 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 80014be:	4620      	mov	r0, r4
 80014c0:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014c2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80014c4:	b323      	cbz	r3, 8001510 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80014c8:	07da      	lsls	r2, r3, #31
 80014ca:	d51a      	bpl.n	8001502 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 80014cc:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80014ce:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80014d0:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80014d4:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014d6:	4943      	ldr	r1, [pc, #268]	; (80015e4 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 80014d8:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80014dc:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 80014e0:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014e2:	0ab6      	lsrs	r6, r6, #10
 80014e4:	e002      	b.n	80014ec <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014e6:	6813      	ldr	r3, [r2, #0]
 80014e8:	07db      	lsls	r3, r3, #31
 80014ea:	d504      	bpl.n	80014f6 <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 80014ec:	9b01      	ldr	r3, [sp, #4]
 80014ee:	3301      	adds	r3, #1
 80014f0:	42b3      	cmp	r3, r6
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	d9f7      	bls.n	80014e6 <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 80014f6:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 80014f8:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 80014fa:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80014fe:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8001502:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001504:	b123      	cbz	r3, 8001510 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8001506:	4620      	mov	r0, r4
}
 8001508:	b003      	add	sp, #12
 800150a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 800150e:	4718      	bx	r3
}
 8001510:	b003      	add	sp, #12
 8001512:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001514:	6808      	ldr	r0, [r1, #0]
 8001516:	f020 0004 	bic.w	r0, r0, #4
 800151a:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800151c:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800151e:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001520:	f042 0201 	orr.w	r2, r2, #1
 8001524:	6562      	str	r2, [r4, #84]	; 0x54
 8001526:	e79b      	b.n	8001460 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001528:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800152a:	680a      	ldr	r2, [r1, #0]
 800152c:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001530:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001532:	d118      	bne.n	8001566 <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001534:	05d2      	lsls	r2, r2, #23
 8001536:	d403      	bmi.n	8001540 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001538:	680a      	ldr	r2, [r1, #0]
 800153a:	f022 0208 	bic.w	r2, r2, #8
 800153e:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8001540:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001542:	2a00      	cmp	r2, #0
 8001544:	d0a4      	beq.n	8001490 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8001546:	4620      	mov	r0, r4
 8001548:	4790      	blx	r2
 800154a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800154c:	e7a0      	b.n	8001490 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800154e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001550:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8001552:	f042 0204 	orr.w	r2, r2, #4
 8001556:	6562      	str	r2, [r4, #84]	; 0x54
 8001558:	e792      	b.n	8001480 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800155a:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800155c:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800155e:	f042 0202 	orr.w	r2, r2, #2
 8001562:	6562      	str	r2, [r4, #84]	; 0x54
 8001564:	e784      	b.n	8001470 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001566:	0311      	lsls	r1, r2, #12
 8001568:	d5ea      	bpl.n	8001540 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800156a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800156c:	2a00      	cmp	r2, #0
 800156e:	d1ea      	bne.n	8001546 <HAL_DMA_IRQHandler+0x10a>
 8001570:	e78e      	b.n	8001490 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001572:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001574:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001576:	f022 0216 	bic.w	r2, r2, #22
 800157a:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800157c:	694a      	ldr	r2, [r1, #20]
 800157e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001582:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001584:	b338      	cbz	r0, 80015d6 <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001586:	680a      	ldr	r2, [r1, #0]
 8001588:	f022 0208 	bic.w	r2, r2, #8
 800158c:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800158e:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8001590:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8001596:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8001598:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800159a:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 800159c:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 80015a0:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 80015a4:	2900      	cmp	r1, #0
 80015a6:	d0b3      	beq.n	8001510 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 80015a8:	4620      	mov	r0, r4
}
 80015aa:	b003      	add	sp, #12
 80015ac:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 80015b0:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015b2:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80015b6:	d180      	bne.n	80014ba <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015b8:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80015ba:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80015bc:	f022 0210 	bic.w	r2, r2, #16
 80015c0:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 80015c2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80015c6:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 80015ca:	e776      	b.n	80014ba <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 80015cc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f47f af75 	bne.w	80014be <HAL_DMA_IRQHandler+0x82>
 80015d4:	e775      	b.n	80014c2 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80015d8:	2a00      	cmp	r2, #0
 80015da:	d1d4      	bne.n	8001586 <HAL_DMA_IRQHandler+0x14a>
 80015dc:	e7d7      	b.n	800158e <HAL_DMA_IRQHandler+0x152>
 80015de:	bf00      	nop
 80015e0:	20000090 	.word	0x20000090
 80015e4:	1b4e81b5 	.word	0x1b4e81b5

080015e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80015ec:	4b9c      	ldr	r3, [pc, #624]	; (8001860 <HAL_GPIO_Init+0x278>)
 80015ee:	4298      	cmp	r0, r3
{
 80015f0:	b083      	sub	sp, #12
 80015f2:	4683      	mov	fp, r0
 80015f4:	468a      	mov	sl, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80015f6:	d017      	beq.n	8001628 <HAL_GPIO_Init+0x40>
 80015f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80015fc:	4298      	cmp	r0, r3
 80015fe:	d013      	beq.n	8001628 <HAL_GPIO_Init+0x40>
 8001600:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001604:	4298      	cmp	r0, r3
 8001606:	d00f      	beq.n	8001628 <HAL_GPIO_Init+0x40>
 8001608:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800160c:	4298      	cmp	r0, r3
 800160e:	d00b      	beq.n	8001628 <HAL_GPIO_Init+0x40>
 8001610:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001614:	4298      	cmp	r0, r3
 8001616:	d007      	beq.n	8001628 <HAL_GPIO_Init+0x40>
 8001618:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 800161c:	4298      	cmp	r0, r3
 800161e:	d003      	beq.n	8001628 <HAL_GPIO_Init+0x40>
 8001620:	21b3      	movs	r1, #179	; 0xb3
 8001622:	4890      	ldr	r0, [pc, #576]	; (8001864 <HAL_GPIO_Init+0x27c>)
 8001624:	f006 fac8 	bl	8007bb8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001628:	f8da 3000 	ldr.w	r3, [sl]
 800162c:	b299      	uxth	r1, r3
 800162e:	2900      	cmp	r1, #0
 8001630:	f000 80b6 	beq.w	80017a0 <HAL_GPIO_Init+0x1b8>
 8001634:	0c1b      	lsrs	r3, r3, #16
 8001636:	041b      	lsls	r3, r3, #16
 8001638:	2b00      	cmp	r3, #0
 800163a:	f040 80b1 	bne.w	80017a0 <HAL_GPIO_Init+0x1b8>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800163e:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001642:	2b03      	cmp	r3, #3
 8001644:	d917      	bls.n	8001676 <HAL_GPIO_Init+0x8e>
 8001646:	f1a3 0111 	sub.w	r1, r3, #17
 800164a:	2901      	cmp	r1, #1
 800164c:	d913      	bls.n	8001676 <HAL_GPIO_Init+0x8e>
 800164e:	4886      	ldr	r0, [pc, #536]	; (8001868 <HAL_GPIO_Init+0x280>)
 8001650:	f423 1100 	bic.w	r1, r3, #2097152	; 0x200000
 8001654:	4281      	cmp	r1, r0
 8001656:	d00e      	beq.n	8001676 <HAL_GPIO_Init+0x8e>
 8001658:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800165c:	4283      	cmp	r3, r0
 800165e:	d00a      	beq.n	8001676 <HAL_GPIO_Init+0x8e>
 8001660:	f5a0 2070 	sub.w	r0, r0, #983040	; 0xf0000
 8001664:	4281      	cmp	r1, r0
 8001666:	d006      	beq.n	8001676 <HAL_GPIO_Init+0x8e>
 8001668:	4980      	ldr	r1, [pc, #512]	; (800186c <HAL_GPIO_Init+0x284>)
 800166a:	428b      	cmp	r3, r1
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_Init+0x8e>
 800166e:	21b5      	movs	r1, #181	; 0xb5
 8001670:	487c      	ldr	r0, [pc, #496]	; (8001864 <HAL_GPIO_Init+0x27c>)
 8001672:	f006 faa1 	bl	8007bb8 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001676:	f8da 3008 	ldr.w	r3, [sl, #8]
 800167a:	2b02      	cmp	r3, #2
 800167c:	f200 80e5 	bhi.w	800184a <HAL_GPIO_Init+0x262>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001680:	f8df 9200 	ldr.w	r9, [pc, #512]	; 8001884 <HAL_GPIO_Init+0x29c>
{
 8001684:	f04f 0800 	mov.w	r8, #0
 8001688:	e005      	b.n	8001696 <HAL_GPIO_Init+0xae>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800168a:	f108 0801 	add.w	r8, r8, #1
 800168e:	f1b8 0f10 	cmp.w	r8, #16
 8001692:	f000 8082 	beq.w	800179a <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001696:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001698:	f8da 5000 	ldr.w	r5, [sl]
    ioposition = 0x01U << position;
 800169c:	fa04 f408 	lsl.w	r4, r4, r8
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a0:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 80016a2:	42ac      	cmp	r4, r5
 80016a4:	d1f1      	bne.n	800168a <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a6:	f8da 2004 	ldr.w	r2, [sl, #4]
 80016aa:	f022 0110 	bic.w	r1, r2, #16
 80016ae:	2902      	cmp	r1, #2
 80016b0:	f000 8092 	beq.w	80017d8 <HAL_GPIO_Init+0x1f0>
 80016b4:	ea4f 0748 	mov.w	r7, r8, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016b8:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 80016ba:	f8db 0000 	ldr.w	r0, [fp]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016be:	40be      	lsls	r6, r7
 80016c0:	43f6      	mvns	r6, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c2:	f002 0303 	and.w	r3, r2, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016c6:	4030      	ands	r0, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c8:	40bb      	lsls	r3, r7
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ca:	3901      	subs	r1, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016cc:	4303      	orrs	r3, r0
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016ce:	2901      	cmp	r1, #1
      GPIOx->MODER = temp;
 80016d0:	f8cb 3000 	str.w	r3, [fp]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016d4:	d969      	bls.n	80017aa <HAL_GPIO_Init+0x1c2>
      temp = GPIOx->PUPDR;
 80016d6:	f8db 100c 	ldr.w	r1, [fp, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016da:	f8da 3008 	ldr.w	r3, [sl, #8]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016de:	400e      	ands	r6, r1
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016e0:	fa03 f707 	lsl.w	r7, r3, r7
 80016e4:	4337      	orrs	r7, r6
      GPIOx->PUPDR = temp;
 80016e6:	f8cb 700c 	str.w	r7, [fp, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016ea:	00d7      	lsls	r7, r2, #3
 80016ec:	d5cd      	bpl.n	800168a <HAL_GPIO_Init+0xa2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ee:	4b60      	ldr	r3, [pc, #384]	; (8001870 <HAL_GPIO_Init+0x288>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016f0:	4c5b      	ldr	r4, [pc, #364]	; (8001860 <HAL_GPIO_Init+0x278>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f2:	2100      	movs	r1, #0
 80016f4:	9101      	str	r1, [sp, #4]
 80016f6:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80016f8:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 80016fc:	6459      	str	r1, [r3, #68]	; 0x44
 80016fe:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001700:	f028 0303 	bic.w	r3, r8, #3
 8001704:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001708:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800170c:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8001710:	9101      	str	r1, [sp, #4]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001712:	f008 0103 	and.w	r1, r8, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001716:	9801      	ldr	r0, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8001718:	689e      	ldr	r6, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800171a:	0089      	lsls	r1, r1, #2
 800171c:	200f      	movs	r0, #15
 800171e:	4088      	lsls	r0, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001720:	45a3      	cmp	fp, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001722:	ea26 0000 	bic.w	r0, r6, r0
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001726:	d012      	beq.n	800174e <HAL_GPIO_Init+0x166>
 8001728:	45cb      	cmp	fp, r9
 800172a:	f000 8084 	beq.w	8001836 <HAL_GPIO_Init+0x24e>
 800172e:	4c51      	ldr	r4, [pc, #324]	; (8001874 <HAL_GPIO_Init+0x28c>)
 8001730:	45a3      	cmp	fp, r4
 8001732:	f000 8085 	beq.w	8001840 <HAL_GPIO_Init+0x258>
 8001736:	4c50      	ldr	r4, [pc, #320]	; (8001878 <HAL_GPIO_Init+0x290>)
 8001738:	45a3      	cmp	fp, r4
 800173a:	f000 808b 	beq.w	8001854 <HAL_GPIO_Init+0x26c>
 800173e:	4c4f      	ldr	r4, [pc, #316]	; (800187c <HAL_GPIO_Init+0x294>)
 8001740:	45a3      	cmp	fp, r4
 8001742:	bf0c      	ite	eq
 8001744:	2404      	moveq	r4, #4
 8001746:	2407      	movne	r4, #7
 8001748:	fa04 f101 	lsl.w	r1, r4, r1
 800174c:	4308      	orrs	r0, r1
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800174e:	494c      	ldr	r1, [pc, #304]	; (8001880 <HAL_GPIO_Init+0x298>)
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001750:	6098      	str	r0, [r3, #8]
        temp = EXTI->IMR;
 8001752:	680b      	ldr	r3, [r1, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
        }
        EXTI->IMR = temp;
 8001754:	484a      	ldr	r0, [pc, #296]	; (8001880 <HAL_GPIO_Init+0x298>)
        temp &= ~((uint32_t)iocurrent);
 8001756:	43e9      	mvns	r1, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001758:	03d6      	lsls	r6, r2, #15
          temp |= iocurrent;
 800175a:	bf4c      	ite	mi
 800175c:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 800175e:	400b      	andpl	r3, r1
        EXTI->IMR = temp;
 8001760:	6003      	str	r3, [r0, #0]

        temp = EXTI->EMR;
 8001762:	6843      	ldr	r3, [r0, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8001764:	4846      	ldr	r0, [pc, #280]	; (8001880 <HAL_GPIO_Init+0x298>)
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001766:	0394      	lsls	r4, r2, #14
          temp |= iocurrent;
 8001768:	bf4c      	ite	mi
 800176a:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 800176c:	400b      	andpl	r3, r1
        EXTI->EMR = temp;
 800176e:	6043      	str	r3, [r0, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001770:	6883      	ldr	r3, [r0, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001772:	02d0      	lsls	r0, r2, #11
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 8001774:	4842      	ldr	r0, [pc, #264]	; (8001880 <HAL_GPIO_Init+0x298>)
          temp |= iocurrent;
 8001776:	bf4c      	ite	mi
 8001778:	432b      	orrmi	r3, r5
        temp &= ~((uint32_t)iocurrent);
 800177a:	400b      	andpl	r3, r1
        EXTI->RTSR = temp;
 800177c:	6083      	str	r3, [r0, #8]

        temp = EXTI->FTSR;
 800177e:	68c3      	ldr	r3, [r0, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001780:	0292      	lsls	r2, r2, #10
        temp &= ~((uint32_t)iocurrent);
 8001782:	bf54      	ite	pl
 8001784:	ea01 0503 	andpl.w	r5, r1, r3
        {
          temp |= iocurrent;
 8001788:	431d      	orrmi	r5, r3
  for(position = 0U; position < GPIO_NUMBER; position++)
 800178a:	f108 0801 	add.w	r8, r8, #1
        }
        EXTI->FTSR = temp;
 800178e:	4b3c      	ldr	r3, [pc, #240]	; (8001880 <HAL_GPIO_Init+0x298>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001790:	f1b8 0f10 	cmp.w	r8, #16
        EXTI->FTSR = temp;
 8001794:	60dd      	str	r5, [r3, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001796:	f47f af7e 	bne.w	8001696 <HAL_GPIO_Init+0xae>
      }
    }
  }
}
 800179a:	b003      	add	sp, #12
 800179c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80017a0:	21b4      	movs	r1, #180	; 0xb4
 80017a2:	4830      	ldr	r0, [pc, #192]	; (8001864 <HAL_GPIO_Init+0x27c>)
 80017a4:	f006 fa08 	bl	8007bb8 <assert_failed>
 80017a8:	e749      	b.n	800163e <HAL_GPIO_Init+0x56>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80017aa:	f8da 300c 	ldr.w	r3, [sl, #12]
 80017ae:	2b03      	cmp	r3, #3
 80017b0:	d838      	bhi.n	8001824 <HAL_GPIO_Init+0x23c>
        temp = GPIOx->OSPEEDR; 
 80017b2:	f8db 1008 	ldr.w	r1, [fp, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b6:	40bb      	lsls	r3, r7
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017b8:	4031      	ands	r1, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ba:	430b      	orrs	r3, r1
        GPIOx->OSPEEDR = temp;
 80017bc:	f8cb 3008 	str.w	r3, [fp, #8]
        temp = GPIOx->OTYPER;
 80017c0:	f8db 1004 	ldr.w	r1, [fp, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017c4:	f3c2 1300 	ubfx	r3, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017c8:	ea21 0104 	bic.w	r1, r1, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017cc:	fa03 f408 	lsl.w	r4, r3, r8
 80017d0:	430c      	orrs	r4, r1
        GPIOx->OTYPER = temp;
 80017d2:	f8cb 4004 	str.w	r4, [fp, #4]
 80017d6:	e77e      	b.n	80016d6 <HAL_GPIO_Init+0xee>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80017d8:	f8da 3010 	ldr.w	r3, [sl, #16]
 80017dc:	2b0f      	cmp	r3, #15
 80017de:	d91b      	bls.n	8001818 <HAL_GPIO_Init+0x230>
 80017e0:	21c7      	movs	r1, #199	; 0xc7
 80017e2:	4820      	ldr	r0, [pc, #128]	; (8001864 <HAL_GPIO_Init+0x27c>)
 80017e4:	f006 f9e8 	bl	8007bb8 <assert_failed>
 80017e8:	f8da 2004 	ldr.w	r2, [sl, #4]
 80017ec:	f8da 3010 	ldr.w	r3, [sl, #16]
 80017f0:	f022 0110 	bic.w	r1, r2, #16
        temp = GPIOx->AFR[position >> 3U];
 80017f4:	ea4f 06d8 	mov.w	r6, r8, lsr #3
 80017f8:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017fc:	f008 0007 	and.w	r0, r8, #7
        temp = GPIOx->AFR[position >> 3U];
 8001800:	6a37      	ldr	r7, [r6, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001802:	0080      	lsls	r0, r0, #2
 8001804:	f04f 0c0f 	mov.w	ip, #15
 8001808:	fa0c fc00 	lsl.w	ip, ip, r0
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800180c:	4083      	lsls	r3, r0
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800180e:	ea27 070c 	bic.w	r7, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001812:	433b      	orrs	r3, r7
        GPIOx->AFR[position >> 3U] = temp;
 8001814:	6233      	str	r3, [r6, #32]
 8001816:	e74d      	b.n	80016b4 <HAL_GPIO_Init+0xcc>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001818:	f249 70f7 	movw	r0, #38903	; 0x97f7
 800181c:	40d8      	lsrs	r0, r3
 800181e:	07c0      	lsls	r0, r0, #31
 8001820:	d4e8      	bmi.n	80017f4 <HAL_GPIO_Init+0x20c>
 8001822:	e7dd      	b.n	80017e0 <HAL_GPIO_Init+0x1f8>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001824:	21da      	movs	r1, #218	; 0xda
 8001826:	480f      	ldr	r0, [pc, #60]	; (8001864 <HAL_GPIO_Init+0x27c>)
 8001828:	f006 f9c6 	bl	8007bb8 <assert_failed>
 800182c:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001830:	f8da 2004 	ldr.w	r2, [sl, #4]
 8001834:	e7bd      	b.n	80017b2 <HAL_GPIO_Init+0x1ca>
 8001836:	2401      	movs	r4, #1
 8001838:	fa04 f101 	lsl.w	r1, r4, r1
 800183c:	4308      	orrs	r0, r1
 800183e:	e786      	b.n	800174e <HAL_GPIO_Init+0x166>
 8001840:	2402      	movs	r4, #2
 8001842:	fa04 f101 	lsl.w	r1, r4, r1
 8001846:	4308      	orrs	r0, r1
 8001848:	e781      	b.n	800174e <HAL_GPIO_Init+0x166>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800184a:	21b6      	movs	r1, #182	; 0xb6
 800184c:	4805      	ldr	r0, [pc, #20]	; (8001864 <HAL_GPIO_Init+0x27c>)
 800184e:	f006 f9b3 	bl	8007bb8 <assert_failed>
 8001852:	e715      	b.n	8001680 <HAL_GPIO_Init+0x98>
 8001854:	2403      	movs	r4, #3
 8001856:	fa04 f101 	lsl.w	r1, r4, r1
 800185a:	4308      	orrs	r0, r1
 800185c:	e777      	b.n	800174e <HAL_GPIO_Init+0x166>
 800185e:	bf00      	nop
 8001860:	40020000 	.word	0x40020000
 8001864:	0800c6b0 	.word	0x0800c6b0
 8001868:	10110000 	.word	0x10110000
 800186c:	10220000 	.word	0x10220000
 8001870:	40023800 	.word	0x40023800
 8001874:	40020800 	.word	0x40020800
 8001878:	40020c00 	.word	0x40020c00
 800187c:	40021000 	.word	0x40021000
 8001880:	40013c00 	.word	0x40013c00
 8001884:	40020400 	.word	0x40020400

08001888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001888:	b570      	push	{r4, r5, r6, lr}
 800188a:	4606      	mov	r6, r0
 800188c:	4615      	mov	r5, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800188e:	460c      	mov	r4, r1
 8001890:	b161      	cbz	r1, 80018ac <HAL_GPIO_WritePin+0x24>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8001892:	2d01      	cmp	r5, #1
 8001894:	d803      	bhi.n	800189e <HAL_GPIO_WritePin+0x16>

  if(PinState != GPIO_PIN_RESET)
 8001896:	b905      	cbnz	r5, 800189a <HAL_GPIO_WritePin+0x12>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001898:	0424      	lsls	r4, r4, #16
 800189a:	61b4      	str	r4, [r6, #24]
  }
}
 800189c:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 800189e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <HAL_GPIO_WritePin+0x30>)
 80018a4:	f006 f988 	bl	8007bb8 <assert_failed>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018a8:	61b4      	str	r4, [r6, #24]
}
 80018aa:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80018ac:	f240 119f 	movw	r1, #415	; 0x19f
 80018b0:	4801      	ldr	r0, [pc, #4]	; (80018b8 <HAL_GPIO_WritePin+0x30>)
 80018b2:	f006 f981 	bl	8007bb8 <assert_failed>
 80018b6:	e7ec      	b.n	8001892 <HAL_GPIO_WritePin+0xa>
 80018b8:	0800c6b0 	.word	0x0800c6b0

080018bc <HAL_GPIO_EXTI_Callback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop

080018c0 <HAL_GPIO_EXTI_IRQHandler>:
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80018c0:	4a04      	ldr	r2, [pc, #16]	; (80018d4 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80018c2:	6951      	ldr	r1, [r2, #20]
 80018c4:	4201      	tst	r1, r0
 80018c6:	d100      	bne.n	80018ca <HAL_GPIO_EXTI_IRQHandler+0xa>
 80018c8:	4770      	bx	lr
{
 80018ca:	b508      	push	{r3, lr}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018cc:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018ce:	f7ff fff5 	bl	80018bc <HAL_GPIO_EXTI_Callback>
}
 80018d2:	bd08      	pop	{r3, pc}
 80018d4:	40013c00 	.word	0x40013c00

080018d8 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018d8:	2800      	cmp	r0, #0
 80018da:	f000 81cc 	beq.w	8001c76 <HAL_RCC_OscConfig+0x39e>
{
 80018de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80018e2:	6803      	ldr	r3, [r0, #0]
 80018e4:	2b0f      	cmp	r3, #15
{
 80018e6:	b082      	sub	sp, #8
 80018e8:	4604      	mov	r4, r0
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80018ea:	f200 8139 	bhi.w	8001b60 <HAL_RCC_OscConfig+0x288>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018ee:	07dd      	lsls	r5, r3, #31
 80018f0:	d53a      	bpl.n	8001968 <HAL_RCC_OscConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80018f2:	6863      	ldr	r3, [r4, #4]
 80018f4:	f433 3280 	bics.w	r2, r3, #65536	; 0x10000
 80018f8:	d006      	beq.n	8001908 <HAL_RCC_OscConfig+0x30>
 80018fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018fe:	d003      	beq.n	8001908 <HAL_RCC_OscConfig+0x30>
 8001900:	21ed      	movs	r1, #237	; 0xed
 8001902:	48b2      	ldr	r0, [pc, #712]	; (8001bcc <HAL_RCC_OscConfig+0x2f4>)
 8001904:	f006 f958 	bl	8007bb8 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001908:	4ab1      	ldr	r2, [pc, #708]	; (8001bd0 <HAL_RCC_OscConfig+0x2f8>)
 800190a:	6893      	ldr	r3, [r2, #8]
 800190c:	f003 030c 	and.w	r3, r3, #12
 8001910:	2b04      	cmp	r3, #4
 8001912:	f000 8175 	beq.w	8001c00 <HAL_RCC_OscConfig+0x328>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001916:	6893      	ldr	r3, [r2, #8]
 8001918:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800191c:	2b08      	cmp	r3, #8
 800191e:	f000 816b 	beq.w	8001bf8 <HAL_RCC_OscConfig+0x320>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001922:	6863      	ldr	r3, [r4, #4]
 8001924:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001928:	f000 8174 	beq.w	8001c14 <HAL_RCC_OscConfig+0x33c>
 800192c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001930:	f000 8204 	beq.w	8001d3c <HAL_RCC_OscConfig+0x464>
 8001934:	4da6      	ldr	r5, [pc, #664]	; (8001bd0 <HAL_RCC_OscConfig+0x2f8>)
 8001936:	682a      	ldr	r2, [r5, #0]
 8001938:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800193c:	602a      	str	r2, [r5, #0]
 800193e:	682a      	ldr	r2, [r5, #0]
 8001940:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001944:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001946:	2b00      	cmp	r3, #0
 8001948:	f040 8169 	bne.w	8001c1e <HAL_RCC_OscConfig+0x346>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194c:	f7ff fafe 	bl	8000f4c <HAL_GetTick>
 8001950:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001952:	e005      	b.n	8001960 <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001954:	f7ff fafa 	bl	8000f4c <HAL_GetTick>
 8001958:	1b80      	subs	r0, r0, r6
 800195a:	2864      	cmp	r0, #100	; 0x64
 800195c:	f200 817d 	bhi.w	8001c5a <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001960:	682b      	ldr	r3, [r5, #0]
 8001962:	039b      	lsls	r3, r3, #14
 8001964:	d4f6      	bmi.n	8001954 <HAL_RCC_OscConfig+0x7c>
 8001966:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001968:	079f      	lsls	r7, r3, #30
 800196a:	f100 80ca 	bmi.w	8001b02 <HAL_RCC_OscConfig+0x22a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196e:	071a      	lsls	r2, r3, #28
 8001970:	d518      	bpl.n	80019a4 <HAL_RCC_OscConfig+0xcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001972:	6963      	ldr	r3, [r4, #20]
 8001974:	2b01      	cmp	r3, #1
 8001976:	f200 8120 	bhi.w	8001bba <HAL_RCC_OscConfig+0x2e2>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800197a:	2b00      	cmp	r3, #0
 800197c:	f000 810d 	beq.w	8001b9a <HAL_RCC_OscConfig+0x2c2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001980:	4b94      	ldr	r3, [pc, #592]	; (8001bd4 <HAL_RCC_OscConfig+0x2fc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001982:	4d93      	ldr	r5, [pc, #588]	; (8001bd0 <HAL_RCC_OscConfig+0x2f8>)
      __HAL_RCC_LSI_ENABLE();
 8001984:	2201      	movs	r2, #1
 8001986:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001988:	f7ff fae0 	bl	8000f4c <HAL_GetTick>
 800198c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800198e:	e005      	b.n	800199c <HAL_RCC_OscConfig+0xc4>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001990:	f7ff fadc 	bl	8000f4c <HAL_GetTick>
 8001994:	1b80      	subs	r0, r0, r6
 8001996:	2802      	cmp	r0, #2
 8001998:	f200 815f 	bhi.w	8001c5a <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800199c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800199e:	079b      	lsls	r3, r3, #30
 80019a0:	d5f6      	bpl.n	8001990 <HAL_RCC_OscConfig+0xb8>
 80019a2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a4:	075d      	lsls	r5, r3, #29
 80019a6:	d545      	bpl.n	8001a34 <HAL_RCC_OscConfig+0x15c>
  {
    FlagStatus       pwrclkchanged = RESET;

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80019a8:	68a3      	ldr	r3, [r4, #8]
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d906      	bls.n	80019bc <HAL_RCC_OscConfig+0xe4>
 80019ae:	2b05      	cmp	r3, #5
 80019b0:	d004      	beq.n	80019bc <HAL_RCC_OscConfig+0xe4>
 80019b2:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80019b6:	4885      	ldr	r0, [pc, #532]	; (8001bcc <HAL_RCC_OscConfig+0x2f4>)
 80019b8:	f006 f8fe 	bl	8007bb8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019bc:	4a84      	ldr	r2, [pc, #528]	; (8001bd0 <HAL_RCC_OscConfig+0x2f8>)
 80019be:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019c0:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 80019c4:	f040 815f 	bne.w	8001c86 <HAL_RCC_OscConfig+0x3ae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019c8:	9301      	str	r3, [sp, #4]
 80019ca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80019d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d8:	9301      	str	r3, [sp, #4]
 80019da:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80019dc:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019de:	4d7e      	ldr	r5, [pc, #504]	; (8001bd8 <HAL_RCC_OscConfig+0x300>)
 80019e0:	682a      	ldr	r2, [r5, #0]
 80019e2:	05d0      	lsls	r0, r2, #23
 80019e4:	f140 8129 	bpl.w	8001c3a <HAL_RCC_OscConfig+0x362>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e8:	68a3      	ldr	r3, [r4, #8]
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	f000 814d 	beq.w	8001c8a <HAL_RCC_OscConfig+0x3b2>
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	f000 81ad 	beq.w	8001d50 <HAL_RCC_OscConfig+0x478>
 80019f6:	4d76      	ldr	r5, [pc, #472]	; (8001bd0 <HAL_RCC_OscConfig+0x2f8>)
 80019f8:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 80019fa:	f022 0201 	bic.w	r2, r2, #1
 80019fe:	672a      	str	r2, [r5, #112]	; 0x70
 8001a00:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001a02:	f022 0204 	bic.w	r2, r2, #4
 8001a06:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f040 8143 	bne.w	8001c94 <HAL_RCC_OscConfig+0x3bc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a0e:	f7ff fa9d 	bl	8000f4c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a12:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a16:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a18:	e006      	b.n	8001a28 <HAL_RCC_OscConfig+0x150>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7ff fa97 	bl	8000f4c <HAL_GetTick>
 8001a1e:	eba0 0008 	sub.w	r0, r0, r8
 8001a22:	42b8      	cmp	r0, r7
 8001a24:	f200 8119 	bhi.w	8001c5a <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a28:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a2a:	079b      	lsls	r3, r3, #30
 8001a2c:	d4f5      	bmi.n	8001a1a <HAL_RCC_OscConfig+0x142>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a2e:	2e00      	cmp	r6, #0
 8001a30:	f040 8155 	bne.w	8001cde <HAL_RCC_OscConfig+0x406>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001a34:	69a3      	ldr	r3, [r4, #24]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	f200 80d4 	bhi.w	8001be4 <HAL_RCC_OscConfig+0x30c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d05c      	beq.n	8001afa <HAL_RCC_OscConfig+0x222>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a40:	4a63      	ldr	r2, [pc, #396]	; (8001bd0 <HAL_RCC_OscConfig+0x2f8>)
 8001a42:	6891      	ldr	r1, [r2, #8]
 8001a44:	f001 010c 	and.w	r1, r1, #12
 8001a48:	2908      	cmp	r1, #8
 8001a4a:	f000 809c 	beq.w	8001b86 <HAL_RCC_OscConfig+0x2ae>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	f040 8163 	bne.w	8001d1a <HAL_RCC_OscConfig+0x442>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001a54:	69e3      	ldr	r3, [r4, #28]
 8001a56:	f433 0380 	bics.w	r3, r3, #4194304	; 0x400000
 8001a5a:	d004      	beq.n	8001a66 <HAL_RCC_OscConfig+0x18e>
 8001a5c:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 8001a60:	485a      	ldr	r0, [pc, #360]	; (8001bcc <HAL_RCC_OscConfig+0x2f4>)
 8001a62:	f006 f8a9 	bl	8007bb8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001a66:	6a23      	ldr	r3, [r4, #32]
 8001a68:	2b3f      	cmp	r3, #63	; 0x3f
 8001a6a:	f200 8150 	bhi.w	8001d0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001a6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001a70:	3b32      	subs	r3, #50	; 0x32
 8001a72:	f5b3 7fbf 	cmp.w	r3, #382	; 0x17e
 8001a76:	f200 8144 	bhi.w	8001d02 <HAL_RCC_OscConfig+0x42a>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001a7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a7c:	2a08      	cmp	r2, #8
 8001a7e:	f200 8134 	bhi.w	8001cea <HAL_RCC_OscConfig+0x412>
 8001a82:	f44f 73aa 	mov.w	r3, #340	; 0x154
 8001a86:	40d3      	lsrs	r3, r2
 8001a88:	07d8      	lsls	r0, r3, #31
 8001a8a:	f140 812e 	bpl.w	8001cea <HAL_RCC_OscConfig+0x412>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001a8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a90:	3b02      	subs	r3, #2
 8001a92:	2b0d      	cmp	r3, #13
 8001a94:	f200 812f 	bhi.w	8001cf6 <HAL_RCC_OscConfig+0x41e>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a98:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <HAL_RCC_OscConfig+0x304>)

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9a:	4d4d      	ldr	r5, [pc, #308]	; (8001bd0 <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_PLL_DISABLE();
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001aa0:	f7ff fa54 	bl	8000f4c <HAL_GetTick>
 8001aa4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aa6:	e005      	b.n	8001ab4 <HAL_RCC_OscConfig+0x1dc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa8:	f7ff fa50 	bl	8000f4c <HAL_GetTick>
 8001aac:	1b80      	subs	r0, r0, r6
 8001aae:	2802      	cmp	r0, #2
 8001ab0:	f200 80d3 	bhi.w	8001c5a <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ab4:	682b      	ldr	r3, [r5, #0]
 8001ab6:	0199      	lsls	r1, r3, #6
 8001ab8:	d4f6      	bmi.n	8001aa8 <HAL_RCC_OscConfig+0x1d0>
            return HAL_TIMEOUT;
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001aba:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 8001abe:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 8001ac2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c

        /* Get Start Tick */
        tickstart = HAL_GetTick();

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac4:	4c42      	ldr	r4, [pc, #264]	; (8001bd0 <HAL_RCC_OscConfig+0x2f8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ac6:	4333      	orrs	r3, r6
 8001ac8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001acc:	0852      	lsrs	r2, r2, #1
 8001ace:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8001ad2:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8001ad4:	4941      	ldr	r1, [pc, #260]	; (8001bdc <HAL_RCC_OscConfig+0x304>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ad6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8001ada:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001adc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001ade:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fa34 	bl	8000f4c <HAL_GetTick>
 8001ae4:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae6:	e005      	b.n	8001af4 <HAL_RCC_OscConfig+0x21c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff fa30 	bl	8000f4c <HAL_GetTick>
 8001aec:	1b40      	subs	r0, r0, r5
 8001aee:	2802      	cmp	r0, #2
 8001af0:	f200 80b3 	bhi.w	8001c5a <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	019a      	lsls	r2, r3, #6
 8001af8:	d5f6      	bpl.n	8001ae8 <HAL_RCC_OscConfig+0x210>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8001afa:	2000      	movs	r0, #0
}
 8001afc:	b002      	add	sp, #8
 8001afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001b02:	68e3      	ldr	r3, [r4, #12]
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d842      	bhi.n	8001b8e <HAL_RCC_OscConfig+0x2b6>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001b08:	6923      	ldr	r3, [r4, #16]
 8001b0a:	2b1f      	cmp	r3, #31
 8001b0c:	f200 80b5 	bhi.w	8001c7a <HAL_RCC_OscConfig+0x3a2>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b10:	4b2f      	ldr	r3, [pc, #188]	; (8001bd0 <HAL_RCC_OscConfig+0x2f8>)
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	f012 0f0c 	tst.w	r2, #12
 8001b18:	d02e      	beq.n	8001b78 <HAL_RCC_OscConfig+0x2a0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001b20:	2a08      	cmp	r2, #8
 8001b22:	d026      	beq.n	8001b72 <HAL_RCC_OscConfig+0x29a>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001b24:	68e3      	ldr	r3, [r4, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	f000 80c8 	beq.w	8001cbc <HAL_RCC_OscConfig+0x3e4>
        __HAL_RCC_HSI_ENABLE();
 8001b2c:	4b2c      	ldr	r3, [pc, #176]	; (8001be0 <HAL_RCC_OscConfig+0x308>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2e:	4d28      	ldr	r5, [pc, #160]	; (8001bd0 <HAL_RCC_OscConfig+0x2f8>)
        __HAL_RCC_HSI_ENABLE();
 8001b30:	2201      	movs	r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001b34:	f7ff fa0a 	bl	8000f4c <HAL_GetTick>
 8001b38:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b3a:	e005      	b.n	8001b48 <HAL_RCC_OscConfig+0x270>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fa06 	bl	8000f4c <HAL_GetTick>
 8001b40:	1b80      	subs	r0, r0, r6
 8001b42:	2802      	cmp	r0, #2
 8001b44:	f200 8089 	bhi.w	8001c5a <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b48:	682b      	ldr	r3, [r5, #0]
 8001b4a:	0798      	lsls	r0, r3, #30
 8001b4c:	d5f6      	bpl.n	8001b3c <HAL_RCC_OscConfig+0x264>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4e:	682b      	ldr	r3, [r5, #0]
 8001b50:	6922      	ldr	r2, [r4, #16]
 8001b52:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001b56:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b5a:	602b      	str	r3, [r5, #0]
 8001b5c:	6823      	ldr	r3, [r4, #0]
 8001b5e:	e706      	b.n	800196e <HAL_RCC_OscConfig+0x96>
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001b60:	21e8      	movs	r1, #232	; 0xe8
 8001b62:	481a      	ldr	r0, [pc, #104]	; (8001bcc <HAL_RCC_OscConfig+0x2f4>)
 8001b64:	f006 f828 	bl	8007bb8 <assert_failed>
 8001b68:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b6a:	07dd      	lsls	r5, r3, #31
 8001b6c:	f57f aefc 	bpl.w	8001968 <HAL_RCC_OscConfig+0x90>
 8001b70:	e6bf      	b.n	80018f2 <HAL_RCC_OscConfig+0x1a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	025e      	lsls	r6, r3, #9
 8001b76:	d4d5      	bmi.n	8001b24 <HAL_RCC_OscConfig+0x24c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b78:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <HAL_RCC_OscConfig+0x2f8>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	079d      	lsls	r5, r3, #30
 8001b7e:	d570      	bpl.n	8001c62 <HAL_RCC_OscConfig+0x38a>
 8001b80:	68e3      	ldr	r3, [r4, #12]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d06d      	beq.n	8001c62 <HAL_RCC_OscConfig+0x38a>
    return HAL_ERROR;
 8001b86:	2001      	movs	r0, #1
}
 8001b88:	b002      	add	sp, #8
 8001b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8001b8e:	f240 111f 	movw	r1, #287	; 0x11f
 8001b92:	480e      	ldr	r0, [pc, #56]	; (8001bcc <HAL_RCC_OscConfig+0x2f4>)
 8001b94:	f006 f810 	bl	8007bb8 <assert_failed>
 8001b98:	e7b6      	b.n	8001b08 <HAL_RCC_OscConfig+0x230>
      __HAL_RCC_LSI_DISABLE();
 8001b9a:	4a0e      	ldr	r2, [pc, #56]	; (8001bd4 <HAL_RCC_OscConfig+0x2fc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b9c:	4d0c      	ldr	r5, [pc, #48]	; (8001bd0 <HAL_RCC_OscConfig+0x2f8>)
      __HAL_RCC_LSI_DISABLE();
 8001b9e:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001ba0:	f7ff f9d4 	bl	8000f4c <HAL_GetTick>
 8001ba4:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ba6:	e004      	b.n	8001bb2 <HAL_RCC_OscConfig+0x2da>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ba8:	f7ff f9d0 	bl	8000f4c <HAL_GetTick>
 8001bac:	1b80      	subs	r0, r0, r6
 8001bae:	2802      	cmp	r0, #2
 8001bb0:	d853      	bhi.n	8001c5a <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001bb4:	079f      	lsls	r7, r3, #30
 8001bb6:	d4f7      	bmi.n	8001ba8 <HAL_RCC_OscConfig+0x2d0>
 8001bb8:	e6f3      	b.n	80019a2 <HAL_RCC_OscConfig+0xca>
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8001bba:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8001bbe:	4803      	ldr	r0, [pc, #12]	; (8001bcc <HAL_RCC_OscConfig+0x2f4>)
 8001bc0:	f005 fffa 	bl	8007bb8 <assert_failed>
 8001bc4:	6963      	ldr	r3, [r4, #20]
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d0e7      	beq.n	8001b9a <HAL_RCC_OscConfig+0x2c2>
 8001bca:	e6d9      	b.n	8001980 <HAL_RCC_OscConfig+0xa8>
 8001bcc:	0800c6ec 	.word	0x0800c6ec
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	42470e80 	.word	0x42470e80
 8001bd8:	40007000 	.word	0x40007000
 8001bdc:	42470060 	.word	0x42470060
 8001be0:	42470000 	.word	0x42470000
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8001be4:	f240 11cf 	movw	r1, #463	; 0x1cf
 8001be8:	485e      	ldr	r0, [pc, #376]	; (8001d64 <HAL_RCC_OscConfig+0x48c>)
 8001bea:	f005 ffe5 	bl	8007bb8 <assert_failed>
 8001bee:	69a3      	ldr	r3, [r4, #24]
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f47f af25 	bne.w	8001a40 <HAL_RCC_OscConfig+0x168>
 8001bf6:	e780      	b.n	8001afa <HAL_RCC_OscConfig+0x222>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf8:	6853      	ldr	r3, [r2, #4]
 8001bfa:	0258      	lsls	r0, r3, #9
 8001bfc:	f57f ae91 	bpl.w	8001922 <HAL_RCC_OscConfig+0x4a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c00:	4b59      	ldr	r3, [pc, #356]	; (8001d68 <HAL_RCC_OscConfig+0x490>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	0399      	lsls	r1, r3, #14
 8001c06:	f57f aeae 	bpl.w	8001966 <HAL_RCC_OscConfig+0x8e>
 8001c0a:	6863      	ldr	r3, [r4, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f47f aeaa 	bne.w	8001966 <HAL_RCC_OscConfig+0x8e>
 8001c12:	e7b8      	b.n	8001b86 <HAL_RCC_OscConfig+0x2ae>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c14:	4a54      	ldr	r2, [pc, #336]	; (8001d68 <HAL_RCC_OscConfig+0x490>)
 8001c16:	6813      	ldr	r3, [r2, #0]
 8001c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c1c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001c1e:	f7ff f995 	bl	8000f4c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c22:	4d51      	ldr	r5, [pc, #324]	; (8001d68 <HAL_RCC_OscConfig+0x490>)
        tickstart = HAL_GetTick();
 8001c24:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c26:	e004      	b.n	8001c32 <HAL_RCC_OscConfig+0x35a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c28:	f7ff f990 	bl	8000f4c <HAL_GetTick>
 8001c2c:	1b80      	subs	r0, r0, r6
 8001c2e:	2864      	cmp	r0, #100	; 0x64
 8001c30:	d813      	bhi.n	8001c5a <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	682b      	ldr	r3, [r5, #0]
 8001c34:	039a      	lsls	r2, r3, #14
 8001c36:	d5f7      	bpl.n	8001c28 <HAL_RCC_OscConfig+0x350>
 8001c38:	e695      	b.n	8001966 <HAL_RCC_OscConfig+0x8e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c3a:	682a      	ldr	r2, [r5, #0]
 8001c3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c40:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8001c42:	f7ff f983 	bl	8000f4c <HAL_GetTick>
 8001c46:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c48:	682b      	ldr	r3, [r5, #0]
 8001c4a:	05d9      	lsls	r1, r3, #23
 8001c4c:	f53f aecc 	bmi.w	80019e8 <HAL_RCC_OscConfig+0x110>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c50:	f7ff f97c 	bl	8000f4c <HAL_GetTick>
 8001c54:	1bc0      	subs	r0, r0, r7
 8001c56:	2802      	cmp	r0, #2
 8001c58:	d9f6      	bls.n	8001c48 <HAL_RCC_OscConfig+0x370>
            return HAL_TIMEOUT;
 8001c5a:	2003      	movs	r0, #3
}
 8001c5c:	b002      	add	sp, #8
 8001c5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c62:	4a41      	ldr	r2, [pc, #260]	; (8001d68 <HAL_RCC_OscConfig+0x490>)
 8001c64:	6921      	ldr	r1, [r4, #16]
 8001c66:	6813      	ldr	r3, [r2, #0]
 8001c68:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c6c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c70:	6013      	str	r3, [r2, #0]
 8001c72:	6823      	ldr	r3, [r4, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c74:	e67b      	b.n	800196e <HAL_RCC_OscConfig+0x96>
    return HAL_ERROR;
 8001c76:	2001      	movs	r0, #1
}
 8001c78:	4770      	bx	lr
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001c7a:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001c7e:	4839      	ldr	r0, [pc, #228]	; (8001d64 <HAL_RCC_OscConfig+0x48c>)
 8001c80:	f005 ff9a 	bl	8007bb8 <assert_failed>
 8001c84:	e744      	b.n	8001b10 <HAL_RCC_OscConfig+0x238>
    FlagStatus       pwrclkchanged = RESET;
 8001c86:	2600      	movs	r6, #0
 8001c88:	e6a9      	b.n	80019de <HAL_RCC_OscConfig+0x106>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c8a:	4a37      	ldr	r2, [pc, #220]	; (8001d68 <HAL_RCC_OscConfig+0x490>)
 8001c8c:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001c94:	f7ff f95a 	bl	8000f4c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c98:	4d33      	ldr	r5, [pc, #204]	; (8001d68 <HAL_RCC_OscConfig+0x490>)
      tickstart = HAL_GetTick();
 8001c9a:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca0:	e005      	b.n	8001cae <HAL_RCC_OscConfig+0x3d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ca2:	f7ff f953 	bl	8000f4c <HAL_GetTick>
 8001ca6:	eba0 0008 	sub.w	r0, r0, r8
 8001caa:	42b8      	cmp	r0, r7
 8001cac:	d8d5      	bhi.n	8001c5a <HAL_RCC_OscConfig+0x382>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cae:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001cb0:	079a      	lsls	r2, r3, #30
 8001cb2:	d5f6      	bpl.n	8001ca2 <HAL_RCC_OscConfig+0x3ca>
    if(pwrclkchanged == SET)
 8001cb4:	2e00      	cmp	r6, #0
 8001cb6:	f43f aebd 	beq.w	8001a34 <HAL_RCC_OscConfig+0x15c>
 8001cba:	e010      	b.n	8001cde <HAL_RCC_OscConfig+0x406>
        __HAL_RCC_HSI_DISABLE();
 8001cbc:	4a2b      	ldr	r2, [pc, #172]	; (8001d6c <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cbe:	4d2a      	ldr	r5, [pc, #168]	; (8001d68 <HAL_RCC_OscConfig+0x490>)
        __HAL_RCC_HSI_DISABLE();
 8001cc0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8001cc2:	f7ff f943 	bl	8000f4c <HAL_GetTick>
 8001cc6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc8:	e004      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3fc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cca:	f7ff f93f 	bl	8000f4c <HAL_GetTick>
 8001cce:	1b80      	subs	r0, r0, r6
 8001cd0:	2802      	cmp	r0, #2
 8001cd2:	d8c2      	bhi.n	8001c5a <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cd4:	682b      	ldr	r3, [r5, #0]
 8001cd6:	0799      	lsls	r1, r3, #30
 8001cd8:	d4f7      	bmi.n	8001cca <HAL_RCC_OscConfig+0x3f2>
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	e647      	b.n	800196e <HAL_RCC_OscConfig+0x96>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cde:	4a22      	ldr	r2, [pc, #136]	; (8001d68 <HAL_RCC_OscConfig+0x490>)
 8001ce0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001ce2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ce6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ce8:	e6a4      	b.n	8001a34 <HAL_RCC_OscConfig+0x15c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8001cea:	f240 11db 	movw	r1, #475	; 0x1db
 8001cee:	481d      	ldr	r0, [pc, #116]	; (8001d64 <HAL_RCC_OscConfig+0x48c>)
 8001cf0:	f005 ff62 	bl	8007bb8 <assert_failed>
 8001cf4:	e6cb      	b.n	8001a8e <HAL_RCC_OscConfig+0x1b6>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8001cf6:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 8001cfa:	481a      	ldr	r0, [pc, #104]	; (8001d64 <HAL_RCC_OscConfig+0x48c>)
 8001cfc:	f005 ff5c 	bl	8007bb8 <assert_failed>
 8001d00:	e6ca      	b.n	8001a98 <HAL_RCC_OscConfig+0x1c0>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8001d02:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8001d06:	4817      	ldr	r0, [pc, #92]	; (8001d64 <HAL_RCC_OscConfig+0x48c>)
 8001d08:	f005 ff56 	bl	8007bb8 <assert_failed>
 8001d0c:	e6b5      	b.n	8001a7a <HAL_RCC_OscConfig+0x1a2>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8001d0e:	f240 11d9 	movw	r1, #473	; 0x1d9
 8001d12:	4814      	ldr	r0, [pc, #80]	; (8001d64 <HAL_RCC_OscConfig+0x48c>)
 8001d14:	f005 ff50 	bl	8007bb8 <assert_failed>
 8001d18:	e6a9      	b.n	8001a6e <HAL_RCC_OscConfig+0x196>
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b15      	ldr	r3, [pc, #84]	; (8001d70 <HAL_RCC_OscConfig+0x498>)
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	6019      	str	r1, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d20:	4614      	mov	r4, r2
        tickstart = HAL_GetTick();
 8001d22:	f7ff f913 	bl	8000f4c <HAL_GetTick>
 8001d26:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d28:	e004      	b.n	8001d34 <HAL_RCC_OscConfig+0x45c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d2a:	f7ff f90f 	bl	8000f4c <HAL_GetTick>
 8001d2e:	1b40      	subs	r0, r0, r5
 8001d30:	2802      	cmp	r0, #2
 8001d32:	d892      	bhi.n	8001c5a <HAL_RCC_OscConfig+0x382>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d34:	6823      	ldr	r3, [r4, #0]
 8001d36:	019b      	lsls	r3, r3, #6
 8001d38:	d4f7      	bmi.n	8001d2a <HAL_RCC_OscConfig+0x452>
 8001d3a:	e6de      	b.n	8001afa <HAL_RCC_OscConfig+0x222>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <HAL_RCC_OscConfig+0x490>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	e766      	b.n	8001c1e <HAL_RCC_OscConfig+0x346>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCC_OscConfig+0x490>)
 8001d52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d54:	f042 0204 	orr.w	r2, r2, #4
 8001d58:	671a      	str	r2, [r3, #112]	; 0x70
 8001d5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d5c:	f042 0201 	orr.w	r2, r2, #1
 8001d60:	671a      	str	r2, [r3, #112]	; 0x70
 8001d62:	e797      	b.n	8001c94 <HAL_RCC_OscConfig+0x3bc>
 8001d64:	0800c6ec 	.word	0x0800c6ec
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	42470000 	.word	0x42470000
 8001d70:	42470060 	.word	0x42470060

08001d74 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d74:	4917      	ldr	r1, [pc, #92]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8001d76:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d78:	688b      	ldr	r3, [r1, #8]
 8001d7a:	f003 030c 	and.w	r3, r3, #12
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d01b      	beq.n	8001dba <HAL_RCC_GetSysClockFreq+0x46>
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	d117      	bne.n	8001db6 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d86:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d88:	684b      	ldr	r3, [r1, #4]
 8001d8a:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d8e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d92:	d114      	bne.n	8001dbe <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d94:	6849      	ldr	r1, [r1, #4]
 8001d96:	4810      	ldr	r0, [pc, #64]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x64>)
 8001d98:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001d9c:	fba1 0100 	umull	r0, r1, r1, r0
 8001da0:	f7fe ff0a 	bl	8000bb8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001da4:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001dac:	3301      	adds	r3, #1
 8001dae:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8001db0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001db4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8001db6:	4808      	ldr	r0, [pc, #32]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8001db8:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001dba:	4808      	ldr	r0, [pc, #32]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x68>)
}
 8001dbc:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dbe:	684b      	ldr	r3, [r1, #4]
 8001dc0:	4806      	ldr	r0, [pc, #24]	; (8001ddc <HAL_RCC_GetSysClockFreq+0x68>)
 8001dc2:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8001dc6:	fba3 0100 	umull	r0, r1, r3, r0
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f7fe fef4 	bl	8000bb8 <__aeabi_uldivmod>
 8001dd0:	e7e8      	b.n	8001da4 <HAL_RCC_GetSysClockFreq+0x30>
 8001dd2:	bf00      	nop
 8001dd4:	40023800 	.word	0x40023800
 8001dd8:	00f42400 	.word	0x00f42400
 8001ddc:	007a1200 	.word	0x007a1200

08001de0 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001de0:	2800      	cmp	r0, #0
 8001de2:	f000 80f0 	beq.w	8001fc6 <HAL_RCC_ClockConfig+0x1e6>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001de6:	6803      	ldr	r3, [r0, #0]
 8001de8:	3b01      	subs	r3, #1
 8001dea:	2b0e      	cmp	r3, #14
{
 8001dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001df0:	4604      	mov	r4, r0
 8001df2:	460d      	mov	r5, r1
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001df4:	f200 80d1 	bhi.w	8001f9a <HAL_RCC_ClockConfig+0x1ba>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001df8:	2d07      	cmp	r5, #7
 8001dfa:	f200 80c1 	bhi.w	8001f80 <HAL_RCC_ClockConfig+0x1a0>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dfe:	4a76      	ldr	r2, [pc, #472]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001e00:	6813      	ldr	r3, [r2, #0]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	42ab      	cmp	r3, r5
 8001e08:	d209      	bcs.n	8001e1e <HAL_RCC_ClockConfig+0x3e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	b2eb      	uxtb	r3, r5
 8001e0c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e0e:	6813      	ldr	r3, [r2, #0]
 8001e10:	f003 030f 	and.w	r3, r3, #15
 8001e14:	42ab      	cmp	r3, r5
 8001e16:	d002      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x3e>
    return HAL_ERROR;
 8001e18:	2001      	movs	r0, #1
}
 8001e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e1e:	6823      	ldr	r3, [r4, #0]
 8001e20:	0798      	lsls	r0, r3, #30
 8001e22:	d52c      	bpl.n	8001e7e <HAL_RCC_ClockConfig+0x9e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e24:	0759      	lsls	r1, r3, #29
 8001e26:	d504      	bpl.n	8001e32 <HAL_RCC_ClockConfig+0x52>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e28:	496c      	ldr	r1, [pc, #432]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001e2a:	688a      	ldr	r2, [r1, #8]
 8001e2c:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001e30:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e32:	071a      	lsls	r2, r3, #28
 8001e34:	d504      	bpl.n	8001e40 <HAL_RCC_ClockConfig+0x60>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e36:	4969      	ldr	r1, [pc, #420]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001e38:	688a      	ldr	r2, [r1, #8]
 8001e3a:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001e3e:	608a      	str	r2, [r1, #8]
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001e40:	68a1      	ldr	r1, [r4, #8]
 8001e42:	f031 0280 	bics.w	r2, r1, #128	; 0x80
 8001e46:	d014      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
 8001e48:	f021 0220 	bic.w	r2, r1, #32
 8001e4c:	2a90      	cmp	r2, #144	; 0x90
 8001e4e:	d010      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
 8001e50:	f021 0240 	bic.w	r2, r1, #64	; 0x40
 8001e54:	2aa0      	cmp	r2, #160	; 0xa0
 8001e56:	d00c      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
 8001e58:	f021 0210 	bic.w	r2, r1, #16
 8001e5c:	2ac0      	cmp	r2, #192	; 0xc0
 8001e5e:	d008      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
 8001e60:	29f0      	cmp	r1, #240	; 0xf0
 8001e62:	d006      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x92>
 8001e64:	f44f 7119 	mov.w	r1, #612	; 0x264
 8001e68:	485d      	ldr	r0, [pc, #372]	; (8001fe0 <HAL_RCC_ClockConfig+0x200>)
 8001e6a:	f005 fea5 	bl	8007bb8 <assert_failed>
 8001e6e:	68a1      	ldr	r1, [r4, #8]
 8001e70:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e72:	485a      	ldr	r0, [pc, #360]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001e74:	6882      	ldr	r2, [r0, #8]
 8001e76:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7e:	07df      	lsls	r7, r3, #31
 8001e80:	d528      	bpl.n	8001ed4 <HAL_RCC_ClockConfig+0xf4>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001e82:	6863      	ldr	r3, [r4, #4]
 8001e84:	2b03      	cmp	r3, #3
 8001e86:	f200 8097 	bhi.w	8001fb8 <HAL_RCC_ClockConfig+0x1d8>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	f000 808e 	beq.w	8001fac <HAL_RCC_ClockConfig+0x1cc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e90:	1e9a      	subs	r2, r3, #2
 8001e92:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e94:	4a51      	ldr	r2, [pc, #324]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001e96:	6812      	ldr	r2, [r2, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e98:	f240 8099 	bls.w	8001fce <HAL_RCC_ClockConfig+0x1ee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e9c:	0791      	lsls	r1, r2, #30
 8001e9e:	d5bb      	bpl.n	8001e18 <HAL_RCC_ClockConfig+0x38>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ea0:	4e4e      	ldr	r6, [pc, #312]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001ea2:	68b2      	ldr	r2, [r6, #8]
 8001ea4:	f022 0203 	bic.w	r2, r2, #3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001eac:	f7ff f84e 	bl	8000f4c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001eb4:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eb6:	e006      	b.n	8001ec6 <HAL_RCC_ClockConfig+0xe6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb8:	f7ff f848 	bl	8000f4c <HAL_GetTick>
 8001ebc:	eba0 0008 	sub.w	r0, r0, r8
 8001ec0:	42b8      	cmp	r0, r7
 8001ec2:	f200 8082 	bhi.w	8001fca <HAL_RCC_ClockConfig+0x1ea>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	68b3      	ldr	r3, [r6, #8]
 8001ec8:	6862      	ldr	r2, [r4, #4]
 8001eca:	f003 030c 	and.w	r3, r3, #12
 8001ece:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ed2:	d1f1      	bne.n	8001eb8 <HAL_RCC_ClockConfig+0xd8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed4:	4a40      	ldr	r2, [pc, #256]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed6:	6813      	ldr	r3, [r2, #0]
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	42ab      	cmp	r3, r5
 8001ede:	d906      	bls.n	8001eee <HAL_RCC_ClockConfig+0x10e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee0:	b2eb      	uxtb	r3, r5
 8001ee2:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ee4:	6813      	ldr	r3, [r2, #0]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	42ab      	cmp	r3, r5
 8001eec:	d194      	bne.n	8001e18 <HAL_RCC_ClockConfig+0x38>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eee:	6823      	ldr	r3, [r4, #0]
 8001ef0:	075a      	lsls	r2, r3, #29
 8001ef2:	d518      	bpl.n	8001f26 <HAL_RCC_ClockConfig+0x146>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001ef4:	68e1      	ldr	r1, [r4, #12]
 8001ef6:	f431 5280 	bics.w	r2, r1, #4096	; 0x1000
 8001efa:	d00e      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x13a>
 8001efc:	f421 6200 	bic.w	r2, r1, #2048	; 0x800
 8001f00:	f5b2 5fa0 	cmp.w	r2, #5120	; 0x1400
 8001f04:	d009      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x13a>
 8001f06:	f5b1 5fc0 	cmp.w	r1, #6144	; 0x1800
 8001f0a:	d006      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x13a>
 8001f0c:	f240 21a9 	movw	r1, #681	; 0x2a9
 8001f10:	4833      	ldr	r0, [pc, #204]	; (8001fe0 <HAL_RCC_ClockConfig+0x200>)
 8001f12:	f005 fe51 	bl	8007bb8 <assert_failed>
 8001f16:	68e1      	ldr	r1, [r4, #12]
 8001f18:	6823      	ldr	r3, [r4, #0]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f1a:	4830      	ldr	r0, [pc, #192]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001f1c:	6882      	ldr	r2, [r0, #8]
 8001f1e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8001f22:	430a      	orrs	r2, r1
 8001f24:	6082      	str	r2, [r0, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f26:	071b      	lsls	r3, r3, #28
 8001f28:	d518      	bpl.n	8001f5c <HAL_RCC_ClockConfig+0x17c>
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001f2a:	6922      	ldr	r2, [r4, #16]
 8001f2c:	f432 5380 	bics.w	r3, r2, #4096	; 0x1000
 8001f30:	d00d      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x16e>
 8001f32:	f422 6300 	bic.w	r3, r2, #2048	; 0x800
 8001f36:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x16e>
 8001f3c:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8001f40:	d005      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x16e>
 8001f42:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8001f46:	4826      	ldr	r0, [pc, #152]	; (8001fe0 <HAL_RCC_ClockConfig+0x200>)
 8001f48:	f005 fe36 	bl	8007bb8 <assert_failed>
 8001f4c:	6922      	ldr	r2, [r4, #16]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f4e:	4923      	ldr	r1, [pc, #140]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001f50:	688b      	ldr	r3, [r1, #8]
 8001f52:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f56:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f5a:	608b      	str	r3, [r1, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f5c:	f7ff ff0a 	bl	8001d74 <HAL_RCC_GetSysClockFreq>
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001f62:	4920      	ldr	r1, [pc, #128]	; (8001fe4 <HAL_RCC_ClockConfig+0x204>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	4a20      	ldr	r2, [pc, #128]	; (8001fe8 <HAL_RCC_ClockConfig+0x208>)
 8001f68:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f6c:	5ccb      	ldrb	r3, [r1, r3]
 8001f6e:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f72:	200f      	movs	r0, #15
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f74:	6013      	str	r3, [r2, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f76:	f7fe ff9f 	bl	8000eb8 <HAL_InitTick>
  return HAL_OK;
 8001f7a:	2000      	movs	r0, #0
}
 8001f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001f80:	f240 2141 	movw	r1, #577	; 0x241
 8001f84:	4816      	ldr	r0, [pc, #88]	; (8001fe0 <HAL_RCC_ClockConfig+0x200>)
 8001f86:	f005 fe17 	bl	8007bb8 <assert_failed>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8a:	4a13      	ldr	r2, [pc, #76]	; (8001fd8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f8c:	6813      	ldr	r3, [r2, #0]
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	42ab      	cmp	r3, r5
 8001f94:	f4ff af39 	bcc.w	8001e0a <HAL_RCC_ClockConfig+0x2a>
 8001f98:	e741      	b.n	8001e1e <HAL_RCC_ClockConfig+0x3e>
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001f9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8001f9e:	4810      	ldr	r0, [pc, #64]	; (8001fe0 <HAL_RCC_ClockConfig+0x200>)
 8001fa0:	f005 fe0a 	bl	8007bb8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001fa4:	2d07      	cmp	r5, #7
 8001fa6:	f67f af2a 	bls.w	8001dfe <HAL_RCC_ClockConfig+0x1e>
 8001faa:	e7e9      	b.n	8001f80 <HAL_RCC_ClockConfig+0x1a0>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fac:	4a0b      	ldr	r2, [pc, #44]	; (8001fdc <HAL_RCC_ClockConfig+0x1fc>)
 8001fae:	6812      	ldr	r2, [r2, #0]
 8001fb0:	0396      	lsls	r6, r2, #14
 8001fb2:	f53f af75 	bmi.w	8001ea0 <HAL_RCC_ClockConfig+0xc0>
 8001fb6:	e72f      	b.n	8001e18 <HAL_RCC_ClockConfig+0x38>
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001fb8:	f240 216b 	movw	r1, #619	; 0x26b
 8001fbc:	4808      	ldr	r0, [pc, #32]	; (8001fe0 <HAL_RCC_ClockConfig+0x200>)
 8001fbe:	f005 fdfb 	bl	8007bb8 <assert_failed>
 8001fc2:	6863      	ldr	r3, [r4, #4]
 8001fc4:	e761      	b.n	8001e8a <HAL_RCC_ClockConfig+0xaa>
    return HAL_ERROR;
 8001fc6:	2001      	movs	r0, #1
}
 8001fc8:	4770      	bx	lr
        return HAL_TIMEOUT;
 8001fca:	2003      	movs	r0, #3
 8001fcc:	e725      	b.n	8001e1a <HAL_RCC_ClockConfig+0x3a>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fce:	0190      	lsls	r0, r2, #6
 8001fd0:	f53f af66 	bmi.w	8001ea0 <HAL_RCC_ClockConfig+0xc0>
 8001fd4:	e720      	b.n	8001e18 <HAL_RCC_ClockConfig+0x38>
 8001fd6:	bf00      	nop
 8001fd8:	40023c00 	.word	0x40023c00
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	0800c6ec 	.word	0x0800c6ec
 8001fe4:	0800d608 	.word	0x0800d608
 8001fe8:	20000090 	.word	0x20000090

08001fec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001fec:	4b04      	ldr	r3, [pc, #16]	; (8002000 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8001ff2:	4905      	ldr	r1, [pc, #20]	; (8002008 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001ff4:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001ff8:	6808      	ldr	r0, [r1, #0]
 8001ffa:	5cd3      	ldrb	r3, [r2, r3]
}
 8001ffc:	40d8      	lsrs	r0, r3
 8001ffe:	4770      	bx	lr
 8002000:	40023800 	.word	0x40023800
 8002004:	0800d618 	.word	0x0800d618
 8002008:	20000090 	.word	0x20000090

0800200c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800200c:	4b04      	ldr	r3, [pc, #16]	; (8002020 <HAL_RCC_GetPCLK2Freq+0x14>)
 800200e:	4a05      	ldr	r2, [pc, #20]	; (8002024 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002010:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8002012:	4905      	ldr	r1, [pc, #20]	; (8002028 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002014:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8002018:	6808      	ldr	r0, [r1, #0]
 800201a:	5cd3      	ldrb	r3, [r2, r3]
}
 800201c:	40d8      	lsrs	r0, r3
 800201e:	4770      	bx	lr
 8002020:	40023800 	.word	0x40023800
 8002024:	0800d618 	.word	0x0800d618
 8002028:	20000090 	.word	0x20000090

0800202c <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 800202c:	2800      	cmp	r0, #0
 800202e:	f000 8107 	beq.w	8002240 <HAL_UART_Init+0x214>
  {
    return HAL_ERROR;
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002032:	6982      	ldr	r2, [r0, #24]
{
 8002034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002038:	4604      	mov	r4, r0
 800203a:	6803      	ldr	r3, [r0, #0]
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800203c:	2a00      	cmp	r2, #0
 800203e:	f000 80eb 	beq.w	8002218 <HAL_UART_Init+0x1ec>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002042:	49d7      	ldr	r1, [pc, #860]	; (80023a0 <HAL_UART_Init+0x374>)
 8002044:	428b      	cmp	r3, r1
 8002046:	f000 81f1 	beq.w	800242c <HAL_UART_Init+0x400>
 800204a:	f5a1 414c 	sub.w	r1, r1, #52224	; 0xcc00
 800204e:	428b      	cmp	r3, r1
 8002050:	f000 81ec 	beq.w	800242c <HAL_UART_Init+0x400>
 8002054:	f501 4150 	add.w	r1, r1, #53248	; 0xd000
 8002058:	428b      	cmp	r3, r1
 800205a:	f000 81e7 	beq.w	800242c <HAL_UART_Init+0x400>
 800205e:	f240 1149 	movw	r1, #329	; 0x149
 8002062:	48d0      	ldr	r0, [pc, #832]	; (80023a4 <HAL_UART_Init+0x378>)
 8002064:	f005 fda8 	bl	8007bb8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002068:	69a2      	ldr	r2, [r4, #24]
 800206a:	2a00      	cmp	r2, #0
 800206c:	f040 81de 	bne.w	800242c <HAL_UART_Init+0x400>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002070:	68a3      	ldr	r3, [r4, #8]
 8002072:	f433 5380 	bics.w	r3, r3, #4096	; 0x1000
 8002076:	d004      	beq.n	8002082 <HAL_UART_Init+0x56>
 8002078:	f44f 71a8 	mov.w	r1, #336	; 0x150
 800207c:	48c9      	ldr	r0, [pc, #804]	; (80023a4 <HAL_UART_Init+0x378>)
 800207e:	f005 fd9b 	bl	8007bb8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8002082:	69e3      	ldr	r3, [r4, #28]
 8002084:	f433 4300 	bics.w	r3, r3, #32768	; 0x8000
 8002088:	d004      	beq.n	8002094 <HAL_UART_Init+0x68>
 800208a:	f240 1151 	movw	r1, #337	; 0x151
 800208e:	48c5      	ldr	r0, [pc, #788]	; (80023a4 <HAL_UART_Init+0x378>)
 8002090:	f005 fd92 	bl	8007bb8 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8002094:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
 8002098:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 8172 	beq.w	8002386 <HAL_UART_Init+0x35a>
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020a2:	2324      	movs	r3, #36	; 0x24

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020a4:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80020a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80020aa:	68d3      	ldr	r3, [r2, #12]
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80020ac:	6860      	ldr	r0, [r4, #4]
 80020ae:	49be      	ldr	r1, [pc, #760]	; (80023a8 <HAL_UART_Init+0x37c>)
  __HAL_UART_DISABLE(huart);
 80020b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80020b4:	4288      	cmp	r0, r1
  __HAL_UART_DISABLE(huart);
 80020b6:	60d3      	str	r3, [r2, #12]
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80020b8:	f200 815f 	bhi.w	800237a <HAL_UART_Init+0x34e>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80020bc:	68e3      	ldr	r3, [r4, #12]
 80020be:	f433 5300 	bics.w	r3, r3, #8192	; 0x2000
 80020c2:	d004      	beq.n	80020ce <HAL_UART_Init+0xa2>
 80020c4:	f640 31e6 	movw	r1, #3046	; 0xbe6
 80020c8:	48b6      	ldr	r0, [pc, #728]	; (80023a4 <HAL_UART_Init+0x378>)
 80020ca:	f005 fd75 	bl	8007bb8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80020ce:	6923      	ldr	r3, [r4, #16]
 80020d0:	f433 6280 	bics.w	r2, r3, #1024	; 0x400
 80020d4:	d003      	beq.n	80020de <HAL_UART_Init+0xb2>
 80020d6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80020da:	f040 815a 	bne.w	8002392 <HAL_UART_Init+0x366>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80020de:	6960      	ldr	r0, [r4, #20]
 80020e0:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80020e4:	4218      	tst	r0, r3
 80020e6:	d100      	bne.n	80020ea <HAL_UART_Init+0xbe>
 80020e8:	b928      	cbnz	r0, 80020f6 <HAL_UART_Init+0xca>
 80020ea:	48ae      	ldr	r0, [pc, #696]	; (80023a4 <HAL_UART_Init+0x378>)
 80020ec:	f640 31e8 	movw	r1, #3048	; 0xbe8
 80020f0:	f005 fd62 	bl	8007bb8 <assert_failed>
 80020f4:	6960      	ldr	r0, [r4, #20]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020f6:	6822      	ldr	r2, [r4, #0]
 80020f8:	68e5      	ldr	r5, [r4, #12]
 80020fa:	6911      	ldr	r1, [r2, #16]
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
 80020fc:	68a3      	ldr	r3, [r4, #8]
 80020fe:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002100:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8002104:	4329      	orrs	r1, r5
 8002106:	6111      	str	r1, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
 8002108:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800210a:	69e5      	ldr	r5, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800210c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8002110:	4333      	orrs	r3, r6
 8002112:	f021 010c 	bic.w	r1, r1, #12
 8002116:	432b      	orrs	r3, r5
 8002118:	430b      	orrs	r3, r1
 800211a:	4303      	orrs	r3, r0
 800211c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800211e:	6953      	ldr	r3, [r2, #20]
 8002120:	69a1      	ldr	r1, [r4, #24]
 8002122:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002126:	430b      	orrs	r3, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002128:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800212c:	6153      	str	r3, [r2, #20]
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800212e:	4b9c      	ldr	r3, [pc, #624]	; (80023a0 <HAL_UART_Init+0x374>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002130:	f000 8088 	beq.w	8002244 <HAL_UART_Init+0x218>
  }
  else
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002134:	429a      	cmp	r2, r3
 8002136:	f000 80e2 	beq.w	80022fe <HAL_UART_Init+0x2d2>
 800213a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800213e:	429a      	cmp	r2, r3
 8002140:	f000 80dd 	beq.w	80022fe <HAL_UART_Init+0x2d2>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002144:	f7ff ff52 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002148:	4f98      	ldr	r7, [pc, #608]	; (80023ac <HAL_UART_Init+0x380>)
 800214a:	6863      	ldr	r3, [r4, #4]
 800214c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002150:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	fbb0 f3f3 	udiv	r3, r0, r3
 800215a:	fba7 2303 	umull	r2, r3, r7, r3
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	011d      	lsls	r5, r3, #4
 8002162:	f7ff ff43 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002166:	6866      	ldr	r6, [r4, #4]
 8002168:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800216c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002170:	00b6      	lsls	r6, r6, #2
 8002172:	fbb0 f6f6 	udiv	r6, r0, r6
 8002176:	f7ff ff39 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 800217a:	6863      	ldr	r3, [r4, #4]
 800217c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002180:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	fbb0 f3f3 	udiv	r3, r0, r3
 800218a:	fba7 2303 	umull	r2, r3, r7, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	f04f 0964 	mov.w	r9, #100	; 0x64
 8002194:	fb09 6313 	mls	r3, r9, r3, r6
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	3332      	adds	r3, #50	; 0x32
 800219c:	fba7 2303 	umull	r2, r3, r7, r3
 80021a0:	095b      	lsrs	r3, r3, #5
 80021a2:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 80021a6:	f7ff ff21 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 80021aa:	6862      	ldr	r2, [r4, #4]
 80021ac:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021b0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021b4:	0093      	lsls	r3, r2, #2
 80021b6:	fbb0 f8f3 	udiv	r8, r0, r3
 80021ba:	f7ff ff17 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 80021be:	e9d4 2100 	ldrd	r2, r1, [r4]
 80021c2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021c6:	008b      	lsls	r3, r1, #2
 80021c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80021cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80021d0:	fba7 1303 	umull	r1, r3, r7, r3
 80021d4:	095b      	lsrs	r3, r3, #5
 80021d6:	fb09 8313 	mls	r3, r9, r3, r8
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	3332      	adds	r3, #50	; 0x32
 80021de:	fba7 1303 	umull	r1, r3, r7, r3
 80021e2:	f3c3 1343 	ubfx	r3, r3, #5, #4
 80021e6:	4333      	orrs	r3, r6
 80021e8:	442b      	add	r3, r5
 80021ea:	6093      	str	r3, [r2, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021ec:	6913      	ldr	r3, [r2, #16]
 80021ee:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80021f2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80021f4:	6953      	ldr	r3, [r2, #20]
 80021f6:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80021fa:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 80021fc:	68d3      	ldr	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021fe:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8002200:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8002202:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002206:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002208:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800220a:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800220c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002210:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8002214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002218:	4a61      	ldr	r2, [pc, #388]	; (80023a0 <HAL_UART_Init+0x374>)
 800221a:	4293      	cmp	r3, r2
 800221c:	f43f af28 	beq.w	8002070 <HAL_UART_Init+0x44>
 8002220:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8002224:	4293      	cmp	r3, r2
 8002226:	f43f af23 	beq.w	8002070 <HAL_UART_Init+0x44>
 800222a:	f502 4250 	add.w	r2, r2, #53248	; 0xd000
 800222e:	4293      	cmp	r3, r2
 8002230:	f43f af1e 	beq.w	8002070 <HAL_UART_Init+0x44>
 8002234:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8002238:	485a      	ldr	r0, [pc, #360]	; (80023a4 <HAL_UART_Init+0x378>)
 800223a:	f005 fcbd 	bl	8007bb8 <assert_failed>
 800223e:	e717      	b.n	8002070 <HAL_UART_Init+0x44>
    return HAL_ERROR;
 8002240:	2001      	movs	r0, #1
}
 8002242:	4770      	bx	lr
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002244:	429a      	cmp	r2, r3
 8002246:	f000 80b3 	beq.w	80023b0 <HAL_UART_Init+0x384>
 800224a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800224e:	429a      	cmp	r2, r3
 8002250:	f000 80ae 	beq.w	80023b0 <HAL_UART_Init+0x384>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002254:	f7ff feca 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002258:	4f54      	ldr	r7, [pc, #336]	; (80023ac <HAL_UART_Init+0x380>)
 800225a:	6863      	ldr	r3, [r4, #4]
 800225c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002260:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	fbb0 f3f3 	udiv	r3, r0, r3
 800226a:	fba7 2303 	umull	r2, r3, r7, r3
 800226e:	095b      	lsrs	r3, r3, #5
 8002270:	011e      	lsls	r6, r3, #4
 8002272:	f7ff febb 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 8002276:	6865      	ldr	r5, [r4, #4]
 8002278:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800227c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002280:	006d      	lsls	r5, r5, #1
 8002282:	fbb0 f5f5 	udiv	r5, r0, r5
 8002286:	f7ff feb1 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 800228a:	6863      	ldr	r3, [r4, #4]
 800228c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002290:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fbb0 f3f3 	udiv	r3, r0, r3
 800229a:	fba7 2303 	umull	r2, r3, r7, r3
 800229e:	095b      	lsrs	r3, r3, #5
 80022a0:	f04f 0964 	mov.w	r9, #100	; 0x64
 80022a4:	fb09 5313 	mls	r3, r9, r3, r5
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	3332      	adds	r3, #50	; 0x32
 80022ac:	fba7 2303 	umull	r2, r3, r7, r3
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 80022b6:	f7ff fe99 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 80022ba:	6862      	ldr	r2, [r4, #4]
 80022bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022c0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022c4:	0053      	lsls	r3, r2, #1
 80022c6:	fbb0 f8f3 	udiv	r8, r0, r3
 80022ca:	f7ff fe8f 	bl	8001fec <HAL_RCC_GetPCLK1Freq>
 80022ce:	e9d4 2100 	ldrd	r2, r1, [r4]
 80022d2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022d6:	004b      	lsls	r3, r1, #1
 80022d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80022dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80022e0:	fba7 1303 	umull	r1, r3, r7, r3
 80022e4:	095b      	lsrs	r3, r3, #5
 80022e6:	fb09 8313 	mls	r3, r9, r3, r8
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	3332      	adds	r3, #50	; 0x32
 80022ee:	fba7 1303 	umull	r1, r3, r7, r3
 80022f2:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80022f6:	4433      	add	r3, r6
 80022f8:	442b      	add	r3, r5
 80022fa:	6093      	str	r3, [r2, #8]
 80022fc:	e776      	b.n	80021ec <HAL_UART_Init+0x1c0>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80022fe:	f7ff fe85 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8002302:	4f2a      	ldr	r7, [pc, #168]	; (80023ac <HAL_UART_Init+0x380>)
 8002304:	6863      	ldr	r3, [r4, #4]
 8002306:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800230a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	fbb0 f3f3 	udiv	r3, r0, r3
 8002314:	fba7 2303 	umull	r2, r3, r7, r3
 8002318:	095b      	lsrs	r3, r3, #5
 800231a:	011d      	lsls	r5, r3, #4
 800231c:	f7ff fe76 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8002320:	6866      	ldr	r6, [r4, #4]
 8002322:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002326:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800232a:	00b6      	lsls	r6, r6, #2
 800232c:	fbb0 f6f6 	udiv	r6, r0, r6
 8002330:	f7ff fe6c 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8002334:	6863      	ldr	r3, [r4, #4]
 8002336:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800233a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	fbb0 f3f3 	udiv	r3, r0, r3
 8002344:	fba7 2303 	umull	r2, r3, r7, r3
 8002348:	f04f 0964 	mov.w	r9, #100	; 0x64
 800234c:	095b      	lsrs	r3, r3, #5
 800234e:	fb09 6313 	mls	r3, r9, r3, r6
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	3332      	adds	r3, #50	; 0x32
 8002356:	fba7 2303 	umull	r2, r3, r7, r3
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	f003 06f0 	and.w	r6, r3, #240	; 0xf0
 8002360:	f7ff fe54 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8002364:	6862      	ldr	r2, [r4, #4]
 8002366:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800236a:	0093      	lsls	r3, r2, #2
 800236c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002370:	fbb0 f8f3 	udiv	r8, r0, r3
 8002374:	f7ff fe4a 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8002378:	e721      	b.n	80021be <HAL_UART_Init+0x192>
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800237a:	f640 31e5 	movw	r1, #3045	; 0xbe5
 800237e:	4809      	ldr	r0, [pc, #36]	; (80023a4 <HAL_UART_Init+0x378>)
 8002380:	f005 fc1a 	bl	8007bb8 <assert_failed>
 8002384:	e69a      	b.n	80020bc <HAL_UART_Init+0x90>
    huart->Lock = HAL_UNLOCKED;
 8002386:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    HAL_UART_MspInit(huart);
 800238a:	4620      	mov	r0, r4
 800238c:	f005 fcf8 	bl	8007d80 <HAL_UART_MspInit>
 8002390:	e687      	b.n	80020a2 <HAL_UART_Init+0x76>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002392:	f640 31e7 	movw	r1, #3047	; 0xbe7
 8002396:	4803      	ldr	r0, [pc, #12]	; (80023a4 <HAL_UART_Init+0x378>)
 8002398:	f005 fc0e 	bl	8007bb8 <assert_failed>
 800239c:	e69f      	b.n	80020de <HAL_UART_Init+0xb2>
 800239e:	bf00      	nop
 80023a0:	40011000 	.word	0x40011000
 80023a4:	0800c724 	.word	0x0800c724
 80023a8:	00a037a0 	.word	0x00a037a0
 80023ac:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80023b0:	f7ff fe2c 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 80023b4:	4f25      	ldr	r7, [pc, #148]	; (800244c <HAL_UART_Init+0x420>)
 80023b6:	6863      	ldr	r3, [r4, #4]
 80023b8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023bc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c6:	fba7 2303 	umull	r2, r3, r7, r3
 80023ca:	095b      	lsrs	r3, r3, #5
 80023cc:	011e      	lsls	r6, r3, #4
 80023ce:	f7ff fe1d 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 80023d2:	6865      	ldr	r5, [r4, #4]
 80023d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023d8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023dc:	006d      	lsls	r5, r5, #1
 80023de:	fbb0 f5f5 	udiv	r5, r0, r5
 80023e2:	f7ff fe13 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 80023e6:	6863      	ldr	r3, [r4, #4]
 80023e8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023ec:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f6:	fba7 2303 	umull	r2, r3, r7, r3
 80023fa:	f04f 0964 	mov.w	r9, #100	; 0x64
 80023fe:	095b      	lsrs	r3, r3, #5
 8002400:	fb09 5313 	mls	r3, r9, r3, r5
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	3332      	adds	r3, #50	; 0x32
 8002408:	fba7 2303 	umull	r2, r3, r7, r3
 800240c:	091b      	lsrs	r3, r3, #4
 800240e:	f403 75f8 	and.w	r5, r3, #496	; 0x1f0
 8002412:	f7ff fdfb 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 8002416:	6862      	ldr	r2, [r4, #4]
 8002418:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800241c:	0053      	lsls	r3, r2, #1
 800241e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8002422:	fbb0 f8f3 	udiv	r8, r0, r3
 8002426:	f7ff fdf1 	bl	800200c <HAL_RCC_GetPCLK2Freq>
 800242a:	e750      	b.n	80022ce <HAL_UART_Init+0x2a2>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800242c:	f422 7300 	bic.w	r3, r2, #512	; 0x200
 8002430:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002434:	f43f ae1c 	beq.w	8002070 <HAL_UART_Init+0x44>
 8002438:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800243c:	f43f ae18 	beq.w	8002070 <HAL_UART_Init+0x44>
 8002440:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <HAL_UART_Init+0x424>)
 8002446:	f005 fbb7 	bl	8007bb8 <assert_failed>
 800244a:	e611      	b.n	8002070 <HAL_UART_Init+0x44>
 800244c:	51eb851f 	.word	0x51eb851f
 8002450:	0800c724 	.word	0x0800c724

08002454 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002454:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002458:	2b20      	cmp	r3, #32
 800245a:	d12d      	bne.n	80024b8 <HAL_UART_Transmit_DMA+0x64>
{
 800245c:	b570      	push	{r4, r5, r6, lr}
    if ((pData == NULL) || (Size == 0U))
 800245e:	b349      	cbz	r1, 80024b4 <HAL_UART_Transmit_DMA+0x60>
 8002460:	b342      	cbz	r2, 80024b4 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8002462:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002466:	2b01      	cmp	r3, #1
 8002468:	d028      	beq.n	80024bc <HAL_UART_Transmit_DMA+0x68>
 800246a:	4604      	mov	r4, r0
 800246c:	2601      	movs	r6, #1
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800246e:	6b00      	ldr	r0, [r0, #48]	; 0x30
    __HAL_LOCK(huart);
 8002470:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
 8002474:	4613      	mov	r3, r2
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002476:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002478:	2621      	movs	r6, #33	; 0x21
    huart->TxXferCount = Size;
 800247a:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800247c:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800247e:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002482:	4e0f      	ldr	r6, [pc, #60]	; (80024c0 <HAL_UART_Transmit_DMA+0x6c>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002484:	6822      	ldr	r2, [r4, #0]
    huart->TxXferSize = Size;
 8002486:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8002488:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800248a:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800248c:	4e0d      	ldr	r6, [pc, #52]	; (80024c4 <HAL_UART_Transmit_DMA+0x70>)
 800248e:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002490:	4e0d      	ldr	r6, [pc, #52]	; (80024c8 <HAL_UART_Transmit_DMA+0x74>)
    huart->hdmatx->XferAbortCallback = NULL;
 8002492:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002494:	64c6      	str	r6, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002496:	3204      	adds	r2, #4
 8002498:	f7fe ff64 	bl	8001364 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80024a2:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024a4:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 80024a6:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 80024ae:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80024b0:	615a      	str	r2, [r3, #20]
}
 80024b2:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 80024b4:	2001      	movs	r0, #1
}
 80024b6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 80024b8:	2002      	movs	r0, #2
}
 80024ba:	4770      	bx	lr
    return HAL_BUSY;
 80024bc:	2002      	movs	r0, #2
}
 80024be:	bd70      	pop	{r4, r5, r6, pc}
 80024c0:	08002565 	.word	0x08002565
 80024c4:	08002591 	.word	0x08002591
 80024c8:	08002659 	.word	0x08002659

080024cc <HAL_UART_Receive_DMA>:
{
 80024cc:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80024ce:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 80024d2:	2c20      	cmp	r4, #32
{
 80024d4:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 80024d6:	d138      	bne.n	800254a <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 80024d8:	2900      	cmp	r1, #0
 80024da:	d039      	beq.n	8002550 <HAL_UART_Receive_DMA+0x84>
 80024dc:	2a00      	cmp	r2, #0
 80024de:	d037      	beq.n	8002550 <HAL_UART_Receive_DMA+0x84>
    __HAL_LOCK(huart);
 80024e0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d030      	beq.n	800254a <HAL_UART_Receive_DMA+0x7e>
 80024e8:	4604      	mov	r4, r0
 80024ea:	2601      	movs	r6, #1
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80024ec:	6b40      	ldr	r0, [r0, #52]	; 0x34
    __HAL_LOCK(huart);
 80024ee:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f2:	2500      	movs	r5, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024f4:	2622      	movs	r6, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024f6:	63e5      	str	r5, [r4, #60]	; 0x3c
 80024f8:	4613      	mov	r3, r2
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024fa:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
 80024fe:	460a      	mov	r2, r1
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002500:	4e15      	ldr	r6, [pc, #84]	; (8002558 <HAL_UART_Receive_DMA+0x8c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002502:	6821      	ldr	r1, [r4, #0]
    huart->pRxBuffPtr = pData;
 8002504:	62a2      	str	r2, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8002506:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002508:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800250a:	4e14      	ldr	r6, [pc, #80]	; (800255c <HAL_UART_Receive_DMA+0x90>)
 800250c:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800250e:	4e14      	ldr	r6, [pc, #80]	; (8002560 <HAL_UART_Receive_DMA+0x94>)
    huart->hdmarx->XferAbortCallback = NULL;
 8002510:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002512:	64c6      	str	r6, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002514:	3104      	adds	r1, #4
 8002516:	f7fe ff25 	bl	8001364 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 800251a:	6823      	ldr	r3, [r4, #0]
 800251c:	9501      	str	r5, [sp, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	9201      	str	r2, [sp, #4]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	9201      	str	r2, [sp, #4]
 8002526:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002528:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 800252a:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800252e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002532:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002534:	695a      	ldr	r2, [r3, #20]
 8002536:	f042 0201 	orr.w	r2, r2, #1
 800253a:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800253c:	695a      	ldr	r2, [r3, #20]
    return HAL_OK;
 800253e:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002540:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002544:	615a      	str	r2, [r3, #20]
}
 8002546:	b002      	add	sp, #8
 8002548:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 800254a:	2002      	movs	r0, #2
}
 800254c:	b002      	add	sp, #8
 800254e:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8002550:	2001      	movs	r0, #1
}
 8002552:	b002      	add	sp, #8
 8002554:	bd70      	pop	{r4, r5, r6, pc}
 8002556:	bf00      	nop
 8002558:	080025a1 	.word	0x080025a1
 800255c:	08002649 	.word	0x08002649
 8002560:	08002659 	.word	0x08002659

08002564 <UART_DMATransmitCplt>:
{
 8002564:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002566:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002568:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8002570:	d10a      	bne.n	8002588 <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002572:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 8002574:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002576:	6953      	ldr	r3, [r2, #20]
 8002578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800257c:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800257e:	68d3      	ldr	r3, [r2, #12]
 8002580:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002584:	60d3      	str	r3, [r2, #12]
}
 8002586:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002588:	f005 f96c 	bl	8007864 <HAL_UART_TxCpltCallback>
}
 800258c:	bd08      	pop	{r3, pc}
 800258e:	bf00      	nop

08002590 <UART_DMATxHalfCplt>:
{
 8002590:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002592:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8002594:	f005 f97e 	bl	8007894 <HAL_UART_TxHalfCpltCallback>
}
 8002598:	bd08      	pop	{r3, pc}
 800259a:	bf00      	nop

0800259c <HAL_UART_RxCpltCallback>:
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop

080025a0 <UART_DMAReceiveCplt>:
{
 80025a0:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80025a2:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025a4:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 80025ac:	d110      	bne.n	80025d0 <UART_DMAReceiveCplt+0x30>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025ae:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 80025b0:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025b2:	68d3      	ldr	r3, [r2, #12]
 80025b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025b8:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ba:	6953      	ldr	r3, [r2, #20]
 80025bc:	f023 0301 	bic.w	r3, r3, #1
 80025c0:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025c2:	6953      	ldr	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80025c4:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025ca:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 80025cc:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 80025d0:	f7ff ffe4 	bl	800259c <HAL_UART_RxCpltCallback>
}
 80025d4:	bd08      	pop	{r3, pc}
 80025d6:	bf00      	nop

080025d8 <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 80025d8:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80025da:	6884      	ldr	r4, [r0, #8]
 80025dc:	6901      	ldr	r1, [r0, #16]
 80025de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80025e0:	6802      	ldr	r2, [r0, #0]
 80025e2:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 80025e6:	d020      	beq.n	800262a <UART_Receive_IT.part.1+0x52>
 80025e8:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80025ea:	6852      	ldr	r2, [r2, #4]
 80025ec:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 80025ee:	b9c9      	cbnz	r1, 8002624 <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80025f0:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 80025f2:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80025f4:	3b01      	subs	r3, #1
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80025fa:	b98b      	cbnz	r3, 8002620 <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80025fc:	6802      	ldr	r2, [r0, #0]
 80025fe:	68d1      	ldr	r1, [r2, #12]
 8002600:	f021 0120 	bic.w	r1, r1, #32
 8002604:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002606:	68d1      	ldr	r1, [r2, #12]
 8002608:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 800260c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800260e:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002610:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002612:	f021 0101 	bic.w	r1, r1, #1
 8002616:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002618:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800261c:	f7ff ffbe 	bl	800259c <HAL_UART_RxCpltCallback>
}
 8002620:	2000      	movs	r0, #0
 8002622:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002624:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002628:	e7e2      	b.n	80025f0 <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800262a:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800262c:	b929      	cbnz	r1, 800263a <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800262e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002632:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8002636:	6283      	str	r3, [r0, #40]	; 0x28
 8002638:	e7db      	b.n	80025f2 <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800263a:	b2d2      	uxtb	r2, r2
 800263c:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8002640:	6283      	str	r3, [r0, #40]	; 0x28
 8002642:	e7d6      	b.n	80025f2 <UART_Receive_IT.part.1+0x1a>

08002644 <HAL_UART_RxHalfCpltCallback>:
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop

08002648 <UART_DMARxHalfCplt>:
{
 8002648:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 800264a:	6b80      	ldr	r0, [r0, #56]	; 0x38
 800264c:	f7ff fffa 	bl	8002644 <HAL_UART_RxHalfCpltCallback>
}
 8002650:	bd08      	pop	{r3, pc}
 8002652:	bf00      	nop

08002654 <HAL_UART_ErrorCallback>:
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop

08002658 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002658:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 800265a:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800265c:	6803      	ldr	r3, [r0, #0]
 800265e:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002660:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8002664:	2a21      	cmp	r2, #33	; 0x21
 8002666:	d01b      	beq.n	80026a0 <UART_DMAError+0x48>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002668:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800266a:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 800266e:	2a22      	cmp	r2, #34	; 0x22
 8002670:	d006      	beq.n	8002680 <UART_DMAError+0x28>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002672:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002674:	f043 0310 	orr.w	r3, r3, #16
 8002678:	63c3      	str	r3, [r0, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 800267a:	f7ff ffeb 	bl	8002654 <HAL_UART_ErrorCallback>
}
 800267e:	bd08      	pop	{r3, pc}
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002680:	064a      	lsls	r2, r1, #25
 8002682:	d5f6      	bpl.n	8002672 <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8002684:	2200      	movs	r2, #0
 8002686:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002688:	68da      	ldr	r2, [r3, #12]
 800268a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800268e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002690:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002692:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 800269a:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
 800269e:	e7e8      	b.n	8002672 <UART_DMAError+0x1a>
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80026a0:	0609      	lsls	r1, r1, #24
 80026a2:	d5e1      	bpl.n	8002668 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 80026a4:	2200      	movs	r2, #0
 80026a6:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80026a8:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80026aa:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80026ac:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80026b0:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80026b2:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 80026b6:	e7d7      	b.n	8002668 <UART_DMAError+0x10>

080026b8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026b8:	6803      	ldr	r3, [r0, #0]
 80026ba:	681a      	ldr	r2, [r3, #0]
{
 80026bc:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80026be:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026c0:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026c2:	6959      	ldr	r1, [r3, #20]
{
 80026c4:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80026c6:	d049      	beq.n	800275c <HAL_UART_IRQHandler+0xa4>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026c8:	f011 0101 	ands.w	r1, r1, #1
 80026cc:	d04f      	beq.n	800276e <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026ce:	07d6      	lsls	r6, r2, #31
 80026d0:	d505      	bpl.n	80026de <HAL_UART_IRQHandler+0x26>
 80026d2:	05e8      	lsls	r0, r5, #23
 80026d4:	d503      	bpl.n	80026de <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80026d8:	f040 0001 	orr.w	r0, r0, #1
 80026dc:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026de:	0756      	lsls	r6, r2, #29
 80026e0:	f002 0002 	and.w	r0, r2, #2
 80026e4:	d575      	bpl.n	80027d2 <HAL_UART_IRQHandler+0x11a>
 80026e6:	b161      	cbz	r1, 8002702 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80026e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80026ea:	f041 0102 	orr.w	r1, r1, #2
 80026ee:	63e1      	str	r1, [r4, #60]	; 0x3c
 80026f0:	f002 0608 	and.w	r6, r2, #8
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026f4:	2800      	cmp	r0, #0
 80026f6:	d171      	bne.n	80027dc <HAL_UART_IRQHandler+0x124>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026f8:	b11e      	cbz	r6, 8002702 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026fa:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80026fc:	f041 0108 	orr.w	r1, r1, #8
 8002700:	63e1      	str	r1, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002702:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002704:	2900      	cmp	r1, #0
 8002706:	d031      	beq.n	800276c <HAL_UART_IRQHandler+0xb4>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002708:	0696      	lsls	r6, r2, #26
 800270a:	d501      	bpl.n	8002710 <HAL_UART_IRQHandler+0x58>
 800270c:	06a8      	lsls	r0, r5, #26
 800270e:	d473      	bmi.n	80027f8 <HAL_UART_IRQHandler+0x140>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002710:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002712:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002714:	0709      	lsls	r1, r1, #28
 8002716:	d402      	bmi.n	800271e <HAL_UART_IRQHandler+0x66>
 8002718:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800271c:	d079      	beq.n	8002812 <HAL_UART_IRQHandler+0x15a>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002724:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002726:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002728:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800272a:	f022 0201 	bic.w	r2, r2, #1
 800272e:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8002730:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002734:	695a      	ldr	r2, [r3, #20]
 8002736:	0652      	lsls	r2, r2, #25
 8002738:	d55a      	bpl.n	80027f0 <HAL_UART_IRQHandler+0x138>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800273a:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800273c:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800273e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002742:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002744:	2800      	cmp	r0, #0
 8002746:	d053      	beq.n	80027f0 <HAL_UART_IRQHandler+0x138>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002748:	4b3a      	ldr	r3, [pc, #232]	; (8002834 <HAL_UART_IRQHandler+0x17c>)
 800274a:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800274c:	f7fe fe64 	bl	8001418 <HAL_DMA_Abort_IT>
 8002750:	b160      	cbz	r0, 800276c <HAL_UART_IRQHandler+0xb4>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002752:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8002754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002758:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800275a:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800275c:	0696      	lsls	r6, r2, #26
 800275e:	d509      	bpl.n	8002774 <HAL_UART_IRQHandler+0xbc>
 8002760:	06a9      	lsls	r1, r5, #26
 8002762:	d507      	bpl.n	8002774 <HAL_UART_IRQHandler+0xbc>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002764:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002768:	2b22      	cmp	r3, #34	; 0x22
 800276a:	d04e      	beq.n	800280a <HAL_UART_IRQHandler+0x152>
}
 800276c:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800276e:	f415 7f90 	tst.w	r5, #288	; 0x120
 8002772:	d1ac      	bne.n	80026ce <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002774:	0616      	lsls	r6, r2, #24
 8002776:	d40e      	bmi.n	8002796 <HAL_UART_IRQHandler+0xde>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002778:	0651      	lsls	r1, r2, #25
 800277a:	d5f7      	bpl.n	800276c <HAL_UART_IRQHandler+0xb4>
 800277c:	066a      	lsls	r2, r5, #25
 800277e:	d5f5      	bpl.n	800276c <HAL_UART_IRQHandler+0xb4>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002780:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8002782:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002784:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002788:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 800278a:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 800278c:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8002790:	f005 f868 	bl	8007864 <HAL_UART_TxCpltCallback>
}
 8002794:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002796:	0628      	lsls	r0, r5, #24
 8002798:	d5ee      	bpl.n	8002778 <HAL_UART_IRQHandler+0xc0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800279a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800279e:	2a21      	cmp	r2, #33	; 0x21
 80027a0:	d1e4      	bne.n	800276c <HAL_UART_IRQHandler+0xb4>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80027a2:	68a1      	ldr	r1, [r4, #8]
 80027a4:	6a22      	ldr	r2, [r4, #32]
 80027a6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80027aa:	d037      	beq.n	800281c <HAL_UART_IRQHandler+0x164>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80027ac:	1c51      	adds	r1, r2, #1
 80027ae:	6221      	str	r1, [r4, #32]
 80027b0:	7812      	ldrb	r2, [r2, #0]
 80027b2:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 80027b4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80027b6:	3a01      	subs	r2, #1
 80027b8:	b292      	uxth	r2, r2
 80027ba:	84e2      	strh	r2, [r4, #38]	; 0x26
 80027bc:	2a00      	cmp	r2, #0
 80027be:	d1d5      	bne.n	800276c <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027c0:	68da      	ldr	r2, [r3, #12]
 80027c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027c6:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027ce:	60da      	str	r2, [r3, #12]
}
 80027d0:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027d2:	b140      	cbz	r0, 80027e6 <HAL_UART_IRQHandler+0x12e>
 80027d4:	2900      	cmp	r1, #0
 80027d6:	d094      	beq.n	8002702 <HAL_UART_IRQHandler+0x4a>
 80027d8:	f002 0608 	and.w	r6, r2, #8
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027dc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80027de:	f041 0104 	orr.w	r1, r1, #4
 80027e2:	63e1      	str	r1, [r4, #60]	; 0x3c
 80027e4:	e788      	b.n	80026f8 <HAL_UART_IRQHandler+0x40>
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80027e6:	0710      	lsls	r0, r2, #28
 80027e8:	d58b      	bpl.n	8002702 <HAL_UART_IRQHandler+0x4a>
 80027ea:	2900      	cmp	r1, #0
 80027ec:	d185      	bne.n	80026fa <HAL_UART_IRQHandler+0x42>
 80027ee:	e788      	b.n	8002702 <HAL_UART_IRQHandler+0x4a>
            HAL_UART_ErrorCallback(huart);
 80027f0:	4620      	mov	r0, r4
 80027f2:	f7ff ff2f 	bl	8002654 <HAL_UART_ErrorCallback>
}
 80027f6:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80027f8:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 80027fc:	2a22      	cmp	r2, #34	; 0x22
 80027fe:	d187      	bne.n	8002710 <HAL_UART_IRQHandler+0x58>
 8002800:	4620      	mov	r0, r4
 8002802:	f7ff fee9 	bl	80025d8 <UART_Receive_IT.part.1>
 8002806:	6823      	ldr	r3, [r4, #0]
 8002808:	e782      	b.n	8002710 <HAL_UART_IRQHandler+0x58>
}
 800280a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800280e:	f7ff bee3 	b.w	80025d8 <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 8002812:	4620      	mov	r0, r4
 8002814:	f7ff ff1e 	bl	8002654 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002818:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800281a:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800281c:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800281e:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002820:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8002824:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002826:	b910      	cbnz	r0, 800282e <HAL_UART_IRQHandler+0x176>
        huart->pTxBuffPtr += 2U;
 8002828:	3202      	adds	r2, #2
 800282a:	6222      	str	r2, [r4, #32]
 800282c:	e7c2      	b.n	80027b4 <HAL_UART_IRQHandler+0xfc>
        huart->pTxBuffPtr += 1U;
 800282e:	3201      	adds	r2, #1
 8002830:	6222      	str	r2, [r4, #32]
 8002832:	e7bf      	b.n	80027b4 <HAL_UART_IRQHandler+0xfc>
 8002834:	08002839 	.word	0x08002839

08002838 <UART_DMAAbortOnError>:
{
 8002838:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800283a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800283c:	2200      	movs	r2, #0
 800283e:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8002840:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 8002842:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8002844:	f7ff ff06 	bl	8002654 <HAL_UART_ErrorCallback>
}
 8002848:	bd08      	pop	{r3, pc}
 800284a:	bf00      	nop

0800284c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800284c:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 800284e:	f001 f897 	bl	8003980 <vTaskStartScheduler>
  
  return osOK;
}
 8002852:	2000      	movs	r0, #0
 8002854:	bd08      	pop	{r3, pc}
 8002856:	bf00      	nop

08002858 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002858:	b5f0      	push	{r4, r5, r6, r7, lr}
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800285a:	f9b0 4008 	ldrsh.w	r4, [r0, #8]
 800285e:	6902      	ldr	r2, [r0, #16]
 8002860:	e9d0 5605 	ldrd	r5, r6, [r0, #20]
{
 8002864:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002866:	e9d0 1700 	ldrd	r1, r7, [r0]
{
 800286a:	b085      	sub	sp, #20
  if (priority != osPriorityError) {
 800286c:	2c84      	cmp	r4, #132	; 0x84
    fpriority += (priority - osPriorityIdle);
 800286e:	bf14      	ite	ne
 8002870:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002872:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002874:	9400      	str	r4, [sp, #0]
 8002876:	4638      	mov	r0, r7
 8002878:	e9cd 5601 	strd	r5, r6, [sp, #4]
 800287c:	f000 ff66 	bl	800374c <xTaskCreateStatic>
    return NULL;
  }     
#endif
  
  return handle;
}
 8002880:	b005      	add	sp, #20
 8002882:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002884 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002884:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002886:	2800      	cmp	r0, #0
 8002888:	bf08      	it	eq
 800288a:	2001      	moveq	r0, #1
 800288c:	f001 fa40 	bl	8003d10 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002890:	2000      	movs	r0, #0
 8002892:	bd08      	pop	{r3, pc}

08002894 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8002894:	b508      	push	{r3, lr}

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002896:	f001 fbef 	bl	8004078 <xTaskGetSchedulerState>
 800289a:	2801      	cmp	r0, #1
 800289c:	d003      	beq.n	80028a6 <osSystickHandler+0x12>
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 800289e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 80028a2:	f001 bfdf 	b.w	8004864 <xPortSysTickHandler>
}
 80028a6:	bd08      	pop	{r3, pc}

080028a8 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028a8:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028b0:	2200      	movs	r2, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028b2:	6081      	str	r1, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028b4:	6002      	str	r2, [r0, #0]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028b6:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028b8:	e9c0 3303 	strd	r3, r3, [r0, #12]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop

080028c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80028c0:	2300      	movs	r3, #0
 80028c2:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop

080028c8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80028c8:	6843      	ldr	r3, [r0, #4]
	pxIndex->pxPrevious = pxNewListItem;

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80028ca:	6802      	ldr	r2, [r0, #0]
{
 80028cc:	b410      	push	{r4}
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028ce:	689c      	ldr	r4, [r3, #8]
 80028d0:	608c      	str	r4, [r1, #8]
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028d2:	689c      	ldr	r4, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80028d4:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 80028d6:	3201      	adds	r2, #1
	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028d8:	6061      	str	r1, [r4, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028da:	6099      	str	r1, [r3, #8]
}
 80028dc:	f85d 4b04 	ldr.w	r4, [sp], #4
	pxNewListItem->pvContainer = ( void * ) pxList;
 80028e0:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80028e2:	6002      	str	r2, [r0, #0]
}
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop

080028e8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028e8:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80028ea:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80028ec:	1c6b      	adds	r3, r5, #1
 80028ee:	d011      	beq.n	8002914 <vListInsert+0x2c>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028f0:	f100 0208 	add.w	r2, r0, #8
 80028f4:	e000      	b.n	80028f8 <vListInsert+0x10>
 80028f6:	461a      	mov	r2, r3
 80028f8:	6853      	ldr	r3, [r2, #4]
 80028fa:	681c      	ldr	r4, [r3, #0]
 80028fc:	42ac      	cmp	r4, r5
 80028fe:	d9fa      	bls.n	80028f6 <vListInsert+0xe>

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002900:	6804      	ldr	r4, [r0, #0]
	pxNewListItem->pxNext = pxIterator->pxNext;
 8002902:	604b      	str	r3, [r1, #4]
	( pxList->uxNumberOfItems )++;
 8002904:	3401      	adds	r4, #1
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002906:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002908:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800290a:	6051      	str	r1, [r2, #4]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800290c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800290e:	6004      	str	r4, [r0, #0]
}
 8002910:	bc30      	pop	{r4, r5}
 8002912:	4770      	bx	lr
		pxIterator = pxList->xListEnd.pxPrevious;
 8002914:	6902      	ldr	r2, [r0, #16]
 8002916:	6853      	ldr	r3, [r2, #4]
 8002918:	e7f2      	b.n	8002900 <vListInsert+0x18>
 800291a:	bf00      	nop

0800291c <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800291c:	6842      	ldr	r2, [r0, #4]
 800291e:	6881      	ldr	r1, [r0, #8]
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002920:	6903      	ldr	r3, [r0, #16]
{
 8002922:	b410      	push	{r4}
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002924:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002926:	6881      	ldr	r1, [r0, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002928:	685c      	ldr	r4, [r3, #4]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800292a:	604a      	str	r2, [r1, #4]
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
	( pxList->uxNumberOfItems )--;
 800292c:	681a      	ldr	r2, [r3, #0]
	if( pxList->pxIndex == pxItemToRemove )
 800292e:	4284      	cmp	r4, r0
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002930:	bf08      	it	eq
 8002932:	6059      	streq	r1, [r3, #4]
	( pxList->uxNumberOfItems )--;
 8002934:	3a01      	subs	r2, #1
	pxItemToRemove->pvContainer = NULL;
 8002936:	2100      	movs	r1, #0
 8002938:	6101      	str	r1, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800293a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800293c:	6818      	ldr	r0, [r3, #0]
}
 800293e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002942:	4770      	bx	lr

08002944 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002944:	b538      	push	{r3, r4, r5, lr}
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002946:	b1e0      	cbz	r0, 8002982 <xQueueGenericReset+0x3e>
 8002948:	4604      	mov	r4, r0
 800294a:	460d      	mov	r5, r1

	taskENTER_CRITICAL();
 800294c:	f001 ff22 	bl	8004794 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002950:	e9d4 130f 	ldrd	r1, r3, [r4, #60]	; 0x3c
 8002954:	6822      	ldr	r2, [r4, #0]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002956:	60a2      	str	r2, [r4, #8]
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002958:	fb01 f103 	mul.w	r1, r1, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800295c:	1acb      	subs	r3, r1, r3
 800295e:	4413      	add	r3, r2
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002960:	2000      	movs	r0, #0
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002962:	440a      	add	r2, r1
		pxQueue->cRxLock = queueUNLOCKED;
 8002964:	21ff      	movs	r1, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002966:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002968:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800296a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800296e:	6062      	str	r2, [r4, #4]
		pxQueue->cTxLock = queueUNLOCKED;
 8002970:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002974:	b975      	cbnz	r5, 8002994 <xQueueGenericReset+0x50>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002976:	6923      	ldr	r3, [r4, #16]
 8002978:	b9ab      	cbnz	r3, 80029a6 <xQueueGenericReset+0x62>
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
		}
	}
	taskEXIT_CRITICAL();
 800297a:	f001 ff2d 	bl	80047d8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
 800297e:	2001      	movs	r0, #1
 8002980:	bd38      	pop	{r3, r4, r5, pc}

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002986:	f383 8811 	msr	BASEPRI, r3
 800298a:	f3bf 8f6f 	isb	sy
 800298e:	f3bf 8f4f 	dsb	sy
 8002992:	e7fe      	b.n	8002992 <xQueueGenericReset+0x4e>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002994:	f104 0010 	add.w	r0, r4, #16
 8002998:	f7ff ff86 	bl	80028a8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800299c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80029a0:	f7ff ff82 	bl	80028a8 <vListInitialise>
 80029a4:	e7e9      	b.n	800297a <xQueueGenericReset+0x36>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029a6:	f104 0010 	add.w	r0, r4, #16
 80029aa:	f001 faa9 	bl	8003f00 <xTaskRemoveFromEventList>
 80029ae:	2800      	cmp	r0, #0
 80029b0:	d0e3      	beq.n	800297a <xQueueGenericReset+0x36>
					queueYIELD_IF_USING_PREEMPTION();
 80029b2:	4b04      	ldr	r3, [pc, #16]	; (80029c4 <xQueueGenericReset+0x80>)
 80029b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	f3bf 8f4f 	dsb	sy
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	e7da      	b.n	800297a <xQueueGenericReset+0x36>
 80029c4:	e000ed04 	.word	0xe000ed04

080029c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ca:	9c06      	ldr	r4, [sp, #24]
	{
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
 80029cc:	4d2a      	ldr	r5, [pc, #168]	; (8002a78 <prvInitialiseNewQueue+0xb0>)
	pxNewQueue->uxLength = uxQueueLength;
 80029ce:	63e0      	str	r0, [r4, #60]	; 0x3c
	if( uxItemSize == ( UBaseType_t ) 0 )
 80029d0:	2900      	cmp	r1, #0
 80029d2:	bf08      	it	eq
 80029d4:	4622      	moveq	r2, r4
 80029d6:	6022      	str	r2, [r4, #0]
{
 80029d8:	461e      	mov	r6, r3
	pxNewQueue->uxItemSize = uxItemSize;
 80029da:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80029dc:	4620      	mov	r0, r4
 80029de:	2101      	movs	r1, #1
 80029e0:	f7ff ffb0 	bl	8002944 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 80029e4:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
	traceQUEUE_CREATE( pxNewQueue );
 80029e8:	4620      	mov	r0, r4
 80029ea:	f002 f825 	bl	8004a38 <prvTraceGetQueueType>
 80029ee:	5c28      	ldrb	r0, [r5, r0]
 80029f0:	4e22      	ldr	r6, [pc, #136]	; (8002a7c <prvInitialiseNewQueue+0xb4>)
 80029f2:	f002 fd3d 	bl	8005470 <prvTraceGetObjectHandle>
 80029f6:	b281      	uxth	r1, r0
 80029f8:	4620      	mov	r0, r4
 80029fa:	f002 f853 	bl	8004aa4 <prvTraceSetQueueNumberLow16>
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <prvInitialiseNewQueue+0xb8>)
 8002a00:	4620      	mov	r0, r4
 8002a02:	8819      	ldrh	r1, [r3, #0]
 8002a04:	f002 f85c 	bl	8004ac0 <prvTraceSetQueueNumberHigh16>
 8002a08:	4620      	mov	r0, r4
 8002a0a:	f002 f815 	bl	8004a38 <prvTraceGetQueueType>
 8002a0e:	5c2f      	ldrb	r7, [r5, r0]
 8002a10:	4620      	mov	r0, r4
 8002a12:	f002 f83b 	bl	8004a8c <prvTraceGetQueueNumberLow16>
 8002a16:	b2c1      	uxtb	r1, r0
 8002a18:	4638      	mov	r0, r7
 8002a1a:	f002 fdcb 	bl	80055b4 <prvMarkObjectAsUsed>
 8002a1e:	f002 f85d 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8002a22:	f002 f811 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8002a26:	8833      	ldrh	r3, [r6, #0]
 8002a28:	4218      	tst	r0, r3
 8002a2a:	d017      	beq.n	8002a5c <prvInitialiseNewQueue+0x94>
 8002a2c:	4620      	mov	r0, r4
 8002a2e:	f002 f833 	bl	8004a98 <prvTraceGetQueueNumberHigh16>
 8002a32:	8833      	ldrh	r3, [r6, #0]
 8002a34:	4218      	tst	r0, r3
 8002a36:	d011      	beq.n	8002a5c <prvInitialiseNewQueue+0x94>
 8002a38:	4620      	mov	r0, r4
 8002a3a:	f001 fffd 	bl	8004a38 <prvTraceGetQueueType>
 8002a3e:	5c2e      	ldrb	r6, [r5, r0]
 8002a40:	4620      	mov	r0, r4
 8002a42:	f001 fff9 	bl	8004a38 <prvTraceGetQueueType>
 8002a46:	5c2f      	ldrb	r7, [r5, r0]
 8002a48:	4620      	mov	r0, r4
 8002a4a:	f002 f81f 	bl	8004a8c <prvTraceGetQueueNumberLow16>
 8002a4e:	3618      	adds	r6, #24
 8002a50:	b2f6      	uxtb	r6, r6
 8002a52:	b2c2      	uxtb	r2, r0
 8002a54:	4639      	mov	r1, r7
 8002a56:	4630      	mov	r0, r6
 8002a58:	f003 f820 	bl	8005a9c <prvTraceStoreKernelCall>
 8002a5c:	4620      	mov	r0, r4
 8002a5e:	f001 ffeb 	bl	8004a38 <prvTraceGetQueueType>
 8002a62:	5c2d      	ldrb	r5, [r5, r0]
 8002a64:	4620      	mov	r0, r4
 8002a66:	f002 f811 	bl	8004a8c <prvTraceGetQueueNumberLow16>
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	b2c1      	uxtb	r1, r0
 8002a6e:	4628      	mov	r0, r5
}
 8002a70:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	traceQUEUE_CREATE( pxNewQueue );
 8002a74:	f002 bb70 	b.w	8005158 <prvTraceSetObjectState>
 8002a78:	2000000c 	.word	0x2000000c
 8002a7c:	20000014 	.word	0x20000014
 8002a80:	20000012 	.word	0x20000012

08002a84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	9201      	str	r2, [sp, #4]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;

	configASSERT( pxQueue );
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	f000 815e 	beq.w	8002d4e <xQueueGenericSend+0x2ca>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a92:	2900      	cmp	r1, #0
 8002a94:	f000 814e 	beq.w	8002d34 <xQueueGenericSend+0x2b0>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d10b      	bne.n	8002ab4 <xQueueGenericSend+0x30>
 8002a9c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002a9e:	2a01      	cmp	r2, #1
 8002aa0:	d008      	beq.n	8002ab4 <xQueueGenericSend+0x30>
 8002aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	e7fe      	b.n	8002ab2 <xQueueGenericSend+0x2e>
 8002ab4:	4604      	mov	r4, r0
 8002ab6:	461e      	mov	r6, r3
 8002ab8:	4688      	mov	r8, r1
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002aba:	f001 fadd 	bl	8004078 <xTaskGetSchedulerState>
 8002abe:	b950      	cbnz	r0, 8002ad6 <xQueueGenericSend+0x52>
 8002ac0:	9d01      	ldr	r5, [sp, #4]
 8002ac2:	b14d      	cbz	r5, 8002ad8 <xQueueGenericSend+0x54>
 8002ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac8:	f383 8811 	msr	BASEPRI, r3
 8002acc:	f3bf 8f6f 	isb	sy
 8002ad0:	f3bf 8f4f 	dsb	sy
 8002ad4:	e7fe      	b.n	8002ad4 <xQueueGenericSend+0x50>
 8002ad6:	2500      	movs	r5, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ad8:	f001 fe5c 	bl	8004794 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002adc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002ade:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002ae0:	4fa5      	ldr	r7, [pc, #660]	; (8002d78 <xQueueGenericSend+0x2f4>)
 8002ae2:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8002d7c <xQueueGenericSend+0x2f8>
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d374      	bcc.n	8002bd4 <xQueueGenericSend+0x150>
 8002aea:	2e02      	cmp	r6, #2
 8002aec:	d072      	beq.n	8002bd4 <xQueueGenericSend+0x150>
				taskEXIT_CRITICAL();
				return pdPASS;
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002aee:	9b01      	ldr	r3, [sp, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	f000 8135 	beq.w	8002d60 <xQueueGenericSend+0x2dc>
					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
				}
				else if( xEntryTimeSet == pdFALSE )
 8002af6:	b915      	cbnz	r5, 8002afe <xQueueGenericSend+0x7a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002af8:	a802      	add	r0, sp, #8
 8002afa:	f001 fa57 	bl	8003fac <vTaskInternalSetTimeOutState>
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002afe:	f001 fe6b 	bl	80047d8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b02:	f000 ff97 	bl	8003a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b06:	f001 fe45 	bl	8004794 <vPortEnterCritical>
 8002b0a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002b0e:	2bff      	cmp	r3, #255	; 0xff
 8002b10:	bf04      	itt	eq
 8002b12:	2300      	moveq	r3, #0
 8002b14:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8002b18:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002b1c:	2bff      	cmp	r3, #255	; 0xff
 8002b1e:	bf04      	itt	eq
 8002b20:	2300      	moveq	r3, #0
 8002b22:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8002b26:	f001 fe57 	bl	80047d8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b2a:	a901      	add	r1, sp, #4
 8002b2c:	a802      	add	r0, sp, #8
 8002b2e:	f001 fa49 	bl	8003fc4 <xTaskCheckForTimeOut>
 8002b32:	2800      	cmp	r0, #0
 8002b34:	f040 81b4 	bne.w	8002ea0 <xQueueGenericSend+0x41c>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002b38:	f001 fe2c 	bl	8004794 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002b3c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002b3e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d07b      	beq.n	8002c3c <xQueueGenericSend+0x1b8>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002b44:	f001 fe48 	bl	80047d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002b48:	f001 fe24 	bl	8004794 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002b4c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8002b50:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b52:	2d00      	cmp	r5, #0
 8002b54:	dd11      	ble.n	8002b7a <xQueueGenericSend+0xf6>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b58:	b17b      	cbz	r3, 8002b7a <xQueueGenericSend+0xf6>
 8002b5a:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 8002b5e:	e001      	b.n	8002b64 <xQueueGenericSend+0xe0>
 8002b60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b62:	b153      	cbz	r3, 8002b7a <xQueueGenericSend+0xf6>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b64:	4650      	mov	r0, sl
 8002b66:	f001 f9cb 	bl	8003f00 <xTaskRemoveFromEventList>
 8002b6a:	b108      	cbz	r0, 8002b70 <xQueueGenericSend+0xec>
						vTaskMissedYield();
 8002b6c:	f001 fa70 	bl	8004050 <vTaskMissedYield>
 8002b70:	3d01      	subs	r5, #1
 8002b72:	b2eb      	uxtb	r3, r5
 8002b74:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f2      	bne.n	8002b60 <xQueueGenericSend+0xdc>
		pxQueue->cTxLock = queueUNLOCKED;
 8002b7a:	23ff      	movs	r3, #255	; 0xff
 8002b7c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002b80:	f001 fe2a 	bl	80047d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002b84:	f001 fe06 	bl	8004794 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002b88:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8002b8c:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002b8e:	2d00      	cmp	r5, #0
 8002b90:	dd11      	ble.n	8002bb6 <xQueueGenericSend+0x132>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b92:	6923      	ldr	r3, [r4, #16]
 8002b94:	b17b      	cbz	r3, 8002bb6 <xQueueGenericSend+0x132>
 8002b96:	f104 0a10 	add.w	sl, r4, #16
 8002b9a:	e001      	b.n	8002ba0 <xQueueGenericSend+0x11c>
 8002b9c:	6923      	ldr	r3, [r4, #16]
 8002b9e:	b153      	cbz	r3, 8002bb6 <xQueueGenericSend+0x132>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ba0:	4650      	mov	r0, sl
 8002ba2:	f001 f9ad 	bl	8003f00 <xTaskRemoveFromEventList>
 8002ba6:	b108      	cbz	r0, 8002bac <xQueueGenericSend+0x128>
					vTaskMissedYield();
 8002ba8:	f001 fa52 	bl	8004050 <vTaskMissedYield>
 8002bac:	3d01      	subs	r5, #1
 8002bae:	b2eb      	uxtb	r3, r5
 8002bb0:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f2      	bne.n	8002b9c <xQueueGenericSend+0x118>
		pxQueue->cRxLock = queueUNLOCKED;
 8002bb6:	23ff      	movs	r3, #255	; 0xff
 8002bb8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002bbc:	f001 fe0c 	bl	80047d8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 8002bc0:	f001 f80c 	bl	8003bdc <xTaskResumeAll>
		taskENTER_CRITICAL();
 8002bc4:	f001 fde6 	bl	8004794 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002bc8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002bca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	f04f 0501 	mov.w	r5, #1
 8002bd2:	d28a      	bcs.n	8002aea <xQueueGenericSend+0x66>
				traceQUEUE_SEND( pxQueue );
 8002bd4:	f001 ff82 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8002bd8:	f001 ff36 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8002bdc:	883b      	ldrh	r3, [r7, #0]
 8002bde:	4218      	tst	r0, r3
 8002be0:	f040 8136 	bne.w	8002e50 <xQueueGenericSend+0x3cc>
 8002be4:	4d65      	ldr	r5, [pc, #404]	; (8002d7c <xQueueGenericSend+0x2f8>)
 8002be6:	4620      	mov	r0, r4
 8002be8:	f001 ff26 	bl	8004a38 <prvTraceGetQueueType>
 8002bec:	5c2f      	ldrb	r7, [r5, r0]
 8002bee:	4620      	mov	r0, r4
 8002bf0:	f001 ff4c 	bl	8004a8c <prvTraceGetQueueNumberLow16>
 8002bf4:	fa5f f980 	uxtb.w	r9, r0
 8002bf8:	4620      	mov	r0, r4
 8002bfa:	f001 ff1d 	bl	8004a38 <prvTraceGetQueueType>
 8002bfe:	5c2b      	ldrb	r3, [r5, r0]
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	bf1d      	ittte	ne
 8002c04:	6ba2      	ldrne	r2, [r4, #56]	; 0x38
 8002c06:	3201      	addne	r2, #1
 8002c08:	b2d2      	uxtbne	r2, r2
 8002c0a:	2200      	moveq	r2, #0
 8002c0c:	4649      	mov	r1, r9
 8002c0e:	4638      	mov	r0, r7
 8002c10:	f002 faa2 	bl	8005158 <prvTraceSetObjectState>
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c14:	6c22      	ldr	r2, [r4, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002c16:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002c18:	2a00      	cmp	r2, #0
 8002c1a:	f040 80b3 	bne.w	8002d84 <xQueueGenericSend+0x300>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c1e:	6826      	ldr	r6, [r4, #0]
 8002c20:	3501      	adds	r5, #1
 8002c22:	2e00      	cmp	r6, #0
 8002c24:	d07b      	beq.n	8002d1e <xQueueGenericSend+0x29a>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c26:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f040 80c1 	bne.w	8002db2 <xQueueGenericSend+0x32e>
				taskEXIT_CRITICAL();
 8002c30:	f001 fdd2 	bl	80047d8 <vPortExitCritical>
				return pdPASS;
 8002c34:	2001      	movs	r0, #1
}
 8002c36:	b005      	add	sp, #20
 8002c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	taskEXIT_CRITICAL();
 8002c3c:	f001 fdcc 	bl	80047d8 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8002c40:	f001 ff4c 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8002c44:	f001 ff00 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8002c48:	883b      	ldrh	r3, [r7, #0]
 8002c4a:	4218      	tst	r0, r3
 8002c4c:	d14f      	bne.n	8002cee <xQueueGenericSend+0x26a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c4e:	f104 0a10 	add.w	sl, r4, #16
 8002c52:	4650      	mov	r0, sl
 8002c54:	9901      	ldr	r1, [sp, #4]
 8002c56:	f001 f903 	bl	8003e60 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8002c5a:	f001 fd9b 	bl	8004794 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002c5e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8002c62:	fa4f fb83 	sxtb.w	fp, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c66:	f1bb 0f00 	cmp.w	fp, #0
 8002c6a:	dd13      	ble.n	8002c94 <xQueueGenericSend+0x210>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c6c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c6e:	b18a      	cbz	r2, 8002c94 <xQueueGenericSend+0x210>
 8002c70:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8002c74:	e001      	b.n	8002c7a <xQueueGenericSend+0x1f6>
 8002c76:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002c78:	b162      	cbz	r2, 8002c94 <xQueueGenericSend+0x210>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c7a:	4628      	mov	r0, r5
 8002c7c:	f001 f940 	bl	8003f00 <xTaskRemoveFromEventList>
 8002c80:	b108      	cbz	r0, 8002c86 <xQueueGenericSend+0x202>
						vTaskMissedYield();
 8002c82:	f001 f9e5 	bl	8004050 <vTaskMissedYield>
 8002c86:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	fa4f fb83 	sxtb.w	fp, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d1f0      	bne.n	8002c76 <xQueueGenericSend+0x1f2>
		pxQueue->cTxLock = queueUNLOCKED;
 8002c94:	23ff      	movs	r3, #255	; 0xff
 8002c96:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002c9a:	f001 fd9d 	bl	80047d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002c9e:	f001 fd79 	bl	8004794 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002ca2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8002ca6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ca8:	2d00      	cmp	r5, #0
 8002caa:	dc0a      	bgt.n	8002cc2 <xQueueGenericSend+0x23e>
 8002cac:	e00c      	b.n	8002cc8 <xQueueGenericSend+0x244>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cae:	4650      	mov	r0, sl
 8002cb0:	f001 f926 	bl	8003f00 <xTaskRemoveFromEventList>
 8002cb4:	b108      	cbz	r0, 8002cba <xQueueGenericSend+0x236>
					vTaskMissedYield();
 8002cb6:	f001 f9cb 	bl	8004050 <vTaskMissedYield>
 8002cba:	3d01      	subs	r5, #1
 8002cbc:	b2eb      	uxtb	r3, r5
 8002cbe:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002cc0:	b113      	cbz	r3, 8002cc8 <xQueueGenericSend+0x244>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cc2:	6923      	ldr	r3, [r4, #16]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1f2      	bne.n	8002cae <xQueueGenericSend+0x22a>
		pxQueue->cRxLock = queueUNLOCKED;
 8002cc8:	23ff      	movs	r3, #255	; 0xff
 8002cca:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002cce:	f001 fd83 	bl	80047d8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8002cd2:	f000 ff83 	bl	8003bdc <xTaskResumeAll>
 8002cd6:	2800      	cmp	r0, #0
 8002cd8:	f47f af74 	bne.w	8002bc4 <xQueueGenericSend+0x140>
					portYIELD_WITHIN_API();
 8002cdc:	4a28      	ldr	r2, [pc, #160]	; (8002d80 <xQueueGenericSend+0x2fc>)
 8002cde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002ce2:	6013      	str	r3, [r2, #0]
 8002ce4:	f3bf 8f4f 	dsb	sy
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	e76a      	b.n	8002bc4 <xQueueGenericSend+0x140>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8002cee:	4620      	mov	r0, r4
 8002cf0:	f001 fed2 	bl	8004a98 <prvTraceGetQueueNumberHigh16>
 8002cf4:	883b      	ldrh	r3, [r7, #0]
 8002cf6:	4218      	tst	r0, r3
 8002cf8:	d0a9      	beq.n	8002c4e <xQueueGenericSend+0x1ca>
 8002cfa:	2e00      	cmp	r6, #0
 8002cfc:	f000 80c8 	beq.w	8002e90 <xQueueGenericSend+0x40c>
 8002d00:	2575      	movs	r5, #117	; 0x75
 8002d02:	4620      	mov	r0, r4
 8002d04:	f001 fe98 	bl	8004a38 <prvTraceGetQueueType>
 8002d08:	f819 a000 	ldrb.w	sl, [r9, r0]
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	f001 febd 	bl	8004a8c <prvTraceGetQueueNumberLow16>
 8002d12:	4651      	mov	r1, sl
 8002d14:	b2c2      	uxtb	r2, r0
 8002d16:	4628      	mov	r0, r5
 8002d18:	f002 fec0 	bl	8005a9c <prvTraceStoreKernelCall>
 8002d1c:	e797      	b.n	8002c4e <xQueueGenericSend+0x1ca>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002d1e:	6860      	ldr	r0, [r4, #4]
 8002d20:	f001 fa4e 	bl	80041c0 <xTaskPriorityDisinherit>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002d24:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d26:	6a63      	ldr	r3, [r4, #36]	; 0x24
				pxQueue->pxMutexHolder = NULL;
 8002d28:	6066      	str	r6, [r4, #4]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d141      	bne.n	8002db2 <xQueueGenericSend+0x32e>
					else if( xYieldRequired != pdFALSE )
 8002d2e:	2800      	cmp	r0, #0
 8002d30:	d146      	bne.n	8002dc0 <xQueueGenericSend+0x33c>
 8002d32:	e77d      	b.n	8002c30 <xQueueGenericSend+0x1ac>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d34:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002d36:	2a00      	cmp	r2, #0
 8002d38:	f43f aeae 	beq.w	8002a98 <xQueueGenericSend+0x14>
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	e7fe      	b.n	8002d4c <xQueueGenericSend+0x2c8>
 8002d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d52:	f383 8811 	msr	BASEPRI, r3
 8002d56:	f3bf 8f6f 	isb	sy
 8002d5a:	f3bf 8f4f 	dsb	sy
 8002d5e:	e7fe      	b.n	8002d5e <xQueueGenericSend+0x2da>
					taskEXIT_CRITICAL();
 8002d60:	f001 fd3a 	bl	80047d8 <vPortExitCritical>
			traceQUEUE_SEND_FAILED( pxQueue );
 8002d64:	f001 feba 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8002d68:	f001 fe6e 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8002d6c:	883b      	ldrh	r3, [r7, #0]
 8002d6e:	4218      	tst	r0, r3
 8002d70:	d12f      	bne.n	8002dd2 <xQueueGenericSend+0x34e>
			return errQUEUE_FULL;
 8002d72:	2000      	movs	r0, #0
 8002d74:	e75f      	b.n	8002c36 <xQueueGenericSend+0x1b2>
 8002d76:	bf00      	nop
 8002d78:	20000014 	.word	0x20000014
 8002d7c:	2000000c 	.word	0x2000000c
 8002d80:	e000ed04 	.word	0xe000ed04
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002d84:	4641      	mov	r1, r8
	else if( xPosition == queueSEND_TO_BACK )
 8002d86:	2e00      	cmp	r6, #0
 8002d88:	d139      	bne.n	8002dfe <xQueueGenericSend+0x37a>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002d8a:	68a0      	ldr	r0, [r4, #8]
 8002d8c:	f005 f8d0 	bl	8007f30 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d90:	68a3      	ldr	r3, [r4, #8]
 8002d92:	6c21      	ldr	r1, [r4, #64]	; 0x40
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d94:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d96:	440b      	add	r3, r1
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	f105 0501 	add.w	r5, r5, #1
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002d9e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002da0:	f4ff af41 	bcc.w	8002c26 <xQueueGenericSend+0x1a2>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002da4:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002da6:	6a63      	ldr	r3, [r4, #36]	; 0x24
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002da8:	6822      	ldr	r2, [r4, #0]
 8002daa:	60a2      	str	r2, [r4, #8]
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f43f af3f 	beq.w	8002c30 <xQueueGenericSend+0x1ac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002db2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002db6:	f001 f8a3 	bl	8003f00 <xTaskRemoveFromEventList>
 8002dba:	2800      	cmp	r0, #0
 8002dbc:	f43f af38 	beq.w	8002c30 <xQueueGenericSend+0x1ac>
						queueYIELD_IF_USING_PREEMPTION();
 8002dc0:	4b58      	ldr	r3, [pc, #352]	; (8002f24 <xQueueGenericSend+0x4a0>)
 8002dc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dc6:	601a      	str	r2, [r3, #0]
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	f3bf 8f6f 	isb	sy
 8002dd0:	e72e      	b.n	8002c30 <xQueueGenericSend+0x1ac>
			traceQUEUE_SEND_FAILED( pxQueue );
 8002dd2:	4620      	mov	r0, r4
 8002dd4:	f001 fe60 	bl	8004a98 <prvTraceGetQueueNumberHigh16>
 8002dd8:	883b      	ldrh	r3, [r7, #0]
 8002dda:	4218      	tst	r0, r3
 8002ddc:	d0c9      	beq.n	8002d72 <xQueueGenericSend+0x2ee>
 8002dde:	b32e      	cbz	r6, 8002e2c <xQueueGenericSend+0x3a8>
 8002de0:	4d51      	ldr	r5, [pc, #324]	; (8002f28 <xQueueGenericSend+0x4a4>)
 8002de2:	264d      	movs	r6, #77	; 0x4d
 8002de4:	4620      	mov	r0, r4
 8002de6:	f001 fe27 	bl	8004a38 <prvTraceGetQueueType>
 8002dea:	5c2d      	ldrb	r5, [r5, r0]
 8002dec:	4620      	mov	r0, r4
 8002dee:	f001 fe4d 	bl	8004a8c <prvTraceGetQueueNumberLow16>
 8002df2:	4629      	mov	r1, r5
 8002df4:	b2c2      	uxtb	r2, r0
 8002df6:	4630      	mov	r0, r6
 8002df8:	f002 fe50 	bl	8005a9c <prvTraceStoreKernelCall>
 8002dfc:	e7b9      	b.n	8002d72 <xQueueGenericSend+0x2ee>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dfe:	68e0      	ldr	r0, [r4, #12]
 8002e00:	f005 f896 	bl	8007f30 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e04:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e06:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e08:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e0a:	425b      	negs	r3, r3
 8002e0c:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e0e:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e10:	60e2      	str	r2, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e12:	d202      	bcs.n	8002e1a <xQueueGenericSend+0x396>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e14:	6862      	ldr	r2, [r4, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	60e3      	str	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002e1a:	2e02      	cmp	r6, #2
 8002e1c:	d00e      	beq.n	8002e3c <xQueueGenericSend+0x3b8>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e1e:	3501      	adds	r5, #1
 8002e20:	63a5      	str	r5, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f43f af03 	beq.w	8002c30 <xQueueGenericSend+0x1ac>
 8002e2a:	e7c2      	b.n	8002db2 <xQueueGenericSend+0x32e>
			traceQUEUE_SEND_FAILED( pxQueue );
 8002e2c:	4620      	mov	r0, r4
 8002e2e:	f001 fe03 	bl	8004a38 <prvTraceGetQueueType>
 8002e32:	4d3d      	ldr	r5, [pc, #244]	; (8002f28 <xQueueGenericSend+0x4a4>)
 8002e34:	5c2e      	ldrb	r6, [r5, r0]
 8002e36:	3648      	adds	r6, #72	; 0x48
 8002e38:	b2f6      	uxtb	r6, r6
 8002e3a:	e7d3      	b.n	8002de4 <xQueueGenericSend+0x360>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e3c:	2d00      	cmp	r5, #0
 8002e3e:	f47f aef2 	bne.w	8002c26 <xQueueGenericSend+0x1a2>
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	63a3      	str	r3, [r4, #56]	; 0x38
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f43f aef1 	beq.w	8002c30 <xQueueGenericSend+0x1ac>
 8002e4e:	e7b0      	b.n	8002db2 <xQueueGenericSend+0x32e>
				traceQUEUE_SEND( pxQueue );
 8002e50:	4620      	mov	r0, r4
 8002e52:	f001 fe21 	bl	8004a98 <prvTraceGetQueueNumberHigh16>
 8002e56:	883b      	ldrh	r3, [r7, #0]
 8002e58:	4218      	tst	r0, r3
 8002e5a:	f43f aec3 	beq.w	8002be4 <xQueueGenericSend+0x160>
 8002e5e:	b17e      	cbz	r6, 8002e80 <xQueueGenericSend+0x3fc>
 8002e60:	4d31      	ldr	r5, [pc, #196]	; (8002f28 <xQueueGenericSend+0x4a4>)
 8002e62:	2725      	movs	r7, #37	; 0x25
 8002e64:	4620      	mov	r0, r4
 8002e66:	f001 fde7 	bl	8004a38 <prvTraceGetQueueType>
 8002e6a:	f815 9000 	ldrb.w	r9, [r5, r0]
 8002e6e:	4620      	mov	r0, r4
 8002e70:	f001 fe0c 	bl	8004a8c <prvTraceGetQueueNumberLow16>
 8002e74:	4649      	mov	r1, r9
 8002e76:	b2c2      	uxtb	r2, r0
 8002e78:	4638      	mov	r0, r7
 8002e7a:	f002 fe0f 	bl	8005a9c <prvTraceStoreKernelCall>
 8002e7e:	e6b2      	b.n	8002be6 <xQueueGenericSend+0x162>
 8002e80:	4620      	mov	r0, r4
 8002e82:	f001 fdd9 	bl	8004a38 <prvTraceGetQueueType>
 8002e86:	4d28      	ldr	r5, [pc, #160]	; (8002f28 <xQueueGenericSend+0x4a4>)
 8002e88:	5c2f      	ldrb	r7, [r5, r0]
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	b2ff      	uxtb	r7, r7
 8002e8e:	e7e9      	b.n	8002e64 <xQueueGenericSend+0x3e0>
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
 8002e90:	4620      	mov	r0, r4
 8002e92:	f001 fdd1 	bl	8004a38 <prvTraceGetQueueType>
 8002e96:	f819 5000 	ldrb.w	r5, [r9, r0]
 8002e9a:	3570      	adds	r5, #112	; 0x70
 8002e9c:	b2ed      	uxtb	r5, r5
 8002e9e:	e730      	b.n	8002d02 <xQueueGenericSend+0x27e>
	taskENTER_CRITICAL();
 8002ea0:	f001 fc78 	bl	8004794 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002ea4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
 8002ea8:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002eaa:	2d00      	cmp	r5, #0
 8002eac:	dd12      	ble.n	8002ed4 <xQueueGenericSend+0x450>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002eb0:	b183      	cbz	r3, 8002ed4 <xQueueGenericSend+0x450>
 8002eb2:	f104 0824 	add.w	r8, r4, #36	; 0x24
 8002eb6:	e005      	b.n	8002ec4 <xQueueGenericSend+0x440>
 8002eb8:	3d01      	subs	r5, #1
 8002eba:	b2eb      	uxtb	r3, r5
 8002ebc:	b25d      	sxtb	r5, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ebe:	b14b      	cbz	r3, 8002ed4 <xQueueGenericSend+0x450>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002ec2:	b13b      	cbz	r3, 8002ed4 <xQueueGenericSend+0x450>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ec4:	4640      	mov	r0, r8
 8002ec6:	f001 f81b 	bl	8003f00 <xTaskRemoveFromEventList>
 8002eca:	2800      	cmp	r0, #0
 8002ecc:	d0f4      	beq.n	8002eb8 <xQueueGenericSend+0x434>
						vTaskMissedYield();
 8002ece:	f001 f8bf 	bl	8004050 <vTaskMissedYield>
 8002ed2:	e7f1      	b.n	8002eb8 <xQueueGenericSend+0x434>
		pxQueue->cTxLock = queueUNLOCKED;
 8002ed4:	23ff      	movs	r3, #255	; 0xff
 8002ed6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8002eda:	f001 fc7d 	bl	80047d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002ede:	f001 fc59 	bl	8004794 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002ee2:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 8002ee6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ee8:	2d00      	cmp	r5, #0
 8002eea:	dd12      	ble.n	8002f12 <xQueueGenericSend+0x48e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002eec:	6923      	ldr	r3, [r4, #16]
 8002eee:	b183      	cbz	r3, 8002f12 <xQueueGenericSend+0x48e>
 8002ef0:	f104 0810 	add.w	r8, r4, #16
 8002ef4:	e005      	b.n	8002f02 <xQueueGenericSend+0x47e>
 8002ef6:	3d01      	subs	r5, #1
 8002ef8:	b2eb      	uxtb	r3, r5
 8002efa:	b25d      	sxtb	r5, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002efc:	b14b      	cbz	r3, 8002f12 <xQueueGenericSend+0x48e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002efe:	6923      	ldr	r3, [r4, #16]
 8002f00:	b13b      	cbz	r3, 8002f12 <xQueueGenericSend+0x48e>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f02:	4640      	mov	r0, r8
 8002f04:	f000 fffc 	bl	8003f00 <xTaskRemoveFromEventList>
 8002f08:	2800      	cmp	r0, #0
 8002f0a:	d0f4      	beq.n	8002ef6 <xQueueGenericSend+0x472>
					vTaskMissedYield();
 8002f0c:	f001 f8a0 	bl	8004050 <vTaskMissedYield>
 8002f10:	e7f1      	b.n	8002ef6 <xQueueGenericSend+0x472>
		pxQueue->cRxLock = queueUNLOCKED;
 8002f12:	23ff      	movs	r3, #255	; 0xff
 8002f14:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8002f18:	f001 fc5e 	bl	80047d8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 8002f1c:	f000 fe5e 	bl	8003bdc <xTaskResumeAll>
 8002f20:	e720      	b.n	8002d64 <xQueueGenericSend+0x2e0>
 8002f22:	bf00      	nop
 8002f24:	e000ed04 	.word	0xe000ed04
 8002f28:	2000000c 	.word	0x2000000c

08002f2c <xQueueCreateMutexStatic>:
		configASSERT( pxStaticQueue != NULL );
 8002f2c:	b179      	cbz	r1, 8002f4e <xQueueCreateMutexStatic+0x22>
	{
 8002f2e:	b510      	push	{r4, lr}
 8002f30:	b084      	sub	sp, #16
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f32:	2350      	movs	r3, #80	; 0x50
 8002f34:	9303      	str	r3, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f36:	9b03      	ldr	r3, [sp, #12]
 8002f38:	2b50      	cmp	r3, #80	; 0x50
 8002f3a:	d011      	beq.n	8002f60 <xQueueCreateMutexStatic+0x34>
 8002f3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f40:	f383 8811 	msr	BASEPRI, r3
 8002f44:	f3bf 8f6f 	isb	sy
 8002f48:	f3bf 8f4f 	dsb	sy
 8002f4c:	e7fe      	b.n	8002f4c <xQueueCreateMutexStatic+0x20>
 8002f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f52:	f383 8811 	msr	BASEPRI, r3
 8002f56:	f3bf 8f6f 	isb	sy
 8002f5a:	f3bf 8f4f 	dsb	sy
 8002f5e:	e7fe      	b.n	8002f5e <xQueueCreateMutexStatic+0x32>
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f60:	2200      	movs	r2, #0
 8002f62:	460c      	mov	r4, r1
 8002f64:	4603      	mov	r3, r0
 8002f66:	9100      	str	r1, [sp, #0]
 8002f68:	2001      	movs	r0, #1
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	f7ff fd2c 	bl	80029c8 <prvInitialiseNewQueue>
			pxNewQueue->pxMutexHolder = NULL;
 8002f70:	2300      	movs	r3, #0
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002f72:	e9c4 3300 	strd	r3, r3, [r4]
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8002f76:	60e3      	str	r3, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	f7ff fd81 	bl	8002a84 <xQueueGenericSend>
	}
 8002f82:	4620      	mov	r0, r4
 8002f84:	b004      	add	sp, #16
 8002f86:	bd10      	pop	{r4, pc}

08002f88 <xQueueSemaphoreTake>:
{
 8002f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f8c:	b084      	sub	sp, #16
 8002f8e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002f90:	b150      	cbz	r0, 8002fa8 <xQueueSemaphoreTake+0x20>
	configASSERT( pxQueue->uxItemSize == 0 );
 8002f92:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002f94:	b18d      	cbz	r5, 8002fba <xQueueSemaphoreTake+0x32>
 8002f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f9a:	f383 8811 	msr	BASEPRI, r3
 8002f9e:	f3bf 8f6f 	isb	sy
 8002fa2:	f3bf 8f4f 	dsb	sy
 8002fa6:	e7fe      	b.n	8002fa6 <xQueueSemaphoreTake+0x1e>
 8002fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fac:	f383 8811 	msr	BASEPRI, r3
 8002fb0:	f3bf 8f6f 	isb	sy
 8002fb4:	f3bf 8f4f 	dsb	sy
 8002fb8:	e7fe      	b.n	8002fb8 <xQueueSemaphoreTake+0x30>
 8002fba:	4604      	mov	r4, r0
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002fbc:	f001 f85c 	bl	8004078 <xTaskGetSchedulerState>
 8002fc0:	b950      	cbnz	r0, 8002fd8 <xQueueSemaphoreTake+0x50>
 8002fc2:	9d01      	ldr	r5, [sp, #4]
 8002fc4:	b145      	cbz	r5, 8002fd8 <xQueueSemaphoreTake+0x50>
 8002fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fca:	f383 8811 	msr	BASEPRI, r3
 8002fce:	f3bf 8f6f 	isb	sy
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	e7fe      	b.n	8002fd6 <xQueueSemaphoreTake+0x4e>
		taskENTER_CRITICAL();
 8002fd8:	f001 fbdc 	bl	8004794 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002fdc:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8002fde:	4eb1      	ldr	r6, [pc, #708]	; (80032a4 <xQueueSemaphoreTake+0x31c>)
					portYIELD_WITHIN_API();
 8002fe0:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80032ac <xQueueSemaphoreTake+0x324>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 8002fe4:	f8df 82c0 	ldr.w	r8, [pc, #704]	; 80032a8 <xQueueSemaphoreTake+0x320>
 8002fe8:	46aa      	mov	sl, r5
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002fea:	2f00      	cmp	r7, #0
 8002fec:	f040 80b9 	bne.w	8003162 <xQueueSemaphoreTake+0x1da>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ff0:	9b01      	ldr	r3, [sp, #4]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	f000 8197 	beq.w	8003326 <xQueueSemaphoreTake+0x39e>
				else if( xEntryTimeSet == pdFALSE )
 8002ff8:	f1ba 0f00 	cmp.w	sl, #0
 8002ffc:	d102      	bne.n	8003004 <xQueueSemaphoreTake+0x7c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ffe:	a802      	add	r0, sp, #8
 8003000:	f000 ffd4 	bl	8003fac <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003004:	f001 fbe8 	bl	80047d8 <vPortExitCritical>
		vTaskSuspendAll();
 8003008:	f000 fd14 	bl	8003a34 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800300c:	f001 fbc2 	bl	8004794 <vPortEnterCritical>
 8003010:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003014:	2bff      	cmp	r3, #255	; 0xff
 8003016:	bf04      	itt	eq
 8003018:	2300      	moveq	r3, #0
 800301a:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800301e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003022:	2bff      	cmp	r3, #255	; 0xff
 8003024:	bf04      	itt	eq
 8003026:	2300      	moveq	r3, #0
 8003028:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 800302c:	f001 fbd4 	bl	80047d8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003030:	a901      	add	r1, sp, #4
 8003032:	a802      	add	r0, sp, #8
 8003034:	f000 ffc6 	bl	8003fc4 <xTaskCheckForTimeOut>
 8003038:	2800      	cmp	r0, #0
 800303a:	d144      	bne.n	80030c6 <xQueueSemaphoreTake+0x13e>
	taskENTER_CRITICAL();
 800303c:	f001 fbaa 	bl	8004794 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003040:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 80bf 	beq.w	80031c6 <xQueueSemaphoreTake+0x23e>
	taskEXIT_CRITICAL();
 8003048:	f001 fbc6 	bl	80047d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800304c:	f001 fba2 	bl	8004794 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003050:	f894 7045 	ldrb.w	r7, [r4, #69]	; 0x45
 8003054:	b27f      	sxtb	r7, r7
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003056:	2f00      	cmp	r7, #0
 8003058:	dd10      	ble.n	800307c <xQueueSemaphoreTake+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800305a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800305c:	b173      	cbz	r3, 800307c <xQueueSemaphoreTake+0xf4>
 800305e:	f104 0a24 	add.w	sl, r4, #36	; 0x24
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003062:	4650      	mov	r0, sl
 8003064:	f000 ff4c 	bl	8003f00 <xTaskRemoveFromEventList>
 8003068:	2800      	cmp	r0, #0
 800306a:	f040 80a9 	bne.w	80031c0 <xQueueSemaphoreTake+0x238>
 800306e:	3f01      	subs	r7, #1
 8003070:	b2fb      	uxtb	r3, r7
 8003072:	b25f      	sxtb	r7, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003074:	b113      	cbz	r3, 800307c <xQueueSemaphoreTake+0xf4>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003076:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1f2      	bne.n	8003062 <xQueueSemaphoreTake+0xda>
		pxQueue->cTxLock = queueUNLOCKED;
 800307c:	23ff      	movs	r3, #255	; 0xff
 800307e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8003082:	f001 fba9 	bl	80047d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003086:	f001 fb85 	bl	8004794 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800308a:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 800308e:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003090:	2f00      	cmp	r7, #0
 8003092:	dd10      	ble.n	80030b6 <xQueueSemaphoreTake+0x12e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003094:	6923      	ldr	r3, [r4, #16]
 8003096:	b173      	cbz	r3, 80030b6 <xQueueSemaphoreTake+0x12e>
 8003098:	f104 0a10 	add.w	sl, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800309c:	4650      	mov	r0, sl
 800309e:	f000 ff2f 	bl	8003f00 <xTaskRemoveFromEventList>
 80030a2:	2800      	cmp	r0, #0
 80030a4:	f040 8104 	bne.w	80032b0 <xQueueSemaphoreTake+0x328>
 80030a8:	3f01      	subs	r7, #1
 80030aa:	b2fb      	uxtb	r3, r7
 80030ac:	b25f      	sxtb	r7, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030ae:	b113      	cbz	r3, 80030b6 <xQueueSemaphoreTake+0x12e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030b0:	6923      	ldr	r3, [r4, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f2      	bne.n	800309c <xQueueSemaphoreTake+0x114>
		pxQueue->cRxLock = queueUNLOCKED;
 80030b6:	23ff      	movs	r3, #255	; 0xff
 80030b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 80030bc:	f001 fb8c 	bl	80047d8 <vPortExitCritical>
				( void ) xTaskResumeAll();
 80030c0:	f000 fd8c 	bl	8003bdc <xTaskResumeAll>
 80030c4:	e045      	b.n	8003152 <xQueueSemaphoreTake+0x1ca>
	taskENTER_CRITICAL();
 80030c6:	f001 fb65 	bl	8004794 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80030ca:	f894 7045 	ldrb.w	r7, [r4, #69]	; 0x45
 80030ce:	b27f      	sxtb	r7, r7
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030d0:	2f00      	cmp	r7, #0
 80030d2:	dd11      	ble.n	80030f8 <xQueueSemaphoreTake+0x170>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030d6:	b17b      	cbz	r3, 80030f8 <xQueueSemaphoreTake+0x170>
 80030d8:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 80030dc:	e001      	b.n	80030e2 <xQueueSemaphoreTake+0x15a>
 80030de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80030e0:	b153      	cbz	r3, 80030f8 <xQueueSemaphoreTake+0x170>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030e2:	4650      	mov	r0, sl
 80030e4:	f000 ff0c 	bl	8003f00 <xTaskRemoveFromEventList>
 80030e8:	b108      	cbz	r0, 80030ee <xQueueSemaphoreTake+0x166>
						vTaskMissedYield();
 80030ea:	f000 ffb1 	bl	8004050 <vTaskMissedYield>
 80030ee:	3f01      	subs	r7, #1
 80030f0:	b2fb      	uxtb	r3, r7
 80030f2:	b25f      	sxtb	r7, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1f2      	bne.n	80030de <xQueueSemaphoreTake+0x156>
		pxQueue->cTxLock = queueUNLOCKED;
 80030f8:	23ff      	movs	r3, #255	; 0xff
 80030fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 80030fe:	f001 fb6b 	bl	80047d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003102:	f001 fb47 	bl	8004794 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003106:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 800310a:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800310c:	2f00      	cmp	r7, #0
 800310e:	dd11      	ble.n	8003134 <xQueueSemaphoreTake+0x1ac>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003110:	6923      	ldr	r3, [r4, #16]
 8003112:	b17b      	cbz	r3, 8003134 <xQueueSemaphoreTake+0x1ac>
 8003114:	f104 0a10 	add.w	sl, r4, #16
 8003118:	e001      	b.n	800311e <xQueueSemaphoreTake+0x196>
 800311a:	6923      	ldr	r3, [r4, #16]
 800311c:	b153      	cbz	r3, 8003134 <xQueueSemaphoreTake+0x1ac>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800311e:	4650      	mov	r0, sl
 8003120:	f000 feee 	bl	8003f00 <xTaskRemoveFromEventList>
 8003124:	b108      	cbz	r0, 800312a <xQueueSemaphoreTake+0x1a2>
					vTaskMissedYield();
 8003126:	f000 ff93 	bl	8004050 <vTaskMissedYield>
 800312a:	3f01      	subs	r7, #1
 800312c:	b2fb      	uxtb	r3, r7
 800312e:	b25f      	sxtb	r7, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f2      	bne.n	800311a <xQueueSemaphoreTake+0x192>
		pxQueue->cRxLock = queueUNLOCKED;
 8003134:	23ff      	movs	r3, #255	; 0xff
 8003136:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 800313a:	f001 fb4d 	bl	80047d8 <vPortExitCritical>
			( void ) xTaskResumeAll();
 800313e:	f000 fd4d 	bl	8003bdc <xTaskResumeAll>
	taskENTER_CRITICAL();
 8003142:	f001 fb27 	bl	8004794 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003146:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003148:	2b00      	cmp	r3, #0
 800314a:	f000 80dc 	beq.w	8003306 <xQueueSemaphoreTake+0x37e>
	taskEXIT_CRITICAL();
 800314e:	f001 fb43 	bl	80047d8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8003152:	f001 fb1f 	bl	8004794 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003156:	6ba7      	ldr	r7, [r4, #56]	; 0x38
 8003158:	f04f 0a01 	mov.w	sl, #1
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800315c:	2f00      	cmp	r7, #0
 800315e:	f43f af47 	beq.w	8002ff0 <xQueueSemaphoreTake+0x68>
				traceQUEUE_RECEIVE( pxQueue );
 8003162:	f001 fcbb 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8003166:	f001 fc6f 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 800316a:	8833      	ldrh	r3, [r6, #0]
 800316c:	4218      	tst	r0, r3
 800316e:	f040 8135 	bne.w	80033dc <xQueueSemaphoreTake+0x454>
 8003172:	4d4d      	ldr	r5, [pc, #308]	; (80032a8 <xQueueSemaphoreTake+0x320>)
 8003174:	4620      	mov	r0, r4
 8003176:	f001 fc5f 	bl	8004a38 <prvTraceGetQueueType>
 800317a:	5c2e      	ldrb	r6, [r5, r0]
 800317c:	4620      	mov	r0, r4
 800317e:	f001 fc85 	bl	8004a8c <prvTraceGetQueueNumberLow16>
 8003182:	fa5f f880 	uxtb.w	r8, r0
 8003186:	4620      	mov	r0, r4
 8003188:	f001 fc56 	bl	8004a38 <prvTraceGetQueueType>
 800318c:	5c2b      	ldrb	r3, [r5, r0]
 800318e:	2b02      	cmp	r3, #2
 8003190:	f000 80f6 	beq.w	8003380 <xQueueSemaphoreTake+0x3f8>
 8003194:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003196:	3a01      	subs	r2, #1
 8003198:	b2d2      	uxtb	r2, r2
 800319a:	4641      	mov	r1, r8
 800319c:	4630      	mov	r0, r6
 800319e:	f001 ffdb 	bl	8005158 <prvTraceSetObjectState>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031a2:	6823      	ldr	r3, [r4, #0]
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80031a4:	3f01      	subs	r7, #1
 80031a6:	63a7      	str	r7, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031a8:	b913      	cbnz	r3, 80031b0 <xQueueSemaphoreTake+0x228>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 80031aa:	f001 f925 	bl	80043f8 <pvTaskIncrementMutexHeldCount>
 80031ae:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80031b0:	6923      	ldr	r3, [r4, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	f040 812e 	bne.w	8003414 <xQueueSemaphoreTake+0x48c>
				taskEXIT_CRITICAL();
 80031b8:	f001 fb0e 	bl	80047d8 <vPortExitCritical>
				return pdPASS;
 80031bc:	2501      	movs	r5, #1
 80031be:	e0ae      	b.n	800331e <xQueueSemaphoreTake+0x396>
						vTaskMissedYield();
 80031c0:	f000 ff46 	bl	8004050 <vTaskMissedYield>
 80031c4:	e753      	b.n	800306e <xQueueSemaphoreTake+0xe6>
	taskEXIT_CRITICAL();
 80031c6:	f001 fb07 	bl	80047d8 <vPortExitCritical>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80031ca:	f001 fc87 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 80031ce:	f001 fc3b 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 80031d2:	8833      	ldrh	r3, [r6, #0]
 80031d4:	4218      	tst	r0, r3
 80031d6:	d17a      	bne.n	80032ce <xQueueSemaphoreTake+0x346>
 80031d8:	4620      	mov	r0, r4
 80031da:	f001 fc2d 	bl	8004a38 <prvTraceGetQueueType>
 80031de:	f818 3000 	ldrb.w	r3, [r8, r0]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d00d      	beq.n	8003202 <xQueueSemaphoreTake+0x27a>
 80031e6:	f001 fc79 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 80031ea:	f001 fc2d 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 80031ee:	8833      	ldrh	r3, [r6, #0]
 80031f0:	4218      	tst	r0, r3
 80031f2:	d006      	beq.n	8003202 <xQueueSemaphoreTake+0x27a>
 80031f4:	f001 fc72 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 80031f8:	f001 fc20 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 80031fc:	b2c0      	uxtb	r0, r0
 80031fe:	f002 f855 	bl	80052ac <prvTraceSetTaskInstanceFinished>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d059      	beq.n	80032bc <xQueueSemaphoreTake+0x334>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003208:	f104 0a24 	add.w	sl, r4, #36	; 0x24
 800320c:	4650      	mov	r0, sl
 800320e:	9901      	ldr	r1, [sp, #4]
 8003210:	f000 fe26 	bl	8003e60 <vTaskPlaceOnEventList>
	taskENTER_CRITICAL();
 8003214:	f001 fabe 	bl	8004794 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8003218:	f894 7045 	ldrb.w	r7, [r4, #69]	; 0x45
 800321c:	b27f      	sxtb	r7, r7
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800321e:	2f00      	cmp	r7, #0
 8003220:	dc04      	bgt.n	800322c <xQueueSemaphoreTake+0x2a4>
 8003222:	e011      	b.n	8003248 <xQueueSemaphoreTake+0x2c0>
 8003224:	3f01      	subs	r7, #1
 8003226:	b2fb      	uxtb	r3, r7
 8003228:	b25f      	sxtb	r7, r3
 800322a:	b16b      	cbz	r3, 8003248 <xQueueSemaphoreTake+0x2c0>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800322c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800322e:	b15b      	cbz	r3, 8003248 <xQueueSemaphoreTake+0x2c0>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003230:	4650      	mov	r0, sl
 8003232:	f000 fe65 	bl	8003f00 <xTaskRemoveFromEventList>
 8003236:	2800      	cmp	r0, #0
 8003238:	d0f4      	beq.n	8003224 <xQueueSemaphoreTake+0x29c>
 800323a:	3f01      	subs	r7, #1
						vTaskMissedYield();
 800323c:	f000 ff08 	bl	8004050 <vTaskMissedYield>
 8003240:	b2fb      	uxtb	r3, r7
 8003242:	b25f      	sxtb	r7, r3
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f1      	bne.n	800322c <xQueueSemaphoreTake+0x2a4>
		pxQueue->cTxLock = queueUNLOCKED;
 8003248:	23ff      	movs	r3, #255	; 0xff
 800324a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 800324e:	f001 fac3 	bl	80047d8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8003252:	f001 fa9f 	bl	8004794 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8003256:	f894 7044 	ldrb.w	r7, [r4, #68]	; 0x44
 800325a:	b27f      	sxtb	r7, r7
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800325c:	2f00      	cmp	r7, #0
 800325e:	dd0e      	ble.n	800327e <xQueueSemaphoreTake+0x2f6>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003260:	6923      	ldr	r3, [r4, #16]
 8003262:	b163      	cbz	r3, 800327e <xQueueSemaphoreTake+0x2f6>
 8003264:	f104 0a10 	add.w	sl, r4, #16
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003268:	4650      	mov	r0, sl
 800326a:	f000 fe49 	bl	8003f00 <xTaskRemoveFromEventList>
 800326e:	bb10      	cbnz	r0, 80032b6 <xQueueSemaphoreTake+0x32e>
 8003270:	3f01      	subs	r7, #1
 8003272:	b2fb      	uxtb	r3, r7
 8003274:	b25f      	sxtb	r7, r3
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003276:	b113      	cbz	r3, 800327e <xQueueSemaphoreTake+0x2f6>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003278:	6923      	ldr	r3, [r4, #16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f4      	bne.n	8003268 <xQueueSemaphoreTake+0x2e0>
		pxQueue->cRxLock = queueUNLOCKED;
 800327e:	23ff      	movs	r3, #255	; 0xff
 8003280:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();
 8003284:	f001 faa8 	bl	80047d8 <vPortExitCritical>
				if( xTaskResumeAll() == pdFALSE )
 8003288:	f000 fca8 	bl	8003bdc <xTaskResumeAll>
 800328c:	2800      	cmp	r0, #0
 800328e:	f47f af60 	bne.w	8003152 <xQueueSemaphoreTake+0x1ca>
					portYIELD_WITHIN_API();
 8003292:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003296:	f8c9 3000 	str.w	r3, [r9]
 800329a:	f3bf 8f4f 	dsb	sy
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	e756      	b.n	8003152 <xQueueSemaphoreTake+0x1ca>
 80032a4:	20000014 	.word	0x20000014
 80032a8:	2000000c 	.word	0x2000000c
 80032ac:	e000ed04 	.word	0xe000ed04
					vTaskMissedYield();
 80032b0:	f000 fece 	bl	8004050 <vTaskMissedYield>
 80032b4:	e6f8      	b.n	80030a8 <xQueueSemaphoreTake+0x120>
 80032b6:	f000 fecb 	bl	8004050 <vTaskMissedYield>
 80032ba:	e7d9      	b.n	8003270 <xQueueSemaphoreTake+0x2e8>
						taskENTER_CRITICAL();
 80032bc:	f001 fa6a 	bl	8004794 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80032c0:	6860      	ldr	r0, [r4, #4]
 80032c2:	f000 fee9 	bl	8004098 <xTaskPriorityInherit>
 80032c6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80032c8:	f001 fa86 	bl	80047d8 <vPortExitCritical>
 80032cc:	e79c      	b.n	8003208 <xQueueSemaphoreTake+0x280>
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
 80032ce:	4620      	mov	r0, r4
 80032d0:	f001 fbe2 	bl	8004a98 <prvTraceGetQueueNumberHigh16>
 80032d4:	8833      	ldrh	r3, [r6, #0]
 80032d6:	4218      	tst	r0, r3
 80032d8:	f43f af7e 	beq.w	80031d8 <xQueueSemaphoreTake+0x250>
 80032dc:	4620      	mov	r0, r4
 80032de:	f001 fbab 	bl	8004a38 <prvTraceGetQueueType>
 80032e2:	f818 7000 	ldrb.w	r7, [r8, r0]
 80032e6:	4620      	mov	r0, r4
 80032e8:	f001 fba6 	bl	8004a38 <prvTraceGetQueueType>
 80032ec:	f818 a000 	ldrb.w	sl, [r8, r0]
 80032f0:	4620      	mov	r0, r4
 80032f2:	f001 fbcb 	bl	8004a8c <prvTraceGetQueueNumberLow16>
 80032f6:	3768      	adds	r7, #104	; 0x68
 80032f8:	b2ff      	uxtb	r7, r7
 80032fa:	b2c2      	uxtb	r2, r0
 80032fc:	4651      	mov	r1, sl
 80032fe:	4638      	mov	r0, r7
 8003300:	f002 fbcc 	bl	8005a9c <prvTraceStoreKernelCall>
 8003304:	e768      	b.n	80031d8 <xQueueSemaphoreTake+0x250>
	taskEXIT_CRITICAL();
 8003306:	f001 fa67 	bl	80047d8 <vPortExitCritical>
					if( xInheritanceOccurred != pdFALSE )
 800330a:	2d00      	cmp	r5, #0
 800330c:	d158      	bne.n	80033c0 <xQueueSemaphoreTake+0x438>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800330e:	f001 fbe5 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8003312:	f001 fb99 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8003316:	8833      	ldrh	r3, [r6, #0]
 8003318:	4218      	tst	r0, r3
 800331a:	d137      	bne.n	800338c <xQueueSemaphoreTake+0x404>
				return errQUEUE_EMPTY;
 800331c:	2500      	movs	r5, #0
}
 800331e:	4628      	mov	r0, r5
 8003320:	b004      	add	sp, #16
 8003322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003326:	b145      	cbz	r5, 800333a <xQueueSemaphoreTake+0x3b2>
 8003328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800332c:	f383 8811 	msr	BASEPRI, r3
 8003330:	f3bf 8f6f 	isb	sy
 8003334:	f3bf 8f4f 	dsb	sy
 8003338:	e7fe      	b.n	8003338 <xQueueSemaphoreTake+0x3b0>
					taskEXIT_CRITICAL();
 800333a:	f001 fa4d 	bl	80047d8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
 800333e:	f001 fbcd 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8003342:	f001 fb81 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8003346:	8833      	ldrh	r3, [r6, #0]
 8003348:	4218      	tst	r0, r3
 800334a:	d0e7      	beq.n	800331c <xQueueSemaphoreTake+0x394>
 800334c:	4620      	mov	r0, r4
 800334e:	f001 fba3 	bl	8004a98 <prvTraceGetQueueNumberHigh16>
 8003352:	8833      	ldrh	r3, [r6, #0]
 8003354:	4218      	tst	r0, r3
 8003356:	d0e1      	beq.n	800331c <xQueueSemaphoreTake+0x394>
 8003358:	4620      	mov	r0, r4
 800335a:	f001 fb6d 	bl	8004a38 <prvTraceGetQueueType>
 800335e:	4f35      	ldr	r7, [pc, #212]	; (8003434 <xQueueSemaphoreTake+0x4ac>)
 8003360:	5c3e      	ldrb	r6, [r7, r0]
 8003362:	4620      	mov	r0, r4
 8003364:	f001 fb68 	bl	8004a38 <prvTraceGetQueueType>
 8003368:	5c3f      	ldrb	r7, [r7, r0]
 800336a:	4620      	mov	r0, r4
 800336c:	f001 fb8e 	bl	8004a8c <prvTraceGetQueueNumberLow16>
 8003370:	3650      	adds	r6, #80	; 0x50
 8003372:	b2f6      	uxtb	r6, r6
 8003374:	b2c2      	uxtb	r2, r0
 8003376:	4639      	mov	r1, r7
 8003378:	4630      	mov	r0, r6
 800337a:	f002 fb8f 	bl	8005a9c <prvTraceStoreKernelCall>
 800337e:	e7ce      	b.n	800331e <xQueueSemaphoreTake+0x396>
				traceQUEUE_RECEIVE( pxQueue );
 8003380:	f001 fbac 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8003384:	f001 fb5a 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8003388:	b2c2      	uxtb	r2, r0
 800338a:	e706      	b.n	800319a <xQueueSemaphoreTake+0x212>
				traceQUEUE_RECEIVE_FAILED( pxQueue );
 800338c:	4620      	mov	r0, r4
 800338e:	f001 fb83 	bl	8004a98 <prvTraceGetQueueNumberHigh16>
 8003392:	8833      	ldrh	r3, [r6, #0]
 8003394:	4218      	tst	r0, r3
 8003396:	d0c1      	beq.n	800331c <xQueueSemaphoreTake+0x394>
 8003398:	4620      	mov	r0, r4
 800339a:	f001 fb4d 	bl	8004a38 <prvTraceGetQueueType>
 800339e:	4e25      	ldr	r6, [pc, #148]	; (8003434 <xQueueSemaphoreTake+0x4ac>)
 80033a0:	5c35      	ldrb	r5, [r6, r0]
 80033a2:	4620      	mov	r0, r4
 80033a4:	f001 fb48 	bl	8004a38 <prvTraceGetQueueType>
 80033a8:	5c36      	ldrb	r6, [r6, r0]
 80033aa:	4620      	mov	r0, r4
 80033ac:	f001 fb6e 	bl	8004a8c <prvTraceGetQueueNumberLow16>
 80033b0:	3550      	adds	r5, #80	; 0x50
 80033b2:	b2ed      	uxtb	r5, r5
 80033b4:	b2c2      	uxtb	r2, r0
 80033b6:	4631      	mov	r1, r6
 80033b8:	4628      	mov	r0, r5
 80033ba:	f002 fb6f 	bl	8005a9c <prvTraceStoreKernelCall>
 80033be:	e7ad      	b.n	800331c <xQueueSemaphoreTake+0x394>
						taskENTER_CRITICAL();
 80033c0:	f001 f9e8 	bl	8004794 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80033c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80033c6:	b119      	cbz	r1, 80033d0 <xQueueSemaphoreTake+0x448>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80033c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80033ca:	6819      	ldr	r1, [r3, #0]
 80033cc:	f1c1 0107 	rsb	r1, r1, #7
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80033d0:	6860      	ldr	r0, [r4, #4]
 80033d2:	f000 ff83 	bl	80042dc <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 80033d6:	f001 f9ff 	bl	80047d8 <vPortExitCritical>
 80033da:	e798      	b.n	800330e <xQueueSemaphoreTake+0x386>
				traceQUEUE_RECEIVE( pxQueue );
 80033dc:	4620      	mov	r0, r4
 80033de:	f001 fb5b 	bl	8004a98 <prvTraceGetQueueNumberHigh16>
 80033e2:	8833      	ldrh	r3, [r6, #0]
 80033e4:	4218      	tst	r0, r3
 80033e6:	f43f aec4 	beq.w	8003172 <xQueueSemaphoreTake+0x1ea>
 80033ea:	4620      	mov	r0, r4
 80033ec:	f001 fb24 	bl	8004a38 <prvTraceGetQueueType>
 80033f0:	4d10      	ldr	r5, [pc, #64]	; (8003434 <xQueueSemaphoreTake+0x4ac>)
 80033f2:	5c2e      	ldrb	r6, [r5, r0]
 80033f4:	4620      	mov	r0, r4
 80033f6:	f001 fb1f 	bl	8004a38 <prvTraceGetQueueType>
 80033fa:	f815 8000 	ldrb.w	r8, [r5, r0]
 80033fe:	4620      	mov	r0, r4
 8003400:	f001 fb44 	bl	8004a8c <prvTraceGetQueueNumberLow16>
 8003404:	3628      	adds	r6, #40	; 0x28
 8003406:	b2f6      	uxtb	r6, r6
 8003408:	b2c2      	uxtb	r2, r0
 800340a:	4641      	mov	r1, r8
 800340c:	4630      	mov	r0, r6
 800340e:	f002 fb45 	bl	8005a9c <prvTraceStoreKernelCall>
 8003412:	e6af      	b.n	8003174 <xQueueSemaphoreTake+0x1ec>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003414:	f104 0010 	add.w	r0, r4, #16
 8003418:	f000 fd72 	bl	8003f00 <xTaskRemoveFromEventList>
 800341c:	2800      	cmp	r0, #0
 800341e:	f43f aecb 	beq.w	80031b8 <xQueueSemaphoreTake+0x230>
						queueYIELD_IF_USING_PREEMPTION();
 8003422:	4b05      	ldr	r3, [pc, #20]	; (8003438 <xQueueSemaphoreTake+0x4b0>)
 8003424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003428:	601a      	str	r2, [r3, #0]
 800342a:	f3bf 8f4f 	dsb	sy
 800342e:	f3bf 8f6f 	isb	sy
 8003432:	e6c1      	b.n	80031b8 <xQueueSemaphoreTake+0x230>
 8003434:	2000000c 	.word	0x2000000c
 8003438:	e000ed04 	.word	0xe000ed04

0800343c <uxQueueGetQueueNumber>:
	}
 800343c:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800343e:	4770      	bx	lr

08003440 <vQueueSetQueueNumber>:
		( ( Queue_t * ) xQueue )->uxQueueNumber = uxQueueNumber;
 8003440:	6481      	str	r1, [r0, #72]	; 0x48
	}
 8003442:	4770      	bx	lr

08003444 <ucQueueGetQueueType>:
	}
 8003444:	f890 004c 	ldrb.w	r0, [r0, #76]	; 0x4c
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop

0800344c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800344c:	b580      	push	{r7, lr}
 800344e:	4c12      	ldr	r4, [pc, #72]	; (8003498 <prvIdleTask+0x4c>)
 8003450:	4e12      	ldr	r6, [pc, #72]	; (800349c <prvIdleTask+0x50>)
 8003452:	4d13      	ldr	r5, [pc, #76]	; (80034a0 <prvIdleTask+0x54>)
 8003454:	4f13      	ldr	r7, [pc, #76]	; (80034a4 <prvIdleTask+0x58>)
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8003456:	f8df 9050 	ldr.w	r9, [pc, #80]	; 80034a8 <prvIdleTask+0x5c>
 800345a:	f04f 5880 	mov.w	r8, #268435456	; 0x10000000
 800345e:	e00e      	b.n	800347e <prvIdleTask+0x32>

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
		{
			taskENTER_CRITICAL();
 8003460:	f001 f998 	bl	8004794 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003464:	68f3      	ldr	r3, [r6, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003466:	68d8      	ldr	r0, [r3, #12]
 8003468:	3004      	adds	r0, #4
 800346a:	f7ff fa57 	bl	800291c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800346e:	682b      	ldr	r3, [r5, #0]
 8003470:	3b01      	subs	r3, #1
 8003472:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	3b01      	subs	r3, #1
 8003478:	6023      	str	r3, [r4, #0]
			}
			taskEXIT_CRITICAL();
 800347a:	f001 f9ad 	bl	80047d8 <vPortExitCritical>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800347e:	6823      	ldr	r3, [r4, #0]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1ed      	bne.n	8003460 <prvIdleTask+0x14>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d9f9      	bls.n	800347e <prvIdleTask+0x32>
				taskYIELD();
 800348a:	f8c9 8000 	str.w	r8, [r9]
 800348e:	f3bf 8f4f 	dsb	sy
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	e7f2      	b.n	800347e <prvIdleTask+0x32>
 8003498:	20000b00 	.word	0x20000b00
 800349c:	20000b70 	.word	0x20000b70
 80034a0:	20000afc 	.word	0x20000afc
 80034a4:	20000a6c 	.word	0x20000a6c
 80034a8:	e000ed04 	.word	0xe000ed04

080034ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80034ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034ae:	4b1b      	ldr	r3, [pc, #108]	; (800351c <prvAddCurrentTaskToDelayedList+0x70>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034b0:	4e1b      	ldr	r6, [pc, #108]	; (8003520 <prvAddCurrentTaskToDelayedList+0x74>)
const TickType_t xConstTickCount = xTickCount;
 80034b2:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034b4:	6833      	ldr	r3, [r6, #0]
{
 80034b6:	4605      	mov	r5, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034b8:	1d18      	adds	r0, r3, #4
{
 80034ba:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034bc:	f7ff fa2e 	bl	800291c <uxListRemove>
 80034c0:	b940      	cbnz	r0, 80034d4 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80034c2:	6833      	ldr	r3, [r6, #0]
 80034c4:	4917      	ldr	r1, [pc, #92]	; (8003524 <prvAddCurrentTaskToDelayedList+0x78>)
 80034c6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80034c8:	680b      	ldr	r3, [r1, #0]
 80034ca:	2201      	movs	r2, #1
 80034cc:	4082      	lsls	r2, r0
 80034ce:	ea23 0302 	bic.w	r3, r3, r2
 80034d2:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034d4:	1c6b      	adds	r3, r5, #1
 80034d6:	d017      	beq.n	8003508 <prvAddCurrentTaskToDelayedList+0x5c>
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034d8:	6833      	ldr	r3, [r6, #0]
 80034da:	1964      	adds	r4, r4, r5
 80034dc:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
 80034de:	d20b      	bcs.n	80034f8 <prvAddCurrentTaskToDelayedList+0x4c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034e0:	4b11      	ldr	r3, [pc, #68]	; (8003528 <prvAddCurrentTaskToDelayedList+0x7c>)
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	6831      	ldr	r1, [r6, #0]
 80034e6:	3104      	adds	r1, #4
 80034e8:	f7ff f9fe 	bl	80028e8 <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <prvAddCurrentTaskToDelayedList+0x80>)
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	42a2      	cmp	r2, r4
				{
					xNextTaskUnblockTime = xTimeToWake;
 80034f2:	bf88      	it	hi
 80034f4:	601c      	strhi	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034f8:	4b0d      	ldr	r3, [pc, #52]	; (8003530 <prvAddCurrentTaskToDelayedList+0x84>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	6831      	ldr	r1, [r6, #0]
}
 80034fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003502:	3104      	adds	r1, #4
 8003504:	f7ff b9f0 	b.w	80028e8 <vListInsert>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003508:	2f00      	cmp	r7, #0
 800350a:	d0e5      	beq.n	80034d8 <prvAddCurrentTaskToDelayedList+0x2c>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800350c:	6831      	ldr	r1, [r6, #0]
 800350e:	4809      	ldr	r0, [pc, #36]	; (8003534 <prvAddCurrentTaskToDelayedList+0x88>)
 8003510:	3104      	adds	r1, #4
}
 8003512:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003516:	f7ff b9d7 	b.w	80028c8 <vListInsertEnd>
 800351a:	bf00      	nop
 800351c:	20000b84 	.word	0x20000b84
 8003520:	20000a60 	.word	0x20000a60
 8003524:	20000b10 	.word	0x20000b10
 8003528:	20000a64 	.word	0x20000a64
 800352c:	20000b3c 	.word	0x20000b3c
 8003530:	20000a68 	.word	0x20000a68
 8003534:	20000b5c 	.word	0x20000b5c

08003538 <xTaskCreateStatic.part.5>:
	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 8003538:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800353c:	e9dd 740b 	ldrd	r7, r4, [sp, #44]	; 0x2c
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003540:	ea4f 0a82 	mov.w	sl, r2, lsl #2
	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 8003544:	4688      	mov	r8, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003546:	4652      	mov	r2, sl
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003548:	6327      	str	r7, [r4, #48]	; 0x30
	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 800354a:	4606      	mov	r6, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800354c:	21a5      	movs	r1, #165	; 0xa5
 800354e:	4638      	mov	r0, r7
	TaskHandle_t xTaskCreateStatic(	TaskFunction_t pxTaskCode,
 8003550:	4699      	mov	r9, r3
 8003552:	9d0a      	ldr	r5, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003554:	f004 fcf7 	bl	8007f46 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003558:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800355a:	f1aa 0a04 	sub.w	sl, sl, #4
 800355e:	449a      	add	sl, r3
 8003560:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003564:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003568:	f02a 0a07 	bic.w	sl, sl, #7
 800356c:	4617      	mov	r7, r2
 800356e:	f108 080f 	add.w	r8, r8, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003572:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8003576:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 800357a:	7819      	ldrb	r1, [r3, #0]
 800357c:	b109      	cbz	r1, 8003582 <xTaskCreateStatic.part.5+0x4a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800357e:	4543      	cmp	r3, r8
 8003580:	d1f7      	bne.n	8003572 <xTaskCreateStatic.part.5+0x3a>
 8003582:	2d06      	cmp	r5, #6
 8003584:	bf28      	it	cs
 8003586:	2506      	movcs	r5, #6
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003588:	f04f 0b00 	mov.w	fp, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800358c:	f104 0804 	add.w	r8, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8003590:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 8003592:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003594:	4640      	mov	r0, r8
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003596:	f884 b043 	strb.w	fp, [r4, #67]	; 0x43
		pxNewTCB->uxMutexesHeld = 0;
 800359a:	f8c4 b050 	str.w	fp, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800359e:	f7ff f98f 	bl	80028c0 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035a2:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80035a6:	f104 0018 	add.w	r0, r4, #24
 80035aa:	f7ff f989 	bl	80028c0 <vListInitialiseItem>
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035ae:	464a      	mov	r2, r9
 80035b0:	4631      	mov	r1, r6
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80035b2:	61a5      	str	r5, [r4, #24]
		pxNewTCB->ulNotifiedValue = 0;
 80035b4:	f8c4 b058 	str.w	fp, [r4, #88]	; 0x58
		pxNewTCB->ulRunTimeCounter = 0UL;
 80035b8:	f8c4 b054 	str.w	fp, [r4, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80035bc:	f884 b05c 	strb.w	fp, [r4, #92]	; 0x5c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80035c0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80035c2:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035c4:	4650      	mov	r0, sl
 80035c6:	f001 f8bb 	bl	8004740 <pxPortInitialiseStack>
 80035ca:	6020      	str	r0, [r4, #0]
	taskENTER_CRITICAL();
 80035cc:	f001 f8e2 	bl	8004794 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 80035d0:	4b4e      	ldr	r3, [pc, #312]	; (800370c <xTaskCreateStatic.part.5+0x1d4>)
		if( pxCurrentTCB == NULL )
 80035d2:	4d4f      	ldr	r5, [pc, #316]	; (8003710 <xTaskCreateStatic.part.5+0x1d8>)
		uxCurrentNumberOfTasks++;
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	f8df 916c 	ldr.w	r9, [pc, #364]	; 8003744 <xTaskCreateStatic.part.5+0x20c>
 80035da:	3201      	adds	r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80035de:	682e      	ldr	r6, [r5, #0]
 80035e0:	bb26      	cbnz	r6, 800362c <xTaskCreateStatic.part.5+0xf4>
			pxCurrentTCB = pxNewTCB;
 80035e2:	602c      	str	r4, [r5, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d129      	bne.n	800363e <xTaskCreateStatic.part.5+0x106>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035ea:	f04f 0a14 	mov.w	sl, #20
 80035ee:	fb0a 9006 	mla	r0, sl, r6, r9
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035f2:	3601      	adds	r6, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80035f4:	f7ff f958 	bl	80028a8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80035f8:	2e07      	cmp	r6, #7
 80035fa:	d1f8      	bne.n	80035ee <xTaskCreateStatic.part.5+0xb6>
	vListInitialise( &xDelayedTaskList1 );
 80035fc:	f8df a148 	ldr.w	sl, [pc, #328]	; 8003748 <xTaskCreateStatic.part.5+0x210>
	vListInitialise( &xDelayedTaskList2 );
 8003600:	4e44      	ldr	r6, [pc, #272]	; (8003714 <xTaskCreateStatic.part.5+0x1dc>)
	vListInitialise( &xDelayedTaskList1 );
 8003602:	4650      	mov	r0, sl
 8003604:	f7ff f950 	bl	80028a8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003608:	4630      	mov	r0, r6
 800360a:	f7ff f94d 	bl	80028a8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800360e:	4842      	ldr	r0, [pc, #264]	; (8003718 <xTaskCreateStatic.part.5+0x1e0>)
 8003610:	f7ff f94a 	bl	80028a8 <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
 8003614:	4841      	ldr	r0, [pc, #260]	; (800371c <xTaskCreateStatic.part.5+0x1e4>)
 8003616:	f7ff f947 	bl	80028a8 <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
 800361a:	4841      	ldr	r0, [pc, #260]	; (8003720 <xTaskCreateStatic.part.5+0x1e8>)
 800361c:	f7ff f944 	bl	80028a8 <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
 8003620:	4a40      	ldr	r2, [pc, #256]	; (8003724 <xTaskCreateStatic.part.5+0x1ec>)
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003622:	4b41      	ldr	r3, [pc, #260]	; (8003728 <xTaskCreateStatic.part.5+0x1f0>)
	pxDelayedTaskList = &xDelayedTaskList1;
 8003624:	f8c2 a000 	str.w	sl, [r2]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003628:	601e      	str	r6, [r3, #0]
 800362a:	e008      	b.n	800363e <xTaskCreateStatic.part.5+0x106>
			if( xSchedulerRunning == pdFALSE )
 800362c:	4b3f      	ldr	r3, [pc, #252]	; (800372c <xTaskCreateStatic.part.5+0x1f4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	b92b      	cbnz	r3, 800363e <xTaskCreateStatic.part.5+0x106>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003632:	682a      	ldr	r2, [r5, #0]
 8003634:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003636:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003638:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800363a:	bf98      	it	ls
 800363c:	602c      	strls	r4, [r5, #0]
		uxTaskNumber++;
 800363e:	4a3c      	ldr	r2, [pc, #240]	; (8003730 <xTaskCreateStatic.part.5+0x1f8>)
		traceTASK_CREATE( pxNewTCB );
 8003640:	4e3c      	ldr	r6, [pc, #240]	; (8003734 <xTaskCreateStatic.part.5+0x1fc>)
		uxTaskNumber++;
 8003642:	6813      	ldr	r3, [r2, #0]
 8003644:	3301      	adds	r3, #1
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003646:	6463      	str	r3, [r4, #68]	; 0x44
		traceTASK_CREATE( pxNewTCB );
 8003648:	2003      	movs	r0, #3
		uxTaskNumber++;
 800364a:	6013      	str	r3, [r2, #0]
		traceTASK_CREATE( pxNewTCB );
 800364c:	f001 ff10 	bl	8005470 <prvTraceGetObjectHandle>
 8003650:	b281      	uxth	r1, r0
 8003652:	4620      	mov	r0, r4
 8003654:	f001 f9fe 	bl	8004a54 <prvTraceSetTaskNumberLow16>
 8003658:	4b37      	ldr	r3, [pc, #220]	; (8003738 <xTaskCreateStatic.part.5+0x200>)
 800365a:	4620      	mov	r0, r4
 800365c:	8819      	ldrh	r1, [r3, #0]
 800365e:	f001 fa07 	bl	8004a70 <prvTraceSetTaskNumberHigh16>
 8003662:	4620      	mov	r0, r4
 8003664:	f001 f9ea 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8003668:	463a      	mov	r2, r7
 800366a:	b2c1      	uxtb	r1, r0
 800366c:	2003      	movs	r0, #3
 800366e:	f002 f839 	bl	80056e4 <prvTraceSetObjectName>
 8003672:	4620      	mov	r0, r4
 8003674:	f001 f9e2 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8003678:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 800367c:	b2c1      	uxtb	r1, r0
 800367e:	2003      	movs	r0, #3
 8003680:	f001 fc18 	bl	8004eb4 <prvTraceSetPriorityProperty>
 8003684:	f001 fa2a 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8003688:	f001 f9de 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 800368c:	8833      	ldrh	r3, [r6, #0]
 800368e:	4218      	tst	r0, r3
 8003690:	d00d      	beq.n	80036ae <xTaskCreateStatic.part.5+0x176>
 8003692:	4620      	mov	r0, r4
 8003694:	f001 f9d8 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8003698:	8833      	ldrh	r3, [r6, #0]
 800369a:	4218      	tst	r0, r3
 800369c:	d007      	beq.n	80036ae <xTaskCreateStatic.part.5+0x176>
 800369e:	4620      	mov	r0, r4
 80036a0:	f001 f9cc 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 80036a4:	2103      	movs	r1, #3
 80036a6:	b2c2      	uxtb	r2, r0
 80036a8:	201b      	movs	r0, #27
 80036aa:	f002 f9f7 	bl	8005a9c <prvTraceStoreKernelCall>
		prvAddTaskToReadyList( pxNewTCB );
 80036ae:	4620      	mov	r0, r4
 80036b0:	f001 f9ca 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 80036b4:	8833      	ldrh	r3, [r6, #0]
 80036b6:	4218      	tst	r0, r3
 80036b8:	d005      	beq.n	80036c6 <xTaskCreateStatic.part.5+0x18e>
 80036ba:	4620      	mov	r0, r4
 80036bc:	f001 f9be 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 80036c0:	b2c0      	uxtb	r0, r0
 80036c2:	f003 f859 	bl	8006778 <prvTraceStoreTaskReady>
 80036c6:	4a1d      	ldr	r2, [pc, #116]	; (800373c <xTaskCreateStatic.part.5+0x204>)
 80036c8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80036ca:	6817      	ldr	r7, [r2, #0]
 80036cc:	2301      	movs	r3, #1
 80036ce:	4083      	lsls	r3, r0
 80036d0:	2614      	movs	r6, #20
 80036d2:	433b      	orrs	r3, r7
 80036d4:	4641      	mov	r1, r8
 80036d6:	fb06 9000 	mla	r0, r6, r0, r9
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	f7ff f8f4 	bl	80028c8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80036e0:	f001 f87a 	bl	80047d8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <xTaskCreateStatic.part.5+0x1f4>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	b163      	cbz	r3, 8003704 <xTaskCreateStatic.part.5+0x1cc>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80036ea:	682a      	ldr	r2, [r5, #0]
 80036ec:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80036ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d207      	bcs.n	8003704 <xTaskCreateStatic.part.5+0x1cc>
			taskYIELD_IF_USING_PREEMPTION();
 80036f4:	4b12      	ldr	r3, [pc, #72]	; (8003740 <xTaskCreateStatic.part.5+0x208>)
 80036f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036fa:	601a      	str	r2, [r3, #0]
 80036fc:	f3bf 8f4f 	dsb	sy
 8003700:	f3bf 8f6f 	isb	sy
	}
 8003704:	4620      	mov	r0, r4
 8003706:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800370a:	bf00      	nop
 800370c:	20000afc 	.word	0x20000afc
 8003710:	20000a60 	.word	0x20000a60
 8003714:	20000b28 	.word	0x20000b28
 8003718:	20000b44 	.word	0x20000b44
 800371c:	20000b70 	.word	0x20000b70
 8003720:	20000b5c 	.word	0x20000b5c
 8003724:	20000a64 	.word	0x20000a64
 8003728:	20000a68 	.word	0x20000a68
 800372c:	20000b58 	.word	0x20000b58
 8003730:	20000b0c 	.word	0x20000b0c
 8003734:	20000014 	.word	0x20000014
 8003738:	20000012 	.word	0x20000012
 800373c:	20000b10 	.word	0x20000b10
 8003740:	e000ed04 	.word	0xe000ed04
 8003744:	20000a6c 	.word	0x20000a6c
 8003748:	20000b14 	.word	0x20000b14

0800374c <xTaskCreateStatic>:
	{
 800374c:	b430      	push	{r4, r5}
 800374e:	b082      	sub	sp, #8
 8003750:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
		configASSERT( puxStackBuffer != NULL );
 8003754:	b1bd      	cbz	r5, 8003786 <xTaskCreateStatic+0x3a>
		configASSERT( pxTaskBuffer != NULL );
 8003756:	b16c      	cbz	r4, 8003774 <xTaskCreateStatic+0x28>
			volatile size_t xSize = sizeof( StaticTask_t );
 8003758:	2460      	movs	r4, #96	; 0x60
 800375a:	9401      	str	r4, [sp, #4]
			configASSERT( xSize == sizeof( TCB_t ) );
 800375c:	9c01      	ldr	r4, [sp, #4]
 800375e:	2c60      	cmp	r4, #96	; 0x60
 8003760:	d01a      	beq.n	8003798 <xTaskCreateStatic+0x4c>
 8003762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003766:	f383 8811 	msr	BASEPRI, r3
 800376a:	f3bf 8f6f 	isb	sy
 800376e:	f3bf 8f4f 	dsb	sy
 8003772:	e7fe      	b.n	8003772 <xTaskCreateStatic+0x26>
 8003774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	e7fe      	b.n	8003784 <xTaskCreateStatic+0x38>
 8003786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800378a:	f383 8811 	msr	BASEPRI, r3
 800378e:	f3bf 8f6f 	isb	sy
 8003792:	f3bf 8f4f 	dsb	sy
 8003796:	e7fe      	b.n	8003796 <xTaskCreateStatic+0x4a>
	}
 8003798:	b002      	add	sp, #8
 800379a:	bc30      	pop	{r4, r5}
 800379c:	f7ff becc 	b.w	8003538 <xTaskCreateStatic.part.5>

080037a0 <vTaskSuspend>:
	{
 80037a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037a2:	4604      	mov	r4, r0
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80037a4:	4d69      	ldr	r5, [pc, #420]	; (800394c <vTaskSuspend+0x1ac>)
		taskENTER_CRITICAL();
 80037a6:	f000 fff5 	bl	8004794 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80037aa:	2c00      	cmp	r4, #0
 80037ac:	d067      	beq.n	800387e <vTaskSuspend+0xde>
			traceTASK_SUSPEND( pxTCB );
 80037ae:	f001 f995 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 80037b2:	4e67      	ldr	r6, [pc, #412]	; (8003950 <vTaskSuspend+0x1b0>)
 80037b4:	f001 f948 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 80037b8:	8833      	ldrh	r3, [r6, #0]
 80037ba:	4218      	tst	r0, r3
 80037bc:	d143      	bne.n	8003846 <vTaskSuspend+0xa6>
 80037be:	4620      	mov	r0, r4
 80037c0:	f001 f93c 	bl	8004a3c <prvTraceGetTaskNumberLow16>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037c4:	1d27      	adds	r7, r4, #4
			traceTASK_SUSPEND( pxTCB );
 80037c6:	b2c0      	uxtb	r0, r0
 80037c8:	f001 fd70 	bl	80052ac <prvTraceSetTaskInstanceFinished>
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037cc:	4638      	mov	r0, r7
 80037ce:	f7ff f8a5 	bl	800291c <uxListRemove>
 80037d2:	b930      	cbnz	r0, 80037e2 <vTaskSuspend+0x42>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80037d4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80037d6:	4a5f      	ldr	r2, [pc, #380]	; (8003954 <vTaskSuspend+0x1b4>)
 80037d8:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	58d3      	ldr	r3, [r2, r3]
 80037e0:	b34b      	cbz	r3, 8003836 <vTaskSuspend+0x96>
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80037e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80037e4:	b11b      	cbz	r3, 80037ee <vTaskSuspend+0x4e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80037e6:	f104 0018 	add.w	r0, r4, #24
 80037ea:	f7ff f897 	bl	800291c <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80037ee:	4639      	mov	r1, r7
 80037f0:	4859      	ldr	r0, [pc, #356]	; (8003958 <vTaskSuspend+0x1b8>)
		if( xSchedulerRunning != pdFALSE )
 80037f2:	4f5a      	ldr	r7, [pc, #360]	; (800395c <vTaskSuspend+0x1bc>)
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80037f4:	f7ff f868 	bl	80028c8 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80037f8:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 80037fc:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037fe:	bf04      	itt	eq
 8003800:	2300      	moveq	r3, #0
 8003802:	f884 305c 	strbeq.w	r3, [r4, #92]	; 0x5c
		taskEXIT_CRITICAL();
 8003806:	f000 ffe7 	bl	80047d8 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	bb53      	cbnz	r3, 8003864 <vTaskSuspend+0xc4>
		if( pxTCB == pxCurrentTCB )
 800380e:	682b      	ldr	r3, [r5, #0]
 8003810:	42a3      	cmp	r3, r4
 8003812:	d000      	beq.n	8003816 <vTaskSuspend+0x76>
	}
 8003814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if( xSchedulerRunning != pdFALSE )
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d032      	beq.n	8003882 <vTaskSuspend+0xe2>
				configASSERT( uxSchedulerSuspended == 0 );
 800381c:	4b50      	ldr	r3, [pc, #320]	; (8003960 <vTaskSuspend+0x1c0>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d03d      	beq.n	80038a0 <vTaskSuspend+0x100>
 8003824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003828:	f383 8811 	msr	BASEPRI, r3
 800382c:	f3bf 8f6f 	isb	sy
 8003830:	f3bf 8f4f 	dsb	sy
 8003834:	e7fe      	b.n	8003834 <vTaskSuspend+0x94>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003836:	484b      	ldr	r0, [pc, #300]	; (8003964 <vTaskSuspend+0x1c4>)
 8003838:	2201      	movs	r2, #1
 800383a:	6803      	ldr	r3, [r0, #0]
 800383c:	408a      	lsls	r2, r1
 800383e:	ea23 0302 	bic.w	r3, r3, r2
 8003842:	6003      	str	r3, [r0, #0]
 8003844:	e7cd      	b.n	80037e2 <vTaskSuspend+0x42>
			traceTASK_SUSPEND( pxTCB );
 8003846:	4620      	mov	r0, r4
 8003848:	f001 f8fe 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 800384c:	8833      	ldrh	r3, [r6, #0]
 800384e:	4218      	tst	r0, r3
 8003850:	d0b5      	beq.n	80037be <vTaskSuspend+0x1e>
 8003852:	4620      	mov	r0, r4
 8003854:	f001 f8f2 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8003858:	2103      	movs	r1, #3
 800385a:	b2c2      	uxtb	r2, r0
 800385c:	208a      	movs	r0, #138	; 0x8a
 800385e:	f002 f91d 	bl	8005a9c <prvTraceStoreKernelCall>
 8003862:	e7ac      	b.n	80037be <vTaskSuspend+0x1e>
			taskENTER_CRITICAL();
 8003864:	f000 ff96 	bl	8004794 <vPortEnterCritical>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003868:	4b3f      	ldr	r3, [pc, #252]	; (8003968 <vTaskSuspend+0x1c8>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	6812      	ldr	r2, [r2, #0]
 800386e:	bb02      	cbnz	r2, 80038b2 <vTaskSuspend+0x112>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003870:	4b3e      	ldr	r3, [pc, #248]	; (800396c <vTaskSuspend+0x1cc>)
 8003872:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003876:	601a      	str	r2, [r3, #0]
			taskEXIT_CRITICAL();
 8003878:	f000 ffae 	bl	80047d8 <vPortExitCritical>
 800387c:	e7c7      	b.n	800380e <vTaskSuspend+0x6e>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800387e:	682c      	ldr	r4, [r5, #0]
 8003880:	e795      	b.n	80037ae <vTaskSuspend+0xe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003882:	4935      	ldr	r1, [pc, #212]	; (8003958 <vTaskSuspend+0x1b8>)
 8003884:	4a3a      	ldr	r2, [pc, #232]	; (8003970 <vTaskSuspend+0x1d0>)
 8003886:	6809      	ldr	r1, [r1, #0]
 8003888:	6812      	ldr	r2, [r2, #0]
 800388a:	4291      	cmp	r1, r2
 800388c:	d006      	beq.n	800389c <vTaskSuspend+0xfc>
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800388e:	4b34      	ldr	r3, [pc, #208]	; (8003960 <vTaskSuspend+0x1c0>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	b1ab      	cbz	r3, 80038c0 <vTaskSuspend+0x120>
		xYieldPending = pdTRUE;
 8003894:	4b37      	ldr	r3, [pc, #220]	; (8003974 <vTaskSuspend+0x1d4>)
 8003896:	2201      	movs	r2, #1
 8003898:	601a      	str	r2, [r3, #0]
	}
 800389a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxCurrentTCB = NULL;
 800389c:	602b      	str	r3, [r5, #0]
	}
 800389e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				portYIELD_WITHIN_API();
 80038a0:	4b35      	ldr	r3, [pc, #212]	; (8003978 <vTaskSuspend+0x1d8>)
 80038a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	f3bf 8f4f 	dsb	sy
 80038ac:	f3bf 8f6f 	isb	sy
	}
 80038b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038b2:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038b4:	4b2d      	ldr	r3, [pc, #180]	; (800396c <vTaskSuspend+0x1cc>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80038b6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80038b8:	68d2      	ldr	r2, [r2, #12]
 80038ba:	6852      	ldr	r2, [r2, #4]
 80038bc:	601a      	str	r2, [r3, #0]
 80038be:	e7db      	b.n	8003878 <vTaskSuspend+0xd8>
		xYieldPending = pdFALSE;
 80038c0:	4a2c      	ldr	r2, [pc, #176]	; (8003974 <vTaskSuspend+0x1d4>)
 80038c2:	6013      	str	r3, [r2, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80038c4:	f004 f838 	bl	8007938 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 80038c8:	4a2c      	ldr	r2, [pc, #176]	; (800397c <vTaskSuspend+0x1dc>)
 80038ca:	6814      	ldr	r4, [r2, #0]
 80038cc:	42a0      	cmp	r0, r4
 80038ce:	d904      	bls.n	80038da <vTaskSuspend+0x13a>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80038d0:	6829      	ldr	r1, [r5, #0]
 80038d2:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 80038d4:	1b1b      	subs	r3, r3, r4
 80038d6:	4403      	add	r3, r0
 80038d8:	654b      	str	r3, [r1, #84]	; 0x54
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <vTaskSuspend+0x1c4>)
				ulTaskSwitchedInTime = ulTotalRunTime;
 80038dc:	6010      	str	r0, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80038de:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80038e0:	fab3 f383 	clz	r3, r3
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	f1c3 031f 	rsb	r3, r3, #31
 80038ea:	2214      	movs	r2, #20
 80038ec:	fb02 f203 	mul.w	r2, r2, r3
 80038f0:	4918      	ldr	r1, [pc, #96]	; (8003954 <vTaskSuspend+0x1b4>)
 80038f2:	588c      	ldr	r4, [r1, r2]
 80038f4:	1888      	adds	r0, r1, r2
 80038f6:	b944      	cbnz	r4, 800390a <vTaskSuspend+0x16a>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	e7fe      	b.n	8003908 <vTaskSuspend+0x168>
 800390a:	6844      	ldr	r4, [r0, #4]
 800390c:	3208      	adds	r2, #8
 800390e:	6864      	ldr	r4, [r4, #4]
 8003910:	6044      	str	r4, [r0, #4]
 8003912:	440a      	add	r2, r1
 8003914:	4294      	cmp	r4, r2
 8003916:	bf04      	itt	eq
 8003918:	6862      	ldreq	r2, [r4, #4]
 800391a:	6042      	streq	r2, [r0, #4]
 800391c:	2214      	movs	r2, #20
 800391e:	fb02 1303 	mla	r3, r2, r3, r1
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	602b      	str	r3, [r5, #0]
		traceTASK_SWITCHED_IN();
 8003928:	f001 f8d8 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 800392c:	f001 f88c 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8003930:	8833      	ldrh	r3, [r6, #0]
 8003932:	4218      	tst	r0, r3
 8003934:	f43f af6e 	beq.w	8003814 <vTaskSuspend+0x74>
 8003938:	f001 f8d0 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 800393c:	f001 f87e 	bl	8004a3c <prvTraceGetTaskNumberLow16>
	}
 8003940:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		traceTASK_SWITCHED_IN();
 8003944:	b2c0      	uxtb	r0, r0
 8003946:	f002 baa3 	b.w	8005e90 <prvTraceStoreTaskswitch>
 800394a:	bf00      	nop
 800394c:	20000a60 	.word	0x20000a60
 8003950:	20000014 	.word	0x20000014
 8003954:	20000a6c 	.word	0x20000a6c
 8003958:	20000b5c 	.word	0x20000b5c
 800395c:	20000b58 	.word	0x20000b58
 8003960:	20000b08 	.word	0x20000b08
 8003964:	20000b10 	.word	0x20000b10
 8003968:	20000a64 	.word	0x20000a64
 800396c:	20000b3c 	.word	0x20000b3c
 8003970:	20000afc 	.word	0x20000afc
 8003974:	20000b88 	.word	0x20000b88
 8003978:	e000ed04 	.word	0xe000ed04
 800397c:	20000af8 	.word	0x20000af8

08003980 <vTaskStartScheduler>:
{
 8003980:	b530      	push	{r4, r5, lr}
 8003982:	b089      	sub	sp, #36	; 0x24
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003984:	a905      	add	r1, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003986:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003988:	aa06      	add	r2, sp, #24
 800398a:	a804      	add	r0, sp, #16
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800398c:	e9cd 4404 	strd	r4, r4, [sp, #16]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003990:	f003 ffd4 	bl	800793c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003994:	e9dd 1304 	ldrd	r1, r3, [sp, #16]
		configASSERT( puxStackBuffer != NULL );
 8003998:	b1c3      	cbz	r3, 80039cc <vTaskStartScheduler+0x4c>
		configASSERT( pxTaskBuffer != NULL );
 800399a:	b171      	cbz	r1, 80039ba <vTaskStartScheduler+0x3a>
			volatile size_t xSize = sizeof( StaticTask_t );
 800399c:	2260      	movs	r2, #96	; 0x60
 800399e:	9207      	str	r2, [sp, #28]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039a0:	9807      	ldr	r0, [sp, #28]
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80039a2:	9a06      	ldr	r2, [sp, #24]
			configASSERT( xSize == sizeof( TCB_t ) );
 80039a4:	2860      	cmp	r0, #96	; 0x60
 80039a6:	d01a      	beq.n	80039de <vTaskStartScheduler+0x5e>
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	e7fe      	b.n	80039b8 <vTaskStartScheduler+0x38>
 80039ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	e7fe      	b.n	80039ca <vTaskStartScheduler+0x4a>
 80039cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d0:	f383 8811 	msr	BASEPRI, r3
 80039d4:	f3bf 8f6f 	isb	sy
 80039d8:	f3bf 8f4f 	dsb	sy
 80039dc:	e7fe      	b.n	80039dc <vTaskStartScheduler+0x5c>
 80039de:	e9cd 3101 	strd	r3, r1, [sp, #4]
 80039e2:	9400      	str	r4, [sp, #0]
 80039e4:	4623      	mov	r3, r4
 80039e6:	490e      	ldr	r1, [pc, #56]	; (8003a20 <vTaskStartScheduler+0xa0>)
 80039e8:	480e      	ldr	r0, [pc, #56]	; (8003a24 <vTaskStartScheduler+0xa4>)
 80039ea:	f7ff fda5 	bl	8003538 <xTaskCreateStatic.part.5>
		if( xIdleTaskHandle != NULL )
 80039ee:	b1a0      	cbz	r0, 8003a1a <vTaskStartScheduler+0x9a>
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a00:	4809      	ldr	r0, [pc, #36]	; (8003a28 <vTaskStartScheduler+0xa8>)
		xSchedulerRunning = pdTRUE;
 8003a02:	4a0a      	ldr	r2, [pc, #40]	; (8003a2c <vTaskStartScheduler+0xac>)
		xTickCount = ( TickType_t ) 0U;
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <vTaskStartScheduler+0xb0>)
		xSchedulerRunning = pdTRUE;
 8003a06:	2101      	movs	r1, #1
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a08:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8003a0c:	6005      	str	r5, [r0, #0]
		xSchedulerRunning = pdTRUE;
 8003a0e:	6011      	str	r1, [r2, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a10:	601c      	str	r4, [r3, #0]
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8003a12:	f003 ff8f 	bl	8007934 <configureTimerForRunTimeStats>
		if( xPortStartScheduler() != pdFALSE )
 8003a16:	f000 ff59 	bl	80048cc <xPortStartScheduler>
}
 8003a1a:	b009      	add	sp, #36	; 0x24
 8003a1c:	bd30      	pop	{r4, r5, pc}
 8003a1e:	bf00      	nop
 8003a20:	0800c760 	.word	0x0800c760
 8003a24:	0800344d 	.word	0x0800344d
 8003a28:	20000b3c 	.word	0x20000b3c
 8003a2c:	20000b58 	.word	0x20000b58
 8003a30:	20000b84 	.word	0x20000b84

08003a34 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003a34:	4a02      	ldr	r2, [pc, #8]	; (8003a40 <vTaskSuspendAll+0xc>)
 8003a36:	6813      	ldr	r3, [r2, #0]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	6013      	str	r3, [r2, #0]
}
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	20000b08 	.word	0x20000b08

08003a44 <xTaskIncrementTick>:
{
 8003a44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	traceTASK_INCREMENT_TICK( xTickCount );
 8003a48:	4c57      	ldr	r4, [pc, #348]	; (8003ba8 <xTaskIncrementTick+0x164>)
 8003a4a:	6823      	ldr	r3, [r4, #0]
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d026      	beq.n	8003a9e <xTaskIncrementTick+0x5a>
 8003a50:	4b56      	ldr	r3, [pc, #344]	; (8003bac <xTaskIncrementTick+0x168>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	b31b      	cbz	r3, 8003a9e <xTaskIncrementTick+0x5a>
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	b92b      	cbnz	r3, 8003a66 <xTaskIncrementTick+0x22>
 8003a5a:	4b55      	ldr	r3, [pc, #340]	; (8003bb0 <xTaskIncrementTick+0x16c>)
 8003a5c:	6819      	ldr	r1, [r3, #0]
 8003a5e:	2003      	movs	r0, #3
 8003a60:	3101      	adds	r1, #1
 8003a62:	f001 ff3d 	bl	80058e0 <prvTraceStoreKernelCallWithNumericParamOnly>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	bb0b      	cbnz	r3, 8003aae <xTaskIncrementTick+0x6a>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a6a:	4b51      	ldr	r3, [pc, #324]	; (8003bb0 <xTaskIncrementTick+0x16c>)
 8003a6c:	681f      	ldr	r7, [r3, #0]
 8003a6e:	3701      	adds	r7, #1
		xTickCount = xConstTickCount;
 8003a70:	601f      	str	r7, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a72:	b34f      	cbz	r7, 8003ac8 <xTaskIncrementTick+0x84>
 8003a74:	4e4f      	ldr	r6, [pc, #316]	; (8003bb4 <xTaskIncrementTick+0x170>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003a76:	6833      	ldr	r3, [r6, #0]
 8003a78:	42bb      	cmp	r3, r7
 8003a7a:	d933      	bls.n	8003ae4 <xTaskIncrementTick+0xa0>
 8003a7c:	f8df 8154 	ldr.w	r8, [pc, #340]	; 8003bd4 <xTaskIncrementTick+0x190>
 8003a80:	f8df 9154 	ldr.w	r9, [pc, #340]	; 8003bd8 <xTaskIncrementTick+0x194>
BaseType_t xSwitchRequired = pdFALSE;
 8003a84:	2500      	movs	r5, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003a86:	f8d9 3000 	ldr.w	r3, [r9]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	f858 3003 	ldr.w	r3, [r8, r3]
				xSwitchRequired = pdTRUE;
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	bf28      	it	cs
 8003a9a:	2501      	movcs	r5, #1
 8003a9c:	e00c      	b.n	8003ab8 <xTaskIncrementTick+0x74>
	traceTASK_INCREMENT_TICK( xTickCount );
 8003a9e:	4a46      	ldr	r2, [pc, #280]	; (8003bb8 <xTaskIncrementTick+0x174>)
 8003aa0:	6813      	ldr	r3, [r2, #0]
 8003aa2:	2000      	movs	r0, #0
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	f002 ff84 	bl	80069b4 <prvTracePortGetTimeStamp>
 8003aac:	e7d3      	b.n	8003a56 <xTaskIncrementTick+0x12>
		++uxPendedTicks;
 8003aae:	4a3f      	ldr	r2, [pc, #252]	; (8003bac <xTaskIncrementTick+0x168>)
 8003ab0:	6813      	ldr	r3, [r2, #0]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 8003ab6:	2500      	movs	r5, #0
		if( xYieldPending != pdFALSE )
 8003ab8:	4b40      	ldr	r3, [pc, #256]	; (8003bbc <xTaskIncrementTick+0x178>)
 8003aba:	681b      	ldr	r3, [r3, #0]
			xSwitchRequired = pdTRUE;
 8003abc:	2b00      	cmp	r3, #0
}
 8003abe:	bf0c      	ite	eq
 8003ac0:	4628      	moveq	r0, r5
 8003ac2:	2001      	movne	r0, #1
 8003ac4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			taskSWITCH_DELAYED_LISTS();
 8003ac8:	4c3d      	ldr	r4, [pc, #244]	; (8003bc0 <xTaskIncrementTick+0x17c>)
 8003aca:	6823      	ldr	r3, [r4, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d052      	beq.n	8003b78 <xTaskIncrementTick+0x134>
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	e7fe      	b.n	8003ae2 <xTaskIncrementTick+0x9e>
 8003ae4:	4c36      	ldr	r4, [pc, #216]	; (8003bc0 <xTaskIncrementTick+0x17c>)
 8003ae6:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8003bd4 <xTaskIncrementTick+0x190>
 8003aea:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8003bd8 <xTaskIncrementTick+0x194>
BaseType_t xSwitchRequired = pdFALSE;
 8003aee:	2500      	movs	r5, #0
 8003af0:	e038      	b.n	8003b64 <xTaskIncrementTick+0x120>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f8d3 a00c 	ldr.w	sl, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003afa:	f8da 2004 	ldr.w	r2, [sl, #4]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003afe:	f10a 0b04 	add.w	fp, sl, #4
					if( xConstTickCount < xItemValue )
 8003b02:	4297      	cmp	r7, r2
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b04:	4658      	mov	r0, fp
					if( xConstTickCount < xItemValue )
 8003b06:	d335      	bcc.n	8003b74 <xTaskIncrementTick+0x130>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b08:	f7fe ff08 	bl	800291c <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b0c:	f8da 2028 	ldr.w	r2, [sl, #40]	; 0x28
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b10:	f10a 0018 	add.w	r0, sl, #24
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b14:	b10a      	cbz	r2, 8003b1a <xTaskIncrementTick+0xd6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b16:	f7fe ff01 	bl	800291c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b1a:	4650      	mov	r0, sl
 8003b1c:	f000 ff94 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8003b20:	4b28      	ldr	r3, [pc, #160]	; (8003bc4 <xTaskIncrementTick+0x180>)
 8003b22:	881a      	ldrh	r2, [r3, #0]
 8003b24:	4210      	tst	r0, r2
 8003b26:	d005      	beq.n	8003b34 <xTaskIncrementTick+0xf0>
 8003b28:	4650      	mov	r0, sl
 8003b2a:	f000 ff87 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8003b2e:	b2c0      	uxtb	r0, r0
 8003b30:	f002 fe22 	bl	8006778 <prvTraceStoreTaskReady>
 8003b34:	4b24      	ldr	r3, [pc, #144]	; (8003bc8 <xTaskIncrementTick+0x184>)
 8003b36:	f8da 002c 	ldr.w	r0, [sl, #44]	; 0x2c
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	4082      	lsls	r2, r0
 8003b40:	431a      	orrs	r2, r3
 8003b42:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <xTaskIncrementTick+0x184>)
 8003b48:	4659      	mov	r1, fp
 8003b4a:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	f7fe feba 	bl	80028c8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b54:	f8d9 1000 	ldr.w	r1, [r9]
 8003b58:	f8da 202c 	ldr.w	r2, [sl, #44]	; 0x2c
 8003b5c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	bf28      	it	cs
 8003b62:	2501      	movcs	r5, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b64:	6823      	ldr	r3, [r4, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1c2      	bne.n	8003af2 <xTaskIncrementTick+0xae>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b70:	6033      	str	r3, [r6, #0]
					break;
 8003b72:	e788      	b.n	8003a86 <xTaskIncrementTick+0x42>
						xNextTaskUnblockTime = xItemValue;
 8003b74:	6032      	str	r2, [r6, #0]
						break;
 8003b76:	e786      	b.n	8003a86 <xTaskIncrementTick+0x42>
			taskSWITCH_DELAYED_LISTS();
 8003b78:	4b14      	ldr	r3, [pc, #80]	; (8003bcc <xTaskIncrementTick+0x188>)
 8003b7a:	6821      	ldr	r1, [r4, #0]
 8003b7c:	4a14      	ldr	r2, [pc, #80]	; (8003bd0 <xTaskIncrementTick+0x18c>)
 8003b7e:	6818      	ldr	r0, [r3, #0]
 8003b80:	6020      	str	r0, [r4, #0]
 8003b82:	6019      	str	r1, [r3, #0]
 8003b84:	6813      	ldr	r3, [r2, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	6013      	str	r3, [r2, #0]
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	b923      	cbnz	r3, 8003b9a <xTaskIncrementTick+0x156>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b90:	4e08      	ldr	r6, [pc, #32]	; (8003bb4 <xTaskIncrementTick+0x170>)
 8003b92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003b96:	6033      	str	r3, [r6, #0]
 8003b98:	e76d      	b.n	8003a76 <xTaskIncrementTick+0x32>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b9a:	6823      	ldr	r3, [r4, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b9c:	4e05      	ldr	r6, [pc, #20]	; (8003bb4 <xTaskIncrementTick+0x170>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b9e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	6033      	str	r3, [r6, #0]
 8003ba6:	e766      	b.n	8003a76 <xTaskIncrementTick+0x32>
 8003ba8:	20000b08 	.word	0x20000b08
 8003bac:	20000b04 	.word	0x20000b04
 8003bb0:	20000b84 	.word	0x20000b84
 8003bb4:	20000b3c 	.word	0x20000b3c
 8003bb8:	20000c50 	.word	0x20000c50
 8003bbc:	20000b88 	.word	0x20000b88
 8003bc0:	20000a64 	.word	0x20000a64
 8003bc4:	20000014 	.word	0x20000014
 8003bc8:	20000b10 	.word	0x20000b10
 8003bcc:	20000a68 	.word	0x20000a68
 8003bd0:	20000b40 	.word	0x20000b40
 8003bd4:	20000a6c 	.word	0x20000a6c
 8003bd8:	20000a60 	.word	0x20000a60

08003bdc <xTaskResumeAll>:
{
 8003bdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	configASSERT( uxSchedulerSuspended );
 8003be0:	4c3f      	ldr	r4, [pc, #252]	; (8003ce0 <xTaskResumeAll+0x104>)
 8003be2:	6823      	ldr	r3, [r4, #0]
 8003be4:	b943      	cbnz	r3, 8003bf8 <xTaskResumeAll+0x1c>
 8003be6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bea:	f383 8811 	msr	BASEPRI, r3
 8003bee:	f3bf 8f6f 	isb	sy
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	e7fe      	b.n	8003bf6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003bf8:	f000 fdcc 	bl	8004794 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c02:	6824      	ldr	r4, [r4, #0]
 8003c04:	2c00      	cmp	r4, #0
 8003c06:	d136      	bne.n	8003c76 <xTaskResumeAll+0x9a>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c08:	4b36      	ldr	r3, [pc, #216]	; (8003ce4 <xTaskResumeAll+0x108>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d032      	beq.n	8003c76 <xTaskResumeAll+0x9a>
 8003c10:	4d35      	ldr	r5, [pc, #212]	; (8003ce8 <xTaskResumeAll+0x10c>)
 8003c12:	4f36      	ldr	r7, [pc, #216]	; (8003cec <xTaskResumeAll+0x110>)
					prvAddTaskToReadyList( pxTCB );
 8003c14:	f8df b0f0 	ldr.w	fp, [pc, #240]	; 8003d08 <xTaskResumeAll+0x12c>
 8003c18:	4e35      	ldr	r6, [pc, #212]	; (8003cf0 <xTaskResumeAll+0x114>)
 8003c1a:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8003d0c <xTaskResumeAll+0x130>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c1e:	683b      	ldr	r3, [r7, #0]
					prvAddTaskToReadyList( pxTCB );
 8003c20:	f04f 0801 	mov.w	r8, #1
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c24:	b3a3      	cbz	r3, 8003c90 <xTaskResumeAll+0xb4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c2a:	f104 0018 	add.w	r0, r4, #24
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c2e:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c32:	f7fe fe73 	bl	800291c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c36:	4648      	mov	r0, r9
 8003c38:	f7fe fe70 	bl	800291c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f000 ff03 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8003c42:	f8bb 3000 	ldrh.w	r3, [fp]
 8003c46:	4218      	tst	r0, r3
 8003c48:	d11b      	bne.n	8003c82 <xTaskResumeAll+0xa6>
 8003c4a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8003c4c:	6832      	ldr	r2, [r6, #0]
 8003c4e:	fa08 f300 	lsl.w	r3, r8, r0
 8003c52:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8003c56:	4313      	orrs	r3, r2
 8003c58:	4649      	mov	r1, r9
 8003c5a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8003c5e:	6033      	str	r3, [r6, #0]
 8003c60:	f7fe fe32 	bl	80028c8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c64:	4b23      	ldr	r3, [pc, #140]	; (8003cf4 <xTaskResumeAll+0x118>)
 8003c66:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d3d6      	bcc.n	8003c1e <xTaskResumeAll+0x42>
						xYieldPending = pdTRUE;
 8003c70:	f8c5 8000 	str.w	r8, [r5]
 8003c74:	e7d3      	b.n	8003c1e <xTaskResumeAll+0x42>
BaseType_t xAlreadyYielded = pdFALSE;
 8003c76:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003c78:	f000 fdae 	bl	80047d8 <vPortExitCritical>
}
 8003c7c:	4620      	mov	r0, r4
 8003c7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					prvAddTaskToReadyList( pxTCB );
 8003c82:	4620      	mov	r0, r4
 8003c84:	f000 feda 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8003c88:	b2c0      	uxtb	r0, r0
 8003c8a:	f002 fd75 	bl	8006778 <prvTraceStoreTaskReady>
 8003c8e:	e7dc      	b.n	8003c4a <xTaskResumeAll+0x6e>
				if( pxTCB != NULL )
 8003c90:	b13c      	cbz	r4, 8003ca2 <xTaskResumeAll+0xc6>
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c92:	4b19      	ldr	r3, [pc, #100]	; (8003cf8 <xTaskResumeAll+0x11c>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	6812      	ldr	r2, [r2, #0]
 8003c98:	b9da      	cbnz	r2, 8003cd2 <xTaskResumeAll+0xf6>
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c9a:	4b18      	ldr	r3, [pc, #96]	; (8003cfc <xTaskResumeAll+0x120>)
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ca0:	601a      	str	r2, [r3, #0]
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003ca2:	4e17      	ldr	r6, [pc, #92]	; (8003d00 <xTaskResumeAll+0x124>)
 8003ca4:	6834      	ldr	r4, [r6, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003ca6:	b13c      	cbz	r4, 8003cb8 <xTaskResumeAll+0xdc>
								xYieldPending = pdTRUE;
 8003ca8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8003caa:	f7ff fecb 	bl	8003a44 <xTaskIncrementTick>
 8003cae:	b100      	cbz	r0, 8003cb2 <xTaskResumeAll+0xd6>
								xYieldPending = pdTRUE;
 8003cb0:	602f      	str	r7, [r5, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003cb2:	3c01      	subs	r4, #1
 8003cb4:	d1f9      	bne.n	8003caa <xTaskResumeAll+0xce>
						uxPendedTicks = 0;
 8003cb6:	6034      	str	r4, [r6, #0]
				if( xYieldPending != pdFALSE )
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0db      	beq.n	8003c76 <xTaskResumeAll+0x9a>
					taskYIELD_IF_USING_PREEMPTION();
 8003cbe:	4b11      	ldr	r3, [pc, #68]	; (8003d04 <xTaskResumeAll+0x128>)
 8003cc0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003cce:	2401      	movs	r4, #1
 8003cd0:	e7d2      	b.n	8003c78 <xTaskResumeAll+0x9c>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cd2:	681a      	ldr	r2, [r3, #0]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cd4:	4b09      	ldr	r3, [pc, #36]	; (8003cfc <xTaskResumeAll+0x120>)
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cd6:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003cd8:	68d2      	ldr	r2, [r2, #12]
 8003cda:	6852      	ldr	r2, [r2, #4]
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	e7e0      	b.n	8003ca2 <xTaskResumeAll+0xc6>
 8003ce0:	20000b08 	.word	0x20000b08
 8003ce4:	20000afc 	.word	0x20000afc
 8003ce8:	20000b88 	.word	0x20000b88
 8003cec:	20000b44 	.word	0x20000b44
 8003cf0:	20000b10 	.word	0x20000b10
 8003cf4:	20000a60 	.word	0x20000a60
 8003cf8:	20000a64 	.word	0x20000a64
 8003cfc:	20000b3c 	.word	0x20000b3c
 8003d00:	20000b04 	.word	0x20000b04
 8003d04:	e000ed04 	.word	0xe000ed04
 8003d08:	20000014 	.word	0x20000014
 8003d0c:	20000a6c 	.word	0x20000a6c

08003d10 <vTaskDelay>:
	{
 8003d10:	b570      	push	{r4, r5, r6, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d036      	beq.n	8003d84 <vTaskDelay+0x74>
			configASSERT( uxSchedulerSuspended == 0 );
 8003d16:	4b20      	ldr	r3, [pc, #128]	; (8003d98 <vTaskDelay+0x88>)
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	b142      	cbz	r2, 8003d2e <vTaskDelay+0x1e>
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	e7fe      	b.n	8003d2c <vTaskDelay+0x1c>
	++uxSchedulerSuspended;
 8003d2e:	681a      	ldr	r2, [r3, #0]
				traceTASK_DELAY();
 8003d30:	4e1a      	ldr	r6, [pc, #104]	; (8003d9c <vTaskDelay+0x8c>)
 8003d32:	4d1b      	ldr	r5, [pc, #108]	; (8003da0 <vTaskDelay+0x90>)
	++uxSchedulerSuspended;
 8003d34:	3201      	adds	r2, #1
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	4604      	mov	r4, r0
				traceTASK_DELAY();
 8003d3a:	6830      	ldr	r0, [r6, #0]
 8003d3c:	f000 fe84 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8003d40:	882b      	ldrh	r3, [r5, #0]
 8003d42:	4218      	tst	r0, r3
 8003d44:	d009      	beq.n	8003d5a <vTaskDelay+0x4a>
 8003d46:	4621      	mov	r1, r4
 8003d48:	2089      	movs	r0, #137	; 0x89
 8003d4a:	f001 fdc9 	bl	80058e0 <prvTraceStoreKernelCallWithNumericParamOnly>
 8003d4e:	6830      	ldr	r0, [r6, #0]
 8003d50:	f000 fe74 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8003d54:	b2c0      	uxtb	r0, r0
 8003d56:	f001 faa9 	bl	80052ac <prvTraceSetTaskInstanceFinished>
 8003d5a:	f000 febf 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8003d5e:	f000 fe73 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8003d62:	882b      	ldrh	r3, [r5, #0]
 8003d64:	4218      	tst	r0, r3
 8003d66:	d006      	beq.n	8003d76 <vTaskDelay+0x66>
 8003d68:	f000 feb8 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8003d6c:	f000 fe66 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8003d70:	b2c0      	uxtb	r0, r0
 8003d72:	f001 fa9b 	bl	80052ac <prvTraceSetTaskInstanceFinished>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d76:	4620      	mov	r0, r4
 8003d78:	2100      	movs	r1, #0
 8003d7a:	f7ff fb97 	bl	80034ac <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003d7e:	f7ff ff2d 	bl	8003bdc <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003d82:	b938      	cbnz	r0, 8003d94 <vTaskDelay+0x84>
			portYIELD_WITHIN_API();
 8003d84:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <vTaskDelay+0x94>)
 8003d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	f3bf 8f6f 	isb	sy
	}
 8003d94:	bd70      	pop	{r4, r5, r6, pc}
 8003d96:	bf00      	nop
 8003d98:	20000b08 	.word	0x20000b08
 8003d9c:	20000a60 	.word	0x20000a60
 8003da0:	20000014 	.word	0x20000014
 8003da4:	e000ed04 	.word	0xe000ed04

08003da8 <vTaskSwitchContext>:
{
 8003da8:	b538      	push	{r3, r4, r5, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003daa:	4b26      	ldr	r3, [pc, #152]	; (8003e44 <vTaskSwitchContext+0x9c>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	b11b      	cbz	r3, 8003db8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003db0:	4b25      	ldr	r3, [pc, #148]	; (8003e48 <vTaskSwitchContext+0xa0>)
 8003db2:	2201      	movs	r2, #1
 8003db4:	601a      	str	r2, [r3, #0]
}
 8003db6:	bd38      	pop	{r3, r4, r5, pc}
		xYieldPending = pdFALSE;
 8003db8:	4a23      	ldr	r2, [pc, #140]	; (8003e48 <vTaskSwitchContext+0xa0>)
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8003dba:	4c24      	ldr	r4, [pc, #144]	; (8003e4c <vTaskSwitchContext+0xa4>)
		xYieldPending = pdFALSE;
 8003dbc:	6013      	str	r3, [r2, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8003dbe:	f003 fdbb 	bl	8007938 <getRunTimeCounterValue>
				if( ulTotalRunTime > ulTaskSwitchedInTime )
 8003dc2:	4a23      	ldr	r2, [pc, #140]	; (8003e50 <vTaskSwitchContext+0xa8>)
 8003dc4:	6815      	ldr	r5, [r2, #0]
 8003dc6:	42a8      	cmp	r0, r5
 8003dc8:	d904      	bls.n	8003dd4 <vTaskSwitchContext+0x2c>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8003dca:	6821      	ldr	r1, [r4, #0]
 8003dcc:	6d4b      	ldr	r3, [r1, #84]	; 0x54
 8003dce:	1b5b      	subs	r3, r3, r5
 8003dd0:	4403      	add	r3, r0
 8003dd2:	654b      	str	r3, [r1, #84]	; 0x54
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dd4:	4b1f      	ldr	r3, [pc, #124]	; (8003e54 <vTaskSwitchContext+0xac>)
				ulTaskSwitchedInTime = ulTotalRunTime;
 8003dd6:	6010      	str	r0, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dd8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	f1c3 031f 	rsb	r3, r3, #31
 8003de4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8003de8:	0092      	lsls	r2, r2, #2
 8003dea:	481b      	ldr	r0, [pc, #108]	; (8003e58 <vTaskSwitchContext+0xb0>)
 8003dec:	5881      	ldr	r1, [r0, r2]
 8003dee:	1885      	adds	r5, r0, r2
 8003df0:	b1c9      	cbz	r1, 8003e26 <vTaskSwitchContext+0x7e>
 8003df2:	6869      	ldr	r1, [r5, #4]
 8003df4:	3208      	adds	r2, #8
 8003df6:	6849      	ldr	r1, [r1, #4]
 8003df8:	6069      	str	r1, [r5, #4]
 8003dfa:	4402      	add	r2, r0
 8003dfc:	4291      	cmp	r1, r2
 8003dfe:	d01b      	beq.n	8003e38 <vTaskSwitchContext+0x90>
 8003e00:	68cb      	ldr	r3, [r1, #12]
 8003e02:	6023      	str	r3, [r4, #0]
		traceTASK_SWITCHED_IN();
 8003e04:	f000 fe6a 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8003e08:	f000 fe1e 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8003e0c:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <vTaskSwitchContext+0xb4>)
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	4218      	tst	r0, r3
 8003e12:	d0d0      	beq.n	8003db6 <vTaskSwitchContext+0xe>
 8003e14:	f000 fe62 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8003e18:	f000 fe10 	bl	8004a3c <prvTraceGetTaskNumberLow16>
}
 8003e1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		traceTASK_SWITCHED_IN();
 8003e20:	b2c0      	uxtb	r0, r0
 8003e22:	f002 b835 	b.w	8005e90 <prvTraceStoreTaskswitch>
	__asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	e7fe      	b.n	8003e36 <vTaskSwitchContext+0x8e>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003e38:	2214      	movs	r2, #20
 8003e3a:	fb02 0303 	mla	r3, r2, r3, r0
 8003e3e:	6849      	ldr	r1, [r1, #4]
 8003e40:	6059      	str	r1, [r3, #4]
 8003e42:	e7dd      	b.n	8003e00 <vTaskSwitchContext+0x58>
 8003e44:	20000b08 	.word	0x20000b08
 8003e48:	20000b88 	.word	0x20000b88
 8003e4c:	20000a60 	.word	0x20000a60
 8003e50:	20000af8 	.word	0x20000af8
 8003e54:	20000b10 	.word	0x20000b10
 8003e58:	20000a6c 	.word	0x20000a6c
 8003e5c:	20000014 	.word	0x20000014

08003e60 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
 8003e60:	b940      	cbnz	r0, 8003e74 <vTaskPlaceOnEventList+0x14>
 8003e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e66:	f383 8811 	msr	BASEPRI, r3
 8003e6a:	f3bf 8f6f 	isb	sy
 8003e6e:	f3bf 8f4f 	dsb	sy
 8003e72:	e7fe      	b.n	8003e72 <vTaskPlaceOnEventList+0x12>
{
 8003e74:	b570      	push	{r4, r5, r6, lr}
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003e76:	4d1b      	ldr	r5, [pc, #108]	; (8003ee4 <vTaskPlaceOnEventList+0x84>)
 8003e78:	460c      	mov	r4, r1
 8003e7a:	6829      	ldr	r1, [r5, #0]
 8003e7c:	3118      	adds	r1, #24
 8003e7e:	f7fe fd33 	bl	80028e8 <vListInsert>
const TickType_t xConstTickCount = xTickCount;
 8003e82:	4b19      	ldr	r3, [pc, #100]	; (8003ee8 <vTaskPlaceOnEventList+0x88>)
 8003e84:	681e      	ldr	r6, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e86:	6828      	ldr	r0, [r5, #0]
 8003e88:	3004      	adds	r0, #4
 8003e8a:	f7fe fd47 	bl	800291c <uxListRemove>
 8003e8e:	b940      	cbnz	r0, 8003ea2 <vTaskPlaceOnEventList+0x42>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8003e90:	682b      	ldr	r3, [r5, #0]
 8003e92:	4916      	ldr	r1, [pc, #88]	; (8003eec <vTaskPlaceOnEventList+0x8c>)
 8003e94:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003e96:	680b      	ldr	r3, [r1, #0]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	4082      	lsls	r2, r0
 8003e9c:	ea23 0302 	bic.w	r3, r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003ea2:	1c63      	adds	r3, r4, #1
 8003ea4:	d00f      	beq.n	8003ec6 <vTaskPlaceOnEventList+0x66>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ea6:	682b      	ldr	r3, [r5, #0]
 8003ea8:	19a4      	adds	r4, r4, r6
 8003eaa:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003eac:	d212      	bcs.n	8003ed4 <vTaskPlaceOnEventList+0x74>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <vTaskPlaceOnEventList+0x90>)
 8003eb0:	6818      	ldr	r0, [r3, #0]
 8003eb2:	6829      	ldr	r1, [r5, #0]
 8003eb4:	3104      	adds	r1, #4
 8003eb6:	f7fe fd17 	bl	80028e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003eba:	4b0e      	ldr	r3, [pc, #56]	; (8003ef4 <vTaskPlaceOnEventList+0x94>)
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 8003ec0:	bf38      	it	cc
 8003ec2:	601c      	strcc	r4, [r3, #0]
}
 8003ec4:	bd70      	pop	{r4, r5, r6, pc}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ec6:	6829      	ldr	r1, [r5, #0]
 8003ec8:	480b      	ldr	r0, [pc, #44]	; (8003ef8 <vTaskPlaceOnEventList+0x98>)
 8003eca:	3104      	adds	r1, #4
}
 8003ecc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ed0:	f7fe bcfa 	b.w	80028c8 <vListInsertEnd>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ed4:	4b09      	ldr	r3, [pc, #36]	; (8003efc <vTaskPlaceOnEventList+0x9c>)
 8003ed6:	6818      	ldr	r0, [r3, #0]
 8003ed8:	6829      	ldr	r1, [r5, #0]
}
 8003eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ede:	3104      	adds	r1, #4
 8003ee0:	f7fe bd02 	b.w	80028e8 <vListInsert>
 8003ee4:	20000a60 	.word	0x20000a60
 8003ee8:	20000b84 	.word	0x20000b84
 8003eec:	20000b10 	.word	0x20000b10
 8003ef0:	20000a64 	.word	0x20000a64
 8003ef4:	20000b3c 	.word	0x20000b3c
 8003ef8:	20000b5c 	.word	0x20000b5c
 8003efc:	20000a68 	.word	0x20000a68

08003f00 <xTaskRemoveFromEventList>:
{
 8003f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003f02:	68c3      	ldr	r3, [r0, #12]
 8003f04:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003f06:	2c00      	cmp	r4, #0
 8003f08:	d02d      	beq.n	8003f66 <xTaskRemoveFromEventList+0x66>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f0a:	f104 0518 	add.w	r5, r4, #24
 8003f0e:	4628      	mov	r0, r5
 8003f10:	f7fe fd04 	bl	800291c <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f14:	4b1e      	ldr	r3, [pc, #120]	; (8003f90 <xTaskRemoveFromEventList+0x90>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d12d      	bne.n	8003f78 <xTaskRemoveFromEventList+0x78>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f1c:	1d26      	adds	r6, r4, #4
 8003f1e:	4630      	mov	r0, r6
 8003f20:	f7fe fcfc 	bl	800291c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f24:	4620      	mov	r0, r4
 8003f26:	f000 fd8f 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <xTaskRemoveFromEventList+0x94>)
 8003f2c:	881b      	ldrh	r3, [r3, #0]
 8003f2e:	4218      	tst	r0, r3
 8003f30:	d127      	bne.n	8003f82 <xTaskRemoveFromEventList+0x82>
 8003f32:	4d19      	ldr	r5, [pc, #100]	; (8003f98 <xTaskRemoveFromEventList+0x98>)
 8003f34:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f36:	682f      	ldr	r7, [r5, #0]
 8003f38:	4818      	ldr	r0, [pc, #96]	; (8003f9c <xTaskRemoveFromEventList+0x9c>)
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	4093      	lsls	r3, r2
 8003f3e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003f42:	433b      	orrs	r3, r7
 8003f44:	4631      	mov	r1, r6
 8003f46:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8003f4a:	602b      	str	r3, [r5, #0]
 8003f4c:	f7fe fcbc 	bl	80028c8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f50:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <xTaskRemoveFromEventList+0xa0>)
 8003f52:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f58:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003f5a:	bf83      	ittte	hi
 8003f5c:	4b11      	ldrhi	r3, [pc, #68]	; (8003fa4 <xTaskRemoveFromEventList+0xa4>)
 8003f5e:	2001      	movhi	r0, #1
 8003f60:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8003f62:	2000      	movls	r0, #0
}
 8003f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	e7fe      	b.n	8003f76 <xTaskRemoveFromEventList+0x76>
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003f78:	4629      	mov	r1, r5
 8003f7a:	480b      	ldr	r0, [pc, #44]	; (8003fa8 <xTaskRemoveFromEventList+0xa8>)
 8003f7c:	f7fe fca4 	bl	80028c8 <vListInsertEnd>
 8003f80:	e7e6      	b.n	8003f50 <xTaskRemoveFromEventList+0x50>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f82:	4620      	mov	r0, r4
 8003f84:	f000 fd5a 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8003f88:	b2c0      	uxtb	r0, r0
 8003f8a:	f002 fbf5 	bl	8006778 <prvTraceStoreTaskReady>
 8003f8e:	e7d0      	b.n	8003f32 <xTaskRemoveFromEventList+0x32>
 8003f90:	20000b08 	.word	0x20000b08
 8003f94:	20000014 	.word	0x20000014
 8003f98:	20000b10 	.word	0x20000b10
 8003f9c:	20000a6c 	.word	0x20000a6c
 8003fa0:	20000a60 	.word	0x20000a60
 8003fa4:	20000b88 	.word	0x20000b88
 8003fa8:	20000b44 	.word	0x20000b44

08003fac <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fac:	4a03      	ldr	r2, [pc, #12]	; (8003fbc <vTaskInternalSetTimeOutState+0x10>)
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fae:	4b04      	ldr	r3, [pc, #16]	; (8003fc0 <vTaskInternalSetTimeOutState+0x14>)
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fb0:	6812      	ldr	r2, [r2, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	e9c0 2300 	strd	r2, r3, [r0]
}
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000b40 	.word	0x20000b40
 8003fc0:	20000b84 	.word	0x20000b84

08003fc4 <xTaskCheckForTimeOut>:
{
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
 8003fc6:	b340      	cbz	r0, 800401a <xTaskCheckForTimeOut+0x56>
	configASSERT( pxTicksToWait );
 8003fc8:	b1f1      	cbz	r1, 8004008 <xTaskCheckForTimeOut+0x44>
 8003fca:	460d      	mov	r5, r1
 8003fcc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8003fce:	f000 fbe1 	bl	8004794 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8003fd2:	f8df c078 	ldr.w	ip, [pc, #120]	; 800404c <xTaskCheckForTimeOut+0x88>
			if( *pxTicksToWait == portMAX_DELAY )
 8003fd6:	682b      	ldr	r3, [r5, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fd8:	6867      	ldr	r7, [r4, #4]
		const TickType_t xConstTickCount = xTickCount;
 8003fda:	f8dc 6000 	ldr.w	r6, [ip]
			if( *pxTicksToWait == portMAX_DELAY )
 8003fde:	1c5a      	adds	r2, r3, #1
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003fe0:	eba6 0007 	sub.w	r0, r6, r7
			if( *pxTicksToWait == portMAX_DELAY )
 8003fe4:	d022      	beq.n	800402c <xTaskCheckForTimeOut+0x68>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003fe6:	4918      	ldr	r1, [pc, #96]	; (8004048 <xTaskCheckForTimeOut+0x84>)
 8003fe8:	6822      	ldr	r2, [r4, #0]
 8003fea:	f8d1 e000 	ldr.w	lr, [r1]
 8003fee:	4572      	cmp	r2, lr
 8003ff0:	d001      	beq.n	8003ff6 <xTaskCheckForTimeOut+0x32>
 8003ff2:	42b7      	cmp	r7, r6
 8003ff4:	d925      	bls.n	8004042 <xTaskCheckForTimeOut+0x7e>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ff6:	4283      	cmp	r3, r0
 8003ff8:	d81a      	bhi.n	8004030 <xTaskCheckForTimeOut+0x6c>
			*pxTicksToWait = 0;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	602b      	str	r3, [r5, #0]
			xReturn = pdTRUE;
 8003ffe:	2501      	movs	r5, #1
	taskEXIT_CRITICAL();
 8004000:	f000 fbea 	bl	80047d8 <vPortExitCritical>
}
 8004004:	4628      	mov	r0, r5
 8004006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400c:	f383 8811 	msr	BASEPRI, r3
 8004010:	f3bf 8f6f 	isb	sy
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	e7fe      	b.n	8004018 <xTaskCheckForTimeOut+0x54>
 800401a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	e7fe      	b.n	800402a <xTaskCheckForTimeOut+0x66>
				xReturn = pdFALSE;
 800402c:	2500      	movs	r5, #0
 800402e:	e7e7      	b.n	8004000 <xTaskCheckForTimeOut+0x3c>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004030:	6809      	ldr	r1, [r1, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004032:	f8dc 2000 	ldr.w	r2, [ip]
			*pxTicksToWait -= xElapsedTime;
 8004036:	1a1b      	subs	r3, r3, r0
 8004038:	602b      	str	r3, [r5, #0]
			xReturn = pdFALSE;
 800403a:	2500      	movs	r5, #0
	pxTimeOut->xTimeOnEntering = xTickCount;
 800403c:	e9c4 1200 	strd	r1, r2, [r4]
 8004040:	e7de      	b.n	8004000 <xTaskCheckForTimeOut+0x3c>
			xReturn = pdTRUE;
 8004042:	2501      	movs	r5, #1
 8004044:	e7dc      	b.n	8004000 <xTaskCheckForTimeOut+0x3c>
 8004046:	bf00      	nop
 8004048:	20000b40 	.word	0x20000b40
 800404c:	20000b84 	.word	0x20000b84

08004050 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8004050:	4b01      	ldr	r3, [pc, #4]	; (8004058 <vTaskMissedYield+0x8>)
 8004052:	2201      	movs	r2, #1
 8004054:	601a      	str	r2, [r3, #0]
}
 8004056:	4770      	bx	lr
 8004058:	20000b88 	.word	0x20000b88

0800405c <uxTaskGetTaskNumber>:
		if( xTask != NULL )
 800405c:	b100      	cbz	r0, 8004060 <uxTaskGetTaskNumber+0x4>
			uxReturn = pxTCB->uxTaskNumber;
 800405e:	6c80      	ldr	r0, [r0, #72]	; 0x48
	}
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop

08004064 <vTaskSetTaskNumber>:
		if( xTask != NULL )
 8004064:	b100      	cbz	r0, 8004068 <vTaskSetTaskNumber+0x4>
			pxTCB->uxTaskNumber = uxHandle;
 8004066:	6481      	str	r1, [r0, #72]	; 0x48
	}
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop

0800406c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800406c:	4b01      	ldr	r3, [pc, #4]	; (8004074 <xTaskGetCurrentTaskHandle+0x8>)
 800406e:	6818      	ldr	r0, [r3, #0]
	}
 8004070:	4770      	bx	lr
 8004072:	bf00      	nop
 8004074:	20000a60 	.word	0x20000a60

08004078 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8004078:	4b05      	ldr	r3, [pc, #20]	; (8004090 <xTaskGetSchedulerState+0x18>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	b133      	cbz	r3, 800408c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800407e:	4b05      	ldr	r3, [pc, #20]	; (8004094 <xTaskGetSchedulerState+0x1c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8004084:	bf0c      	ite	eq
 8004086:	2002      	moveq	r0, #2
 8004088:	2000      	movne	r0, #0
 800408a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800408c:	2001      	movs	r0, #1
	}
 800408e:	4770      	bx	lr
 8004090:	20000b58 	.word	0x20000b58
 8004094:	20000b08 	.word	0x20000b08

08004098 <xTaskPriorityInherit>:
		if( pxMutexHolder != NULL )
 8004098:	2800      	cmp	r0, #0
 800409a:	d02e      	beq.n	80040fa <xTaskPriorityInherit+0x62>
	{
 800409c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80040a0:	4d43      	ldr	r5, [pc, #268]	; (80041b0 <xTaskPriorityInherit+0x118>)
 80040a2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80040a4:	682a      	ldr	r2, [r5, #0]
 80040a6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d21d      	bcs.n	80040e8 <xTaskPriorityInherit+0x50>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80040ac:	6982      	ldr	r2, [r0, #24]
 80040ae:	2a00      	cmp	r2, #0
 80040b0:	db04      	blt.n	80040bc <xTaskPriorityInherit+0x24>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040b2:	682a      	ldr	r2, [r5, #0]
 80040b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040b6:	f1c2 0207 	rsb	r2, r2, #7
 80040ba:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80040bc:	4e3d      	ldr	r6, [pc, #244]	; (80041b4 <xTaskPriorityInherit+0x11c>)
 80040be:	6942      	ldr	r2, [r0, #20]
 80040c0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80040c4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80040c8:	429a      	cmp	r2, r3
 80040ca:	4604      	mov	r4, r0
 80040cc:	d034      	beq.n	8004138 <xTaskPriorityInherit+0xa0>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80040ce:	682b      	ldr	r3, [r5, #0]
 80040d0:	4f39      	ldr	r7, [pc, #228]	; (80041b8 <xTaskPriorityInherit+0x120>)
 80040d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040d4:	62c3      	str	r3, [r0, #44]	; 0x2c
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80040d6:	4620      	mov	r0, r4
 80040d8:	f000 fcb6 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 80040dc:	883b      	ldrh	r3, [r7, #0]
 80040de:	4218      	tst	r0, r3
 80040e0:	d10c      	bne.n	80040fc <xTaskPriorityInherit+0x64>
				xReturn = pdTRUE;
 80040e2:	2001      	movs	r0, #1
	}
 80040e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	4298      	cmp	r0, r3
 80040f0:	bf2c      	ite	cs
 80040f2:	2000      	movcs	r0, #0
 80040f4:	2001      	movcc	r0, #1
	}
 80040f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80040fa:	4770      	bx	lr
				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );
 80040fc:	4620      	mov	r0, r4
 80040fe:	f000 fc9d 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8004102:	4606      	mov	r6, r0
 8004104:	4620      	mov	r0, r4
 8004106:	f000 fc99 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 800410a:	b2c1      	uxtb	r1, r0
 800410c:	2003      	movs	r0, #3
 800410e:	f000 ff7b 	bl	8005008 <prvTraceGetPriorityProperty>
 8004112:	b2f2      	uxtb	r2, r6
 8004114:	4603      	mov	r3, r0
 8004116:	2103      	movs	r1, #3
 8004118:	208e      	movs	r0, #142	; 0x8e
 800411a:	f001 fd9f 	bl	8005c5c <prvTraceStoreKernelCallWithParam>
 800411e:	4620      	mov	r0, r4
 8004120:	f000 fc8c 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8004124:	682b      	ldr	r3, [r5, #0]
 8004126:	b2c1      	uxtb	r1, r0
 8004128:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 800412c:	2003      	movs	r0, #3
 800412e:	f000 fec1 	bl	8004eb4 <prvTraceSetPriorityProperty>
				xReturn = pdTRUE;
 8004132:	2001      	movs	r0, #1
	}
 8004134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004138:	f100 0804 	add.w	r8, r0, #4
 800413c:	4640      	mov	r0, r8
 800413e:	f7fe fbed 	bl	800291c <uxListRemove>
 8004142:	b1d8      	cbz	r0, 800417c <xTaskPriorityInherit+0xe4>
 8004144:	f8df 9074 	ldr.w	r9, [pc, #116]	; 80041bc <xTaskPriorityInherit+0x124>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004148:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800414a:	4f1b      	ldr	r7, [pc, #108]	; (80041b8 <xTaskPriorityInherit+0x120>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004150:	4620      	mov	r0, r4
 8004152:	f000 fc79 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8004156:	883b      	ldrh	r3, [r7, #0]
 8004158:	4218      	tst	r0, r3
 800415a:	d122      	bne.n	80041a2 <xTaskPriorityInherit+0x10a>
 800415c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800415e:	f8d9 2000 	ldr.w	r2, [r9]
 8004162:	2301      	movs	r3, #1
 8004164:	4083      	lsls	r3, r0
 8004166:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800416a:	4313      	orrs	r3, r2
 800416c:	4641      	mov	r1, r8
 800416e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
 8004172:	f8c9 3000 	str.w	r3, [r9]
 8004176:	f7fe fba7 	bl	80028c8 <vListInsertEnd>
 800417a:	e7ac      	b.n	80040d6 <xTaskPriorityInherit+0x3e>
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800417c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800417e:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80041bc <xTaskPriorityInherit+0x124>
 8004182:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	58f3      	ldr	r3, [r6, r3]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1dc      	bne.n	8004148 <xTaskPriorityInherit+0xb0>
 800418e:	f8d9 3000 	ldr.w	r3, [r9]
 8004192:	2101      	movs	r1, #1
 8004194:	fa01 f202 	lsl.w	r2, r1, r2
 8004198:	ea23 0202 	bic.w	r2, r3, r2
 800419c:	f8c9 2000 	str.w	r2, [r9]
 80041a0:	e7d2      	b.n	8004148 <xTaskPriorityInherit+0xb0>
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80041a2:	4620      	mov	r0, r4
 80041a4:	f000 fc4a 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 80041a8:	b2c0      	uxtb	r0, r0
 80041aa:	f002 fae5 	bl	8006778 <prvTraceStoreTaskReady>
 80041ae:	e7d5      	b.n	800415c <xTaskPriorityInherit+0xc4>
 80041b0:	20000a60 	.word	0x20000a60
 80041b4:	20000a6c 	.word	0x20000a6c
 80041b8:	20000014 	.word	0x20000014
 80041bc:	20000b10 	.word	0x20000b10

080041c0 <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
 80041c0:	b170      	cbz	r0, 80041e0 <xTaskPriorityDisinherit+0x20>
	{
 80041c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			configASSERT( pxTCB == pxCurrentTCB );
 80041c6:	4b41      	ldr	r3, [pc, #260]	; (80042cc <xTaskPriorityDisinherit+0x10c>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4283      	cmp	r3, r0
 80041cc:	d00a      	beq.n	80041e4 <xTaskPriorityDisinherit+0x24>
 80041ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041d2:	f383 8811 	msr	BASEPRI, r3
 80041d6:	f3bf 8f6f 	isb	sy
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	e7fe      	b.n	80041de <xTaskPriorityDisinherit+0x1e>
	BaseType_t xReturn = pdFALSE;
 80041e0:	2000      	movs	r0, #0
	}
 80041e2:	4770      	bx	lr
			configASSERT( pxTCB->uxMutexesHeld );
 80041e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e6:	b943      	cbnz	r3, 80041fa <xTaskPriorityDisinherit+0x3a>
 80041e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ec:	f383 8811 	msr	BASEPRI, r3
 80041f0:	f3bf 8f6f 	isb	sy
 80041f4:	f3bf 8f4f 	dsb	sy
 80041f8:	e7fe      	b.n	80041f8 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80041fa:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80041fc:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 80041fe:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004200:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8004202:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004204:	d000      	beq.n	8004208 <xTaskPriorityDisinherit+0x48>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004206:	b113      	cbz	r3, 800420e <xTaskPriorityDisinherit+0x4e>
	BaseType_t xReturn = pdFALSE;
 8004208:	2000      	movs	r0, #0
	}
 800420a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800420e:	1d07      	adds	r7, r0, #4
 8004210:	4604      	mov	r4, r0
 8004212:	4638      	mov	r0, r7
 8004214:	f7fe fb82 	bl	800291c <uxListRemove>
 8004218:	2800      	cmp	r0, #0
 800421a:	d046      	beq.n	80042aa <xTaskPriorityDisinherit+0xea>
 800421c:	4e2c      	ldr	r6, [pc, #176]	; (80042d0 <xTaskPriorityDisinherit+0x110>)
 800421e:	4d2d      	ldr	r5, [pc, #180]	; (80042d4 <xTaskPriorityDisinherit+0x114>)
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 8004220:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80042d8 <xTaskPriorityDisinherit+0x118>
 8004224:	4620      	mov	r0, r4
 8004226:	f000 fc0f 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 800422a:	f8b8 3000 	ldrh.w	r3, [r8]
 800422e:	4218      	tst	r0, r3
 8004230:	d01a      	beq.n	8004268 <xTaskPriorityDisinherit+0xa8>
 8004232:	4620      	mov	r0, r4
 8004234:	f000 fc02 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8004238:	4681      	mov	r9, r0
 800423a:	4620      	mov	r0, r4
 800423c:	f000 fbfe 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8004240:	b2c1      	uxtb	r1, r0
 8004242:	2003      	movs	r0, #3
 8004244:	f000 fee0 	bl	8005008 <prvTraceGetPriorityProperty>
 8004248:	fa5f f289 	uxtb.w	r2, r9
 800424c:	4603      	mov	r3, r0
 800424e:	2103      	movs	r1, #3
 8004250:	208f      	movs	r0, #143	; 0x8f
 8004252:	f001 fd03 	bl	8005c5c <prvTraceStoreKernelCallWithParam>
 8004256:	4620      	mov	r0, r4
 8004258:	f000 fbf0 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 800425c:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8004260:	b2c1      	uxtb	r1, r0
 8004262:	2003      	movs	r0, #3
 8004264:	f000 fe26 	bl	8004eb4 <prvTraceSetPriorityProperty>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004268:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800426a:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800426c:	f1c3 0307 	rsb	r3, r3, #7
 8004270:	61a3      	str	r3, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8004272:	4620      	mov	r0, r4
 8004274:	f000 fbe8 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8004278:	f8b8 3000 	ldrh.w	r3, [r8]
 800427c:	4218      	tst	r0, r3
 800427e:	d005      	beq.n	800428c <xTaskPriorityDisinherit+0xcc>
 8004280:	4620      	mov	r0, r4
 8004282:	f000 fbdb 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8004286:	b2c0      	uxtb	r0, r0
 8004288:	f002 fa76 	bl	8006778 <prvTraceStoreTaskReady>
 800428c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800428e:	682a      	ldr	r2, [r5, #0]
 8004290:	2401      	movs	r4, #1
 8004292:	2014      	movs	r0, #20
 8004294:	fb00 6003 	mla	r0, r0, r3, r6
 8004298:	fa04 f303 	lsl.w	r3, r4, r3
 800429c:	4313      	orrs	r3, r2
 800429e:	4639      	mov	r1, r7
 80042a0:	602b      	str	r3, [r5, #0]
 80042a2:	f7fe fb11 	bl	80028c8 <vListInsertEnd>
					xReturn = pdTRUE;
 80042a6:	4620      	mov	r0, r4
		return xReturn;
 80042a8:	e7af      	b.n	800420a <xTaskPriorityDisinherit+0x4a>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80042aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80042ac:	4e08      	ldr	r6, [pc, #32]	; (80042d0 <xTaskPriorityDisinherit+0x110>)
 80042ae:	4d09      	ldr	r5, [pc, #36]	; (80042d4 <xTaskPriorityDisinherit+0x114>)
 80042b0:	2314      	movs	r3, #20
 80042b2:	fb03 f301 	mul.w	r3, r3, r1
 80042b6:	58f3      	ldr	r3, [r6, r3]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1b1      	bne.n	8004220 <xTaskPriorityDisinherit+0x60>
 80042bc:	682b      	ldr	r3, [r5, #0]
 80042be:	2201      	movs	r2, #1
 80042c0:	408a      	lsls	r2, r1
 80042c2:	ea23 0302 	bic.w	r3, r3, r2
 80042c6:	602b      	str	r3, [r5, #0]
 80042c8:	e7aa      	b.n	8004220 <xTaskPriorityDisinherit+0x60>
 80042ca:	bf00      	nop
 80042cc:	20000a60 	.word	0x20000a60
 80042d0:	20000a6c 	.word	0x20000a6c
 80042d4:	20000b10 	.word	0x20000b10
 80042d8:	20000014 	.word	0x20000014

080042dc <vTaskPriorityDisinheritAfterTimeout>:
		if( pxMutexHolder != NULL )
 80042dc:	b1c0      	cbz	r0, 8004310 <vTaskPriorityDisinheritAfterTimeout+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042de:	6d03      	ldr	r3, [r0, #80]	; 0x50
	{
 80042e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042e4:	4604      	mov	r4, r0
			configASSERT( pxTCB->uxMutexesHeld );
 80042e6:	b943      	cbnz	r3, 80042fa <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80042e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ec:	f383 8811 	msr	BASEPRI, r3
 80042f0:	f3bf 8f6f 	isb	sy
 80042f4:	f3bf 8f4f 	dsb	sy
 80042f8:	e7fe      	b.n	80042f8 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 80042fa:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
			if( pxTCB->uxPriority != uxPriorityToUse )
 80042fc:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80042fe:	428d      	cmp	r5, r1
 8004300:	bf38      	it	cc
 8004302:	460d      	movcc	r5, r1
 8004304:	42aa      	cmp	r2, r5
 8004306:	d001      	beq.n	800430c <vTaskPriorityDisinheritAfterTimeout+0x30>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004308:	2b01      	cmp	r3, #1
 800430a:	d002      	beq.n	8004312 <vTaskPriorityDisinheritAfterTimeout+0x36>
	}
 800430c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004310:	4770      	bx	lr
					configASSERT( pxTCB != pxCurrentTCB );
 8004312:	4b35      	ldr	r3, [pc, #212]	; (80043e8 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4283      	cmp	r3, r0
 8004318:	d04f      	beq.n	80043ba <vTaskPriorityDisinheritAfterTimeout+0xde>
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
 800431a:	4f34      	ldr	r7, [pc, #208]	; (80043ec <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800431c:	f000 fb94 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8004320:	883b      	ldrh	r3, [r7, #0]
 8004322:	4218      	tst	r0, r3
 8004324:	d019      	beq.n	800435a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8004326:	4620      	mov	r0, r4
 8004328:	f000 fb88 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 800432c:	4606      	mov	r6, r0
 800432e:	4620      	mov	r0, r4
 8004330:	f000 fb84 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8004334:	b2c1      	uxtb	r1, r0
 8004336:	2003      	movs	r0, #3
 8004338:	f000 fe66 	bl	8005008 <prvTraceGetPriorityProperty>
 800433c:	b2f2      	uxtb	r2, r6
 800433e:	4603      	mov	r3, r0
 8004340:	2103      	movs	r1, #3
 8004342:	208f      	movs	r0, #143	; 0x8f
 8004344:	f001 fc8a 	bl	8005c5c <prvTraceStoreKernelCallWithParam>
 8004348:	4620      	mov	r0, r4
 800434a:	f000 fb77 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 800434e:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
 8004352:	b2c1      	uxtb	r1, r0
 8004354:	2003      	movs	r0, #3
 8004356:	f000 fdad 	bl	8004eb4 <prvTraceSetPriorityProperty>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800435a:	69a2      	ldr	r2, [r4, #24]
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800435c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800435e:	4e24      	ldr	r6, [pc, #144]	; (80043f0 <vTaskPriorityDisinheritAfterTimeout+0x114>)
					pxTCB->uxPriority = uxPriorityToUse;
 8004360:	62e5      	str	r5, [r4, #44]	; 0x2c
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004362:	2a00      	cmp	r2, #0
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004364:	bfa4      	itt	ge
 8004366:	f1c5 0507 	rsbge	r5, r5, #7
 800436a:	61a5      	strge	r5, [r4, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800436c:	6962      	ldr	r2, [r4, #20]
 800436e:	2514      	movs	r5, #20
 8004370:	fb05 6303 	mla	r3, r5, r3, r6
 8004374:	429a      	cmp	r2, r3
 8004376:	d1c9      	bne.n	800430c <vTaskPriorityDisinheritAfterTimeout+0x30>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004378:	f104 0804 	add.w	r8, r4, #4
 800437c:	4640      	mov	r0, r8
 800437e:	f7fe facd 	bl	800291c <uxListRemove>
 8004382:	b318      	cbz	r0, 80043cc <vTaskPriorityDisinheritAfterTimeout+0xf0>
 8004384:	4d1b      	ldr	r5, [pc, #108]	; (80043f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
						prvAddTaskToReadyList( pxTCB );
 8004386:	4620      	mov	r0, r4
 8004388:	f000 fb5e 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 800438c:	883b      	ldrh	r3, [r7, #0]
 800438e:	4218      	tst	r0, r3
 8004390:	d005      	beq.n	800439e <vTaskPriorityDisinheritAfterTimeout+0xc2>
 8004392:	4620      	mov	r0, r4
 8004394:	f000 fb52 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8004398:	b2c0      	uxtb	r0, r0
 800439a:	f002 f9ed 	bl	8006778 <prvTraceStoreTaskReady>
 800439e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80043a0:	682c      	ldr	r4, [r5, #0]
 80043a2:	2301      	movs	r3, #1
 80043a4:	4093      	lsls	r3, r2
 80043a6:	4323      	orrs	r3, r4
 80043a8:	2014      	movs	r0, #20
 80043aa:	4641      	mov	r1, r8
 80043ac:	fb00 6002 	mla	r0, r0, r2, r6
 80043b0:	602b      	str	r3, [r5, #0]
	}
 80043b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
						prvAddTaskToReadyList( pxTCB );
 80043b6:	f7fe ba87 	b.w	80028c8 <vListInsertEnd>
 80043ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043be:	f383 8811 	msr	BASEPRI, r3
 80043c2:	f3bf 8f6f 	isb	sy
 80043c6:	f3bf 8f4f 	dsb	sy
 80043ca:	e7fe      	b.n	80043ca <vTaskPriorityDisinheritAfterTimeout+0xee>
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80043cc:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80043ce:	fb05 f501 	mul.w	r5, r5, r1
 80043d2:	5973      	ldr	r3, [r6, r5]
 80043d4:	4d07      	ldr	r5, [pc, #28]	; (80043f4 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1d5      	bne.n	8004386 <vTaskPriorityDisinheritAfterTimeout+0xaa>
 80043da:	682b      	ldr	r3, [r5, #0]
 80043dc:	2201      	movs	r2, #1
 80043de:	408a      	lsls	r2, r1
 80043e0:	ea23 0302 	bic.w	r3, r3, r2
 80043e4:	602b      	str	r3, [r5, #0]
 80043e6:	e7ce      	b.n	8004386 <vTaskPriorityDisinheritAfterTimeout+0xaa>
 80043e8:	20000a60 	.word	0x20000a60
 80043ec:	20000014 	.word	0x20000014
 80043f0:	20000a6c 	.word	0x20000a6c
 80043f4:	20000b10 	.word	0x20000b10

080043f8 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 80043f8:	4b04      	ldr	r3, [pc, #16]	; (800440c <pvTaskIncrementMutexHeldCount+0x14>)
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	b11a      	cbz	r2, 8004406 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 80043fe:	6819      	ldr	r1, [r3, #0]
 8004400:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004402:	3201      	adds	r2, #1
 8004404:	650a      	str	r2, [r1, #80]	; 0x50
		return pxCurrentTCB;
 8004406:	6818      	ldr	r0, [r3, #0]
	}
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20000a60 	.word	0x20000a60

08004410 <ulTaskNotifyTake>:
	{
 8004410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8004414:	4c5b      	ldr	r4, [pc, #364]	; (8004584 <ulTaskNotifyTake+0x174>)
	{
 8004416:	4607      	mov	r7, r0
 8004418:	460e      	mov	r6, r1
		taskENTER_CRITICAL();
 800441a:	f000 f9bb 	bl	8004794 <vPortEnterCritical>
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800441e:	6823      	ldr	r3, [r4, #0]
 8004420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004422:	b92b      	cbnz	r3, 8004430 <ulTaskNotifyTake+0x20>
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8004424:	6823      	ldr	r3, [r4, #0]
 8004426:	2501      	movs	r5, #1
 8004428:	f883 505c 	strb.w	r5, [r3, #92]	; 0x5c
				if( xTicksToWait > ( TickType_t ) 0 )
 800442c:	2e00      	cmp	r6, #0
 800442e:	d14a      	bne.n	80044c6 <ulTaskNotifyTake+0xb6>
 8004430:	4d55      	ldr	r5, [pc, #340]	; (8004588 <ulTaskNotifyTake+0x178>)
		taskEXIT_CRITICAL();
 8004432:	f000 f9d1 	bl	80047d8 <vPortExitCritical>
		taskENTER_CRITICAL();
 8004436:	f000 f9ad 	bl	8004794 <vPortEnterCritical>
			traceTASK_NOTIFY_TAKE();
 800443a:	6823      	ldr	r3, [r4, #0]
 800443c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004440:	2b02      	cmp	r3, #2
 8004442:	d029      	beq.n	8004498 <ulTaskNotifyTake+0x88>
 8004444:	f000 fb4a 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 8004448:	f000 fafe 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 800444c:	882b      	ldrh	r3, [r5, #0]
 800444e:	4218      	tst	r0, r3
 8004450:	d112      	bne.n	8004478 <ulTaskNotifyTake+0x68>
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	6d9d      	ldr	r5, [r3, #88]	; 0x58
			if( ulReturn != 0UL )
 8004456:	b11d      	cbz	r5, 8004460 <ulTaskNotifyTake+0x50>
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004458:	6823      	ldr	r3, [r4, #0]
				if( xClearCountOnExit != pdFALSE )
 800445a:	b957      	cbnz	r7, 8004472 <ulTaskNotifyTake+0x62>
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800445c:	1e6a      	subs	r2, r5, #1
 800445e:	659a      	str	r2, [r3, #88]	; 0x58
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
		taskEXIT_CRITICAL();
 8004468:	f000 f9b6 	bl	80047d8 <vPortExitCritical>
	}
 800446c:	4628      	mov	r0, r5
 800446e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					pxCurrentTCB->ulNotifiedValue = 0UL;
 8004472:	2200      	movs	r2, #0
 8004474:	659a      	str	r2, [r3, #88]	; 0x58
 8004476:	e7f3      	b.n	8004460 <ulTaskNotifyTake+0x50>
			traceTASK_NOTIFY_TAKE();
 8004478:	6820      	ldr	r0, [r4, #0]
 800447a:	f000 fae5 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 800447e:	882b      	ldrh	r3, [r5, #0]
 8004480:	4218      	tst	r0, r3
 8004482:	d0e6      	beq.n	8004452 <ulTaskNotifyTake+0x42>
 8004484:	6820      	ldr	r0, [r4, #0]
 8004486:	f000 fad9 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 800448a:	4633      	mov	r3, r6
 800448c:	b2c2      	uxtb	r2, r0
 800448e:	2103      	movs	r1, #3
 8004490:	20d5      	movs	r0, #213	; 0xd5
 8004492:	f001 fbe3 	bl	8005c5c <prvTraceStoreKernelCallWithParam>
 8004496:	e7dc      	b.n	8004452 <ulTaskNotifyTake+0x42>
 8004498:	f000 fb20 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 800449c:	f000 fad4 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 80044a0:	882b      	ldrh	r3, [r5, #0]
 80044a2:	4218      	tst	r0, r3
 80044a4:	d0d5      	beq.n	8004452 <ulTaskNotifyTake+0x42>
 80044a6:	6820      	ldr	r0, [r4, #0]
 80044a8:	f000 face 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 80044ac:	882b      	ldrh	r3, [r5, #0]
 80044ae:	4218      	tst	r0, r3
 80044b0:	d0cf      	beq.n	8004452 <ulTaskNotifyTake+0x42>
 80044b2:	6820      	ldr	r0, [r4, #0]
 80044b4:	f000 fac2 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 80044b8:	4633      	mov	r3, r6
 80044ba:	b2c2      	uxtb	r2, r0
 80044bc:	2103      	movs	r1, #3
 80044be:	20d3      	movs	r0, #211	; 0xd3
 80044c0:	f001 fbcc 	bl	8005c5c <prvTraceStoreKernelCallWithParam>
 80044c4:	e7c5      	b.n	8004452 <ulTaskNotifyTake+0x42>
const TickType_t xConstTickCount = xTickCount;
 80044c6:	4b31      	ldr	r3, [pc, #196]	; (800458c <ulTaskNotifyTake+0x17c>)
 80044c8:	f8d3 8000 	ldr.w	r8, [r3]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044cc:	6820      	ldr	r0, [r4, #0]
 80044ce:	3004      	adds	r0, #4
 80044d0:	f7fe fa24 	bl	800291c <uxListRemove>
 80044d4:	b938      	cbnz	r0, 80044e6 <ulTaskNotifyTake+0xd6>
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	4a2d      	ldr	r2, [pc, #180]	; (8004590 <ulTaskNotifyTake+0x180>)
 80044da:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044dc:	6813      	ldr	r3, [r2, #0]
 80044de:	408d      	lsls	r5, r1
 80044e0:	ea23 0505 	bic.w	r5, r3, r5
 80044e4:	6015      	str	r5, [r2, #0]
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044e6:	1c73      	adds	r3, r6, #1
 80044e8:	d027      	beq.n	800453a <ulTaskNotifyTake+0x12a>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044ea:	6823      	ldr	r3, [r4, #0]
 80044ec:	eb16 0508 	adds.w	r5, r6, r8
 80044f0:	605d      	str	r5, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044f2:	d240      	bcs.n	8004576 <ulTaskNotifyTake+0x166>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044f4:	4b27      	ldr	r3, [pc, #156]	; (8004594 <ulTaskNotifyTake+0x184>)
 80044f6:	6818      	ldr	r0, [r3, #0]
 80044f8:	6821      	ldr	r1, [r4, #0]
 80044fa:	3104      	adds	r1, #4
 80044fc:	f7fe f9f4 	bl	80028e8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004500:	4b25      	ldr	r3, [pc, #148]	; (8004598 <ulTaskNotifyTake+0x188>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4295      	cmp	r5, r2
					xNextTaskUnblockTime = xTimeToWake;
 8004506:	bf38      	it	cc
 8004508:	601d      	strcc	r5, [r3, #0]
					traceTASK_NOTIFY_TAKE_BLOCK();
 800450a:	f000 fae7 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 800450e:	4d1e      	ldr	r5, [pc, #120]	; (8004588 <ulTaskNotifyTake+0x178>)
 8004510:	f000 fa9a 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8004514:	882b      	ldrh	r3, [r5, #0]
 8004516:	4218      	tst	r0, r3
 8004518:	d11d      	bne.n	8004556 <ulTaskNotifyTake+0x146>
 800451a:	f000 fadf 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 800451e:	f000 fa93 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8004522:	882b      	ldrh	r3, [r5, #0]
 8004524:	4218      	tst	r0, r3
 8004526:	d10e      	bne.n	8004546 <ulTaskNotifyTake+0x136>
					portYIELD_WITHIN_API();
 8004528:	4b1c      	ldr	r3, [pc, #112]	; (800459c <ulTaskNotifyTake+0x18c>)
 800452a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800452e:	601a      	str	r2, [r3, #0]
 8004530:	f3bf 8f4f 	dsb	sy
 8004534:	f3bf 8f6f 	isb	sy
 8004538:	e77b      	b.n	8004432 <ulTaskNotifyTake+0x22>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800453a:	6821      	ldr	r1, [r4, #0]
 800453c:	4818      	ldr	r0, [pc, #96]	; (80045a0 <ulTaskNotifyTake+0x190>)
 800453e:	3104      	adds	r1, #4
 8004540:	f7fe f9c2 	bl	80028c8 <vListInsertEnd>
 8004544:	e7e1      	b.n	800450a <ulTaskNotifyTake+0xfa>
					traceTASK_NOTIFY_TAKE_BLOCK();
 8004546:	f000 fac9 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 800454a:	f000 fa77 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 800454e:	b2c0      	uxtb	r0, r0
 8004550:	f000 feac 	bl	80052ac <prvTraceSetTaskInstanceFinished>
 8004554:	e7e8      	b.n	8004528 <ulTaskNotifyTake+0x118>
 8004556:	6820      	ldr	r0, [r4, #0]
 8004558:	f000 fa76 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 800455c:	882b      	ldrh	r3, [r5, #0]
 800455e:	4218      	tst	r0, r3
 8004560:	d0db      	beq.n	800451a <ulTaskNotifyTake+0x10a>
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	f000 fa6a 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8004568:	4633      	mov	r3, r6
 800456a:	b2c2      	uxtb	r2, r0
 800456c:	2103      	movs	r1, #3
 800456e:	20d4      	movs	r0, #212	; 0xd4
 8004570:	f001 fb74 	bl	8005c5c <prvTraceStoreKernelCallWithParam>
 8004574:	e7d1      	b.n	800451a <ulTaskNotifyTake+0x10a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004576:	4b0b      	ldr	r3, [pc, #44]	; (80045a4 <ulTaskNotifyTake+0x194>)
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	6821      	ldr	r1, [r4, #0]
 800457c:	3104      	adds	r1, #4
 800457e:	f7fe f9b3 	bl	80028e8 <vListInsert>
 8004582:	e7c2      	b.n	800450a <ulTaskNotifyTake+0xfa>
 8004584:	20000a60 	.word	0x20000a60
 8004588:	20000014 	.word	0x20000014
 800458c:	20000b84 	.word	0x20000b84
 8004590:	20000b10 	.word	0x20000b10
 8004594:	20000a64 	.word	0x20000a64
 8004598:	20000b3c 	.word	0x20000b3c
 800459c:	e000ed04 	.word	0xe000ed04
 80045a0:	20000b5c 	.word	0x20000b5c
 80045a4:	20000a68 	.word	0x20000a68

080045a8 <vTaskNotifyGiveFromISR>:
		configASSERT( xTaskToNotify );
 80045a8:	b338      	cbz	r0, 80045fa <vTaskNotifyGiveFromISR+0x52>
	{
 80045aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ae:	4604      	mov	r4, r0
 80045b0:	460d      	mov	r5, r1
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80045b2:	f000 fa13 	bl	80049dc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80045b6:	f3ef 8711 	mrs	r7, BASEPRI
 80045ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045be:	f383 8811 	msr	BASEPRI, r3
 80045c2:	f3bf 8f6f 	isb	sy
 80045c6:	f3bf 8f4f 	dsb	sy
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80045ca:	2302      	movs	r3, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80045cc:	f894 605c 	ldrb.w	r6, [r4, #92]	; 0x5c
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80045d0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
			( pxTCB->ulNotifiedValue )++;
 80045d4:	6da3      	ldr	r3, [r4, #88]	; 0x58
			traceTASK_NOTIFY_GIVE_FROM_ISR();
 80045d6:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80046bc <vTaskNotifyGiveFromISR+0x114>
			( pxTCB->ulNotifiedValue )++;
 80045da:	3301      	adds	r3, #1
 80045dc:	65a3      	str	r3, [r4, #88]	; 0x58
			traceTASK_NOTIFY_GIVE_FROM_ISR();
 80045de:	4620      	mov	r0, r4
 80045e0:	f000 fa32 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 80045e4:	f8b8 3000 	ldrh.w	r3, [r8]
 80045e8:	4218      	tst	r0, r3
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80045ea:	b2f6      	uxtb	r6, r6
			traceTASK_NOTIFY_GIVE_FROM_ISR();
 80045ec:	d10e      	bne.n	800460c <vTaskNotifyGiveFromISR+0x64>
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80045ee:	2e01      	cmp	r6, #1
 80045f0:	d015      	beq.n	800461e <vTaskNotifyGiveFromISR+0x76>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80045f2:	f387 8811 	msr	BASEPRI, r7
	}
 80045f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm volatile
 80045fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045fe:	f383 8811 	msr	BASEPRI, r3
 8004602:	f3bf 8f6f 	isb	sy
 8004606:	f3bf 8f4f 	dsb	sy
 800460a:	e7fe      	b.n	800460a <vTaskNotifyGiveFromISR+0x62>
			traceTASK_NOTIFY_GIVE_FROM_ISR();
 800460c:	4620      	mov	r0, r4
 800460e:	f000 fa15 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8004612:	2103      	movs	r1, #3
 8004614:	b2c2      	uxtb	r2, r0
 8004616:	20da      	movs	r0, #218	; 0xda
 8004618:	f001 fa40 	bl	8005a9c <prvTraceStoreKernelCall>
 800461c:	e7e7      	b.n	80045ee <vTaskNotifyGiveFromISR+0x46>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800461e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004620:	b143      	cbz	r3, 8004634 <vTaskNotifyGiveFromISR+0x8c>
 8004622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004626:	f383 8811 	msr	BASEPRI, r3
 800462a:	f3bf 8f6f 	isb	sy
 800462e:	f3bf 8f4f 	dsb	sy
 8004632:	e7fe      	b.n	8004632 <vTaskNotifyGiveFromISR+0x8a>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004634:	4b1c      	ldr	r3, [pc, #112]	; (80046a8 <vTaskNotifyGiveFromISR+0x100>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	bb5b      	cbnz	r3, 8004692 <vTaskNotifyGiveFromISR+0xea>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800463a:	1d26      	adds	r6, r4, #4
 800463c:	4630      	mov	r0, r6
 800463e:	f7fe f96d 	bl	800291c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004642:	4620      	mov	r0, r4
 8004644:	f000 fa00 	bl	8004a48 <prvTraceGetTaskNumberHigh16>
 8004648:	f8b8 3000 	ldrh.w	r3, [r8]
 800464c:	4218      	tst	r0, r3
 800464e:	d005      	beq.n	800465c <vTaskNotifyGiveFromISR+0xb4>
 8004650:	4620      	mov	r0, r4
 8004652:	f000 f9f3 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8004656:	b2c0      	uxtb	r0, r0
 8004658:	f002 f88e 	bl	8006778 <prvTraceStoreTaskReady>
 800465c:	4a13      	ldr	r2, [pc, #76]	; (80046ac <vTaskNotifyGiveFromISR+0x104>)
 800465e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004660:	f8d2 e000 	ldr.w	lr, [r2]
 8004664:	f8df c058 	ldr.w	ip, [pc, #88]	; 80046c0 <vTaskNotifyGiveFromISR+0x118>
 8004668:	2301      	movs	r3, #1
 800466a:	4083      	lsls	r3, r0
 800466c:	4631      	mov	r1, r6
 800466e:	2614      	movs	r6, #20
 8004670:	ea43 030e 	orr.w	r3, r3, lr
 8004674:	fb06 c000 	mla	r0, r6, r0, ip
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	f7fe f925 	bl	80028c8 <vListInsertEnd>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800467e:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <vTaskNotifyGiveFromISR+0x108>)
 8004680:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	429a      	cmp	r2, r3
 8004688:	d9b3      	bls.n	80045f2 <vTaskNotifyGiveFromISR+0x4a>
					if( pxHigherPriorityTaskWoken != NULL )
 800468a:	b145      	cbz	r5, 800469e <vTaskNotifyGiveFromISR+0xf6>
						*pxHigherPriorityTaskWoken = pdTRUE;
 800468c:	2301      	movs	r3, #1
 800468e:	602b      	str	r3, [r5, #0]
 8004690:	e7af      	b.n	80045f2 <vTaskNotifyGiveFromISR+0x4a>
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004692:	f104 0118 	add.w	r1, r4, #24
 8004696:	4807      	ldr	r0, [pc, #28]	; (80046b4 <vTaskNotifyGiveFromISR+0x10c>)
 8004698:	f7fe f916 	bl	80028c8 <vListInsertEnd>
 800469c:	e7ef      	b.n	800467e <vTaskNotifyGiveFromISR+0xd6>
						xYieldPending = pdTRUE;
 800469e:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <vTaskNotifyGiveFromISR+0x110>)
 80046a0:	2201      	movs	r2, #1
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	e7a5      	b.n	80045f2 <vTaskNotifyGiveFromISR+0x4a>
 80046a6:	bf00      	nop
 80046a8:	20000b08 	.word	0x20000b08
 80046ac:	20000b10 	.word	0x20000b10
 80046b0:	20000a60 	.word	0x20000a60
 80046b4:	20000b44 	.word	0x20000b44
 80046b8:	20000b88 	.word	0x20000b88
 80046bc:	20000014 	.word	0x20000014
 80046c0:	20000a6c 	.word	0x20000a6c

080046c4 <prvTaskExitError>:
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046c4:	4b0e      	ldr	r3, [pc, #56]	; (8004700 <prvTaskExitError+0x3c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
{
 80046c8:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80046ca:	2200      	movs	r2, #0
	configASSERT( uxCriticalNesting == ~0UL );
 80046cc:	3301      	adds	r3, #1
volatile uint32_t ulDummy = 0;
 80046ce:	9201      	str	r2, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80046d0:	d008      	beq.n	80046e4 <prvTaskExitError+0x20>
 80046d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	e7fe      	b.n	80046e2 <prvTaskExitError+0x1e>
 80046e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80046f4:	9b01      	ldr	r3, [sp, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0fc      	beq.n	80046f4 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80046fa:	b002      	add	sp, #8
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000008 	.word	0x20000008

08004704 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004704:	4808      	ldr	r0, [pc, #32]	; (8004728 <prvPortStartFirstTask+0x24>)
 8004706:	6800      	ldr	r0, [r0, #0]
 8004708:	6800      	ldr	r0, [r0, #0]
 800470a:	f380 8808 	msr	MSP, r0
 800470e:	f04f 0000 	mov.w	r0, #0
 8004712:	f380 8814 	msr	CONTROL, r0
 8004716:	b662      	cpsie	i
 8004718:	b661      	cpsie	f
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	f3bf 8f6f 	isb	sy
 8004722:	df00      	svc	0
 8004724:	bf00      	nop
 8004726:	0000      	.short	0x0000
 8004728:	e000ed08 	.word	0xe000ed08

0800472c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800472c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800473c <vPortEnableVFP+0x10>
 8004730:	6801      	ldr	r1, [r0, #0]
 8004732:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004736:	6001      	str	r1, [r0, #0]
 8004738:	4770      	bx	lr
 800473a:	0000      	.short	0x0000
 800473c:	e000ed88 	.word	0xe000ed88

08004740 <pxPortInitialiseStack>:
{
 8004740:	b430      	push	{r4, r5}
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004742:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004746:	f04f 7580 	mov.w	r5, #16777216	; 0x1000000
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800474a:	4c07      	ldr	r4, [pc, #28]	; (8004768 <pxPortInitialiseStack+0x28>)
 800474c:	f840 4c0c 	str.w	r4, [r0, #-12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004750:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004754:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004758:	e940 1502 	strd	r1, r5, [r0, #-8]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800475c:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8004760:	bc30      	pop	{r4, r5}
 8004762:	3844      	subs	r0, #68	; 0x44
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	080046c5 	.word	0x080046c5
 800476c:	00000000 	.word	0x00000000

08004770 <SVC_Handler>:
	__asm volatile (
 8004770:	4b07      	ldr	r3, [pc, #28]	; (8004790 <pxCurrentTCBConst2>)
 8004772:	6819      	ldr	r1, [r3, #0]
 8004774:	6808      	ldr	r0, [r1, #0]
 8004776:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800477a:	f380 8809 	msr	PSP, r0
 800477e:	f3bf 8f6f 	isb	sy
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f380 8811 	msr	BASEPRI, r0
 800478a:	4770      	bx	lr
 800478c:	f3af 8000 	nop.w

08004790 <pxCurrentTCBConst2>:
 8004790:	20000a60 	.word	0x20000a60

08004794 <vPortEnterCritical>:
 8004794:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004798:	f383 8811 	msr	BASEPRI, r3
 800479c:	f3bf 8f6f 	isb	sy
 80047a0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80047a4:	4a0a      	ldr	r2, [pc, #40]	; (80047d0 <vPortEnterCritical+0x3c>)
 80047a6:	6813      	ldr	r3, [r2, #0]
 80047a8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80047aa:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80047ac:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80047ae:	d000      	beq.n	80047b2 <vPortEnterCritical+0x1e>
}
 80047b0:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047b2:	4b08      	ldr	r3, [pc, #32]	; (80047d4 <vPortEnterCritical+0x40>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80047ba:	d0f9      	beq.n	80047b0 <vPortEnterCritical+0x1c>
 80047bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c0:	f383 8811 	msr	BASEPRI, r3
 80047c4:	f3bf 8f6f 	isb	sy
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	e7fe      	b.n	80047cc <vPortEnterCritical+0x38>
 80047ce:	bf00      	nop
 80047d0:	20000008 	.word	0x20000008
 80047d4:	e000ed04 	.word	0xe000ed04

080047d8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80047d8:	4a08      	ldr	r2, [pc, #32]	; (80047fc <vPortExitCritical+0x24>)
 80047da:	6813      	ldr	r3, [r2, #0]
 80047dc:	b943      	cbnz	r3, 80047f0 <vPortExitCritical+0x18>
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	e7fe      	b.n	80047ee <vPortExitCritical+0x16>
	uxCriticalNesting--;
 80047f0:	3b01      	subs	r3, #1
 80047f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80047f4:	b90b      	cbnz	r3, 80047fa <vPortExitCritical+0x22>
	__asm volatile
 80047f6:	f383 8811 	msr	BASEPRI, r3
}
 80047fa:	4770      	bx	lr
 80047fc:	20000008 	.word	0x20000008

08004800 <PendSV_Handler>:
	__asm volatile
 8004800:	f3ef 8009 	mrs	r0, PSP
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4b15      	ldr	r3, [pc, #84]	; (8004860 <pxCurrentTCBConst>)
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	f01e 0f10 	tst.w	lr, #16
 8004810:	bf08      	it	eq
 8004812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800481a:	6010      	str	r0, [r2, #0]
 800481c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004820:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004824:	f380 8811 	msr	BASEPRI, r0
 8004828:	f3bf 8f4f 	dsb	sy
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f7ff faba 	bl	8003da8 <vTaskSwitchContext>
 8004834:	f04f 0000 	mov.w	r0, #0
 8004838:	f380 8811 	msr	BASEPRI, r0
 800483c:	bc09      	pop	{r0, r3}
 800483e:	6819      	ldr	r1, [r3, #0]
 8004840:	6808      	ldr	r0, [r1, #0]
 8004842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004846:	f01e 0f10 	tst.w	lr, #16
 800484a:	bf08      	it	eq
 800484c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004850:	f380 8809 	msr	PSP, r0
 8004854:	f3bf 8f6f 	isb	sy
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	f3af 8000 	nop.w

08004860 <pxCurrentTCBConst>:
 8004860:	20000a60 	.word	0x20000a60

08004864 <xPortSysTickHandler>:
{
 8004864:	b508      	push	{r3, lr}
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8004876:	f7ff f8e5 	bl	8003a44 <xTaskIncrementTick>
 800487a:	b118      	cbz	r0, 8004884 <xPortSysTickHandler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <xPortSysTickHandler+0x28>)
 800487e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004882:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004884:	2300      	movs	r3, #0
 8004886:	f383 8811 	msr	BASEPRI, r3
}
 800488a:	bd08      	pop	{r3, pc}
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <vPortSetupTimerInterrupt>:
{
 8004890:	b430      	push	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004892:	4a09      	ldr	r2, [pc, #36]	; (80048b8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004894:	4d09      	ldr	r5, [pc, #36]	; (80048bc <vPortSetupTimerInterrupt+0x2c>)
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004896:	4b0a      	ldr	r3, [pc, #40]	; (80048c0 <vPortSetupTimerInterrupt+0x30>)
 8004898:	4c0a      	ldr	r4, [pc, #40]	; (80048c4 <vPortSetupTimerInterrupt+0x34>)
 800489a:	480b      	ldr	r0, [pc, #44]	; (80048c8 <vPortSetupTimerInterrupt+0x38>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800489c:	2100      	movs	r1, #0
 800489e:	6011      	str	r1, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80048a0:	6029      	str	r1, [r5, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	fba4 1303 	umull	r1, r3, r4, r3
 80048a8:	099b      	lsrs	r3, r3, #6
 80048aa:	3b01      	subs	r3, #1
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048ac:	2107      	movs	r1, #7
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80048ae:	6003      	str	r3, [r0, #0]
}
 80048b0:	bc30      	pop	{r4, r5}
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80048b2:	6011      	str	r1, [r2, #0]
}
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	e000e010 	.word	0xe000e010
 80048bc:	e000e018 	.word	0xe000e018
 80048c0:	20000090 	.word	0x20000090
 80048c4:	10624dd3 	.word	0x10624dd3
 80048c8:	e000e014 	.word	0xe000e014

080048cc <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80048cc:	4b3a      	ldr	r3, [pc, #232]	; (80049b8 <xPortStartScheduler+0xec>)
 80048ce:	4a3b      	ldr	r2, [pc, #236]	; (80049bc <xPortStartScheduler+0xf0>)
 80048d0:	6819      	ldr	r1, [r3, #0]
 80048d2:	4291      	cmp	r1, r2
 80048d4:	d040      	beq.n	8004958 <xPortStartScheduler+0x8c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	4b39      	ldr	r3, [pc, #228]	; (80049c0 <xPortStartScheduler+0xf4>)
 80048da:	429a      	cmp	r2, r3
 80048dc:	d033      	beq.n	8004946 <xPortStartScheduler+0x7a>
{
 80048de:	b510      	push	{r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048e0:	4b38      	ldr	r3, [pc, #224]	; (80049c4 <xPortStartScheduler+0xf8>)
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80048e2:	4839      	ldr	r0, [pc, #228]	; (80049c8 <xPortStartScheduler+0xfc>)
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048e4:	781a      	ldrb	r2, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048e6:	4c39      	ldr	r4, [pc, #228]	; (80049cc <xPortStartScheduler+0x100>)
{
 80048e8:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048ea:	b2d2      	uxtb	r2, r2
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048ec:	21ff      	movs	r1, #255	; 0xff
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80048ee:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80048f0:	7019      	strb	r1, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80048fa:	f89d 3003 	ldrb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80048fe:	f89d 2003 	ldrb.w	r2, [sp, #3]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004902:	2107      	movs	r1, #7
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004904:	f003 0350 	and.w	r3, r3, #80	; 0x50
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004908:	6001      	str	r1, [r0, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800490a:	0611      	lsls	r1, r2, #24
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800490c:	7023      	strb	r3, [r4, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800490e:	d511      	bpl.n	8004934 <xPortStartScheduler+0x68>
 8004910:	2306      	movs	r3, #6
 8004912:	e000      	b.n	8004916 <xPortStartScheduler+0x4a>
 8004914:	460b      	mov	r3, r1
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004916:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800491a:	0052      	lsls	r2, r2, #1
 800491c:	b2d2      	uxtb	r2, r2
 800491e:	f88d 2003 	strb.w	r2, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004922:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8004926:	0612      	lsls	r2, r2, #24
 8004928:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
 800492c:	d4f2      	bmi.n	8004914 <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
 800492e:	2b03      	cmp	r3, #3
 8004930:	6003      	str	r3, [r0, #0]
 8004932:	d01a      	beq.n	800496a <xPortStartScheduler+0x9e>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	e7fe      	b.n	8004944 <xPortStartScheduler+0x78>
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	e7fe      	b.n	8004956 <xPortStartScheduler+0x8a>
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	e7fe      	b.n	8004968 <xPortStartScheduler+0x9c>
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800496a:	9901      	ldr	r1, [sp, #4]
 800496c:	4c15      	ldr	r4, [pc, #84]	; (80049c4 <xPortStartScheduler+0xf8>)
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800496e:	4a18      	ldr	r2, [pc, #96]	; (80049d0 <xPortStartScheduler+0x104>)
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004970:	021b      	lsls	r3, r3, #8
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004972:	b2c9      	uxtb	r1, r1
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004974:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004978:	6003      	str	r3, [r0, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800497a:	7021      	strb	r1, [r4, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800497c:	6813      	ldr	r3, [r2, #0]
 800497e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004982:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004984:	6813      	ldr	r3, [r2, #0]
 8004986:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800498a:	6013      	str	r3, [r2, #0]
	vPortSetupTimerInterrupt();
 800498c:	f7ff ff80 	bl	8004890 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8004990:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <xPortStartScheduler+0x108>)
 8004992:	2400      	movs	r4, #0
 8004994:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8004996:	f7ff fec9 	bl	800472c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800499a:	4a0f      	ldr	r2, [pc, #60]	; (80049d8 <xPortStartScheduler+0x10c>)
 800499c:	6813      	ldr	r3, [r2, #0]
 800499e:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049a2:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 80049a4:	f7ff feae 	bl	8004704 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80049a8:	f7ff f9fe 	bl	8003da8 <vTaskSwitchContext>
	prvTaskExitError();
 80049ac:	f7ff fe8a 	bl	80046c4 <prvTaskExitError>
}
 80049b0:	4620      	mov	r0, r4
 80049b2:	b002      	add	sp, #8
 80049b4:	bd10      	pop	{r4, pc}
 80049b6:	bf00      	nop
 80049b8:	e000ed00 	.word	0xe000ed00
 80049bc:	410fc271 	.word	0x410fc271
 80049c0:	410fc270 	.word	0x410fc270
 80049c4:	e000e400 	.word	0xe000e400
 80049c8:	20000b90 	.word	0x20000b90
 80049cc:	20000b8c 	.word	0x20000b8c
 80049d0:	e000ed20 	.word	0xe000ed20
 80049d4:	20000008 	.word	0x20000008
 80049d8:	e000ef34 	.word	0xe000ef34

080049dc <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049dc:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049e0:	2b0f      	cmp	r3, #15
 80049e2:	d90e      	bls.n	8004a02 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049e4:	4910      	ldr	r1, [pc, #64]	; (8004a28 <vPortValidateInterruptPriority+0x4c>)
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049e6:	4a11      	ldr	r2, [pc, #68]	; (8004a2c <vPortValidateInterruptPriority+0x50>)
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049e8:	5c5b      	ldrb	r3, [r3, r1]
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049ea:	7812      	ldrb	r2, [r2, #0]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d908      	bls.n	8004a02 <vPortValidateInterruptPriority+0x26>
 80049f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f4:	f383 8811 	msr	BASEPRI, r3
 80049f8:	f3bf 8f6f 	isb	sy
 80049fc:	f3bf 8f4f 	dsb	sy
 8004a00:	e7fe      	b.n	8004a00 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a02:	4b0b      	ldr	r3, [pc, #44]	; (8004a30 <vPortValidateInterruptPriority+0x54>)
 8004a04:	4a0b      	ldr	r2, [pc, #44]	; (8004a34 <vPortValidateInterruptPriority+0x58>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	6812      	ldr	r2, [r2, #0]
 8004a0a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d908      	bls.n	8004a24 <vPortValidateInterruptPriority+0x48>
 8004a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a16:	f383 8811 	msr	BASEPRI, r3
 8004a1a:	f3bf 8f6f 	isb	sy
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	e7fe      	b.n	8004a22 <vPortValidateInterruptPriority+0x46>
	}
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	e000e3f0 	.word	0xe000e3f0
 8004a2c:	20000b8c 	.word	0x20000b8c
 8004a30:	e000ed0c 	.word	0xe000ed0c
 8004a34:	20000b90 	.word	0x20000b90

08004a38 <prvTraceGetQueueType>:
#endif /* (TRC_CFG_FREERTOS_VERSION < TRC_FREERTOS_VERSION_8_X) */

uint8_t prvTraceGetQueueType(void* handle)
{
	// This is either declared in header file in FreeRTOS 8 and later, or as extern above
	return ucQueueGetQueueType(handle);
 8004a38:	f7fe bd04 	b.w	8003444 <ucQueueGetQueueType>

08004a3c <prvTraceGetTaskNumberLow16>:
}

/* Tasks */
uint16_t prvTraceGetTaskNumberLow16(void* handle)
{
 8004a3c:	b508      	push	{r3, lr}
	return TRACE_GET_LOW16(uxTaskGetTaskNumber(handle));
 8004a3e:	f7ff fb0d 	bl	800405c <uxTaskGetTaskNumber>
}
 8004a42:	b280      	uxth	r0, r0
 8004a44:	bd08      	pop	{r3, pc}
 8004a46:	bf00      	nop

08004a48 <prvTraceGetTaskNumberHigh16>:

uint16_t prvTraceGetTaskNumberHigh16(void* handle)
{
 8004a48:	b508      	push	{r3, lr}
	return TRACE_GET_HIGH16(uxTaskGetTaskNumber(handle));
 8004a4a:	f7ff fb07 	bl	800405c <uxTaskGetTaskNumber>
}
 8004a4e:	0c00      	lsrs	r0, r0, #16
 8004a50:	bd08      	pop	{r3, pc}
 8004a52:	bf00      	nop

08004a54 <prvTraceSetTaskNumberLow16>:

void prvTraceSetTaskNumberLow16(void* handle, uint16_t value)
{
 8004a54:	b538      	push	{r3, r4, r5, lr}
 8004a56:	460d      	mov	r5, r1
 8004a58:	4604      	mov	r4, r0
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 8004a5a:	f7ff faff 	bl	800405c <uxTaskGetTaskNumber>
 8004a5e:	0c00      	lsrs	r0, r0, #16
 8004a60:	0400      	lsls	r0, r0, #16
 8004a62:	ea40 0105 	orr.w	r1, r0, r5
 8004a66:	4620      	mov	r0, r4
}
 8004a68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vTaskSetTaskNumber(handle, TRACE_SET_LOW16(uxTaskGetTaskNumber(handle), value));
 8004a6c:	f7ff bafa 	b.w	8004064 <vTaskSetTaskNumber>

08004a70 <prvTraceSetTaskNumberHigh16>:

void prvTraceSetTaskNumberHigh16(void* handle, uint16_t value)
{
 8004a70:	b538      	push	{r3, r4, r5, lr}
 8004a72:	460d      	mov	r5, r1
 8004a74:	4604      	mov	r4, r0
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8004a76:	f7ff faf1 	bl	800405c <uxTaskGetTaskNumber>
 8004a7a:	b280      	uxth	r0, r0
 8004a7c:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 8004a80:	4620      	mov	r0, r4
}
 8004a82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vTaskSetTaskNumber(handle, TRACE_SET_HIGH16(uxTaskGetTaskNumber(handle), value));
 8004a86:	f7ff baed 	b.w	8004064 <vTaskSetTaskNumber>
 8004a8a:	bf00      	nop

08004a8c <prvTraceGetQueueNumberLow16>:

uint16_t prvTraceGetQueueNumberLow16(void* handle)
{
 8004a8c:	b508      	push	{r3, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8004a8e:	f7fe fcd5 	bl	800343c <uxQueueGetQueueNumber>
	return TRACE_GET_LOW16(prvTraceGetQueueNumber(handle));
}
 8004a92:	b280      	uxth	r0, r0
 8004a94:	bd08      	pop	{r3, pc}
 8004a96:	bf00      	nop

08004a98 <prvTraceGetQueueNumberHigh16>:

uint16_t prvTraceGetQueueNumberHigh16(void* handle)
{
 8004a98:	b508      	push	{r3, lr}
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8004a9a:	f7fe fccf 	bl	800343c <uxQueueGetQueueNumber>
	return TRACE_GET_HIGH16(prvTraceGetQueueNumber(handle));
}
 8004a9e:	0c00      	lsrs	r0, r0, #16
 8004aa0:	bd08      	pop	{r3, pc}
 8004aa2:	bf00      	nop

08004aa4 <prvTraceSetQueueNumberLow16>:

void prvTraceSetQueueNumberLow16(void* handle, uint16_t value)
{
 8004aa4:	b538      	push	{r3, r4, r5, lr}
 8004aa6:	460d      	mov	r5, r1
 8004aa8:	4604      	mov	r4, r0
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8004aaa:	f7fe fcc7 	bl	800343c <uxQueueGetQueueNumber>
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 8004aae:	0c00      	lsrs	r0, r0, #16
 8004ab0:	0400      	lsls	r0, r0, #16
 8004ab2:	ea40 0105 	orr.w	r1, r0, r5
 8004ab6:	4620      	mov	r0, r4
}
 8004ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vQueueSetQueueNumber(handle, TRACE_SET_LOW16(prvTraceGetQueueNumber(handle), value));
 8004abc:	f7fe bcc0 	b.w	8003440 <vQueueSetQueueNumber>

08004ac0 <prvTraceSetQueueNumberHigh16>:

void prvTraceSetQueueNumberHigh16(void* handle, uint16_t value)
{
 8004ac0:	b538      	push	{r3, r4, r5, lr}
 8004ac2:	460d      	mov	r5, r1
 8004ac4:	4604      	mov	r4, r0
	return (uint32_t)uxQueueGetQueueNumber(handle);
 8004ac6:	f7fe fcb9 	bl	800343c <uxQueueGetQueueNumber>
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8004aca:	b280      	uxth	r0, r0
 8004acc:	ea40 4105 	orr.w	r1, r0, r5, lsl #16
 8004ad0:	4620      	mov	r0, r4
}
 8004ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	vQueueSetQueueNumber(handle, TRACE_SET_HIGH16(prvTraceGetQueueNumber(handle), value));
 8004ad6:	f7fe bcb3 	b.w	8003440 <vQueueSetQueueNumber>
 8004ada:	bf00      	nop

08004adc <prvTraceGetCurrentTaskHandle>:

#endif /* (TRC_CFG_SCHEDULING_ONLY == 0) */

void* prvTraceGetCurrentTaskHandle()
{
	return xTaskGetCurrentTaskHandle();
 8004adc:	f7ff bac6 	b.w	800406c <xTaskGetCurrentTaskHandle>

08004ae0 <vTraceInitObjectPropertyTable>:
}

/* Initialization of the object property table */
void vTraceInitObjectPropertyTable()
{
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8004ae0:	4b17      	ldr	r3, [pc, #92]	; (8004b40 <vTraceInitObjectPropertyTable+0x60>)
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8004ae2:	4918      	ldr	r1, [pc, #96]	; (8004b44 <vTraceInitObjectPropertyTable+0x64>)
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8004ae4:	681b      	ldr	r3, [r3, #0]
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[4] = PropertyTableSizeISR;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[5] = PropertyTableSizeTimer;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[6] = PropertyTableSizeEventGroup;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[7] = PropertyTableSizeStreamBuffer;
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8004ae6:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <vTraceInitObjectPropertyTable+0x68>)
{
 8004ae8:	b430      	push	{r4, r5}
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8004aea:	2009      	movs	r0, #9
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8004aec:	6659      	str	r1, [r3, #100]	; 0x64
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8004aee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8004af2:	f04f 3105 	mov.w	r1, #84215045	; 0x5050505
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8004af6:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8004afa:	4d14      	ldr	r5, [pc, #80]	; (8004b4c <vTraceInitObjectPropertyTable+0x6c>)
 8004afc:	4c14      	ldr	r4, [pc, #80]	; (8004b50 <vTraceInitObjectPropertyTable+0x70>)
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[0] = TRC_CFG_NQUEUE;
 8004afe:	6699      	str	r1, [r3, #104]	; 0x68
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectClasses = TRACE_NCLASSES;
 8004b00:	65d8      	str	r0, [r3, #92]	; 0x5c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8004b02:	210f      	movs	r1, #15
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8004b04:	2005      	movs	r0, #5
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[0] = TRC_CFG_NAME_LEN_QUEUE;
 8004b06:	e9c3 221c 	strd	r2, r2, [r3, #112]	; 0x70
	RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[8] = TRC_CFG_NMESSAGEBUFFER;
 8004b0a:	f883 006c 	strb.w	r0, [r3, #108]	; 0x6c
	RecorderDataPtr->ObjectPropertyTable.NameLengthPerClass[8] = TRC_CFG_NAME_LEN_MESSAGEBUFFER;
 8004b0e:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8004b12:	2013      	movs	r0, #19
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8004b14:	f44f 0120 	mov.w	r1, #10485760	; 0xa00000
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[0] = PropertyTableSizeQueue;
 8004b18:	67dd      	str	r5, [r3, #124]	; 0x7c
 8004b1a:	f8c3 4080 	str.w	r4, [r3, #128]	; 0x80
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8004b1e:	4d0d      	ldr	r5, [pc, #52]	; (8004b54 <vTraceInitObjectPropertyTable+0x74>)
 8004b20:	4c0d      	ldr	r4, [pc, #52]	; (8004b58 <vTraceInitObjectPropertyTable+0x78>)
	RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[8] = PropertyTableSizeMessageBuffer;
 8004b22:	f883 0084 	strb.w	r0, [r3, #132]	; 0x84
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8004b26:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[3] = StartIndexTask;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[4] = StartIndexISR;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[5] = StartIndexTimer;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[6] = StartIndexEventGroup;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[7] = StartIndexStreamBuffer;
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8004b2a:	f44f 608c 	mov.w	r0, #1120	; 0x460
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8004b2e:	f240 41bf 	movw	r1, #1215	; 0x4bf
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[0] = StartIndexQueue;
 8004b32:	e9c3 5424 	strd	r5, r4, [r3, #144]	; 0x90
	RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[8] = StartIndexMessageBuffer;
 8004b36:	f8a3 0098 	strh.w	r0, [r3, #152]	; 0x98
	RecorderDataPtr->ObjectPropertyTable.ObjectPropertyTableSizeInBytes = TRACE_OBJECT_TABLE_SIZE;
 8004b3a:	6619      	str	r1, [r3, #96]	; 0x60
}
 8004b3c:	bc30      	pop	{r4, r5}
 8004b3e:	4770      	bx	lr
 8004b40:	20000b94 	.word	0x20000b94
 8004b44:	0f0a0a0a 	.word	0x0f0a0a0a
 8004b48:	01e00140 	.word	0x01e00140
 8004b4c:	13101010 	.word	0x13101010
 8004b50:	13131011 	.word	0x13131011
 8004b54:	035202fd 	.word	0x035202fd
 8004b58:	040103a2 	.word	0x040103a2

08004b5c <vTraceInitObjectHandleStack>:

/* Initialization of the handle mechanism, see e.g, prvTraceGetObjectHandle */
void vTraceInitObjectHandleStack()
{
 8004b5c:	b430      	push	{r4, r5}
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8004b5e:	4b11      	ldr	r3, [pc, #68]	; (8004ba4 <vTraceInitObjectHandleStack+0x48>)
 8004b60:	4811      	ldr	r0, [pc, #68]	; (8004ba8 <vTraceInitObjectHandleStack+0x4c>)
 8004b62:	4912      	ldr	r1, [pc, #72]	; (8004bac <vTraceInitObjectHandleStack+0x50>)
 8004b64:	4a12      	ldr	r2, [pc, #72]	; (8004bb0 <vTraceInitObjectHandleStack+0x54>)
 8004b66:	6058      	str	r0, [r3, #4]
 8004b68:	f44f 2020 	mov.w	r0, #655360	; 0xa0000
 8004b6c:	4c11      	ldr	r4, [pc, #68]	; (8004bb4 <vTraceInitObjectHandleStack+0x58>)
 8004b6e:	6018      	str	r0, [r3, #0]
 8004b70:	2541      	movs	r5, #65	; 0x41
 8004b72:	4811      	ldr	r0, [pc, #68]	; (8004bb8 <vTraceInitObjectHandleStack+0x5c>)
 8004b74:	6099      	str	r1, [r3, #8]
 8004b76:	60da      	str	r2, [r3, #12]
 8004b78:	f101 1105 	add.w	r1, r1, #327685	; 0x50005
 8004b7c:	f102 1205 	add.w	r2, r2, #327685	; 0x50005
 8004b80:	611d      	str	r5, [r3, #16]
 8004b82:	615c      	str	r4, [r3, #20]
 8004b84:	4d0d      	ldr	r5, [pc, #52]	; (8004bbc <vTraceInitObjectHandleStack+0x60>)
 8004b86:	4c0e      	ldr	r4, [pc, #56]	; (8004bc0 <vTraceInitObjectHandleStack+0x64>)
 8004b88:	6198      	str	r0, [r3, #24]
 8004b8a:	61d9      	str	r1, [r3, #28]
 8004b8c:	480d      	ldr	r0, [pc, #52]	; (8004bc4 <vTraceInitObjectHandleStack+0x68>)
 8004b8e:	621a      	str	r2, [r3, #32]
 8004b90:	f101 1109 	add.w	r1, r1, #589833	; 0x90009
	objectHandleStacks.highestIndexOfClass[3] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) - 1;
	objectHandleStacks.highestIndexOfClass[4] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) - 1;
	objectHandleStacks.highestIndexOfClass[5] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) - 1;
	objectHandleStacks.highestIndexOfClass[6] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) - 1;
	objectHandleStacks.highestIndexOfClass[7] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) - 1;
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8004b94:	2245      	movs	r2, #69	; 0x45
	objectHandleStacks.indexOfNextAvailableHandle[0] = objectHandleStacks.lowestIndexOfClass[0] = 0;
 8004b96:	625d      	str	r5, [r3, #36]	; 0x24
 8004b98:	629c      	str	r4, [r3, #40]	; 0x28
 8004b9a:	62d8      	str	r0, [r3, #44]	; 0x2c
 8004b9c:	6319      	str	r1, [r3, #48]	; 0x30
	objectHandleStacks.highestIndexOfClass[8] = (TRC_CFG_NQUEUE) + (TRC_CFG_NSEMAPHORE) + (TRC_CFG_NMUTEX) + (TRC_CFG_NTASK) + (TRC_CFG_NISR) + (TRC_CFG_NTIMER) + (TRC_CFG_NEVENTGROUP) + (TRC_CFG_NSTREAMBUFFER) + (TRC_CFG_NMESSAGEBUFFER) - 1;
 8004b9e:	869a      	strh	r2, [r3, #52]	; 0x34
}
 8004ba0:	bc30      	pop	{r4, r5}
 8004ba2:	4770      	bx	lr
 8004ba4:	20000bac 	.word	0x20000bac
 8004ba8:	001e0014 	.word	0x001e0014
 8004bac:	0032002d 	.word	0x0032002d
 8004bb0:	003c0037 	.word	0x003c0037
 8004bb4:	0014000a 	.word	0x0014000a
 8004bb8:	002d001e 	.word	0x002d001e
 8004bbc:	00130009 	.word	0x00130009
 8004bc0:	002c001d 	.word	0x002c001d
 8004bc4:	00360031 	.word	0x00360031

08004bc8 <pszTraceGetErrorNotEnoughHandles>:

/* Returns the "Not enough handles" error message for this object class */
const char* pszTraceGetErrorNotEnoughHandles(traceObjectClass objectclass)
{
 8004bc8:	2808      	cmp	r0, #8
 8004bca:	bf9a      	itte	ls
 8004bcc:	4b02      	ldrls	r3, [pc, #8]	; (8004bd8 <pszTraceGetErrorNotEnoughHandles+0x10>)
 8004bce:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 8004bd2:	4802      	ldrhi	r0, [pc, #8]	; (8004bdc <pszTraceGetErrorNotEnoughHandles+0x14>)
	case TRACE_CLASS_MESSAGEBUFFER:
		return "Not enough MESSAGEBUFFER handles - increase TRC_CFG_NMESSAGEBUFFER in trcSnapshotConfig.h";
	default:
		return "pszTraceGetErrorHandles: Invalid objectclass!";
	}
}
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	0800c768 	.word	0x0800c768
 8004bdc:	0800c78c 	.word	0x0800c78c

08004be0 <prvTraceUpdateCounters>:
 *
 * Updates the index of the event buffer.
 ******************************************************************************/
void prvTraceUpdateCounters(void)
{	
	if (RecorderDataPtr->recorderActive == 0)
 8004be0:	4b23      	ldr	r3, [pc, #140]	; (8004c70 <prvTraceUpdateCounters+0x90>)
 8004be2:	6819      	ldr	r1, [r3, #0]
 8004be4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d041      	beq.n	8004c6e <prvTraceUpdateCounters+0x8e>
{	
 8004bea:	b410      	push	{r4}
		return;
	}
	
	RecorderDataPtr->numEvents++;

	RecorderDataPtr->nextFreeIndex++;
 8004bec:	69cc      	ldr	r4, [r1, #28]
	RecorderDataPtr->numEvents++;
 8004bee:	694b      	ldr	r3, [r1, #20]
	RecorderDataPtr->nextFreeIndex++;
 8004bf0:	3401      	adds	r4, #1

	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8004bf2:	f242 720f 	movw	r2, #9999	; 0x270f
	RecorderDataPtr->numEvents++;
 8004bf6:	3301      	adds	r3, #1
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8004bf8:	4294      	cmp	r4, r2
	RecorderDataPtr->numEvents++;
 8004bfa:	614b      	str	r3, [r1, #20]
	RecorderDataPtr->nextFreeIndex++;
 8004bfc:	61cc      	str	r4, [r1, #28]
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8004bfe:	d811      	bhi.n	8004c24 <prvTraceUpdateCounters+0x44>
 8004c00:	00a0      	lsls	r0, r4, #2
		if ((RecorderDataPtr->eventData[e*4] > USER_EVENT) &&
 8004c02:	180b      	adds	r3, r1, r0
 8004c04:	f893 2968 	ldrb.w	r2, [r3, #2408]	; 0x968
 8004c08:	f102 0367 	add.w	r3, r2, #103	; 0x67
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	2b0e      	cmp	r3, #14
 8004c10:	d80f      	bhi.n	8004c32 <prvTraceUpdateCounters+0x52>
			uint8_t nDataEvents = (uint8_t)(RecorderDataPtr->eventData[e*4] - USER_EVENT);
 8004c12:	3268      	adds	r2, #104	; 0x68
 8004c14:	b2d2      	uxtb	r2, r2
			if ((e + nDataEvents) < RecorderDataPtr->maxEvents)
 8004c16:	698b      	ldr	r3, [r1, #24]
 8004c18:	4414      	add	r4, r2
 8004c1a:	429c      	cmp	r4, r3
 8004c1c:	d31d      	bcc.n	8004c5a <prvTraceUpdateCounters+0x7a>
	}

#if (TRC_CFG_SNAPSHOT_MODE == TRC_SNAPSHOT_MODE_RING_BUFFER)
	prvCheckDataToBeOverwrittenForMultiEntryEvents(1);
#endif
}
 8004c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c22:	4770      	bx	lr
		RecorderDataPtr->nextFreeIndex = 0;
 8004c24:	2300      	movs	r3, #0
		RecorderDataPtr->bufferIsFull = 1;
 8004c26:	2201      	movs	r2, #1
		RecorderDataPtr->nextFreeIndex = 0;
 8004c28:	4618      	mov	r0, r3
 8004c2a:	61cb      	str	r3, [r1, #28]
 8004c2c:	461c      	mov	r4, r3
		RecorderDataPtr->bufferIsFull = 1;
 8004c2e:	620a      	str	r2, [r1, #32]
 8004c30:	e7e7      	b.n	8004c02 <prvTraceUpdateCounters+0x22>
		else if (RecorderDataPtr->eventData[e*4] == DIV_XPS)
 8004c32:	2a01      	cmp	r2, #1
 8004c34:	d1f3      	bne.n	8004c1e <prvTraceUpdateCounters+0x3e>
			if ((e + 1) < RecorderDataPtr->maxEvents)
 8004c36:	698b      	ldr	r3, [r1, #24]
 8004c38:	f600 1068 	addw	r0, r0, #2408	; 0x968
 8004c3c:	3401      	adds	r4, #1
 8004c3e:	429c      	cmp	r4, r3
 8004c40:	eb01 0200 	add.w	r2, r1, r0
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8004c44:	f04f 0300 	mov.w	r3, #0
 8004c48:	bf33      	iteet	cc
 8004c4a:	500b      	strcc	r3, [r1, r0]
				(void)memset(& RecorderDataPtr->eventData[0], 0, 4);
 8004c4c:	f8c1 3968 	strcs.w	r3, [r1, #2408]	; 0x968
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4);
 8004c50:	500b      	strcs	r3, [r1, r0]
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, 4 + 4);
 8004c52:	6053      	strcc	r3, [r2, #4]
}
 8004c54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c58:	4770      	bx	lr
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8004c5a:	3201      	adds	r2, #1
 8004c5c:	f600 1068 	addw	r0, r0, #2408	; 0x968
 8004c60:	4408      	add	r0, r1
 8004c62:	0092      	lsls	r2, r2, #2
 8004c64:	2100      	movs	r1, #0
}
 8004c66:	f85d 4b04 	ldr.w	r4, [sp], #4
				(void)memset(& RecorderDataPtr->eventData[e*4], 0, (size_t) (4 + 4 * nDataEvents));
 8004c6a:	f003 b96c 	b.w	8007f46 <memset>
 8004c6e:	4770      	bx	lr
 8004c70:	20000b94 	.word	0x20000b94

08004c74 <prvTraceGetDTS>:
 *
 * The parameter param_maxDTS should be 0xFF for 8-bit dts or 0xFFFF for
 * events with 16-bit dts fields.
 *****************************************************************************/
uint16_t prvTraceGetDTS(uint16_t param_maxDTS)
{
 8004c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c78:	4f7f      	ldr	r7, [pc, #508]	; (8004e78 <prvTraceGetDTS+0x204>)
	static uint32_t old_timestamp = 0;
	XTSEvent* xts = 0;
	uint32_t dts = 0;
	uint32_t timestamp = 0;

	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 8004c7a:	28ff      	cmp	r0, #255	; 0xff
{
 8004c7c:	4604      	mov	r4, r0
 8004c7e:	683b      	ldr	r3, [r7, #0]
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 8004c80:	d003      	beq.n	8004c8a <prvTraceGetDTS+0x16>
 8004c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c86:	4290      	cmp	r0, r2
 8004c88:	d13f      	bne.n	8004d0a <prvTraceGetDTS+0x96>

	
	if (RecorderDataPtr->frequency == 0)
 8004c8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004c8c:	b342      	cbz	r2, 8004ce0 <prvTraceGetDTS+0x6c>
	static uint32_t last_hwtc_rest = 0;
	uint32_t diff = 0;
	uint32_t diff_scaled = 0;
#endif /*TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_OS_TIMER_DECR*/

	if (trace_disable_timestamp == 1)
 8004c8e:	497b      	ldr	r1, [pc, #492]	; (8004e7c <prvTraceGetDTS+0x208>)
 8004c90:	4d7b      	ldr	r5, [pc, #492]	; (8004e80 <prvTraceGetDTS+0x20c>)
 8004c92:	6809      	ldr	r1, [r1, #0]
 8004c94:	682e      	ldr	r6, [r5, #0]
 8004c96:	2901      	cmp	r1, #1
 8004c98:	d045      	beq.n	8004d26 <prvTraceGetDTS+0xb2>
	}

	/* Retrieve TRC_HWTC_COUNT only once since the same value should be used all throughout this function. */
#if (TRC_HWTC_TYPE == TRC_OS_TIMER_INCR || TRC_HWTC_TYPE == TRC_FREE_RUNNING_32BIT_INCR)
	/* Get the increasing tick count */
	hwtc_count = (TRC_HWTC_COUNT);
 8004c9a:	497a      	ldr	r1, [pc, #488]	; (8004e84 <prvTraceGetDTS+0x210>)
	/* This part handles free running clocks that can be scaled down to avoid too large DTS values.
	Without this, the scaled timestamp will incorrectly wrap at (2^32 / TRC_HWTC_DIVISOR) ticks.
	The scaled timestamp returned from this function is supposed to go from 0 -> 2^32, which in real time would represent (0 -> 2^32 * TRC_HWTC_DIVISOR) ticks. */
	
	/* First we see how long time has passed since the last timestamp call, and we also add the ticks that was lost when we scaled down the last time. */
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8004c9c:	f8df c20c 	ldr.w	ip, [pc, #524]	; 8004eac <prvTraceGetDTS+0x238>
 8004ca0:	f8df e20c 	ldr.w	lr, [pc, #524]	; 8004eb0 <prvTraceGetDTS+0x23c>
	hwtc_count = (TRC_HWTC_COUNT);
 8004ca4:	6808      	ldr	r0, [r1, #0]
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8004ca6:	f8dc 1000 	ldr.w	r1, [ip]
 8004caa:	f8de 8000 	ldr.w	r8, [lr]
	/* Is anyone interested in the results? */
	if (pTimestamp)
		*pTimestamp = last_timestamp;

	/* Store the previous value */
	last_hwtc_count = hwtc_count;
 8004cae:	f8ce 0000 	str.w	r0, [lr]
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8004cb2:	4401      	add	r1, r0
 8004cb4:	eba1 0108 	sub.w	r1, r1, r8
	last_timestamp += diff_scaled;
 8004cb8:	eb06 0691 	add.w	r6, r6, r1, lsr #2
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8004cbc:	f001 0103 	and.w	r1, r1, #3
	last_timestamp += diff_scaled;
 8004cc0:	602e      	str	r6, [r5, #0]
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8004cc2:	f8cc 1000 	str.w	r1, [ip]
	dts = timestamp - old_timestamp;
 8004cc6:	4970      	ldr	r1, [pc, #448]	; (8004e88 <prvTraceGetDTS+0x214>)
 8004cc8:	680d      	ldr	r5, [r1, #0]
	old_timestamp = timestamp;
 8004cca:	600e      	str	r6, [r1, #0]
	dts = timestamp - old_timestamp;
 8004ccc:	1b75      	subs	r5, r6, r5
	if (RecorderDataPtr->frequency > 0)
 8004cce:	2a00      	cmp	r2, #0
 8004cd0:	d12d      	bne.n	8004d2e <prvTraceGetDTS+0xba>
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8004cd2:	629e      	str	r6, [r3, #40]	; 0x28
	if (dts > param_maxDTS)
 8004cd4:	42ac      	cmp	r4, r5
 8004cd6:	d338      	bcc.n	8004d4a <prvTraceGetDTS+0xd6>
	return (uint16_t)dts & param_maxDTS;
 8004cd8:	ea04 0005 	and.w	r0, r4, r5
}
 8004cdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (timestampFrequency != 0)
 8004ce0:	4a6a      	ldr	r2, [pc, #424]	; (8004e8c <prvTraceGetDTS+0x218>)
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	b942      	cbnz	r2, 8004cf8 <prvTraceGetDTS+0x84>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8004ce6:	4867      	ldr	r0, [pc, #412]	; (8004e84 <prvTraceGetDTS+0x210>)
 8004ce8:	4969      	ldr	r1, [pc, #420]	; (8004e90 <prvTraceGetDTS+0x21c>)
 8004cea:	6800      	ldr	r0, [r0, #0]
 8004cec:	6809      	ldr	r1, [r1, #0]
 8004cee:	4288      	cmp	r0, r1
 8004cf0:	f000 808a 	beq.w	8004e08 <prvTraceGetDTS+0x194>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8004cf4:	4a67      	ldr	r2, [pc, #412]	; (8004e94 <prvTraceGetDTS+0x220>)
 8004cf6:	6812      	ldr	r2, [r2, #0]
	if (trace_disable_timestamp == 1)
 8004cf8:	4960      	ldr	r1, [pc, #384]	; (8004e7c <prvTraceGetDTS+0x208>)
 8004cfa:	4d61      	ldr	r5, [pc, #388]	; (8004e80 <prvTraceGetDTS+0x20c>)
 8004cfc:	6809      	ldr	r1, [r1, #0]
 8004cfe:	682e      	ldr	r6, [r5, #0]
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8004d00:	0892      	lsrs	r2, r2, #2
	if (trace_disable_timestamp == 1)
 8004d02:	2901      	cmp	r1, #1
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8004d04:	625a      	str	r2, [r3, #36]	; 0x24
	if (trace_disable_timestamp == 1)
 8004d06:	d1c8      	bne.n	8004c9a <prvTraceGetDTS+0x26>
 8004d08:	e7dd      	b.n	8004cc6 <prvTraceGetDTS+0x52>
	if (RecorderDataPtr != NULL)
 8004d0a:	b12b      	cbz	r3, 8004d18 <prvTraceGetDTS+0xa4>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004d0c:	4a62      	ldr	r2, [pc, #392]	; (8004e98 <prvTraceGetDTS+0x224>)
 8004d0e:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8004d10:	2100      	movs	r1, #0
 8004d12:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004d14:	b102      	cbz	r2, 8004d18 <prvTraceGetDTS+0xa4>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8004d16:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8004d18:	4a60      	ldr	r2, [pc, #384]	; (8004e9c <prvTraceGetDTS+0x228>)
 8004d1a:	6813      	ldr	r3, [r2, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d053      	beq.n	8004dc8 <prvTraceGetDTS+0x154>
	TRACE_ASSERT(param_maxDTS == 0xFF || param_maxDTS == 0xFFFF, "prvTraceGetDTS: Invalid value for param_maxDTS", 0);
 8004d20:	2000      	movs	r0, #0
}
 8004d22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	dts = timestamp - old_timestamp;
 8004d26:	4958      	ldr	r1, [pc, #352]	; (8004e88 <prvTraceGetDTS+0x214>)
 8004d28:	680d      	ldr	r5, [r1, #0]
	old_timestamp = timestamp;
 8004d2a:	600e      	str	r6, [r1, #0]
	dts = timestamp - old_timestamp;
 8004d2c:	1b75      	subs	r5, r6, r5
		if (dts > RecorderDataPtr->frequency)
 8004d2e:	42aa      	cmp	r2, r5
 8004d30:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004d32:	d340      	bcc.n	8004db6 <prvTraceGetDTS+0x142>
			RecorderDataPtr->absTimeLastEvent += dts;
 8004d34:	4429      	add	r1, r5
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8004d36:	428a      	cmp	r2, r1
 8004d38:	6299      	str	r1, [r3, #40]	; 0x28
 8004d3a:	d8cb      	bhi.n	8004cd4 <prvTraceGetDTS+0x60>
			RecorderDataPtr->absTimeLastEventSecond++;
 8004d3c:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8004d3e:	1a8a      	subs	r2, r1, r2
			RecorderDataPtr->absTimeLastEventSecond++;
 8004d40:	3001      	adds	r0, #1
	if (dts > param_maxDTS)
 8004d42:	42ac      	cmp	r4, r5
			RecorderDataPtr->absTimeLastEventSecond++;
 8004d44:	e9c3 200a 	strd	r2, r0, [r3, #40]	; 0x28
	if (dts > param_maxDTS)
 8004d48:	d2c6      	bcs.n	8004cd8 <prvTraceGetDTS+0x64>
	if (! RecorderDataPtr->recorderActive)
 8004d4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d4c:	2a00      	cmp	r2, #0
 8004d4e:	d0c3      	beq.n	8004cd8 <prvTraceGetDTS+0x64>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8004d50:	69da      	ldr	r2, [r3, #28]
 8004d52:	f242 710f 	movw	r1, #9999	; 0x270f
 8004d56:	428a      	cmp	r2, r1
 8004d58:	d869      	bhi.n	8004e2e <prvTraceGetDTS+0x1ba>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8004d5a:	0092      	lsls	r2, r2, #2
			if (param_maxDTS == 0xFFFF)
 8004d5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8004d60:	f602 1268 	addw	r2, r2, #2408	; 0x968
			if (param_maxDTS == 0xFFFF)
 8004d64:	428c      	cmp	r4, r1
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8004d66:	eb03 0002 	add.w	r0, r3, r2
			if (param_maxDTS == 0xFFFF)
 8004d6a:	d046      	beq.n	8004dfa <prvTraceGetDTS+0x186>
			else if (param_maxDTS == 0xFF)
 8004d6c:	2cff      	cmp	r4, #255	; 0xff
 8004d6e:	d057      	beq.n	8004e20 <prvTraceGetDTS+0x1ac>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004d70:	4a49      	ldr	r2, [pc, #292]	; (8004e98 <prvTraceGetDTS+0x224>)
 8004d72:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8004d74:	2100      	movs	r1, #0
 8004d76:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004d78:	b102      	cbz	r2, 8004d7c <prvTraceGetDTS+0x108>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8004d7a:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8004d7c:	4a47      	ldr	r2, [pc, #284]	; (8004e9c <prvTraceGetDTS+0x228>)
 8004d7e:	6813      	ldr	r3, [r2, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d13e      	bne.n	8004e02 <prvTraceGetDTS+0x18e>
		if (RecorderDataPtr != NULL)
 8004d84:	6839      	ldr	r1, [r7, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8004d86:	4b46      	ldr	r3, [pc, #280]	; (8004ea0 <prvTraceGetDTS+0x22c>)
 8004d88:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8004d8a:	2900      	cmp	r1, #0
 8004d8c:	d039      	beq.n	8004e02 <prvTraceGetDTS+0x18e>
		dst[i] = src[i];
 8004d8e:	2242      	movs	r2, #66	; 0x42
 8004d90:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8004d94:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8004d98:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8004d9c:	4298      	cmp	r0, r3
 8004d9e:	d005      	beq.n	8004dac <prvTraceGetDTS+0x138>
		dst[i] = src[i];
 8004da0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004da4:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8004da8:	2a00      	cmp	r2, #0
 8004daa:	d1f7      	bne.n	8004d9c <prvTraceGetDTS+0x128>
			RecorderDataPtr->internalErrorOccured = 1;
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8004db4:	e025      	b.n	8004e02 <prvTraceGetDTS+0x18e>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8004db6:	6ade      	ldr	r6, [r3, #44]	; 0x2c
 8004db8:	fbb5 f0f2 	udiv	r0, r5, r2
 8004dbc:	4406      	add	r6, r0
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8004dbe:	fb02 5010 	mls	r0, r2, r0, r5
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8004dc2:	62de      	str	r6, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8004dc4:	4401      	add	r1, r0
 8004dc6:	e7b6      	b.n	8004d36 <prvTraceGetDTS+0xc2>
		if (RecorderDataPtr != NULL)
 8004dc8:	6839      	ldr	r1, [r7, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8004dca:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <prvTraceGetDTS+0x230>)
 8004dcc:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8004dce:	2900      	cmp	r1, #0
 8004dd0:	d0a6      	beq.n	8004d20 <prvTraceGetDTS+0xac>
		dst[i] = src[i];
 8004dd2:	2254      	movs	r2, #84	; 0x54
 8004dd4:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8004dd8:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8004ddc:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8004de0:	4298      	cmp	r0, r3
 8004de2:	d005      	beq.n	8004df0 <prvTraceGetDTS+0x17c>
		dst[i] = src[i];
 8004de4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004de8:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8004dec:	2a00      	cmp	r2, #0
 8004dee:	d1f7      	bne.n	8004de0 <prvTraceGetDTS+0x16c>
			RecorderDataPtr->internalErrorOccured = 1;
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8004df8:	e792      	b.n	8004d20 <prvTraceGetDTS+0xac>
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8004dfa:	0c29      	lsrs	r1, r5, #16
				xts->type = XTS16;
 8004dfc:	26a9      	movs	r6, #169	; 0xa9
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8004dfe:	8041      	strh	r1, [r0, #2]
				xts->type = XTS16;
 8004e00:	529e      	strh	r6, [r3, r2]
			prvTraceUpdateCounters();
 8004e02:	f7ff feed 	bl	8004be0 <prvTraceUpdateCounters>
 8004e06:	e767      	b.n	8004cd8 <prvTraceGetDTS+0x64>
	if (trace_disable_timestamp == 1)
 8004e08:	491c      	ldr	r1, [pc, #112]	; (8004e7c <prvTraceGetDTS+0x208>)
 8004e0a:	4d1d      	ldr	r5, [pc, #116]	; (8004e80 <prvTraceGetDTS+0x20c>)
 8004e0c:	6809      	ldr	r1, [r1, #0]
 8004e0e:	682e      	ldr	r6, [r5, #0]
 8004e10:	2901      	cmp	r1, #1
 8004e12:	f47f af42 	bne.w	8004c9a <prvTraceGetDTS+0x26>
	dts = timestamp - old_timestamp;
 8004e16:	4a1c      	ldr	r2, [pc, #112]	; (8004e88 <prvTraceGetDTS+0x214>)
 8004e18:	6815      	ldr	r5, [r2, #0]
	old_timestamp = timestamp;
 8004e1a:	6016      	str	r6, [r2, #0]
	dts = timestamp - old_timestamp;
 8004e1c:	1b75      	subs	r5, r6, r5
 8004e1e:	e758      	b.n	8004cd2 <prvTraceGetDTS+0x5e>
				xts->type = XTS8;
 8004e20:	26a8      	movs	r6, #168	; 0xa8
 8004e22:	549e      	strb	r6, [r3, r2]
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8004e24:	0a29      	lsrs	r1, r5, #8
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8004e26:	0e2b      	lsrs	r3, r5, #24
				xts->xts_16 = (uint16_t)((dts / 0x100) & 0xFFFF);
 8004e28:	8041      	strh	r1, [r0, #2]
				xts->xts_8 = (uint8_t)((dts / 0x1000000) & 0xFF);
 8004e2a:	7043      	strb	r3, [r0, #1]
 8004e2c:	e7e9      	b.n	8004e02 <prvTraceGetDTS+0x18e>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004e2e:	4a1a      	ldr	r2, [pc, #104]	; (8004e98 <prvTraceGetDTS+0x224>)
 8004e30:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8004e32:	2100      	movs	r1, #0
 8004e34:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004e36:	b102      	cbz	r2, 8004e3a <prvTraceGetDTS+0x1c6>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8004e38:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8004e3a:	4a18      	ldr	r2, [pc, #96]	; (8004e9c <prvTraceGetDTS+0x228>)
 8004e3c:	6813      	ldr	r3, [r2, #0]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f47f af4a 	bne.w	8004cd8 <prvTraceGetDTS+0x64>
		if (RecorderDataPtr != NULL)
 8004e44:	6839      	ldr	r1, [r7, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8004e46:	4b18      	ldr	r3, [pc, #96]	; (8004ea8 <prvTraceGetDTS+0x234>)
 8004e48:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8004e4a:	2900      	cmp	r1, #0
 8004e4c:	f43f af44 	beq.w	8004cd8 <prvTraceGetDTS+0x64>
		dst[i] = src[i];
 8004e50:	2241      	movs	r2, #65	; 0x41
 8004e52:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8004e56:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8004e5a:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8004e5e:	4298      	cmp	r0, r3
 8004e60:	d005      	beq.n	8004e6e <prvTraceGetDTS+0x1fa>
		dst[i] = src[i];
 8004e62:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004e66:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8004e6a:	2a00      	cmp	r2, #0
 8004e6c:	d1f7      	bne.n	8004e5e <prvTraceGetDTS+0x1ea>
			RecorderDataPtr->internalErrorOccured = 1;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2201      	movs	r2, #1
 8004e72:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8004e76:	e72f      	b.n	8004cd8 <prvTraceGetDTS+0x64>
 8004e78:	20000b94 	.word	0x20000b94
 8004e7c:	20000c4c 	.word	0x20000c4c
 8004e80:	20000ba8 	.word	0x20000ba8
 8004e84:	e0001004 	.word	0xe0001004
 8004e88:	20000c3c 	.word	0x20000c3c
 8004e8c:	20000c44 	.word	0x20000c44
 8004e90:	2000b704 	.word	0x2000b704
 8004e94:	20000090 	.word	0x20000090
 8004e98:	20000c54 	.word	0x20000c54
 8004e9c:	20000c48 	.word	0x20000c48
 8004ea0:	0800caf4 	.word	0x0800caf4
 8004ea4:	0800ca8c 	.word	0x0800ca8c
 8004ea8:	0800cacc 	.word	0x0800cacc
 8004eac:	20000ba4 	.word	0x20000ba4
 8004eb0:	20000ba0 	.word	0x20000ba0

08004eb4 <prvTraceSetPriorityProperty>:
{
 8004eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb6:	4d4e      	ldr	r5, [pc, #312]	; (8004ff0 <prvTraceSetPriorityProperty+0x13c>)
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8004eb8:	2808      	cmp	r0, #8
{
 8004eba:	b085      	sub	sp, #20
 8004ebc:	682c      	ldr	r4, [r5, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8004ebe:	d826      	bhi.n	8004f0e <prvTraceSetPriorityProperty+0x5a>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8004ec0:	1823      	adds	r3, r4, r0
 8004ec2:	f893 6064 	ldrb.w	r6, [r3, #100]	; 0x64
 8004ec6:	428e      	cmp	r6, r1
 8004ec8:	d315      	bcc.n	8004ef6 <prvTraceSetPriorityProperty+0x42>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8004eca:	2900      	cmp	r1, #0
 8004ecc:	d044      	beq.n	8004f58 <prvTraceSetPriorityProperty+0xa4>
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8004ece:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8004ed2:	f893 607c 	ldrb.w	r6, [r3, #124]	; 0x7c
 8004ed6:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8004eda:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8004edc:	fb06 3101 	mla	r1, r6, r1, r3
 8004ee0:	b289      	uxth	r1, r1
 8004ee2:	4623      	mov	r3, r4
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 8004ee4:	4403      	add	r3, r0
 8004ee6:	4421      	add	r1, r4
 8004ee8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004eec:	4419      	add	r1, r3
 8004eee:	f881 209d 	strb.w	r2, [r1, #157]	; 0x9d
}
 8004ef2:	b005      	add	sp, #20
 8004ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004ef6:	4b3f      	ldr	r3, [pc, #252]	; (8004ff4 <prvTraceSetPriorityProperty+0x140>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 8004efa:	2200      	movs	r2, #0
 8004efc:	6322      	str	r2, [r4, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004efe:	b103      	cbz	r3, 8004f02 <prvTraceSetPriorityProperty+0x4e>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8004f00:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8004f02:	4a3d      	ldr	r2, [pc, #244]	; (8004ff8 <prvTraceSetPriorityProperty+0x144>)
 8004f04:	6813      	ldr	r3, [r2, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d050      	beq.n	8004fac <prvTraceSetPriorityProperty+0xf8>
}
 8004f0a:	b005      	add	sp, #20
 8004f0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (RecorderDataPtr != NULL)
 8004f0e:	b12c      	cbz	r4, 8004f1c <prvTraceSetPriorityProperty+0x68>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004f10:	4b38      	ldr	r3, [pc, #224]	; (8004ff4 <prvTraceSetPriorityProperty+0x140>)
 8004f12:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 8004f14:	2200      	movs	r2, #0
 8004f16:	6322      	str	r2, [r4, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004f18:	b103      	cbz	r3, 8004f1c <prvTraceSetPriorityProperty+0x68>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8004f1a:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8004f1c:	4a36      	ldr	r2, [pc, #216]	; (8004ff8 <prvTraceSetPriorityProperty+0x144>)
 8004f1e:	6813      	ldr	r3, [r2, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1f2      	bne.n	8004f0a <prvTraceSetPriorityProperty+0x56>
		if (RecorderDataPtr != NULL)
 8004f24:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8004f26:	4b35      	ldr	r3, [pc, #212]	; (8004ffc <prvTraceSetPriorityProperty+0x148>)
 8004f28:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8004f2a:	2900      	cmp	r1, #0
 8004f2c:	d0ed      	beq.n	8004f0a <prvTraceSetPriorityProperty+0x56>
		dst[i] = src[i];
 8004f2e:	2254      	movs	r2, #84	; 0x54
 8004f30:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8004f34:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8004f38:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8004f3c:	4298      	cmp	r0, r3
 8004f3e:	d005      	beq.n	8004f4c <prvTraceSetPriorityProperty+0x98>
		dst[i] = src[i];
 8004f40:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004f44:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8004f48:	2a00      	cmp	r2, #0
 8004f4a:	d1f7      	bne.n	8004f3c <prvTraceSetPriorityProperty+0x88>
			RecorderDataPtr->internalErrorOccured = 1;
 8004f4c:	682b      	ldr	r3, [r5, #0]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
}
 8004f54:	b005      	add	sp, #20
 8004f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004f58:	4b26      	ldr	r3, [pc, #152]	; (8004ff4 <prvTraceSetPriorityProperty+0x140>)
		RecorderDataPtr->recorderActive = 0;
 8004f5a:	6321      	str	r1, [r4, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004f5c:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 8004f5e:	9103      	str	r1, [sp, #12]
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d03a      	beq.n	8004fda <prvTraceSetPriorityProperty+0x126>
	if (traceErrorMessage == NULL)
 8004f64:	4e24      	ldr	r6, [pc, #144]	; (8004ff8 <prvTraceSetPriorityProperty+0x144>)
 8004f66:	e9cd 0201 	strd	r0, r2, [sp, #4]
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8004f6a:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8004f6c:	6837      	ldr	r7, [r6, #0]
 8004f6e:	682b      	ldr	r3, [r5, #0]
 8004f70:	9903      	ldr	r1, [sp, #12]
 8004f72:	e9dd 0201 	ldrd	r0, r2, [sp, #4]
 8004f76:	2f00      	cmp	r7, #0
 8004f78:	d1b4      	bne.n	8004ee4 <prvTraceSetPriorityProperty+0x30>
		traceErrorMessage = (char*)(intptr_t) msg;
 8004f7a:	4921      	ldr	r1, [pc, #132]	; (8005000 <prvTraceSetPriorityProperty+0x14c>)
 8004f7c:	6031      	str	r1, [r6, #0]
		if (RecorderDataPtr != NULL)
 8004f7e:	b353      	cbz	r3, 8004fd6 <prvTraceSetPriorityProperty+0x122>
 8004f80:	491f      	ldr	r1, [pc, #124]	; (8005000 <prvTraceSetPriorityProperty+0x14c>)
		dst[i] = src[i];
 8004f82:	2654      	movs	r6, #84	; 0x54
 8004f84:	f883 6914 	strb.w	r6, [r3, #2324]	; 0x914
 8004f88:	f101 074f 	add.w	r7, r1, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8004f8c:	f603 1314 	addw	r3, r3, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8004f90:	42b9      	cmp	r1, r7
 8004f92:	d005      	beq.n	8004fa0 <prvTraceSetPriorityProperty+0xec>
		dst[i] = src[i];
 8004f94:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 8004f98:	f803 6f01 	strb.w	r6, [r3, #1]!
		if (src[i] == 0)
 8004f9c:	2e00      	cmp	r6, #0
 8004f9e:	d1f7      	bne.n	8004f90 <prvTraceSetPriorityProperty+0xdc>
			RecorderDataPtr->internalErrorOccured = 1;
 8004fa0:	682b      	ldr	r3, [r5, #0]
 8004fa2:	2101      	movs	r1, #1
 8004fa4:	f8c3 190c 	str.w	r1, [r3, #2316]	; 0x90c
 8004fa8:	2100      	movs	r1, #0
 8004faa:	e79b      	b.n	8004ee4 <prvTraceSetPriorityProperty+0x30>
		if (RecorderDataPtr != NULL)
 8004fac:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8004fae:	4b15      	ldr	r3, [pc, #84]	; (8005004 <prvTraceSetPriorityProperty+0x150>)
 8004fb0:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8004fb2:	2900      	cmp	r1, #0
 8004fb4:	d0a9      	beq.n	8004f0a <prvTraceSetPriorityProperty+0x56>
		dst[i] = src[i];
 8004fb6:	2254      	movs	r2, #84	; 0x54
 8004fb8:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8004fbc:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8004fc0:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8004fc4:	4283      	cmp	r3, r0
 8004fc6:	d0c1      	beq.n	8004f4c <prvTraceSetPriorityProperty+0x98>
		dst[i] = src[i];
 8004fc8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8004fcc:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8004fd0:	2a00      	cmp	r2, #0
 8004fd2:	d1f7      	bne.n	8004fc4 <prvTraceSetPriorityProperty+0x110>
 8004fd4:	e7ba      	b.n	8004f4c <prvTraceSetPriorityProperty+0x98>
		if (RecorderDataPtr != NULL)
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	e784      	b.n	8004ee4 <prvTraceSetPriorityProperty+0x30>
	if (traceErrorMessage == NULL)
 8004fda:	4e07      	ldr	r6, [pc, #28]	; (8004ff8 <prvTraceSetPriorityProperty+0x144>)
 8004fdc:	6831      	ldr	r1, [r6, #0]
 8004fde:	b111      	cbz	r1, 8004fe6 <prvTraceSetPriorityProperty+0x132>
 8004fe0:	4619      	mov	r1, r3
 8004fe2:	4623      	mov	r3, r4
 8004fe4:	e77e      	b.n	8004ee4 <prvTraceSetPriorityProperty+0x30>
		traceErrorMessage = (char*)(intptr_t) msg;
 8004fe6:	4906      	ldr	r1, [pc, #24]	; (8005000 <prvTraceSetPriorityProperty+0x14c>)
 8004fe8:	6031      	str	r1, [r6, #0]
 8004fea:	4623      	mov	r3, r4
 8004fec:	e7c8      	b.n	8004f80 <prvTraceSetPriorityProperty+0xcc>
 8004fee:	bf00      	nop
 8004ff0:	20000b94 	.word	0x20000b94
 8004ff4:	20000c54 	.word	0x20000c54
 8004ff8:	20000c48 	.word	0x20000c48
 8004ffc:	0800ccd0 	.word	0x0800ccd0
 8005000:	0800d3d8 	.word	0x0800d3d8
 8005004:	0800d398 	.word	0x0800d398

08005008 <prvTraceGetPriorityProperty>:
{
 8005008:	b570      	push	{r4, r5, r6, lr}
 800500a:	4d4d      	ldr	r5, [pc, #308]	; (8005140 <prvTraceGetPriorityProperty+0x138>)
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800500c:	2808      	cmp	r0, #8
{
 800500e:	b082      	sub	sp, #8
 8005010:	682c      	ldr	r4, [r5, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8005012:	d827      	bhi.n	8005064 <prvTraceGetPriorityProperty+0x5c>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005014:	1823      	adds	r3, r4, r0
 8005016:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 800501a:	428a      	cmp	r2, r1
 800501c:	d315      	bcc.n	800504a <prvTraceGetPriorityProperty+0x42>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 800501e:	2900      	cmp	r1, #0
 8005020:	d044      	beq.n	80050ac <prvTraceGetPriorityProperty+0xa4>
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005022:	eb04 0240 	add.w	r2, r4, r0, lsl #1
 8005026:	f893 507c 	ldrb.w	r5, [r3, #124]	; 0x7c
 800502a:	f8b2 3088 	ldrh.w	r3, [r2, #136]	; 0x88
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800502e:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005030:	fb05 3101 	mla	r1, r5, r1, r3
 8005034:	b289      	uxth	r1, r1
 8005036:	4623      	mov	r3, r4
	return TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id);
 8005038:	4403      	add	r3, r0
 800503a:	4421      	add	r1, r4
 800503c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005040:	4419      	add	r1, r3
 8005042:	f891 009d 	ldrb.w	r0, [r1, #157]	; 0x9d
}
 8005046:	b002      	add	sp, #8
 8005048:	bd70      	pop	{r4, r5, r6, pc}
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800504a:	4b3e      	ldr	r3, [pc, #248]	; (8005144 <prvTraceGetPriorityProperty+0x13c>)
 800504c:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 800504e:	2200      	movs	r2, #0
 8005050:	6322      	str	r2, [r4, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005052:	b103      	cbz	r3, 8005056 <prvTraceGetPriorityProperty+0x4e>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005054:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8005056:	4a3c      	ldr	r2, [pc, #240]	; (8005148 <prvTraceGetPriorityProperty+0x140>)
 8005058:	6813      	ldr	r3, [r2, #0]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d04e      	beq.n	80050fc <prvTraceGetPriorityProperty+0xf4>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 800505e:	2000      	movs	r0, #0
}
 8005060:	b002      	add	sp, #8
 8005062:	bd70      	pop	{r4, r5, r6, pc}
	if (RecorderDataPtr != NULL)
 8005064:	b12c      	cbz	r4, 8005072 <prvTraceGetPriorityProperty+0x6a>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005066:	4b37      	ldr	r3, [pc, #220]	; (8005144 <prvTraceGetPriorityProperty+0x13c>)
 8005068:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 800506a:	2200      	movs	r2, #0
 800506c:	6322      	str	r2, [r4, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800506e:	b103      	cbz	r3, 8005072 <prvTraceGetPriorityProperty+0x6a>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005070:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8005072:	4a35      	ldr	r2, [pc, #212]	; (8005148 <prvTraceGetPriorityProperty+0x140>)
 8005074:	6813      	ldr	r3, [r2, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1f1      	bne.n	800505e <prvTraceGetPriorityProperty+0x56>
		if (RecorderDataPtr != NULL)
 800507a:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 800507c:	4b33      	ldr	r3, [pc, #204]	; (800514c <prvTraceGetPriorityProperty+0x144>)
 800507e:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005080:	2900      	cmp	r1, #0
 8005082:	d0ec      	beq.n	800505e <prvTraceGetPriorityProperty+0x56>
		dst[i] = src[i];
 8005084:	2254      	movs	r2, #84	; 0x54
 8005086:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 800508a:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800508e:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005092:	4298      	cmp	r0, r3
 8005094:	d005      	beq.n	80050a2 <prvTraceGetPriorityProperty+0x9a>
		dst[i] = src[i];
 8005096:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800509a:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 800509e:	2a00      	cmp	r2, #0
 80050a0:	d1f7      	bne.n	8005092 <prvTraceGetPriorityProperty+0x8a>
			RecorderDataPtr->internalErrorOccured = 1;
 80050a2:	682b      	ldr	r3, [r5, #0]
 80050a4:	2201      	movs	r2, #1
 80050a6:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80050aa:	e7d8      	b.n	800505e <prvTraceGetPriorityProperty+0x56>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80050ac:	4b25      	ldr	r3, [pc, #148]	; (8005144 <prvTraceGetPriorityProperty+0x13c>)
		RecorderDataPtr->recorderActive = 0;
 80050ae:	6321      	str	r1, [r4, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80050b0:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 80050b2:	9101      	str	r1, [sp, #4]
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d038      	beq.n	800512a <prvTraceGetPriorityProperty+0x122>
 80050b8:	9000      	str	r0, [sp, #0]
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80050ba:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 80050bc:	4a22      	ldr	r2, [pc, #136]	; (8005148 <prvTraceGetPriorityProperty+0x140>)
 80050be:	682b      	ldr	r3, [r5, #0]
 80050c0:	6816      	ldr	r6, [r2, #0]
 80050c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050c6:	2e00      	cmp	r6, #0
 80050c8:	d1b6      	bne.n	8005038 <prvTraceGetPriorityProperty+0x30>
		traceErrorMessage = (char*)(intptr_t) msg;
 80050ca:	4921      	ldr	r1, [pc, #132]	; (8005150 <prvTraceGetPriorityProperty+0x148>)
 80050cc:	6011      	str	r1, [r2, #0]
		if (RecorderDataPtr != NULL)
 80050ce:	b353      	cbz	r3, 8005126 <prvTraceGetPriorityProperty+0x11e>
 80050d0:	4a1f      	ldr	r2, [pc, #124]	; (8005150 <prvTraceGetPriorityProperty+0x148>)
		dst[i] = src[i];
 80050d2:	2154      	movs	r1, #84	; 0x54
 80050d4:	f883 1914 	strb.w	r1, [r3, #2324]	; 0x914
 80050d8:	f102 064f 	add.w	r6, r2, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80050dc:	f603 1314 	addw	r3, r3, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 80050e0:	42b2      	cmp	r2, r6
 80050e2:	d005      	beq.n	80050f0 <prvTraceGetPriorityProperty+0xe8>
		dst[i] = src[i];
 80050e4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 80050e8:	f803 1f01 	strb.w	r1, [r3, #1]!
		if (src[i] == 0)
 80050ec:	2900      	cmp	r1, #0
 80050ee:	d1f7      	bne.n	80050e0 <prvTraceGetPriorityProperty+0xd8>
			RecorderDataPtr->internalErrorOccured = 1;
 80050f0:	682b      	ldr	r3, [r5, #0]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80050f8:	2100      	movs	r1, #0
 80050fa:	e79d      	b.n	8005038 <prvTraceGetPriorityProperty+0x30>
		if (RecorderDataPtr != NULL)
 80050fc:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 80050fe:	4b15      	ldr	r3, [pc, #84]	; (8005154 <prvTraceGetPriorityProperty+0x14c>)
 8005100:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005102:	2900      	cmp	r1, #0
 8005104:	d0ab      	beq.n	800505e <prvTraceGetPriorityProperty+0x56>
		dst[i] = src[i];
 8005106:	2254      	movs	r2, #84	; 0x54
 8005108:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 800510c:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005110:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005114:	4298      	cmp	r0, r3
 8005116:	d0c4      	beq.n	80050a2 <prvTraceGetPriorityProperty+0x9a>
		dst[i] = src[i];
 8005118:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800511c:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005120:	2a00      	cmp	r2, #0
 8005122:	d1f7      	bne.n	8005114 <prvTraceGetPriorityProperty+0x10c>
 8005124:	e7bd      	b.n	80050a2 <prvTraceGetPriorityProperty+0x9a>
		if (RecorderDataPtr != NULL)
 8005126:	4619      	mov	r1, r3
 8005128:	e786      	b.n	8005038 <prvTraceGetPriorityProperty+0x30>
	if (traceErrorMessage == NULL)
 800512a:	4a07      	ldr	r2, [pc, #28]	; (8005148 <prvTraceGetPriorityProperty+0x140>)
 800512c:	6811      	ldr	r1, [r2, #0]
 800512e:	b111      	cbz	r1, 8005136 <prvTraceGetPriorityProperty+0x12e>
 8005130:	4619      	mov	r1, r3
 8005132:	4623      	mov	r3, r4
 8005134:	e780      	b.n	8005038 <prvTraceGetPriorityProperty+0x30>
		traceErrorMessage = (char*)(intptr_t) msg;
 8005136:	4906      	ldr	r1, [pc, #24]	; (8005150 <prvTraceGetPriorityProperty+0x148>)
 8005138:	6011      	str	r1, [r2, #0]
 800513a:	4623      	mov	r3, r4
 800513c:	e7c8      	b.n	80050d0 <prvTraceGetPriorityProperty+0xc8>
 800513e:	bf00      	nop
 8005140:	20000b94 	.word	0x20000b94
 8005144:	20000c54 	.word	0x20000c54
 8005148:	20000c48 	.word	0x20000c48
 800514c:	0800cb60 	.word	0x0800cb60
 8005150:	0800d3d8 	.word	0x0800d3d8
 8005154:	0800cbac 	.word	0x0800cbac

08005158 <prvTraceSetObjectState>:
{
 8005158:	b5f0      	push	{r4, r5, r6, r7, lr}
 800515a:	4d4e      	ldr	r5, [pc, #312]	; (8005294 <prvTraceSetObjectState+0x13c>)
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 800515c:	2808      	cmp	r0, #8
{
 800515e:	b085      	sub	sp, #20
 8005160:	682c      	ldr	r4, [r5, #0]
	TRACE_ASSERT(objectclass < TRACE_NCLASSES,
 8005162:	d826      	bhi.n	80051b2 <prvTraceSetObjectState+0x5a>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005164:	1823      	adds	r3, r4, r0
 8005166:	f893 6064 	ldrb.w	r6, [r3, #100]	; 0x64
 800516a:	428e      	cmp	r6, r1
 800516c:	d315      	bcc.n	800519a <prvTraceSetObjectState+0x42>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 800516e:	2900      	cmp	r1, #0
 8005170:	d044      	beq.n	80051fc <prvTraceSetObjectState+0xa4>
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005172:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 8005176:	f893 607c 	ldrb.w	r6, [r3, #124]	; 0x7c
 800517a:	f8b5 3088 	ldrh.w	r3, [r5, #136]	; 0x88
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 800517e:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005180:	fb06 3101 	mla	r1, r6, r1, r3
 8005184:	b289      	uxth	r1, r1
 8005186:	4623      	mov	r3, r4
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 8005188:	4403      	add	r3, r0
 800518a:	4421      	add	r1, r4
 800518c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8005190:	4419      	add	r1, r3
 8005192:	f881 209c 	strb.w	r2, [r1, #156]	; 0x9c
}
 8005196:	b005      	add	sp, #20
 8005198:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800519a:	4b3f      	ldr	r3, [pc, #252]	; (8005298 <prvTraceSetObjectState+0x140>)
 800519c:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 800519e:	2200      	movs	r2, #0
 80051a0:	6322      	str	r2, [r4, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80051a2:	b103      	cbz	r3, 80051a6 <prvTraceSetObjectState+0x4e>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80051a4:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 80051a6:	4a3d      	ldr	r2, [pc, #244]	; (800529c <prvTraceSetObjectState+0x144>)
 80051a8:	6813      	ldr	r3, [r2, #0]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d050      	beq.n	8005250 <prvTraceSetObjectState+0xf8>
}
 80051ae:	b005      	add	sp, #20
 80051b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (RecorderDataPtr != NULL)
 80051b2:	b12c      	cbz	r4, 80051c0 <prvTraceSetObjectState+0x68>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80051b4:	4b38      	ldr	r3, [pc, #224]	; (8005298 <prvTraceSetObjectState+0x140>)
 80051b6:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 80051b8:	2200      	movs	r2, #0
 80051ba:	6322      	str	r2, [r4, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80051bc:	b103      	cbz	r3, 80051c0 <prvTraceSetObjectState+0x68>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80051be:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 80051c0:	4a36      	ldr	r2, [pc, #216]	; (800529c <prvTraceSetObjectState+0x144>)
 80051c2:	6813      	ldr	r3, [r2, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1f2      	bne.n	80051ae <prvTraceSetObjectState+0x56>
		if (RecorderDataPtr != NULL)
 80051c8:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 80051ca:	4b35      	ldr	r3, [pc, #212]	; (80052a0 <prvTraceSetObjectState+0x148>)
 80051cc:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 80051ce:	2900      	cmp	r1, #0
 80051d0:	d0ed      	beq.n	80051ae <prvTraceSetObjectState+0x56>
		dst[i] = src[i];
 80051d2:	2254      	movs	r2, #84	; 0x54
 80051d4:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 80051d8:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80051dc:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 80051e0:	4298      	cmp	r0, r3
 80051e2:	d005      	beq.n	80051f0 <prvTraceSetObjectState+0x98>
		dst[i] = src[i];
 80051e4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80051e8:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 80051ec:	2a00      	cmp	r2, #0
 80051ee:	d1f7      	bne.n	80051e0 <prvTraceSetObjectState+0x88>
			RecorderDataPtr->internalErrorOccured = 1;
 80051f0:	682b      	ldr	r3, [r5, #0]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
}
 80051f8:	b005      	add	sp, #20
 80051fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80051fc:	4b26      	ldr	r3, [pc, #152]	; (8005298 <prvTraceSetObjectState+0x140>)
		RecorderDataPtr->recorderActive = 0;
 80051fe:	6321      	str	r1, [r4, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005200:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 8005202:	9103      	str	r1, [sp, #12]
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005204:	2b00      	cmp	r3, #0
 8005206:	d03a      	beq.n	800527e <prvTraceSetObjectState+0x126>
	if (traceErrorMessage == NULL)
 8005208:	4e24      	ldr	r6, [pc, #144]	; (800529c <prvTraceSetObjectState+0x144>)
 800520a:	e9cd 0201 	strd	r0, r2, [sp, #4]
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 800520e:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8005210:	6837      	ldr	r7, [r6, #0]
 8005212:	682b      	ldr	r3, [r5, #0]
 8005214:	9903      	ldr	r1, [sp, #12]
 8005216:	e9dd 0201 	ldrd	r0, r2, [sp, #4]
 800521a:	2f00      	cmp	r7, #0
 800521c:	d1b4      	bne.n	8005188 <prvTraceSetObjectState+0x30>
		traceErrorMessage = (char*)(intptr_t) msg;
 800521e:	4921      	ldr	r1, [pc, #132]	; (80052a4 <prvTraceSetObjectState+0x14c>)
 8005220:	6031      	str	r1, [r6, #0]
		if (RecorderDataPtr != NULL)
 8005222:	b353      	cbz	r3, 800527a <prvTraceSetObjectState+0x122>
 8005224:	491f      	ldr	r1, [pc, #124]	; (80052a4 <prvTraceSetObjectState+0x14c>)
		dst[i] = src[i];
 8005226:	2654      	movs	r6, #84	; 0x54
 8005228:	f883 6914 	strb.w	r6, [r3, #2324]	; 0x914
 800522c:	f101 074f 	add.w	r7, r1, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005230:	f603 1314 	addw	r3, r3, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005234:	42b9      	cmp	r1, r7
 8005236:	d005      	beq.n	8005244 <prvTraceSetObjectState+0xec>
		dst[i] = src[i];
 8005238:	f811 6f01 	ldrb.w	r6, [r1, #1]!
 800523c:	f803 6f01 	strb.w	r6, [r3, #1]!
		if (src[i] == 0)
 8005240:	2e00      	cmp	r6, #0
 8005242:	d1f7      	bne.n	8005234 <prvTraceSetObjectState+0xdc>
			RecorderDataPtr->internalErrorOccured = 1;
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	2101      	movs	r1, #1
 8005248:	f8c3 190c 	str.w	r1, [r3, #2316]	; 0x90c
 800524c:	2100      	movs	r1, #0
 800524e:	e79b      	b.n	8005188 <prvTraceSetObjectState+0x30>
		if (RecorderDataPtr != NULL)
 8005250:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005252:	4b15      	ldr	r3, [pc, #84]	; (80052a8 <prvTraceSetObjectState+0x150>)
 8005254:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005256:	2900      	cmp	r1, #0
 8005258:	d0a9      	beq.n	80051ae <prvTraceSetObjectState+0x56>
		dst[i] = src[i];
 800525a:	2254      	movs	r2, #84	; 0x54
 800525c:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005260:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005264:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005268:	4298      	cmp	r0, r3
 800526a:	d0c1      	beq.n	80051f0 <prvTraceSetObjectState+0x98>
		dst[i] = src[i];
 800526c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005270:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005274:	2a00      	cmp	r2, #0
 8005276:	d1f7      	bne.n	8005268 <prvTraceSetObjectState+0x110>
 8005278:	e7ba      	b.n	80051f0 <prvTraceSetObjectState+0x98>
		if (RecorderDataPtr != NULL)
 800527a:	4619      	mov	r1, r3
 800527c:	e784      	b.n	8005188 <prvTraceSetObjectState+0x30>
	if (traceErrorMessage == NULL)
 800527e:	4e07      	ldr	r6, [pc, #28]	; (800529c <prvTraceSetObjectState+0x144>)
 8005280:	6831      	ldr	r1, [r6, #0]
 8005282:	b111      	cbz	r1, 800528a <prvTraceSetObjectState+0x132>
 8005284:	4619      	mov	r1, r3
 8005286:	4623      	mov	r3, r4
 8005288:	e77e      	b.n	8005188 <prvTraceSetObjectState+0x30>
		traceErrorMessage = (char*)(intptr_t) msg;
 800528a:	4906      	ldr	r1, [pc, #24]	; (80052a4 <prvTraceSetObjectState+0x14c>)
 800528c:	6031      	str	r1, [r6, #0]
 800528e:	4623      	mov	r3, r4
 8005290:	e7c8      	b.n	8005224 <prvTraceSetObjectState+0xcc>
 8005292:	bf00      	nop
 8005294:	20000b94 	.word	0x20000b94
 8005298:	20000c54 	.word	0x20000c54
 800529c:	20000c48 	.word	0x20000c48
 80052a0:	0800cc50 	.word	0x0800cc50
 80052a4:	0800d3d8 	.word	0x0800d3d8
 80052a8:	0800cc94 	.word	0x0800cc94

080052ac <prvTraceSetTaskInstanceFinished>:
{
 80052ac:	b570      	push	{r4, r5, r6, lr}
	TRACE_ASSERT(handle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[TRACE_CLASS_TASK],
 80052ae:	4e36      	ldr	r6, [pc, #216]	; (8005388 <prvTraceSetTaskInstanceFinished+0xdc>)
 80052b0:	6835      	ldr	r5, [r6, #0]
 80052b2:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
 80052b6:	4283      	cmp	r3, r0
 80052b8:	d337      	bcc.n	800532a <prvTraceSetTaskInstanceFinished+0x7e>
 80052ba:	4604      	mov	r4, r0
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80052bc:	b180      	cbz	r0, 80052e0 <prvTraceSetTaskInstanceFinished+0x34>
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 80052be:	f895 307f 	ldrb.w	r3, [r5, #127]	; 0x7f
 80052c2:	f8b5 008e 	ldrh.w	r0, [r5, #142]	; 0x8e
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 80052c6:	3c01      	subs	r4, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 80052c8:	fb03 0404 	mla	r4, r3, r4, r0
 80052cc:	b2a4      	uxth	r4, r4
 80052ce:	462b      	mov	r3, r5
	TRACE_PROPERTY_OBJECT_STATE(TRACE_CLASS_TASK, handle) = 0;
 80052d0:	f893 0073 	ldrb.w	r0, [r3, #115]	; 0x73
 80052d4:	442c      	add	r4, r5
 80052d6:	4404      	add	r4, r0
 80052d8:	2300      	movs	r3, #0
 80052da:	f884 309c 	strb.w	r3, [r4, #156]	; 0x9c
}
 80052de:	bd70      	pop	{r4, r5, r6, pc}
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80052e0:	4b2a      	ldr	r3, [pc, #168]	; (800538c <prvTraceSetTaskInstanceFinished+0xe0>)
		RecorderDataPtr->recorderActive = 0;
 80052e2:	6328      	str	r0, [r5, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	2800      	cmp	r0, #0
 80052e8:	d044      	beq.n	8005374 <prvTraceSetTaskInstanceFinished+0xc8>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80052ea:	4780      	blx	r0
	if (traceErrorMessage == NULL)
 80052ec:	4a28      	ldr	r2, [pc, #160]	; (8005390 <prvTraceSetTaskInstanceFinished+0xe4>)
 80052ee:	6833      	ldr	r3, [r6, #0]
 80052f0:	6811      	ldr	r1, [r2, #0]
 80052f2:	2900      	cmp	r1, #0
 80052f4:	d1ec      	bne.n	80052d0 <prvTraceSetTaskInstanceFinished+0x24>
		traceErrorMessage = (char*)(intptr_t) msg;
 80052f6:	4927      	ldr	r1, [pc, #156]	; (8005394 <prvTraceSetTaskInstanceFinished+0xe8>)
 80052f8:	6011      	str	r1, [r2, #0]
		if (RecorderDataPtr != NULL)
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d038      	beq.n	8005370 <prvTraceSetTaskInstanceFinished+0xc4>
 80052fe:	4a25      	ldr	r2, [pc, #148]	; (8005394 <prvTraceSetTaskInstanceFinished+0xe8>)
		dst[i] = src[i];
 8005300:	2154      	movs	r1, #84	; 0x54
 8005302:	f883 1914 	strb.w	r1, [r3, #2324]	; 0x914
 8005306:	f102 004f 	add.w	r0, r2, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800530a:	f603 1314 	addw	r3, r3, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 800530e:	4290      	cmp	r0, r2
 8005310:	d005      	beq.n	800531e <prvTraceSetTaskInstanceFinished+0x72>
		dst[i] = src[i];
 8005312:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005316:	f803 1f01 	strb.w	r1, [r3, #1]!
		if (src[i] == 0)
 800531a:	2900      	cmp	r1, #0
 800531c:	d1f7      	bne.n	800530e <prvTraceSetTaskInstanceFinished+0x62>
			RecorderDataPtr->internalErrorOccured = 1;
 800531e:	6833      	ldr	r3, [r6, #0]
 8005320:	2201      	movs	r2, #1
 8005322:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005326:	2400      	movs	r4, #0
 8005328:	e7d2      	b.n	80052d0 <prvTraceSetTaskInstanceFinished+0x24>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800532a:	4b18      	ldr	r3, [pc, #96]	; (800538c <prvTraceSetTaskInstanceFinished+0xe0>)
 800532c:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 800532e:	2200      	movs	r2, #0
 8005330:	632a      	str	r2, [r5, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005332:	b103      	cbz	r3, 8005336 <prvTraceSetTaskInstanceFinished+0x8a>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005334:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8005336:	4a16      	ldr	r2, [pc, #88]	; (8005390 <prvTraceSetTaskInstanceFinished+0xe4>)
 8005338:	6813      	ldr	r3, [r2, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d1cf      	bne.n	80052de <prvTraceSetTaskInstanceFinished+0x32>
		if (RecorderDataPtr != NULL)
 800533e:	6831      	ldr	r1, [r6, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005340:	4b15      	ldr	r3, [pc, #84]	; (8005398 <prvTraceSetTaskInstanceFinished+0xec>)
 8005342:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005344:	2900      	cmp	r1, #0
 8005346:	d0ca      	beq.n	80052de <prvTraceSetTaskInstanceFinished+0x32>
		dst[i] = src[i];
 8005348:	2254      	movs	r2, #84	; 0x54
 800534a:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 800534e:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005352:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005356:	4298      	cmp	r0, r3
 8005358:	d005      	beq.n	8005366 <prvTraceSetTaskInstanceFinished+0xba>
		dst[i] = src[i];
 800535a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800535e:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005362:	2a00      	cmp	r2, #0
 8005364:	d1f7      	bne.n	8005356 <prvTraceSetTaskInstanceFinished+0xaa>
			RecorderDataPtr->internalErrorOccured = 1;
 8005366:	6833      	ldr	r3, [r6, #0]
 8005368:	2201      	movs	r2, #1
 800536a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
}
 800536e:	bd70      	pop	{r4, r5, r6, pc}
		if (RecorderDataPtr != NULL)
 8005370:	461c      	mov	r4, r3
 8005372:	e7ad      	b.n	80052d0 <prvTraceSetTaskInstanceFinished+0x24>
	if (traceErrorMessage == NULL)
 8005374:	4b06      	ldr	r3, [pc, #24]	; (8005390 <prvTraceSetTaskInstanceFinished+0xe4>)
 8005376:	681a      	ldr	r2, [r3, #0]
 8005378:	b112      	cbz	r2, 8005380 <prvTraceSetTaskInstanceFinished+0xd4>
 800537a:	4604      	mov	r4, r0
 800537c:	462b      	mov	r3, r5
 800537e:	e7a7      	b.n	80052d0 <prvTraceSetTaskInstanceFinished+0x24>
		traceErrorMessage = (char*)(intptr_t) msg;
 8005380:	4904      	ldr	r1, [pc, #16]	; (8005394 <prvTraceSetTaskInstanceFinished+0xe8>)
 8005382:	6019      	str	r1, [r3, #0]
 8005384:	462b      	mov	r3, r5
 8005386:	e7ba      	b.n	80052fe <prvTraceSetTaskInstanceFinished+0x52>
 8005388:	20000b94 	.word	0x20000b94
 800538c:	20000c54 	.word	0x20000c54
 8005390:	20000c48 	.word	0x20000c48
 8005394:	0800d3d8 	.word	0x0800d3d8
 8005398:	0800cd1c 	.word	0x0800cd1c

0800539c <uiIndexOfObject>:
{
 800539c:	b538      	push	{r3, r4, r5, lr}
 800539e:	4c2f      	ldr	r4, [pc, #188]	; (800545c <uiIndexOfObject+0xc0>)
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80053a0:	2908      	cmp	r1, #8
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	d83a      	bhi.n	800541c <uiIndexOfObject+0x80>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80053a6:	b178      	cbz	r0, 80053c8 <uiIndexOfObject+0x2c>
 80053a8:	185a      	adds	r2, r3, r1
 80053aa:	f892 5064 	ldrb.w	r5, [r2, #100]	; 0x64
 80053ae:	4285      	cmp	r5, r0
 80053b0:	d310      	bcc.n	80053d4 <uiIndexOfObject+0x38>
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 80053b2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 80053b6:	f892 207c 	ldrb.w	r2, [r2, #124]	; 0x7c
 80053ba:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 80053be:	3801      	subs	r0, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 80053c0:	fb02 3000 	mla	r0, r2, r0, r3
 80053c4:	b280      	uxth	r0, r0
}
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
	if (RecorderDataPtr != NULL)
 80053c8:	b923      	cbnz	r3, 80053d4 <uiIndexOfObject+0x38>
	if (traceErrorMessage == NULL)
 80053ca:	4a25      	ldr	r2, [pc, #148]	; (8005460 <uiIndexOfObject+0xc4>)
 80053cc:	6813      	ldr	r3, [r2, #0]
 80053ce:	b163      	cbz	r3, 80053ea <uiIndexOfObject+0x4e>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80053d0:	2000      	movs	r0, #0
}
 80053d2:	bd38      	pop	{r3, r4, r5, pc}
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80053d4:	4a23      	ldr	r2, [pc, #140]	; (8005464 <uiIndexOfObject+0xc8>)
 80053d6:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 80053d8:	2100      	movs	r1, #0
 80053da:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80053dc:	2a00      	cmp	r2, #0
 80053de:	d0f4      	beq.n	80053ca <uiIndexOfObject+0x2e>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80053e0:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 80053e2:	4a1f      	ldr	r2, [pc, #124]	; (8005460 <uiIndexOfObject+0xc4>)
 80053e4:	6813      	ldr	r3, [r2, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f2      	bne.n	80053d0 <uiIndexOfObject+0x34>
		if (RecorderDataPtr != NULL)
 80053ea:	6821      	ldr	r1, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 80053ec:	4b1e      	ldr	r3, [pc, #120]	; (8005468 <uiIndexOfObject+0xcc>)
 80053ee:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 80053f0:	2900      	cmp	r1, #0
 80053f2:	d0ed      	beq.n	80053d0 <uiIndexOfObject+0x34>
		dst[i] = src[i];
 80053f4:	2254      	movs	r2, #84	; 0x54
 80053f6:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 80053fa:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80053fe:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005402:	4283      	cmp	r3, r0
 8005404:	d005      	beq.n	8005412 <uiIndexOfObject+0x76>
		dst[i] = src[i];
 8005406:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800540a:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 800540e:	2a00      	cmp	r2, #0
 8005410:	d1f7      	bne.n	8005402 <uiIndexOfObject+0x66>
			RecorderDataPtr->internalErrorOccured = 1;
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	2201      	movs	r2, #1
 8005416:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800541a:	e7d9      	b.n	80053d0 <uiIndexOfObject+0x34>
	if (RecorderDataPtr != NULL)
 800541c:	b12b      	cbz	r3, 800542a <uiIndexOfObject+0x8e>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800541e:	4a11      	ldr	r2, [pc, #68]	; (8005464 <uiIndexOfObject+0xc8>)
 8005420:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8005422:	2100      	movs	r1, #0
 8005424:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005426:	b102      	cbz	r2, 800542a <uiIndexOfObject+0x8e>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005428:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 800542a:	4a0d      	ldr	r2, [pc, #52]	; (8005460 <uiIndexOfObject+0xc4>)
 800542c:	6813      	ldr	r3, [r2, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1ce      	bne.n	80053d0 <uiIndexOfObject+0x34>
		if (RecorderDataPtr != NULL)
 8005432:	6821      	ldr	r1, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005434:	4b0d      	ldr	r3, [pc, #52]	; (800546c <uiIndexOfObject+0xd0>)
 8005436:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005438:	2900      	cmp	r1, #0
 800543a:	d0c9      	beq.n	80053d0 <uiIndexOfObject+0x34>
		dst[i] = src[i];
 800543c:	2254      	movs	r2, #84	; 0x54
 800543e:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005442:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005446:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 800544a:	4283      	cmp	r3, r0
 800544c:	d0e1      	beq.n	8005412 <uiIndexOfObject+0x76>
		dst[i] = src[i];
 800544e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005452:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005456:	2a00      	cmp	r2, #0
 8005458:	d1f7      	bne.n	800544a <uiIndexOfObject+0xae>
 800545a:	e7da      	b.n	8005412 <uiIndexOfObject+0x76>
 800545c:	20000b94 	.word	0x20000b94
 8005460:	20000c48 	.word	0x20000c48
 8005464:	20000c54 	.word	0x20000c54
 8005468:	0800d3d8 	.word	0x0800d3d8
 800546c:	0800d140 	.word	0x0800d140

08005470 <prvTraceGetObjectHandle>:
{
 8005470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 8005472:	4d49      	ldr	r5, [pc, #292]	; (8005598 <prvTraceGetObjectHandle+0x128>)
 8005474:	682a      	ldr	r2, [r5, #0]
 8005476:	2a00      	cmp	r2, #0
 8005478:	d056      	beq.n	8005528 <prvTraceGetObjectHandle+0xb8>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 800547a:	2808      	cmp	r0, #8
 800547c:	4603      	mov	r3, r0
 800547e:	d848      	bhi.n	8005512 <prvTraceGetObjectHandle+0xa2>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005480:	f3ef 8610 	mrs	r6, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005484:	2201      	movs	r2, #1
 8005486:	f382 8810 	msr	PRIMASK, r2
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 800548a:	4944      	ldr	r1, [pc, #272]	; (800559c <prvTraceGetObjectHandle+0x12c>)
	trcCRITICAL_SECTION_BEGIN();
 800548c:	4c44      	ldr	r4, [pc, #272]	; (80055a0 <prvTraceGetObjectHandle+0x130>)
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 800548e:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
	trcCRITICAL_SECTION_BEGIN();
 8005492:	6827      	ldr	r7, [r4, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8005494:	eb01 0c02 	add.w	ip, r1, r2
	trcCRITICAL_SECTION_BEGIN();
 8005498:	3701      	adds	r7, #1
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 800549a:	f89c 0048 	ldrb.w	r0, [ip, #72]	; 0x48
	trcCRITICAL_SECTION_BEGIN();
 800549e:	6027      	str	r7, [r4, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 80054a0:	b938      	cbnz	r0, 80054b2 <prvTraceGetObjectHandle+0x42>
			objectHandleStacks.lowestIndexOfClass[objectclass]);
 80054a2:	eb01 0743 	add.w	r7, r1, r3, lsl #1
			(traceHandle)(1 + indexOfHandle -
 80054a6:	1c50      	adds	r0, r2, #1
 80054a8:	7cbf      	ldrb	r7, [r7, #18]
 80054aa:	1bc0      	subs	r0, r0, r7
 80054ac:	b2c0      	uxtb	r0, r0
		objectHandleStacks.objectHandles[indexOfHandle] =
 80054ae:	f88c 0048 	strb.w	r0, [ip, #72]	; 0x48
		> objectHandleStacks.highestIndexOfClass[objectclass])
 80054b2:	eb01 0743 	add.w	r7, r1, r3, lsl #1
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 80054b6:	8cbf      	ldrh	r7, [r7, #36]	; 0x24
 80054b8:	4297      	cmp	r7, r2
 80054ba:	d318      	bcc.n	80054ee <prvTraceGetObjectHandle+0x7e>
			objectHandleStacks.lowestIndexOfClass[objectclass];
 80054bc:	eb01 0543 	add.w	r5, r1, r3, lsl #1
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 80054c0:	f103 0718 	add.w	r7, r3, #24
 80054c4:	eb01 0747 	add.w	r7, r1, r7, lsl #1
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 80054c8:	3201      	adds	r2, #1
			objectHandleStacks.lowestIndexOfClass[objectclass];
 80054ca:	8a6d      	ldrh	r5, [r5, #18]
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 80054cc:	f8b7 c006 	ldrh.w	ip, [r7, #6]
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 80054d0:	b292      	uxth	r2, r2
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 80054d2:	1b55      	subs	r5, r2, r5
		if (hndCount >
 80054d4:	4565      	cmp	r5, ip
				(traceHandle)hndCount;
 80054d6:	bfc8      	it	gt
 80054d8:	b2ed      	uxtbgt	r5, r5
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 80054da:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
				(traceHandle)hndCount;
 80054de:	bfc8      	it	gt
 80054e0:	80fd      	strhgt	r5, [r7, #6]
	trcCRITICAL_SECTION_END();
 80054e2:	6823      	ldr	r3, [r4, #0]
 80054e4:	3b01      	subs	r3, #1
 80054e6:	6023      	str	r3, [r4, #0]
 80054e8:	f386 8810 	msr	PRIMASK, r6
}
 80054ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80054ee:	4618      	mov	r0, r3
 80054f0:	f7ff fb6a 	bl	8004bc8 <pszTraceGetErrorNotEnoughHandles>
	if (RecorderDataPtr != NULL)
 80054f4:	682b      	ldr	r3, [r5, #0]
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80054f6:	4607      	mov	r7, r0
	if (RecorderDataPtr != NULL)
 80054f8:	b12b      	cbz	r3, 8005506 <prvTraceGetObjectHandle+0x96>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80054fa:	4a2a      	ldr	r2, [pc, #168]	; (80055a4 <prvTraceGetObjectHandle+0x134>)
 80054fc:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 80054fe:	2100      	movs	r1, #0
 8005500:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005502:	b102      	cbz	r2, 8005506 <prvTraceGetObjectHandle+0x96>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005504:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8005506:	4b28      	ldr	r3, [pc, #160]	; (80055a8 <prvTraceGetObjectHandle+0x138>)
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	2a00      	cmp	r2, #0
 800550c:	d02c      	beq.n	8005568 <prvTraceGetObjectHandle+0xf8>
		handle = 0;
 800550e:	2000      	movs	r0, #0
 8005510:	e7e7      	b.n	80054e2 <prvTraceGetObjectHandle+0x72>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005512:	4b24      	ldr	r3, [pc, #144]	; (80055a4 <prvTraceGetObjectHandle+0x134>)
 8005514:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 8005516:	2100      	movs	r1, #0
 8005518:	6311      	str	r1, [r2, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800551a:	b103      	cbz	r3, 800551e <prvTraceGetObjectHandle+0xae>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 800551c:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 800551e:	4a22      	ldr	r2, [pc, #136]	; (80055a8 <prvTraceGetObjectHandle+0x138>)
 8005520:	6813      	ldr	r3, [r2, #0]
 8005522:	b143      	cbz	r3, 8005536 <prvTraceGetObjectHandle+0xc6>
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 8005524:	2000      	movs	r0, #0
}
 8005526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (traceErrorMessage == NULL)
 8005528:	4b1f      	ldr	r3, [pc, #124]	; (80055a8 <prvTraceGetObjectHandle+0x138>)
 800552a:	6818      	ldr	r0, [r3, #0]
 800552c:	2800      	cmp	r0, #0
 800552e:	d1f9      	bne.n	8005524 <prvTraceGetObjectHandle+0xb4>
		traceErrorMessage = (char*)(intptr_t) msg;
 8005530:	4a1e      	ldr	r2, [pc, #120]	; (80055ac <prvTraceGetObjectHandle+0x13c>)
 8005532:	601a      	str	r2, [r3, #0]
}
 8005534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (RecorderDataPtr != NULL)
 8005536:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005538:	4b1d      	ldr	r3, [pc, #116]	; (80055b0 <prvTraceGetObjectHandle+0x140>)
 800553a:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 800553c:	2900      	cmp	r1, #0
 800553e:	d0f1      	beq.n	8005524 <prvTraceGetObjectHandle+0xb4>
		dst[i] = src[i];
 8005540:	2254      	movs	r2, #84	; 0x54
 8005542:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005546:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800554a:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 800554e:	4298      	cmp	r0, r3
 8005550:	d005      	beq.n	800555e <prvTraceGetObjectHandle+0xee>
		dst[i] = src[i];
 8005552:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005556:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 800555a:	2a00      	cmp	r2, #0
 800555c:	d1f7      	bne.n	800554e <prvTraceGetObjectHandle+0xde>
			RecorderDataPtr->internalErrorOccured = 1;
 800555e:	682b      	ldr	r3, [r5, #0]
 8005560:	2201      	movs	r2, #1
 8005562:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005566:	e7dd      	b.n	8005524 <prvTraceGetObjectHandle+0xb4>
		if (RecorderDataPtr != NULL)
 8005568:	682a      	ldr	r2, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 800556a:	601f      	str	r7, [r3, #0]
		if (RecorderDataPtr != NULL)
 800556c:	2a00      	cmp	r2, #0
 800556e:	d0ce      	beq.n	800550e <prvTraceGetObjectHandle+0x9e>
 8005570:	f602 1213 	addw	r2, r2, #2323	; 0x913
 8005574:	1e7b      	subs	r3, r7, #1
 8005576:	f107 004f 	add.w	r0, r7, #79	; 0x4f
 800557a:	e001      	b.n	8005580 <prvTraceGetObjectHandle+0x110>
	for (i = 0; i < maxLength; i++)
 800557c:	4283      	cmp	r3, r0
 800557e:	d006      	beq.n	800558e <prvTraceGetObjectHandle+0x11e>
		dst[i] = src[i];
 8005580:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8005584:	f802 1f01 	strb.w	r1, [r2, #1]!
		if (src[i] == 0)
 8005588:	7819      	ldrb	r1, [r3, #0]
 800558a:	2900      	cmp	r1, #0
 800558c:	d1f6      	bne.n	800557c <prvTraceGetObjectHandle+0x10c>
			RecorderDataPtr->internalErrorOccured = 1;
 800558e:	682b      	ldr	r3, [r5, #0]
 8005590:	2201      	movs	r2, #1
 8005592:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005596:	e7ba      	b.n	800550e <prvTraceGetObjectHandle+0x9e>
 8005598:	20000b94 	.word	0x20000b94
 800559c:	20000bac 	.word	0x20000bac
 80055a0:	20000c40 	.word	0x20000c40
 80055a4:	20000c54 	.word	0x20000c54
 80055a8:	20000c48 	.word	0x20000c48
 80055ac:	0800d2b0 	.word	0x0800d2b0
 80055b0:	0800cb18 	.word	0x0800cb18

080055b4 <prvMarkObjectAsUsed>:
{
 80055b4:	b538      	push	{r3, r4, r5, lr}
 80055b6:	4d46      	ldr	r5, [pc, #280]	; (80056d0 <prvMarkObjectAsUsed+0x11c>)
	TRACE_ASSERT(objectclass < TRACE_NCLASSES, 
 80055b8:	2808      	cmp	r0, #8
 80055ba:	682b      	ldr	r3, [r5, #0]
 80055bc:	d831      	bhi.n	8005622 <prvMarkObjectAsUsed+0x6e>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80055be:	b199      	cbz	r1, 80055e8 <prvMarkObjectAsUsed+0x34>
 80055c0:	181a      	adds	r2, r3, r0
 80055c2:	f892 4064 	ldrb.w	r4, [r2, #100]	; 0x64
 80055c6:	428c      	cmp	r4, r1
 80055c8:	d319      	bcc.n	80055fe <prvMarkObjectAsUsed+0x4a>
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 80055ca:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 80055ce:	f892 407c 	ldrb.w	r4, [r2, #124]	; 0x7c
 80055d2:	f8b0 2088 	ldrh.w	r2, [r0, #136]	; 0x88
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 80055d6:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 80055d8:	fb04 2101 	mla	r1, r4, r1, r2
 80055dc:	b289      	uxth	r1, r1
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 80055de:	440b      	add	r3, r1
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 80055e6:	bd38      	pop	{r3, r4, r5, pc}
	if (RecorderDataPtr != NULL)
 80055e8:	b94b      	cbnz	r3, 80055fe <prvMarkObjectAsUsed+0x4a>
	if (traceErrorMessage == NULL)
 80055ea:	4a3a      	ldr	r2, [pc, #232]	; (80056d4 <prvMarkObjectAsUsed+0x120>)
 80055ec:	6811      	ldr	r1, [r2, #0]
 80055ee:	2900      	cmp	r1, #0
 80055f0:	d05c      	beq.n	80056ac <prvMarkObjectAsUsed+0xf8>
		if (RecorderDataPtr != NULL)
 80055f2:	4619      	mov	r1, r3
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 80055f4:	440b      	add	r3, r1
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 80055fc:	bd38      	pop	{r3, r4, r5, pc}
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80055fe:	4a36      	ldr	r2, [pc, #216]	; (80056d8 <prvMarkObjectAsUsed+0x124>)
 8005600:	6811      	ldr	r1, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8005602:	2400      	movs	r4, #0
 8005604:	631c      	str	r4, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005606:	2900      	cmp	r1, #0
 8005608:	d05b      	beq.n	80056c2 <prvMarkObjectAsUsed+0x10e>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 800560a:	4788      	blx	r1
	if (traceErrorMessage == NULL)
 800560c:	4a31      	ldr	r2, [pc, #196]	; (80056d4 <prvMarkObjectAsUsed+0x120>)
 800560e:	682b      	ldr	r3, [r5, #0]
 8005610:	6811      	ldr	r1, [r2, #0]
 8005612:	2900      	cmp	r1, #0
 8005614:	d02d      	beq.n	8005672 <prvMarkObjectAsUsed+0xbe>
			RecorderDataPtr->internalErrorOccured = 1;
 8005616:	2100      	movs	r1, #0
	RecorderDataPtr->ObjectPropertyTable.objbytes[idx] = 1;
 8005618:	440b      	add	r3, r1
 800561a:	2201      	movs	r2, #1
 800561c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
}
 8005620:	bd38      	pop	{r3, r4, r5, pc}
	if (RecorderDataPtr != NULL)
 8005622:	2b00      	cmp	r3, #0
 8005624:	d03a      	beq.n	800569c <prvMarkObjectAsUsed+0xe8>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005626:	4a2c      	ldr	r2, [pc, #176]	; (80056d8 <prvMarkObjectAsUsed+0x124>)
 8005628:	6811      	ldr	r1, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 800562a:	2400      	movs	r4, #0
 800562c:	631c      	str	r4, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800562e:	2900      	cmp	r1, #0
 8005630:	d040      	beq.n	80056b4 <prvMarkObjectAsUsed+0x100>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005632:	4788      	blx	r1
	if (traceErrorMessage == NULL)
 8005634:	4a27      	ldr	r2, [pc, #156]	; (80056d4 <prvMarkObjectAsUsed+0x120>)
 8005636:	682b      	ldr	r3, [r5, #0]
 8005638:	6811      	ldr	r1, [r2, #0]
 800563a:	2900      	cmp	r1, #0
 800563c:	d1eb      	bne.n	8005616 <prvMarkObjectAsUsed+0x62>
		traceErrorMessage = (char*)(intptr_t) msg;
 800563e:	4927      	ldr	r1, [pc, #156]	; (80056dc <prvMarkObjectAsUsed+0x128>)
 8005640:	6011      	str	r1, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0d5      	beq.n	80055f2 <prvMarkObjectAsUsed+0x3e>
 8005646:	4a25      	ldr	r2, [pc, #148]	; (80056dc <prvMarkObjectAsUsed+0x128>)
		dst[i] = src[i];
 8005648:	2154      	movs	r1, #84	; 0x54
 800564a:	f883 1914 	strb.w	r1, [r3, #2324]	; 0x914
 800564e:	f102 004f 	add.w	r0, r2, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005652:	f603 1314 	addw	r3, r3, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005656:	4290      	cmp	r0, r2
 8005658:	d005      	beq.n	8005666 <prvMarkObjectAsUsed+0xb2>
		dst[i] = src[i];
 800565a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 800565e:	f803 1f01 	strb.w	r1, [r3, #1]!
		if (src[i] == 0)
 8005662:	2900      	cmp	r1, #0
 8005664:	d1f7      	bne.n	8005656 <prvMarkObjectAsUsed+0xa2>
			RecorderDataPtr->internalErrorOccured = 1;
 8005666:	682b      	ldr	r3, [r5, #0]
 8005668:	2201      	movs	r2, #1
 800566a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 800566e:	2100      	movs	r1, #0
 8005670:	e7d2      	b.n	8005618 <prvMarkObjectAsUsed+0x64>
		traceErrorMessage = (char*)(intptr_t) msg;
 8005672:	491b      	ldr	r1, [pc, #108]	; (80056e0 <prvMarkObjectAsUsed+0x12c>)
 8005674:	6011      	str	r1, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005676:	2b00      	cmp	r3, #0
 8005678:	d0bb      	beq.n	80055f2 <prvMarkObjectAsUsed+0x3e>
 800567a:	4a19      	ldr	r2, [pc, #100]	; (80056e0 <prvMarkObjectAsUsed+0x12c>)
		dst[i] = src[i];
 800567c:	2154      	movs	r1, #84	; 0x54
 800567e:	f883 1914 	strb.w	r1, [r3, #2324]	; 0x914
 8005682:	f102 004f 	add.w	r0, r2, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005686:	f603 1314 	addw	r3, r3, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 800568a:	4282      	cmp	r2, r0
 800568c:	d0eb      	beq.n	8005666 <prvMarkObjectAsUsed+0xb2>
		dst[i] = src[i];
 800568e:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8005692:	f803 1f01 	strb.w	r1, [r3, #1]!
		if (src[i] == 0)
 8005696:	2900      	cmp	r1, #0
 8005698:	d1f7      	bne.n	800568a <prvMarkObjectAsUsed+0xd6>
 800569a:	e7e4      	b.n	8005666 <prvMarkObjectAsUsed+0xb2>
	if (traceErrorMessage == NULL)
 800569c:	4a0d      	ldr	r2, [pc, #52]	; (80056d4 <prvMarkObjectAsUsed+0x120>)
 800569e:	6811      	ldr	r1, [r2, #0]
 80056a0:	2900      	cmp	r1, #0
 80056a2:	d1a6      	bne.n	80055f2 <prvMarkObjectAsUsed+0x3e>
		traceErrorMessage = (char*)(intptr_t) msg;
 80056a4:	490d      	ldr	r1, [pc, #52]	; (80056dc <prvMarkObjectAsUsed+0x128>)
 80056a6:	6011      	str	r1, [r2, #0]
 80056a8:	4619      	mov	r1, r3
 80056aa:	e798      	b.n	80055de <prvMarkObjectAsUsed+0x2a>
 80056ac:	490c      	ldr	r1, [pc, #48]	; (80056e0 <prvMarkObjectAsUsed+0x12c>)
 80056ae:	6011      	str	r1, [r2, #0]
 80056b0:	4619      	mov	r1, r3
 80056b2:	e794      	b.n	80055de <prvMarkObjectAsUsed+0x2a>
	if (traceErrorMessage == NULL)
 80056b4:	4a07      	ldr	r2, [pc, #28]	; (80056d4 <prvMarkObjectAsUsed+0x120>)
 80056b6:	6810      	ldr	r0, [r2, #0]
 80056b8:	2800      	cmp	r0, #0
 80056ba:	d190      	bne.n	80055de <prvMarkObjectAsUsed+0x2a>
		traceErrorMessage = (char*)(intptr_t) msg;
 80056bc:	4907      	ldr	r1, [pc, #28]	; (80056dc <prvMarkObjectAsUsed+0x128>)
 80056be:	6011      	str	r1, [r2, #0]
 80056c0:	e7c1      	b.n	8005646 <prvMarkObjectAsUsed+0x92>
	if (traceErrorMessage == NULL)
 80056c2:	4a04      	ldr	r2, [pc, #16]	; (80056d4 <prvMarkObjectAsUsed+0x120>)
 80056c4:	6810      	ldr	r0, [r2, #0]
 80056c6:	2800      	cmp	r0, #0
 80056c8:	d189      	bne.n	80055de <prvMarkObjectAsUsed+0x2a>
		traceErrorMessage = (char*)(intptr_t) msg;
 80056ca:	4905      	ldr	r1, [pc, #20]	; (80056e0 <prvMarkObjectAsUsed+0x12c>)
 80056cc:	6011      	str	r1, [r2, #0]
 80056ce:	e7d4      	b.n	800567a <prvMarkObjectAsUsed+0xc6>
 80056d0:	20000b94 	.word	0x20000b94
 80056d4:	20000c48 	.word	0x20000c48
 80056d8:	20000c54 	.word	0x20000c54
 80056dc:	0800d140 	.word	0x0800d140
 80056e0:	0800d3d8 	.word	0x0800d3d8

080056e4 <prvTraceSetObjectName>:
{
 80056e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e6:	4c61      	ldr	r4, [pc, #388]	; (800586c <prvTraceSetObjectName+0x188>)
 80056e8:	6823      	ldr	r3, [r4, #0]
	TRACE_ASSERT(name != NULL, "prvTraceSetObjectName: name == NULL", TRC_UNUSED);
 80056ea:	2a00      	cmp	r2, #0
 80056ec:	f000 809b 	beq.w	8005826 <prvTraceSetObjectName+0x142>
	if (objectclass >= TRACE_NCLASSES)
 80056f0:	2808      	cmp	r0, #8
 80056f2:	4605      	mov	r5, r0
 80056f4:	d80b      	bhi.n	800570e <prvTraceSetObjectName+0x2a>
	if (handle == 0)
 80056f6:	2900      	cmp	r1, #0
 80056f8:	d02d      	beq.n	8005756 <prvTraceSetObjectName+0x72>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 80056fa:	181e      	adds	r6, r3, r0
 80056fc:	f896 7064 	ldrb.w	r7, [r6, #100]	; 0x64
 8005700:	428f      	cmp	r7, r1
 8005702:	d36d      	bcc.n	80057e0 <prvTraceSetObjectName+0xfc>
		if (traceErrorMessage == NULL)
 8005704:	485a      	ldr	r0, [pc, #360]	; (8005870 <prvTraceSetObjectName+0x18c>)
 8005706:	6800      	ldr	r0, [r0, #0]
 8005708:	2800      	cmp	r0, #0
 800570a:	d043      	beq.n	8005794 <prvTraceSetObjectName+0xb0>
}
 800570c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (RecorderDataPtr != NULL)
 800570e:	b12b      	cbz	r3, 800571c <prvTraceSetObjectName+0x38>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005710:	4a58      	ldr	r2, [pc, #352]	; (8005874 <prvTraceSetObjectName+0x190>)
 8005712:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8005714:	2100      	movs	r1, #0
 8005716:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005718:	b102      	cbz	r2, 800571c <prvTraceSetObjectName+0x38>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 800571a:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 800571c:	4a54      	ldr	r2, [pc, #336]	; (8005870 <prvTraceSetObjectName+0x18c>)
 800571e:	6813      	ldr	r3, [r2, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1f3      	bne.n	800570c <prvTraceSetObjectName+0x28>
		if (RecorderDataPtr != NULL)
 8005724:	6821      	ldr	r1, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005726:	4b54      	ldr	r3, [pc, #336]	; (8005878 <prvTraceSetObjectName+0x194>)
 8005728:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 800572a:	2900      	cmp	r1, #0
 800572c:	d0ee      	beq.n	800570c <prvTraceSetObjectName+0x28>
		dst[i] = src[i];
 800572e:	2249      	movs	r2, #73	; 0x49
 8005730:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005734:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005738:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 800573c:	4283      	cmp	r3, r0
 800573e:	d005      	beq.n	800574c <prvTraceSetObjectName+0x68>
		dst[i] = src[i];
 8005740:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005744:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005748:	2a00      	cmp	r2, #0
 800574a:	d1f7      	bne.n	800573c <prvTraceSetObjectName+0x58>
			RecorderDataPtr->internalErrorOccured = 1;
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	2201      	movs	r2, #1
 8005750:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
}
 8005754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (RecorderDataPtr != NULL)
 8005756:	b123      	cbz	r3, 8005762 <prvTraceSetObjectName+0x7e>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005758:	4a46      	ldr	r2, [pc, #280]	; (8005874 <prvTraceSetObjectName+0x190>)
		RecorderDataPtr->recorderActive = 0;
 800575a:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800575c:	6813      	ldr	r3, [r2, #0]
 800575e:	b103      	cbz	r3, 8005762 <prvTraceSetObjectName+0x7e>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005760:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8005762:	4a43      	ldr	r2, [pc, #268]	; (8005870 <prvTraceSetObjectName+0x18c>)
 8005764:	6813      	ldr	r3, [r2, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1d0      	bne.n	800570c <prvTraceSetObjectName+0x28>
		if (RecorderDataPtr != NULL)
 800576a:	6821      	ldr	r1, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 800576c:	4b43      	ldr	r3, [pc, #268]	; (800587c <prvTraceSetObjectName+0x198>)
 800576e:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005770:	2900      	cmp	r1, #0
 8005772:	d0cb      	beq.n	800570c <prvTraceSetObjectName+0x28>
		dst[i] = src[i];
 8005774:	2249      	movs	r2, #73	; 0x49
 8005776:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 800577a:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800577e:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005782:	4298      	cmp	r0, r3
 8005784:	d0e2      	beq.n	800574c <prvTraceSetObjectName+0x68>
		dst[i] = src[i];
 8005786:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800578a:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 800578e:	2a00      	cmp	r2, #0
 8005790:	d1f7      	bne.n	8005782 <prvTraceSetObjectName+0x9e>
 8005792:	e7db      	b.n	800574c <prvTraceSetObjectName+0x68>
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005794:	eb03 0545 	add.w	r5, r3, r5, lsl #1
 8005798:	f896 707c 	ldrb.w	r7, [r6, #124]	; 0x7c
 800579c:	f8b5 0088 	ldrh.w	r0, [r5, #136]	; 0x88
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80057a0:	f896 4070 	ldrb.w	r4, [r6, #112]	; 0x70
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 80057a4:	3901      	subs	r1, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 80057a6:	fb07 0101 	mla	r1, r7, r1, r0
 80057aa:	b289      	uxth	r1, r1
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 80057ac:	f101 009c 	add.w	r0, r1, #156	; 0x9c
 80057b0:	4418      	add	r0, r3
	for (i = 0; i < maxLength; i++)
 80057b2:	2c00      	cmp	r4, #0
 80057b4:	d0aa      	beq.n	800570c <prvTraceSetObjectName+0x28>
		dst[i] = src[i];
 80057b6:	440b      	add	r3, r1
 80057b8:	7811      	ldrb	r1, [r2, #0]
 80057ba:	f883 109c 	strb.w	r1, [r3, #156]	; 0x9c
		if (src[i] == 0)
 80057be:	7813      	ldrb	r3, [r2, #0]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d0a3      	beq.n	800570c <prvTraceSetObjectName+0x28>
 80057c4:	4603      	mov	r3, r0
 80057c6:	1910      	adds	r0, r2, r4
 80057c8:	3201      	adds	r2, #1
 80057ca:	e006      	b.n	80057da <prvTraceSetObjectName+0xf6>
		dst[i] = src[i];
 80057cc:	7811      	ldrb	r1, [r2, #0]
 80057ce:	f803 1f01 	strb.w	r1, [r3, #1]!
		if (src[i] == 0)
 80057d2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80057d6:	2900      	cmp	r1, #0
 80057d8:	d098      	beq.n	800570c <prvTraceSetObjectName+0x28>
	for (i = 0; i < maxLength; i++)
 80057da:	4282      	cmp	r2, r0
 80057dc:	d1f6      	bne.n	80057cc <prvTraceSetObjectName+0xe8>
}
 80057de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80057e0:	f7ff f9f2 	bl	8004bc8 <pszTraceGetErrorNotEnoughHandles>
	if (RecorderDataPtr != NULL)
 80057e4:	6823      	ldr	r3, [r4, #0]
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80057e6:	4605      	mov	r5, r0
	if (RecorderDataPtr != NULL)
 80057e8:	b12b      	cbz	r3, 80057f6 <prvTraceSetObjectName+0x112>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80057ea:	4a22      	ldr	r2, [pc, #136]	; (8005874 <prvTraceSetObjectName+0x190>)
 80057ec:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 80057ee:	2100      	movs	r1, #0
 80057f0:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80057f2:	b102      	cbz	r2, 80057f6 <prvTraceSetObjectName+0x112>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80057f4:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 80057f6:	4b1e      	ldr	r3, [pc, #120]	; (8005870 <prvTraceSetObjectName+0x18c>)
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	2a00      	cmp	r2, #0
 80057fc:	d186      	bne.n	800570c <prvTraceSetObjectName+0x28>
		if (RecorderDataPtr != NULL)
 80057fe:	6822      	ldr	r2, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005800:	601d      	str	r5, [r3, #0]
		if (RecorderDataPtr != NULL)
 8005802:	2a00      	cmp	r2, #0
 8005804:	d082      	beq.n	800570c <prvTraceSetObjectName+0x28>
 8005806:	f602 1213 	addw	r2, r2, #2323	; 0x913
 800580a:	1e6b      	subs	r3, r5, #1
 800580c:	f105 004f 	add.w	r0, r5, #79	; 0x4f
 8005810:	e001      	b.n	8005816 <prvTraceSetObjectName+0x132>
	for (i = 0; i < maxLength; i++)
 8005812:	4283      	cmp	r3, r0
 8005814:	d09a      	beq.n	800574c <prvTraceSetObjectName+0x68>
		dst[i] = src[i];
 8005816:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800581a:	f802 1f01 	strb.w	r1, [r2, #1]!
		if (src[i] == 0)
 800581e:	7819      	ldrb	r1, [r3, #0]
 8005820:	2900      	cmp	r1, #0
 8005822:	d1f6      	bne.n	8005812 <prvTraceSetObjectName+0x12e>
 8005824:	e792      	b.n	800574c <prvTraceSetObjectName+0x68>
	if (RecorderDataPtr != NULL)
 8005826:	b123      	cbz	r3, 8005832 <prvTraceSetObjectName+0x14e>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005828:	4912      	ldr	r1, [pc, #72]	; (8005874 <prvTraceSetObjectName+0x190>)
		RecorderDataPtr->recorderActive = 0;
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800582c:	680b      	ldr	r3, [r1, #0]
 800582e:	b103      	cbz	r3, 8005832 <prvTraceSetObjectName+0x14e>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005830:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8005832:	4a0f      	ldr	r2, [pc, #60]	; (8005870 <prvTraceSetObjectName+0x18c>)
 8005834:	6813      	ldr	r3, [r2, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	f47f af68 	bne.w	800570c <prvTraceSetObjectName+0x28>
		if (RecorderDataPtr != NULL)
 800583c:	6821      	ldr	r1, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 800583e:	4b10      	ldr	r3, [pc, #64]	; (8005880 <prvTraceSetObjectName+0x19c>)
 8005840:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005842:	2900      	cmp	r1, #0
 8005844:	f43f af62 	beq.w	800570c <prvTraceSetObjectName+0x28>
		dst[i] = src[i];
 8005848:	2254      	movs	r2, #84	; 0x54
 800584a:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 800584e:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005852:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005856:	4298      	cmp	r0, r3
 8005858:	f43f af78 	beq.w	800574c <prvTraceSetObjectName+0x68>
		dst[i] = src[i];
 800585c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005860:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005864:	2a00      	cmp	r2, #0
 8005866:	d1f6      	bne.n	8005856 <prvTraceSetObjectName+0x172>
 8005868:	e770      	b.n	800574c <prvTraceSetObjectName+0x68>
 800586a:	bf00      	nop
 800586c:	20000b94 	.word	0x20000b94
 8005870:	20000c48 	.word	0x20000c48
 8005874:	20000c54 	.word	0x20000c54
 8005878:	0800cc20 	.word	0x0800cc20
 800587c:	0800d368 	.word	0x0800d368
 8005880:	0800cbec 	.word	0x0800cbec

08005884 <prvTraceError>:
{
 8005884:	b538      	push	{r3, r4, r5, lr}
	if (RecorderDataPtr != NULL)
 8005886:	4d13      	ldr	r5, [pc, #76]	; (80058d4 <prvTraceError+0x50>)
 8005888:	682b      	ldr	r3, [r5, #0]
{
 800588a:	4604      	mov	r4, r0
	if (RecorderDataPtr != NULL)
 800588c:	b12b      	cbz	r3, 800589a <prvTraceError+0x16>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800588e:	4a12      	ldr	r2, [pc, #72]	; (80058d8 <prvTraceError+0x54>)
 8005890:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8005892:	2100      	movs	r1, #0
 8005894:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005896:	b102      	cbz	r2, 800589a <prvTraceError+0x16>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005898:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 800589a:	4b10      	ldr	r3, [pc, #64]	; (80058dc <prvTraceError+0x58>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	b102      	cbz	r2, 80058a2 <prvTraceError+0x1e>
}
 80058a0:	bd38      	pop	{r3, r4, r5, pc}
		if (RecorderDataPtr != NULL)
 80058a2:	682a      	ldr	r2, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 80058a4:	601c      	str	r4, [r3, #0]
		if (RecorderDataPtr != NULL)
 80058a6:	2a00      	cmp	r2, #0
 80058a8:	d0fa      	beq.n	80058a0 <prvTraceError+0x1c>
 80058aa:	f602 1213 	addw	r2, r2, #2323	; 0x913
 80058ae:	1e63      	subs	r3, r4, #1
 80058b0:	f104 004f 	add.w	r0, r4, #79	; 0x4f
 80058b4:	e001      	b.n	80058ba <prvTraceError+0x36>
	for (i = 0; i < maxLength; i++)
 80058b6:	4283      	cmp	r3, r0
 80058b8:	d006      	beq.n	80058c8 <prvTraceError+0x44>
		dst[i] = src[i];
 80058ba:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80058be:	f802 1f01 	strb.w	r1, [r2, #1]!
		if (src[i] == 0)
 80058c2:	7819      	ldrb	r1, [r3, #0]
 80058c4:	2900      	cmp	r1, #0
 80058c6:	d1f6      	bne.n	80058b6 <prvTraceError+0x32>
			RecorderDataPtr->internalErrorOccured = 1;
 80058c8:	682b      	ldr	r3, [r5, #0]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
}
 80058d0:	bd38      	pop	{r3, r4, r5, pc}
 80058d2:	bf00      	nop
 80058d4:	20000b94 	.word	0x20000b94
 80058d8:	20000c54 	.word	0x20000c54
 80058dc:	20000c48 	.word	0x20000c48

080058e0 <prvTraceStoreKernelCallWithNumericParamOnly>:
{
 80058e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 80058e4:	28fe      	cmp	r0, #254	; 0xfe
{
 80058e6:	b083      	sub	sp, #12
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithNumericParamOnly: Invalid value for evtcode", TRC_UNUSED);
 80058e8:	d842      	bhi.n	8005970 <prvTraceStoreKernelCallWithNumericParamOnly+0x90>
	if (recorder_busy)
 80058ea:	4c64      	ldr	r4, [pc, #400]	; (8005a7c <prvTraceStoreKernelCallWithNumericParamOnly+0x19c>)
 80058ec:	6823      	ldr	r3, [r4, #0]
 80058ee:	b9bb      	cbnz	r3, 8005920 <prvTraceStoreKernelCallWithNumericParamOnly+0x40>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80058f0:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058f4:	2701      	movs	r7, #1
 80058f6:	f387 8810 	msr	PRIMASK, r7
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80058fa:	4d61      	ldr	r5, [pc, #388]	; (8005a80 <prvTraceStoreKernelCallWithNumericParamOnly+0x1a0>)
	trcCRITICAL_SECTION_BEGIN();
 80058fc:	6823      	ldr	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 80058fe:	682a      	ldr	r2, [r5, #0]
 8005900:	6b12      	ldr	r2, [r2, #48]	; 0x30
	trcCRITICAL_SECTION_BEGIN();
 8005902:	443b      	add	r3, r7
 8005904:	6023      	str	r3, [r4, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005906:	b11a      	cbz	r2, 8005910 <prvTraceStoreKernelCallWithNumericParamOnly+0x30>
 8005908:	4b5e      	ldr	r3, [pc, #376]	; (8005a84 <prvTraceStoreKernelCallWithNumericParamOnly+0x1a4>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d151      	bne.n	80059b4 <prvTraceStoreKernelCallWithNumericParamOnly+0xd4>
	trcCRITICAL_SECTION_END();
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	3b01      	subs	r3, #1
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	f388 8810 	msr	PRIMASK, r8
}
 800591a:	b003      	add	sp, #12
 800591c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (RecorderDataPtr != NULL)
 8005920:	4d57      	ldr	r5, [pc, #348]	; (8005a80 <prvTraceStoreKernelCallWithNumericParamOnly+0x1a0>)
 8005922:	682b      	ldr	r3, [r5, #0]
 8005924:	b12b      	cbz	r3, 8005932 <prvTraceStoreKernelCallWithNumericParamOnly+0x52>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005926:	4a58      	ldr	r2, [pc, #352]	; (8005a88 <prvTraceStoreKernelCallWithNumericParamOnly+0x1a8>)
 8005928:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 800592a:	2100      	movs	r1, #0
 800592c:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800592e:	b102      	cbz	r2, 8005932 <prvTraceStoreKernelCallWithNumericParamOnly+0x52>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005930:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8005932:	4a56      	ldr	r2, [pc, #344]	; (8005a8c <prvTraceStoreKernelCallWithNumericParamOnly+0x1ac>)
 8005934:	6813      	ldr	r3, [r2, #0]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d1ef      	bne.n	800591a <prvTraceStoreKernelCallWithNumericParamOnly+0x3a>
		if (RecorderDataPtr != NULL)
 800593a:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 800593c:	4b54      	ldr	r3, [pc, #336]	; (8005a90 <prvTraceStoreKernelCallWithNumericParamOnly+0x1b0>)
 800593e:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005940:	2900      	cmp	r1, #0
 8005942:	d0ea      	beq.n	800591a <prvTraceStoreKernelCallWithNumericParamOnly+0x3a>
		dst[i] = src[i];
 8005944:	2252      	movs	r2, #82	; 0x52
 8005946:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 800594a:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800594e:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005952:	4298      	cmp	r0, r3
 8005954:	d005      	beq.n	8005962 <prvTraceStoreKernelCallWithNumericParamOnly+0x82>
		dst[i] = src[i];
 8005956:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800595a:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 800595e:	2a00      	cmp	r2, #0
 8005960:	d1f7      	bne.n	8005952 <prvTraceStoreKernelCallWithNumericParamOnly+0x72>
			RecorderDataPtr->internalErrorOccured = 1;
 8005962:	682b      	ldr	r3, [r5, #0]
 8005964:	2201      	movs	r2, #1
 8005966:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
}
 800596a:	b003      	add	sp, #12
 800596c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (RecorderDataPtr != NULL)
 8005970:	4d43      	ldr	r5, [pc, #268]	; (8005a80 <prvTraceStoreKernelCallWithNumericParamOnly+0x1a0>)
 8005972:	682b      	ldr	r3, [r5, #0]
 8005974:	b12b      	cbz	r3, 8005982 <prvTraceStoreKernelCallWithNumericParamOnly+0xa2>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005976:	4a44      	ldr	r2, [pc, #272]	; (8005a88 <prvTraceStoreKernelCallWithNumericParamOnly+0x1a8>)
 8005978:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 800597a:	2100      	movs	r1, #0
 800597c:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800597e:	b102      	cbz	r2, 8005982 <prvTraceStoreKernelCallWithNumericParamOnly+0xa2>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005980:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8005982:	4a42      	ldr	r2, [pc, #264]	; (8005a8c <prvTraceStoreKernelCallWithNumericParamOnly+0x1ac>)
 8005984:	6813      	ldr	r3, [r2, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d1c7      	bne.n	800591a <prvTraceStoreKernelCallWithNumericParamOnly+0x3a>
		if (RecorderDataPtr != NULL)
 800598a:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 800598c:	4b41      	ldr	r3, [pc, #260]	; (8005a94 <prvTraceStoreKernelCallWithNumericParamOnly+0x1b4>)
 800598e:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005990:	2900      	cmp	r1, #0
 8005992:	d0c2      	beq.n	800591a <prvTraceStoreKernelCallWithNumericParamOnly+0x3a>
		dst[i] = src[i];
 8005994:	2254      	movs	r2, #84	; 0x54
 8005996:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 800599a:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800599e:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 80059a2:	4298      	cmp	r0, r3
 80059a4:	d0dd      	beq.n	8005962 <prvTraceStoreKernelCallWithNumericParamOnly+0x82>
		dst[i] = src[i];
 80059a6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80059aa:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 80059ae:	2a00      	cmp	r2, #0
 80059b0:	d1f7      	bne.n	80059a2 <prvTraceStoreKernelCallWithNumericParamOnly+0xc2>
 80059b2:	e7d6      	b.n	8005962 <prvTraceStoreKernelCallWithNumericParamOnly+0x82>
 80059b4:	4606      	mov	r6, r0
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 80059b6:	20ff      	movs	r0, #255	; 0xff
 80059b8:	9101      	str	r1, [sp, #4]
 80059ba:	f7ff f95b 	bl	8004c74 <prvTraceGetDTS>
	if (param <= param_max)
 80059be:	9901      	ldr	r1, [sp, #4]
 80059c0:	682a      	ldr	r2, [r5, #0]
 80059c2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
		dts6 = (uint8_t)prvTraceGetDTS(0xFF);
 80059c6:	fa5f f980 	uxtb.w	r9, r0
 80059ca:	6b13      	ldr	r3, [r2, #48]	; 0x30
	if (param <= param_max)
 80059cc:	d212      	bcs.n	80059f4 <prvTraceStoreKernelCallWithNumericParamOnly+0x114>
		restParam = (uint16_t)prvTraceGetParam(0xFFFF, param);
 80059ce:	b289      	uxth	r1, r1
	if (! RecorderDataPtr->recorderActive)
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d09d      	beq.n	8005910 <prvTraceStoreKernelCallWithNumericParamOnly+0x30>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80059d4:	69d3      	ldr	r3, [r2, #28]
 80059d6:	f242 700f 	movw	r0, #9999	; 0x270f
 80059da:	4283      	cmp	r3, r0
 80059dc:	d820      	bhi.n	8005a20 <prvTraceStoreKernelCallWithNumericParamOnly+0x140>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	f603 1368 	addw	r3, r3, #2408	; 0x968
 80059e4:	18d0      	adds	r0, r2, r3
			kse->dts = dts6;
 80059e6:	f880 9001 	strb.w	r9, [r0, #1]
			kse->type = (uint8_t)evtcode;
 80059ea:	54d6      	strb	r6, [r2, r3]
			kse->param = restParam;
 80059ec:	8041      	strh	r1, [r0, #2]
			prvTraceUpdateCounters();
 80059ee:	f7ff f8f7 	bl	8004be0 <prvTraceUpdateCounters>
 80059f2:	e78d      	b.n	8005910 <prvTraceStoreKernelCallWithNumericParamOnly+0x30>
	if (! RecorderDataPtr->recorderActive)
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d08b      	beq.n	8005910 <prvTraceStoreKernelCallWithNumericParamOnly+0x30>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80059f8:	69d3      	ldr	r3, [r2, #28]
 80059fa:	f242 700f 	movw	r0, #9999	; 0x270f
 80059fe:	4283      	cmp	r3, r0
 8005a00:	d833      	bhi.n	8005a6a <prvTraceStoreKernelCallWithNumericParamOnly+0x18a>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8005a08:	18d0      	adds	r0, r2, r3
			xps->type = DIV_XPS;
 8005a0a:	52d7      	strh	r7, [r2, r3]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8005a0c:	0c0b      	lsrs	r3, r1, #16
 8005a0e:	8043      	strh	r3, [r0, #2]
 8005a10:	9101      	str	r1, [sp, #4]
			prvTraceUpdateCounters();
 8005a12:	f7ff f8e5 	bl	8004be0 <prvTraceUpdateCounters>
 8005a16:	682a      	ldr	r2, [r5, #0]
 8005a18:	9901      	ldr	r1, [sp, #4]
 8005a1a:	6b13      	ldr	r3, [r2, #48]	; 0x30
		return param & param_max;
 8005a1c:	b289      	uxth	r1, r1
 8005a1e:	e7d6      	b.n	80059ce <prvTraceStoreKernelCallWithNumericParamOnly+0xee>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005a20:	4b19      	ldr	r3, [pc, #100]	; (8005a88 <prvTraceStoreKernelCallWithNumericParamOnly+0x1a8>)
 8005a22:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 8005a24:	2100      	movs	r1, #0
 8005a26:	6311      	str	r1, [r2, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005a28:	b103      	cbz	r3, 8005a2c <prvTraceStoreKernelCallWithNumericParamOnly+0x14c>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005a2a:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8005a2c:	4a17      	ldr	r2, [pc, #92]	; (8005a8c <prvTraceStoreKernelCallWithNumericParamOnly+0x1ac>)
 8005a2e:	6813      	ldr	r3, [r2, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	f47f af6d 	bne.w	8005910 <prvTraceStoreKernelCallWithNumericParamOnly+0x30>
		if (RecorderDataPtr != NULL)
 8005a36:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005a38:	4b17      	ldr	r3, [pc, #92]	; (8005a98 <prvTraceStoreKernelCallWithNumericParamOnly+0x1b8>)
 8005a3a:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005a3c:	2900      	cmp	r1, #0
 8005a3e:	f43f af67 	beq.w	8005910 <prvTraceStoreKernelCallWithNumericParamOnly+0x30>
		dst[i] = src[i];
 8005a42:	2241      	movs	r2, #65	; 0x41
 8005a44:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005a48:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005a4c:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005a50:	4283      	cmp	r3, r0
 8005a52:	d005      	beq.n	8005a60 <prvTraceStoreKernelCallWithNumericParamOnly+0x180>
		dst[i] = src[i];
 8005a54:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005a58:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005a5c:	2a00      	cmp	r2, #0
 8005a5e:	d1f7      	bne.n	8005a50 <prvTraceStoreKernelCallWithNumericParamOnly+0x170>
			RecorderDataPtr->internalErrorOccured = 1;
 8005a60:	682b      	ldr	r3, [r5, #0]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005a68:	e752      	b.n	8005910 <prvTraceStoreKernelCallWithNumericParamOnly+0x30>
		prvTraceError("Attempt to index outside event buffer!");
 8005a6a:	480b      	ldr	r0, [pc, #44]	; (8005a98 <prvTraceStoreKernelCallWithNumericParamOnly+0x1b8>)
 8005a6c:	9101      	str	r1, [sp, #4]
 8005a6e:	f7ff ff09 	bl	8005884 <prvTraceError>
 8005a72:	682a      	ldr	r2, [r5, #0]
 8005a74:	9901      	ldr	r1, [sp, #4]
 8005a76:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8005a78:	e7d0      	b.n	8005a1c <prvTraceStoreKernelCallWithNumericParamOnly+0x13c>
 8005a7a:	bf00      	nop
 8005a7c:	20000c40 	.word	0x20000c40
 8005a80:	20000b94 	.word	0x20000b94
 8005a84:	20000b98 	.word	0x20000b98
 8005a88:	20000c54 	.word	0x20000c54
 8005a8c:	20000c48 	.word	0x20000c48
 8005a90:	0800cebc 	.word	0x0800cebc
 8005a94:	0800ce64 	.word	0x0800ce64
 8005a98:	0800cacc 	.word	0x0800cacc

08005a9c <prvTraceStoreKernelCall>:
{
 8005a9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a9e:	4c65      	ldr	r4, [pc, #404]	; (8005c34 <prvTraceStoreKernelCall+0x198>)
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 8005aa0:	28fe      	cmp	r0, #254	; 0xfe
{
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	6823      	ldr	r3, [r4, #0]
	TRACE_ASSERT(ecode < 0xFF, "prvTraceStoreKernelCall: ecode >= 0xFF", TRC_UNUSED);
 8005aa6:	d846      	bhi.n	8005b36 <prvTraceStoreKernelCall+0x9a>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCall: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8005aa8:	2908      	cmp	r1, #8
 8005aaa:	d81f      	bhi.n	8005aec <prvTraceStoreKernelCall+0x50>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCall: Invalid value for objectNumber", TRC_UNUSED);
 8005aac:	4419      	add	r1, r3
 8005aae:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
 8005ab2:	4291      	cmp	r1, r2
 8005ab4:	d35f      	bcc.n	8005b76 <prvTraceStoreKernelCall+0xda>
	if (recorder_busy)
 8005ab6:	4e60      	ldr	r6, [pc, #384]	; (8005c38 <prvTraceStoreKernelCall+0x19c>)
 8005ab8:	6831      	ldr	r1, [r6, #0]
 8005aba:	2900      	cmp	r1, #0
 8005abc:	d17a      	bne.n	8005bb4 <prvTraceStoreKernelCall+0x118>
	if (handle_of_last_logged_task == 0)
 8005abe:	4b5f      	ldr	r3, [pc, #380]	; (8005c3c <prvTraceStoreKernelCall+0x1a0>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	b18b      	cbz	r3, 8005ae8 <prvTraceStoreKernelCall+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005ac4:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ac8:	2301      	movs	r3, #1
 8005aca:	f383 8810 	msr	PRIMASK, r3
	if (RecorderDataPtr->recorderActive)
 8005ace:	6821      	ldr	r1, [r4, #0]
	trcCRITICAL_SECTION_BEGIN();
 8005ad0:	6833      	ldr	r3, [r6, #0]
	if (RecorderDataPtr->recorderActive)
 8005ad2:	6b09      	ldr	r1, [r1, #48]	; 0x30
	trcCRITICAL_SECTION_BEGIN();
 8005ad4:	3301      	adds	r3, #1
 8005ad6:	6033      	str	r3, [r6, #0]
	if (RecorderDataPtr->recorderActive)
 8005ad8:	2900      	cmp	r1, #0
 8005ada:	f040 808a 	bne.w	8005bf2 <prvTraceStoreKernelCall+0x156>
	trcCRITICAL_SECTION_END();
 8005ade:	6833      	ldr	r3, [r6, #0]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	6033      	str	r3, [r6, #0]
 8005ae4:	f387 8810 	msr	PRIMASK, r7
}
 8005ae8:	b003      	add	sp, #12
 8005aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (RecorderDataPtr != NULL)
 8005aec:	b12b      	cbz	r3, 8005afa <prvTraceStoreKernelCall+0x5e>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005aee:	4a54      	ldr	r2, [pc, #336]	; (8005c40 <prvTraceStoreKernelCall+0x1a4>)
 8005af0:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8005af2:	2100      	movs	r1, #0
 8005af4:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005af6:	b102      	cbz	r2, 8005afa <prvTraceStoreKernelCall+0x5e>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005af8:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8005afa:	4a52      	ldr	r2, [pc, #328]	; (8005c44 <prvTraceStoreKernelCall+0x1a8>)
 8005afc:	6813      	ldr	r3, [r2, #0]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f2      	bne.n	8005ae8 <prvTraceStoreKernelCall+0x4c>
		if (RecorderDataPtr != NULL)
 8005b02:	6821      	ldr	r1, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005b04:	4b50      	ldr	r3, [pc, #320]	; (8005c48 <prvTraceStoreKernelCall+0x1ac>)
 8005b06:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005b08:	2900      	cmp	r1, #0
 8005b0a:	d0ed      	beq.n	8005ae8 <prvTraceStoreKernelCall+0x4c>
		dst[i] = src[i];
 8005b0c:	2254      	movs	r2, #84	; 0x54
 8005b0e:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005b12:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005b16:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005b1a:	4283      	cmp	r3, r0
 8005b1c:	d005      	beq.n	8005b2a <prvTraceStoreKernelCall+0x8e>
		dst[i] = src[i];
 8005b1e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005b22:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005b26:	2a00      	cmp	r2, #0
 8005b28:	d1f7      	bne.n	8005b1a <prvTraceStoreKernelCall+0x7e>
			RecorderDataPtr->internalErrorOccured = 1;
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
}
 8005b32:	b003      	add	sp, #12
 8005b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (RecorderDataPtr != NULL)
 8005b36:	b12b      	cbz	r3, 8005b44 <prvTraceStoreKernelCall+0xa8>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005b38:	4a41      	ldr	r2, [pc, #260]	; (8005c40 <prvTraceStoreKernelCall+0x1a4>)
 8005b3a:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8005b3c:	2100      	movs	r1, #0
 8005b3e:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005b40:	b102      	cbz	r2, 8005b44 <prvTraceStoreKernelCall+0xa8>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005b42:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8005b44:	4a3f      	ldr	r2, [pc, #252]	; (8005c44 <prvTraceStoreKernelCall+0x1a8>)
 8005b46:	6813      	ldr	r3, [r2, #0]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1cd      	bne.n	8005ae8 <prvTraceStoreKernelCall+0x4c>
		if (RecorderDataPtr != NULL)
 8005b4c:	6821      	ldr	r1, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005b4e:	4b3f      	ldr	r3, [pc, #252]	; (8005c4c <prvTraceStoreKernelCall+0x1b0>)
 8005b50:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005b52:	2900      	cmp	r1, #0
 8005b54:	d0c8      	beq.n	8005ae8 <prvTraceStoreKernelCall+0x4c>
		dst[i] = src[i];
 8005b56:	2254      	movs	r2, #84	; 0x54
 8005b58:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005b5c:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005b60:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005b64:	4298      	cmp	r0, r3
 8005b66:	d0e0      	beq.n	8005b2a <prvTraceStoreKernelCall+0x8e>
		dst[i] = src[i];
 8005b68:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005b6c:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005b70:	2a00      	cmp	r2, #0
 8005b72:	d1f7      	bne.n	8005b64 <prvTraceStoreKernelCall+0xc8>
 8005b74:	e7d9      	b.n	8005b2a <prvTraceStoreKernelCall+0x8e>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005b76:	4a32      	ldr	r2, [pc, #200]	; (8005c40 <prvTraceStoreKernelCall+0x1a4>)
 8005b78:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8005b7a:	2100      	movs	r1, #0
 8005b7c:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005b7e:	b102      	cbz	r2, 8005b82 <prvTraceStoreKernelCall+0xe6>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005b80:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8005b82:	4a30      	ldr	r2, [pc, #192]	; (8005c44 <prvTraceStoreKernelCall+0x1a8>)
 8005b84:	6813      	ldr	r3, [r2, #0]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1ae      	bne.n	8005ae8 <prvTraceStoreKernelCall+0x4c>
		if (RecorderDataPtr != NULL)
 8005b8a:	6821      	ldr	r1, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005b8c:	4b30      	ldr	r3, [pc, #192]	; (8005c50 <prvTraceStoreKernelCall+0x1b4>)
 8005b8e:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005b90:	2900      	cmp	r1, #0
 8005b92:	d0a9      	beq.n	8005ae8 <prvTraceStoreKernelCall+0x4c>
		dst[i] = src[i];
 8005b94:	2254      	movs	r2, #84	; 0x54
 8005b96:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005b9a:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005b9e:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005ba2:	4298      	cmp	r0, r3
 8005ba4:	d0c1      	beq.n	8005b2a <prvTraceStoreKernelCall+0x8e>
		dst[i] = src[i];
 8005ba6:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005baa:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005bae:	2a00      	cmp	r2, #0
 8005bb0:	d1f7      	bne.n	8005ba2 <prvTraceStoreKernelCall+0x106>
 8005bb2:	e7ba      	b.n	8005b2a <prvTraceStoreKernelCall+0x8e>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005bb4:	4a22      	ldr	r2, [pc, #136]	; (8005c40 <prvTraceStoreKernelCall+0x1a4>)
 8005bb6:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8005bb8:	2100      	movs	r1, #0
 8005bba:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005bbc:	b102      	cbz	r2, 8005bc0 <prvTraceStoreKernelCall+0x124>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005bbe:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8005bc0:	4a20      	ldr	r2, [pc, #128]	; (8005c44 <prvTraceStoreKernelCall+0x1a8>)
 8005bc2:	6813      	ldr	r3, [r2, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d18f      	bne.n	8005ae8 <prvTraceStoreKernelCall+0x4c>
		if (RecorderDataPtr != NULL)
 8005bc8:	6821      	ldr	r1, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005bca:	4b22      	ldr	r3, [pc, #136]	; (8005c54 <prvTraceStoreKernelCall+0x1b8>)
 8005bcc:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005bce:	2900      	cmp	r1, #0
 8005bd0:	d08a      	beq.n	8005ae8 <prvTraceStoreKernelCall+0x4c>
		dst[i] = src[i];
 8005bd2:	2252      	movs	r2, #82	; 0x52
 8005bd4:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005bd8:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005bdc:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005be0:	4283      	cmp	r3, r0
 8005be2:	d0a2      	beq.n	8005b2a <prvTraceStoreKernelCall+0x8e>
		dst[i] = src[i];
 8005be4:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005be8:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005bec:	2a00      	cmp	r2, #0
 8005bee:	d1f7      	bne.n	8005be0 <prvTraceStoreKernelCall+0x144>
 8005bf0:	e79b      	b.n	8005b2a <prvTraceStoreKernelCall+0x8e>
 8005bf2:	4605      	mov	r5, r0
		dts1 = (uint16_t)prvTraceGetDTS(0xFFFF);
 8005bf4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8005bf8:	9201      	str	r2, [sp, #4]
 8005bfa:	f7ff f83b 	bl	8004c74 <prvTraceGetDTS>
	if (! RecorderDataPtr->recorderActive)
 8005bfe:	6821      	ldr	r1, [r4, #0]
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8005c00:	9a01      	ldr	r2, [sp, #4]
	if (! RecorderDataPtr->recorderActive)
 8005c02:	6b0b      	ldr	r3, [r1, #48]	; 0x30
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8005c04:	b2d2      	uxtb	r2, r2
	if (! RecorderDataPtr->recorderActive)
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	f43f af69 	beq.w	8005ade <prvTraceStoreKernelCall+0x42>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8005c0c:	69cb      	ldr	r3, [r1, #28]
 8005c0e:	f242 740f 	movw	r4, #9999	; 0x270f
 8005c12:	42a3      	cmp	r3, r4
 8005c14:	d809      	bhi.n	8005c2a <prvTraceStoreKernelCall+0x18e>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	f603 1368 	addw	r3, r3, #2408	; 0x968
 8005c1c:	18cc      	adds	r4, r1, r3
			kse->dts = dts1;
 8005c1e:	8060      	strh	r0, [r4, #2]
			kse->type = (uint8_t)ecode;
 8005c20:	54cd      	strb	r5, [r1, r3]
			kse->objHandle = hnd8;
 8005c22:	7062      	strb	r2, [r4, #1]
			prvTraceUpdateCounters();
 8005c24:	f7fe ffdc 	bl	8004be0 <prvTraceUpdateCounters>
 8005c28:	e759      	b.n	8005ade <prvTraceStoreKernelCall+0x42>
		prvTraceError("Attempt to index outside event buffer!");
 8005c2a:	480b      	ldr	r0, [pc, #44]	; (8005c58 <prvTraceStoreKernelCall+0x1bc>)
 8005c2c:	f7ff fe2a 	bl	8005884 <prvTraceError>
 8005c30:	e755      	b.n	8005ade <prvTraceStoreKernelCall+0x42>
 8005c32:	bf00      	nop
 8005c34:	20000b94 	.word	0x20000b94
 8005c38:	20000c40 	.word	0x20000c40
 8005c3c:	20000b98 	.word	0x20000b98
 8005c40:	20000c54 	.word	0x20000c54
 8005c44:	20000c48 	.word	0x20000c48
 8005c48:	0800cd9c 	.word	0x0800cd9c
 8005c4c:	0800cd64 	.word	0x0800cd64
 8005c50:	0800cde4 	.word	0x0800cde4
 8005c54:	0800ce2c 	.word	0x0800ce2c
 8005c58:	0800cacc 	.word	0x0800cacc

08005c5c <prvTraceStoreKernelCallWithParam>:
{
 8005c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005c60:	4605      	mov	r5, r0
 8005c62:	4c81      	ldr	r4, [pc, #516]	; (8005e68 <prvTraceStoreKernelCallWithParam+0x20c>)
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 8005c64:	2dfe      	cmp	r5, #254	; 0xfe
{
 8005c66:	b083      	sub	sp, #12
 8005c68:	6820      	ldr	r0, [r4, #0]
	TRACE_ASSERT(evtcode < 0xFF, "prvTraceStoreKernelCallWithParam: evtcode >= 0xFF", TRC_UNUSED);
 8005c6a:	d847      	bhi.n	8005cfc <prvTraceStoreKernelCallWithParam+0xa0>
	TRACE_ASSERT(objectClass < TRACE_NCLASSES, "prvTraceStoreKernelCallWithParam: objectClass >= TRACE_NCLASSES", TRC_UNUSED);
 8005c6c:	2908      	cmp	r1, #8
 8005c6e:	d81f      	bhi.n	8005cb0 <prvTraceStoreKernelCallWithParam+0x54>
	TRACE_ASSERT(objectNumber <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectClass], "prvTraceStoreKernelCallWithParam: Invalid value for objectNumber", TRC_UNUSED);
 8005c70:	4401      	add	r1, r0
 8005c72:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
 8005c76:	4291      	cmp	r1, r2
 8005c78:	f0c0 8086 	bcc.w	8005d88 <prvTraceStoreKernelCallWithParam+0x12c>
	if (recorder_busy)
 8005c7c:	4e7b      	ldr	r6, [pc, #492]	; (8005e6c <prvTraceStoreKernelCallWithParam+0x210>)
 8005c7e:	6831      	ldr	r1, [r6, #0]
 8005c80:	2900      	cmp	r1, #0
 8005c82:	f040 80a0 	bne.w	8005dc6 <prvTraceStoreKernelCallWithParam+0x16a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c86:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c8a:	f04f 0801 	mov.w	r8, #1
 8005c8e:	f388 8810 	msr	PRIMASK, r8
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005c92:	6820      	ldr	r0, [r4, #0]
	trcCRITICAL_SECTION_BEGIN();
 8005c94:	6831      	ldr	r1, [r6, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005c96:	6b00      	ldr	r0, [r0, #48]	; 0x30
	trcCRITICAL_SECTION_BEGIN();
 8005c98:	4441      	add	r1, r8
 8005c9a:	6031      	str	r1, [r6, #0]
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005c9c:	2800      	cmp	r0, #0
 8005c9e:	d14d      	bne.n	8005d3c <prvTraceStoreKernelCallWithParam+0xe0>
	trcCRITICAL_SECTION_END();
 8005ca0:	6833      	ldr	r3, [r6, #0]
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	6033      	str	r3, [r6, #0]
 8005ca6:	f387 8810 	msr	PRIMASK, r7
}
 8005caa:	b003      	add	sp, #12
 8005cac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (RecorderDataPtr != NULL)
 8005cb0:	b128      	cbz	r0, 8005cbe <prvTraceStoreKernelCallWithParam+0x62>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005cb2:	4b6f      	ldr	r3, [pc, #444]	; (8005e70 <prvTraceStoreKernelCallWithParam+0x214>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	6302      	str	r2, [r0, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005cba:	b103      	cbz	r3, 8005cbe <prvTraceStoreKernelCallWithParam+0x62>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005cbc:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8005cbe:	4a6d      	ldr	r2, [pc, #436]	; (8005e74 <prvTraceStoreKernelCallWithParam+0x218>)
 8005cc0:	6813      	ldr	r3, [r2, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d1f1      	bne.n	8005caa <prvTraceStoreKernelCallWithParam+0x4e>
		if (RecorderDataPtr != NULL)
 8005cc6:	6821      	ldr	r1, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005cc8:	4b6b      	ldr	r3, [pc, #428]	; (8005e78 <prvTraceStoreKernelCallWithParam+0x21c>)
 8005cca:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005ccc:	2900      	cmp	r1, #0
 8005cce:	d0ec      	beq.n	8005caa <prvTraceStoreKernelCallWithParam+0x4e>
		dst[i] = src[i];
 8005cd0:	2254      	movs	r2, #84	; 0x54
 8005cd2:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005cd6:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005cda:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005cde:	4283      	cmp	r3, r0
 8005ce0:	d005      	beq.n	8005cee <prvTraceStoreKernelCallWithParam+0x92>
		dst[i] = src[i];
 8005ce2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005ce6:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005cea:	2a00      	cmp	r2, #0
 8005cec:	d1f7      	bne.n	8005cde <prvTraceStoreKernelCallWithParam+0x82>
			RecorderDataPtr->internalErrorOccured = 1;
 8005cee:	6823      	ldr	r3, [r4, #0]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
}
 8005cf6:	b003      	add	sp, #12
 8005cf8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (RecorderDataPtr != NULL)
 8005cfc:	b128      	cbz	r0, 8005d0a <prvTraceStoreKernelCallWithParam+0xae>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005cfe:	4b5c      	ldr	r3, [pc, #368]	; (8005e70 <prvTraceStoreKernelCallWithParam+0x214>)
 8005d00:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 8005d02:	2200      	movs	r2, #0
 8005d04:	6302      	str	r2, [r0, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005d06:	b103      	cbz	r3, 8005d0a <prvTraceStoreKernelCallWithParam+0xae>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005d08:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8005d0a:	4a5a      	ldr	r2, [pc, #360]	; (8005e74 <prvTraceStoreKernelCallWithParam+0x218>)
 8005d0c:	6813      	ldr	r3, [r2, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1cb      	bne.n	8005caa <prvTraceStoreKernelCallWithParam+0x4e>
		if (RecorderDataPtr != NULL)
 8005d12:	6821      	ldr	r1, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005d14:	4b59      	ldr	r3, [pc, #356]	; (8005e7c <prvTraceStoreKernelCallWithParam+0x220>)
 8005d16:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005d18:	2900      	cmp	r1, #0
 8005d1a:	d0c6      	beq.n	8005caa <prvTraceStoreKernelCallWithParam+0x4e>
		dst[i] = src[i];
 8005d1c:	2254      	movs	r2, #84	; 0x54
 8005d1e:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005d22:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005d26:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005d2a:	4283      	cmp	r3, r0
 8005d2c:	d0df      	beq.n	8005cee <prvTraceStoreKernelCallWithParam+0x92>
		dst[i] = src[i];
 8005d2e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005d32:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005d36:	2a00      	cmp	r2, #0
 8005d38:	d1f7      	bne.n	8005d2a <prvTraceStoreKernelCallWithParam+0xce>
 8005d3a:	e7d8      	b.n	8005cee <prvTraceStoreKernelCallWithParam+0x92>
	if (RecorderDataPtr->recorderActive && handle_of_last_logged_task)
 8005d3c:	4950      	ldr	r1, [pc, #320]	; (8005e80 <prvTraceStoreKernelCallWithParam+0x224>)
 8005d3e:	7809      	ldrb	r1, [r1, #0]
 8005d40:	2900      	cmp	r1, #0
 8005d42:	d0ad      	beq.n	8005ca0 <prvTraceStoreKernelCallWithParam+0x44>
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8005d44:	20ff      	movs	r0, #255	; 0xff
 8005d46:	e9cd 2300 	strd	r2, r3, [sp]
 8005d4a:	f7fe ff93 	bl	8004c74 <prvTraceGetDTS>
	if (param <= param_max)
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	9a00      	ldr	r2, [sp, #0]
		dts2 = (uint8_t)prvTraceGetDTS(0xFF);
 8005d52:	fa5f f980 	uxtb.w	r9, r0
 8005d56:	6820      	ldr	r0, [r4, #0]
	if (param <= param_max)
 8005d58:	2bff      	cmp	r3, #255	; 0xff
 8005d5a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005d5c:	d855      	bhi.n	8005e0a <prvTraceStoreKernelCallWithParam+0x1ae>
		p8 = (uint8_t) prvTraceGetParam(0xFF, param);
 8005d5e:	b2db      	uxtb	r3, r3
		hnd8 = prvTraceGet8BitHandle((traceHandle)objectNumber);
 8005d60:	b2d2      	uxtb	r2, r2
	if (! RecorderDataPtr->recorderActive)
 8005d62:	2900      	cmp	r1, #0
 8005d64:	d09c      	beq.n	8005ca0 <prvTraceStoreKernelCallWithParam+0x44>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8005d66:	69c1      	ldr	r1, [r0, #28]
 8005d68:	f242 740f 	movw	r4, #9999	; 0x270f
 8005d6c:	42a1      	cmp	r1, r4
 8005d6e:	d86d      	bhi.n	8005e4c <prvTraceStoreKernelCallWithParam+0x1f0>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8005d70:	0089      	lsls	r1, r1, #2
 8005d72:	f601 1168 	addw	r1, r1, #2408	; 0x968
 8005d76:	1844      	adds	r4, r0, r1
			kse->dts = dts2;
 8005d78:	f884 9003 	strb.w	r9, [r4, #3]
			kse->type = (uint8_t)evtcode;
 8005d7c:	5445      	strb	r5, [r0, r1]
			kse->objHandle = hnd8;
 8005d7e:	7062      	strb	r2, [r4, #1]
			kse->param = p8;
 8005d80:	70a3      	strb	r3, [r4, #2]
			prvTraceUpdateCounters();
 8005d82:	f7fe ff2d 	bl	8004be0 <prvTraceUpdateCounters>
 8005d86:	e78b      	b.n	8005ca0 <prvTraceStoreKernelCallWithParam+0x44>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005d88:	4b39      	ldr	r3, [pc, #228]	; (8005e70 <prvTraceStoreKernelCallWithParam+0x214>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	6302      	str	r2, [r0, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005d90:	b103      	cbz	r3, 8005d94 <prvTraceStoreKernelCallWithParam+0x138>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005d92:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8005d94:	4a37      	ldr	r2, [pc, #220]	; (8005e74 <prvTraceStoreKernelCallWithParam+0x218>)
 8005d96:	6813      	ldr	r3, [r2, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d186      	bne.n	8005caa <prvTraceStoreKernelCallWithParam+0x4e>
		if (RecorderDataPtr != NULL)
 8005d9c:	6821      	ldr	r1, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005d9e:	4b39      	ldr	r3, [pc, #228]	; (8005e84 <prvTraceStoreKernelCallWithParam+0x228>)
 8005da0:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005da2:	2900      	cmp	r1, #0
 8005da4:	d081      	beq.n	8005caa <prvTraceStoreKernelCallWithParam+0x4e>
		dst[i] = src[i];
 8005da6:	2254      	movs	r2, #84	; 0x54
 8005da8:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005dac:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005db0:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005db4:	4298      	cmp	r0, r3
 8005db6:	d09a      	beq.n	8005cee <prvTraceStoreKernelCallWithParam+0x92>
		dst[i] = src[i];
 8005db8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005dbc:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005dc0:	2a00      	cmp	r2, #0
 8005dc2:	d1f7      	bne.n	8005db4 <prvTraceStoreKernelCallWithParam+0x158>
 8005dc4:	e793      	b.n	8005cee <prvTraceStoreKernelCallWithParam+0x92>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005dc6:	4b2a      	ldr	r3, [pc, #168]	; (8005e70 <prvTraceStoreKernelCallWithParam+0x214>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 8005dca:	2200      	movs	r2, #0
 8005dcc:	6302      	str	r2, [r0, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005dce:	b103      	cbz	r3, 8005dd2 <prvTraceStoreKernelCallWithParam+0x176>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005dd0:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8005dd2:	4a28      	ldr	r2, [pc, #160]	; (8005e74 <prvTraceStoreKernelCallWithParam+0x218>)
 8005dd4:	6813      	ldr	r3, [r2, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	f47f af67 	bne.w	8005caa <prvTraceStoreKernelCallWithParam+0x4e>
		if (RecorderDataPtr != NULL)
 8005ddc:	6821      	ldr	r1, [r4, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005dde:	4b2a      	ldr	r3, [pc, #168]	; (8005e88 <prvTraceStoreKernelCallWithParam+0x22c>)
 8005de0:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005de2:	2900      	cmp	r1, #0
 8005de4:	f43f af61 	beq.w	8005caa <prvTraceStoreKernelCallWithParam+0x4e>
		dst[i] = src[i];
 8005de8:	2252      	movs	r2, #82	; 0x52
 8005dea:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005dee:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005df2:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005df6:	4283      	cmp	r3, r0
 8005df8:	f43f af79 	beq.w	8005cee <prvTraceStoreKernelCallWithParam+0x92>
		dst[i] = src[i];
 8005dfc:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005e00:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005e04:	2a00      	cmp	r2, #0
 8005e06:	d1f6      	bne.n	8005df6 <prvTraceStoreKernelCallWithParam+0x19a>
 8005e08:	e771      	b.n	8005cee <prvTraceStoreKernelCallWithParam+0x92>
	if (! RecorderDataPtr->recorderActive)
 8005e0a:	2900      	cmp	r1, #0
 8005e0c:	f43f af48 	beq.w	8005ca0 <prvTraceStoreKernelCallWithParam+0x44>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8005e10:	69c1      	ldr	r1, [r0, #28]
 8005e12:	f242 7c0f 	movw	ip, #9999	; 0x270f
 8005e16:	4561      	cmp	r1, ip
 8005e18:	d81c      	bhi.n	8005e54 <prvTraceStoreKernelCallWithParam+0x1f8>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8005e1a:	0089      	lsls	r1, r1, #2
 8005e1c:	f601 1168 	addw	r1, r1, #2408	; 0x968
 8005e20:	eb00 0c01 	add.w	ip, r0, r1
			xps->type = DIV_XPS;
 8005e24:	f800 8001 	strb.w	r8, [r0, r1]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8005e28:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8005e2c:	0a08      	lsrs	r0, r1, #8
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8005e2e:	0c09      	lsrs	r1, r1, #16
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8005e30:	f88c 0001 	strb.w	r0, [ip, #1]
			xps->xps_16 = (uint16_t)((param & (0xFFFF0000 & ~param_max)) >> 16);
 8005e34:	f8ac 1002 	strh.w	r1, [ip, #2]
 8005e38:	9201      	str	r2, [sp, #4]
			xps->xps_8 = (uint8_t)((param & (0xFF00 & ~param_max)) >> 8);
 8005e3a:	9300      	str	r3, [sp, #0]
			prvTraceUpdateCounters();
 8005e3c:	f7fe fed0 	bl	8004be0 <prvTraceUpdateCounters>
 8005e40:	6820      	ldr	r0, [r4, #0]
 8005e42:	e9dd 3200 	ldrd	r3, r2, [sp]
 8005e46:	6b01      	ldr	r1, [r0, #48]	; 0x30
		return param & param_max;
 8005e48:	b2db      	uxtb	r3, r3
 8005e4a:	e788      	b.n	8005d5e <prvTraceStoreKernelCallWithParam+0x102>
		prvTraceError("Attempt to index outside event buffer!");
 8005e4c:	480f      	ldr	r0, [pc, #60]	; (8005e8c <prvTraceStoreKernelCallWithParam+0x230>)
 8005e4e:	f7ff fd19 	bl	8005884 <prvTraceError>
 8005e52:	e725      	b.n	8005ca0 <prvTraceStoreKernelCallWithParam+0x44>
 8005e54:	480d      	ldr	r0, [pc, #52]	; (8005e8c <prvTraceStoreKernelCallWithParam+0x230>)
 8005e56:	e9cd 2300 	strd	r2, r3, [sp]
 8005e5a:	f7ff fd13 	bl	8005884 <prvTraceError>
 8005e5e:	6820      	ldr	r0, [r4, #0]
 8005e60:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e64:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005e66:	e7ef      	b.n	8005e48 <prvTraceStoreKernelCallWithParam+0x1ec>
 8005e68:	20000b94 	.word	0x20000b94
 8005e6c:	20000c40 	.word	0x20000c40
 8005e70:	20000c54 	.word	0x20000c54
 8005e74:	20000c48 	.word	0x20000c48
 8005e78:	0800cf34 	.word	0x0800cf34
 8005e7c:	0800cef4 	.word	0x0800cef4
 8005e80:	20000b98 	.word	0x20000b98
 8005e84:	0800cf84 	.word	0x0800cf84
 8005e88:	0800cfd4 	.word	0x0800cfd4
 8005e8c:	0800cacc 	.word	0x0800cacc

08005e90 <prvTraceStoreTaskswitch>:
{
 8005e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 8005e94:	280f      	cmp	r0, #15
{
 8005e96:	b083      	sub	sp, #12
	TRACE_ASSERT(task_handle <= (TRC_CFG_NTASK),
 8005e98:	d81c      	bhi.n	8005ed4 <prvTraceStoreTaskswitch+0x44>
 8005e9a:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e9c:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	f383 8810 	msr	PRIMASK, r3
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8005ea6:	4ca4      	ldr	r4, [pc, #656]	; (8006138 <prvTraceStoreTaskswitch+0x2a8>)
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8005ea8:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8006170 <prvTraceStoreTaskswitch+0x2e0>
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8005eac:	6823      	ldr	r3, [r4, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8005eae:	f898 2000 	ldrb.w	r2, [r8]
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8005eb2:	3301      	adds	r3, #1
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8005eb4:	4282      	cmp	r2, r0
	trcCRITICAL_SECTION_BEGIN_ON_CORTEX_M_ONLY();
 8005eb6:	6023      	str	r3, [r4, #0]
	if ((task_handle != handle_of_last_logged_task) && (RecorderDataPtr->recorderActive))
 8005eb8:	d004      	beq.n	8005ec4 <prvTraceStoreTaskswitch+0x34>
 8005eba:	4fa0      	ldr	r7, [pc, #640]	; (800613c <prvTraceStoreTaskswitch+0x2ac>)
 8005ebc:	683e      	ldr	r6, [r7, #0]
 8005ebe:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d12d      	bne.n	8005f20 <prvTraceStoreTaskswitch+0x90>
	trcCRITICAL_SECTION_END_ON_CORTEX_M_ONLY();
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	6023      	str	r3, [r4, #0]
 8005eca:	f389 8810 	msr	PRIMASK, r9
}
 8005ece:	b003      	add	sp, #12
 8005ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (RecorderDataPtr != NULL)
 8005ed4:	4f99      	ldr	r7, [pc, #612]	; (800613c <prvTraceStoreTaskswitch+0x2ac>)
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	b12b      	cbz	r3, 8005ee6 <prvTraceStoreTaskswitch+0x56>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005eda:	4a99      	ldr	r2, [pc, #612]	; (8006140 <prvTraceStoreTaskswitch+0x2b0>)
 8005edc:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8005ede:	2100      	movs	r1, #0
 8005ee0:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8005ee2:	b102      	cbz	r2, 8005ee6 <prvTraceStoreTaskswitch+0x56>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8005ee4:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8005ee6:	4a97      	ldr	r2, [pc, #604]	; (8006144 <prvTraceStoreTaskswitch+0x2b4>)
 8005ee8:	6813      	ldr	r3, [r2, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d1ef      	bne.n	8005ece <prvTraceStoreTaskswitch+0x3e>
		if (RecorderDataPtr != NULL)
 8005eee:	6839      	ldr	r1, [r7, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8005ef0:	4b95      	ldr	r3, [pc, #596]	; (8006148 <prvTraceStoreTaskswitch+0x2b8>)
 8005ef2:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8005ef4:	2900      	cmp	r1, #0
 8005ef6:	d0ea      	beq.n	8005ece <prvTraceStoreTaskswitch+0x3e>
		dst[i] = src[i];
 8005ef8:	2254      	movs	r2, #84	; 0x54
 8005efa:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8005efe:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8005f02:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8005f06:	4298      	cmp	r0, r3
 8005f08:	d005      	beq.n	8005f16 <prvTraceStoreTaskswitch+0x86>
		dst[i] = src[i];
 8005f0a:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8005f0e:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8005f12:	2a00      	cmp	r2, #0
 8005f14:	d1f7      	bne.n	8005f06 <prvTraceStoreTaskswitch+0x76>
			RecorderDataPtr->internalErrorOccured = 1;
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8005f1e:	e7d6      	b.n	8005ece <prvTraceStoreTaskswitch+0x3e>
		isPendingContextSwitch = 0;
 8005f20:	4a8a      	ldr	r2, [pc, #552]	; (800614c <prvTraceStoreTaskswitch+0x2bc>)
	if (RecorderDataPtr->frequency == 0)
 8005f22:	6a73      	ldr	r3, [r6, #36]	; 0x24
		isPendingContextSwitch = 0;
 8005f24:	2100      	movs	r1, #0
 8005f26:	6011      	str	r1, [r2, #0]
	if (RecorderDataPtr->frequency == 0)
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d179      	bne.n	8006020 <prvTraceStoreTaskswitch+0x190>
		if (timestampFrequency != 0)
 8005f2c:	4b88      	ldr	r3, [pc, #544]	; (8006150 <prvTraceStoreTaskswitch+0x2c0>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 8096 	beq.w	8006062 <prvTraceStoreTaskswitch+0x1d2>
	if (trace_disable_timestamp == 1)
 8005f36:	4a87      	ldr	r2, [pc, #540]	; (8006154 <prvTraceStoreTaskswitch+0x2c4>)
 8005f38:	4987      	ldr	r1, [pc, #540]	; (8006158 <prvTraceStoreTaskswitch+0x2c8>)
 8005f3a:	6812      	ldr	r2, [r2, #0]
 8005f3c:	6808      	ldr	r0, [r1, #0]
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8005f3e:	089b      	lsrs	r3, r3, #2
	if (trace_disable_timestamp == 1)
 8005f40:	2a01      	cmp	r2, #1
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8005f42:	6273      	str	r3, [r6, #36]	; 0x24
	if (trace_disable_timestamp == 1)
 8005f44:	d016      	beq.n	8005f74 <prvTraceStoreTaskswitch+0xe4>
	hwtc_count = (TRC_HWTC_COUNT);
 8005f46:	4a85      	ldr	r2, [pc, #532]	; (800615c <prvTraceStoreTaskswitch+0x2cc>)
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8005f48:	f8df e228 	ldr.w	lr, [pc, #552]	; 8006174 <prvTraceStoreTaskswitch+0x2e4>
 8005f4c:	f8df b228 	ldr.w	fp, [pc, #552]	; 8006178 <prvTraceStoreTaskswitch+0x2e8>
	hwtc_count = (TRC_HWTC_COUNT);
 8005f50:	f8d2 c000 	ldr.w	ip, [r2]
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8005f54:	f8de 2000 	ldr.w	r2, [lr]
 8005f58:	f8db a000 	ldr.w	sl, [fp]
	last_hwtc_count = hwtc_count;
 8005f5c:	f8cb c000 	str.w	ip, [fp]
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8005f60:	4462      	add	r2, ip
 8005f62:	eba2 020a 	sub.w	r2, r2, sl
	last_timestamp += diff_scaled;
 8005f66:	eb00 0092 	add.w	r0, r0, r2, lsr #2
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8005f6a:	f002 0203 	and.w	r2, r2, #3
	last_timestamp += diff_scaled;
 8005f6e:	6008      	str	r0, [r1, #0]
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 8005f70:	f8ce 2000 	str.w	r2, [lr]
	dts = timestamp - old_timestamp;
 8005f74:	4a7a      	ldr	r2, [pc, #488]	; (8006160 <prvTraceStoreTaskswitch+0x2d0>)
 8005f76:	6811      	ldr	r1, [r2, #0]
	old_timestamp = timestamp;
 8005f78:	6010      	str	r0, [r2, #0]
	dts = timestamp - old_timestamp;
 8005f7a:	eba0 0a01 	sub.w	sl, r0, r1
	if (RecorderDataPtr->frequency > 0)
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d159      	bne.n	8006036 <prvTraceStoreTaskswitch+0x1a6>
		RecorderDataPtr->absTimeLastEvent = timestamp;
 8005f82:	62b0      	str	r0, [r6, #40]	; 0x28
	if (dts > param_maxDTS)
 8005f84:	f5ba 3f80 	cmp.w	sl, #65536	; 0x10000
 8005f88:	f080 8088 	bcs.w	800609c <prvTraceStoreTaskswitch+0x20c>
		handle_of_last_logged_task = task_handle;
 8005f8c:	f888 5000 	strb.w	r5, [r8]
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8005f90:	f8d6 b01c 	ldr.w	fp, [r6, #28]
 8005f94:	f242 730f 	movw	r3, #9999	; 0x270f
 8005f98:	459b      	cmp	fp, r3
 8005f9a:	f200 8163 	bhi.w	8006264 <prvTraceStoreTaskswitch+0x3d4>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005f9e:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
 8005fa2:	429d      	cmp	r5, r3
 8005fa4:	f200 80b6 	bhi.w	8006114 <prvTraceStoreTaskswitch+0x284>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8005fa8:	2d00      	cmp	r5, #0
 8005faa:	d064      	beq.n	8006076 <prvTraceStoreTaskswitch+0x1e6>
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005fac:	f8b6 208e 	ldrh.w	r2, [r6, #142]	; 0x8e
 8005fb0:	f896 007f 	ldrb.w	r0, [r6, #127]	; 0x7f
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8005fb4:	1e69      	subs	r1, r5, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005fb6:	fb00 2101 	mla	r1, r0, r1, r2
 8005fba:	b289      	uxth	r1, r1
 8005fbc:	46a8      	mov	r8, r5
 8005fbe:	4632      	mov	r2, r6
	return TRACE_PROPERTY_OBJECT_STATE(objectclass, id);
 8005fc0:	f892 0073 	ldrb.w	r0, [r2, #115]	; 0x73
 8005fc4:	4431      	add	r1, r6
 8005fc6:	4401      	add	r1, r0
			if (prvTraceGetObjectState(TRACE_CLASS_TASK,
 8005fc8:	f891 109c 	ldrb.w	r1, [r1, #156]	; 0x9c
				ts->type = TS_TASK_RESUME;
 8005fcc:	2901      	cmp	r1, #1
 8005fce:	bf14      	ite	ne
 8005fd0:	2006      	movne	r0, #6
 8005fd2:	2007      	moveq	r0, #7
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 8005fd4:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8005fd8:	f60b 1b68 	addw	fp, fp, #2408	; 0x968
 8005fdc:	eb06 010b 	add.w	r1, r6, fp
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005fe0:	4598      	cmp	r8, r3
 8005fe2:	f806 000b 	strb.w	r0, [r6, fp]
	return (uint16_t)dts & param_maxDTS;
 8005fe6:	f8a1 a002 	strh.w	sl, [r1, #2]
			ts->objHandle = hnd8;
 8005fea:	704d      	strb	r5, [r1, #1]
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 8005fec:	d86f      	bhi.n	80060ce <prvTraceStoreTaskswitch+0x23e>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 8005fee:	f1b8 0f00 	cmp.w	r8, #0
 8005ff2:	f000 80c3 	beq.w	800617c <prvTraceStoreTaskswitch+0x2ec>
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8005ff6:	f892 107f 	ldrb.w	r1, [r2, #127]	; 0x7f
 8005ffa:	f8b2 308e 	ldrh.w	r3, [r2, #142]	; 0x8e
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8005ffe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8006002:	fb01 3808 	mla	r8, r1, r8, r3
 8006006:	fa1f f888 	uxth.w	r8, r8
 800600a:	4613      	mov	r3, r2
	TRACE_PROPERTY_OBJECT_STATE(objectclass, id) = value;
 800600c:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8006010:	4442      	add	r2, r8
 8006012:	441a      	add	r2, r3
 8006014:	2301      	movs	r3, #1
 8006016:	f882 309c 	strb.w	r3, [r2, #156]	; 0x9c
			prvTraceUpdateCounters();
 800601a:	f7fe fde1 	bl	8004be0 <prvTraceUpdateCounters>
 800601e:	e751      	b.n	8005ec4 <prvTraceStoreTaskswitch+0x34>
	if (trace_disable_timestamp == 1)
 8006020:	4a4c      	ldr	r2, [pc, #304]	; (8006154 <prvTraceStoreTaskswitch+0x2c4>)
 8006022:	494d      	ldr	r1, [pc, #308]	; (8006158 <prvTraceStoreTaskswitch+0x2c8>)
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	6808      	ldr	r0, [r1, #0]
 8006028:	2a01      	cmp	r2, #1
 800602a:	d18c      	bne.n	8005f46 <prvTraceStoreTaskswitch+0xb6>
	dts = timestamp - old_timestamp;
 800602c:	4a4c      	ldr	r2, [pc, #304]	; (8006160 <prvTraceStoreTaskswitch+0x2d0>)
 800602e:	6811      	ldr	r1, [r2, #0]
	old_timestamp = timestamp;
 8006030:	6010      	str	r0, [r2, #0]
	dts = timestamp - old_timestamp;
 8006032:	eba0 0a01 	sub.w	sl, r0, r1
		if (dts > RecorderDataPtr->frequency)
 8006036:	4553      	cmp	r3, sl
 8006038:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800603a:	d309      	bcc.n	8006050 <prvTraceStoreTaskswitch+0x1c0>
			RecorderDataPtr->absTimeLastEvent += dts;
 800603c:	4451      	add	r1, sl
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 800603e:	428b      	cmp	r3, r1
 8006040:	62b1      	str	r1, [r6, #40]	; 0x28
 8006042:	d89f      	bhi.n	8005f84 <prvTraceStoreTaskswitch+0xf4>
			RecorderDataPtr->absTimeLastEventSecond++;
 8006044:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 8006046:	1acb      	subs	r3, r1, r3
			RecorderDataPtr->absTimeLastEventSecond++;
 8006048:	3201      	adds	r2, #1
 800604a:	e9c6 320a 	strd	r3, r2, [r6, #40]	; 0x28
 800604e:	e799      	b.n	8005f84 <prvTraceStoreTaskswitch+0xf4>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 8006050:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8006052:	fbba f0f3 	udiv	r0, sl, r3
 8006056:	4402      	add	r2, r0
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8006058:	fb03 a010 	mls	r0, r3, r0, sl
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 800605c:	62f2      	str	r2, [r6, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 800605e:	4401      	add	r1, r0
 8006060:	e7ed      	b.n	800603e <prvTraceStoreTaskswitch+0x1ae>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8006062:	493e      	ldr	r1, [pc, #248]	; (800615c <prvTraceStoreTaskswitch+0x2cc>)
 8006064:	4a3f      	ldr	r2, [pc, #252]	; (8006164 <prvTraceStoreTaskswitch+0x2d4>)
 8006066:	6809      	ldr	r1, [r1, #0]
 8006068:	6812      	ldr	r2, [r2, #0]
 800606a:	4291      	cmp	r1, r2
 800606c:	f000 80b2 	beq.w	80061d4 <prvTraceStoreTaskswitch+0x344>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8006070:	4b3d      	ldr	r3, [pc, #244]	; (8006168 <prvTraceStoreTaskswitch+0x2d8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	e75f      	b.n	8005f36 <prvTraceStoreTaskswitch+0xa6>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8006076:	4b32      	ldr	r3, [pc, #200]	; (8006140 <prvTraceStoreTaskswitch+0x2b0>)
		RecorderDataPtr->recorderActive = 0;
 8006078:	6335      	str	r5, [r6, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 812b 	beq.w	80062d8 <prvTraceStoreTaskswitch+0x448>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8006082:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8006084:	492f      	ldr	r1, [pc, #188]	; (8006144 <prvTraceStoreTaskswitch+0x2b4>)
 8006086:	683a      	ldr	r2, [r7, #0]
 8006088:	680b      	ldr	r3, [r1, #0]
 800608a:	2b00      	cmp	r3, #0
 800608c:	f000 80cc 	beq.w	8006228 <prvTraceStoreTaskswitch+0x398>
 8006090:	f898 8000 	ldrb.w	r8, [r8]
 8006094:	f892 3067 	ldrb.w	r3, [r2, #103]	; 0x67
			RecorderDataPtr->internalErrorOccured = 1;
 8006098:	2100      	movs	r1, #0
 800609a:	e791      	b.n	8005fc0 <prvTraceStoreTaskswitch+0x130>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 800609c:	69f3      	ldr	r3, [r6, #28]
 800609e:	f242 720f 	movw	r2, #9999	; 0x270f
 80060a2:	4293      	cmp	r3, r2
 80060a4:	f200 8109 	bhi.w	80062ba <prvTraceStoreTaskswitch+0x42a>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	f603 1368 	addw	r3, r3, #2408	; 0x968
 80060ae:	18f0      	adds	r0, r6, r3
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 80060b0:	ea4f 421a 	mov.w	r2, sl, lsr #16
				xts->type = XTS16;
 80060b4:	21a9      	movs	r1, #169	; 0xa9
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 80060b6:	8042      	strh	r2, [r0, #2]
				xts->type = XTS16;
 80060b8:	52f1      	strh	r1, [r6, r3]
			prvTraceUpdateCounters();
 80060ba:	f7fe fd91 	bl	8004be0 <prvTraceUpdateCounters>
 80060be:	683e      	ldr	r6, [r7, #0]
 80060c0:	6b33      	ldr	r3, [r6, #48]	; 0x30
		handle_of_last_logged_task = task_handle;
 80060c2:	f888 5000 	strb.w	r5, [r8]
	if (! RecorderDataPtr->recorderActive)
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	f47f af62 	bne.w	8005f90 <prvTraceStoreTaskswitch+0x100>
 80060cc:	e6fa      	b.n	8005ec4 <prvTraceStoreTaskswitch+0x34>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80060ce:	4b1c      	ldr	r3, [pc, #112]	; (8006140 <prvTraceStoreTaskswitch+0x2b0>)
 80060d0:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 80060d2:	2100      	movs	r1, #0
 80060d4:	6311      	str	r1, [r2, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80060d6:	b103      	cbz	r3, 80060da <prvTraceStoreTaskswitch+0x24a>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80060d8:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 80060da:	4a1a      	ldr	r2, [pc, #104]	; (8006144 <prvTraceStoreTaskswitch+0x2b4>)
 80060dc:	6813      	ldr	r3, [r2, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d19b      	bne.n	800601a <prvTraceStoreTaskswitch+0x18a>
		if (RecorderDataPtr != NULL)
 80060e2:	6839      	ldr	r1, [r7, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 80060e4:	4b21      	ldr	r3, [pc, #132]	; (800616c <prvTraceStoreTaskswitch+0x2dc>)
 80060e6:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 80060e8:	2900      	cmp	r1, #0
 80060ea:	d096      	beq.n	800601a <prvTraceStoreTaskswitch+0x18a>
		dst[i] = src[i];
 80060ec:	2254      	movs	r2, #84	; 0x54
 80060ee:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 80060f2:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80060f6:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 80060fa:	4298      	cmp	r0, r3
 80060fc:	d005      	beq.n	800610a <prvTraceStoreTaskswitch+0x27a>
		dst[i] = src[i];
 80060fe:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006102:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8006106:	2a00      	cmp	r2, #0
 8006108:	d1f7      	bne.n	80060fa <prvTraceStoreTaskswitch+0x26a>
			RecorderDataPtr->internalErrorOccured = 1;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	2201      	movs	r2, #1
 800610e:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8006112:	e782      	b.n	800601a <prvTraceStoreTaskswitch+0x18a>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8006114:	4b0a      	ldr	r3, [pc, #40]	; (8006140 <prvTraceStoreTaskswitch+0x2b0>)
 8006116:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 8006118:	2200      	movs	r2, #0
 800611a:	6332      	str	r2, [r6, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800611c:	b103      	cbz	r3, 8006120 <prvTraceStoreTaskswitch+0x290>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 800611e:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8006120:	4908      	ldr	r1, [pc, #32]	; (8006144 <prvTraceStoreTaskswitch+0x2b4>)
		if (RecorderDataPtr != NULL)
 8006122:	683a      	ldr	r2, [r7, #0]
	if (traceErrorMessage == NULL)
 8006124:	680b      	ldr	r3, [r1, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d061      	beq.n	80061ee <prvTraceStoreTaskswitch+0x35e>
 800612a:	f898 8000 	ldrb.w	r8, [r8]
 800612e:	f892 3067 	ldrb.w	r3, [r2, #103]	; 0x67
				ts->type = TS_TASK_BEGIN;
 8006132:	2006      	movs	r0, #6
 8006134:	e74e      	b.n	8005fd4 <prvTraceStoreTaskswitch+0x144>
 8006136:	bf00      	nop
 8006138:	20000c40 	.word	0x20000c40
 800613c:	20000b94 	.word	0x20000b94
 8006140:	20000c54 	.word	0x20000c54
 8006144:	20000c48 	.word	0x20000c48
 8006148:	0800d0bc 	.word	0x0800d0bc
 800614c:	20000b9c 	.word	0x20000b9c
 8006150:	20000c44 	.word	0x20000c44
 8006154:	20000c4c 	.word	0x20000c4c
 8006158:	20000ba8 	.word	0x20000ba8
 800615c:	e0001004 	.word	0xe0001004
 8006160:	20000c3c 	.word	0x20000c3c
 8006164:	2000b704 	.word	0x2000b704
 8006168:	20000090 	.word	0x20000090
 800616c:	0800cc94 	.word	0x0800cc94
 8006170:	20000b98 	.word	0x20000b98
 8006174:	20000ba4 	.word	0x20000ba4
 8006178:	20000ba0 	.word	0x20000ba0
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800617c:	4b5b      	ldr	r3, [pc, #364]	; (80062ec <prvTraceStoreTaskswitch+0x45c>)
		RecorderDataPtr->recorderActive = 0;
 800617e:	f8c2 8030 	str.w	r8, [r2, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 809e 	beq.w	80062c6 <prvTraceStoreTaskswitch+0x436>
 800618a:	9201      	str	r2, [sp, #4]
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 800618c:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 800618e:	4958      	ldr	r1, [pc, #352]	; (80062f0 <prvTraceStoreTaskswitch+0x460>)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	6808      	ldr	r0, [r1, #0]
 8006194:	9a01      	ldr	r2, [sp, #4]
 8006196:	2800      	cmp	r0, #0
 8006198:	f47f af38 	bne.w	800600c <prvTraceStoreTaskswitch+0x17c>
		traceErrorMessage = (char*)(intptr_t) msg;
 800619c:	4855      	ldr	r0, [pc, #340]	; (80062f4 <prvTraceStoreTaskswitch+0x464>)
 800619e:	6008      	str	r0, [r1, #0]
		if (RecorderDataPtr != NULL)
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f43f af33 	beq.w	800600c <prvTraceStoreTaskswitch+0x17c>
 80061a6:	4953      	ldr	r1, [pc, #332]	; (80062f4 <prvTraceStoreTaskswitch+0x464>)
		dst[i] = src[i];
 80061a8:	2054      	movs	r0, #84	; 0x54
 80061aa:	f883 0914 	strb.w	r0, [r3, #2324]	; 0x914
 80061ae:	f101 054f 	add.w	r5, r1, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80061b2:	f603 1314 	addw	r3, r3, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 80061b6:	428d      	cmp	r5, r1
 80061b8:	d005      	beq.n	80061c6 <prvTraceStoreTaskswitch+0x336>
		dst[i] = src[i];
 80061ba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80061be:	f803 0f01 	strb.w	r0, [r3, #1]!
		if (src[i] == 0)
 80061c2:	2800      	cmp	r0, #0
 80061c4:	d1f7      	bne.n	80061b6 <prvTraceStoreTaskswitch+0x326>
			RecorderDataPtr->internalErrorOccured = 1;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	2101      	movs	r1, #1
 80061ca:	f8c3 190c 	str.w	r1, [r3, #2316]	; 0x90c
 80061ce:	f04f 0800 	mov.w	r8, #0
 80061d2:	e71b      	b.n	800600c <prvTraceStoreTaskswitch+0x17c>
	if (trace_disable_timestamp == 1)
 80061d4:	4a48      	ldr	r2, [pc, #288]	; (80062f8 <prvTraceStoreTaskswitch+0x468>)
 80061d6:	4949      	ldr	r1, [pc, #292]	; (80062fc <prvTraceStoreTaskswitch+0x46c>)
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	6808      	ldr	r0, [r1, #0]
 80061dc:	2a01      	cmp	r2, #1
 80061de:	f47f aeb2 	bne.w	8005f46 <prvTraceStoreTaskswitch+0xb6>
	dts = timestamp - old_timestamp;
 80061e2:	4b47      	ldr	r3, [pc, #284]	; (8006300 <prvTraceStoreTaskswitch+0x470>)
 80061e4:	681a      	ldr	r2, [r3, #0]
	old_timestamp = timestamp;
 80061e6:	6018      	str	r0, [r3, #0]
	dts = timestamp - old_timestamp;
 80061e8:	eba0 0a02 	sub.w	sl, r0, r2
 80061ec:	e6c9      	b.n	8005f82 <prvTraceStoreTaskswitch+0xf2>
		traceErrorMessage = (char*)(intptr_t) msg;
 80061ee:	4b45      	ldr	r3, [pc, #276]	; (8006304 <prvTraceStoreTaskswitch+0x474>)
 80061f0:	600b      	str	r3, [r1, #0]
		if (RecorderDataPtr != NULL)
 80061f2:	2a00      	cmp	r2, #0
 80061f4:	d099      	beq.n	800612a <prvTraceStoreTaskswitch+0x29a>
		dst[i] = src[i];
 80061f6:	2154      	movs	r1, #84	; 0x54
 80061f8:	f882 1914 	strb.w	r1, [r2, #2324]	; 0x914
 80061fc:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8006200:	f602 1214 	addw	r2, r2, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8006204:	4298      	cmp	r0, r3
 8006206:	d005      	beq.n	8006214 <prvTraceStoreTaskswitch+0x384>
		dst[i] = src[i];
 8006208:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800620c:	f802 1f01 	strb.w	r1, [r2, #1]!
		if (src[i] == 0)
 8006210:	2900      	cmp	r1, #0
 8006212:	d1f7      	bne.n	8006204 <prvTraceStoreTaskswitch+0x374>
			RecorderDataPtr->internalErrorOccured = 1;
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	f898 8000 	ldrb.w	r8, [r8]
 800621a:	f892 3067 	ldrb.w	r3, [r2, #103]	; 0x67
 800621e:	2101      	movs	r1, #1
 8006220:	f8c2 190c 	str.w	r1, [r2, #2316]	; 0x90c
				ts->type = TS_TASK_BEGIN;
 8006224:	2006      	movs	r0, #6
 8006226:	e6d5      	b.n	8005fd4 <prvTraceStoreTaskswitch+0x144>
		traceErrorMessage = (char*)(intptr_t) msg;
 8006228:	4832      	ldr	r0, [pc, #200]	; (80062f4 <prvTraceStoreTaskswitch+0x464>)
 800622a:	6008      	str	r0, [r1, #0]
		if (RecorderDataPtr != NULL)
 800622c:	2a00      	cmp	r2, #0
 800622e:	d03e      	beq.n	80062ae <prvTraceStoreTaskswitch+0x41e>
 8006230:	4b30      	ldr	r3, [pc, #192]	; (80062f4 <prvTraceStoreTaskswitch+0x464>)
		dst[i] = src[i];
 8006232:	2154      	movs	r1, #84	; 0x54
 8006234:	f882 1914 	strb.w	r1, [r2, #2324]	; 0x914
 8006238:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 800623c:	f602 1214 	addw	r2, r2, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8006240:	4298      	cmp	r0, r3
 8006242:	d005      	beq.n	8006250 <prvTraceStoreTaskswitch+0x3c0>
		dst[i] = src[i];
 8006244:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006248:	f802 1f01 	strb.w	r1, [r2, #1]!
		if (src[i] == 0)
 800624c:	2900      	cmp	r1, #0
 800624e:	d1f7      	bne.n	8006240 <prvTraceStoreTaskswitch+0x3b0>
			RecorderDataPtr->internalErrorOccured = 1;
 8006250:	683a      	ldr	r2, [r7, #0]
 8006252:	f898 8000 	ldrb.w	r8, [r8]
 8006256:	f892 3067 	ldrb.w	r3, [r2, #103]	; 0x67
 800625a:	2101      	movs	r1, #1
 800625c:	f8c2 190c 	str.w	r1, [r2, #2316]	; 0x90c
 8006260:	2100      	movs	r1, #0
 8006262:	e6ad      	b.n	8005fc0 <prvTraceStoreTaskswitch+0x130>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8006264:	4b21      	ldr	r3, [pc, #132]	; (80062ec <prvTraceStoreTaskswitch+0x45c>)
 8006266:	681b      	ldr	r3, [r3, #0]
		RecorderDataPtr->recorderActive = 0;
 8006268:	2200      	movs	r2, #0
 800626a:	6332      	str	r2, [r6, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800626c:	b103      	cbz	r3, 8006270 <prvTraceStoreTaskswitch+0x3e0>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 800626e:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 8006270:	4a1f      	ldr	r2, [pc, #124]	; (80062f0 <prvTraceStoreTaskswitch+0x460>)
 8006272:	6813      	ldr	r3, [r2, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f47f ae25 	bne.w	8005ec4 <prvTraceStoreTaskswitch+0x34>
		if (RecorderDataPtr != NULL)
 800627a:	6839      	ldr	r1, [r7, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 800627c:	4b22      	ldr	r3, [pc, #136]	; (8006308 <prvTraceStoreTaskswitch+0x478>)
 800627e:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8006280:	2900      	cmp	r1, #0
 8006282:	f43f ae1f 	beq.w	8005ec4 <prvTraceStoreTaskswitch+0x34>
		dst[i] = src[i];
 8006286:	2241      	movs	r2, #65	; 0x41
 8006288:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 800628c:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8006290:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8006294:	4298      	cmp	r0, r3
 8006296:	d005      	beq.n	80062a4 <prvTraceStoreTaskswitch+0x414>
		dst[i] = src[i];
 8006298:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 800629c:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 80062a0:	2a00      	cmp	r2, #0
 80062a2:	d1f7      	bne.n	8006294 <prvTraceStoreTaskswitch+0x404>
			RecorderDataPtr->internalErrorOccured = 1;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	2201      	movs	r2, #1
 80062a8:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80062ac:	e60a      	b.n	8005ec4 <prvTraceStoreTaskswitch+0x34>
 80062ae:	f898 8000 	ldrb.w	r8, [r8]
 80062b2:	f895 3067 	ldrb.w	r3, [r5, #103]	; 0x67
		if (RecorderDataPtr != NULL)
 80062b6:	4629      	mov	r1, r5
 80062b8:	e682      	b.n	8005fc0 <prvTraceStoreTaskswitch+0x130>
		prvTraceError("Attempt to index outside event buffer!");
 80062ba:	4813      	ldr	r0, [pc, #76]	; (8006308 <prvTraceStoreTaskswitch+0x478>)
 80062bc:	f7ff fae2 	bl	8005884 <prvTraceError>
 80062c0:	683e      	ldr	r6, [r7, #0]
 80062c2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80062c4:	e6fd      	b.n	80060c2 <prvTraceStoreTaskswitch+0x232>
	if (traceErrorMessage == NULL)
 80062c6:	4b0a      	ldr	r3, [pc, #40]	; (80062f0 <prvTraceStoreTaskswitch+0x460>)
 80062c8:	6819      	ldr	r1, [r3, #0]
 80062ca:	2900      	cmp	r1, #0
 80062cc:	f47f ae9d 	bne.w	800600a <prvTraceStoreTaskswitch+0x17a>
		traceErrorMessage = (char*)(intptr_t) msg;
 80062d0:	4808      	ldr	r0, [pc, #32]	; (80062f4 <prvTraceStoreTaskswitch+0x464>)
 80062d2:	6018      	str	r0, [r3, #0]
 80062d4:	4613      	mov	r3, r2
 80062d6:	e766      	b.n	80061a6 <prvTraceStoreTaskswitch+0x316>
	if (traceErrorMessage == NULL)
 80062d8:	4a05      	ldr	r2, [pc, #20]	; (80062f0 <prvTraceStoreTaskswitch+0x460>)
 80062da:	6813      	ldr	r3, [r2, #0]
 80062dc:	b10b      	cbz	r3, 80062e2 <prvTraceStoreTaskswitch+0x452>
 80062de:	4632      	mov	r2, r6
 80062e0:	e6d6      	b.n	8006090 <prvTraceStoreTaskswitch+0x200>
		traceErrorMessage = (char*)(intptr_t) msg;
 80062e2:	4804      	ldr	r0, [pc, #16]	; (80062f4 <prvTraceStoreTaskswitch+0x464>)
 80062e4:	6010      	str	r0, [r2, #0]
 80062e6:	4632      	mov	r2, r6
 80062e8:	e7a2      	b.n	8006230 <prvTraceStoreTaskswitch+0x3a0>
 80062ea:	bf00      	nop
 80062ec:	20000c54 	.word	0x20000c54
 80062f0:	20000c48 	.word	0x20000c48
 80062f4:	0800d3d8 	.word	0x0800d3d8
 80062f8:	20000c4c 	.word	0x20000c4c
 80062fc:	20000ba8 	.word	0x20000ba8
 8006300:	20000c3c 	.word	0x20000c3c
 8006304:	0800d104 	.word	0x0800d104
 8006308:	0800cacc 	.word	0x0800cacc

0800630c <vTraceEnable>:
{
 800630c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (RecorderDataPtr == NULL)
 8006310:	4d9f      	ldr	r5, [pc, #636]	; (8006590 <vTraceEnable+0x284>)
 8006312:	682b      	ldr	r3, [r5, #0]
{
 8006314:	4604      	mov	r4, r0
	if (RecorderDataPtr == NULL)
 8006316:	2b00      	cmp	r3, #0
 8006318:	f000 80aa 	beq.w	8006470 <vTraceEnable+0x164>
		if (RecorderDataPtr->startmarker0 == 1)
 800631c:	781a      	ldrb	r2, [r3, #0]
 800631e:	2a01      	cmp	r2, #1
 8006320:	f000 809f 	beq.w	8006462 <vTraceEnable+0x156>
	init_hwtc_count = TRC_HWTC_COUNT;
 8006324:	499b      	ldr	r1, [pc, #620]	; (8006594 <vTraceEnable+0x288>)
 8006326:	4a9c      	ldr	r2, [pc, #624]	; (8006598 <vTraceEnable+0x28c>)
 8006328:	6809      	ldr	r1, [r1, #0]
 800632a:	6011      	str	r1, [r2, #0]
	(void)memset(RecorderDataPtr, 0, sizeof(RecorderDataType));
 800632c:	f24a 56b8 	movw	r6, #42424	; 0xa5b8
 8006330:	4632      	mov	r2, r6
 8006332:	4618      	mov	r0, r3
 8006334:	2100      	movs	r1, #0
 8006336:	f001 fe06 	bl	8007f46 <memset>
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 800633a:	682b      	ldr	r3, [r5, #0]
 800633c:	4f97      	ldr	r7, [pc, #604]	; (800659c <vTraceEnable+0x290>)
	RecorderDataPtr->irq_priority_order = TRC_IRQ_PRIORITY_ORDER;
 800633e:	611e      	str	r6, [r3, #16]
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 8006340:	2200      	movs	r2, #0
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 8006342:	f242 7010 	movw	r0, #10000	; 0x2710
	RecorderDataPtr->debugMarker0 = (int32_t) 0xF0F0F0F0;
 8006346:	f04f 31f0 	mov.w	r1, #4042322160	; 0xf0f0f0f0
	RecorderDataPtr->isUsing16bitHandles = TRC_CFG_USE_16BIT_OBJECT_HANDLES;
 800634a:	e9c3 1215 	strd	r1, r2, [r3, #84]	; 0x54
	RecorderDataPtr->maxEvents = (TRC_CFG_EVENT_BUFFER_SIZE);
 800634e:	6198      	str	r0, [r3, #24]
	RecorderDataPtr->isrTailchainingThreshold = TRC_CFG_ISR_TAILCHAINING_THRESHOLD;
 8006350:	635a      	str	r2, [r3, #52]	; 0x34
	RecorderDataPtr->version = TRACE_KERNEL_VERSION;
 8006352:	60df      	str	r7, [r3, #12]
	vTraceInitObjectPropertyTable();
 8006354:	f7fe fbc4 	bl	8004ae0 <vTraceInitObjectPropertyTable>
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8006358:	6829      	ldr	r1, [r5, #0]
 800635a:	4b91      	ldr	r3, [pc, #580]	; (80065a0 <vTraceEnable+0x294>)
 800635c:	f04f 30f1 	mov.w	r0, #4059165169	; 0xf1f1f1f1
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8006360:	f44f 7248 	mov.w	r2, #800	; 0x320
	RecorderDataPtr->debugMarker1 = (int32_t)0xF1F1F1F1;
 8006364:	f8c1 055c 	str.w	r0, [r1, #1372]	; 0x55c
	RecorderDataPtr->SymbolTable.symTableSize = (TRC_CFG_SYMBOL_TABLE_SIZE);
 8006368:	f8c1 2560 	str.w	r2, [r1, #1376]	; 0x560
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 800636c:	f04f 30f2 	mov.w	r0, #4076008178	; 0xf2f2f2f2
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8006370:	2601      	movs	r6, #1
		dst[i] = src[i];
 8006372:	2254      	movs	r2, #84	; 0x54
	RecorderDataPtr->debugMarker2 = (int32_t)0xF2F2F2F2;
 8006374:	f8c1 0910 	str.w	r0, [r1, #2320]	; 0x910
	RecorderDataPtr->SymbolTable.nextFreeSymbolIndex = 1;
 8006378:	f8c1 6564 	str.w	r6, [r1, #1380]	; 0x564
		dst[i] = src[i];
 800637c:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8006380:	f103 004f 	add.w	r0, r3, #79	; 0x4f
	prvStrncpy(RecorderDataPtr->systemInfo, "Trace Recorder Demo", 80);
 8006384:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8006388:	4283      	cmp	r3, r0
 800638a:	d005      	beq.n	8006398 <vTraceEnable+0x8c>
		dst[i] = src[i];
 800638c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006390:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8006394:	2a00      	cmp	r2, #0
 8006396:	d1f7      	bne.n	8006388 <vTraceEnable+0x7c>
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 8006398:	682b      	ldr	r3, [r5, #0]
	RecorderDataPtr->endmarker0 = 0x0A;
 800639a:	4882      	ldr	r0, [pc, #520]	; (80065a4 <vTraceEnable+0x298>)
 800639c:	4982      	ldr	r1, [pc, #520]	; (80065a8 <vTraceEnable+0x29c>)
 800639e:	4e83      	ldr	r6, [pc, #524]	; (80065ac <vTraceEnable+0x2a0>)
	RecorderDataPtr->debugMarker3 = (int32_t)0xF3F3F3F3;
 80063a0:	f04f 32f3 	mov.w	r2, #4092851187	; 0xf3f3f3f3
 80063a4:	f8c3 2964 	str.w	r2, [r3, #2404]	; 0x964
	RecorderDataPtr->endmarker0 = 0x0A;
 80063a8:	f24a 52ac 	movw	r2, #42412	; 0xa5ac
 80063ac:	5098      	str	r0, [r3, r2]
 80063ae:	f24a 50b0 	movw	r0, #42416	; 0xa5b0
 80063b2:	f24a 52b4 	movw	r2, #42420	; 0xa5b4
 80063b6:	501e      	str	r6, [r3, r0]
 80063b8:	5099      	str	r1, [r3, r2]
	vTraceInitObjectHandleStack();
 80063ba:	f7fe fbcf 	bl	8004b5c <vTraceInitObjectHandleStack>
	RecorderDataPtr->startmarker11 = 0xF4;
 80063be:	682a      	ldr	r2, [r5, #0]
	if (traceErrorMessage != NULL)
 80063c0:	4e7b      	ldr	r6, [pc, #492]	; (80065b0 <vTraceEnable+0x2a4>)
	RecorderDataPtr->startmarker11 = 0xF4;
 80063c2:	21f4      	movs	r1, #244	; 0xf4
	RecorderDataPtr->startmarker10 = 0xF3;
 80063c4:	23f3      	movs	r3, #243	; 0xf3
	RecorderDataPtr->startmarker11 = 0xF4;
 80063c6:	72d1      	strb	r1, [r2, #11]
	RecorderDataPtr->startmarker10 = 0xF3;
 80063c8:	7293      	strb	r3, [r2, #10]
	RecorderDataPtr->startmarker9 = 0xF2;
 80063ca:	21f2      	movs	r1, #242	; 0xf2
	RecorderDataPtr->startmarker8 = 0xF1;
 80063cc:	23f1      	movs	r3, #241	; 0xf1
	RecorderDataPtr->startmarker9 = 0xF2;
 80063ce:	7251      	strb	r1, [r2, #9]
	RecorderDataPtr->startmarker8 = 0xF1;
 80063d0:	7213      	strb	r3, [r2, #8]
	RecorderDataPtr->startmarker7 = 0x74;
 80063d2:	2174      	movs	r1, #116	; 0x74
	RecorderDataPtr->startmarker6 = 0x73;
 80063d4:	2373      	movs	r3, #115	; 0x73
	RecorderDataPtr->startmarker7 = 0x74;
 80063d6:	71d1      	strb	r1, [r2, #7]
	RecorderDataPtr->startmarker6 = 0x73;
 80063d8:	7193      	strb	r3, [r2, #6]
	RecorderDataPtr->startmarker5 = 0x72;
 80063da:	2172      	movs	r1, #114	; 0x72
	RecorderDataPtr->startmarker4 = 0x71;
 80063dc:	2371      	movs	r3, #113	; 0x71
	RecorderDataPtr->startmarker5 = 0x72;
 80063de:	7151      	strb	r1, [r2, #5]
	RecorderDataPtr->startmarker4 = 0x71;
 80063e0:	7113      	strb	r3, [r2, #4]
	RecorderDataPtr->startmarker3 = 0x04;
 80063e2:	2104      	movs	r1, #4
	RecorderDataPtr->startmarker2 = 0x03;
 80063e4:	2303      	movs	r3, #3
	RecorderDataPtr->startmarker3 = 0x04;
 80063e6:	70d1      	strb	r1, [r2, #3]
	RecorderDataPtr->startmarker2 = 0x03;
 80063e8:	7093      	strb	r3, [r2, #2]
	RecorderDataPtr->startmarker1 = 0x02;	
 80063ea:	2102      	movs	r1, #2
	RecorderDataPtr->startmarker0 = 0x01; 
 80063ec:	2301      	movs	r3, #1
	RecorderDataPtr->startmarker1 = 0x02;	
 80063ee:	7051      	strb	r1, [r2, #1]
	RecorderDataPtr->startmarker0 = 0x01; 
 80063f0:	7013      	strb	r3, [r2, #0]
	if (traceErrorMessage != NULL)
 80063f2:	6830      	ldr	r0, [r6, #0]
 80063f4:	b1b8      	cbz	r0, 8006426 <vTraceEnable+0x11a>
 80063f6:	1e43      	subs	r3, r0, #1
 80063f8:	f602 1213 	addw	r2, r2, #2323	; 0x913
 80063fc:	304f      	adds	r0, #79	; 0x4f
 80063fe:	e001      	b.n	8006404 <vTraceEnable+0xf8>
	for (i = 0; i < maxLength; i++)
 8006400:	4283      	cmp	r3, r0
 8006402:	d006      	beq.n	8006412 <vTraceEnable+0x106>
		dst[i] = src[i];
 8006404:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8006408:	f802 1f01 	strb.w	r1, [r2, #1]!
		if (src[i] == 0)
 800640c:	7819      	ldrb	r1, [r3, #0]
 800640e:	2900      	cmp	r1, #0
 8006410:	d1f6      	bne.n	8006400 <vTraceEnable+0xf4>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8006412:	4a68      	ldr	r2, [pc, #416]	; (80065b4 <vTraceEnable+0x2a8>)
		RecorderDataPtr->internalErrorOccured = 1;
 8006414:	682b      	ldr	r3, [r5, #0]
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8006416:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->internalErrorOccured = 1;
 8006418:	2001      	movs	r0, #1
		RecorderDataPtr->recorderActive = 0;
 800641a:	2100      	movs	r1, #0
		RecorderDataPtr->internalErrorOccured = 1;
 800641c:	f8c3 090c 	str.w	r0, [r3, #2316]	; 0x90c
		RecorderDataPtr->recorderActive = 0;
 8006420:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8006422:	b102      	cbz	r2, 8006426 <vTraceEnable+0x11a>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8006424:	4790      	blx	r2
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 8006426:	4a64      	ldr	r2, [pc, #400]	; (80065b8 <vTraceEnable+0x2ac>)
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 8006428:	4b64      	ldr	r3, [pc, #400]	; (80065bc <vTraceEnable+0x2b0>)
	TRC_REG_ITM_LOCKACCESS = TRC_ITM_LOCKACCESS_UNLOCK;
 800642a:	4965      	ldr	r1, [pc, #404]	; (80065c0 <vTraceEnable+0x2b4>)
 800642c:	6011      	str	r1, [r2, #0]
	TRC_REG_DEMCR |= TRC_DEMCR_TRCENA;
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8006434:	601a      	str	r2, [r3, #0]
		if (TRC_REG_DEMCR == 0)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d041      	beq.n	80064c0 <vTraceEnable+0x1b4>
		if (TRC_REG_DWT_CTRL & TRC_DWT_CTRL_NOCYCCNT)
 800643c:	4a61      	ldr	r2, [pc, #388]	; (80065c4 <vTraceEnable+0x2b8>)
 800643e:	6813      	ldr	r3, [r2, #0]
 8006440:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 8006444:	d160      	bne.n	8006508 <vTraceEnable+0x1fc>
		TRC_REG_DWT_CYCCNT = 0;
 8006446:	4953      	ldr	r1, [pc, #332]	; (8006594 <vTraceEnable+0x288>)
 8006448:	600b      	str	r3, [r1, #0]
		TRC_REG_DWT_CTRL |= TRC_DWT_CTRL_CYCCNTENA;
 800644a:	6813      	ldr	r3, [r2, #0]
 800644c:	f043 0301 	orr.w	r3, r3, #1
 8006450:	6013      	str	r3, [r2, #0]
	if (startOption == TRC_START)
 8006452:	2c01      	cmp	r4, #1
 8006454:	f000 80c2 	beq.w	80065dc <vTraceEnable+0x2d0>
	else if (startOption == TRC_START_AWAIT_HOST)
 8006458:	2c02      	cmp	r4, #2
 800645a:	d076      	beq.n	800654a <vTraceEnable+0x23e>
	else if (startOption != TRC_INIT)
 800645c:	b95c      	cbnz	r4, 8006476 <vTraceEnable+0x16a>
}
 800645e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (startOption == TRC_START)
 8006462:	2801      	cmp	r0, #1
 8006464:	f000 80bc 	beq.w	80065e0 <vTraceEnable+0x2d4>
	else if (startOption == TRC_START_AWAIT_HOST)
 8006468:	2802      	cmp	r0, #2
 800646a:	d1f7      	bne.n	800645c <vTraceEnable+0x150>
 800646c:	4e50      	ldr	r6, [pc, #320]	; (80065b0 <vTraceEnable+0x2a4>)
 800646e:	e06e      	b.n	800654e <vTraceEnable+0x242>
	RecorderDataPtr = &RecorderData;
 8006470:	4b55      	ldr	r3, [pc, #340]	; (80065c8 <vTraceEnable+0x2bc>)
 8006472:	602b      	str	r3, [r5, #0]
 8006474:	e756      	b.n	8006324 <vTraceEnable+0x18>
	if (RecorderDataPtr != NULL)
 8006476:	682b      	ldr	r3, [r5, #0]
 8006478:	b12b      	cbz	r3, 8006486 <vTraceEnable+0x17a>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800647a:	4a4e      	ldr	r2, [pc, #312]	; (80065b4 <vTraceEnable+0x2a8>)
 800647c:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 800647e:	2100      	movs	r1, #0
 8006480:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8006482:	b102      	cbz	r2, 8006486 <vTraceEnable+0x17a>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8006484:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8006486:	4a4a      	ldr	r2, [pc, #296]	; (80065b0 <vTraceEnable+0x2a4>)
 8006488:	6813      	ldr	r3, [r2, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d1e7      	bne.n	800645e <vTraceEnable+0x152>
		if (RecorderDataPtr != NULL)
 800648e:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8006490:	4b4e      	ldr	r3, [pc, #312]	; (80065cc <vTraceEnable+0x2c0>)
 8006492:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8006494:	2900      	cmp	r1, #0
 8006496:	d0e2      	beq.n	800645e <vTraceEnable+0x152>
		dst[i] = src[i];
 8006498:	2255      	movs	r2, #85	; 0x55
 800649a:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 800649e:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80064a2:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 80064a6:	4298      	cmp	r0, r3
 80064a8:	d005      	beq.n	80064b6 <vTraceEnable+0x1aa>
		dst[i] = src[i];
 80064aa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80064ae:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 80064b2:	2a00      	cmp	r2, #0
 80064b4:	d1f7      	bne.n	80064a6 <vTraceEnable+0x19a>
			RecorderDataPtr->internalErrorOccured = 1;
 80064b6:	682b      	ldr	r3, [r5, #0]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80064be:	e7ce      	b.n	800645e <vTraceEnable+0x152>
	if (RecorderDataPtr != NULL)
 80064c0:	682a      	ldr	r2, [r5, #0]
 80064c2:	b122      	cbz	r2, 80064ce <vTraceEnable+0x1c2>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80064c4:	493b      	ldr	r1, [pc, #236]	; (80065b4 <vTraceEnable+0x2a8>)
		RecorderDataPtr->recorderActive = 0;
 80064c6:	6313      	str	r3, [r2, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80064c8:	680b      	ldr	r3, [r1, #0]
 80064ca:	b103      	cbz	r3, 80064ce <vTraceEnable+0x1c2>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80064cc:	4798      	blx	r3
	if (traceErrorMessage == NULL)
 80064ce:	6833      	ldr	r3, [r6, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d1be      	bne.n	8006452 <vTraceEnable+0x146>
		if (RecorderDataPtr != NULL)
 80064d4:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 80064d6:	4b3e      	ldr	r3, [pc, #248]	; (80065d0 <vTraceEnable+0x2c4>)
 80064d8:	6033      	str	r3, [r6, #0]
		if (RecorderDataPtr != NULL)
 80064da:	2900      	cmp	r1, #0
 80064dc:	f000 80ad 	beq.w	800663a <vTraceEnable+0x32e>
		dst[i] = src[i];
 80064e0:	2244      	movs	r2, #68	; 0x44
 80064e2:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 80064e6:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80064ea:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 80064ee:	4298      	cmp	r0, r3
 80064f0:	d005      	beq.n	80064fe <vTraceEnable+0x1f2>
		dst[i] = src[i];
 80064f2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80064f6:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 80064fa:	2a00      	cmp	r2, #0
 80064fc:	d1f7      	bne.n	80064ee <vTraceEnable+0x1e2>
			RecorderDataPtr->internalErrorOccured = 1;
 80064fe:	682b      	ldr	r3, [r5, #0]
 8006500:	2201      	movs	r2, #1
 8006502:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8006506:	e7a4      	b.n	8006452 <vTraceEnable+0x146>
	if (RecorderDataPtr != NULL)
 8006508:	682b      	ldr	r3, [r5, #0]
 800650a:	b12b      	cbz	r3, 8006518 <vTraceEnable+0x20c>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800650c:	4a29      	ldr	r2, [pc, #164]	; (80065b4 <vTraceEnable+0x2a8>)
 800650e:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8006510:	2100      	movs	r1, #0
 8006512:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8006514:	b102      	cbz	r2, 8006518 <vTraceEnable+0x20c>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8006516:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8006518:	6833      	ldr	r3, [r6, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d199      	bne.n	8006452 <vTraceEnable+0x146>
		if (RecorderDataPtr != NULL)
 800651e:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8006520:	4b2c      	ldr	r3, [pc, #176]	; (80065d4 <vTraceEnable+0x2c8>)
 8006522:	6033      	str	r3, [r6, #0]
		if (RecorderDataPtr != NULL)
 8006524:	2900      	cmp	r1, #0
 8006526:	f000 8088 	beq.w	800663a <vTraceEnable+0x32e>
		dst[i] = src[i];
 800652a:	2244      	movs	r2, #68	; 0x44
 800652c:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8006530:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8006534:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8006538:	4283      	cmp	r3, r0
 800653a:	d0e0      	beq.n	80064fe <vTraceEnable+0x1f2>
		dst[i] = src[i];
 800653c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006540:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8006544:	2a00      	cmp	r2, #0
 8006546:	d1f7      	bne.n	8006538 <vTraceEnable+0x22c>
 8006548:	e7d9      	b.n	80064fe <vTraceEnable+0x1f2>
	if (RecorderDataPtr != NULL)
 800654a:	682b      	ldr	r3, [r5, #0]
 800654c:	b12b      	cbz	r3, 800655a <vTraceEnable+0x24e>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800654e:	4a19      	ldr	r2, [pc, #100]	; (80065b4 <vTraceEnable+0x2a8>)
 8006550:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8006552:	2100      	movs	r1, #0
 8006554:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8006556:	b102      	cbz	r2, 800655a <vTraceEnable+0x24e>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8006558:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 800655a:	6833      	ldr	r3, [r6, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f47f af7e 	bne.w	800645e <vTraceEnable+0x152>
		if (RecorderDataPtr != NULL)
 8006562:	6829      	ldr	r1, [r5, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8006564:	4b1c      	ldr	r3, [pc, #112]	; (80065d8 <vTraceEnable+0x2cc>)
 8006566:	6033      	str	r3, [r6, #0]
		if (RecorderDataPtr != NULL)
 8006568:	2900      	cmp	r1, #0
 800656a:	f43f af78 	beq.w	800645e <vTraceEnable+0x152>
		dst[i] = src[i];
 800656e:	2276      	movs	r2, #118	; 0x76
 8006570:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8006574:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8006578:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 800657c:	4298      	cmp	r0, r3
 800657e:	d09a      	beq.n	80064b6 <vTraceEnable+0x1aa>
		dst[i] = src[i];
 8006580:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006584:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8006588:	2a00      	cmp	r2, #0
 800658a:	d1f7      	bne.n	800657c <vTraceEnable+0x270>
 800658c:	e793      	b.n	80064b6 <vTraceEnable+0x1aa>
 800658e:	bf00      	nop
 8006590:	20000b94 	.word	0x20000b94
 8006594:	e0001004 	.word	0xe0001004
 8006598:	2000b704 	.word	0x2000b704
 800659c:	00051aa1 	.word	0x00051aa1
 80065a0:	0800d180 	.word	0x0800d180
 80065a4:	0d0c0b0a 	.word	0x0d0c0b0a
 80065a8:	f4f3f2f1 	.word	0xf4f3f2f1
 80065ac:	74737271 	.word	0x74737271
 80065b0:	20000c48 	.word	0x20000c48
 80065b4:	20000c54 	.word	0x20000c54
 80065b8:	e0001fb0 	.word	0xe0001fb0
 80065bc:	e000edfc 	.word	0xe000edfc
 80065c0:	c5acce55 	.word	0xc5acce55
 80065c4:	e0001000 	.word	0xe0001000
 80065c8:	2000114c 	.word	0x2000114c
 80065cc:	0800d27c 	.word	0x0800d27c
 80065d0:	0800d194 	.word	0x0800d194
 80065d4:	0800d1c0 	.word	0x0800d1c0
 80065d8:	0800d23c 	.word	0x0800d23c
	if (RecorderDataPtr == NULL)
 80065dc:	682b      	ldr	r3, [r5, #0]
 80065de:	b32b      	cbz	r3, 800662c <vTraceEnable+0x320>
	if (RecorderDataPtr->recorderActive == 1)
 80065e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	f43f af3b 	beq.w	800645e <vTraceEnable+0x152>
	if (traceErrorMessage == NULL)
 80065e8:	4e5a      	ldr	r6, [pc, #360]	; (8006754 <vTraceEnable+0x448>)
 80065ea:	6833      	ldr	r3, [r6, #0]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f47f af36 	bne.w	800645e <vTraceEnable+0x152>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065f2:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065f6:	2701      	movs	r7, #1
 80065f8:	f387 8810 	msr	PRIMASK, r7
		trcCRITICAL_SECTION_BEGIN();
 80065fc:	4c56      	ldr	r4, [pc, #344]	; (8006758 <vTraceEnable+0x44c>)
		RecorderDataPtr->recorderActive = 1;
 80065fe:	682a      	ldr	r2, [r5, #0]
		trcCRITICAL_SECTION_BEGIN();
 8006600:	6823      	ldr	r3, [r4, #0]
		RecorderDataPtr->recorderActive = 1;
 8006602:	6317      	str	r7, [r2, #48]	; 0x30
		trcCRITICAL_SECTION_BEGIN();
 8006604:	443b      	add	r3, r7
 8006606:	6023      	str	r3, [r4, #0]
		handle = TRACE_GET_TASK_NUMBER(TRACE_GET_CURRENT_TASK());
 8006608:	f7fe fa68 	bl	8004adc <prvTraceGetCurrentTaskHandle>
 800660c:	f7fe fa16 	bl	8004a3c <prvTraceGetTaskNumberLow16>
 8006610:	fa5f f980 	uxtb.w	r9, r0
		if (handle == 0)
 8006614:	f1b9 0f00 	cmp.w	r9, #0
 8006618:	d013      	beq.n	8006642 <vTraceEnable+0x336>
		prvTraceStoreTaskswitch(handle); /* Register the currently running task */
 800661a:	4648      	mov	r0, r9
 800661c:	f7ff fc38 	bl	8005e90 <prvTraceStoreTaskswitch>
		trcCRITICAL_SECTION_END();
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	3b01      	subs	r3, #1
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	f388 8810 	msr	PRIMASK, r8
 800662a:	e718      	b.n	800645e <vTraceEnable+0x152>
	if (traceErrorMessage == NULL)
 800662c:	6833      	ldr	r3, [r6, #0]
 800662e:	2b00      	cmp	r3, #0
 8006630:	f47f af15 	bne.w	800645e <vTraceEnable+0x152>
		traceErrorMessage = (char*)(intptr_t) msg;
 8006634:	4b49      	ldr	r3, [pc, #292]	; (800675c <vTraceEnable+0x450>)
 8006636:	6033      	str	r3, [r6, #0]
 8006638:	e711      	b.n	800645e <vTraceEnable+0x152>
	if (startOption == TRC_START)
 800663a:	2c01      	cmp	r4, #1
 800663c:	f47f af0c 	bne.w	8006458 <vTraceEnable+0x14c>
 8006640:	e70d      	b.n	800645e <vTraceEnable+0x152>
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 8006642:	682b      	ldr	r3, [r5, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d03c      	beq.n	80066c2 <vTraceEnable+0x3b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006648:	f3ef 8a10 	mrs	sl, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800664c:	f387 8810 	msr	PRIMASK, r7
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8006650:	4a43      	ldr	r2, [pc, #268]	; (8006760 <vTraceEnable+0x454>)
	trcCRITICAL_SECTION_BEGIN();
 8006652:	6821      	ldr	r1, [r4, #0]
	indexOfHandle = objectHandleStacks.indexOfNextAvailableHandle[objectclass];
 8006654:	88d3      	ldrh	r3, [r2, #6]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8006656:	18d0      	adds	r0, r2, r3
	trcCRITICAL_SECTION_BEGIN();
 8006658:	3101      	adds	r1, #1
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 800665a:	f890 7048 	ldrb.w	r7, [r0, #72]	; 0x48
	trcCRITICAL_SECTION_BEGIN();
 800665e:	6021      	str	r1, [r4, #0]
	if (objectHandleStacks.objectHandles[indexOfHandle] == 0)
 8006660:	b92f      	cbnz	r7, 800666e <vTraceEnable+0x362>
			(traceHandle)(1 + indexOfHandle -
 8006662:	7e11      	ldrb	r1, [r2, #24]
 8006664:	1c5f      	adds	r7, r3, #1
 8006666:	1a7f      	subs	r7, r7, r1
 8006668:	b2ff      	uxtb	r7, r7
		objectHandleStacks.objectHandles[indexOfHandle] =
 800666a:	f880 7048 	strb.w	r7, [r0, #72]	; 0x48
	if (objectHandleStacks.indexOfNextAvailableHandle[objectclass]
 800666e:	8d51      	ldrh	r1, [r2, #42]	; 0x2a
 8006670:	4299      	cmp	r1, r3
 8006672:	d33a      	bcc.n	80066ea <vTraceEnable+0x3de>
			objectHandleStacks.lowestIndexOfClass[objectclass];
 8006674:	8b11      	ldrh	r1, [r2, #24]
			objectHandleStacks.handleCountWaterMarksOfClass[objectclass])
 8006676:	8f90      	ldrh	r0, [r2, #60]	; 0x3c
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 8006678:	3301      	adds	r3, #1
 800667a:	b29b      	uxth	r3, r3
		hndCount = objectHandleStacks.indexOfNextAvailableHandle[objectclass] -
 800667c:	1a59      	subs	r1, r3, r1
		objectHandleStacks.indexOfNextAvailableHandle[objectclass]++;
 800667e:	80d3      	strh	r3, [r2, #6]
	trcCRITICAL_SECTION_END();
 8006680:	6823      	ldr	r3, [r4, #0]
		if (hndCount >
 8006682:	4281      	cmp	r1, r0
				(traceHandle)hndCount;
 8006684:	bfc8      	it	gt
 8006686:	b2c9      	uxtbgt	r1, r1
	trcCRITICAL_SECTION_END();
 8006688:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
				(traceHandle)hndCount;
 800668c:	bfc8      	it	gt
 800668e:	8791      	strhgt	r1, [r2, #60]	; 0x3c
	trcCRITICAL_SECTION_END();
 8006690:	6023      	str	r3, [r4, #0]
 8006692:	f38a 8810 	msr	PRIMASK, sl
	if (handle == 0)
 8006696:	b1bf      	cbz	r7, 80066c8 <vTraceEnable+0x3bc>
	if (handle > RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass])
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 800669e:	42bb      	cmp	r3, r7
 80066a0:	d32e      	bcc.n	8006700 <vTraceEnable+0x3f4>
		idx = uiIndexOfObject(handle, objectclass);
 80066a2:	2103      	movs	r1, #3
 80066a4:	4638      	mov	r0, r7
 80066a6:	f7fe fe79 	bl	800539c <uiIndexOfObject>
		if (traceErrorMessage == NULL)
 80066aa:	6833      	ldr	r3, [r6, #0]
 80066ac:	b373      	cbz	r3, 800670c <vTraceEnable+0x400>
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 80066ae:	682e      	ldr	r6, [r5, #0]
 80066b0:	f896 3067 	ldrb.w	r3, [r6, #103]	; 0x67
 80066b4:	42bb      	cmp	r3, r7
 80066b6:	d241      	bcs.n	800673c <vTraceEnable+0x430>
 80066b8:	482a      	ldr	r0, [pc, #168]	; (8006764 <vTraceEnable+0x458>)
 80066ba:	46b9      	mov	r9, r7
 80066bc:	f7ff f8e2 	bl	8005884 <prvTraceError>
 80066c0:	e7ab      	b.n	800661a <vTraceEnable+0x30e>
	TRACE_ASSERT(RecorderDataPtr != NULL, "Recorder not initialized, call vTraceEnable() first!", (traceHandle)0);
 80066c2:	4829      	ldr	r0, [pc, #164]	; (8006768 <vTraceEnable+0x45c>)
 80066c4:	f7ff f8de 	bl	8005884 <prvTraceError>
		prvTraceError("Illegal handle (0) in prvTraceSetObjectName.");
 80066c8:	4828      	ldr	r0, [pc, #160]	; (800676c <vTraceEnable+0x460>)
 80066ca:	f7ff f8db 	bl	8005884 <prvTraceError>
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80066ce:	4828      	ldr	r0, [pc, #160]	; (8006770 <vTraceEnable+0x464>)
	TRACE_ASSERT(id <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass],
 80066d0:	682e      	ldr	r6, [r5, #0]
	TRACE_ASSERT(objecthandle > 0 && objecthandle <= RecorderDataPtr->ObjectPropertyTable.NumberOfObjectsPerClass[objectclass], 
 80066d2:	f7ff f8d7 	bl	8005884 <prvTraceError>
 80066d6:	682a      	ldr	r2, [r5, #0]
 80066d8:	2300      	movs	r3, #0
	TRACE_PROPERTY_ACTOR_PRIORITY(objectclass, id) = value;
 80066da:	f892 2073 	ldrb.w	r2, [r2, #115]	; 0x73
 80066de:	4433      	add	r3, r6
 80066e0:	4413      	add	r3, r2
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 80066e8:	e797      	b.n	800661a <vTraceEnable+0x30e>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 80066ea:	2003      	movs	r0, #3
 80066ec:	f7fe fa6c 	bl	8004bc8 <pszTraceGetErrorNotEnoughHandles>
 80066f0:	f7ff f8c8 	bl	8005884 <prvTraceError>
	trcCRITICAL_SECTION_END();
 80066f4:	6823      	ldr	r3, [r4, #0]
 80066f6:	3b01      	subs	r3, #1
 80066f8:	6023      	str	r3, [r4, #0]
 80066fa:	f38a 8810 	msr	PRIMASK, sl
 80066fe:	e7e3      	b.n	80066c8 <vTraceEnable+0x3bc>
		prvTraceError(pszTraceGetErrorNotEnoughHandles(objectclass));
 8006700:	2003      	movs	r0, #3
 8006702:	f7fe fa61 	bl	8004bc8 <pszTraceGetErrorNotEnoughHandles>
 8006706:	f7ff f8bd 	bl	8005884 <prvTraceError>
 800670a:	e7d0      	b.n	80066ae <vTraceEnable+0x3a2>
			prvStrncpy((char*)&(RecorderDataPtr->ObjectPropertyTable.objbytes[idx]),
 800670c:	682a      	ldr	r2, [r5, #0]
 800670e:	f892 6073 	ldrb.w	r6, [r2, #115]	; 0x73
 8006712:	f100 039c 	add.w	r3, r0, #156	; 0x9c
 8006716:	4413      	add	r3, r2
	for (i = 0; i < maxLength; i++)
 8006718:	2e00      	cmp	r6, #0
 800671a:	d0c8      	beq.n	80066ae <vTraceEnable+0x3a2>
		dst[i] = src[i];
 800671c:	4402      	add	r2, r0
 800671e:	4915      	ldr	r1, [pc, #84]	; (8006774 <vTraceEnable+0x468>)
 8006720:	2028      	movs	r0, #40	; 0x28
 8006722:	f882 009c 	strb.w	r0, [r2, #156]	; 0x9c
 8006726:	1e4a      	subs	r2, r1, #1
 8006728:	4432      	add	r2, r6
	for (i = 0; i < maxLength; i++)
 800672a:	428a      	cmp	r2, r1
 800672c:	d0bf      	beq.n	80066ae <vTraceEnable+0x3a2>
		dst[i] = src[i];
 800672e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006732:	f803 0f01 	strb.w	r0, [r3, #1]!
		if (src[i] == 0)
 8006736:	2800      	cmp	r0, #0
 8006738:	d1f7      	bne.n	800672a <vTraceEnable+0x41e>
 800673a:	e7b8      	b.n	80066ae <vTraceEnable+0x3a2>
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 800673c:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
 8006740:	f8b6 208e 	ldrh.w	r2, [r6, #142]	; 0x8e
			(RecorderDataPtr->ObjectPropertyTable.TotalPropertyBytesPerClass[objectclass] * (objecthandle-1)));
 8006744:	1e79      	subs	r1, r7, #1
		return (uint16_t)(RecorderDataPtr->ObjectPropertyTable.StartIndexOfClass[objectclass] + 
 8006746:	fb13 f301 	smulbb	r3, r3, r1
 800674a:	4413      	add	r3, r2
 800674c:	46b9      	mov	r9, r7
 800674e:	b29b      	uxth	r3, r3
 8006750:	4632      	mov	r2, r6
 8006752:	e7c2      	b.n	80066da <vTraceEnable+0x3ce>
 8006754:	20000c48 	.word	0x20000c48
 8006758:	20000c40 	.word	0x20000c40
 800675c:	0800d1ec 	.word	0x0800d1ec
 8006760:	20000bac 	.word	0x20000bac
 8006764:	0800d398 	.word	0x0800d398
 8006768:	0800d2b0 	.word	0x0800d2b0
 800676c:	0800d368 	.word	0x0800d368
 8006770:	0800d3d8 	.word	0x0800d3d8
 8006774:	0800d230 	.word	0x0800d230

08006778 <prvTraceStoreTaskReady>:
	if (handle == 0)
 8006778:	b1f0      	cbz	r0, 80067b8 <prvTraceStoreTaskReady+0x40>
	if (! readyEventsEnabled)
 800677a:	4b7d      	ldr	r3, [pc, #500]	; (8006970 <prvTraceStoreTaskReady+0x1f8>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	b1db      	cbz	r3, 80067b8 <prvTraceStoreTaskReady+0x40>
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 8006780:	280f      	cmp	r0, #15
{
 8006782:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006786:	4604      	mov	r4, r0
	TRACE_ASSERT(handle <= (TRC_CFG_NTASK), "prvTraceStoreTaskReady: Invalid value for handle", TRC_UNUSED);
 8006788:	d83d      	bhi.n	8006806 <prvTraceStoreTaskReady+0x8e>
	if (recorder_busy)
 800678a:	4d7a      	ldr	r5, [pc, #488]	; (8006974 <prvTraceStoreTaskReady+0x1fc>)
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b9a3      	cbnz	r3, 80067ba <prvTraceStoreTaskReady+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006790:	f3ef 8810 	mrs	r8, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006794:	2301      	movs	r3, #1
 8006796:	f383 8810 	msr	PRIMASK, r3
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 800679a:	4e77      	ldr	r6, [pc, #476]	; (8006978 <prvTraceStoreTaskReady+0x200>)
	trcCRITICAL_SECTION_BEGIN();
 800679c:	682a      	ldr	r2, [r5, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 800679e:	6833      	ldr	r3, [r6, #0]
 80067a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
	trcCRITICAL_SECTION_BEGIN();
 80067a2:	3201      	adds	r2, #1
 80067a4:	602a      	str	r2, [r5, #0]
	if (RecorderDataPtr->recorderActive) /* Need to repeat this check! */
 80067a6:	2900      	cmp	r1, #0
 80067a8:	d14f      	bne.n	800684a <prvTraceStoreTaskReady+0xd2>
	trcCRITICAL_SECTION_END();
 80067aa:	682b      	ldr	r3, [r5, #0]
 80067ac:	3b01      	subs	r3, #1
 80067ae:	602b      	str	r3, [r5, #0]
 80067b0:	f388 8810 	msr	PRIMASK, r8
}
 80067b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b8:	4770      	bx	lr
	if (RecorderDataPtr != NULL)
 80067ba:	4e6f      	ldr	r6, [pc, #444]	; (8006978 <prvTraceStoreTaskReady+0x200>)
 80067bc:	6833      	ldr	r3, [r6, #0]
 80067be:	b12b      	cbz	r3, 80067cc <prvTraceStoreTaskReady+0x54>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80067c0:	4a6e      	ldr	r2, [pc, #440]	; (800697c <prvTraceStoreTaskReady+0x204>)
 80067c2:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 80067c4:	2100      	movs	r1, #0
 80067c6:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 80067c8:	b102      	cbz	r2, 80067cc <prvTraceStoreTaskReady+0x54>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 80067ca:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 80067cc:	4a6c      	ldr	r2, [pc, #432]	; (8006980 <prvTraceStoreTaskReady+0x208>)
 80067ce:	6813      	ldr	r3, [r2, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1ef      	bne.n	80067b4 <prvTraceStoreTaskReady+0x3c>
		if (RecorderDataPtr != NULL)
 80067d4:	6831      	ldr	r1, [r6, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 80067d6:	4b6b      	ldr	r3, [pc, #428]	; (8006984 <prvTraceStoreTaskReady+0x20c>)
 80067d8:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 80067da:	2900      	cmp	r1, #0
 80067dc:	d0ea      	beq.n	80067b4 <prvTraceStoreTaskReady+0x3c>
		dst[i] = src[i];
 80067de:	2252      	movs	r2, #82	; 0x52
 80067e0:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 80067e4:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 80067e8:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 80067ec:	4298      	cmp	r0, r3
 80067ee:	d005      	beq.n	80067fc <prvTraceStoreTaskReady+0x84>
		dst[i] = src[i];
 80067f0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80067f4:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 80067f8:	2a00      	cmp	r2, #0
 80067fa:	d1f7      	bne.n	80067ec <prvTraceStoreTaskReady+0x74>
			RecorderDataPtr->internalErrorOccured = 1;
 80067fc:	6833      	ldr	r3, [r6, #0]
 80067fe:	2201      	movs	r2, #1
 8006800:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8006804:	e7d6      	b.n	80067b4 <prvTraceStoreTaskReady+0x3c>
	if (RecorderDataPtr != NULL)
 8006806:	4e5c      	ldr	r6, [pc, #368]	; (8006978 <prvTraceStoreTaskReady+0x200>)
 8006808:	6833      	ldr	r3, [r6, #0]
 800680a:	b12b      	cbz	r3, 8006818 <prvTraceStoreTaskReady+0xa0>
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 800680c:	4a5b      	ldr	r2, [pc, #364]	; (800697c <prvTraceStoreTaskReady+0x204>)
 800680e:	6812      	ldr	r2, [r2, #0]
		RecorderDataPtr->recorderActive = 0;
 8006810:	2100      	movs	r1, #0
 8006812:	6319      	str	r1, [r3, #48]	; 0x30
	if (vTraceStopHookPtr != (TRACE_STOP_HOOK)0)
 8006814:	b102      	cbz	r2, 8006818 <prvTraceStoreTaskReady+0xa0>
		(*vTraceStopHookPtr)();			/* An application call-back function. */
 8006816:	4790      	blx	r2
	if (traceErrorMessage == NULL)
 8006818:	4a59      	ldr	r2, [pc, #356]	; (8006980 <prvTraceStoreTaskReady+0x208>)
 800681a:	6813      	ldr	r3, [r2, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1c9      	bne.n	80067b4 <prvTraceStoreTaskReady+0x3c>
		if (RecorderDataPtr != NULL)
 8006820:	6831      	ldr	r1, [r6, #0]
		traceErrorMessage = (char*)(intptr_t) msg;
 8006822:	4b59      	ldr	r3, [pc, #356]	; (8006988 <prvTraceStoreTaskReady+0x210>)
 8006824:	6013      	str	r3, [r2, #0]
		if (RecorderDataPtr != NULL)
 8006826:	2900      	cmp	r1, #0
 8006828:	d0c4      	beq.n	80067b4 <prvTraceStoreTaskReady+0x3c>
		dst[i] = src[i];
 800682a:	2254      	movs	r2, #84	; 0x54
 800682c:	f881 2914 	strb.w	r2, [r1, #2324]	; 0x914
 8006830:	f103 004f 	add.w	r0, r3, #79	; 0x4f
			prvStrncpy(RecorderDataPtr->systemInfo, traceErrorMessage, 80);
 8006834:	f601 1114 	addw	r1, r1, #2324	; 0x914
	for (i = 0; i < maxLength; i++)
 8006838:	4298      	cmp	r0, r3
 800683a:	d0df      	beq.n	80067fc <prvTraceStoreTaskReady+0x84>
		dst[i] = src[i];
 800683c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8006840:	f801 2f01 	strb.w	r2, [r1, #1]!
		if (src[i] == 0)
 8006844:	2a00      	cmp	r2, #0
 8006846:	d1f7      	bne.n	8006838 <prvTraceStoreTaskReady+0xc0>
 8006848:	e7d8      	b.n	80067fc <prvTraceStoreTaskReady+0x84>
	if (RecorderDataPtr->frequency == 0)
 800684a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800684c:	2900      	cmp	r1, #0
 800684e:	d143      	bne.n	80068d8 <prvTraceStoreTaskReady+0x160>
		if (timestampFrequency != 0)
 8006850:	4a4e      	ldr	r2, [pc, #312]	; (800698c <prvTraceStoreTaskReady+0x214>)
 8006852:	6811      	ldr	r1, [r2, #0]
 8006854:	b939      	cbnz	r1, 8006866 <prvTraceStoreTaskReady+0xee>
		else if (init_hwtc_count != (TRC_HWTC_COUNT))
 8006856:	484e      	ldr	r0, [pc, #312]	; (8006990 <prvTraceStoreTaskReady+0x218>)
 8006858:	4a4e      	ldr	r2, [pc, #312]	; (8006994 <prvTraceStoreTaskReady+0x21c>)
 800685a:	6800      	ldr	r0, [r0, #0]
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	4290      	cmp	r0, r2
 8006860:	d071      	beq.n	8006946 <prvTraceStoreTaskReady+0x1ce>
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8006862:	4a4d      	ldr	r2, [pc, #308]	; (8006998 <prvTraceStoreTaskReady+0x220>)
 8006864:	6811      	ldr	r1, [r2, #0]
	if (trace_disable_timestamp == 1)
 8006866:	4a4d      	ldr	r2, [pc, #308]	; (800699c <prvTraceStoreTaskReady+0x224>)
 8006868:	4f4d      	ldr	r7, [pc, #308]	; (80069a0 <prvTraceStoreTaskReady+0x228>)
 800686a:	6812      	ldr	r2, [r2, #0]
 800686c:	6838      	ldr	r0, [r7, #0]
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 800686e:	0889      	lsrs	r1, r1, #2
	if (trace_disable_timestamp == 1)
 8006870:	2a01      	cmp	r2, #1
			RecorderDataPtr->frequency = (TRC_HWTC_FREQ_HZ) / (TRC_HWTC_DIVISOR);		
 8006872:	6259      	str	r1, [r3, #36]	; 0x24
	if (trace_disable_timestamp == 1)
 8006874:	d016      	beq.n	80068a4 <prvTraceStoreTaskReady+0x12c>
	hwtc_count = (TRC_HWTC_COUNT);
 8006876:	4a46      	ldr	r2, [pc, #280]	; (8006990 <prvTraceStoreTaskReady+0x218>)
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8006878:	f8df e130 	ldr.w	lr, [pc, #304]	; 80069ac <prvTraceStoreTaskReady+0x234>
 800687c:	f8df 9130 	ldr.w	r9, [pc, #304]	; 80069b0 <prvTraceStoreTaskReady+0x238>
	hwtc_count = (TRC_HWTC_COUNT);
 8006880:	f8d2 c000 	ldr.w	ip, [r2]
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8006884:	f8de 2000 	ldr.w	r2, [lr]
 8006888:	f8d9 a000 	ldr.w	sl, [r9]
	last_hwtc_count = hwtc_count;
 800688c:	f8c9 c000 	str.w	ip, [r9]
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 8006890:	4462      	add	r2, ip
 8006892:	eba2 020a 	sub.w	r2, r2, sl
	last_timestamp += diff_scaled;
 8006896:	eb00 0092 	add.w	r0, r0, r2, lsr #2
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 800689a:	f002 0203 	and.w	r2, r2, #3
	last_timestamp += diff_scaled;
 800689e:	6038      	str	r0, [r7, #0]
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 80068a0:	f8ce 2000 	str.w	r2, [lr]
	dts = timestamp - old_timestamp;
 80068a4:	4a3f      	ldr	r2, [pc, #252]	; (80069a4 <prvTraceStoreTaskReady+0x22c>)
 80068a6:	6817      	ldr	r7, [r2, #0]
	old_timestamp = timestamp;
 80068a8:	6010      	str	r0, [r2, #0]
	dts = timestamp - old_timestamp;
 80068aa:	1bc7      	subs	r7, r0, r7
	if (RecorderDataPtr->frequency > 0)
 80068ac:	b9f1      	cbnz	r1, 80068ec <prvTraceStoreTaskReady+0x174>
		RecorderDataPtr->absTimeLastEvent = timestamp;
 80068ae:	6298      	str	r0, [r3, #40]	; 0x28
	if (dts > param_maxDTS)
 80068b0:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
 80068b4:	d22e      	bcs.n	8006914 <prvTraceStoreTaskReady+0x19c>
	return (uint16_t)dts & param_maxDTS;
 80068b6:	b2bf      	uxth	r7, r7
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 80068b8:	69da      	ldr	r2, [r3, #28]
 80068ba:	f242 710f 	movw	r1, #9999	; 0x270f
 80068be:	428a      	cmp	r2, r1
 80068c0:	d84c      	bhi.n	800695c <prvTraceStoreTaskReady+0x1e4>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 80068c2:	0092      	lsls	r2, r2, #2
 80068c4:	f602 1268 	addw	r2, r2, #2408	; 0x968
 80068c8:	1899      	adds	r1, r3, r2
			tr->type = DIV_TASK_READY;
 80068ca:	2002      	movs	r0, #2
 80068cc:	5498      	strb	r0, [r3, r2]
			tr->dts = dts3;
 80068ce:	804f      	strh	r7, [r1, #2]
			tr->objHandle = hnd8;
 80068d0:	704c      	strb	r4, [r1, #1]
			prvTraceUpdateCounters();
 80068d2:	f7fe f985 	bl	8004be0 <prvTraceUpdateCounters>
 80068d6:	e768      	b.n	80067aa <prvTraceStoreTaskReady+0x32>
	if (trace_disable_timestamp == 1)
 80068d8:	4a30      	ldr	r2, [pc, #192]	; (800699c <prvTraceStoreTaskReady+0x224>)
 80068da:	4f31      	ldr	r7, [pc, #196]	; (80069a0 <prvTraceStoreTaskReady+0x228>)
 80068dc:	6812      	ldr	r2, [r2, #0]
 80068de:	6838      	ldr	r0, [r7, #0]
 80068e0:	2a01      	cmp	r2, #1
 80068e2:	d1c8      	bne.n	8006876 <prvTraceStoreTaskReady+0xfe>
	dts = timestamp - old_timestamp;
 80068e4:	4a2f      	ldr	r2, [pc, #188]	; (80069a4 <prvTraceStoreTaskReady+0x22c>)
 80068e6:	6817      	ldr	r7, [r2, #0]
	old_timestamp = timestamp;
 80068e8:	6010      	str	r0, [r2, #0]
	dts = timestamp - old_timestamp;
 80068ea:	1bc7      	subs	r7, r0, r7
		if (dts > RecorderDataPtr->frequency)
 80068ec:	428f      	cmp	r7, r1
 80068ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80068f0:	d927      	bls.n	8006942 <prvTraceStoreTaskReady+0x1ca>
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 80068f2:	fbb7 fcf1 	udiv	ip, r7, r1
 80068f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068f8:	4462      	add	r2, ip
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 80068fa:	fb01 7c1c 	mls	ip, r1, ip, r7
			RecorderDataPtr->absTimeLastEventSecond += dts / RecorderDataPtr->frequency;
 80068fe:	62da      	str	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent += dts % RecorderDataPtr->frequency;
 8006900:	4460      	add	r0, ip
		if (RecorderDataPtr->absTimeLastEvent >= RecorderDataPtr->frequency)
 8006902:	4288      	cmp	r0, r1
 8006904:	6298      	str	r0, [r3, #40]	; 0x28
 8006906:	d3d3      	bcc.n	80068b0 <prvTraceStoreTaskReady+0x138>
			RecorderDataPtr->absTimeLastEventSecond++;
 8006908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
			RecorderDataPtr->absTimeLastEvent -= RecorderDataPtr->frequency;
 800690a:	1a41      	subs	r1, r0, r1
			RecorderDataPtr->absTimeLastEventSecond++;
 800690c:	3201      	adds	r2, #1
 800690e:	e9c3 120a 	strd	r1, r2, [r3, #40]	; 0x28
 8006912:	e7cd      	b.n	80068b0 <prvTraceStoreTaskReady+0x138>
	if (RecorderDataPtr->nextFreeIndex >= (TRC_CFG_EVENT_BUFFER_SIZE))
 8006914:	69da      	ldr	r2, [r3, #28]
 8006916:	f242 710f 	movw	r1, #9999	; 0x270f
 800691a:	428a      	cmp	r2, r1
 800691c:	d822      	bhi.n	8006964 <prvTraceStoreTaskReady+0x1ec>
	return (void*)(&RecorderDataPtr->eventData[RecorderDataPtr->nextFreeIndex*4]);
 800691e:	0092      	lsls	r2, r2, #2
 8006920:	f602 1268 	addw	r2, r2, #2408	; 0x968
 8006924:	eb03 0c02 	add.w	ip, r3, r2
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 8006928:	0c39      	lsrs	r1, r7, #16
				xts->type = XTS16;
 800692a:	20a9      	movs	r0, #169	; 0xa9
				xts->xts_16 = (uint16_t)((dts / 0x10000) & 0xFFFF);
 800692c:	f8ac 1002 	strh.w	r1, [ip, #2]
				xts->type = XTS16;
 8006930:	5298      	strh	r0, [r3, r2]
			prvTraceUpdateCounters();
 8006932:	f7fe f955 	bl	8004be0 <prvTraceUpdateCounters>
 8006936:	6833      	ldr	r3, [r6, #0]
 8006938:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	return (uint16_t)dts & param_maxDTS;
 800693a:	b2bf      	uxth	r7, r7
	if (! RecorderDataPtr->recorderActive)
 800693c:	2a00      	cmp	r2, #0
 800693e:	d1bb      	bne.n	80068b8 <prvTraceStoreTaskReady+0x140>
 8006940:	e733      	b.n	80067aa <prvTraceStoreTaskReady+0x32>
			RecorderDataPtr->absTimeLastEvent += dts;
 8006942:	4438      	add	r0, r7
 8006944:	e7dd      	b.n	8006902 <prvTraceStoreTaskReady+0x18a>
	if (trace_disable_timestamp == 1)
 8006946:	4a15      	ldr	r2, [pc, #84]	; (800699c <prvTraceStoreTaskReady+0x224>)
 8006948:	4f15      	ldr	r7, [pc, #84]	; (80069a0 <prvTraceStoreTaskReady+0x228>)
 800694a:	6812      	ldr	r2, [r2, #0]
 800694c:	6838      	ldr	r0, [r7, #0]
 800694e:	2a01      	cmp	r2, #1
 8006950:	d191      	bne.n	8006876 <prvTraceStoreTaskReady+0xfe>
	dts = timestamp - old_timestamp;
 8006952:	4a14      	ldr	r2, [pc, #80]	; (80069a4 <prvTraceStoreTaskReady+0x22c>)
 8006954:	6817      	ldr	r7, [r2, #0]
	old_timestamp = timestamp;
 8006956:	6010      	str	r0, [r2, #0]
	dts = timestamp - old_timestamp;
 8006958:	1bc7      	subs	r7, r0, r7
 800695a:	e7a8      	b.n	80068ae <prvTraceStoreTaskReady+0x136>
		prvTraceError("Attempt to index outside event buffer!");
 800695c:	4812      	ldr	r0, [pc, #72]	; (80069a8 <prvTraceStoreTaskReady+0x230>)
 800695e:	f7fe ff91 	bl	8005884 <prvTraceError>
 8006962:	e722      	b.n	80067aa <prvTraceStoreTaskReady+0x32>
 8006964:	4810      	ldr	r0, [pc, #64]	; (80069a8 <prvTraceStoreTaskReady+0x230>)
 8006966:	f7fe ff8d 	bl	8005884 <prvTraceError>
 800696a:	6833      	ldr	r3, [r6, #0]
 800696c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800696e:	e7e4      	b.n	800693a <prvTraceStoreTaskReady+0x1c2>
 8006970:	20000018 	.word	0x20000018
 8006974:	20000c40 	.word	0x20000c40
 8006978:	20000b94 	.word	0x20000b94
 800697c:	20000c54 	.word	0x20000c54
 8006980:	20000c48 	.word	0x20000c48
 8006984:	0800d044 	.word	0x0800d044
 8006988:	0800d07c 	.word	0x0800d07c
 800698c:	20000c44 	.word	0x20000c44
 8006990:	e0001004 	.word	0xe0001004
 8006994:	2000b704 	.word	0x2000b704
 8006998:	20000090 	.word	0x20000090
 800699c:	20000c4c 	.word	0x20000c4c
 80069a0:	20000ba8 	.word	0x20000ba8
 80069a4:	20000c3c 	.word	0x20000c3c
 80069a8:	0800cacc 	.word	0x0800cacc
 80069ac:	20000ba4 	.word	0x20000ba4
 80069b0:	20000ba0 	.word	0x20000ba0

080069b4 <prvTracePortGetTimeStamp>:
	if (trace_disable_timestamp == 1)
 80069b4:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <prvTracePortGetTimeStamp+0x40>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d015      	beq.n	80069e8 <prvTracePortGetTimeStamp+0x34>
{
 80069bc:	b4f0      	push	{r4, r5, r6, r7}
	hwtc_count = (TRC_HWTC_COUNT);
 80069be:	4b0e      	ldr	r3, [pc, #56]	; (80069f8 <prvTracePortGetTimeStamp+0x44>)
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 80069c0:	4f0e      	ldr	r7, [pc, #56]	; (80069fc <prvTracePortGetTimeStamp+0x48>)
 80069c2:	4c0f      	ldr	r4, [pc, #60]	; (8006a00 <prvTracePortGetTimeStamp+0x4c>)
	hwtc_count = (TRC_HWTC_COUNT);
 80069c4:	681d      	ldr	r5, [r3, #0]
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 80069c6:	683a      	ldr	r2, [r7, #0]
	last_timestamp += diff_scaled;
 80069c8:	4e0e      	ldr	r6, [pc, #56]	; (8006a04 <prvTracePortGetTimeStamp+0x50>)
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 80069ca:	6823      	ldr	r3, [r4, #0]
	last_timestamp += diff_scaled;
 80069cc:	6831      	ldr	r1, [r6, #0]
	diff = (hwtc_count - last_hwtc_count) + last_hwtc_rest;
 80069ce:	442a      	add	r2, r5
 80069d0:	1ad3      	subs	r3, r2, r3
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 80069d2:	f003 0203 	and.w	r2, r3, #3
	last_timestamp += diff_scaled;
 80069d6:	eb01 0393 	add.w	r3, r1, r3, lsr #2
	last_hwtc_rest = diff % (TRC_HWTC_DIVISOR);
 80069da:	603a      	str	r2, [r7, #0]
	last_timestamp += diff_scaled;
 80069dc:	6033      	str	r3, [r6, #0]
	if (pTimestamp)
 80069de:	b100      	cbz	r0, 80069e2 <prvTracePortGetTimeStamp+0x2e>
		*pTimestamp = last_timestamp;
 80069e0:	6003      	str	r3, [r0, #0]
	last_hwtc_count = hwtc_count;
 80069e2:	6025      	str	r5, [r4, #0]
}
 80069e4:	bcf0      	pop	{r4, r5, r6, r7}
 80069e6:	4770      	bx	lr
		if (pTimestamp)
 80069e8:	b118      	cbz	r0, 80069f2 <prvTracePortGetTimeStamp+0x3e>
			*pTimestamp = last_timestamp;
 80069ea:	4b06      	ldr	r3, [pc, #24]	; (8006a04 <prvTracePortGetTimeStamp+0x50>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6003      	str	r3, [r0, #0]
 80069f0:	4770      	bx	lr
 80069f2:	4770      	bx	lr
 80069f4:	20000c4c 	.word	0x20000c4c
 80069f8:	e0001004 	.word	0xe0001004
 80069fc:	20000ba4 	.word	0x20000ba4
 8006a00:	20000ba0 	.word	0x20000ba0
 8006a04:	20000ba8 	.word	0x20000ba8

08006a08 <Help_Callback>:
    }



uint8_t Help_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 8006a08:	b538      	push	{r3, r4, r5, lr}

    static uint16_t count = 0;

    CLI_Command_t* command_list_ptr = Cammand_List[count];
 8006a0a:	4d0a      	ldr	r5, [pc, #40]	; (8006a34 <Help_Callback+0x2c>)
 8006a0c:	4b0a      	ldr	r3, [pc, #40]	; (8006a38 <Help_Callback+0x30>)
 8006a0e:	882c      	ldrh	r4, [r5, #0]

    strncpy(cli_tx_out_buffer, command_list_ptr->CLI_Command_Description, max_buffer_len);
 8006a10:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006a14:	4608      	mov	r0, r1
 8006a16:	6859      	ldr	r1, [r3, #4]
 8006a18:	f001 fad9 	bl	8007fce <strncpy>

    count++;
    if (count < Command_Count)
 8006a1c:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <Help_Callback+0x34>)
    count++;
 8006a1e:	3401      	adds	r4, #1
    if (count < Command_Count)
 8006a20:	881b      	ldrh	r3, [r3, #0]
    count++;
 8006a22:	b2a4      	uxth	r4, r4
    if (count < Command_Count)
 8006a24:	42a3      	cmp	r3, r4
	{
	return 1; //call again to generate next output
	}

    count = 0;
 8006a26:	bf98      	it	ls
 8006a28:	2000      	movls	r0, #0
    count++;
 8006a2a:	802c      	strh	r4, [r5, #0]
	return 1; //call again to generate next output
 8006a2c:	bf8c      	ite	hi
 8006a2e:	2001      	movhi	r0, #1
    count = 0;
 8006a30:	8028      	strhls	r0, [r5, #0]

    return 0; // operation complete do not call again

    }
 8006a32:	bd38      	pop	{r3, r4, r5, pc}
 8006a34:	20000d22 	.word	0x20000d22
 8006a38:	20000c58 	.word	0x20000c58
 8006a3c:	20000d20 	.word	0x20000d20

08006a40 <CLI_Add_Cammand>:
    {
 8006a40:	b570      	push	{r4, r5, r6, lr}
    if (Command_Count < MAX_COMMANDS)
 8006a42:	4e09      	ldr	r6, [pc, #36]	; (8006a68 <CLI_Add_Cammand+0x28>)
 8006a44:	8835      	ldrh	r5, [r6, #0]
 8006a46:	2d31      	cmp	r5, #49	; 0x31
 8006a48:	d80b      	bhi.n	8006a62 <CLI_Add_Cammand+0x22>
 8006a4a:	4604      	mov	r4, r0
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 8006a4c:	6800      	ldr	r0, [r0, #0]
 8006a4e:	f7f9 fbc7 	bl	80001e0 <strlen>
	Cammand_List[Command_Count] = command_def;
 8006a52:	4a06      	ldr	r2, [pc, #24]	; (8006a6c <CLI_Add_Cammand+0x2c>)
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 8006a54:	8120      	strh	r0, [r4, #8]
	Command_Count++;
 8006a56:	1c6b      	adds	r3, r5, #1
	Cammand_List[Command_Count] = command_def;
 8006a58:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
	Command_Count++;
 8006a5c:	8033      	strh	r3, [r6, #0]
	return 1; // command added successful
 8006a5e:	2001      	movs	r0, #1
    }
 8006a60:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8006a62:	2000      	movs	r0, #0
    }
 8006a64:	bd70      	pop	{r4, r5, r6, pc}
 8006a66:	bf00      	nop
 8006a68:	20000d20 	.word	0x20000d20
 8006a6c:	20000c58 	.word	0x20000c58

08006a70 <CLI_Process_Cammand>:
    for (uint16_t i = 0; i < Command_Count; i++)
 8006a70:	4b1a      	ldr	r3, [pc, #104]	; (8006adc <CLI_Process_Cammand+0x6c>)
    {
 8006a72:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    for (uint16_t i = 0; i < Command_Count; i++)
 8006a76:	881f      	ldrh	r7, [r3, #0]
    {
 8006a78:	4606      	mov	r6, r0
 8006a7a:	4688      	mov	r8, r1
 8006a7c:	4691      	mov	r9, r2
    for (uint16_t i = 0; i < Command_Count; i++)
 8006a7e:	b1a7      	cbz	r7, 8006aaa <CLI_Process_Cammand+0x3a>
 8006a80:	4c17      	ldr	r4, [pc, #92]	; (8006ae0 <CLI_Process_Cammand+0x70>)
 8006a82:	3f01      	subs	r7, #1
 8006a84:	b2bb      	uxth	r3, r7
 8006a86:	1d27      	adds	r7, r4, #4
 8006a88:	eb07 0783 	add.w	r7, r7, r3, lsl #2
	command_list_ptr = Cammand_List[i];
 8006a8c:	f854 5b04 	ldr.w	r5, [r4], #4
	if ((cli_in_buffer[cmd_len] == ' ')
 8006a90:	892b      	ldrh	r3, [r5, #8]
	    if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command,
 8006a92:	461a      	mov	r2, r3
		|| (cli_in_buffer[cmd_len] == 0x00))
 8006a94:	5cf3      	ldrb	r3, [r6, r3]
 8006a96:	f013 0fdf 	tst.w	r3, #223	; 0xdf
	    if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command,
 8006a9a:	4630      	mov	r0, r6
		|| (cli_in_buffer[cmd_len] == 0x00))
 8006a9c:	d103      	bne.n	8006aa6 <CLI_Process_Cammand+0x36>
	    if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command,
 8006a9e:	6829      	ldr	r1, [r5, #0]
 8006aa0:	f001 fa83 	bl	8007faa <strncmp>
 8006aa4:	b188      	cbz	r0, 8006aca <CLI_Process_Cammand+0x5a>
    for (uint16_t i = 0; i < Command_Count; i++)
 8006aa6:	42a7      	cmp	r7, r4
 8006aa8:	d1f0      	bne.n	8006a8c <CLI_Process_Cammand+0x1c>
	strncpy(cli_tx_out_buffer, cli_in_buffer, max_buffer_len);
 8006aaa:	464a      	mov	r2, r9
 8006aac:	4631      	mov	r1, r6
 8006aae:	4640      	mov	r0, r8
 8006ab0:	f001 fa8d 	bl	8007fce <strncpy>
	strcat(cli_tx_out_buffer, CMD_Not_Recognized_Sring);
 8006ab4:	4640      	mov	r0, r8
 8006ab6:	f7f9 fb93 	bl	80001e0 <strlen>
 8006aba:	2251      	movs	r2, #81	; 0x51
 8006abc:	4440      	add	r0, r8
 8006abe:	4909      	ldr	r1, [pc, #36]	; (8006ae4 <CLI_Process_Cammand+0x74>)
 8006ac0:	f001 fa36 	bl	8007f30 <memcpy>
    }
 8006ac4:	2000      	movs	r0, #0
 8006ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (command_list_ptr->CLI_Callback != NULL)
 8006aca:	68eb      	ldr	r3, [r5, #12]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d0f9      	beq.n	8006ac4 <CLI_Process_Cammand+0x54>
		xreturn = command_list_ptr->CLI_Callback(
 8006ad0:	464a      	mov	r2, r9
 8006ad2:	4641      	mov	r1, r8
 8006ad4:	4630      	mov	r0, r6
    }
 8006ad6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		xreturn = command_list_ptr->CLI_Callback(
 8006ada:	4718      	bx	r3
 8006adc:	20000d20 	.word	0x20000d20
 8006ae0:	20000c58 	.word	0x20000c58
 8006ae4:	0800d418 	.word	0x0800d418

08006ae8 <CLI_Get_Parameter>:
    {
 8006ae8:	b470      	push	{r4, r5, r6}
    *param_number_len = 0;
 8006aea:	2400      	movs	r4, #0
 8006aec:	8014      	strh	r4, [r2, #0]
    while (uxParametersFound < param_number)
 8006aee:	b1a1      	cbz	r1, 8006b1a <CLI_Get_Parameter+0x32>
 8006af0:	1e4e      	subs	r6, r1, #1
 8006af2:	7803      	ldrb	r3, [r0, #0]
 8006af4:	b2b6      	uxth	r6, r6
	while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) != ' '))
 8006af6:	b91b      	cbnz	r3, 8006b00 <CLI_Get_Parameter+0x18>
 8006af8:	e00f      	b.n	8006b1a <CLI_Get_Parameter+0x32>
 8006afa:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006afe:	b163      	cbz	r3, 8006b1a <CLI_Get_Parameter+0x32>
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d1fa      	bne.n	8006afa <CLI_Get_Parameter+0x12>
	while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) == ' '))
 8006b04:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8006b08:	2b20      	cmp	r3, #32
 8006b0a:	d0fb      	beq.n	8006b04 <CLI_Get_Parameter+0x1c>
	if (*cli_in_buffer != 0x00)
 8006b0c:	b12b      	cbz	r3, 8006b1a <CLI_Get_Parameter+0x32>
	    if (uxParametersFound == param_number)
 8006b0e:	42b4      	cmp	r4, r6
 8006b10:	d006      	beq.n	8006b20 <CLI_Get_Parameter+0x38>
 8006b12:	3401      	adds	r4, #1
    while (uxParametersFound < param_number)
 8006b14:	b2a5      	uxth	r5, r4
 8006b16:	42a9      	cmp	r1, r5
 8006b18:	d8ed      	bhi.n	8006af6 <CLI_Get_Parameter+0xe>
		    pcReturn = NULL;
 8006b1a:	2000      	movs	r0, #0
    }
 8006b1c:	bc70      	pop	{r4, r5, r6}
 8006b1e:	4770      	bx	lr
		while (((*cli_in_buffer) != 0x00)
 8006b20:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8006b24:	d0f9      	beq.n	8006b1a <CLI_Get_Parameter+0x32>
	    cli_in_buffer++;
 8006b26:	4604      	mov	r4, r0
		while (((*cli_in_buffer) != 0x00)
 8006b28:	2101      	movs	r1, #1
 8006b2a:	e000      	b.n	8006b2e <CLI_Get_Parameter+0x46>
 8006b2c:	4619      	mov	r1, r3
		    (*param_number_len)++;
 8006b2e:	8011      	strh	r1, [r2, #0]
		while (((*cli_in_buffer) != 0x00)
 8006b30:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8006b34:	1c4b      	adds	r3, r1, #1
 8006b36:	f015 0fdf 	tst.w	r5, #223	; 0xdf
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	d1f6      	bne.n	8006b2c <CLI_Get_Parameter+0x44>
		if (*param_number_len == 0)
 8006b3e:	2900      	cmp	r1, #0
 8006b40:	d0eb      	beq.n	8006b1a <CLI_Get_Parameter+0x32>
    }
 8006b42:	bc70      	pop	{r4, r5, r6}
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop

08006b48 <CLI_Add_Help_Cammand>:
    // require only if generated output in callback is larger than output buffer
    // to split generated output
	};

void CLI_Add_Help_Cammand()
    {
 8006b48:	b570      	push	{r4, r5, r6, lr}
    if (Command_Count < MAX_COMMANDS)
 8006b4a:	4d07      	ldr	r5, [pc, #28]	; (8006b68 <CLI_Add_Help_Cammand+0x20>)
 8006b4c:	882c      	ldrh	r4, [r5, #0]
 8006b4e:	2c31      	cmp	r4, #49	; 0x31
 8006b50:	d809      	bhi.n	8006b66 <CLI_Add_Help_Cammand+0x1e>
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 8006b52:	4e06      	ldr	r6, [pc, #24]	; (8006b6c <CLI_Add_Help_Cammand+0x24>)
 8006b54:	6830      	ldr	r0, [r6, #0]
 8006b56:	f7f9 fb43 	bl	80001e0 <strlen>
	Cammand_List[Command_Count] = command_def;
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <CLI_Add_Help_Cammand+0x28>)
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 8006b5c:	8130      	strh	r0, [r6, #8]
	Cammand_List[Command_Count] = command_def;
 8006b5e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
	Command_Count++;
 8006b62:	3401      	adds	r4, #1
 8006b64:	802c      	strh	r4, [r5, #0]
    CLI_Add_Cammand(&Help_Defination);
    }
 8006b66:	bd70      	pop	{r4, r5, r6, pc}
 8006b68:	20000d20 	.word	0x20000d20
 8006b6c:	2000001c 	.word	0x2000001c
 8006b70:	20000c58 	.word	0x20000c58

08006b74 <Print_About_Task>:

void Print_About_Task(void* argument)
    {

    /*** gaurd uart ***/
    xSemaphoreTake(CLI_UART_Mutex_Handle, portMAX_DELAY);
 8006b74:	4c0a      	ldr	r4, [pc, #40]	; (8006ba0 <Print_About_Task+0x2c>)
    {
 8006b76:	b508      	push	{r3, lr}
    xSemaphoreTake(CLI_UART_Mutex_Handle, portMAX_DELAY);
 8006b78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006b7c:	6820      	ldr	r0, [r4, #0]
 8006b7e:	f7fc fa03 	bl	8002f88 <xQueueSemaphoreTake>

    CLI_UART_Send_String("\r\nSTM32 CLI over uart demo.\r\nCalculator app\r\n");
 8006b82:	4808      	ldr	r0, [pc, #32]	; (8006ba4 <Print_About_Task+0x30>)
 8006b84:	f000 fd6c 	bl	8007660 <CLI_UART_Send_String>

    /*** release uart ***/
    xSemaphoreGive(CLI_UART_Mutex_Handle);
 8006b88:	2300      	movs	r3, #0
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	6820      	ldr	r0, [r4, #0]
 8006b90:	f7fb ff78 	bl	8002a84 <xQueueGenericSend>

    vTaskSuspend(Print_About_Task_Handle);
 8006b94:	4b04      	ldr	r3, [pc, #16]	; (8006ba8 <Print_About_Task+0x34>)
 8006b96:	6818      	ldr	r0, [r3, #0]
 8006b98:	f7fc fe02 	bl	80037a0 <vTaskSuspend>
 8006b9c:	e7fe      	b.n	8006b9c <Print_About_Task+0x28>
 8006b9e:	bf00      	nop
 8006ba0:	2000b970 	.word	0x2000b970
 8006ba4:	0800d4d4 	.word	0x0800d4d4
 8006ba8:	2000b968 	.word	0x2000b968

08006bac <Add_Callback>:
    {
 8006bac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 8006bb2:	ad06      	add	r5, sp, #24
 8006bb4:	2300      	movs	r3, #0
    int32_t sum = 0;
 8006bb6:	4698      	mov	r8, r3
    uint16_t param_len = 0;
 8006bb8:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 8006bbc:	461c      	mov	r4, r3
    char str_to_int[11] = "0";
 8006bbe:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 8006bc0:	2301      	movs	r3, #1
    {
 8006bc2:	4606      	mov	r6, r0
 8006bc4:	468a      	mov	sl, r1
    uint8_t is_command_valid = 1;
 8006bc6:	9301      	str	r3, [sp, #4]
    char str_to_int[11] = "0";
 8006bc8:	f04f 0930 	mov.w	r9, #48	; 0x30
	param_number++; //param number, starting from first
 8006bcc:	1c63      	adds	r3, r4, #1
 8006bce:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 8006bd2:	4659      	mov	r1, fp
 8006bd4:	462a      	mov	r2, r5
 8006bd6:	4630      	mov	r0, r6
 8006bd8:	f7ff ff86 	bl	8006ae8 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 8006bdc:	2800      	cmp	r0, #0
 8006bde:	d07d      	beq.n	8006cdc <Add_Callback+0x130>
    char str_to_int[11] = "0";
 8006be0:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8006be4:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 8006be8:	7802      	ldrb	r2, [r0, #0]
 8006bea:	2a2d      	cmp	r2, #45	; 0x2d
 8006bec:	bf03      	ittte	eq
 8006bee:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 8006bf0:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 8006bf4:	3001      	addeq	r0, #1
    if (*param == '-')
 8006bf6:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 8006bf8:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006bfc:	d067      	beq.n	8006cce <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8006bfe:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c02:	2909      	cmp	r1, #9
 8006c04:	d85f      	bhi.n	8006cc6 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8006c06:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 8006c0a:	7842      	ldrb	r2, [r0, #1]
 8006c0c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006c10:	d05d      	beq.n	8006cce <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8006c12:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c16:	2909      	cmp	r1, #9
 8006c18:	d855      	bhi.n	8006cc6 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8006c1a:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 8006c1e:	7882      	ldrb	r2, [r0, #2]
 8006c20:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006c24:	d053      	beq.n	8006cce <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8006c26:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c2a:	2909      	cmp	r1, #9
 8006c2c:	d84b      	bhi.n	8006cc6 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8006c2e:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 8006c32:	78c2      	ldrb	r2, [r0, #3]
 8006c34:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006c38:	d049      	beq.n	8006cce <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8006c3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c3e:	2909      	cmp	r1, #9
 8006c40:	d841      	bhi.n	8006cc6 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8006c42:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 8006c46:	7902      	ldrb	r2, [r0, #4]
 8006c48:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006c4c:	d03f      	beq.n	8006cce <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8006c4e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c52:	2909      	cmp	r1, #9
 8006c54:	d837      	bhi.n	8006cc6 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8006c56:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 8006c5a:	7942      	ldrb	r2, [r0, #5]
 8006c5c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006c60:	d035      	beq.n	8006cce <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8006c62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c66:	2909      	cmp	r1, #9
 8006c68:	d82d      	bhi.n	8006cc6 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8006c6a:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 8006c6e:	7982      	ldrb	r2, [r0, #6]
 8006c70:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006c74:	d02b      	beq.n	8006cce <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8006c76:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c7a:	2909      	cmp	r1, #9
 8006c7c:	d823      	bhi.n	8006cc6 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8006c7e:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 8006c82:	79c2      	ldrb	r2, [r0, #7]
 8006c84:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006c88:	d021      	beq.n	8006cce <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8006c8a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006c8e:	2909      	cmp	r1, #9
 8006c90:	d819      	bhi.n	8006cc6 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8006c92:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 8006c96:	7a02      	ldrb	r2, [r0, #8]
 8006c98:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006c9c:	d017      	beq.n	8006cce <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8006c9e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006ca2:	2909      	cmp	r1, #9
 8006ca4:	d80f      	bhi.n	8006cc6 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8006ca6:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 8006caa:	7a42      	ldrb	r2, [r0, #9]
 8006cac:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006cb0:	d00d      	beq.n	8006cce <Add_Callback+0x122>
	if (*param < '0' || *param > '9' || i >= 10)
 8006cb2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006cb6:	2909      	cmp	r1, #9
 8006cb8:	d805      	bhi.n	8006cc6 <Add_Callback+0x11a>
	str_to_int[i++] = *param++;
 8006cba:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 8006cbe:	7a82      	ldrb	r2, [r0, #10]
 8006cc0:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006cc4:	d003      	beq.n	8006cce <Add_Callback+0x122>
		is_command_valid = 0;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	9301      	str	r3, [sp, #4]
 8006cca:	465c      	mov	r4, fp
 8006ccc:	e77e      	b.n	8006bcc <Add_Callback+0x20>
	*value = sign * atoi(str_to_int);
 8006cce:	a803      	add	r0, sp, #12
 8006cd0:	f001 f8ff 	bl	8007ed2 <atoi>
		sum += tmp;
 8006cd4:	fb04 8800 	mla	r8, r4, r0, r8
		is_command_valid = 0;
 8006cd8:	465c      	mov	r4, fp
 8006cda:	e777      	b.n	8006bcc <Add_Callback+0x20>
    if (!param_count)
 8006cdc:	b10c      	cbz	r4, 8006ce2 <Add_Callback+0x136>
    if (is_command_valid)
 8006cde:	9b01      	ldr	r3, [sp, #4]
 8006ce0:	b9eb      	cbnz	r3, 8006d1e <Add_Callback+0x172>
    strcat(cli_tx_out_buffer, cmd1);
 8006ce2:	4650      	mov	r0, sl
 8006ce4:	f7f9 fa7c 	bl	80001e0 <strlen>
 8006ce8:	4c11      	ldr	r4, [pc, #68]	; (8006d30 <Add_Callback+0x184>)
 8006cea:	4605      	mov	r5, r0
 8006cec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006cee:	eb0a 0705 	add.w	r7, sl, r5
 8006cf2:	f84a 0005 	str.w	r0, [sl, r5]
 8006cf6:	8824      	ldrh	r4, [r4, #0]
 8006cf8:	6079      	str	r1, [r7, #4]
 8006cfa:	f105 0012 	add.w	r0, r5, #18
 8006cfe:	60ba      	str	r2, [r7, #8]
 8006d00:	60fb      	str	r3, [r7, #12]
 8006d02:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 8006d04:	4450      	add	r0, sl
 8006d06:	4631      	mov	r1, r6
 8006d08:	f001 f946 	bl	8007f98 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 8006d0c:	4b09      	ldr	r3, [pc, #36]	; (8006d34 <Add_Callback+0x188>)
 8006d0e:	881a      	ldrh	r2, [r3, #0]
 8006d10:	789b      	ldrb	r3, [r3, #2]
 8006d12:	8002      	strh	r2, [r0, #0]
 8006d14:	7083      	strb	r3, [r0, #2]
    }
 8006d16:	2000      	movs	r0, #0
 8006d18:	b007      	add	sp, #28
 8006d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) sum);
 8006d1e:	4642      	mov	r2, r8
 8006d20:	4650      	mov	r0, sl
 8006d22:	4905      	ldr	r1, [pc, #20]	; (8006d38 <Add_Callback+0x18c>)
 8006d24:	f001 f918 	bl	8007f58 <sprintf>
    }
 8006d28:	2000      	movs	r0, #0
 8006d2a:	b007      	add	sp, #28
 8006d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d30:	0800d4ac 	.word	0x0800d4ac
 8006d34:	0800d4a8 	.word	0x0800d4a8
 8006d38:	0800d4a4 	.word	0x0800d4a4

08006d3c <Mul_Callback>:
    {
 8006d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d40:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 8006d42:	ad06      	add	r5, sp, #24
 8006d44:	2300      	movs	r3, #0
    int32_t rslt = 1;
 8006d46:	f04f 0801 	mov.w	r8, #1
    uint16_t param_len = 0;
 8006d4a:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 8006d4e:	461c      	mov	r4, r3
    {
 8006d50:	4606      	mov	r6, r0
 8006d52:	468a      	mov	sl, r1
    char str_to_int[11] = "0";
 8006d54:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 8006d56:	f8cd 8004 	str.w	r8, [sp, #4]
    char str_to_int[11] = "0";
 8006d5a:	f04f 0930 	mov.w	r9, #48	; 0x30
	param_number++; //param number, starting from first
 8006d5e:	1c63      	adds	r3, r4, #1
 8006d60:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 8006d64:	4659      	mov	r1, fp
 8006d66:	462a      	mov	r2, r5
 8006d68:	4630      	mov	r0, r6
 8006d6a:	f7ff febd 	bl	8006ae8 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d07f      	beq.n	8006e72 <Mul_Callback+0x136>
    char str_to_int[11] = "0";
 8006d72:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8006d76:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 8006d7a:	7802      	ldrb	r2, [r0, #0]
 8006d7c:	2a2d      	cmp	r2, #45	; 0x2d
 8006d7e:	bf03      	ittte	eq
 8006d80:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 8006d82:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 8006d86:	3001      	addeq	r0, #1
    if (*param == '-')
 8006d88:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 8006d8a:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006d8e:	d067      	beq.n	8006e60 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8006d90:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006d94:	2909      	cmp	r1, #9
 8006d96:	d85f      	bhi.n	8006e58 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8006d98:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 8006d9c:	7842      	ldrb	r2, [r0, #1]
 8006d9e:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006da2:	d05d      	beq.n	8006e60 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8006da4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006da8:	2909      	cmp	r1, #9
 8006daa:	d855      	bhi.n	8006e58 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8006dac:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 8006db0:	7882      	ldrb	r2, [r0, #2]
 8006db2:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006db6:	d053      	beq.n	8006e60 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8006db8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006dbc:	2909      	cmp	r1, #9
 8006dbe:	d84b      	bhi.n	8006e58 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8006dc0:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 8006dc4:	78c2      	ldrb	r2, [r0, #3]
 8006dc6:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006dca:	d049      	beq.n	8006e60 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8006dcc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006dd0:	2909      	cmp	r1, #9
 8006dd2:	d841      	bhi.n	8006e58 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8006dd4:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 8006dd8:	7902      	ldrb	r2, [r0, #4]
 8006dda:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006dde:	d03f      	beq.n	8006e60 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8006de0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006de4:	2909      	cmp	r1, #9
 8006de6:	d837      	bhi.n	8006e58 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8006de8:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 8006dec:	7942      	ldrb	r2, [r0, #5]
 8006dee:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006df2:	d035      	beq.n	8006e60 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8006df4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006df8:	2909      	cmp	r1, #9
 8006dfa:	d82d      	bhi.n	8006e58 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8006dfc:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 8006e00:	7982      	ldrb	r2, [r0, #6]
 8006e02:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006e06:	d02b      	beq.n	8006e60 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8006e08:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e0c:	2909      	cmp	r1, #9
 8006e0e:	d823      	bhi.n	8006e58 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8006e10:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 8006e14:	79c2      	ldrb	r2, [r0, #7]
 8006e16:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006e1a:	d021      	beq.n	8006e60 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8006e1c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e20:	2909      	cmp	r1, #9
 8006e22:	d819      	bhi.n	8006e58 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8006e24:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 8006e28:	7a02      	ldrb	r2, [r0, #8]
 8006e2a:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006e2e:	d017      	beq.n	8006e60 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8006e30:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e34:	2909      	cmp	r1, #9
 8006e36:	d80f      	bhi.n	8006e58 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8006e38:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 8006e3c:	7a42      	ldrb	r2, [r0, #9]
 8006e3e:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006e42:	d00d      	beq.n	8006e60 <Mul_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8006e44:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006e48:	2909      	cmp	r1, #9
 8006e4a:	d805      	bhi.n	8006e58 <Mul_Callback+0x11c>
	str_to_int[i++] = *param++;
 8006e4c:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 8006e50:	7a82      	ldrb	r2, [r0, #10]
 8006e52:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006e56:	d003      	beq.n	8006e60 <Mul_Callback+0x124>
		is_command_valid = 0;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	9301      	str	r3, [sp, #4]
 8006e5c:	465c      	mov	r4, fp
 8006e5e:	e77e      	b.n	8006d5e <Mul_Callback+0x22>
	*value = sign * atoi(str_to_int);
 8006e60:	a803      	add	r0, sp, #12
 8006e62:	f001 f836 	bl	8007ed2 <atoi>
 8006e66:	fb04 f000 	mul.w	r0, r4, r0
		rslt *= tmp;
 8006e6a:	fb00 f808 	mul.w	r8, r0, r8
		is_command_valid = 0;
 8006e6e:	465c      	mov	r4, fp
 8006e70:	e775      	b.n	8006d5e <Mul_Callback+0x22>
    if (!param_count)
 8006e72:	b10c      	cbz	r4, 8006e78 <Mul_Callback+0x13c>
    if (is_command_valid)
 8006e74:	9b01      	ldr	r3, [sp, #4]
 8006e76:	b9eb      	cbnz	r3, 8006eb4 <Mul_Callback+0x178>
    strcat(cli_tx_out_buffer, cmd1);
 8006e78:	4650      	mov	r0, sl
 8006e7a:	f7f9 f9b1 	bl	80001e0 <strlen>
 8006e7e:	4c12      	ldr	r4, [pc, #72]	; (8006ec8 <Mul_Callback+0x18c>)
 8006e80:	4605      	mov	r5, r0
 8006e82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e84:	eb0a 0705 	add.w	r7, sl, r5
 8006e88:	f84a 0005 	str.w	r0, [sl, r5]
 8006e8c:	8824      	ldrh	r4, [r4, #0]
 8006e8e:	6079      	str	r1, [r7, #4]
 8006e90:	f105 0012 	add.w	r0, r5, #18
 8006e94:	60ba      	str	r2, [r7, #8]
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 8006e9a:	4450      	add	r0, sl
 8006e9c:	4631      	mov	r1, r6
 8006e9e:	f001 f87b 	bl	8007f98 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 8006ea2:	4b0a      	ldr	r3, [pc, #40]	; (8006ecc <Mul_Callback+0x190>)
 8006ea4:	881a      	ldrh	r2, [r3, #0]
 8006ea6:	789b      	ldrb	r3, [r3, #2]
 8006ea8:	8002      	strh	r2, [r0, #0]
 8006eaa:	7083      	strb	r3, [r0, #2]
    }
 8006eac:	2000      	movs	r0, #0
 8006eae:	b007      	add	sp, #28
 8006eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 8006eb4:	4642      	mov	r2, r8
 8006eb6:	4650      	mov	r0, sl
 8006eb8:	4905      	ldr	r1, [pc, #20]	; (8006ed0 <Mul_Callback+0x194>)
 8006eba:	f001 f84d 	bl	8007f58 <sprintf>
    }
 8006ebe:	2000      	movs	r0, #0
 8006ec0:	b007      	add	sp, #28
 8006ec2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec6:	bf00      	nop
 8006ec8:	0800d4ac 	.word	0x0800d4ac
 8006ecc:	0800d4a8 	.word	0x0800d4a8
 8006ed0:	0800d4a4 	.word	0x0800d4a4

08006ed4 <Div_Callback>:
    {
 8006ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 8006eda:	ad06      	add	r5, sp, #24
 8006edc:	2300      	movs	r3, #0
    int32_t rslt = 1;
 8006ede:	f04f 0801 	mov.w	r8, #1
    uint16_t param_len = 0;
 8006ee2:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 8006ee6:	461c      	mov	r4, r3
    {
 8006ee8:	4606      	mov	r6, r0
 8006eea:	468a      	mov	sl, r1
    char str_to_int[11] = "0";
 8006eec:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 8006eee:	f8cd 8004 	str.w	r8, [sp, #4]
    char str_to_int[11] = "0";
 8006ef2:	f04f 0930 	mov.w	r9, #48	; 0x30
	param_number++; //param number, starting from first
 8006ef6:	1c63      	adds	r3, r4, #1
 8006ef8:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 8006efc:	4659      	mov	r1, fp
 8006efe:	462a      	mov	r2, r5
 8006f00:	4630      	mov	r0, r6
 8006f02:	f7ff fdf1 	bl	8006ae8 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 8006f06:	2800      	cmp	r0, #0
 8006f08:	f000 8083 	beq.w	8007012 <Div_Callback+0x13e>
    char str_to_int[11] = "0";
 8006f0c:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8006f10:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 8006f14:	7802      	ldrb	r2, [r0, #0]
 8006f16:	2a2d      	cmp	r2, #45	; 0x2d
 8006f18:	bf03      	ittte	eq
 8006f1a:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 8006f1c:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 8006f20:	3001      	addeq	r0, #1
    if (*param == '-')
 8006f22:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 8006f24:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006f28:	d067      	beq.n	8006ffa <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8006f2a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f2e:	2909      	cmp	r1, #9
 8006f30:	d85f      	bhi.n	8006ff2 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8006f32:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 8006f36:	7842      	ldrb	r2, [r0, #1]
 8006f38:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006f3c:	d05d      	beq.n	8006ffa <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8006f3e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f42:	2909      	cmp	r1, #9
 8006f44:	d855      	bhi.n	8006ff2 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8006f46:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 8006f4a:	7882      	ldrb	r2, [r0, #2]
 8006f4c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006f50:	d053      	beq.n	8006ffa <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8006f52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f56:	2909      	cmp	r1, #9
 8006f58:	d84b      	bhi.n	8006ff2 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8006f5a:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 8006f5e:	78c2      	ldrb	r2, [r0, #3]
 8006f60:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006f64:	d049      	beq.n	8006ffa <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8006f66:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f6a:	2909      	cmp	r1, #9
 8006f6c:	d841      	bhi.n	8006ff2 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8006f6e:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 8006f72:	7902      	ldrb	r2, [r0, #4]
 8006f74:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006f78:	d03f      	beq.n	8006ffa <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8006f7a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f7e:	2909      	cmp	r1, #9
 8006f80:	d837      	bhi.n	8006ff2 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8006f82:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 8006f86:	7942      	ldrb	r2, [r0, #5]
 8006f88:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006f8c:	d035      	beq.n	8006ffa <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8006f8e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006f92:	2909      	cmp	r1, #9
 8006f94:	d82d      	bhi.n	8006ff2 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8006f96:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 8006f9a:	7982      	ldrb	r2, [r0, #6]
 8006f9c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006fa0:	d02b      	beq.n	8006ffa <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8006fa2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006fa6:	2909      	cmp	r1, #9
 8006fa8:	d823      	bhi.n	8006ff2 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8006faa:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 8006fae:	79c2      	ldrb	r2, [r0, #7]
 8006fb0:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006fb4:	d021      	beq.n	8006ffa <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8006fb6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006fba:	2909      	cmp	r1, #9
 8006fbc:	d819      	bhi.n	8006ff2 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8006fbe:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 8006fc2:	7a02      	ldrb	r2, [r0, #8]
 8006fc4:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006fc8:	d017      	beq.n	8006ffa <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8006fca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006fce:	2909      	cmp	r1, #9
 8006fd0:	d80f      	bhi.n	8006ff2 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8006fd2:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 8006fd6:	7a42      	ldrb	r2, [r0, #9]
 8006fd8:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006fdc:	d00d      	beq.n	8006ffa <Div_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8006fde:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006fe2:	2909      	cmp	r1, #9
 8006fe4:	d805      	bhi.n	8006ff2 <Div_Callback+0x11e>
	str_to_int[i++] = *param++;
 8006fe6:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 8006fea:	7a82      	ldrb	r2, [r0, #10]
 8006fec:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8006ff0:	d003      	beq.n	8006ffa <Div_Callback+0x126>
		is_command_valid = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	9301      	str	r3, [sp, #4]
	param_number++; //param number, starting from first
 8006ff6:	465c      	mov	r4, fp
 8006ff8:	e77d      	b.n	8006ef6 <Div_Callback+0x22>
	*value = sign * atoi(str_to_int);
 8006ffa:	a803      	add	r0, sp, #12
 8006ffc:	f000 ff69 	bl	8007ed2 <atoi>
		if (param_count == 1)
 8007000:	f1bb 0f01 	cmp.w	fp, #1
	*value = sign * atoi(str_to_int);
 8007004:	fb04 f000 	mul.w	r0, r4, r0
		if (param_count == 1)
 8007008:	d025      	beq.n	8007056 <Div_Callback+0x182>
		    rslt /= tmp;
 800700a:	fb98 f8f0 	sdiv	r8, r8, r0
	param_number++; //param number, starting from first
 800700e:	465c      	mov	r4, fp
 8007010:	e771      	b.n	8006ef6 <Div_Callback+0x22>
    if (param_count != 2)
 8007012:	2c02      	cmp	r4, #2
 8007014:	d101      	bne.n	800701a <Div_Callback+0x146>
    if (is_command_valid)
 8007016:	9b01      	ldr	r3, [sp, #4]
 8007018:	bb03      	cbnz	r3, 800705c <Div_Callback+0x188>
    strcat(cli_tx_out_buffer, cmd1);
 800701a:	4650      	mov	r0, sl
 800701c:	f7f9 f8e0 	bl	80001e0 <strlen>
 8007020:	4c13      	ldr	r4, [pc, #76]	; (8007070 <Div_Callback+0x19c>)
 8007022:	4605      	mov	r5, r0
 8007024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007026:	eb0a 0705 	add.w	r7, sl, r5
 800702a:	f84a 0005 	str.w	r0, [sl, r5]
 800702e:	8824      	ldrh	r4, [r4, #0]
 8007030:	6079      	str	r1, [r7, #4]
 8007032:	f105 0012 	add.w	r0, r5, #18
 8007036:	60ba      	str	r2, [r7, #8]
 8007038:	60fb      	str	r3, [r7, #12]
 800703a:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 800703c:	4450      	add	r0, sl
 800703e:	4631      	mov	r1, r6
 8007040:	f000 ffaa 	bl	8007f98 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 8007044:	4b0b      	ldr	r3, [pc, #44]	; (8007074 <Div_Callback+0x1a0>)
 8007046:	881a      	ldrh	r2, [r3, #0]
 8007048:	789b      	ldrb	r3, [r3, #2]
 800704a:	8002      	strh	r2, [r0, #0]
 800704c:	7083      	strb	r3, [r0, #2]
    }
 800704e:	2000      	movs	r0, #0
 8007050:	b007      	add	sp, #28
 8007052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*value = sign * atoi(str_to_int);
 8007056:	4680      	mov	r8, r0
	param_number++; //param number, starting from first
 8007058:	465c      	mov	r4, fp
 800705a:	e74c      	b.n	8006ef6 <Div_Callback+0x22>
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 800705c:	4642      	mov	r2, r8
 800705e:	4650      	mov	r0, sl
 8007060:	4905      	ldr	r1, [pc, #20]	; (8007078 <Div_Callback+0x1a4>)
 8007062:	f000 ff79 	bl	8007f58 <sprintf>
    }
 8007066:	2000      	movs	r0, #0
 8007068:	b007      	add	sp, #28
 800706a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706e:	bf00      	nop
 8007070:	0800d4ac 	.word	0x0800d4ac
 8007074:	0800d4a8 	.word	0x0800d4a8
 8007078:	0800d4a4 	.word	0x0800d4a4

0800707c <Sqrt_Callback>:
    {
 800707c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007080:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 8007082:	ad06      	add	r5, sp, #24
 8007084:	2300      	movs	r3, #0
    int32_t rslt = 1;
 8007086:	f04f 0a01 	mov.w	sl, #1
    uint16_t param_len = 0;
 800708a:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 800708e:	461c      	mov	r4, r3
    {
 8007090:	4606      	mov	r6, r0
 8007092:	4689      	mov	r9, r1
    char str_to_int[11] = "0";
 8007094:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 8007096:	f8cd a004 	str.w	sl, [sp, #4]
    char str_to_int[11] = "0";
 800709a:	f04f 0830 	mov.w	r8, #48	; 0x30
	param_number++; //param number, starting from first
 800709e:	1c63      	adds	r3, r4, #1
 80070a0:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 80070a4:	4659      	mov	r1, fp
 80070a6:	462a      	mov	r2, r5
 80070a8:	4630      	mov	r0, r6
 80070aa:	f7ff fd1d 	bl	8006ae8 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 80070ae:	2800      	cmp	r0, #0
 80070b0:	f000 8089 	beq.w	80071c6 <Sqrt_Callback+0x14a>
    char str_to_int[11] = "0";
 80070b4:	e9cd 8703 	strd	r8, r7, [sp, #12]
 80070b8:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 80070bc:	7802      	ldrb	r2, [r0, #0]
 80070be:	2a2d      	cmp	r2, #45	; 0x2d
 80070c0:	bf03      	ittte	eq
 80070c2:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 80070c4:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 80070c8:	3001      	addeq	r0, #1
    if (*param == '-')
 80070ca:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 80070cc:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80070d0:	d067      	beq.n	80071a2 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 80070d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80070d6:	2909      	cmp	r1, #9
 80070d8:	d85f      	bhi.n	800719a <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 80070da:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 80070de:	7842      	ldrb	r2, [r0, #1]
 80070e0:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80070e4:	d05d      	beq.n	80071a2 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 80070e6:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80070ea:	2909      	cmp	r1, #9
 80070ec:	d855      	bhi.n	800719a <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 80070ee:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 80070f2:	7882      	ldrb	r2, [r0, #2]
 80070f4:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80070f8:	d053      	beq.n	80071a2 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 80070fa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80070fe:	2909      	cmp	r1, #9
 8007100:	d84b      	bhi.n	800719a <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 8007102:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 8007106:	78c2      	ldrb	r2, [r0, #3]
 8007108:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800710c:	d049      	beq.n	80071a2 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 800710e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007112:	2909      	cmp	r1, #9
 8007114:	d841      	bhi.n	800719a <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 8007116:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 800711a:	7902      	ldrb	r2, [r0, #4]
 800711c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8007120:	d03f      	beq.n	80071a2 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8007122:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007126:	2909      	cmp	r1, #9
 8007128:	d837      	bhi.n	800719a <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 800712a:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 800712e:	7942      	ldrb	r2, [r0, #5]
 8007130:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8007134:	d035      	beq.n	80071a2 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8007136:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800713a:	2909      	cmp	r1, #9
 800713c:	d82d      	bhi.n	800719a <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 800713e:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 8007142:	7982      	ldrb	r2, [r0, #6]
 8007144:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8007148:	d02b      	beq.n	80071a2 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 800714a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800714e:	2909      	cmp	r1, #9
 8007150:	d823      	bhi.n	800719a <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 8007152:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 8007156:	79c2      	ldrb	r2, [r0, #7]
 8007158:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800715c:	d021      	beq.n	80071a2 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 800715e:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007162:	2909      	cmp	r1, #9
 8007164:	d819      	bhi.n	800719a <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 8007166:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 800716a:	7a02      	ldrb	r2, [r0, #8]
 800716c:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8007170:	d017      	beq.n	80071a2 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8007172:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007176:	2909      	cmp	r1, #9
 8007178:	d80f      	bhi.n	800719a <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 800717a:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 800717e:	7a42      	ldrb	r2, [r0, #9]
 8007180:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8007184:	d00d      	beq.n	80071a2 <Sqrt_Callback+0x126>
	if (*param < '0' || *param > '9' || i >= 10)
 8007186:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800718a:	2909      	cmp	r1, #9
 800718c:	d805      	bhi.n	800719a <Sqrt_Callback+0x11e>
	str_to_int[i++] = *param++;
 800718e:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 8007192:	7a82      	ldrb	r2, [r0, #10]
 8007194:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8007198:	d003      	beq.n	80071a2 <Sqrt_Callback+0x126>
		is_command_valid = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	9301      	str	r3, [sp, #4]
 800719e:	465c      	mov	r4, fp
 80071a0:	e77d      	b.n	800709e <Sqrt_Callback+0x22>
	*value = sign * atoi(str_to_int);
 80071a2:	a803      	add	r0, sp, #12
 80071a4:	f000 fe95 	bl	8007ed2 <atoi>
		rslt = sqrt(tmp);
 80071a8:	fb04 f000 	mul.w	r0, r4, r0
 80071ac:	f7f9 f9c2 	bl	8000534 <__aeabi_i2d>
 80071b0:	ec41 0b10 	vmov	d0, r0, r1
 80071b4:	f004 fae0 	bl	800b778 <sqrt>
 80071b8:	ec51 0b10 	vmov	r0, r1, d0
 80071bc:	f7f9 fcd4 	bl	8000b68 <__aeabi_d2iz>
		is_command_valid = 0;
 80071c0:	465c      	mov	r4, fp
		rslt = sqrt(tmp);
 80071c2:	4682      	mov	sl, r0
 80071c4:	e76b      	b.n	800709e <Sqrt_Callback+0x22>
    if (param_count != 1)
 80071c6:	2c01      	cmp	r4, #1
 80071c8:	d101      	bne.n	80071ce <Sqrt_Callback+0x152>
    if (is_command_valid)
 80071ca:	9b01      	ldr	r3, [sp, #4]
 80071cc:	b9eb      	cbnz	r3, 800720a <Sqrt_Callback+0x18e>
    strcat(cli_tx_out_buffer, cmd1);
 80071ce:	4648      	mov	r0, r9
 80071d0:	f7f9 f806 	bl	80001e0 <strlen>
 80071d4:	4c11      	ldr	r4, [pc, #68]	; (800721c <Sqrt_Callback+0x1a0>)
 80071d6:	4605      	mov	r5, r0
 80071d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80071da:	eb09 0705 	add.w	r7, r9, r5
 80071de:	f849 0005 	str.w	r0, [r9, r5]
 80071e2:	8824      	ldrh	r4, [r4, #0]
 80071e4:	6079      	str	r1, [r7, #4]
 80071e6:	f105 0012 	add.w	r0, r5, #18
 80071ea:	60ba      	str	r2, [r7, #8]
 80071ec:	60fb      	str	r3, [r7, #12]
 80071ee:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 80071f0:	4448      	add	r0, r9
 80071f2:	4631      	mov	r1, r6
 80071f4:	f000 fed0 	bl	8007f98 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 80071f8:	4b09      	ldr	r3, [pc, #36]	; (8007220 <Sqrt_Callback+0x1a4>)
 80071fa:	881a      	ldrh	r2, [r3, #0]
 80071fc:	789b      	ldrb	r3, [r3, #2]
 80071fe:	8002      	strh	r2, [r0, #0]
 8007200:	7083      	strb	r3, [r0, #2]
    }
 8007202:	2000      	movs	r0, #0
 8007204:	b007      	add	sp, #28
 8007206:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 800720a:	4652      	mov	r2, sl
 800720c:	4648      	mov	r0, r9
 800720e:	4905      	ldr	r1, [pc, #20]	; (8007224 <Sqrt_Callback+0x1a8>)
 8007210:	f000 fea2 	bl	8007f58 <sprintf>
    }
 8007214:	2000      	movs	r0, #0
 8007216:	b007      	add	sp, #28
 8007218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800721c:	0800d4ac 	.word	0x0800d4ac
 8007220:	0800d4a8 	.word	0x0800d4a8
 8007224:	0800d4a4 	.word	0x0800d4a4

08007228 <Sub_Callback>:
    {
 8007228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800722c:	b087      	sub	sp, #28
    uint16_t param_len = 0;
 800722e:	ad06      	add	r5, sp, #24
 8007230:	2300      	movs	r3, #0
    int32_t rslt = 0;
 8007232:	4698      	mov	r8, r3
    uint16_t param_len = 0;
 8007234:	f825 3d0e 	strh.w	r3, [r5, #-14]!
    uint8_t param_number = 0;
 8007238:	461c      	mov	r4, r3
    char str_to_int[11] = "0";
 800723a:	461f      	mov	r7, r3
    uint8_t is_command_valid = 1;
 800723c:	2301      	movs	r3, #1
    {
 800723e:	4606      	mov	r6, r0
 8007240:	468a      	mov	sl, r1
    uint8_t is_command_valid = 1;
 8007242:	9301      	str	r3, [sp, #4]
    char str_to_int[11] = "0";
 8007244:	f04f 0930 	mov.w	r9, #48	; 0x30
	param_number++; //param number, starting from first
 8007248:	1c63      	adds	r3, r4, #1
 800724a:	fa5f fb83 	uxtb.w	fp, r3
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 800724e:	4659      	mov	r1, fp
 8007250:	462a      	mov	r2, r5
 8007252:	4630      	mov	r0, r6
 8007254:	f7ff fc48 	bl	8006ae8 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 8007258:	2800      	cmp	r0, #0
 800725a:	f000 8083 	beq.w	8007364 <Sub_Callback+0x13c>
    char str_to_int[11] = "0";
 800725e:	e9cd 9703 	strd	r9, r7, [sp, #12]
 8007262:	f8cd 7013 	str.w	r7, [sp, #19]
    if (*param == '-')
 8007266:	7802      	ldrb	r2, [r0, #0]
 8007268:	2a2d      	cmp	r2, #45	; 0x2d
 800726a:	bf03      	ittte	eq
 800726c:	7842      	ldrbeq	r2, [r0, #1]
	param++;
 800726e:	f04f 34ff 	moveq.w	r4, #4294967295	; 0xffffffff
 8007272:	3001      	addeq	r0, #1
    if (*param == '-')
 8007274:	2401      	movne	r4, #1
    while (*param != '\0' && *param != ' ')
 8007276:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800727a:	d067      	beq.n	800734c <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 800727c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007280:	2909      	cmp	r1, #9
 8007282:	d85f      	bhi.n	8007344 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8007284:	f88d 200c 	strb.w	r2, [sp, #12]
    while (*param != '\0' && *param != ' ')
 8007288:	7842      	ldrb	r2, [r0, #1]
 800728a:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800728e:	d05d      	beq.n	800734c <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8007290:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007294:	2909      	cmp	r1, #9
 8007296:	d855      	bhi.n	8007344 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8007298:	f88d 200d 	strb.w	r2, [sp, #13]
    while (*param != '\0' && *param != ' ')
 800729c:	7882      	ldrb	r2, [r0, #2]
 800729e:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80072a2:	d053      	beq.n	800734c <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80072a4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072a8:	2909      	cmp	r1, #9
 80072aa:	d84b      	bhi.n	8007344 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 80072ac:	f88d 200e 	strb.w	r2, [sp, #14]
    while (*param != '\0' && *param != ' ')
 80072b0:	78c2      	ldrb	r2, [r0, #3]
 80072b2:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80072b6:	d049      	beq.n	800734c <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80072b8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072bc:	2909      	cmp	r1, #9
 80072be:	d841      	bhi.n	8007344 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 80072c0:	f88d 200f 	strb.w	r2, [sp, #15]
    while (*param != '\0' && *param != ' ')
 80072c4:	7902      	ldrb	r2, [r0, #4]
 80072c6:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80072ca:	d03f      	beq.n	800734c <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80072cc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072d0:	2909      	cmp	r1, #9
 80072d2:	d837      	bhi.n	8007344 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 80072d4:	f88d 2010 	strb.w	r2, [sp, #16]
    while (*param != '\0' && *param != ' ')
 80072d8:	7942      	ldrb	r2, [r0, #5]
 80072da:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80072de:	d035      	beq.n	800734c <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80072e0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072e4:	2909      	cmp	r1, #9
 80072e6:	d82d      	bhi.n	8007344 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 80072e8:	f88d 2011 	strb.w	r2, [sp, #17]
    while (*param != '\0' && *param != ' ')
 80072ec:	7982      	ldrb	r2, [r0, #6]
 80072ee:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 80072f2:	d02b      	beq.n	800734c <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80072f4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80072f8:	2909      	cmp	r1, #9
 80072fa:	d823      	bhi.n	8007344 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 80072fc:	f88d 2012 	strb.w	r2, [sp, #18]
    while (*param != '\0' && *param != ' ')
 8007300:	79c2      	ldrb	r2, [r0, #7]
 8007302:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8007306:	d021      	beq.n	800734c <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8007308:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800730c:	2909      	cmp	r1, #9
 800730e:	d819      	bhi.n	8007344 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8007310:	f88d 2013 	strb.w	r2, [sp, #19]
    while (*param != '\0' && *param != ' ')
 8007314:	7a02      	ldrb	r2, [r0, #8]
 8007316:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800731a:	d017      	beq.n	800734c <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 800731c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007320:	2909      	cmp	r1, #9
 8007322:	d80f      	bhi.n	8007344 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8007324:	f88d 2014 	strb.w	r2, [sp, #20]
    while (*param != '\0' && *param != ' ')
 8007328:	7a42      	ldrb	r2, [r0, #9]
 800732a:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 800732e:	d00d      	beq.n	800734c <Sub_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8007330:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007334:	2909      	cmp	r1, #9
 8007336:	d805      	bhi.n	8007344 <Sub_Callback+0x11c>
	str_to_int[i++] = *param++;
 8007338:	f88d 2015 	strb.w	r2, [sp, #21]
    while (*param != '\0' && *param != ' ')
 800733c:	7a82      	ldrb	r2, [r0, #10]
 800733e:	f012 0fdf 	tst.w	r2, #223	; 0xdf
 8007342:	d003      	beq.n	800734c <Sub_Callback+0x124>
		is_command_valid = 0;
 8007344:	2300      	movs	r3, #0
 8007346:	9301      	str	r3, [sp, #4]
	param_number++; //param number, starting from first
 8007348:	465c      	mov	r4, fp
 800734a:	e77d      	b.n	8007248 <Sub_Callback+0x20>
	*value = sign * atoi(str_to_int);
 800734c:	a803      	add	r0, sp, #12
 800734e:	f000 fdc0 	bl	8007ed2 <atoi>
		if (param_count == 1)
 8007352:	f1bb 0f01 	cmp.w	fp, #1
	*value = sign * atoi(str_to_int);
 8007356:	fb04 f000 	mul.w	r0, r4, r0
		if (param_count == 1)
 800735a:	d024      	beq.n	80073a6 <Sub_Callback+0x17e>
		    rslt -= tmp;
 800735c:	eba8 0800 	sub.w	r8, r8, r0
	param_number++; //param number, starting from first
 8007360:	465c      	mov	r4, fp
 8007362:	e771      	b.n	8007248 <Sub_Callback+0x20>
    if (!param_count)
 8007364:	b10c      	cbz	r4, 800736a <Sub_Callback+0x142>
    if (is_command_valid)
 8007366:	9b01      	ldr	r3, [sp, #4]
 8007368:	bb03      	cbnz	r3, 80073ac <Sub_Callback+0x184>
    strcat(cli_tx_out_buffer, cmd1);
 800736a:	4650      	mov	r0, sl
 800736c:	f7f8 ff38 	bl	80001e0 <strlen>
 8007370:	4c13      	ldr	r4, [pc, #76]	; (80073c0 <Sub_Callback+0x198>)
 8007372:	4605      	mov	r5, r0
 8007374:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007376:	eb0a 0705 	add.w	r7, sl, r5
 800737a:	f84a 0005 	str.w	r0, [sl, r5]
 800737e:	8824      	ldrh	r4, [r4, #0]
 8007380:	6079      	str	r1, [r7, #4]
 8007382:	f105 0012 	add.w	r0, r5, #18
 8007386:	60ba      	str	r2, [r7, #8]
 8007388:	60fb      	str	r3, [r7, #12]
 800738a:	823c      	strh	r4, [r7, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 800738c:	4450      	add	r0, sl
 800738e:	4631      	mov	r1, r6
 8007390:	f000 fe02 	bl	8007f98 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 8007394:	4b0b      	ldr	r3, [pc, #44]	; (80073c4 <Sub_Callback+0x19c>)
 8007396:	881a      	ldrh	r2, [r3, #0]
 8007398:	789b      	ldrb	r3, [r3, #2]
 800739a:	8002      	strh	r2, [r0, #0]
 800739c:	7083      	strb	r3, [r0, #2]
    }
 800739e:	2000      	movs	r0, #0
 80073a0:	b007      	add	sp, #28
 80073a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*value = sign * atoi(str_to_int);
 80073a6:	4680      	mov	r8, r0
	param_number++; //param number, starting from first
 80073a8:	465c      	mov	r4, fp
 80073aa:	e74d      	b.n	8007248 <Sub_Callback+0x20>
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 80073ac:	4642      	mov	r2, r8
 80073ae:	4650      	mov	r0, sl
 80073b0:	4905      	ldr	r1, [pc, #20]	; (80073c8 <Sub_Callback+0x1a0>)
 80073b2:	f000 fdd1 	bl	8007f58 <sprintf>
    }
 80073b6:	2000      	movs	r0, #0
 80073b8:	b007      	add	sp, #28
 80073ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073be:	bf00      	nop
 80073c0:	0800d4ac 	.word	0x0800d4ac
 80073c4:	0800d4a8 	.word	0x0800d4a8
 80073c8:	0800d4a4 	.word	0x0800d4a4

080073cc <Pow_Callback>:
    {
 80073cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d0:	b089      	sub	sp, #36	; 0x24
    uint16_t param_len = 0;
 80073d2:	ae08      	add	r6, sp, #32
 80073d4:	2300      	movs	r3, #0
    int32_t rslt = 1;
 80073d6:	f04f 0901 	mov.w	r9, #1
    uint16_t param_len = 0;
 80073da:	f826 3d0e 	strh.w	r3, [r6, #-14]!
    uint8_t param_number = 0;
 80073de:	461d      	mov	r5, r3
    {
 80073e0:	4607      	mov	r7, r0
 80073e2:	468b      	mov	fp, r1
    char str_to_int[11] = "0";
 80073e4:	4698      	mov	r8, r3
    uint8_t is_command_valid = 1;
 80073e6:	f8cd 9004 	str.w	r9, [sp, #4]
    char str_to_int[11] = "0";
 80073ea:	f04f 0a30 	mov.w	sl, #48	; 0x30
	param_number++; //param number, starting from first
 80073ee:	1c6c      	adds	r4, r5, #1
 80073f0:	b2e4      	uxtb	r4, r4
	param_ptr = CLI_Get_Parameter(cli_rx_command, param_number, &param_len);
 80073f2:	4621      	mov	r1, r4
 80073f4:	4632      	mov	r2, r6
 80073f6:	4638      	mov	r0, r7
 80073f8:	f7ff fb76 	bl	8006ae8 <CLI_Get_Parameter>
	if (param_ptr != NULL)
 80073fc:	2800      	cmp	r0, #0
 80073fe:	f000 8092 	beq.w	8007526 <Pow_Callback+0x15a>
    char str_to_int[11] = "0";
 8007402:	e9cd a805 	strd	sl, r8, [sp, #20]
 8007406:	f8cd 801b 	str.w	r8, [sp, #27]
    if (*param == '-')
 800740a:	7803      	ldrb	r3, [r0, #0]
 800740c:	2b2d      	cmp	r3, #45	; 0x2d
 800740e:	bf03      	ittte	eq
 8007410:	7843      	ldrbeq	r3, [r0, #1]
	param++;
 8007412:	f04f 35ff 	moveq.w	r5, #4294967295	; 0xffffffff
 8007416:	3001      	addeq	r0, #1
    if (*param == '-')
 8007418:	2501      	movne	r5, #1
    while (*param != '\0' && *param != ' ')
 800741a:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 800741e:	d067      	beq.n	80074f0 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8007420:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007424:	2a09      	cmp	r2, #9
 8007426:	d85f      	bhi.n	80074e8 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8007428:	f88d 3014 	strb.w	r3, [sp, #20]
    while (*param != '\0' && *param != ' ')
 800742c:	7843      	ldrb	r3, [r0, #1]
 800742e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8007432:	d05d      	beq.n	80074f0 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8007434:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007438:	2a09      	cmp	r2, #9
 800743a:	d855      	bhi.n	80074e8 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 800743c:	f88d 3015 	strb.w	r3, [sp, #21]
    while (*param != '\0' && *param != ' ')
 8007440:	7883      	ldrb	r3, [r0, #2]
 8007442:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8007446:	d053      	beq.n	80074f0 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8007448:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800744c:	2a09      	cmp	r2, #9
 800744e:	d84b      	bhi.n	80074e8 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8007450:	f88d 3016 	strb.w	r3, [sp, #22]
    while (*param != '\0' && *param != ' ')
 8007454:	78c3      	ldrb	r3, [r0, #3]
 8007456:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 800745a:	d049      	beq.n	80074f0 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 800745c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007460:	2a09      	cmp	r2, #9
 8007462:	d841      	bhi.n	80074e8 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8007464:	f88d 3017 	strb.w	r3, [sp, #23]
    while (*param != '\0' && *param != ' ')
 8007468:	7903      	ldrb	r3, [r0, #4]
 800746a:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 800746e:	d03f      	beq.n	80074f0 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8007470:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007474:	2a09      	cmp	r2, #9
 8007476:	d837      	bhi.n	80074e8 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 8007478:	f88d 3018 	strb.w	r3, [sp, #24]
    while (*param != '\0' && *param != ' ')
 800747c:	7943      	ldrb	r3, [r0, #5]
 800747e:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8007482:	d035      	beq.n	80074f0 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8007484:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8007488:	2a09      	cmp	r2, #9
 800748a:	d82d      	bhi.n	80074e8 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 800748c:	f88d 3019 	strb.w	r3, [sp, #25]
    while (*param != '\0' && *param != ' ')
 8007490:	7983      	ldrb	r3, [r0, #6]
 8007492:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 8007496:	d02b      	beq.n	80074f0 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 8007498:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800749c:	2a09      	cmp	r2, #9
 800749e:	d823      	bhi.n	80074e8 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 80074a0:	f88d 301a 	strb.w	r3, [sp, #26]
    while (*param != '\0' && *param != ' ')
 80074a4:	79c3      	ldrb	r3, [r0, #7]
 80074a6:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80074aa:	d021      	beq.n	80074f0 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80074ac:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80074b0:	2a09      	cmp	r2, #9
 80074b2:	d819      	bhi.n	80074e8 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 80074b4:	f88d 301b 	strb.w	r3, [sp, #27]
    while (*param != '\0' && *param != ' ')
 80074b8:	7a03      	ldrb	r3, [r0, #8]
 80074ba:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80074be:	d017      	beq.n	80074f0 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80074c0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80074c4:	2a09      	cmp	r2, #9
 80074c6:	d80f      	bhi.n	80074e8 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 80074c8:	f88d 301c 	strb.w	r3, [sp, #28]
    while (*param != '\0' && *param != ' ')
 80074cc:	7a43      	ldrb	r3, [r0, #9]
 80074ce:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80074d2:	d00d      	beq.n	80074f0 <Pow_Callback+0x124>
	if (*param < '0' || *param > '9' || i >= 10)
 80074d4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80074d8:	2a09      	cmp	r2, #9
 80074da:	d805      	bhi.n	80074e8 <Pow_Callback+0x11c>
	str_to_int[i++] = *param++;
 80074dc:	f88d 301d 	strb.w	r3, [sp, #29]
    while (*param != '\0' && *param != ' ')
 80074e0:	7a83      	ldrb	r3, [r0, #10]
 80074e2:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 80074e6:	d003      	beq.n	80074f0 <Pow_Callback+0x124>
		is_command_valid = 0;
 80074e8:	2300      	movs	r3, #0
 80074ea:	9301      	str	r3, [sp, #4]
	param_number++; //param number, starting from first
 80074ec:	4625      	mov	r5, r4
 80074ee:	e77e      	b.n	80073ee <Pow_Callback+0x22>
	*value = sign * atoi(str_to_int);
 80074f0:	a805      	add	r0, sp, #20
 80074f2:	f000 fcee 	bl	8007ed2 <atoi>
		if (param_count == 1)
 80074f6:	2c01      	cmp	r4, #1
	*value = sign * atoi(str_to_int);
 80074f8:	fb05 f000 	mul.w	r0, r5, r0
		if (param_count == 1)
 80074fc:	d035      	beq.n	800756a <Pow_Callback+0x19e>
		    rslt = pow(rslt, tmp);
 80074fe:	f7f9 f819 	bl	8000534 <__aeabi_i2d>
 8007502:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007506:	4648      	mov	r0, r9
 8007508:	f7f9 f814 	bl	8000534 <__aeabi_i2d>
 800750c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007510:	ec41 0b10 	vmov	d0, r0, r1
 8007514:	f003 ffc0 	bl	800b498 <pow>
 8007518:	ec51 0b10 	vmov	r0, r1, d0
 800751c:	f7f9 fb24 	bl	8000b68 <__aeabi_d2iz>
	param_number++; //param number, starting from first
 8007520:	4625      	mov	r5, r4
		    rslt = pow(rslt, tmp);
 8007522:	4681      	mov	r9, r0
 8007524:	e763      	b.n	80073ee <Pow_Callback+0x22>
    if (param_count != 2)
 8007526:	2d02      	cmp	r5, #2
 8007528:	d101      	bne.n	800752e <Pow_Callback+0x162>
    if (is_command_valid)
 800752a:	9b01      	ldr	r3, [sp, #4]
 800752c:	bb03      	cbnz	r3, 8007570 <Pow_Callback+0x1a4>
    strcat(cli_tx_out_buffer, cmd1);
 800752e:	4658      	mov	r0, fp
 8007530:	f7f8 fe56 	bl	80001e0 <strlen>
 8007534:	4c13      	ldr	r4, [pc, #76]	; (8007584 <Pow_Callback+0x1b8>)
 8007536:	4605      	mov	r5, r0
 8007538:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800753a:	eb0b 0605 	add.w	r6, fp, r5
 800753e:	f84b 0005 	str.w	r0, [fp, r5]
 8007542:	8824      	ldrh	r4, [r4, #0]
 8007544:	6071      	str	r1, [r6, #4]
 8007546:	f105 0012 	add.w	r0, r5, #18
 800754a:	60b2      	str	r2, [r6, #8]
 800754c:	60f3      	str	r3, [r6, #12]
 800754e:	8234      	strh	r4, [r6, #16]
    strcat(cli_tx_out_buffer, cli_rx_command);
 8007550:	4458      	add	r0, fp
 8007552:	4639      	mov	r1, r7
 8007554:	f000 fd20 	bl	8007f98 <stpcpy>
    strcat(cli_tx_out_buffer, cmd2);
 8007558:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <Pow_Callback+0x1bc>)
 800755a:	881a      	ldrh	r2, [r3, #0]
 800755c:	789b      	ldrb	r3, [r3, #2]
 800755e:	8002      	strh	r2, [r0, #0]
 8007560:	7083      	strb	r3, [r0, #2]
    }
 8007562:	2000      	movs	r0, #0
 8007564:	b009      	add	sp, #36	; 0x24
 8007566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	*value = sign * atoi(str_to_int);
 800756a:	4681      	mov	r9, r0
	param_number++; //param number, starting from first
 800756c:	4625      	mov	r5, r4
 800756e:	e73e      	b.n	80073ee <Pow_Callback+0x22>
	sprintf(cli_tx_out_buffer, "\r\n%i\r\n", (int) rslt);
 8007570:	464a      	mov	r2, r9
 8007572:	4658      	mov	r0, fp
 8007574:	4905      	ldr	r1, [pc, #20]	; (800758c <Pow_Callback+0x1c0>)
 8007576:	f000 fcef 	bl	8007f58 <sprintf>
    }
 800757a:	2000      	movs	r0, #0
 800757c:	b009      	add	sp, #36	; 0x24
 800757e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007582:	bf00      	nop
 8007584:	0800d4ac 	.word	0x0800d4ac
 8007588:	0800d4a8 	.word	0x0800d4a8
 800758c:	0800d4a4 	.word	0x0800d4a4

08007590 <CLI_Add_All_Commands>:
    {
 8007590:	b500      	push	{lr}
    CLI_Add_Cammand(&Add_Defination);
 8007592:	4812      	ldr	r0, [pc, #72]	; (80075dc <CLI_Add_All_Commands+0x4c>)
    {
 8007594:	b085      	sub	sp, #20
    CLI_Add_Cammand(&Add_Defination);
 8007596:	f7ff fa53 	bl	8006a40 <CLI_Add_Cammand>
    CLI_Add_Cammand(&Sub_Defination);
 800759a:	4811      	ldr	r0, [pc, #68]	; (80075e0 <CLI_Add_All_Commands+0x50>)
 800759c:	f7ff fa50 	bl	8006a40 <CLI_Add_Cammand>
    CLI_Add_Cammand(&Mul_Defination);
 80075a0:	4810      	ldr	r0, [pc, #64]	; (80075e4 <CLI_Add_All_Commands+0x54>)
 80075a2:	f7ff fa4d 	bl	8006a40 <CLI_Add_Cammand>
    CLI_Add_Cammand(&Div_Defination);
 80075a6:	4810      	ldr	r0, [pc, #64]	; (80075e8 <CLI_Add_All_Commands+0x58>)
 80075a8:	f7ff fa4a 	bl	8006a40 <CLI_Add_Cammand>
    CLI_Add_Cammand(&Pow_Defination);
 80075ac:	480f      	ldr	r0, [pc, #60]	; (80075ec <CLI_Add_All_Commands+0x5c>)
 80075ae:	f7ff fa47 	bl	8006a40 <CLI_Add_Cammand>
    CLI_Add_Cammand(&Sqrt_Defination);
 80075b2:	480f      	ldr	r0, [pc, #60]	; (80075f0 <CLI_Add_All_Commands+0x60>)
 80075b4:	f7ff fa44 	bl	8006a40 <CLI_Add_Cammand>
    Print_About_Task_Handle = xTaskCreateStatic(Print_About_Task,
 80075b8:	4b0e      	ldr	r3, [pc, #56]	; (80075f4 <CLI_Add_All_Commands+0x64>)
 80075ba:	4a0f      	ldr	r2, [pc, #60]	; (80075f8 <CLI_Add_All_Commands+0x68>)
 80075bc:	9302      	str	r3, [sp, #8]
 80075be:	2302      	movs	r3, #2
 80075c0:	e9cd 3200 	strd	r3, r2, [sp]
 80075c4:	490d      	ldr	r1, [pc, #52]	; (80075fc <CLI_Add_All_Commands+0x6c>)
 80075c6:	480e      	ldr	r0, [pc, #56]	; (8007600 <CLI_Add_All_Commands+0x70>)
 80075c8:	2300      	movs	r3, #0
 80075ca:	2280      	movs	r2, #128	; 0x80
 80075cc:	f7fc f8be 	bl	800374c <xTaskCreateStatic>
 80075d0:	4b0c      	ldr	r3, [pc, #48]	; (8007604 <CLI_Add_All_Commands+0x74>)
 80075d2:	6018      	str	r0, [r3, #0]
    }
 80075d4:	b005      	add	sp, #20
 80075d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80075da:	bf00      	nop
 80075dc:	2000002c 	.word	0x2000002c
 80075e0:	2000007c 	.word	0x2000007c
 80075e4:	2000004c 	.word	0x2000004c
 80075e8:	2000003c 	.word	0x2000003c
 80075ec:	2000005c 	.word	0x2000005c
 80075f0:	2000006c 	.word	0x2000006c
 80075f4:	2000b708 	.word	0x2000b708
 80075f8:	2000b768 	.word	0x2000b768
 80075fc:	0800d4c0 	.word	0x0800d4c0
 8007600:	08006b75 	.word	0x08006b75
 8007604:	2000b968 	.word	0x2000b968

08007608 <CLI_UART_Thread_Add>:

SemaphoreHandle_t CLI_UART_Mutex_Handle;
StaticSemaphore_t CLI_UART_Mutex_Buffer;

void CLI_UART_Thread_Add()
    {
 8007608:	b510      	push	{r4, lr}

    CLI_UART_Mutex_Handle = xSemaphoreCreateMutexStatic(&CLI_UART_Mutex_Buffer);
 800760a:	490e      	ldr	r1, [pc, #56]	; (8007644 <CLI_UART_Thread_Add+0x3c>)
 800760c:	4c0e      	ldr	r4, [pc, #56]	; (8007648 <CLI_UART_Thread_Add+0x40>)
    {
 800760e:	b084      	sub	sp, #16
    CLI_UART_Mutex_Handle = xSemaphoreCreateMutexStatic(&CLI_UART_Mutex_Buffer);
 8007610:	2001      	movs	r0, #1
 8007612:	f7fb fc8b 	bl	8002f2c <xQueueCreateMutexStatic>
    xSemaphoreGive(CLI_UART_Mutex_Handle);
 8007616:	2300      	movs	r3, #0
 8007618:	461a      	mov	r2, r3
 800761a:	4619      	mov	r1, r3
    CLI_UART_Mutex_Handle = xSemaphoreCreateMutexStatic(&CLI_UART_Mutex_Buffer);
 800761c:	6020      	str	r0, [r4, #0]
    xSemaphoreGive(CLI_UART_Mutex_Handle);
 800761e:	f7fb fa31 	bl	8002a84 <xQueueGenericSend>

    CLI_UART_Task_Handle = xTaskCreateStatic(CLI_UART_Task, "CLI_UART_Task",
 8007622:	4b0a      	ldr	r3, [pc, #40]	; (800764c <CLI_UART_Thread_Add+0x44>)
 8007624:	4a0a      	ldr	r2, [pc, #40]	; (8007650 <CLI_UART_Thread_Add+0x48>)
 8007626:	9302      	str	r3, [sp, #8]
 8007628:	2303      	movs	r3, #3
 800762a:	e9cd 3200 	strd	r3, r2, [sp]
 800762e:	4909      	ldr	r1, [pc, #36]	; (8007654 <CLI_UART_Thread_Add+0x4c>)
 8007630:	4809      	ldr	r0, [pc, #36]	; (8007658 <CLI_UART_Thread_Add+0x50>)
 8007632:	2300      	movs	r3, #0
 8007634:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007638:	f7fc f888 	bl	800374c <xTaskCreateStatic>
 800763c:	4b07      	ldr	r3, [pc, #28]	; (800765c <CLI_UART_Thread_Add+0x54>)
 800763e:	6018      	str	r0, [r3, #0]
    CLI_UART_TASK_STACK_SIZE,
    NULL,
    CLI_UART_TASK_PRIORITY, CLI_UART_Task_Stack, &CLI_UART_Task_TCB);
    }
 8007640:	b004      	add	sp, #16
 8007642:	bd10      	pop	{r4, pc}
 8007644:	2000bdd4 	.word	0x2000bdd4
 8007648:	2000b970 	.word	0x2000b970
 800764c:	2000b974 	.word	0x2000b974
 8007650:	2000b9d4 	.word	0x2000b9d4
 8007654:	0800d5e8 	.word	0x0800d5e8
 8007658:	080076a5 	.word	0x080076a5
 800765c:	2000b96c 	.word	0x2000b96c

08007660 <CLI_UART_Send_String>:

void CLI_UART_Send_Char(char data)
    {
    CLI_UART->Instance->DR = (data);
 8007660:	4b08      	ldr	r3, [pc, #32]	; (8007684 <CLI_UART_Send_String+0x24>)
    while (__HAL_UART_GET_FLAG(CLI_UART,UART_FLAG_TC) == 0)
	;
    }

void CLI_UART_Send_String(char* data)
    {
 8007662:	b410      	push	{r4}
    CLI_UART->Instance->DR = (data);
 8007664:	681c      	ldr	r4, [r3, #0]
 8007666:	1e41      	subs	r1, r0, #1
 8007668:	307f      	adds	r0, #127	; 0x7f
    uint16_t count = 0;
    while (*data)
 800766a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800766e:	b133      	cbz	r3, 800767e <CLI_UART_Send_String+0x1e>
    CLI_UART->Instance->DR = (data);
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	6053      	str	r3, [r2, #4]
    while (__HAL_UART_GET_FLAG(CLI_UART,UART_FLAG_TC) == 0)
 8007674:	6813      	ldr	r3, [r2, #0]
 8007676:	065b      	lsls	r3, r3, #25
 8007678:	d5fc      	bpl.n	8007674 <CLI_UART_Send_String+0x14>
	{
	CLI_UART_Send_Char(*data++);
	count++;
	if (count == OUTPUT_BUFFER_SIZE)
 800767a:	4281      	cmp	r1, r0
 800767c:	d1f5      	bne.n	800766a <CLI_UART_Send_String+0xa>
	    {
	    break;
	    }
	}
    }
 800767e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	2000008c 	.word	0x2000008c

08007688 <CLI_UART_Send_String_DMA>:

void CLI_UART_Send_String_DMA(const char* data)
    {
 8007688:	b510      	push	{r4, lr}
 800768a:	4604      	mov	r4, r0
    HAL_UART_Transmit_DMA(CLI_UART, (uint8_t*) data, strlen(data));
 800768c:	f7f8 fda8 	bl	80001e0 <strlen>
 8007690:	4b03      	ldr	r3, [pc, #12]	; (80076a0 <CLI_UART_Send_String_DMA+0x18>)
 8007692:	b282      	uxth	r2, r0
 8007694:	4621      	mov	r1, r4
 8007696:	6818      	ldr	r0, [r3, #0]
    }
 8007698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_UART_Transmit_DMA(CLI_UART, (uint8_t*) data, strlen(data));
 800769c:	f7fa beda 	b.w	8002454 <HAL_UART_Transmit_DMA>
 80076a0:	2000008c 	.word	0x2000008c

080076a4 <CLI_UART_Task>:
    sprintf(int_to_str, "%0.2f", num);
    CLI_UART_Send_String(int_to_str);
    }

static void CLI_UART_Task(void* argument)
    {
 80076a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076a8:	b083      	sub	sp, #12
    //static uint8_t rx_char_count; // function variable, must be static in polling mode
    uint8_t rx_char_count = 0; // task variable need not to be static
    uint8_t call_again = 0;
    char rx_char = 0;
 80076aa:	f10d 0908 	add.w	r9, sp, #8
 80076ae:	2400      	movs	r4, #0
    CLI_Add_All_Commands();

    Ring_Buffer_Init(&UART_Ring_Buffer_Handle, UART_DMA_RX_Buffer,
    UART_RING_BUFFER_SIZE);

    HAL_UART_Receive_DMA(CLI_UART, (uint8_t*) UART_DMA_RX_Buffer,
 80076b0:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 8007860 <CLI_UART_Task+0x1bc>
    char rx_char = 0;
 80076b4:	f809 4d01 	strb.w	r4, [r9, #-1]!
    CLI_Add_Help_Cammand();
 80076b8:	f7ff fa46 	bl	8006b48 <CLI_Add_Help_Cammand>
    CLI_Add_All_Commands();
 80076bc:	f7ff ff68 	bl	8007590 <CLI_Add_All_Commands>
    Ring_Buffer_Init(&UART_Ring_Buffer_Handle, UART_DMA_RX_Buffer,
 80076c0:	2280      	movs	r2, #128	; 0x80
 80076c2:	495f      	ldr	r1, [pc, #380]	; (8007840 <CLI_UART_Task+0x19c>)
 80076c4:	485f      	ldr	r0, [pc, #380]	; (8007844 <CLI_UART_Task+0x1a0>)
 80076c6:	4d60      	ldr	r5, [pc, #384]	; (8007848 <CLI_UART_Task+0x1a4>)
 80076c8:	4f60      	ldr	r7, [pc, #384]	; (800784c <CLI_UART_Task+0x1a8>)
 80076ca:	f000 fa77 	bl	8007bbc <Ring_Buffer_Init>
    HAL_UART_Receive_DMA(CLI_UART, (uint8_t*) UART_DMA_RX_Buffer,
 80076ce:	495c      	ldr	r1, [pc, #368]	; (8007840 <CLI_UART_Task+0x19c>)
 80076d0:	f8da 0000 	ldr.w	r0, [sl]
 80076d4:	2280      	movs	r2, #128	; 0x80
 80076d6:	f7fa fef9 	bl	80024cc <HAL_UART_Receive_DMA>
    UART_RING_BUFFER_SIZE);

    /*CLI_UART_Send_String("\n->");*/

    /* Enable idle interrupt */
    __HAL_UART_ENABLE_IT(CLI_UART, UART_IT_IDLE);
 80076da:	f8da 3000 	ldr.w	r3, [sl]

    /*** gaurd uart ***/
    xSemaphoreTake(CLI_UART_Mutex_Handle, portMAX_DELAY);
 80076de:	4a5c      	ldr	r2, [pc, #368]	; (8007850 <CLI_UART_Task+0x1ac>)
 80076e0:	6810      	ldr	r0, [r2, #0]
    __HAL_UART_ENABLE_IT(CLI_UART, UART_IT_IDLE);
 80076e2:	681a      	ldr	r2, [r3, #0]
 80076e4:	68d3      	ldr	r3, [r2, #12]
 80076e6:	f043 0310 	orr.w	r3, r3, #16
 80076ea:	60d3      	str	r3, [r2, #12]
    xSemaphoreTake(CLI_UART_Mutex_Handle, portMAX_DELAY);
 80076ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80076f0:	f7fb fc4a 	bl	8002f88 <xQueueSemaphoreTake>

    /* Send the welcome message. */
    CLI_UART_Send_String_DMA(pcWelcomeMessage);
 80076f4:	4857      	ldr	r0, [pc, #348]	; (8007854 <CLI_UART_Task+0x1b0>)
 80076f6:	f7ff ffc7 	bl	8007688 <CLI_UART_Send_String_DMA>

    /* wait for transmission to complete */
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80076fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80076fe:	2001      	movs	r0, #1
 8007700:	f7fc fe86 	bl	8004410 <ulTaskNotifyTake>
    uint8_t rx_char_count = 0; // task variable need not to be static
 8007704:	46a3      	mov	fp, r4

    for (;;)
	{

	/*** release uart ***/
	xSemaphoreGive(CLI_UART_Mutex_Handle);
 8007706:	4852      	ldr	r0, [pc, #328]	; (8007850 <CLI_UART_Task+0x1ac>)

	/*data is written to buffer via uart DMA in background*/
	/* need to update Write_Index manually */
	UPDATE_RING_BUFFER();

	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8007708:	4e4e      	ldr	r6, [pc, #312]	; (8007844 <CLI_UART_Task+0x1a0>)
	xSemaphoreGive(CLI_UART_Mutex_Handle);
 800770a:	6800      	ldr	r0, [r0, #0]
	    else //else update command buffer
		{

		if (!rx_char_count)
		    {
		    memset(CLI_CMD_Buffer, 0x00, INPUT_BUFFER_SIZE); //reset cmd buffer
 800770c:	4c52      	ldr	r4, [pc, #328]	; (8007858 <CLI_UART_Task+0x1b4>)
	xSemaphoreGive(CLI_UART_Mutex_Handle);
 800770e:	2300      	movs	r3, #0
 8007710:	4619      	mov	r1, r3
 8007712:	461a      	mov	r2, r3
 8007714:	f7fb f9b6 	bl	8002a84 <xQueueGenericSend>
	ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8007718:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800771c:	2001      	movs	r0, #1
 800771e:	f7fc fe77 	bl	8004410 <ulTaskNotifyTake>
	xSemaphoreTake(CLI_UART_Mutex_Handle, portMAX_DELAY);
 8007722:	484b      	ldr	r0, [pc, #300]	; (8007850 <CLI_UART_Task+0x1ac>)
 8007724:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007728:	6800      	ldr	r0, [r0, #0]
 800772a:	f7fb fc2d 	bl	8002f88 <xQueueSemaphoreTake>
	UPDATE_RING_BUFFER();
 800772e:	f8da 3000 	ldr.w	r3, [sl]
 8007732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800773c:	80b3      	strh	r3, [r6, #4]
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 800773e:	4630      	mov	r0, r6
 8007740:	f000 fa5c 	bl	8007bfc <Ring_Buffer_Get_Count>
 8007744:	2800      	cmp	r0, #0
 8007746:	d0de      	beq.n	8007706 <CLI_UART_Task+0x62>
	    Ring_Buffer_Get_Char(&UART_Ring_Buffer_Handle, &rx_char);
 8007748:	4649      	mov	r1, r9
 800774a:	4630      	mov	r0, r6
 800774c:	f000 fa3c 	bl	8007bc8 <Ring_Buffer_Get_Char>
	    if (rx_char == '\r')
 8007750:	f89d 8007 	ldrb.w	r8, [sp, #7]
 8007754:	f1b8 0f0d 	cmp.w	r8, #13
 8007758:	d033      	beq.n	80077c2 <CLI_UART_Task+0x11e>
		if (!rx_char_count)
 800775a:	f1bb 0f00 	cmp.w	fp, #0
 800775e:	d019      	beq.n	8007794 <CLI_UART_Task+0xf0>
		    }

		if ((rx_char == '\b') || (rx_char == 0x7F)) // backspace or delete
 8007760:	f1b8 0f08 	cmp.w	r8, #8
 8007764:	d024      	beq.n	80077b0 <CLI_UART_Task+0x10c>
 8007766:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 800776a:	d021      	beq.n	80077b0 <CLI_UART_Task+0x10c>
			}
		    }
		else
		    {
		    // accumulate characters in input buffer
		    if ((rx_char >= ' ') && (rx_char <= '~'))
 800776c:	f1a8 0320 	sub.w	r3, r8, #32
 8007770:	2b5e      	cmp	r3, #94	; 0x5e
 8007772:	d8e4      	bhi.n	800773e <CLI_UART_Task+0x9a>
			{
			if (rx_char_count < INPUT_BUFFER_SIZE)
 8007774:	f01b 0f80 	tst.w	fp, #128	; 0x80
 8007778:	d1e1      	bne.n	800773e <CLI_UART_Task+0x9a>
			    {
			    CLI_CMD_Buffer[rx_char_count] = rx_char;
 800777a:	4a37      	ldr	r2, [pc, #220]	; (8007858 <CLI_UART_Task+0x1b4>)
			    rx_char_count++;
 800777c:	f10b 0301 	add.w	r3, fp, #1
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 8007780:	4630      	mov	r0, r6
			    CLI_CMD_Buffer[rx_char_count] = rx_char;
 8007782:	f802 800b 	strb.w	r8, [r2, fp]
			    rx_char_count++;
 8007786:	fa5f fb83 	uxtb.w	fp, r3
	while (Ring_Buffer_Get_Count(&UART_Ring_Buffer_Handle))
 800778a:	f000 fa37 	bl	8007bfc <Ring_Buffer_Get_Count>
 800778e:	2800      	cmp	r0, #0
 8007790:	d1da      	bne.n	8007748 <CLI_UART_Task+0xa4>
 8007792:	e7b8      	b.n	8007706 <CLI_UART_Task+0x62>
		    memset(CLI_CMD_Buffer, 0x00, INPUT_BUFFER_SIZE); //reset cmd buffer
 8007794:	2280      	movs	r2, #128	; 0x80
 8007796:	4659      	mov	r1, fp
 8007798:	4620      	mov	r0, r4
 800779a:	f000 fbd4 	bl	8007f46 <memset>
		if ((rx_char == '\b') || (rx_char == 0x7F)) // backspace or delete
 800779e:	f1b8 0f08 	cmp.w	r8, #8
 80077a2:	d002      	beq.n	80077aa <CLI_UART_Task+0x106>
 80077a4:	f1b8 0f7f 	cmp.w	r8, #127	; 0x7f
 80077a8:	d144      	bne.n	8007834 <CLI_UART_Task+0x190>
		rx_char_count = 0; //reset CLI_CMD_Buffer index
 80077aa:	f04f 0b00 	mov.w	fp, #0
 80077ae:	e7c6      	b.n	800773e <CLI_UART_Task+0x9a>
			rx_char_count--;
 80077b0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80077b4:	fa5f fb8b 	uxtb.w	fp, fp
			CLI_CMD_Buffer[rx_char_count] = '\0';
 80077b8:	4a27      	ldr	r2, [pc, #156]	; (8007858 <CLI_UART_Task+0x1b4>)
 80077ba:	2300      	movs	r3, #0
 80077bc:	f802 300b 	strb.w	r3, [r2, fp]
 80077c0:	e7bd      	b.n	800773e <CLI_UART_Task+0x9a>
		Ring_Buffer_Get_Char(&UART_Ring_Buffer_Handle, &rx_char); //remove \n, if there is
 80077c2:	4649      	mov	r1, r9
 80077c4:	4630      	mov	r0, r6
 80077c6:	f000 f9ff 	bl	8007bc8 <Ring_Buffer_Get_Char>
		Ring_Buffer_Flush(&UART_Ring_Buffer_Handle); //reset ring buffer
 80077ca:	4630      	mov	r0, r6
 80077cc:	f000 fa12 	bl	8007bf4 <Ring_Buffer_Flush>
		    memset(CLI_Output_Buffer, 0x00, OUTPUT_BUFFER_SIZE); //reset output buffer
 80077d0:	2280      	movs	r2, #128	; 0x80
 80077d2:	2100      	movs	r1, #0
 80077d4:	4628      	mov	r0, r5
 80077d6:	f000 fbb6 	bl	8007f46 <memset>
		    call_again = CLI_Process_Cammand(CLI_CMD_Buffer,
 80077da:	2280      	movs	r2, #128	; 0x80
 80077dc:	4629      	mov	r1, r5
 80077de:	4620      	mov	r0, r4
 80077e0:	f7ff f946 	bl	8006a70 <CLI_Process_Cammand>
		    if (CLI_Output_Buffer[0] != '\0')
 80077e4:	782b      	ldrb	r3, [r5, #0]
		    call_again = CLI_Process_Cammand(CLI_CMD_Buffer,
 80077e6:	4680      	mov	r8, r0
		    if (CLI_Output_Buffer[0] != '\0')
 80077e8:	b993      	cbnz	r3, 8007810 <CLI_UART_Task+0x16c>
		while (call_again);
 80077ea:	f1b8 0f00 	cmp.w	r8, #0
 80077ee:	d1ef      	bne.n	80077d0 <CLI_UART_Task+0x12c>
    CLI_UART->Instance->DR = (data);
 80077f0:	f8da 3000 	ldr.w	r3, [sl]
 80077f4:	4919      	ldr	r1, [pc, #100]	; (800785c <CLI_UART_Task+0x1b8>)
 80077f6:	681a      	ldr	r2, [r3, #0]
    while (*data)
 80077f8:	230a      	movs	r3, #10
    CLI_UART->Instance->DR = (data);
 80077fa:	6053      	str	r3, [r2, #4]
    while (__HAL_UART_GET_FLAG(CLI_UART,UART_FLAG_TC) == 0)
 80077fc:	6813      	ldr	r3, [r2, #0]
 80077fe:	065b      	lsls	r3, r3, #25
 8007800:	d5fc      	bpl.n	80077fc <CLI_UART_Task+0x158>
	if (count == OUTPUT_BUFFER_SIZE)
 8007802:	428f      	cmp	r7, r1
 8007804:	d0d1      	beq.n	80077aa <CLI_UART_Task+0x106>
    while (*data)
 8007806:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1f5      	bne.n	80077fa <CLI_UART_Task+0x156>
 800780e:	e7cc      	b.n	80077aa <CLI_UART_Task+0x106>
    HAL_UART_Transmit_DMA(CLI_UART, (uint8_t*) data, strlen(data));
 8007810:	4628      	mov	r0, r5
 8007812:	f7f8 fce5 	bl	80001e0 <strlen>
 8007816:	4629      	mov	r1, r5
 8007818:	b282      	uxth	r2, r0
 800781a:	f8da 0000 	ldr.w	r0, [sl]
 800781e:	f7fa fe19 	bl	8002454 <HAL_UART_Transmit_DMA>
			ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8007822:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007826:	2001      	movs	r0, #1
 8007828:	f7fc fdf2 	bl	8004410 <ulTaskNotifyTake>
		while (call_again);
 800782c:	f1b8 0f00 	cmp.w	r8, #0
 8007830:	d1ce      	bne.n	80077d0 <CLI_UART_Task+0x12c>
 8007832:	e7dd      	b.n	80077f0 <CLI_UART_Task+0x14c>
		    if ((rx_char >= ' ') && (rx_char <= '~'))
 8007834:	f1a8 0320 	sub.w	r3, r8, #32
 8007838:	2b5e      	cmp	r3, #94	; 0x5e
 800783a:	d99e      	bls.n	800777a <CLI_UART_Task+0xd6>
 800783c:	e77f      	b.n	800773e <CLI_UART_Task+0x9a>
 800783e:	bf00      	nop
 8007840:	20000e24 	.word	0x20000e24
 8007844:	20000ea4 	.word	0x20000ea4
 8007848:	20000da4 	.word	0x20000da4
 800784c:	0800d677 	.word	0x0800d677
 8007850:	2000b970 	.word	0x2000b970
 8007854:	0800d5ac 	.word	0x0800d5ac
 8007858:	20000d24 	.word	0x20000d24
 800785c:	0800d5f8 	.word	0x0800d5f8
 8007860:	2000008c 	.word	0x2000008c

08007864 <HAL_UART_TxCpltCallback>:
    vTaskNotifyGiveFromISR(CLI_UART_Task_Handle, &xHigherPriorityTaskWoken);
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
    }

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
    {
 8007864:	b500      	push	{lr}
    vTaskNotifyGiveFromISR(CLI_UART_Task_Handle, &xHigherPriorityTaskWoken);
 8007866:	4b09      	ldr	r3, [pc, #36]	; (800788c <HAL_UART_TxCpltCallback+0x28>)
    {
 8007868:	b083      	sub	sp, #12
    vTaskNotifyGiveFromISR(CLI_UART_Task_Handle, &xHigherPriorityTaskWoken);
 800786a:	6818      	ldr	r0, [r3, #0]
 800786c:	a901      	add	r1, sp, #4
 800786e:	f7fc fe9b 	bl	80045a8 <vTaskNotifyGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8007872:	9b01      	ldr	r3, [sp, #4]
 8007874:	b13b      	cbz	r3, 8007886 <HAL_UART_TxCpltCallback+0x22>
 8007876:	4b06      	ldr	r3, [pc, #24]	; (8007890 <HAL_UART_TxCpltCallback+0x2c>)
 8007878:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	f3bf 8f4f 	dsb	sy
 8007882:	f3bf 8f6f 	isb	sy
    CLI_UART_Task_Wakeup();
    }
 8007886:	b003      	add	sp, #12
 8007888:	f85d fb04 	ldr.w	pc, [sp], #4
 800788c:	2000b96c 	.word	0x2000b96c
 8007890:	e000ed04 	.word	0xe000ed04

08007894 <HAL_UART_TxHalfCpltCallback>:

void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
    {

    }
 8007894:	4770      	bx	lr
 8007896:	bf00      	nop

08007898 <CLI_UART_RX_ISR>:

void CLI_UART_RX_ISR()
    {

    if (__HAL_UART_GET_IT_SOURCE(CLI_UART, UART_IT_IDLE))
 8007898:	4b0e      	ldr	r3, [pc, #56]	; (80078d4 <CLI_UART_RX_ISR+0x3c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68da      	ldr	r2, [r3, #12]
 80078a0:	06d2      	lsls	r2, r2, #27
 80078a2:	d400      	bmi.n	80078a6 <CLI_UART_RX_ISR+0xe>
 80078a4:	4770      	bx	lr
    {
 80078a6:	b500      	push	{lr}
    vTaskNotifyGiveFromISR(CLI_UART_Task_Handle, &xHigherPriorityTaskWoken);
 80078a8:	4a0b      	ldr	r2, [pc, #44]	; (80078d8 <CLI_UART_RX_ISR+0x40>)
	 PE (Parity error), FE (Framing error), NE (Noise error), ORE (Overrun
	 error) and IDLE (Idle line detected) flags are cleared by software
	 sequence: a read operation to USART_SR register followed by a read
	 operation to USART_DR register.
	 */
	(void) __HAL_UART_GET_FLAG(CLI_UART, UART_FLAG_IDLE);
 80078aa:	6819      	ldr	r1, [r3, #0]
    vTaskNotifyGiveFromISR(CLI_UART_Task_Handle, &xHigherPriorityTaskWoken);
 80078ac:	6810      	ldr	r0, [r2, #0]
	(void) CLI_UART->Instance->DR;
 80078ae:	685b      	ldr	r3, [r3, #4]
    {
 80078b0:	b083      	sub	sp, #12
    vTaskNotifyGiveFromISR(CLI_UART_Task_Handle, &xHigherPriorityTaskWoken);
 80078b2:	a901      	add	r1, sp, #4
 80078b4:	f7fc fe78 	bl	80045a8 <vTaskNotifyGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80078b8:	9b01      	ldr	r3, [sp, #4]
 80078ba:	b13b      	cbz	r3, 80078cc <CLI_UART_RX_ISR+0x34>
 80078bc:	4b07      	ldr	r3, [pc, #28]	; (80078dc <CLI_UART_RX_ISR+0x44>)
 80078be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	f3bf 8f4f 	dsb	sy
 80078c8:	f3bf 8f6f 	isb	sy

	CLI_UART_Task_Wakeup();
	}
    }
 80078cc:	b003      	add	sp, #12
 80078ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80078d2:	bf00      	nop
 80078d4:	2000008c 	.word	0x2000008c
 80078d8:	2000b96c 	.word	0x2000b96c
 80078dc:	e000ed04 	.word	0xe000ed04

080078e0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80078e0:	b510      	push	{r4, lr}
 80078e2:	b082      	sub	sp, #8
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80078e4:	2400      	movs	r4, #0
 80078e6:	4b0f      	ldr	r3, [pc, #60]	; (8007924 <MX_DMA_Init+0x44>)
 80078e8:	9401      	str	r4, [sp, #4]
 80078ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078ec:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80078f0:	631a      	str	r2, [r3, #48]	; 0x30
 80078f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80078f8:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 80078fa:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80078fc:	2105      	movs	r1, #5
 80078fe:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007900:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8007902:	f7f9 fb45 	bl	8000f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8007906:	2010      	movs	r0, #16
 8007908:	f7f9 fb88 	bl	800101c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800790c:	4622      	mov	r2, r4
 800790e:	2105      	movs	r1, #5
 8007910:	2011      	movs	r0, #17
 8007912:	f7f9 fb3d 	bl	8000f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8007916:	2011      	movs	r0, #17

}
 8007918:	b002      	add	sp, #8
 800791a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800791e:	f7f9 bb7d 	b.w	800101c <HAL_NVIC_EnableIRQ>
 8007922:	bf00      	nop
 8007924:	40023800 	.word	0x40023800

08007928 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8007928:	b508      	push	{r3, lr}
  /* USER CODE BEGIN StartDefaultTask */
    //vTaskSuspend(NULL);
  /* Infinite loop */
  for(;;)
  {
    osDelay(5000);
 800792a:	f241 3088 	movw	r0, #5000	; 0x1388
 800792e:	f7fa ffa9 	bl	8002884 <osDelay>
 8007932:	e7fa      	b.n	800792a <StartDefaultTask+0x2>

08007934 <configureTimerForRunTimeStats>:
}
 8007934:	4770      	bx	lr
 8007936:	bf00      	nop

08007938 <getRunTimeCounterValue>:
}
 8007938:	2000      	movs	r0, #0
 800793a:	4770      	bx	lr

0800793c <vApplicationGetIdleTaskMemory>:
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800793c:	4b04      	ldr	r3, [pc, #16]	; (8007950 <vApplicationGetIdleTaskMemory+0x14>)
 800793e:	6003      	str	r3, [r0, #0]
{
 8007940:	b410      	push	{r4}
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007942:	2380      	movs	r3, #128	; 0x80
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007944:	4c03      	ldr	r4, [pc, #12]	; (8007954 <vApplicationGetIdleTaskMemory+0x18>)
 8007946:	600c      	str	r4, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8007948:	6013      	str	r3, [r2, #0]
}                   
 800794a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800794e:	4770      	bx	lr
 8007950:	200010b0 	.word	0x200010b0
 8007954:	20000eb0 	.word	0x20000eb0

08007958 <MX_FREERTOS_Init>:
void MX_FREERTOS_Init(void) {
 8007958:	b530      	push	{r4, r5, lr}
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 800795a:	4d08      	ldr	r5, [pc, #32]	; (800797c <MX_FREERTOS_Init+0x24>)
 800795c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void MX_FREERTOS_Init(void) {
 800795e:	b089      	sub	sp, #36	; 0x24
  osThreadStaticDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128, defaultTaskBuffer, &defaultTaskControlBlock);
 8007960:	ac01      	add	r4, sp, #4
 8007962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007964:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007968:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800796c:	2100      	movs	r1, #0
 800796e:	a801      	add	r0, sp, #4
 8007970:	f7fa ff72 	bl	8002858 <osThreadCreate>
 8007974:	4b02      	ldr	r3, [pc, #8]	; (8007980 <MX_FREERTOS_Init+0x28>)
 8007976:	6018      	str	r0, [r3, #0]
}
 8007978:	b009      	add	sp, #36	; 0x24
 800797a:	bd30      	pop	{r4, r5, pc}
 800797c:	0800c618 	.word	0x0800c618
 8007980:	2000be24 	.word	0x2000be24

08007984 <MX_GPIO_Init>:
     PB3   ------> SPI1_SCK
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8007984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007988:	2400      	movs	r4, #0
{
 800798a:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800798c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8007990:	e9cd 4407 	strd	r4, r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007994:	4b51      	ldr	r3, [pc, #324]	; (8007adc <MX_GPIO_Init+0x158>)
 8007996:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007998:	9409      	str	r4, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800799a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L6470_CS_GPIO_Port, L6470_CS_Pin, GPIO_PIN_SET);
 800799c:	4d50      	ldr	r5, [pc, #320]	; (8007ae0 <MX_GPIO_Init+0x15c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L6470_RST_STBY_GPIO_Port, L6470_RST_STBY_Pin, GPIO_PIN_RESET);
 800799e:	4e51      	ldr	r6, [pc, #324]	; (8007ae4 <MX_GPIO_Init+0x160>)

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|L6470_Flag_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80079a0:	4f51      	ldr	r7, [pc, #324]	; (8007ae8 <MX_GPIO_Init+0x164>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80079a2:	f042 0204 	orr.w	r2, r2, #4
 80079a6:	631a      	str	r2, [r3, #48]	; 0x30
 80079a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079aa:	f002 0204 	and.w	r2, r2, #4
 80079ae:	9201      	str	r2, [sp, #4]
 80079b0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80079b2:	9402      	str	r4, [sp, #8]
 80079b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80079ba:	631a      	str	r2, [r3, #48]	; 0x30
 80079bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079be:	f002 0280 	and.w	r2, r2, #128	; 0x80
 80079c2:	9202      	str	r2, [sp, #8]
 80079c4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80079c6:	9403      	str	r4, [sp, #12]
 80079c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079ca:	f042 0201 	orr.w	r2, r2, #1
 80079ce:	631a      	str	r2, [r3, #48]	; 0x30
 80079d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079d2:	f002 0201 	and.w	r2, r2, #1
 80079d6:	9203      	str	r2, [sp, #12]
 80079d8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80079da:	9404      	str	r4, [sp, #16]
 80079dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079de:	f042 0202 	orr.w	r2, r2, #2
 80079e2:	631a      	str	r2, [r3, #48]	; 0x30
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(L6470_CS_GPIO_Port, L6470_CS_Pin, GPIO_PIN_SET);
 80079ec:	4628      	mov	r0, r5
 80079ee:	2201      	movs	r2, #1
 80079f0:	2110      	movs	r1, #16
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80079f2:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(L6470_CS_GPIO_Port, L6470_CS_Pin, GPIO_PIN_SET);
 80079f4:	f7f9 ff48 	bl	8001888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80079f8:	4622      	mov	r2, r4
 80079fa:	4628      	mov	r0, r5
 80079fc:	2120      	movs	r1, #32
 80079fe:	f7f9 ff43 	bl	8001888 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(L6470_RST_STBY_GPIO_Port, L6470_RST_STBY_Pin, GPIO_PIN_RESET);
 8007a02:	4622      	mov	r2, r4
 8007a04:	4630      	mov	r0, r6
 8007a06:	2120      	movs	r1, #32
 8007a08:	f7f9 ff3e 	bl	8001888 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007a0c:	4b37      	ldr	r3, [pc, #220]	; (8007aec <MX_GPIO_Init+0x168>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a0e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = B1_Pin|L6470_Flag_INT_Pin;
 8007a10:	f242 0202 	movw	r2, #8194	; 0x2002
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a14:	a905      	add	r1, sp, #20
 8007a16:	4638      	mov	r0, r7
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007a18:	e9cd 2305 	strd	r2, r3, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a1c:	f7f9 fde4 	bl	80015e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L6470_BUSY_SYNC_INT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007a20:	4b33      	ldr	r3, [pc, #204]	; (8007af0 <MX_GPIO_Init+0x16c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a22:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pin = L6470_BUSY_SYNC_INT_Pin;
 8007a24:	f04f 0801 	mov.w	r8, #1
  HAL_GPIO_Init(L6470_BUSY_SYNC_INT_GPIO_Port, &GPIO_InitStruct);
 8007a28:	4638      	mov	r0, r7
 8007a2a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007a2c:	e9cd 8305 	strd	r8, r3, [sp, #20]
  HAL_GPIO_Init(L6470_BUSY_SYNC_INT_GPIO_Port, &GPIO_InitStruct);
 8007a30:	f7f9 fdda 	bl	80015e8 <HAL_GPIO_Init>
  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = L6470_CS_Pin|LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a34:	a905      	add	r1, sp, #20
 8007a36:	4628      	mov	r0, r5
  GPIO_InitStruct.Pin = L6470_CS_Pin|LD2_Pin;
 8007a38:	2330      	movs	r3, #48	; 0x30

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a3a:	2703      	movs	r7, #3
  GPIO_InitStruct.Pin = L6470_CS_Pin|LD2_Pin;
 8007a3c:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a3e:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a42:	e9cd 8406 	strd	r8, r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a46:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a48:	f7f9 fdce 	bl	80015e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a4c:	4628      	mov	r0, r5
 8007a4e:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007a50:	2505      	movs	r5, #5
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007a52:	23c0      	movs	r3, #192	; 0xc0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a54:	e9cd 3905 	strd	r3, r9, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a58:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007a5a:	e9cd 7508 	strd	r7, r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a5e:	f7f9 fdc3 	bl	80015e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a62:	a905      	add	r1, sp, #20
 8007a64:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8007a66:	2308      	movs	r3, #8
 8007a68:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a6a:	e9cd 9406 	strd	r9, r4, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8007a6e:	e9cd 7508 	strd	r7, r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a72:	f7f9 fdb9 	bl	80015e8 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L6470_RST_STBY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(L6470_RST_STBY_GPIO_Port, &GPIO_InitStruct);
 8007a76:	a905      	add	r1, sp, #20
 8007a78:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = L6470_RST_STBY_Pin;
 8007a7a:	2220      	movs	r2, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007a7c:	2311      	movs	r3, #17
 8007a7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a82:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init(L6470_RST_STBY_GPIO_Port, &GPIO_InitStruct);
 8007a86:	f7f9 fdaf 	bl	80015e8 <HAL_GPIO_Init>
  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007a8a:	2304      	movs	r3, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007a8c:	a905      	add	r1, sp, #20
 8007a8e:	4630      	mov	r0, r6
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a90:	2212      	movs	r2, #18
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007a92:	f44f 7640 	mov.w	r6, #768	; 0x300
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007a96:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007a98:	e9cd 6205 	strd	r6, r2, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a9c:	e9cd 8707 	strd	r8, r7, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007aa0:	f7f9 fda2 	bl	80015e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	2006      	movs	r0, #6
 8007aaa:	f7f9 fa71 	bl	8000f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8007aae:	2006      	movs	r0, #6
 8007ab0:	f7f9 fab4 	bl	800101c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8007ab4:	4622      	mov	r2, r4
 8007ab6:	4629      	mov	r1, r5
 8007ab8:	2007      	movs	r0, #7
 8007aba:	f7f9 fa69 	bl	8000f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8007abe:	2007      	movs	r0, #7
 8007ac0:	f7f9 faac 	bl	800101c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8007ac4:	4622      	mov	r2, r4
 8007ac6:	4629      	mov	r1, r5
 8007ac8:	2028      	movs	r0, #40	; 0x28
 8007aca:	f7f9 fa61 	bl	8000f90 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007ace:	2028      	movs	r0, #40	; 0x28
 8007ad0:	f7f9 faa4 	bl	800101c <HAL_NVIC_EnableIRQ>

}
 8007ad4:	b00b      	add	sp, #44	; 0x2c
 8007ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ada:	bf00      	nop
 8007adc:	40023800 	.word	0x40023800
 8007ae0:	40020000 	.word	0x40020000
 8007ae4:	40020400 	.word	0x40020400
 8007ae8:	40020800 	.word	0x40020800
 8007aec:	10210000 	.word	0x10210000
 8007af0:	10110000 	.word	0x10110000

08007af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007af4:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007af6:	2400      	movs	r4, #0
{
 8007af8:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007afa:	e9cd 440b 	strd	r4, r4, [sp, #44]	; 0x2c
 8007afe:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b02:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8007b06:	e9cd 4406 	strd	r4, r4, [sp, #24]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b0a:	4b1d      	ldr	r3, [pc, #116]	; (8007b80 <SystemClock_Config+0x8c>)
 8007b0c:	9401      	str	r4, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007b0e:	940d      	str	r4, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b10:	9403      	str	r4, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b12:	6c19      	ldr	r1, [r3, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b14:	4a1b      	ldr	r2, [pc, #108]	; (8007b84 <SystemClock_Config+0x90>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8007b16:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007b1a:	6419      	str	r1, [r3, #64]	; 0x40
 8007b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b22:	9301      	str	r3, [sp, #4]
 8007b24:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b26:	9402      	str	r4, [sp, #8]
 8007b28:	6813      	ldr	r3, [r2, #0]
 8007b2a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007b2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	6813      	ldr	r3, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007b36:	940f      	str	r4, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b3c:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007b3e:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007b40:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007b42:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007b44:	f44f 71a8 	mov.w	r1, #336	; 0x150
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007b48:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007b4a:	920b      	str	r2, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007b4c:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8007b4e:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLM = 16;
 8007b50:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b52:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007b54:	2307      	movs	r3, #7
 8007b56:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007b5a:	9111      	str	r1, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007b5c:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007b5e:	950e      	str	r5, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007b60:	f7f9 feba 	bl	80018d8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b64:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007b66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007b6a:	a803      	add	r0, sp, #12
 8007b6c:	4629      	mov	r1, r5
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007b6e:	e9cd 5404 	strd	r5, r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007b72:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007b74:	9203      	str	r2, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8007b76:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007b78:	f7fa f932 	bl	8001de0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8007b7c:	b015      	add	sp, #84	; 0x54
 8007b7e:	bd30      	pop	{r4, r5, pc}
 8007b80:	40023800 	.word	0x40023800
 8007b84:	40007000 	.word	0x40007000

08007b88 <main>:
{
 8007b88:	b508      	push	{r3, lr}
  HAL_Init();
 8007b8a:	f7f9 f9b9 	bl	8000f00 <HAL_Init>
  SystemClock_Config();
 8007b8e:	f7ff ffb1 	bl	8007af4 <SystemClock_Config>
  MX_GPIO_Init();
 8007b92:	f7ff fef7 	bl	8007984 <MX_GPIO_Init>
  MX_DMA_Init();
 8007b96:	f7ff fea3 	bl	80078e0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8007b9a:	f000 f8d5 	bl	8007d48 <MX_USART2_UART_Init>
  vTraceEnable(TRC_START);
 8007b9e:	2001      	movs	r0, #1
 8007ba0:	f7fe fbb4 	bl	800630c <vTraceEnable>
  CLI_UART_Thread_Add();
 8007ba4:	f7ff fd30 	bl	8007608 <CLI_UART_Thread_Add>
  MX_FREERTOS_Init();
 8007ba8:	f7ff fed6 	bl	8007958 <MX_FREERTOS_Init>
  osKernelStart();
 8007bac:	f7fa fe4e 	bl	800284c <osKernelStart>
 8007bb0:	e7fe      	b.n	8007bb0 <main+0x28>
 8007bb2:	bf00      	nop

08007bb4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop

08007bb8 <assert_failed>:
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop

08007bbc <Ring_Buffer_Init>:

void Ring_Buffer_Init(Ring_Buffer_t* handle, char* buffer, uint16_t size)
    {
    handle->Buffer        =  buffer;
    handle->Read_Index    =  0;
    handle->Write_Index   =  0;
 8007bbc:	2300      	movs	r3, #0
    handle->Buffer        =  buffer;
 8007bbe:	6001      	str	r1, [r0, #0]
    handle->Size          =  size;
 8007bc0:	8102      	strh	r2, [r0, #8]
    handle->Write_Index   =  0;
 8007bc2:	6043      	str	r3, [r0, #4]
    }
 8007bc4:	4770      	bx	lr
 8007bc6:	bf00      	nop

08007bc8 <Ring_Buffer_Get_Char>:


uint8_t Ring_Buffer_Get_Char(Ring_Buffer_t* handle, char* data)
    {

    if (handle->Read_Index == handle->Write_Index)
 8007bc8:	88c3      	ldrh	r3, [r0, #6]
 8007bca:	8882      	ldrh	r2, [r0, #4]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d00d      	beq.n	8007bec <Ring_Buffer_Get_Char+0x24>
	{
	*data = 0;
	return 0;
	}

    *data = handle->Buffer[handle->Read_Index];
 8007bd0:	6802      	ldr	r2, [r0, #0]
 8007bd2:	5cd3      	ldrb	r3, [r2, r3]
 8007bd4:	700b      	strb	r3, [r1, #0]

    handle->Read_Index++;
 8007bd6:	88c3      	ldrh	r3, [r0, #6]

    if (handle->Read_Index == handle->Size)
 8007bd8:	8902      	ldrh	r2, [r0, #8]
    handle->Read_Index++;
 8007bda:	3301      	adds	r3, #1
 8007bdc:	b29b      	uxth	r3, r3
    if (handle->Read_Index == handle->Size)
 8007bde:	429a      	cmp	r2, r3
    handle->Read_Index++;
 8007be0:	80c3      	strh	r3, [r0, #6]
	{
	handle->Read_Index = 0;
 8007be2:	bf04      	itt	eq
 8007be4:	2300      	moveq	r3, #0
 8007be6:	80c3      	strheq	r3, [r0, #6]
	}

    return 1;
 8007be8:	2001      	movs	r0, #1
    }
 8007bea:	4770      	bx	lr
	*data = 0;
 8007bec:	2000      	movs	r0, #0
 8007bee:	7008      	strb	r0, [r1, #0]
	return 0;
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop

08007bf4 <Ring_Buffer_Flush>:
    }


void Ring_Buffer_Flush(Ring_Buffer_t* handle)
    {
    handle->Read_Index = handle->Write_Index;
 8007bf4:	8883      	ldrh	r3, [r0, #4]
 8007bf6:	80c3      	strh	r3, [r0, #6]
    }
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop

08007bfc <Ring_Buffer_Get_Count>:


uint16_t Ring_Buffer_Get_Count(Ring_Buffer_t* handle)
    {
    if (handle->Write_Index >= handle->Read_Index)
 8007bfc:	8883      	ldrh	r3, [r0, #4]
 8007bfe:	88c2      	ldrh	r2, [r0, #6]
 8007c00:	4293      	cmp	r3, r2
	{
	return (handle->Write_Index - handle->Read_Index);
	}
    return (handle->Size - (handle->Read_Index - handle->Write_Index ));
 8007c02:	bf3b      	ittet	cc
 8007c04:	8900      	ldrhcc	r0, [r0, #8]
 8007c06:	18c0      	addcc	r0, r0, r3
	return (handle->Write_Index - handle->Read_Index);
 8007c08:	1a98      	subcs	r0, r3, r2
    return (handle->Size - (handle->Read_Index - handle->Write_Index ));
 8007c0a:	1a80      	subcc	r0, r0, r2
 8007c0c:	b280      	uxth	r0, r0
    }
 8007c0e:	4770      	bx	lr

08007c10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007c10:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007c12:	4b0e      	ldr	r3, [pc, #56]	; (8007c4c <HAL_MspInit+0x3c>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	9200      	str	r2, [sp, #0]
 8007c18:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007c1a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8007c1e:	6459      	str	r1, [r3, #68]	; 0x44
 8007c20:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8007c22:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8007c26:	9100      	str	r1, [sp, #0]
 8007c28:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007c2a:	9201      	str	r2, [sp, #4]
 8007c2c:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007c2e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8007c32:	6419      	str	r1, [r3, #64]	; 0x40
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c3a:	9301      	str	r3, [sp, #4]
 8007c3c:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007c3e:	210f      	movs	r1, #15
 8007c40:	f06f 0001 	mvn.w	r0, #1

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007c44:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8007c46:	f7f9 b9a3 	b.w	8000f90 <HAL_NVIC_SetPriority>
 8007c4a:	bf00      	nop
 8007c4c:	40023800 	.word	0x40023800

08007c50 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop

08007c54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c54:	e7fe      	b.n	8007c54 <HardFault_Handler>
 8007c56:	bf00      	nop

08007c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c58:	e7fe      	b.n	8007c58 <MemManage_Handler>
 8007c5a:	bf00      	nop

08007c5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c5c:	e7fe      	b.n	8007c5c <BusFault_Handler>
 8007c5e:	bf00      	nop

08007c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c60:	e7fe      	b.n	8007c60 <UsageFault_Handler>
 8007c62:	bf00      	nop

08007c64 <DebugMon_Handler>:
 8007c64:	4770      	bx	lr
 8007c66:	bf00      	nop

08007c68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c68:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c6a:	f7f9 f963 	bl	8000f34 <HAL_IncTick>
  osSystickHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  osSystickHandler();
 8007c72:	f7fa be0f 	b.w	8002894 <osSystickHandler>
 8007c76:	bf00      	nop

08007c78 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8007c78:	2001      	movs	r0, #1
 8007c7a:	f7f9 be21 	b.w	80018c0 <HAL_GPIO_EXTI_IRQHandler>
 8007c7e:	bf00      	nop

08007c80 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8007c80:	2002      	movs	r0, #2
 8007c82:	f7f9 be1d 	b.w	80018c0 <HAL_GPIO_EXTI_IRQHandler>
 8007c86:	bf00      	nop

08007c88 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007c88:	4801      	ldr	r0, [pc, #4]	; (8007c90 <DMA1_Stream5_IRQHandler+0x8>)
 8007c8a:	f7f9 bbd7 	b.w	800143c <HAL_DMA_IRQHandler>
 8007c8e:	bf00      	nop
 8007c90:	2000c088 	.word	0x2000c088

08007c94 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8007c94:	4801      	ldr	r0, [pc, #4]	; (8007c9c <DMA1_Stream6_IRQHandler+0x8>)
 8007c96:	f7f9 bbd1 	b.w	800143c <HAL_DMA_IRQHandler>
 8007c9a:	bf00      	nop
 8007c9c:	2000c0e8 	.word	0x2000c0e8

08007ca0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8007ca0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8007ca2:	4803      	ldr	r0, [pc, #12]	; (8007cb0 <USART2_IRQHandler+0x10>)
 8007ca4:	f7fa fd08 	bl	80026b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  CLI_UART_RX_ISR();
  /* USER CODE END USART2_IRQn 1 */
}
 8007ca8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  CLI_UART_RX_ISR();
 8007cac:	f7ff bdf4 	b.w	8007898 <CLI_UART_RX_ISR>
 8007cb0:	2000c148 	.word	0x2000c148

08007cb4 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8007cb4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007cb8:	f7f9 be02 	b.w	80018c0 <HAL_GPIO_EXTI_IRQHandler>

08007cbc <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007cbc:	4a0c      	ldr	r2, [pc, #48]	; (8007cf0 <_sbrk+0x34>)
{
 8007cbe:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8007cc0:	6813      	ldr	r3, [r2, #0]
 8007cc2:	b133      	cbz	r3, 8007cd2 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8007cc4:	4418      	add	r0, r3
 8007cc6:	4669      	mov	r1, sp
 8007cc8:	4288      	cmp	r0, r1
 8007cca:	d808      	bhi.n	8007cde <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8007ccc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8007cd2:	4b08      	ldr	r3, [pc, #32]	; (8007cf4 <_sbrk+0x38>)
 8007cd4:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8007cd6:	4418      	add	r0, r3
 8007cd8:	4669      	mov	r1, sp
 8007cda:	4288      	cmp	r0, r1
 8007cdc:	d9f6      	bls.n	8007ccc <_sbrk+0x10>
		errno = ENOMEM;
 8007cde:	f000 f8fd 	bl	8007edc <__errno>
 8007ce2:	230c      	movs	r3, #12
 8007ce4:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8007ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	bd08      	pop	{r3, pc}
 8007cee:	bf00      	nop
 8007cf0:	20001110 	.word	0x20001110
 8007cf4:	2000c198 	.word	0x2000c198

08007cf8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007cf8:	4910      	ldr	r1, [pc, #64]	; (8007d3c <SystemInit+0x44>)
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8007cfa:	4b11      	ldr	r3, [pc, #68]	; (8007d40 <SystemInit+0x48>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007cfc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8007d00:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8007d04:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007d06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= (uint32_t)0x00000001;
 8007d0a:	681a      	ldr	r2, [r3, #0]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8007d0c:	4c0d      	ldr	r4, [pc, #52]	; (8007d44 <SystemInit+0x4c>)
  RCC->CFGR = 0x00000000;
 8007d0e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8007d10:	f042 0201 	orr.w	r2, r2, #1
 8007d14:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8007d16:	6098      	str	r0, [r3, #8]
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8007d1e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007d22:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x24003010;
 8007d24:	605c      	str	r4, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007d26:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d28:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007d2c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007d30:	601a      	str	r2, [r3, #0]
  RCC->CIR = 0x00000000;
 8007d32:	60d8      	str	r0, [r3, #12]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007d34:	608c      	str	r4, [r1, #8]
#endif
}
 8007d36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	e000ed00 	.word	0xe000ed00
 8007d40:	40023800 	.word	0x40023800
 8007d44:	24003010 	.word	0x24003010

08007d48 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{

  huart2.Instance = USART2;
 8007d48:	4b0b      	ldr	r3, [pc, #44]	; (8007d78 <MX_USART2_UART_Init+0x30>)
 8007d4a:	4a0c      	ldr	r2, [pc, #48]	; (8007d7c <MX_USART2_UART_Init+0x34>)
{
 8007d4c:	b510      	push	{r4, lr}
  huart2.Init.BaudRate = 38400;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007d4e:	210c      	movs	r1, #12
  huart2.Instance = USART2;
 8007d50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8007d52:	f44f 4416 	mov.w	r4, #38400	; 0x9600
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007d56:	2200      	movs	r2, #0
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007d58:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 38400;
 8007d5a:	605c      	str	r4, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007d5c:	6159      	str	r1, [r3, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007d5e:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007d62:	611a      	str	r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d64:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007d68:	f7fa f960 	bl	800202c <HAL_UART_Init>
 8007d6c:	b900      	cbnz	r0, 8007d70 <MX_USART2_UART_Init+0x28>
  {
    Error_Handler();
  }

}
 8007d6e:	bd10      	pop	{r4, pc}
 8007d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8007d74:	f7ff bf1e 	b.w	8007bb4 <Error_Handler>
 8007d78:	2000c148 	.word	0x2000c148
 8007d7c:	40004400 	.word	0x40004400

08007d80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007d80:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8007d82:	6802      	ldr	r2, [r0, #0]
 8007d84:	4b38      	ldr	r3, [pc, #224]	; (8007e68 <HAL_UART_MspInit+0xe8>)
{
 8007d86:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d88:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART2)
 8007d8a:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d8c:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8007d90:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8007d94:	9407      	str	r4, [sp, #28]
  if(uartHandle->Instance==USART2)
 8007d96:	d001      	beq.n	8007d9c <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007d98:	b008      	add	sp, #32
 8007d9a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8007d9c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8007da0:	9401      	str	r4, [sp, #4]
 8007da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007da4:	4d31      	ldr	r5, [pc, #196]	; (8007e6c <HAL_UART_MspInit+0xec>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8007da6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8007daa:	641a      	str	r2, [r3, #64]	; 0x40
 8007dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007dae:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8007db2:	9201      	str	r2, [sp, #4]
 8007db4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007db6:	9402      	str	r4, [sp, #8]
 8007db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dba:	f042 0201 	orr.w	r2, r2, #1
 8007dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8007dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007dc8:	230c      	movs	r3, #12
 8007dca:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dcc:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dce:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dd0:	9304      	str	r3, [sp, #16]
 8007dd2:	4606      	mov	r6, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007dd4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dd6:	4826      	ldr	r0, [pc, #152]	; (8007e70 <HAL_UART_MspInit+0xf0>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dd8:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007dda:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ddc:	f7f9 fc04 	bl	80015e8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007de0:	4b24      	ldr	r3, [pc, #144]	; (8007e74 <HAL_UART_MspInit+0xf4>)
 8007de2:	602b      	str	r3, [r5, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007de4:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007de8:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8007dec:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007df0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007df4:	6068      	str	r0, [r5, #4]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007df6:	4628      	mov	r0, r5
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007df8:	60ac      	str	r4, [r5, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007dfa:	60ec      	str	r4, [r5, #12]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007dfc:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007e00:	626c      	str	r4, [r5, #36]	; 0x24
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007e02:	6129      	str	r1, [r5, #16]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007e04:	e9c5 2307 	strd	r2, r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007e08:	f7f9 f936 	bl	8001078 <HAL_DMA_Init>
 8007e0c:	bb28      	cbnz	r0, 8007e5a <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007e0e:	4c1a      	ldr	r4, [pc, #104]	; (8007e78 <HAL_UART_MspInit+0xf8>)
 8007e10:	4a1a      	ldr	r2, [pc, #104]	; (8007e7c <HAL_UART_MspInit+0xfc>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007e12:	6375      	str	r5, [r6, #52]	; 0x34
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007e14:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e18:	2340      	movs	r3, #64	; 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8007e1e:	6022      	str	r2, [r4, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8007e20:	6060      	str	r0, [r4, #4]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007e22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e26:	60a3      	str	r3, [r4, #8]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007e28:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e2a:	2300      	movs	r3, #0
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007e2c:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007e2e:	6121      	str	r1, [r4, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007e30:	6222      	str	r2, [r4, #32]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e32:	60e3      	str	r3, [r4, #12]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e34:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8007e38:	61e3      	str	r3, [r4, #28]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007e3a:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8007e3c:	f7f9 f91c 	bl	8001078 <HAL_DMA_Init>
 8007e40:	b970      	cbnz	r0, 8007e60 <HAL_UART_MspInit+0xe0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8007e42:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8007e44:	2200      	movs	r2, #0
 8007e46:	2105      	movs	r1, #5
 8007e48:	2026      	movs	r0, #38	; 0x26
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8007e4a:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8007e4c:	f7f9 f8a0 	bl	8000f90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8007e50:	2026      	movs	r0, #38	; 0x26
 8007e52:	f7f9 f8e3 	bl	800101c <HAL_NVIC_EnableIRQ>
}
 8007e56:	b008      	add	sp, #32
 8007e58:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8007e5a:	f7ff feab 	bl	8007bb4 <Error_Handler>
 8007e5e:	e7d6      	b.n	8007e0e <HAL_UART_MspInit+0x8e>
      Error_Handler();
 8007e60:	f7ff fea8 	bl	8007bb4 <Error_Handler>
 8007e64:	e7ed      	b.n	8007e42 <HAL_UART_MspInit+0xc2>
 8007e66:	bf00      	nop
 8007e68:	40004400 	.word	0x40004400
 8007e6c:	2000c088 	.word	0x2000c088
 8007e70:	40020000 	.word	0x40020000
 8007e74:	40026088 	.word	0x40026088
 8007e78:	2000c0e8 	.word	0x2000c0e8
 8007e7c:	400260a0 	.word	0x400260a0

08007e80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007e80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007eb8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007e84:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007e86:	e003      	b.n	8007e90 <LoopCopyDataInit>

08007e88 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007e88:	4b0c      	ldr	r3, [pc, #48]	; (8007ebc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007e8a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007e8c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007e8e:	3104      	adds	r1, #4

08007e90 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007e90:	480b      	ldr	r0, [pc, #44]	; (8007ec0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007e92:	4b0c      	ldr	r3, [pc, #48]	; (8007ec4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007e94:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007e96:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007e98:	d3f6      	bcc.n	8007e88 <CopyDataInit>
  ldr  r2, =_sbss
 8007e9a:	4a0b      	ldr	r2, [pc, #44]	; (8007ec8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007e9c:	e002      	b.n	8007ea4 <LoopFillZerobss>

08007e9e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007e9e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007ea0:	f842 3b04 	str.w	r3, [r2], #4

08007ea4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007ea4:	4b09      	ldr	r3, [pc, #36]	; (8007ecc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007ea6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007ea8:	d3f9      	bcc.n	8007e9e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007eaa:	f7ff ff25 	bl	8007cf8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007eae:	f000 f81b 	bl	8007ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007eb2:	f7ff fe69 	bl	8007b88 <main>
  bx  lr    
 8007eb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007eb8:	20017fff 	.word	0x20017fff
  ldr  r3, =_sidata
 8007ebc:	0800d8ec 	.word	0x0800d8ec
  ldr  r0, =_sdata
 8007ec0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007ec4:	20000a44 	.word	0x20000a44
  ldr  r2, =_sbss
 8007ec8:	20000a44 	.word	0x20000a44
  ldr  r3, = _ebss
 8007ecc:	2000c198 	.word	0x2000c198

08007ed0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007ed0:	e7fe      	b.n	8007ed0 <ADC_IRQHandler>

08007ed2 <atoi>:
 8007ed2:	220a      	movs	r2, #10
 8007ed4:	2100      	movs	r1, #0
 8007ed6:	f000 b90b 	b.w	80080f0 <strtol>
	...

08007edc <__errno>:
 8007edc:	4b01      	ldr	r3, [pc, #4]	; (8007ee4 <__errno+0x8>)
 8007ede:	6818      	ldr	r0, [r3, #0]
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20000094 	.word	0x20000094

08007ee8 <__libc_init_array>:
 8007ee8:	b570      	push	{r4, r5, r6, lr}
 8007eea:	4e0d      	ldr	r6, [pc, #52]	; (8007f20 <__libc_init_array+0x38>)
 8007eec:	4c0d      	ldr	r4, [pc, #52]	; (8007f24 <__libc_init_array+0x3c>)
 8007eee:	1ba4      	subs	r4, r4, r6
 8007ef0:	10a4      	asrs	r4, r4, #2
 8007ef2:	2500      	movs	r5, #0
 8007ef4:	42a5      	cmp	r5, r4
 8007ef6:	d109      	bne.n	8007f0c <__libc_init_array+0x24>
 8007ef8:	4e0b      	ldr	r6, [pc, #44]	; (8007f28 <__libc_init_array+0x40>)
 8007efa:	4c0c      	ldr	r4, [pc, #48]	; (8007f2c <__libc_init_array+0x44>)
 8007efc:	f004 fb7e 	bl	800c5fc <_init>
 8007f00:	1ba4      	subs	r4, r4, r6
 8007f02:	10a4      	asrs	r4, r4, #2
 8007f04:	2500      	movs	r5, #0
 8007f06:	42a5      	cmp	r5, r4
 8007f08:	d105      	bne.n	8007f16 <__libc_init_array+0x2e>
 8007f0a:	bd70      	pop	{r4, r5, r6, pc}
 8007f0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f10:	4798      	blx	r3
 8007f12:	3501      	adds	r5, #1
 8007f14:	e7ee      	b.n	8007ef4 <__libc_init_array+0xc>
 8007f16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f1a:	4798      	blx	r3
 8007f1c:	3501      	adds	r5, #1
 8007f1e:	e7f2      	b.n	8007f06 <__libc_init_array+0x1e>
 8007f20:	0800d8e0 	.word	0x0800d8e0
 8007f24:	0800d8e0 	.word	0x0800d8e0
 8007f28:	0800d8e0 	.word	0x0800d8e0
 8007f2c:	0800d8e8 	.word	0x0800d8e8

08007f30 <memcpy>:
 8007f30:	b510      	push	{r4, lr}
 8007f32:	1e43      	subs	r3, r0, #1
 8007f34:	440a      	add	r2, r1
 8007f36:	4291      	cmp	r1, r2
 8007f38:	d100      	bne.n	8007f3c <memcpy+0xc>
 8007f3a:	bd10      	pop	{r4, pc}
 8007f3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f44:	e7f7      	b.n	8007f36 <memcpy+0x6>

08007f46 <memset>:
 8007f46:	4402      	add	r2, r0
 8007f48:	4603      	mov	r3, r0
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d100      	bne.n	8007f50 <memset+0xa>
 8007f4e:	4770      	bx	lr
 8007f50:	f803 1b01 	strb.w	r1, [r3], #1
 8007f54:	e7f9      	b.n	8007f4a <memset+0x4>
	...

08007f58 <sprintf>:
 8007f58:	b40e      	push	{r1, r2, r3}
 8007f5a:	b500      	push	{lr}
 8007f5c:	b09c      	sub	sp, #112	; 0x70
 8007f5e:	ab1d      	add	r3, sp, #116	; 0x74
 8007f60:	9002      	str	r0, [sp, #8]
 8007f62:	9006      	str	r0, [sp, #24]
 8007f64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f68:	4809      	ldr	r0, [pc, #36]	; (8007f90 <sprintf+0x38>)
 8007f6a:	9107      	str	r1, [sp, #28]
 8007f6c:	9104      	str	r1, [sp, #16]
 8007f6e:	4909      	ldr	r1, [pc, #36]	; (8007f94 <sprintf+0x3c>)
 8007f70:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f74:	9105      	str	r1, [sp, #20]
 8007f76:	6800      	ldr	r0, [r0, #0]
 8007f78:	9301      	str	r3, [sp, #4]
 8007f7a:	a902      	add	r1, sp, #8
 8007f7c:	f000 f8d0 	bl	8008120 <_svfprintf_r>
 8007f80:	9b02      	ldr	r3, [sp, #8]
 8007f82:	2200      	movs	r2, #0
 8007f84:	701a      	strb	r2, [r3, #0]
 8007f86:	b01c      	add	sp, #112	; 0x70
 8007f88:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f8c:	b003      	add	sp, #12
 8007f8e:	4770      	bx	lr
 8007f90:	20000094 	.word	0x20000094
 8007f94:	ffff0208 	.word	0xffff0208

08007f98 <stpcpy>:
 8007f98:	4603      	mov	r3, r0
 8007f9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f803 2b01 	strb.w	r2, [r3], #1
 8007fa4:	2a00      	cmp	r2, #0
 8007fa6:	d1f8      	bne.n	8007f9a <stpcpy+0x2>
 8007fa8:	4770      	bx	lr

08007faa <strncmp>:
 8007faa:	b510      	push	{r4, lr}
 8007fac:	b16a      	cbz	r2, 8007fca <strncmp+0x20>
 8007fae:	3901      	subs	r1, #1
 8007fb0:	1884      	adds	r4, r0, r2
 8007fb2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007fb6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d103      	bne.n	8007fc6 <strncmp+0x1c>
 8007fbe:	42a0      	cmp	r0, r4
 8007fc0:	d001      	beq.n	8007fc6 <strncmp+0x1c>
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d1f5      	bne.n	8007fb2 <strncmp+0x8>
 8007fc6:	1a98      	subs	r0, r3, r2
 8007fc8:	bd10      	pop	{r4, pc}
 8007fca:	4610      	mov	r0, r2
 8007fcc:	e7fc      	b.n	8007fc8 <strncmp+0x1e>

08007fce <strncpy>:
 8007fce:	b570      	push	{r4, r5, r6, lr}
 8007fd0:	3901      	subs	r1, #1
 8007fd2:	4604      	mov	r4, r0
 8007fd4:	b902      	cbnz	r2, 8007fd8 <strncpy+0xa>
 8007fd6:	bd70      	pop	{r4, r5, r6, pc}
 8007fd8:	4623      	mov	r3, r4
 8007fda:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8007fde:	f803 5b01 	strb.w	r5, [r3], #1
 8007fe2:	1e56      	subs	r6, r2, #1
 8007fe4:	b92d      	cbnz	r5, 8007ff2 <strncpy+0x24>
 8007fe6:	4414      	add	r4, r2
 8007fe8:	42a3      	cmp	r3, r4
 8007fea:	d0f4      	beq.n	8007fd6 <strncpy+0x8>
 8007fec:	f803 5b01 	strb.w	r5, [r3], #1
 8007ff0:	e7fa      	b.n	8007fe8 <strncpy+0x1a>
 8007ff2:	461c      	mov	r4, r3
 8007ff4:	4632      	mov	r2, r6
 8007ff6:	e7ed      	b.n	8007fd4 <strncpy+0x6>

08007ff8 <_strtol_l.isra.0>:
 8007ff8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffc:	4680      	mov	r8, r0
 8007ffe:	4689      	mov	r9, r1
 8008000:	4692      	mov	sl, r2
 8008002:	461e      	mov	r6, r3
 8008004:	460f      	mov	r7, r1
 8008006:	463d      	mov	r5, r7
 8008008:	9808      	ldr	r0, [sp, #32]
 800800a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800800e:	f002 fa0f 	bl	800a430 <__locale_ctype_ptr_l>
 8008012:	4420      	add	r0, r4
 8008014:	7843      	ldrb	r3, [r0, #1]
 8008016:	f013 0308 	ands.w	r3, r3, #8
 800801a:	d132      	bne.n	8008082 <_strtol_l.isra.0+0x8a>
 800801c:	2c2d      	cmp	r4, #45	; 0x2d
 800801e:	d132      	bne.n	8008086 <_strtol_l.isra.0+0x8e>
 8008020:	787c      	ldrb	r4, [r7, #1]
 8008022:	1cbd      	adds	r5, r7, #2
 8008024:	2201      	movs	r2, #1
 8008026:	2e00      	cmp	r6, #0
 8008028:	d05d      	beq.n	80080e6 <_strtol_l.isra.0+0xee>
 800802a:	2e10      	cmp	r6, #16
 800802c:	d109      	bne.n	8008042 <_strtol_l.isra.0+0x4a>
 800802e:	2c30      	cmp	r4, #48	; 0x30
 8008030:	d107      	bne.n	8008042 <_strtol_l.isra.0+0x4a>
 8008032:	782b      	ldrb	r3, [r5, #0]
 8008034:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008038:	2b58      	cmp	r3, #88	; 0x58
 800803a:	d14f      	bne.n	80080dc <_strtol_l.isra.0+0xe4>
 800803c:	786c      	ldrb	r4, [r5, #1]
 800803e:	2610      	movs	r6, #16
 8008040:	3502      	adds	r5, #2
 8008042:	2a00      	cmp	r2, #0
 8008044:	bf14      	ite	ne
 8008046:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800804a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800804e:	2700      	movs	r7, #0
 8008050:	fbb1 fcf6 	udiv	ip, r1, r6
 8008054:	4638      	mov	r0, r7
 8008056:	fb06 1e1c 	mls	lr, r6, ip, r1
 800805a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800805e:	2b09      	cmp	r3, #9
 8008060:	d817      	bhi.n	8008092 <_strtol_l.isra.0+0x9a>
 8008062:	461c      	mov	r4, r3
 8008064:	42a6      	cmp	r6, r4
 8008066:	dd23      	ble.n	80080b0 <_strtol_l.isra.0+0xb8>
 8008068:	1c7b      	adds	r3, r7, #1
 800806a:	d007      	beq.n	800807c <_strtol_l.isra.0+0x84>
 800806c:	4584      	cmp	ip, r0
 800806e:	d31c      	bcc.n	80080aa <_strtol_l.isra.0+0xb2>
 8008070:	d101      	bne.n	8008076 <_strtol_l.isra.0+0x7e>
 8008072:	45a6      	cmp	lr, r4
 8008074:	db19      	blt.n	80080aa <_strtol_l.isra.0+0xb2>
 8008076:	fb00 4006 	mla	r0, r0, r6, r4
 800807a:	2701      	movs	r7, #1
 800807c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008080:	e7eb      	b.n	800805a <_strtol_l.isra.0+0x62>
 8008082:	462f      	mov	r7, r5
 8008084:	e7bf      	b.n	8008006 <_strtol_l.isra.0+0xe>
 8008086:	2c2b      	cmp	r4, #43	; 0x2b
 8008088:	bf04      	itt	eq
 800808a:	1cbd      	addeq	r5, r7, #2
 800808c:	787c      	ldrbeq	r4, [r7, #1]
 800808e:	461a      	mov	r2, r3
 8008090:	e7c9      	b.n	8008026 <_strtol_l.isra.0+0x2e>
 8008092:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008096:	2b19      	cmp	r3, #25
 8008098:	d801      	bhi.n	800809e <_strtol_l.isra.0+0xa6>
 800809a:	3c37      	subs	r4, #55	; 0x37
 800809c:	e7e2      	b.n	8008064 <_strtol_l.isra.0+0x6c>
 800809e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80080a2:	2b19      	cmp	r3, #25
 80080a4:	d804      	bhi.n	80080b0 <_strtol_l.isra.0+0xb8>
 80080a6:	3c57      	subs	r4, #87	; 0x57
 80080a8:	e7dc      	b.n	8008064 <_strtol_l.isra.0+0x6c>
 80080aa:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80080ae:	e7e5      	b.n	800807c <_strtol_l.isra.0+0x84>
 80080b0:	1c7b      	adds	r3, r7, #1
 80080b2:	d108      	bne.n	80080c6 <_strtol_l.isra.0+0xce>
 80080b4:	2322      	movs	r3, #34	; 0x22
 80080b6:	f8c8 3000 	str.w	r3, [r8]
 80080ba:	4608      	mov	r0, r1
 80080bc:	f1ba 0f00 	cmp.w	sl, #0
 80080c0:	d107      	bne.n	80080d2 <_strtol_l.isra.0+0xda>
 80080c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080c6:	b102      	cbz	r2, 80080ca <_strtol_l.isra.0+0xd2>
 80080c8:	4240      	negs	r0, r0
 80080ca:	f1ba 0f00 	cmp.w	sl, #0
 80080ce:	d0f8      	beq.n	80080c2 <_strtol_l.isra.0+0xca>
 80080d0:	b10f      	cbz	r7, 80080d6 <_strtol_l.isra.0+0xde>
 80080d2:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 80080d6:	f8ca 9000 	str.w	r9, [sl]
 80080da:	e7f2      	b.n	80080c2 <_strtol_l.isra.0+0xca>
 80080dc:	2430      	movs	r4, #48	; 0x30
 80080de:	2e00      	cmp	r6, #0
 80080e0:	d1af      	bne.n	8008042 <_strtol_l.isra.0+0x4a>
 80080e2:	2608      	movs	r6, #8
 80080e4:	e7ad      	b.n	8008042 <_strtol_l.isra.0+0x4a>
 80080e6:	2c30      	cmp	r4, #48	; 0x30
 80080e8:	d0a3      	beq.n	8008032 <_strtol_l.isra.0+0x3a>
 80080ea:	260a      	movs	r6, #10
 80080ec:	e7a9      	b.n	8008042 <_strtol_l.isra.0+0x4a>
	...

080080f0 <strtol>:
 80080f0:	4b08      	ldr	r3, [pc, #32]	; (8008114 <strtol+0x24>)
 80080f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080f4:	681c      	ldr	r4, [r3, #0]
 80080f6:	4d08      	ldr	r5, [pc, #32]	; (8008118 <strtol+0x28>)
 80080f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bf08      	it	eq
 80080fe:	462b      	moveq	r3, r5
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4613      	mov	r3, r2
 8008104:	460a      	mov	r2, r1
 8008106:	4601      	mov	r1, r0
 8008108:	4620      	mov	r0, r4
 800810a:	f7ff ff75 	bl	8007ff8 <_strtol_l.isra.0>
 800810e:	b003      	add	sp, #12
 8008110:	bd30      	pop	{r4, r5, pc}
 8008112:	bf00      	nop
 8008114:	20000094 	.word	0x20000094
 8008118:	200004c4 	.word	0x200004c4
 800811c:	00000000 	.word	0x00000000

08008120 <_svfprintf_r>:
 8008120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	b0d3      	sub	sp, #332	; 0x14c
 8008126:	4688      	mov	r8, r1
 8008128:	4693      	mov	fp, r2
 800812a:	461e      	mov	r6, r3
 800812c:	9003      	str	r0, [sp, #12]
 800812e:	f002 f983 	bl	800a438 <_localeconv_r>
 8008132:	6803      	ldr	r3, [r0, #0]
 8008134:	9316      	str	r3, [sp, #88]	; 0x58
 8008136:	4618      	mov	r0, r3
 8008138:	f7f8 f852 	bl	80001e0 <strlen>
 800813c:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008140:	900d      	str	r0, [sp, #52]	; 0x34
 8008142:	0618      	lsls	r0, r3, #24
 8008144:	d518      	bpl.n	8008178 <_svfprintf_r+0x58>
 8008146:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800814a:	b9ab      	cbnz	r3, 8008178 <_svfprintf_r+0x58>
 800814c:	2140      	movs	r1, #64	; 0x40
 800814e:	9803      	ldr	r0, [sp, #12]
 8008150:	f002 f982 	bl	800a458 <_malloc_r>
 8008154:	f8c8 0000 	str.w	r0, [r8]
 8008158:	f8c8 0010 	str.w	r0, [r8, #16]
 800815c:	b948      	cbnz	r0, 8008172 <_svfprintf_r+0x52>
 800815e:	9a03      	ldr	r2, [sp, #12]
 8008160:	230c      	movs	r3, #12
 8008162:	6013      	str	r3, [r2, #0]
 8008164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008168:	930e      	str	r3, [sp, #56]	; 0x38
 800816a:	980e      	ldr	r0, [sp, #56]	; 0x38
 800816c:	b053      	add	sp, #332	; 0x14c
 800816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008172:	2340      	movs	r3, #64	; 0x40
 8008174:	f8c8 3014 	str.w	r3, [r8, #20]
 8008178:	ed9f 7bc9 	vldr	d7, [pc, #804]	; 80084a0 <_svfprintf_r+0x380>
 800817c:	2300      	movs	r3, #0
 800817e:	e9cd 3327 	strd	r3, r3, [sp, #156]	; 0x9c
 8008182:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008186:	e9cd 3317 	strd	r3, r3, [sp, #92]	; 0x5c
 800818a:	ac29      	add	r4, sp, #164	; 0xa4
 800818c:	9426      	str	r4, [sp, #152]	; 0x98
 800818e:	9304      	str	r3, [sp, #16]
 8008190:	9309      	str	r3, [sp, #36]	; 0x24
 8008192:	9312      	str	r3, [sp, #72]	; 0x48
 8008194:	9319      	str	r3, [sp, #100]	; 0x64
 8008196:	930e      	str	r3, [sp, #56]	; 0x38
 8008198:	465d      	mov	r5, fp
 800819a:	462b      	mov	r3, r5
 800819c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081a0:	b112      	cbz	r2, 80081a8 <_svfprintf_r+0x88>
 80081a2:	2a25      	cmp	r2, #37	; 0x25
 80081a4:	f040 80e4 	bne.w	8008370 <_svfprintf_r+0x250>
 80081a8:	ebb5 070b 	subs.w	r7, r5, fp
 80081ac:	d00e      	beq.n	80081cc <_svfprintf_r+0xac>
 80081ae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80081b0:	443b      	add	r3, r7
 80081b2:	9328      	str	r3, [sp, #160]	; 0xa0
 80081b4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80081b6:	3301      	adds	r3, #1
 80081b8:	2b07      	cmp	r3, #7
 80081ba:	e9c4 b700 	strd	fp, r7, [r4]
 80081be:	9327      	str	r3, [sp, #156]	; 0x9c
 80081c0:	f300 80d8 	bgt.w	8008374 <_svfprintf_r+0x254>
 80081c4:	3408      	adds	r4, #8
 80081c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081c8:	443b      	add	r3, r7
 80081ca:	930e      	str	r3, [sp, #56]	; 0x38
 80081cc:	782b      	ldrb	r3, [r5, #0]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f001 81b4 	beq.w	800953c <_svfprintf_r+0x141c>
 80081d4:	1c6b      	adds	r3, r5, #1
 80081d6:	930c      	str	r3, [sp, #48]	; 0x30
 80081d8:	2300      	movs	r3, #0
 80081da:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80081de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80081e2:	930f      	str	r3, [sp, #60]	; 0x3c
 80081e4:	469a      	mov	sl, r3
 80081e6:	270a      	movs	r7, #10
 80081e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	9306      	str	r3, [sp, #24]
 80081ee:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081f0:	3301      	adds	r3, #1
 80081f2:	930c      	str	r3, [sp, #48]	; 0x30
 80081f4:	9b06      	ldr	r3, [sp, #24]
 80081f6:	3b20      	subs	r3, #32
 80081f8:	2b5a      	cmp	r3, #90	; 0x5a
 80081fa:	f200 8624 	bhi.w	8008e46 <_svfprintf_r+0xd26>
 80081fe:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <_svfprintf_r+0xe4>)
 8008200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008204:	08008407 	.word	0x08008407
 8008208:	08008e47 	.word	0x08008e47
 800820c:	08008e47 	.word	0x08008e47
 8008210:	08008419 	.word	0x08008419
 8008214:	08008e47 	.word	0x08008e47
 8008218:	08008e47 	.word	0x08008e47
 800821c:	08008e47 	.word	0x08008e47
 8008220:	080083cd 	.word	0x080083cd
 8008224:	08008e47 	.word	0x08008e47
 8008228:	08008e47 	.word	0x08008e47
 800822c:	0800841f 	.word	0x0800841f
 8008230:	08008437 	.word	0x08008437
 8008234:	08008e47 	.word	0x08008e47
 8008238:	08008431 	.word	0x08008431
 800823c:	0800843b 	.word	0x0800843b
 8008240:	08008e47 	.word	0x08008e47
 8008244:	0800846f 	.word	0x0800846f
 8008248:	08008475 	.word	0x08008475
 800824c:	08008475 	.word	0x08008475
 8008250:	08008475 	.word	0x08008475
 8008254:	08008475 	.word	0x08008475
 8008258:	08008475 	.word	0x08008475
 800825c:	08008475 	.word	0x08008475
 8008260:	08008475 	.word	0x08008475
 8008264:	08008475 	.word	0x08008475
 8008268:	08008475 	.word	0x08008475
 800826c:	08008e47 	.word	0x08008e47
 8008270:	08008e47 	.word	0x08008e47
 8008274:	08008e47 	.word	0x08008e47
 8008278:	08008e47 	.word	0x08008e47
 800827c:	08008e47 	.word	0x08008e47
 8008280:	08008e47 	.word	0x08008e47
 8008284:	08008e47 	.word	0x08008e47
 8008288:	08008577 	.word	0x08008577
 800828c:	08008e47 	.word	0x08008e47
 8008290:	080084e1 	.word	0x080084e1
 8008294:	08008503 	.word	0x08008503
 8008298:	08008577 	.word	0x08008577
 800829c:	08008577 	.word	0x08008577
 80082a0:	08008577 	.word	0x08008577
 80082a4:	08008e47 	.word	0x08008e47
 80082a8:	08008e47 	.word	0x08008e47
 80082ac:	08008e47 	.word	0x08008e47
 80082b0:	08008e47 	.word	0x08008e47
 80082b4:	08008495 	.word	0x08008495
 80082b8:	08008e47 	.word	0x08008e47
 80082bc:	08008e47 	.word	0x08008e47
 80082c0:	08008a49 	.word	0x08008a49
 80082c4:	08008e47 	.word	0x08008e47
 80082c8:	08008e47 	.word	0x08008e47
 80082cc:	08008e47 	.word	0x08008e47
 80082d0:	08008ad5 	.word	0x08008ad5
 80082d4:	08008e47 	.word	0x08008e47
 80082d8:	08008cb7 	.word	0x08008cb7
 80082dc:	08008e47 	.word	0x08008e47
 80082e0:	08008e47 	.word	0x08008e47
 80082e4:	0800838d 	.word	0x0800838d
 80082e8:	08008e47 	.word	0x08008e47
 80082ec:	08008e47 	.word	0x08008e47
 80082f0:	08008e47 	.word	0x08008e47
 80082f4:	08008e47 	.word	0x08008e47
 80082f8:	08008e47 	.word	0x08008e47
 80082fc:	08008e47 	.word	0x08008e47
 8008300:	08008e47 	.word	0x08008e47
 8008304:	08008e47 	.word	0x08008e47
 8008308:	08008577 	.word	0x08008577
 800830c:	08008e47 	.word	0x08008e47
 8008310:	080084e1 	.word	0x080084e1
 8008314:	08008507 	.word	0x08008507
 8008318:	08008577 	.word	0x08008577
 800831c:	08008577 	.word	0x08008577
 8008320:	08008577 	.word	0x08008577
 8008324:	080084ad 	.word	0x080084ad
 8008328:	08008507 	.word	0x08008507
 800832c:	080084d5 	.word	0x080084d5
 8008330:	08008e47 	.word	0x08008e47
 8008334:	080084c7 	.word	0x080084c7
 8008338:	08008e47 	.word	0x08008e47
 800833c:	08008a03 	.word	0x08008a03
 8008340:	08008a4d 	.word	0x08008a4d
 8008344:	08008ab5 	.word	0x08008ab5
 8008348:	080084d5 	.word	0x080084d5
 800834c:	08008e47 	.word	0x08008e47
 8008350:	08008ad5 	.word	0x08008ad5
 8008354:	080081e9 	.word	0x080081e9
 8008358:	08008cbb 	.word	0x08008cbb
 800835c:	08008e47 	.word	0x08008e47
 8008360:	08008e47 	.word	0x08008e47
 8008364:	08008cf9 	.word	0x08008cf9
 8008368:	08008e47 	.word	0x08008e47
 800836c:	080081e9 	.word	0x080081e9
 8008370:	461d      	mov	r5, r3
 8008372:	e712      	b.n	800819a <_svfprintf_r+0x7a>
 8008374:	aa26      	add	r2, sp, #152	; 0x98
 8008376:	4641      	mov	r1, r8
 8008378:	9803      	ldr	r0, [sp, #12]
 800837a:	f002 fdb7 	bl	800aeec <__ssprint_r>
 800837e:	2800      	cmp	r0, #0
 8008380:	f040 8166 	bne.w	8008650 <_svfprintf_r+0x530>
 8008384:	ac29      	add	r4, sp, #164	; 0xa4
 8008386:	e71e      	b.n	80081c6 <_svfprintf_r+0xa6>
 8008388:	461e      	mov	r6, r3
 800838a:	e72d      	b.n	80081e8 <_svfprintf_r+0xc8>
 800838c:	4b46      	ldr	r3, [pc, #280]	; (80084a8 <_svfprintf_r+0x388>)
 800838e:	9318      	str	r3, [sp, #96]	; 0x60
 8008390:	f01a 0f20 	tst.w	sl, #32
 8008394:	f000 84b3 	beq.w	8008cfe <_svfprintf_r+0xbde>
 8008398:	3607      	adds	r6, #7
 800839a:	f026 0607 	bic.w	r6, r6, #7
 800839e:	f106 0308 	add.w	r3, r6, #8
 80083a2:	e9d6 6700 	ldrd	r6, r7, [r6]
 80083a6:	9308      	str	r3, [sp, #32]
 80083a8:	f01a 0f01 	tst.w	sl, #1
 80083ac:	d00a      	beq.n	80083c4 <_svfprintf_r+0x2a4>
 80083ae:	ea56 0307 	orrs.w	r3, r6, r7
 80083b2:	d007      	beq.n	80083c4 <_svfprintf_r+0x2a4>
 80083b4:	2330      	movs	r3, #48	; 0x30
 80083b6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 80083ba:	9b06      	ldr	r3, [sp, #24]
 80083bc:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 80083c0:	f04a 0a02 	orr.w	sl, sl, #2
 80083c4:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 80083c8:	2302      	movs	r3, #2
 80083ca:	e34d      	b.n	8008a68 <_svfprintf_r+0x948>
 80083cc:	9803      	ldr	r0, [sp, #12]
 80083ce:	f002 f833 	bl	800a438 <_localeconv_r>
 80083d2:	6843      	ldr	r3, [r0, #4]
 80083d4:	9319      	str	r3, [sp, #100]	; 0x64
 80083d6:	4618      	mov	r0, r3
 80083d8:	f7f7 ff02 	bl	80001e0 <strlen>
 80083dc:	9012      	str	r0, [sp, #72]	; 0x48
 80083de:	9803      	ldr	r0, [sp, #12]
 80083e0:	f002 f82a 	bl	800a438 <_localeconv_r>
 80083e4:	6883      	ldr	r3, [r0, #8]
 80083e6:	9309      	str	r3, [sp, #36]	; 0x24
 80083e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f43f aefc 	beq.w	80081e8 <_svfprintf_r+0xc8>
 80083f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	f43f aef8 	beq.w	80081e8 <_svfprintf_r+0xc8>
 80083f8:	781b      	ldrb	r3, [r3, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	f43f aef4 	beq.w	80081e8 <_svfprintf_r+0xc8>
 8008400:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 8008404:	e6f0      	b.n	80081e8 <_svfprintf_r+0xc8>
 8008406:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 800840a:	2b00      	cmp	r3, #0
 800840c:	f47f aeec 	bne.w	80081e8 <_svfprintf_r+0xc8>
 8008410:	2320      	movs	r3, #32
 8008412:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8008416:	e6e7      	b.n	80081e8 <_svfprintf_r+0xc8>
 8008418:	f04a 0a01 	orr.w	sl, sl, #1
 800841c:	e6e4      	b.n	80081e8 <_svfprintf_r+0xc8>
 800841e:	6832      	ldr	r2, [r6, #0]
 8008420:	920f      	str	r2, [sp, #60]	; 0x3c
 8008422:	2a00      	cmp	r2, #0
 8008424:	f106 0304 	add.w	r3, r6, #4
 8008428:	daae      	bge.n	8008388 <_svfprintf_r+0x268>
 800842a:	4252      	negs	r2, r2
 800842c:	920f      	str	r2, [sp, #60]	; 0x3c
 800842e:	461e      	mov	r6, r3
 8008430:	f04a 0a04 	orr.w	sl, sl, #4
 8008434:	e6d8      	b.n	80081e8 <_svfprintf_r+0xc8>
 8008436:	232b      	movs	r3, #43	; 0x2b
 8008438:	e7eb      	b.n	8008412 <_svfprintf_r+0x2f2>
 800843a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800843c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800843e:	7812      	ldrb	r2, [r2, #0]
 8008440:	9206      	str	r2, [sp, #24]
 8008442:	2a2a      	cmp	r2, #42	; 0x2a
 8008444:	f103 0301 	add.w	r3, r3, #1
 8008448:	d10f      	bne.n	800846a <_svfprintf_r+0x34a>
 800844a:	6835      	ldr	r5, [r6, #0]
 800844c:	930c      	str	r3, [sp, #48]	; 0x30
 800844e:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
 8008452:	3604      	adds	r6, #4
 8008454:	e6c8      	b.n	80081e8 <_svfprintf_r+0xc8>
 8008456:	fb07 2505 	mla	r5, r7, r5, r2
 800845a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800845e:	9206      	str	r2, [sp, #24]
 8008460:	9a06      	ldr	r2, [sp, #24]
 8008462:	3a30      	subs	r2, #48	; 0x30
 8008464:	2a09      	cmp	r2, #9
 8008466:	d9f6      	bls.n	8008456 <_svfprintf_r+0x336>
 8008468:	e6c3      	b.n	80081f2 <_svfprintf_r+0xd2>
 800846a:	2500      	movs	r5, #0
 800846c:	e7f8      	b.n	8008460 <_svfprintf_r+0x340>
 800846e:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 8008472:	e6b9      	b.n	80081e8 <_svfprintf_r+0xc8>
 8008474:	2200      	movs	r2, #0
 8008476:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008478:	920f      	str	r2, [sp, #60]	; 0x3c
 800847a:	9a06      	ldr	r2, [sp, #24]
 800847c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800847e:	3a30      	subs	r2, #48	; 0x30
 8008480:	fb07 2201 	mla	r2, r7, r1, r2
 8008484:	920f      	str	r2, [sp, #60]	; 0x3c
 8008486:	f813 2b01 	ldrb.w	r2, [r3], #1
 800848a:	9206      	str	r2, [sp, #24]
 800848c:	3a30      	subs	r2, #48	; 0x30
 800848e:	2a09      	cmp	r2, #9
 8008490:	d9f3      	bls.n	800847a <_svfprintf_r+0x35a>
 8008492:	e6ae      	b.n	80081f2 <_svfprintf_r+0xd2>
 8008494:	f04a 0a08 	orr.w	sl, sl, #8
 8008498:	e6a6      	b.n	80081e8 <_svfprintf_r+0xc8>
 800849a:	bf00      	nop
 800849c:	f3af 8000 	nop.w
	...
 80084a8:	0800d645 	.word	0x0800d645
 80084ac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2b68      	cmp	r3, #104	; 0x68
 80084b2:	bf01      	itttt	eq
 80084b4:	9b0c      	ldreq	r3, [sp, #48]	; 0x30
 80084b6:	3301      	addeq	r3, #1
 80084b8:	930c      	streq	r3, [sp, #48]	; 0x30
 80084ba:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 80084be:	bf18      	it	ne
 80084c0:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 80084c4:	e690      	b.n	80081e8 <_svfprintf_r+0xc8>
 80084c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	2b6c      	cmp	r3, #108	; 0x6c
 80084cc:	d105      	bne.n	80084da <_svfprintf_r+0x3ba>
 80084ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084d0:	3301      	adds	r3, #1
 80084d2:	930c      	str	r3, [sp, #48]	; 0x30
 80084d4:	f04a 0a20 	orr.w	sl, sl, #32
 80084d8:	e686      	b.n	80081e8 <_svfprintf_r+0xc8>
 80084da:	f04a 0a10 	orr.w	sl, sl, #16
 80084de:	e683      	b.n	80081e8 <_svfprintf_r+0xc8>
 80084e0:	1d33      	adds	r3, r6, #4
 80084e2:	9308      	str	r3, [sp, #32]
 80084e4:	2000      	movs	r0, #0
 80084e6:	6833      	ldr	r3, [r6, #0]
 80084e8:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 80084ec:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 80084f0:	4681      	mov	r9, r0
 80084f2:	2501      	movs	r5, #1
 80084f4:	9010      	str	r0, [sp, #64]	; 0x40
 80084f6:	4607      	mov	r7, r0
 80084f8:	9007      	str	r0, [sp, #28]
 80084fa:	4606      	mov	r6, r0
 80084fc:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8008500:	e301      	b.n	8008b06 <_svfprintf_r+0x9e6>
 8008502:	f04a 0a10 	orr.w	sl, sl, #16
 8008506:	f01a 0f20 	tst.w	sl, #32
 800850a:	d021      	beq.n	8008550 <_svfprintf_r+0x430>
 800850c:	3607      	adds	r6, #7
 800850e:	f026 0607 	bic.w	r6, r6, #7
 8008512:	f106 0308 	add.w	r3, r6, #8
 8008516:	e9d6 6700 	ldrd	r6, r7, [r6]
 800851a:	9308      	str	r3, [sp, #32]
 800851c:	2e00      	cmp	r6, #0
 800851e:	f177 0300 	sbcs.w	r3, r7, #0
 8008522:	da06      	bge.n	8008532 <_svfprintf_r+0x412>
 8008524:	4276      	negs	r6, r6
 8008526:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800852a:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800852e:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 8008532:	1c6b      	adds	r3, r5, #1
 8008534:	f040 83f6 	bne.w	8008d24 <_svfprintf_r+0xc04>
 8008538:	2f00      	cmp	r7, #0
 800853a:	bf08      	it	eq
 800853c:	2e0a      	cmpeq	r6, #10
 800853e:	f080 8427 	bcs.w	8008d90 <_svfprintf_r+0xc70>
 8008542:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8008546:	3630      	adds	r6, #48	; 0x30
 8008548:	f80b 6d01 	strb.w	r6, [fp, #-1]!
 800854c:	f000 bc0d 	b.w	8008d6a <_svfprintf_r+0xc4a>
 8008550:	1d33      	adds	r3, r6, #4
 8008552:	f01a 0f10 	tst.w	sl, #16
 8008556:	9308      	str	r3, [sp, #32]
 8008558:	d002      	beq.n	8008560 <_svfprintf_r+0x440>
 800855a:	6836      	ldr	r6, [r6, #0]
 800855c:	17f7      	asrs	r7, r6, #31
 800855e:	e7dd      	b.n	800851c <_svfprintf_r+0x3fc>
 8008560:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008564:	6836      	ldr	r6, [r6, #0]
 8008566:	d001      	beq.n	800856c <_svfprintf_r+0x44c>
 8008568:	b236      	sxth	r6, r6
 800856a:	e7f7      	b.n	800855c <_svfprintf_r+0x43c>
 800856c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008570:	bf18      	it	ne
 8008572:	b276      	sxtbne	r6, r6
 8008574:	e7f2      	b.n	800855c <_svfprintf_r+0x43c>
 8008576:	3607      	adds	r6, #7
 8008578:	f026 0607 	bic.w	r6, r6, #7
 800857c:	ed96 7b00 	vldr	d7, [r6]
 8008580:	f106 0308 	add.w	r3, r6, #8
 8008584:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8008588:	9308      	str	r3, [sp, #32]
 800858a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800858c:	931a      	str	r3, [sp, #104]	; 0x68
 800858e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008594:	931b      	str	r3, [sp, #108]	; 0x6c
 8008596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800859a:	4bb2      	ldr	r3, [pc, #712]	; (8008864 <_svfprintf_r+0x744>)
 800859c:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80085a0:	f7f8 facc 	bl	8000b3c <__aeabi_dcmpun>
 80085a4:	bb00      	cbnz	r0, 80085e8 <_svfprintf_r+0x4c8>
 80085a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80085aa:	4bae      	ldr	r3, [pc, #696]	; (8008864 <_svfprintf_r+0x744>)
 80085ac:	e9dd 011a 	ldrd	r0, r1, [sp, #104]	; 0x68
 80085b0:	f7f8 faa6 	bl	8000b00 <__aeabi_dcmple>
 80085b4:	b9c0      	cbnz	r0, 80085e8 <_svfprintf_r+0x4c8>
 80085b6:	2200      	movs	r2, #0
 80085b8:	2300      	movs	r3, #0
 80085ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80085be:	f7f8 fa95 	bl	8000aec <__aeabi_dcmplt>
 80085c2:	b110      	cbz	r0, 80085ca <_svfprintf_r+0x4aa>
 80085c4:	232d      	movs	r3, #45	; 0x2d
 80085c6:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 80085ca:	4aa7      	ldr	r2, [pc, #668]	; (8008868 <_svfprintf_r+0x748>)
 80085cc:	4ba7      	ldr	r3, [pc, #668]	; (800886c <_svfprintf_r+0x74c>)
 80085ce:	9906      	ldr	r1, [sp, #24]
 80085d0:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 80085d4:	2947      	cmp	r1, #71	; 0x47
 80085d6:	bfcc      	ite	gt
 80085d8:	4693      	movgt	fp, r2
 80085da:	469b      	movle	fp, r3
 80085dc:	f04f 0900 	mov.w	r9, #0
 80085e0:	2503      	movs	r5, #3
 80085e2:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
 80085e6:	e3c6      	b.n	8008d76 <_svfprintf_r+0xc56>
 80085e8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80085ec:	4610      	mov	r0, r2
 80085ee:	4619      	mov	r1, r3
 80085f0:	f7f8 faa4 	bl	8000b3c <__aeabi_dcmpun>
 80085f4:	4681      	mov	r9, r0
 80085f6:	b140      	cbz	r0, 800860a <_svfprintf_r+0x4ea>
 80085f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085fa:	4a9d      	ldr	r2, [pc, #628]	; (8008870 <_svfprintf_r+0x750>)
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	bfbc      	itt	lt
 8008600:	232d      	movlt	r3, #45	; 0x2d
 8008602:	f88d 307b 	strblt.w	r3, [sp, #123]	; 0x7b
 8008606:	4b9b      	ldr	r3, [pc, #620]	; (8008874 <_svfprintf_r+0x754>)
 8008608:	e7e1      	b.n	80085ce <_svfprintf_r+0x4ae>
 800860a:	9b06      	ldr	r3, [sp, #24]
 800860c:	f023 0320 	bic.w	r3, r3, #32
 8008610:	2b41      	cmp	r3, #65	; 0x41
 8008612:	9307      	str	r3, [sp, #28]
 8008614:	d125      	bne.n	8008662 <_svfprintf_r+0x542>
 8008616:	2330      	movs	r3, #48	; 0x30
 8008618:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800861c:	9b06      	ldr	r3, [sp, #24]
 800861e:	2b61      	cmp	r3, #97	; 0x61
 8008620:	bf14      	ite	ne
 8008622:	2358      	movne	r3, #88	; 0x58
 8008624:	2378      	moveq	r3, #120	; 0x78
 8008626:	2d63      	cmp	r5, #99	; 0x63
 8008628:	f88d 307d 	strb.w	r3, [sp, #125]	; 0x7d
 800862c:	f04a 0a02 	orr.w	sl, sl, #2
 8008630:	f340 8108 	ble.w	8008844 <_svfprintf_r+0x724>
 8008634:	1c69      	adds	r1, r5, #1
 8008636:	9803      	ldr	r0, [sp, #12]
 8008638:	f001 ff0e 	bl	800a458 <_malloc_r>
 800863c:	4683      	mov	fp, r0
 800863e:	2800      	cmp	r0, #0
 8008640:	f040 8103 	bne.w	800884a <_svfprintf_r+0x72a>
 8008644:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008648:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800864c:	f8a8 300c 	strh.w	r3, [r8, #12]
 8008650:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008654:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008658:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800865a:	bf18      	it	ne
 800865c:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8008660:	e582      	b.n	8008168 <_svfprintf_r+0x48>
 8008662:	1c69      	adds	r1, r5, #1
 8008664:	f000 80f3 	beq.w	800884e <_svfprintf_r+0x72e>
 8008668:	9b07      	ldr	r3, [sp, #28]
 800866a:	2b47      	cmp	r3, #71	; 0x47
 800866c:	d102      	bne.n	8008674 <_svfprintf_r+0x554>
 800866e:	2d00      	cmp	r5, #0
 8008670:	f000 80ef 	beq.w	8008852 <_svfprintf_r+0x732>
 8008674:	f44a 7380 	orr.w	r3, sl, #256	; 0x100
 8008678:	9310      	str	r3, [sp, #64]	; 0x40
 800867a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800867c:	2b00      	cmp	r3, #0
 800867e:	f280 80eb 	bge.w	8008858 <_svfprintf_r+0x738>
 8008682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008684:	9314      	str	r3, [sp, #80]	; 0x50
 8008686:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008688:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800868c:	9315      	str	r3, [sp, #84]	; 0x54
 800868e:	232d      	movs	r3, #45	; 0x2d
 8008690:	9313      	str	r3, [sp, #76]	; 0x4c
 8008692:	9b07      	ldr	r3, [sp, #28]
 8008694:	2b41      	cmp	r3, #65	; 0x41
 8008696:	f040 8105 	bne.w	80088a4 <_svfprintf_r+0x784>
 800869a:	a820      	add	r0, sp, #128	; 0x80
 800869c:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80086a0:	f002 fbde 	bl	800ae60 <frexp>
 80086a4:	2200      	movs	r2, #0
 80086a6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80086aa:	ec51 0b10 	vmov	r0, r1, d0
 80086ae:	f7f7 ffab 	bl	8000608 <__aeabi_dmul>
 80086b2:	2200      	movs	r2, #0
 80086b4:	2300      	movs	r3, #0
 80086b6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086ba:	f7f8 fa0d 	bl	8000ad8 <__aeabi_dcmpeq>
 80086be:	b108      	cbz	r0, 80086c4 <_svfprintf_r+0x5a4>
 80086c0:	2301      	movs	r3, #1
 80086c2:	9320      	str	r3, [sp, #128]	; 0x80
 80086c4:	4f6c      	ldr	r7, [pc, #432]	; (8008878 <_svfprintf_r+0x758>)
 80086c6:	4b6d      	ldr	r3, [pc, #436]	; (800887c <_svfprintf_r+0x75c>)
 80086c8:	9a06      	ldr	r2, [sp, #24]
 80086ca:	2a61      	cmp	r2, #97	; 0x61
 80086cc:	bf08      	it	eq
 80086ce:	461f      	moveq	r7, r3
 80086d0:	9711      	str	r7, [sp, #68]	; 0x44
 80086d2:	465e      	mov	r6, fp
 80086d4:	1e6f      	subs	r7, r5, #1
 80086d6:	2200      	movs	r2, #0
 80086d8:	4b69      	ldr	r3, [pc, #420]	; (8008880 <_svfprintf_r+0x760>)
 80086da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086de:	f7f7 ff93 	bl	8000608 <__aeabi_dmul>
 80086e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80086e6:	f7f8 fa3f 	bl	8000b68 <__aeabi_d2iz>
 80086ea:	901c      	str	r0, [sp, #112]	; 0x70
 80086ec:	f7f7 ff22 	bl	8000534 <__aeabi_i2d>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086f8:	f7f7 fdce 	bl	8000298 <__aeabi_dsub>
 80086fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80086fe:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008700:	971d      	str	r7, [sp, #116]	; 0x74
 8008702:	5c9b      	ldrb	r3, [r3, r2]
 8008704:	f806 3b01 	strb.w	r3, [r6], #1
 8008708:	1c7a      	adds	r2, r7, #1
 800870a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800870e:	d006      	beq.n	800871e <_svfprintf_r+0x5fe>
 8008710:	2200      	movs	r2, #0
 8008712:	2300      	movs	r3, #0
 8008714:	3f01      	subs	r7, #1
 8008716:	f7f8 f9df 	bl	8000ad8 <__aeabi_dcmpeq>
 800871a:	2800      	cmp	r0, #0
 800871c:	d0db      	beq.n	80086d6 <_svfprintf_r+0x5b6>
 800871e:	2200      	movs	r2, #0
 8008720:	4b58      	ldr	r3, [pc, #352]	; (8008884 <_svfprintf_r+0x764>)
 8008722:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008726:	f7f8 f9ff 	bl	8000b28 <__aeabi_dcmpgt>
 800872a:	b960      	cbnz	r0, 8008746 <_svfprintf_r+0x626>
 800872c:	2200      	movs	r2, #0
 800872e:	4b55      	ldr	r3, [pc, #340]	; (8008884 <_svfprintf_r+0x764>)
 8008730:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008734:	f7f8 f9d0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008738:	2800      	cmp	r0, #0
 800873a:	f000 80ae 	beq.w	800889a <_svfprintf_r+0x77a>
 800873e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008740:	07db      	lsls	r3, r3, #31
 8008742:	f140 80aa 	bpl.w	800889a <_svfprintf_r+0x77a>
 8008746:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008748:	9624      	str	r6, [sp, #144]	; 0x90
 800874a:	7bd9      	ldrb	r1, [r3, #15]
 800874c:	2030      	movs	r0, #48	; 0x30
 800874e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008750:	1e53      	subs	r3, r2, #1
 8008752:	9324      	str	r3, [sp, #144]	; 0x90
 8008754:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8008758:	428b      	cmp	r3, r1
 800875a:	f000 8095 	beq.w	8008888 <_svfprintf_r+0x768>
 800875e:	2b39      	cmp	r3, #57	; 0x39
 8008760:	bf0b      	itete	eq
 8008762:	9b11      	ldreq	r3, [sp, #68]	; 0x44
 8008764:	3301      	addne	r3, #1
 8008766:	7a9b      	ldrbeq	r3, [r3, #10]
 8008768:	b2db      	uxtbne	r3, r3
 800876a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800876e:	4633      	mov	r3, r6
 8008770:	eba3 030b 	sub.w	r3, r3, fp
 8008774:	9304      	str	r3, [sp, #16]
 8008776:	9b07      	ldr	r3, [sp, #28]
 8008778:	9e20      	ldr	r6, [sp, #128]	; 0x80
 800877a:	2b47      	cmp	r3, #71	; 0x47
 800877c:	f040 80d7 	bne.w	800892e <_svfprintf_r+0x80e>
 8008780:	1cf7      	adds	r7, r6, #3
 8008782:	db02      	blt.n	800878a <_svfprintf_r+0x66a>
 8008784:	42b5      	cmp	r5, r6
 8008786:	f280 80fd 	bge.w	8008984 <_svfprintf_r+0x864>
 800878a:	9b06      	ldr	r3, [sp, #24]
 800878c:	3b02      	subs	r3, #2
 800878e:	9306      	str	r3, [sp, #24]
 8008790:	9906      	ldr	r1, [sp, #24]
 8008792:	f89d 2018 	ldrb.w	r2, [sp, #24]
 8008796:	f021 0120 	bic.w	r1, r1, #32
 800879a:	2941      	cmp	r1, #65	; 0x41
 800879c:	bf08      	it	eq
 800879e:	320f      	addeq	r2, #15
 80087a0:	f106 33ff 	add.w	r3, r6, #4294967295	; 0xffffffff
 80087a4:	bf06      	itte	eq
 80087a6:	b2d2      	uxtbeq	r2, r2
 80087a8:	2101      	moveq	r1, #1
 80087aa:	2100      	movne	r1, #0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	9320      	str	r3, [sp, #128]	; 0x80
 80087b0:	bfb8      	it	lt
 80087b2:	f1c6 0301 	rsblt	r3, r6, #1
 80087b6:	f88d 2088 	strb.w	r2, [sp, #136]	; 0x88
 80087ba:	bfb4      	ite	lt
 80087bc:	222d      	movlt	r2, #45	; 0x2d
 80087be:	222b      	movge	r2, #43	; 0x2b
 80087c0:	2b09      	cmp	r3, #9
 80087c2:	f88d 2089 	strb.w	r2, [sp, #137]	; 0x89
 80087c6:	f340 80c9 	ble.w	800895c <_svfprintf_r+0x83c>
 80087ca:	f10d 0297 	add.w	r2, sp, #151	; 0x97
 80087ce:	250a      	movs	r5, #10
 80087d0:	fb93 f0f5 	sdiv	r0, r3, r5
 80087d4:	fb05 3310 	mls	r3, r5, r0, r3
 80087d8:	3330      	adds	r3, #48	; 0x30
 80087da:	2809      	cmp	r0, #9
 80087dc:	f802 3c01 	strb.w	r3, [r2, #-1]
 80087e0:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 80087e4:	4603      	mov	r3, r0
 80087e6:	f300 80b2 	bgt.w	800894e <_svfprintf_r+0x82e>
 80087ea:	3330      	adds	r3, #48	; 0x30
 80087ec:	f801 3c01 	strb.w	r3, [r1, #-1]
 80087f0:	3a02      	subs	r2, #2
 80087f2:	f10d 038a 	add.w	r3, sp, #138	; 0x8a
 80087f6:	f10d 0097 	add.w	r0, sp, #151	; 0x97
 80087fa:	4282      	cmp	r2, r0
 80087fc:	4619      	mov	r1, r3
 80087fe:	f0c0 80a8 	bcc.w	8008952 <_svfprintf_r+0x832>
 8008802:	9a04      	ldr	r2, [sp, #16]
 8008804:	ab22      	add	r3, sp, #136	; 0x88
 8008806:	1acb      	subs	r3, r1, r3
 8008808:	2a01      	cmp	r2, #1
 800880a:	9317      	str	r3, [sp, #92]	; 0x5c
 800880c:	eb03 0502 	add.w	r5, r3, r2
 8008810:	dc02      	bgt.n	8008818 <_svfprintf_r+0x6f8>
 8008812:	f01a 0f01 	tst.w	sl, #1
 8008816:	d001      	beq.n	800881c <_svfprintf_r+0x6fc>
 8008818:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800881a:	441d      	add	r5, r3
 800881c:	f42a 6380 	bic.w	r3, sl, #1024	; 0x400
 8008820:	2700      	movs	r7, #0
 8008822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008826:	9310      	str	r3, [sp, #64]	; 0x40
 8008828:	9707      	str	r7, [sp, #28]
 800882a:	463e      	mov	r6, r7
 800882c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800882e:	2b00      	cmp	r3, #0
 8008830:	f000 8315 	beq.w	8008e5e <_svfprintf_r+0xd3e>
 8008834:	232d      	movs	r3, #45	; 0x2d
 8008836:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 800883a:	f88d 307b 	strb.w	r3, [sp, #123]	; 0x7b
 800883e:	2300      	movs	r3, #0
 8008840:	9310      	str	r3, [sp, #64]	; 0x40
 8008842:	e160      	b.n	8008b06 <_svfprintf_r+0x9e6>
 8008844:	f10d 0be4 	add.w	fp, sp, #228	; 0xe4
 8008848:	e714      	b.n	8008674 <_svfprintf_r+0x554>
 800884a:	4681      	mov	r9, r0
 800884c:	e712      	b.n	8008674 <_svfprintf_r+0x554>
 800884e:	2506      	movs	r5, #6
 8008850:	e710      	b.n	8008674 <_svfprintf_r+0x554>
 8008852:	46a9      	mov	r9, r5
 8008854:	2501      	movs	r5, #1
 8008856:	e70d      	b.n	8008674 <_svfprintf_r+0x554>
 8008858:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800885c:	2300      	movs	r3, #0
 800885e:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8008862:	e715      	b.n	8008690 <_svfprintf_r+0x570>
 8008864:	7fefffff 	.word	0x7fefffff
 8008868:	0800d628 	.word	0x0800d628
 800886c:	0800d624 	.word	0x0800d624
 8008870:	0800d630 	.word	0x0800d630
 8008874:	0800d62c 	.word	0x0800d62c
 8008878:	0800d645 	.word	0x0800d645
 800887c:	0800d634 	.word	0x0800d634
 8008880:	40300000 	.word	0x40300000
 8008884:	3fe00000 	.word	0x3fe00000
 8008888:	f802 0c01 	strb.w	r0, [r2, #-1]
 800888c:	e75f      	b.n	800874e <_svfprintf_r+0x62e>
 800888e:	f803 1b01 	strb.w	r1, [r3], #1
 8008892:	1af2      	subs	r2, r6, r3
 8008894:	2a00      	cmp	r2, #0
 8008896:	dafa      	bge.n	800888e <_svfprintf_r+0x76e>
 8008898:	e76a      	b.n	8008770 <_svfprintf_r+0x650>
 800889a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800889c:	4633      	mov	r3, r6
 800889e:	2130      	movs	r1, #48	; 0x30
 80088a0:	4416      	add	r6, r2
 80088a2:	e7f6      	b.n	8008892 <_svfprintf_r+0x772>
 80088a4:	9b07      	ldr	r3, [sp, #28]
 80088a6:	2b46      	cmp	r3, #70	; 0x46
 80088a8:	d004      	beq.n	80088b4 <_svfprintf_r+0x794>
 80088aa:	2b45      	cmp	r3, #69	; 0x45
 80088ac:	d13a      	bne.n	8008924 <_svfprintf_r+0x804>
 80088ae:	1c6e      	adds	r6, r5, #1
 80088b0:	2102      	movs	r1, #2
 80088b2:	e001      	b.n	80088b8 <_svfprintf_r+0x798>
 80088b4:	462e      	mov	r6, r5
 80088b6:	2103      	movs	r1, #3
 80088b8:	ab24      	add	r3, sp, #144	; 0x90
 80088ba:	9301      	str	r3, [sp, #4]
 80088bc:	ab21      	add	r3, sp, #132	; 0x84
 80088be:	9300      	str	r3, [sp, #0]
 80088c0:	4632      	mov	r2, r6
 80088c2:	ab20      	add	r3, sp, #128	; 0x80
 80088c4:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 80088c8:	9803      	ldr	r0, [sp, #12]
 80088ca:	f000 fee5 	bl	8009698 <_dtoa_r>
 80088ce:	9b07      	ldr	r3, [sp, #28]
 80088d0:	2b47      	cmp	r3, #71	; 0x47
 80088d2:	4683      	mov	fp, r0
 80088d4:	d102      	bne.n	80088dc <_svfprintf_r+0x7bc>
 80088d6:	f01a 0f01 	tst.w	sl, #1
 80088da:	d026      	beq.n	800892a <_svfprintf_r+0x80a>
 80088dc:	9b07      	ldr	r3, [sp, #28]
 80088de:	2b46      	cmp	r3, #70	; 0x46
 80088e0:	eb0b 0706 	add.w	r7, fp, r6
 80088e4:	d10f      	bne.n	8008906 <_svfprintf_r+0x7e6>
 80088e6:	f89b 3000 	ldrb.w	r3, [fp]
 80088ea:	2b30      	cmp	r3, #48	; 0x30
 80088ec:	d109      	bne.n	8008902 <_svfprintf_r+0x7e2>
 80088ee:	2200      	movs	r2, #0
 80088f0:	2300      	movs	r3, #0
 80088f2:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 80088f6:	f7f8 f8ef 	bl	8000ad8 <__aeabi_dcmpeq>
 80088fa:	b910      	cbnz	r0, 8008902 <_svfprintf_r+0x7e2>
 80088fc:	f1c6 0601 	rsb	r6, r6, #1
 8008900:	9620      	str	r6, [sp, #128]	; 0x80
 8008902:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008904:	441f      	add	r7, r3
 8008906:	2200      	movs	r2, #0
 8008908:	2300      	movs	r3, #0
 800890a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
 800890e:	f7f8 f8e3 	bl	8000ad8 <__aeabi_dcmpeq>
 8008912:	b948      	cbnz	r0, 8008928 <_svfprintf_r+0x808>
 8008914:	2230      	movs	r2, #48	; 0x30
 8008916:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008918:	429f      	cmp	r7, r3
 800891a:	d906      	bls.n	800892a <_svfprintf_r+0x80a>
 800891c:	1c59      	adds	r1, r3, #1
 800891e:	9124      	str	r1, [sp, #144]	; 0x90
 8008920:	701a      	strb	r2, [r3, #0]
 8008922:	e7f8      	b.n	8008916 <_svfprintf_r+0x7f6>
 8008924:	462e      	mov	r6, r5
 8008926:	e7c3      	b.n	80088b0 <_svfprintf_r+0x790>
 8008928:	9724      	str	r7, [sp, #144]	; 0x90
 800892a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800892c:	e720      	b.n	8008770 <_svfprintf_r+0x650>
 800892e:	9b07      	ldr	r3, [sp, #28]
 8008930:	2b46      	cmp	r3, #70	; 0x46
 8008932:	f47f af2d 	bne.w	8008790 <_svfprintf_r+0x670>
 8008936:	2e00      	cmp	r6, #0
 8008938:	dd1d      	ble.n	8008976 <_svfprintf_r+0x856>
 800893a:	b915      	cbnz	r5, 8008942 <_svfprintf_r+0x822>
 800893c:	f01a 0f01 	tst.w	sl, #1
 8008940:	d034      	beq.n	80089ac <_svfprintf_r+0x88c>
 8008942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008944:	18f3      	adds	r3, r6, r3
 8008946:	441d      	add	r5, r3
 8008948:	2366      	movs	r3, #102	; 0x66
 800894a:	9306      	str	r3, [sp, #24]
 800894c:	e033      	b.n	80089b6 <_svfprintf_r+0x896>
 800894e:	460a      	mov	r2, r1
 8008950:	e73e      	b.n	80087d0 <_svfprintf_r+0x6b0>
 8008952:	f812 1b01 	ldrb.w	r1, [r2], #1
 8008956:	f803 1b01 	strb.w	r1, [r3], #1
 800895a:	e74e      	b.n	80087fa <_svfprintf_r+0x6da>
 800895c:	b941      	cbnz	r1, 8008970 <_svfprintf_r+0x850>
 800895e:	2230      	movs	r2, #48	; 0x30
 8008960:	f88d 208a 	strb.w	r2, [sp, #138]	; 0x8a
 8008964:	f10d 028b 	add.w	r2, sp, #139	; 0x8b
 8008968:	3330      	adds	r3, #48	; 0x30
 800896a:	1c51      	adds	r1, r2, #1
 800896c:	7013      	strb	r3, [r2, #0]
 800896e:	e748      	b.n	8008802 <_svfprintf_r+0x6e2>
 8008970:	f10d 028a 	add.w	r2, sp, #138	; 0x8a
 8008974:	e7f8      	b.n	8008968 <_svfprintf_r+0x848>
 8008976:	b915      	cbnz	r5, 800897e <_svfprintf_r+0x85e>
 8008978:	f01a 0f01 	tst.w	sl, #1
 800897c:	d018      	beq.n	80089b0 <_svfprintf_r+0x890>
 800897e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008980:	3301      	adds	r3, #1
 8008982:	e7e0      	b.n	8008946 <_svfprintf_r+0x826>
 8008984:	9b04      	ldr	r3, [sp, #16]
 8008986:	42b3      	cmp	r3, r6
 8008988:	dc06      	bgt.n	8008998 <_svfprintf_r+0x878>
 800898a:	f01a 0f01 	tst.w	sl, #1
 800898e:	d025      	beq.n	80089dc <_svfprintf_r+0x8bc>
 8008990:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008992:	18f5      	adds	r5, r6, r3
 8008994:	2367      	movs	r3, #103	; 0x67
 8008996:	e7d8      	b.n	800894a <_svfprintf_r+0x82a>
 8008998:	9b04      	ldr	r3, [sp, #16]
 800899a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800899c:	2e00      	cmp	r6, #0
 800899e:	eb03 0502 	add.w	r5, r3, r2
 80089a2:	dcf7      	bgt.n	8008994 <_svfprintf_r+0x874>
 80089a4:	f1c6 0301 	rsb	r3, r6, #1
 80089a8:	441d      	add	r5, r3
 80089aa:	e7f3      	b.n	8008994 <_svfprintf_r+0x874>
 80089ac:	4635      	mov	r5, r6
 80089ae:	e7cb      	b.n	8008948 <_svfprintf_r+0x828>
 80089b0:	2366      	movs	r3, #102	; 0x66
 80089b2:	9306      	str	r3, [sp, #24]
 80089b4:	2501      	movs	r5, #1
 80089b6:	f41a 6380 	ands.w	r3, sl, #1024	; 0x400
 80089ba:	9307      	str	r3, [sp, #28]
 80089bc:	d01f      	beq.n	80089fe <_svfprintf_r+0x8de>
 80089be:	2700      	movs	r7, #0
 80089c0:	2e00      	cmp	r6, #0
 80089c2:	9707      	str	r7, [sp, #28]
 80089c4:	f77f af32 	ble.w	800882c <_svfprintf_r+0x70c>
 80089c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089ca:	781b      	ldrb	r3, [r3, #0]
 80089cc:	2bff      	cmp	r3, #255	; 0xff
 80089ce:	d107      	bne.n	80089e0 <_svfprintf_r+0x8c0>
 80089d0:	9b07      	ldr	r3, [sp, #28]
 80089d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80089d4:	443b      	add	r3, r7
 80089d6:	fb02 5503 	mla	r5, r2, r3, r5
 80089da:	e727      	b.n	800882c <_svfprintf_r+0x70c>
 80089dc:	4635      	mov	r5, r6
 80089de:	e7d9      	b.n	8008994 <_svfprintf_r+0x874>
 80089e0:	42b3      	cmp	r3, r6
 80089e2:	daf5      	bge.n	80089d0 <_svfprintf_r+0x8b0>
 80089e4:	1af6      	subs	r6, r6, r3
 80089e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e8:	785b      	ldrb	r3, [r3, #1]
 80089ea:	b133      	cbz	r3, 80089fa <_svfprintf_r+0x8da>
 80089ec:	9b07      	ldr	r3, [sp, #28]
 80089ee:	3301      	adds	r3, #1
 80089f0:	9307      	str	r3, [sp, #28]
 80089f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089f4:	3301      	adds	r3, #1
 80089f6:	9309      	str	r3, [sp, #36]	; 0x24
 80089f8:	e7e6      	b.n	80089c8 <_svfprintf_r+0x8a8>
 80089fa:	3701      	adds	r7, #1
 80089fc:	e7e4      	b.n	80089c8 <_svfprintf_r+0x8a8>
 80089fe:	9f07      	ldr	r7, [sp, #28]
 8008a00:	e714      	b.n	800882c <_svfprintf_r+0x70c>
 8008a02:	4632      	mov	r2, r6
 8008a04:	f01a 0f20 	tst.w	sl, #32
 8008a08:	f852 3b04 	ldr.w	r3, [r2], #4
 8008a0c:	9208      	str	r2, [sp, #32]
 8008a0e:	d009      	beq.n	8008a24 <_svfprintf_r+0x904>
 8008a10:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a12:	4610      	mov	r0, r2
 8008a14:	17d1      	asrs	r1, r2, #31
 8008a16:	e9c3 0100 	strd	r0, r1, [r3]
 8008a1a:	9e08      	ldr	r6, [sp, #32]
 8008a1c:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8008a20:	f7ff bbba 	b.w	8008198 <_svfprintf_r+0x78>
 8008a24:	f01a 0f10 	tst.w	sl, #16
 8008a28:	d002      	beq.n	8008a30 <_svfprintf_r+0x910>
 8008a2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a2c:	601a      	str	r2, [r3, #0]
 8008a2e:	e7f4      	b.n	8008a1a <_svfprintf_r+0x8fa>
 8008a30:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008a34:	d002      	beq.n	8008a3c <_svfprintf_r+0x91c>
 8008a36:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a38:	801a      	strh	r2, [r3, #0]
 8008a3a:	e7ee      	b.n	8008a1a <_svfprintf_r+0x8fa>
 8008a3c:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008a40:	d0f3      	beq.n	8008a2a <_svfprintf_r+0x90a>
 8008a42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a44:	701a      	strb	r2, [r3, #0]
 8008a46:	e7e8      	b.n	8008a1a <_svfprintf_r+0x8fa>
 8008a48:	f04a 0a10 	orr.w	sl, sl, #16
 8008a4c:	f01a 0f20 	tst.w	sl, #32
 8008a50:	d01e      	beq.n	8008a90 <_svfprintf_r+0x970>
 8008a52:	3607      	adds	r6, #7
 8008a54:	f026 0607 	bic.w	r6, r6, #7
 8008a58:	f106 0308 	add.w	r3, r6, #8
 8008a5c:	e9d6 6700 	ldrd	r6, r7, [r6]
 8008a60:	9308      	str	r3, [sp, #32]
 8008a62:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 8008a66:	2300      	movs	r3, #0
 8008a68:	2200      	movs	r2, #0
 8008a6a:	1c69      	adds	r1, r5, #1
 8008a6c:	f88d 207b 	strb.w	r2, [sp, #123]	; 0x7b
 8008a70:	f000 815b 	beq.w	8008d2a <_svfprintf_r+0xc0a>
 8008a74:	4652      	mov	r2, sl
 8008a76:	ea56 0107 	orrs.w	r1, r6, r7
 8008a7a:	f02a 0a80 	bic.w	sl, sl, #128	; 0x80
 8008a7e:	f040 8154 	bne.w	8008d2a <_svfprintf_r+0xc0a>
 8008a82:	2d00      	cmp	r5, #0
 8008a84:	f000 81d5 	beq.w	8008e32 <_svfprintf_r+0xd12>
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	f040 8151 	bne.w	8008d30 <_svfprintf_r+0xc10>
 8008a8e:	e558      	b.n	8008542 <_svfprintf_r+0x422>
 8008a90:	1d33      	adds	r3, r6, #4
 8008a92:	f01a 0f10 	tst.w	sl, #16
 8008a96:	9308      	str	r3, [sp, #32]
 8008a98:	d001      	beq.n	8008a9e <_svfprintf_r+0x97e>
 8008a9a:	6836      	ldr	r6, [r6, #0]
 8008a9c:	e003      	b.n	8008aa6 <_svfprintf_r+0x986>
 8008a9e:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008aa2:	d002      	beq.n	8008aaa <_svfprintf_r+0x98a>
 8008aa4:	8836      	ldrh	r6, [r6, #0]
 8008aa6:	2700      	movs	r7, #0
 8008aa8:	e7db      	b.n	8008a62 <_svfprintf_r+0x942>
 8008aaa:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008aae:	d0f4      	beq.n	8008a9a <_svfprintf_r+0x97a>
 8008ab0:	7836      	ldrb	r6, [r6, #0]
 8008ab2:	e7f8      	b.n	8008aa6 <_svfprintf_r+0x986>
 8008ab4:	1d33      	adds	r3, r6, #4
 8008ab6:	9308      	str	r3, [sp, #32]
 8008ab8:	f647 0330 	movw	r3, #30768	; 0x7830
 8008abc:	f8ad 307c 	strh.w	r3, [sp, #124]	; 0x7c
 8008ac0:	2278      	movs	r2, #120	; 0x78
 8008ac2:	4bb0      	ldr	r3, [pc, #704]	; (8008d84 <_svfprintf_r+0xc64>)
 8008ac4:	9318      	str	r3, [sp, #96]	; 0x60
 8008ac6:	6836      	ldr	r6, [r6, #0]
 8008ac8:	9206      	str	r2, [sp, #24]
 8008aca:	2700      	movs	r7, #0
 8008acc:	f04a 0a02 	orr.w	sl, sl, #2
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	e7c9      	b.n	8008a68 <_svfprintf_r+0x948>
 8008ad4:	1d33      	adds	r3, r6, #4
 8008ad6:	f8d6 b000 	ldr.w	fp, [r6]
 8008ada:	9308      	str	r3, [sp, #32]
 8008adc:	2600      	movs	r6, #0
 8008ade:	1c68      	adds	r0, r5, #1
 8008ae0:	f88d 607b 	strb.w	r6, [sp, #123]	; 0x7b
 8008ae4:	f000 80e1 	beq.w	8008caa <_svfprintf_r+0xb8a>
 8008ae8:	462a      	mov	r2, r5
 8008aea:	4631      	mov	r1, r6
 8008aec:	4658      	mov	r0, fp
 8008aee:	f7f7 fb7f 	bl	80001f0 <memchr>
 8008af2:	4681      	mov	r9, r0
 8008af4:	2800      	cmp	r0, #0
 8008af6:	f43f ad74 	beq.w	80085e2 <_svfprintf_r+0x4c2>
 8008afa:	eba0 050b 	sub.w	r5, r0, fp
 8008afe:	46b1      	mov	r9, r6
 8008b00:	9610      	str	r6, [sp, #64]	; 0x40
 8008b02:	4637      	mov	r7, r6
 8008b04:	9607      	str	r6, [sp, #28]
 8008b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b08:	42ab      	cmp	r3, r5
 8008b0a:	bfb8      	it	lt
 8008b0c:	462b      	movlt	r3, r5
 8008b0e:	9311      	str	r3, [sp, #68]	; 0x44
 8008b10:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8008b14:	b113      	cbz	r3, 8008b1c <_svfprintf_r+0x9fc>
 8008b16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b18:	3301      	adds	r3, #1
 8008b1a:	9311      	str	r3, [sp, #68]	; 0x44
 8008b1c:	f01a 0302 	ands.w	r3, sl, #2
 8008b20:	931c      	str	r3, [sp, #112]	; 0x70
 8008b22:	bf1e      	ittt	ne
 8008b24:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 8008b26:	3302      	addne	r3, #2
 8008b28:	9311      	strne	r3, [sp, #68]	; 0x44
 8008b2a:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 8008b2e:	931d      	str	r3, [sp, #116]	; 0x74
 8008b30:	d122      	bne.n	8008b78 <_svfprintf_r+0xa58>
 8008b32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b34:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b36:	1a9b      	subs	r3, r3, r2
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	9313      	str	r3, [sp, #76]	; 0x4c
 8008b3c:	dd1c      	ble.n	8008b78 <_svfprintf_r+0xa58>
 8008b3e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008b40:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8008b44:	2810      	cmp	r0, #16
 8008b46:	4890      	ldr	r0, [pc, #576]	; (8008d88 <_svfprintf_r+0xc68>)
 8008b48:	6020      	str	r0, [r4, #0]
 8008b4a:	f102 0201 	add.w	r2, r2, #1
 8008b4e:	f104 0108 	add.w	r1, r4, #8
 8008b52:	f300 8188 	bgt.w	8008e66 <_svfprintf_r+0xd46>
 8008b56:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008b58:	6060      	str	r0, [r4, #4]
 8008b5a:	4403      	add	r3, r0
 8008b5c:	2a07      	cmp	r2, #7
 8008b5e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8008b62:	f340 8195 	ble.w	8008e90 <_svfprintf_r+0xd70>
 8008b66:	aa26      	add	r2, sp, #152	; 0x98
 8008b68:	4641      	mov	r1, r8
 8008b6a:	9803      	ldr	r0, [sp, #12]
 8008b6c:	f002 f9be 	bl	800aeec <__ssprint_r>
 8008b70:	2800      	cmp	r0, #0
 8008b72:	f040 84c1 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8008b76:	ac29      	add	r4, sp, #164	; 0xa4
 8008b78:	f89d 307b 	ldrb.w	r3, [sp, #123]	; 0x7b
 8008b7c:	b173      	cbz	r3, 8008b9c <_svfprintf_r+0xa7c>
 8008b7e:	f10d 037b 	add.w	r3, sp, #123	; 0x7b
 8008b82:	6023      	str	r3, [r4, #0]
 8008b84:	2301      	movs	r3, #1
 8008b86:	6063      	str	r3, [r4, #4]
 8008b88:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008b8a:	3301      	adds	r3, #1
 8008b8c:	9328      	str	r3, [sp, #160]	; 0xa0
 8008b8e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008b90:	3301      	adds	r3, #1
 8008b92:	2b07      	cmp	r3, #7
 8008b94:	9327      	str	r3, [sp, #156]	; 0x9c
 8008b96:	f300 817d 	bgt.w	8008e94 <_svfprintf_r+0xd74>
 8008b9a:	3408      	adds	r4, #8
 8008b9c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8008b9e:	b16b      	cbz	r3, 8008bbc <_svfprintf_r+0xa9c>
 8008ba0:	ab1f      	add	r3, sp, #124	; 0x7c
 8008ba2:	6023      	str	r3, [r4, #0]
 8008ba4:	2302      	movs	r3, #2
 8008ba6:	6063      	str	r3, [r4, #4]
 8008ba8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008baa:	3302      	adds	r3, #2
 8008bac:	9328      	str	r3, [sp, #160]	; 0xa0
 8008bae:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008bb0:	3301      	adds	r3, #1
 8008bb2:	2b07      	cmp	r3, #7
 8008bb4:	9327      	str	r3, [sp, #156]	; 0x9c
 8008bb6:	f300 8177 	bgt.w	8008ea8 <_svfprintf_r+0xd88>
 8008bba:	3408      	adds	r4, #8
 8008bbc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bbe:	2b80      	cmp	r3, #128	; 0x80
 8008bc0:	d122      	bne.n	8008c08 <_svfprintf_r+0xae8>
 8008bc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008bc4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008bc6:	1a9b      	subs	r3, r3, r2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	9313      	str	r3, [sp, #76]	; 0x4c
 8008bcc:	dd1c      	ble.n	8008c08 <_svfprintf_r+0xae8>
 8008bce:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008bd0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8008bd4:	2810      	cmp	r0, #16
 8008bd6:	486d      	ldr	r0, [pc, #436]	; (8008d8c <_svfprintf_r+0xc6c>)
 8008bd8:	6020      	str	r0, [r4, #0]
 8008bda:	f102 0201 	add.w	r2, r2, #1
 8008bde:	f104 0108 	add.w	r1, r4, #8
 8008be2:	f300 816b 	bgt.w	8008ebc <_svfprintf_r+0xd9c>
 8008be6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8008be8:	6060      	str	r0, [r4, #4]
 8008bea:	4403      	add	r3, r0
 8008bec:	2a07      	cmp	r2, #7
 8008bee:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8008bf2:	f340 8178 	ble.w	8008ee6 <_svfprintf_r+0xdc6>
 8008bf6:	aa26      	add	r2, sp, #152	; 0x98
 8008bf8:	4641      	mov	r1, r8
 8008bfa:	9803      	ldr	r0, [sp, #12]
 8008bfc:	f002 f976 	bl	800aeec <__ssprint_r>
 8008c00:	2800      	cmp	r0, #0
 8008c02:	f040 8479 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8008c06:	ac29      	add	r4, sp, #164	; 0xa4
 8008c08:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008c0a:	1b5b      	subs	r3, r3, r5
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	9310      	str	r3, [sp, #64]	; 0x40
 8008c10:	dd1c      	ble.n	8008c4c <_svfprintf_r+0xb2c>
 8008c12:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c14:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 8008c18:	2810      	cmp	r0, #16
 8008c1a:	485c      	ldr	r0, [pc, #368]	; (8008d8c <_svfprintf_r+0xc6c>)
 8008c1c:	6020      	str	r0, [r4, #0]
 8008c1e:	f102 0201 	add.w	r2, r2, #1
 8008c22:	f104 0108 	add.w	r1, r4, #8
 8008c26:	f300 8160 	bgt.w	8008eea <_svfprintf_r+0xdca>
 8008c2a:	9810      	ldr	r0, [sp, #64]	; 0x40
 8008c2c:	6060      	str	r0, [r4, #4]
 8008c2e:	4403      	add	r3, r0
 8008c30:	2a07      	cmp	r2, #7
 8008c32:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8008c36:	f340 816d 	ble.w	8008f14 <_svfprintf_r+0xdf4>
 8008c3a:	aa26      	add	r2, sp, #152	; 0x98
 8008c3c:	4641      	mov	r1, r8
 8008c3e:	9803      	ldr	r0, [sp, #12]
 8008c40:	f002 f954 	bl	800aeec <__ssprint_r>
 8008c44:	2800      	cmp	r0, #0
 8008c46:	f040 8457 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8008c4a:	ac29      	add	r4, sp, #164	; 0xa4
 8008c4c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008c4e:	9310      	str	r3, [sp, #64]	; 0x40
 8008c50:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008c54:	f040 8160 	bne.w	8008f18 <_svfprintf_r+0xdf8>
 8008c58:	e9c4 b500 	strd	fp, r5, [r4]
 8008c5c:	441d      	add	r5, r3
 8008c5e:	9528      	str	r5, [sp, #160]	; 0xa0
 8008c60:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008c62:	3301      	adds	r3, #1
 8008c64:	2b07      	cmp	r3, #7
 8008c66:	9327      	str	r3, [sp, #156]	; 0x9c
 8008c68:	f300 819c 	bgt.w	8008fa4 <_svfprintf_r+0xe84>
 8008c6c:	3408      	adds	r4, #8
 8008c6e:	f01a 0f04 	tst.w	sl, #4
 8008c72:	f040 8423 	bne.w	80094bc <_svfprintf_r+0x139c>
 8008c76:	e9dd 320e 	ldrd	r3, r2, [sp, #56]	; 0x38
 8008c7a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8008c7c:	428a      	cmp	r2, r1
 8008c7e:	bfac      	ite	ge
 8008c80:	189b      	addge	r3, r3, r2
 8008c82:	185b      	addlt	r3, r3, r1
 8008c84:	930e      	str	r3, [sp, #56]	; 0x38
 8008c86:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008c88:	b13b      	cbz	r3, 8008c9a <_svfprintf_r+0xb7a>
 8008c8a:	aa26      	add	r2, sp, #152	; 0x98
 8008c8c:	4641      	mov	r1, r8
 8008c8e:	9803      	ldr	r0, [sp, #12]
 8008c90:	f002 f92c 	bl	800aeec <__ssprint_r>
 8008c94:	2800      	cmp	r0, #0
 8008c96:	f040 842f 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	9327      	str	r3, [sp, #156]	; 0x9c
 8008c9e:	f1b9 0f00 	cmp.w	r9, #0
 8008ca2:	f040 8445 	bne.w	8009530 <_svfprintf_r+0x1410>
 8008ca6:	ac29      	add	r4, sp, #164	; 0xa4
 8008ca8:	e6b7      	b.n	8008a1a <_svfprintf_r+0x8fa>
 8008caa:	4658      	mov	r0, fp
 8008cac:	f7f7 fa98 	bl	80001e0 <strlen>
 8008cb0:	46b1      	mov	r9, r6
 8008cb2:	4605      	mov	r5, r0
 8008cb4:	e495      	b.n	80085e2 <_svfprintf_r+0x4c2>
 8008cb6:	f04a 0a10 	orr.w	sl, sl, #16
 8008cba:	f01a 0f20 	tst.w	sl, #32
 8008cbe:	d009      	beq.n	8008cd4 <_svfprintf_r+0xbb4>
 8008cc0:	3607      	adds	r6, #7
 8008cc2:	f026 0607 	bic.w	r6, r6, #7
 8008cc6:	f106 0308 	add.w	r3, r6, #8
 8008cca:	e9d6 6700 	ldrd	r6, r7, [r6]
 8008cce:	9308      	str	r3, [sp, #32]
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	e6c9      	b.n	8008a68 <_svfprintf_r+0x948>
 8008cd4:	1d33      	adds	r3, r6, #4
 8008cd6:	f01a 0f10 	tst.w	sl, #16
 8008cda:	9308      	str	r3, [sp, #32]
 8008cdc:	d001      	beq.n	8008ce2 <_svfprintf_r+0xbc2>
 8008cde:	6836      	ldr	r6, [r6, #0]
 8008ce0:	e003      	b.n	8008cea <_svfprintf_r+0xbca>
 8008ce2:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008ce6:	d002      	beq.n	8008cee <_svfprintf_r+0xbce>
 8008ce8:	8836      	ldrh	r6, [r6, #0]
 8008cea:	2700      	movs	r7, #0
 8008cec:	e7f0      	b.n	8008cd0 <_svfprintf_r+0xbb0>
 8008cee:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008cf2:	d0f4      	beq.n	8008cde <_svfprintf_r+0xbbe>
 8008cf4:	7836      	ldrb	r6, [r6, #0]
 8008cf6:	e7f8      	b.n	8008cea <_svfprintf_r+0xbca>
 8008cf8:	4b22      	ldr	r3, [pc, #136]	; (8008d84 <_svfprintf_r+0xc64>)
 8008cfa:	f7ff bb48 	b.w	800838e <_svfprintf_r+0x26e>
 8008cfe:	1d33      	adds	r3, r6, #4
 8008d00:	f01a 0f10 	tst.w	sl, #16
 8008d04:	9308      	str	r3, [sp, #32]
 8008d06:	d001      	beq.n	8008d0c <_svfprintf_r+0xbec>
 8008d08:	6836      	ldr	r6, [r6, #0]
 8008d0a:	e003      	b.n	8008d14 <_svfprintf_r+0xbf4>
 8008d0c:	f01a 0f40 	tst.w	sl, #64	; 0x40
 8008d10:	d003      	beq.n	8008d1a <_svfprintf_r+0xbfa>
 8008d12:	8836      	ldrh	r6, [r6, #0]
 8008d14:	2700      	movs	r7, #0
 8008d16:	f7ff bb47 	b.w	80083a8 <_svfprintf_r+0x288>
 8008d1a:	f41a 7f00 	tst.w	sl, #512	; 0x200
 8008d1e:	d0f3      	beq.n	8008d08 <_svfprintf_r+0xbe8>
 8008d20:	7836      	ldrb	r6, [r6, #0]
 8008d22:	e7f7      	b.n	8008d14 <_svfprintf_r+0xbf4>
 8008d24:	4652      	mov	r2, sl
 8008d26:	2301      	movs	r3, #1
 8008d28:	e6a5      	b.n	8008a76 <_svfprintf_r+0x956>
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	f43f ac04 	beq.w	8008538 <_svfprintf_r+0x418>
 8008d30:	2b02      	cmp	r3, #2
 8008d32:	d06c      	beq.n	8008e0e <_svfprintf_r+0xcee>
 8008d34:	ab52      	add	r3, sp, #328	; 0x148
 8008d36:	08f1      	lsrs	r1, r6, #3
 8008d38:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8008d3c:	08f8      	lsrs	r0, r7, #3
 8008d3e:	f006 0207 	and.w	r2, r6, #7
 8008d42:	4607      	mov	r7, r0
 8008d44:	460e      	mov	r6, r1
 8008d46:	3230      	adds	r2, #48	; 0x30
 8008d48:	ea56 0107 	orrs.w	r1, r6, r7
 8008d4c:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 8008d50:	f803 2c01 	strb.w	r2, [r3, #-1]
 8008d54:	d114      	bne.n	8008d80 <_svfprintf_r+0xc60>
 8008d56:	f01a 0f01 	tst.w	sl, #1
 8008d5a:	d006      	beq.n	8008d6a <_svfprintf_r+0xc4a>
 8008d5c:	2a30      	cmp	r2, #48	; 0x30
 8008d5e:	d004      	beq.n	8008d6a <_svfprintf_r+0xc4a>
 8008d60:	2230      	movs	r2, #48	; 0x30
 8008d62:	f80b 2c01 	strb.w	r2, [fp, #-1]
 8008d66:	f1a3 0b02 	sub.w	fp, r3, #2
 8008d6a:	ab52      	add	r3, sp, #328	; 0x148
 8008d6c:	9510      	str	r5, [sp, #64]	; 0x40
 8008d6e:	f04f 0900 	mov.w	r9, #0
 8008d72:	eba3 050b 	sub.w	r5, r3, fp
 8008d76:	464f      	mov	r7, r9
 8008d78:	f8cd 901c 	str.w	r9, [sp, #28]
 8008d7c:	464e      	mov	r6, r9
 8008d7e:	e6c2      	b.n	8008b06 <_svfprintf_r+0x9e6>
 8008d80:	465b      	mov	r3, fp
 8008d82:	e7d8      	b.n	8008d36 <_svfprintf_r+0xc16>
 8008d84:	0800d634 	.word	0x0800d634
 8008d88:	0800d658 	.word	0x0800d658
 8008d8c:	0800d668 	.word	0x0800d668
 8008d90:	2300      	movs	r3, #0
 8008d92:	9304      	str	r3, [sp, #16]
 8008d94:	f40a 6380 	and.w	r3, sl, #1024	; 0x400
 8008d98:	f50d 79a4 	add.w	r9, sp, #328	; 0x148
 8008d9c:	9307      	str	r3, [sp, #28]
 8008d9e:	220a      	movs	r2, #10
 8008da0:	2300      	movs	r3, #0
 8008da2:	4630      	mov	r0, r6
 8008da4:	4639      	mov	r1, r7
 8008da6:	f7f7 ff07 	bl	8000bb8 <__aeabi_uldivmod>
 8008daa:	9b04      	ldr	r3, [sp, #16]
 8008dac:	3301      	adds	r3, #1
 8008dae:	9304      	str	r3, [sp, #16]
 8008db0:	9b07      	ldr	r3, [sp, #28]
 8008db2:	3230      	adds	r2, #48	; 0x30
 8008db4:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008db8:	f809 2c01 	strb.w	r2, [r9, #-1]
 8008dbc:	b1d3      	cbz	r3, 8008df4 <_svfprintf_r+0xcd4>
 8008dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dc0:	9a04      	ldr	r2, [sp, #16]
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d115      	bne.n	8008df4 <_svfprintf_r+0xcd4>
 8008dc8:	2aff      	cmp	r2, #255	; 0xff
 8008dca:	d013      	beq.n	8008df4 <_svfprintf_r+0xcd4>
 8008dcc:	2f00      	cmp	r7, #0
 8008dce:	bf08      	it	eq
 8008dd0:	2e0a      	cmpeq	r6, #10
 8008dd2:	d30f      	bcc.n	8008df4 <_svfprintf_r+0xcd4>
 8008dd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008dd6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8008dd8:	ebab 0b03 	sub.w	fp, fp, r3
 8008ddc:	461a      	mov	r2, r3
 8008dde:	4658      	mov	r0, fp
 8008de0:	f7ff f8f5 	bl	8007fce <strncpy>
 8008de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de6:	785b      	ldrb	r3, [r3, #1]
 8008de8:	b11b      	cbz	r3, 8008df2 <_svfprintf_r+0xcd2>
 8008dea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dec:	3301      	adds	r3, #1
 8008dee:	9309      	str	r3, [sp, #36]	; 0x24
 8008df0:	2300      	movs	r3, #0
 8008df2:	9304      	str	r3, [sp, #16]
 8008df4:	2300      	movs	r3, #0
 8008df6:	4630      	mov	r0, r6
 8008df8:	4639      	mov	r1, r7
 8008dfa:	220a      	movs	r2, #10
 8008dfc:	f7f7 fedc 	bl	8000bb8 <__aeabi_uldivmod>
 8008e00:	4606      	mov	r6, r0
 8008e02:	460f      	mov	r7, r1
 8008e04:	ea56 0307 	orrs.w	r3, r6, r7
 8008e08:	d0af      	beq.n	8008d6a <_svfprintf_r+0xc4a>
 8008e0a:	46d9      	mov	r9, fp
 8008e0c:	e7c7      	b.n	8008d9e <_svfprintf_r+0xc7e>
 8008e0e:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8008e12:	f006 030f 	and.w	r3, r6, #15
 8008e16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008e18:	5cd3      	ldrb	r3, [r2, r3]
 8008e1a:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 8008e1e:	0933      	lsrs	r3, r6, #4
 8008e20:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8008e24:	093a      	lsrs	r2, r7, #4
 8008e26:	461e      	mov	r6, r3
 8008e28:	4617      	mov	r7, r2
 8008e2a:	ea56 0307 	orrs.w	r3, r6, r7
 8008e2e:	d1f0      	bne.n	8008e12 <_svfprintf_r+0xcf2>
 8008e30:	e79b      	b.n	8008d6a <_svfprintf_r+0xc4a>
 8008e32:	f50d 7ba4 	add.w	fp, sp, #328	; 0x148
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d197      	bne.n	8008d6a <_svfprintf_r+0xc4a>
 8008e3a:	07d2      	lsls	r2, r2, #31
 8008e3c:	bf44      	itt	mi
 8008e3e:	2330      	movmi	r3, #48	; 0x30
 8008e40:	f80b 3d01 	strbmi.w	r3, [fp, #-1]!
 8008e44:	e791      	b.n	8008d6a <_svfprintf_r+0xc4a>
 8008e46:	9b06      	ldr	r3, [sp, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	f000 8377 	beq.w	800953c <_svfprintf_r+0x141c>
 8008e4e:	2000      	movs	r0, #0
 8008e50:	f88d 30e4 	strb.w	r3, [sp, #228]	; 0xe4
 8008e54:	f88d 007b 	strb.w	r0, [sp, #123]	; 0x7b
 8008e58:	9608      	str	r6, [sp, #32]
 8008e5a:	f7ff bb49 	b.w	80084f0 <_svfprintf_r+0x3d0>
 8008e5e:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8008e62:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e64:	e4ec      	b.n	8008840 <_svfprintf_r+0x720>
 8008e66:	2010      	movs	r0, #16
 8008e68:	4403      	add	r3, r0
 8008e6a:	2a07      	cmp	r2, #7
 8008e6c:	6060      	str	r0, [r4, #4]
 8008e6e:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8008e72:	dd08      	ble.n	8008e86 <_svfprintf_r+0xd66>
 8008e74:	aa26      	add	r2, sp, #152	; 0x98
 8008e76:	4641      	mov	r1, r8
 8008e78:	9803      	ldr	r0, [sp, #12]
 8008e7a:	f002 f837 	bl	800aeec <__ssprint_r>
 8008e7e:	2800      	cmp	r0, #0
 8008e80:	f040 833a 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8008e84:	a929      	add	r1, sp, #164	; 0xa4
 8008e86:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e88:	3b10      	subs	r3, #16
 8008e8a:	9313      	str	r3, [sp, #76]	; 0x4c
 8008e8c:	460c      	mov	r4, r1
 8008e8e:	e656      	b.n	8008b3e <_svfprintf_r+0xa1e>
 8008e90:	460c      	mov	r4, r1
 8008e92:	e671      	b.n	8008b78 <_svfprintf_r+0xa58>
 8008e94:	aa26      	add	r2, sp, #152	; 0x98
 8008e96:	4641      	mov	r1, r8
 8008e98:	9803      	ldr	r0, [sp, #12]
 8008e9a:	f002 f827 	bl	800aeec <__ssprint_r>
 8008e9e:	2800      	cmp	r0, #0
 8008ea0:	f040 832a 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8008ea4:	ac29      	add	r4, sp, #164	; 0xa4
 8008ea6:	e679      	b.n	8008b9c <_svfprintf_r+0xa7c>
 8008ea8:	aa26      	add	r2, sp, #152	; 0x98
 8008eaa:	4641      	mov	r1, r8
 8008eac:	9803      	ldr	r0, [sp, #12]
 8008eae:	f002 f81d 	bl	800aeec <__ssprint_r>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	f040 8320 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8008eb8:	ac29      	add	r4, sp, #164	; 0xa4
 8008eba:	e67f      	b.n	8008bbc <_svfprintf_r+0xa9c>
 8008ebc:	2010      	movs	r0, #16
 8008ebe:	4403      	add	r3, r0
 8008ec0:	2a07      	cmp	r2, #7
 8008ec2:	6060      	str	r0, [r4, #4]
 8008ec4:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8008ec8:	dd08      	ble.n	8008edc <_svfprintf_r+0xdbc>
 8008eca:	aa26      	add	r2, sp, #152	; 0x98
 8008ecc:	4641      	mov	r1, r8
 8008ece:	9803      	ldr	r0, [sp, #12]
 8008ed0:	f002 f80c 	bl	800aeec <__ssprint_r>
 8008ed4:	2800      	cmp	r0, #0
 8008ed6:	f040 830f 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8008eda:	a929      	add	r1, sp, #164	; 0xa4
 8008edc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008ede:	3b10      	subs	r3, #16
 8008ee0:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ee2:	460c      	mov	r4, r1
 8008ee4:	e673      	b.n	8008bce <_svfprintf_r+0xaae>
 8008ee6:	460c      	mov	r4, r1
 8008ee8:	e68e      	b.n	8008c08 <_svfprintf_r+0xae8>
 8008eea:	2010      	movs	r0, #16
 8008eec:	4403      	add	r3, r0
 8008eee:	2a07      	cmp	r2, #7
 8008ef0:	6060      	str	r0, [r4, #4]
 8008ef2:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8008ef6:	dd08      	ble.n	8008f0a <_svfprintf_r+0xdea>
 8008ef8:	aa26      	add	r2, sp, #152	; 0x98
 8008efa:	4641      	mov	r1, r8
 8008efc:	9803      	ldr	r0, [sp, #12]
 8008efe:	f001 fff5 	bl	800aeec <__ssprint_r>
 8008f02:	2800      	cmp	r0, #0
 8008f04:	f040 82f8 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8008f08:	a929      	add	r1, sp, #164	; 0xa4
 8008f0a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f0c:	3b10      	subs	r3, #16
 8008f0e:	9310      	str	r3, [sp, #64]	; 0x40
 8008f10:	460c      	mov	r4, r1
 8008f12:	e67e      	b.n	8008c12 <_svfprintf_r+0xaf2>
 8008f14:	460c      	mov	r4, r1
 8008f16:	e699      	b.n	8008c4c <_svfprintf_r+0xb2c>
 8008f18:	9b06      	ldr	r3, [sp, #24]
 8008f1a:	2b65      	cmp	r3, #101	; 0x65
 8008f1c:	f340 8234 	ble.w	8009388 <_svfprintf_r+0x1268>
 8008f20:	2200      	movs	r2, #0
 8008f22:	2300      	movs	r3, #0
 8008f24:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8008f28:	f7f7 fdd6 	bl	8000ad8 <__aeabi_dcmpeq>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	d069      	beq.n	8009004 <_svfprintf_r+0xee4>
 8008f30:	4b6e      	ldr	r3, [pc, #440]	; (80090ec <_svfprintf_r+0xfcc>)
 8008f32:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	2301      	movs	r3, #1
 8008f38:	441d      	add	r5, r3
 8008f3a:	6063      	str	r3, [r4, #4]
 8008f3c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008f3e:	9528      	str	r5, [sp, #160]	; 0xa0
 8008f40:	3301      	adds	r3, #1
 8008f42:	2b07      	cmp	r3, #7
 8008f44:	9327      	str	r3, [sp, #156]	; 0x9c
 8008f46:	dc37      	bgt.n	8008fb8 <_svfprintf_r+0xe98>
 8008f48:	3408      	adds	r4, #8
 8008f4a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f4c:	9a04      	ldr	r2, [sp, #16]
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	db03      	blt.n	8008f5a <_svfprintf_r+0xe3a>
 8008f52:	f01a 0f01 	tst.w	sl, #1
 8008f56:	f43f ae8a 	beq.w	8008c6e <_svfprintf_r+0xb4e>
 8008f5a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f60:	6063      	str	r3, [r4, #4]
 8008f62:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f64:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008f66:	4413      	add	r3, r2
 8008f68:	9328      	str	r3, [sp, #160]	; 0xa0
 8008f6a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	2b07      	cmp	r3, #7
 8008f70:	9327      	str	r3, [sp, #156]	; 0x9c
 8008f72:	dc2b      	bgt.n	8008fcc <_svfprintf_r+0xeac>
 8008f74:	3408      	adds	r4, #8
 8008f76:	9b04      	ldr	r3, [sp, #16]
 8008f78:	1e5d      	subs	r5, r3, #1
 8008f7a:	2d00      	cmp	r5, #0
 8008f7c:	f77f ae77 	ble.w	8008c6e <_svfprintf_r+0xb4e>
 8008f80:	4e5b      	ldr	r6, [pc, #364]	; (80090f0 <_svfprintf_r+0xfd0>)
 8008f82:	2710      	movs	r7, #16
 8008f84:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8008f88:	2d10      	cmp	r5, #16
 8008f8a:	f103 0301 	add.w	r3, r3, #1
 8008f8e:	f104 0108 	add.w	r1, r4, #8
 8008f92:	6026      	str	r6, [r4, #0]
 8008f94:	dc24      	bgt.n	8008fe0 <_svfprintf_r+0xec0>
 8008f96:	6065      	str	r5, [r4, #4]
 8008f98:	2b07      	cmp	r3, #7
 8008f9a:	4415      	add	r5, r2
 8008f9c:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8008fa0:	f340 8289 	ble.w	80094b6 <_svfprintf_r+0x1396>
 8008fa4:	aa26      	add	r2, sp, #152	; 0x98
 8008fa6:	4641      	mov	r1, r8
 8008fa8:	9803      	ldr	r0, [sp, #12]
 8008faa:	f001 ff9f 	bl	800aeec <__ssprint_r>
 8008fae:	2800      	cmp	r0, #0
 8008fb0:	f040 82a2 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8008fb4:	ac29      	add	r4, sp, #164	; 0xa4
 8008fb6:	e65a      	b.n	8008c6e <_svfprintf_r+0xb4e>
 8008fb8:	aa26      	add	r2, sp, #152	; 0x98
 8008fba:	4641      	mov	r1, r8
 8008fbc:	9803      	ldr	r0, [sp, #12]
 8008fbe:	f001 ff95 	bl	800aeec <__ssprint_r>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	f040 8298 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8008fc8:	ac29      	add	r4, sp, #164	; 0xa4
 8008fca:	e7be      	b.n	8008f4a <_svfprintf_r+0xe2a>
 8008fcc:	aa26      	add	r2, sp, #152	; 0x98
 8008fce:	4641      	mov	r1, r8
 8008fd0:	9803      	ldr	r0, [sp, #12]
 8008fd2:	f001 ff8b 	bl	800aeec <__ssprint_r>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f040 828e 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8008fdc:	ac29      	add	r4, sp, #164	; 0xa4
 8008fde:	e7ca      	b.n	8008f76 <_svfprintf_r+0xe56>
 8008fe0:	3210      	adds	r2, #16
 8008fe2:	2b07      	cmp	r3, #7
 8008fe4:	6067      	str	r7, [r4, #4]
 8008fe6:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8008fea:	dd08      	ble.n	8008ffe <_svfprintf_r+0xede>
 8008fec:	aa26      	add	r2, sp, #152	; 0x98
 8008fee:	4641      	mov	r1, r8
 8008ff0:	9803      	ldr	r0, [sp, #12]
 8008ff2:	f001 ff7b 	bl	800aeec <__ssprint_r>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	f040 827e 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8008ffc:	a929      	add	r1, sp, #164	; 0xa4
 8008ffe:	3d10      	subs	r5, #16
 8009000:	460c      	mov	r4, r1
 8009002:	e7bf      	b.n	8008f84 <_svfprintf_r+0xe64>
 8009004:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009006:	2b00      	cmp	r3, #0
 8009008:	dc74      	bgt.n	80090f4 <_svfprintf_r+0xfd4>
 800900a:	4b38      	ldr	r3, [pc, #224]	; (80090ec <_svfprintf_r+0xfcc>)
 800900c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800900e:	6023      	str	r3, [r4, #0]
 8009010:	2301      	movs	r3, #1
 8009012:	441d      	add	r5, r3
 8009014:	6063      	str	r3, [r4, #4]
 8009016:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009018:	9528      	str	r5, [sp, #160]	; 0xa0
 800901a:	3301      	adds	r3, #1
 800901c:	2b07      	cmp	r3, #7
 800901e:	9327      	str	r3, [sp, #156]	; 0x9c
 8009020:	dc3e      	bgt.n	80090a0 <_svfprintf_r+0xf80>
 8009022:	3408      	adds	r4, #8
 8009024:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009026:	b92b      	cbnz	r3, 8009034 <_svfprintf_r+0xf14>
 8009028:	9b04      	ldr	r3, [sp, #16]
 800902a:	b91b      	cbnz	r3, 8009034 <_svfprintf_r+0xf14>
 800902c:	f01a 0f01 	tst.w	sl, #1
 8009030:	f43f ae1d 	beq.w	8008c6e <_svfprintf_r+0xb4e>
 8009034:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009036:	6023      	str	r3, [r4, #0]
 8009038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800903a:	6063      	str	r3, [r4, #4]
 800903c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800903e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009040:	4413      	add	r3, r2
 8009042:	9328      	str	r3, [sp, #160]	; 0xa0
 8009044:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009046:	3301      	adds	r3, #1
 8009048:	2b07      	cmp	r3, #7
 800904a:	9327      	str	r3, [sp, #156]	; 0x9c
 800904c:	dc32      	bgt.n	80090b4 <_svfprintf_r+0xf94>
 800904e:	3408      	adds	r4, #8
 8009050:	9d20      	ldr	r5, [sp, #128]	; 0x80
 8009052:	2d00      	cmp	r5, #0
 8009054:	da1b      	bge.n	800908e <_svfprintf_r+0xf6e>
 8009056:	4e26      	ldr	r6, [pc, #152]	; (80090f0 <_svfprintf_r+0xfd0>)
 8009058:	426d      	negs	r5, r5
 800905a:	4623      	mov	r3, r4
 800905c:	2710      	movs	r7, #16
 800905e:	e9dd 2127 	ldrd	r2, r1, [sp, #156]	; 0x9c
 8009062:	2d10      	cmp	r5, #16
 8009064:	f102 0201 	add.w	r2, r2, #1
 8009068:	f104 0408 	add.w	r4, r4, #8
 800906c:	601e      	str	r6, [r3, #0]
 800906e:	dc2b      	bgt.n	80090c8 <_svfprintf_r+0xfa8>
 8009070:	605d      	str	r5, [r3, #4]
 8009072:	2a07      	cmp	r2, #7
 8009074:	440d      	add	r5, r1
 8009076:	e9cd 2527 	strd	r2, r5, [sp, #156]	; 0x9c
 800907a:	dd08      	ble.n	800908e <_svfprintf_r+0xf6e>
 800907c:	aa26      	add	r2, sp, #152	; 0x98
 800907e:	4641      	mov	r1, r8
 8009080:	9803      	ldr	r0, [sp, #12]
 8009082:	f001 ff33 	bl	800aeec <__ssprint_r>
 8009086:	2800      	cmp	r0, #0
 8009088:	f040 8236 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 800908c:	ac29      	add	r4, sp, #164	; 0xa4
 800908e:	9b04      	ldr	r3, [sp, #16]
 8009090:	6063      	str	r3, [r4, #4]
 8009092:	9a04      	ldr	r2, [sp, #16]
 8009094:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009096:	f8c4 b000 	str.w	fp, [r4]
 800909a:	4413      	add	r3, r2
 800909c:	9328      	str	r3, [sp, #160]	; 0xa0
 800909e:	e5df      	b.n	8008c60 <_svfprintf_r+0xb40>
 80090a0:	aa26      	add	r2, sp, #152	; 0x98
 80090a2:	4641      	mov	r1, r8
 80090a4:	9803      	ldr	r0, [sp, #12]
 80090a6:	f001 ff21 	bl	800aeec <__ssprint_r>
 80090aa:	2800      	cmp	r0, #0
 80090ac:	f040 8224 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 80090b0:	ac29      	add	r4, sp, #164	; 0xa4
 80090b2:	e7b7      	b.n	8009024 <_svfprintf_r+0xf04>
 80090b4:	aa26      	add	r2, sp, #152	; 0x98
 80090b6:	4641      	mov	r1, r8
 80090b8:	9803      	ldr	r0, [sp, #12]
 80090ba:	f001 ff17 	bl	800aeec <__ssprint_r>
 80090be:	2800      	cmp	r0, #0
 80090c0:	f040 821a 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 80090c4:	ac29      	add	r4, sp, #164	; 0xa4
 80090c6:	e7c3      	b.n	8009050 <_svfprintf_r+0xf30>
 80090c8:	3110      	adds	r1, #16
 80090ca:	2a07      	cmp	r2, #7
 80090cc:	605f      	str	r7, [r3, #4]
 80090ce:	e9cd 2127 	strd	r2, r1, [sp, #156]	; 0x9c
 80090d2:	dd08      	ble.n	80090e6 <_svfprintf_r+0xfc6>
 80090d4:	aa26      	add	r2, sp, #152	; 0x98
 80090d6:	4641      	mov	r1, r8
 80090d8:	9803      	ldr	r0, [sp, #12]
 80090da:	f001 ff07 	bl	800aeec <__ssprint_r>
 80090de:	2800      	cmp	r0, #0
 80090e0:	f040 820a 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 80090e4:	ac29      	add	r4, sp, #164	; 0xa4
 80090e6:	3d10      	subs	r5, #16
 80090e8:	4623      	mov	r3, r4
 80090ea:	e7b8      	b.n	800905e <_svfprintf_r+0xf3e>
 80090ec:	0800d656 	.word	0x0800d656
 80090f0:	0800d668 	.word	0x0800d668
 80090f4:	9b04      	ldr	r3, [sp, #16]
 80090f6:	42b3      	cmp	r3, r6
 80090f8:	bfa8      	it	ge
 80090fa:	4633      	movge	r3, r6
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	461d      	mov	r5, r3
 8009100:	dd0b      	ble.n	800911a <_svfprintf_r+0xffa>
 8009102:	e9c4 b300 	strd	fp, r3, [r4]
 8009106:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009108:	442b      	add	r3, r5
 800910a:	9328      	str	r3, [sp, #160]	; 0xa0
 800910c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800910e:	3301      	adds	r3, #1
 8009110:	2b07      	cmp	r3, #7
 8009112:	9327      	str	r3, [sp, #156]	; 0x9c
 8009114:	f300 8086 	bgt.w	8009224 <_svfprintf_r+0x1104>
 8009118:	3408      	adds	r4, #8
 800911a:	2d00      	cmp	r5, #0
 800911c:	bfac      	ite	ge
 800911e:	1b75      	subge	r5, r6, r5
 8009120:	4635      	movlt	r5, r6
 8009122:	2d00      	cmp	r5, #0
 8009124:	dd19      	ble.n	800915a <_svfprintf_r+0x103a>
 8009126:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 800912a:	4896      	ldr	r0, [pc, #600]	; (8009384 <_svfprintf_r+0x1264>)
 800912c:	6020      	str	r0, [r4, #0]
 800912e:	2d10      	cmp	r5, #16
 8009130:	f103 0301 	add.w	r3, r3, #1
 8009134:	f104 0108 	add.w	r1, r4, #8
 8009138:	dc7e      	bgt.n	8009238 <_svfprintf_r+0x1118>
 800913a:	6065      	str	r5, [r4, #4]
 800913c:	2b07      	cmp	r3, #7
 800913e:	4415      	add	r5, r2
 8009140:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 8009144:	f340 808b 	ble.w	800925e <_svfprintf_r+0x113e>
 8009148:	aa26      	add	r2, sp, #152	; 0x98
 800914a:	4641      	mov	r1, r8
 800914c:	9803      	ldr	r0, [sp, #12]
 800914e:	f001 fecd 	bl	800aeec <__ssprint_r>
 8009152:	2800      	cmp	r0, #0
 8009154:	f040 81d0 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8009158:	ac29      	add	r4, sp, #164	; 0xa4
 800915a:	f41a 6f80 	tst.w	sl, #1024	; 0x400
 800915e:	445e      	add	r6, fp
 8009160:	d009      	beq.n	8009176 <_svfprintf_r+0x1056>
 8009162:	9b07      	ldr	r3, [sp, #28]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d17c      	bne.n	8009262 <_svfprintf_r+0x1142>
 8009168:	2f00      	cmp	r7, #0
 800916a:	d17c      	bne.n	8009266 <_svfprintf_r+0x1146>
 800916c:	9b04      	ldr	r3, [sp, #16]
 800916e:	445b      	add	r3, fp
 8009170:	429e      	cmp	r6, r3
 8009172:	bf28      	it	cs
 8009174:	461e      	movcs	r6, r3
 8009176:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009178:	9a04      	ldr	r2, [sp, #16]
 800917a:	4293      	cmp	r3, r2
 800917c:	db02      	blt.n	8009184 <_svfprintf_r+0x1064>
 800917e:	f01a 0f01 	tst.w	sl, #1
 8009182:	d00e      	beq.n	80091a2 <_svfprintf_r+0x1082>
 8009184:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009186:	6023      	str	r3, [r4, #0]
 8009188:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800918a:	6063      	str	r3, [r4, #4]
 800918c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800918e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009190:	4413      	add	r3, r2
 8009192:	9328      	str	r3, [sp, #160]	; 0xa0
 8009194:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009196:	3301      	adds	r3, #1
 8009198:	2b07      	cmp	r3, #7
 800919a:	9327      	str	r3, [sp, #156]	; 0x9c
 800919c:	f300 80dd 	bgt.w	800935a <_svfprintf_r+0x123a>
 80091a0:	3408      	adds	r4, #8
 80091a2:	9b04      	ldr	r3, [sp, #16]
 80091a4:	9a04      	ldr	r2, [sp, #16]
 80091a6:	eb0b 0503 	add.w	r5, fp, r3
 80091aa:	1bab      	subs	r3, r5, r6
 80091ac:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80091ae:	1b55      	subs	r5, r2, r5
 80091b0:	429d      	cmp	r5, r3
 80091b2:	bfa8      	it	ge
 80091b4:	461d      	movge	r5, r3
 80091b6:	2d00      	cmp	r5, #0
 80091b8:	dd0b      	ble.n	80091d2 <_svfprintf_r+0x10b2>
 80091ba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80091bc:	442b      	add	r3, r5
 80091be:	9328      	str	r3, [sp, #160]	; 0xa0
 80091c0:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80091c2:	3301      	adds	r3, #1
 80091c4:	2b07      	cmp	r3, #7
 80091c6:	e9c4 6500 	strd	r6, r5, [r4]
 80091ca:	9327      	str	r3, [sp, #156]	; 0x9c
 80091cc:	f300 80cf 	bgt.w	800936e <_svfprintf_r+0x124e>
 80091d0:	3408      	adds	r4, #8
 80091d2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80091d4:	9a04      	ldr	r2, [sp, #16]
 80091d6:	2d00      	cmp	r5, #0
 80091d8:	eba2 0303 	sub.w	r3, r2, r3
 80091dc:	bfac      	ite	ge
 80091de:	1b5d      	subge	r5, r3, r5
 80091e0:	461d      	movlt	r5, r3
 80091e2:	2d00      	cmp	r5, #0
 80091e4:	f77f ad43 	ble.w	8008c6e <_svfprintf_r+0xb4e>
 80091e8:	4e66      	ldr	r6, [pc, #408]	; (8009384 <_svfprintf_r+0x1264>)
 80091ea:	2710      	movs	r7, #16
 80091ec:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80091f0:	2d10      	cmp	r5, #16
 80091f2:	f103 0301 	add.w	r3, r3, #1
 80091f6:	f104 0108 	add.w	r1, r4, #8
 80091fa:	6026      	str	r6, [r4, #0]
 80091fc:	f77f aecb 	ble.w	8008f96 <_svfprintf_r+0xe76>
 8009200:	3210      	adds	r2, #16
 8009202:	2b07      	cmp	r3, #7
 8009204:	6067      	str	r7, [r4, #4]
 8009206:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800920a:	dd08      	ble.n	800921e <_svfprintf_r+0x10fe>
 800920c:	aa26      	add	r2, sp, #152	; 0x98
 800920e:	4641      	mov	r1, r8
 8009210:	9803      	ldr	r0, [sp, #12]
 8009212:	f001 fe6b 	bl	800aeec <__ssprint_r>
 8009216:	2800      	cmp	r0, #0
 8009218:	f040 816e 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 800921c:	a929      	add	r1, sp, #164	; 0xa4
 800921e:	3d10      	subs	r5, #16
 8009220:	460c      	mov	r4, r1
 8009222:	e7e3      	b.n	80091ec <_svfprintf_r+0x10cc>
 8009224:	aa26      	add	r2, sp, #152	; 0x98
 8009226:	4641      	mov	r1, r8
 8009228:	9803      	ldr	r0, [sp, #12]
 800922a:	f001 fe5f 	bl	800aeec <__ssprint_r>
 800922e:	2800      	cmp	r0, #0
 8009230:	f040 8162 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8009234:	ac29      	add	r4, sp, #164	; 0xa4
 8009236:	e770      	b.n	800911a <_svfprintf_r+0xffa>
 8009238:	2010      	movs	r0, #16
 800923a:	4402      	add	r2, r0
 800923c:	2b07      	cmp	r3, #7
 800923e:	6060      	str	r0, [r4, #4]
 8009240:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8009244:	dd08      	ble.n	8009258 <_svfprintf_r+0x1138>
 8009246:	aa26      	add	r2, sp, #152	; 0x98
 8009248:	4641      	mov	r1, r8
 800924a:	9803      	ldr	r0, [sp, #12]
 800924c:	f001 fe4e 	bl	800aeec <__ssprint_r>
 8009250:	2800      	cmp	r0, #0
 8009252:	f040 8151 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8009256:	a929      	add	r1, sp, #164	; 0xa4
 8009258:	3d10      	subs	r5, #16
 800925a:	460c      	mov	r4, r1
 800925c:	e763      	b.n	8009126 <_svfprintf_r+0x1006>
 800925e:	460c      	mov	r4, r1
 8009260:	e77b      	b.n	800915a <_svfprintf_r+0x103a>
 8009262:	2f00      	cmp	r7, #0
 8009264:	d049      	beq.n	80092fa <_svfprintf_r+0x11da>
 8009266:	3f01      	subs	r7, #1
 8009268:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800926a:	6023      	str	r3, [r4, #0]
 800926c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800926e:	6063      	str	r3, [r4, #4]
 8009270:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009272:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009274:	4413      	add	r3, r2
 8009276:	9328      	str	r3, [sp, #160]	; 0xa0
 8009278:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800927a:	3301      	adds	r3, #1
 800927c:	2b07      	cmp	r3, #7
 800927e:	9327      	str	r3, [sp, #156]	; 0x9c
 8009280:	dc42      	bgt.n	8009308 <_svfprintf_r+0x11e8>
 8009282:	3408      	adds	r4, #8
 8009284:	9b04      	ldr	r3, [sp, #16]
 8009286:	445b      	add	r3, fp
 8009288:	1b9a      	subs	r2, r3, r6
 800928a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	4293      	cmp	r3, r2
 8009290:	bfa8      	it	ge
 8009292:	4613      	movge	r3, r2
 8009294:	2b00      	cmp	r3, #0
 8009296:	461d      	mov	r5, r3
 8009298:	dd0a      	ble.n	80092b0 <_svfprintf_r+0x1190>
 800929a:	e9c4 6300 	strd	r6, r3, [r4]
 800929e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80092a0:	442b      	add	r3, r5
 80092a2:	9328      	str	r3, [sp, #160]	; 0xa0
 80092a4:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80092a6:	3301      	adds	r3, #1
 80092a8:	2b07      	cmp	r3, #7
 80092aa:	9327      	str	r3, [sp, #156]	; 0x9c
 80092ac:	dc36      	bgt.n	800931c <_svfprintf_r+0x11fc>
 80092ae:	3408      	adds	r4, #8
 80092b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	2d00      	cmp	r5, #0
 80092b6:	bfac      	ite	ge
 80092b8:	1b5d      	subge	r5, r3, r5
 80092ba:	461d      	movlt	r5, r3
 80092bc:	2d00      	cmp	r5, #0
 80092be:	dd18      	ble.n	80092f2 <_svfprintf_r+0x11d2>
 80092c0:	e9dd 2327 	ldrd	r2, r3, [sp, #156]	; 0x9c
 80092c4:	482f      	ldr	r0, [pc, #188]	; (8009384 <_svfprintf_r+0x1264>)
 80092c6:	6020      	str	r0, [r4, #0]
 80092c8:	2d10      	cmp	r5, #16
 80092ca:	f102 0201 	add.w	r2, r2, #1
 80092ce:	f104 0108 	add.w	r1, r4, #8
 80092d2:	dc2d      	bgt.n	8009330 <_svfprintf_r+0x1210>
 80092d4:	442b      	add	r3, r5
 80092d6:	2a07      	cmp	r2, #7
 80092d8:	6065      	str	r5, [r4, #4]
 80092da:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 80092de:	dd3a      	ble.n	8009356 <_svfprintf_r+0x1236>
 80092e0:	aa26      	add	r2, sp, #152	; 0x98
 80092e2:	4641      	mov	r1, r8
 80092e4:	9803      	ldr	r0, [sp, #12]
 80092e6:	f001 fe01 	bl	800aeec <__ssprint_r>
 80092ea:	2800      	cmp	r0, #0
 80092ec:	f040 8104 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 80092f0:	ac29      	add	r4, sp, #164	; 0xa4
 80092f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	441e      	add	r6, r3
 80092f8:	e733      	b.n	8009162 <_svfprintf_r+0x1042>
 80092fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092fc:	3b01      	subs	r3, #1
 80092fe:	9309      	str	r3, [sp, #36]	; 0x24
 8009300:	9b07      	ldr	r3, [sp, #28]
 8009302:	3b01      	subs	r3, #1
 8009304:	9307      	str	r3, [sp, #28]
 8009306:	e7af      	b.n	8009268 <_svfprintf_r+0x1148>
 8009308:	aa26      	add	r2, sp, #152	; 0x98
 800930a:	4641      	mov	r1, r8
 800930c:	9803      	ldr	r0, [sp, #12]
 800930e:	f001 fded 	bl	800aeec <__ssprint_r>
 8009312:	2800      	cmp	r0, #0
 8009314:	f040 80f0 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 8009318:	ac29      	add	r4, sp, #164	; 0xa4
 800931a:	e7b3      	b.n	8009284 <_svfprintf_r+0x1164>
 800931c:	aa26      	add	r2, sp, #152	; 0x98
 800931e:	4641      	mov	r1, r8
 8009320:	9803      	ldr	r0, [sp, #12]
 8009322:	f001 fde3 	bl	800aeec <__ssprint_r>
 8009326:	2800      	cmp	r0, #0
 8009328:	f040 80e6 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 800932c:	ac29      	add	r4, sp, #164	; 0xa4
 800932e:	e7bf      	b.n	80092b0 <_svfprintf_r+0x1190>
 8009330:	2010      	movs	r0, #16
 8009332:	4403      	add	r3, r0
 8009334:	2a07      	cmp	r2, #7
 8009336:	6060      	str	r0, [r4, #4]
 8009338:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 800933c:	dd08      	ble.n	8009350 <_svfprintf_r+0x1230>
 800933e:	aa26      	add	r2, sp, #152	; 0x98
 8009340:	4641      	mov	r1, r8
 8009342:	9803      	ldr	r0, [sp, #12]
 8009344:	f001 fdd2 	bl	800aeec <__ssprint_r>
 8009348:	2800      	cmp	r0, #0
 800934a:	f040 80d5 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 800934e:	a929      	add	r1, sp, #164	; 0xa4
 8009350:	3d10      	subs	r5, #16
 8009352:	460c      	mov	r4, r1
 8009354:	e7b4      	b.n	80092c0 <_svfprintf_r+0x11a0>
 8009356:	460c      	mov	r4, r1
 8009358:	e7cb      	b.n	80092f2 <_svfprintf_r+0x11d2>
 800935a:	aa26      	add	r2, sp, #152	; 0x98
 800935c:	4641      	mov	r1, r8
 800935e:	9803      	ldr	r0, [sp, #12]
 8009360:	f001 fdc4 	bl	800aeec <__ssprint_r>
 8009364:	2800      	cmp	r0, #0
 8009366:	f040 80c7 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 800936a:	ac29      	add	r4, sp, #164	; 0xa4
 800936c:	e719      	b.n	80091a2 <_svfprintf_r+0x1082>
 800936e:	aa26      	add	r2, sp, #152	; 0x98
 8009370:	4641      	mov	r1, r8
 8009372:	9803      	ldr	r0, [sp, #12]
 8009374:	f001 fdba 	bl	800aeec <__ssprint_r>
 8009378:	2800      	cmp	r0, #0
 800937a:	f040 80bd 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 800937e:	ac29      	add	r4, sp, #164	; 0xa4
 8009380:	e727      	b.n	80091d2 <_svfprintf_r+0x10b2>
 8009382:	bf00      	nop
 8009384:	0800d668 	.word	0x0800d668
 8009388:	9a04      	ldr	r2, [sp, #16]
 800938a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800938c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800938e:	2a01      	cmp	r2, #1
 8009390:	f105 0501 	add.w	r5, r5, #1
 8009394:	f103 0301 	add.w	r3, r3, #1
 8009398:	f104 0608 	add.w	r6, r4, #8
 800939c:	dc02      	bgt.n	80093a4 <_svfprintf_r+0x1284>
 800939e:	f01a 0f01 	tst.w	sl, #1
 80093a2:	d07d      	beq.n	80094a0 <_svfprintf_r+0x1380>
 80093a4:	2201      	movs	r2, #1
 80093a6:	2b07      	cmp	r3, #7
 80093a8:	f8c4 b000 	str.w	fp, [r4]
 80093ac:	6062      	str	r2, [r4, #4]
 80093ae:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80093b2:	dd08      	ble.n	80093c6 <_svfprintf_r+0x12a6>
 80093b4:	aa26      	add	r2, sp, #152	; 0x98
 80093b6:	4641      	mov	r1, r8
 80093b8:	9803      	ldr	r0, [sp, #12]
 80093ba:	f001 fd97 	bl	800aeec <__ssprint_r>
 80093be:	2800      	cmp	r0, #0
 80093c0:	f040 809a 	bne.w	80094f8 <_svfprintf_r+0x13d8>
 80093c4:	ae29      	add	r6, sp, #164	; 0xa4
 80093c6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80093c8:	6033      	str	r3, [r6, #0]
 80093ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093cc:	6073      	str	r3, [r6, #4]
 80093ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093d0:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80093d2:	4413      	add	r3, r2
 80093d4:	9328      	str	r3, [sp, #160]	; 0xa0
 80093d6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80093d8:	3301      	adds	r3, #1
 80093da:	2b07      	cmp	r3, #7
 80093dc:	9327      	str	r3, [sp, #156]	; 0x9c
 80093de:	dc31      	bgt.n	8009444 <_svfprintf_r+0x1324>
 80093e0:	3608      	adds	r6, #8
 80093e2:	9b04      	ldr	r3, [sp, #16]
 80093e4:	2200      	movs	r2, #0
 80093e6:	1e5c      	subs	r4, r3, #1
 80093e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80093ec:	2300      	movs	r3, #0
 80093ee:	f7f7 fb73 	bl	8000ad8 <__aeabi_dcmpeq>
 80093f2:	2800      	cmp	r0, #0
 80093f4:	d12f      	bne.n	8009456 <_svfprintf_r+0x1336>
 80093f6:	f10b 0301 	add.w	r3, fp, #1
 80093fa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 80093fc:	9904      	ldr	r1, [sp, #16]
 80093fe:	e9c6 3400 	strd	r3, r4, [r6]
 8009402:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8009404:	3201      	adds	r2, #1
 8009406:	3b01      	subs	r3, #1
 8009408:	440b      	add	r3, r1
 800940a:	2a07      	cmp	r2, #7
 800940c:	e9cd 2327 	strd	r2, r3, [sp, #156]	; 0x9c
 8009410:	dd4f      	ble.n	80094b2 <_svfprintf_r+0x1392>
 8009412:	aa26      	add	r2, sp, #152	; 0x98
 8009414:	4641      	mov	r1, r8
 8009416:	9803      	ldr	r0, [sp, #12]
 8009418:	f001 fd68 	bl	800aeec <__ssprint_r>
 800941c:	2800      	cmp	r0, #0
 800941e:	d16b      	bne.n	80094f8 <_svfprintf_r+0x13d8>
 8009420:	ae29      	add	r6, sp, #164	; 0xa4
 8009422:	ab22      	add	r3, sp, #136	; 0x88
 8009424:	6033      	str	r3, [r6, #0]
 8009426:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009428:	6073      	str	r3, [r6, #4]
 800942a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800942c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800942e:	4413      	add	r3, r2
 8009430:	9328      	str	r3, [sp, #160]	; 0xa0
 8009432:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8009434:	3301      	adds	r3, #1
 8009436:	2b07      	cmp	r3, #7
 8009438:	9327      	str	r3, [sp, #156]	; 0x9c
 800943a:	f73f adb3 	bgt.w	8008fa4 <_svfprintf_r+0xe84>
 800943e:	f106 0408 	add.w	r4, r6, #8
 8009442:	e414      	b.n	8008c6e <_svfprintf_r+0xb4e>
 8009444:	aa26      	add	r2, sp, #152	; 0x98
 8009446:	4641      	mov	r1, r8
 8009448:	9803      	ldr	r0, [sp, #12]
 800944a:	f001 fd4f 	bl	800aeec <__ssprint_r>
 800944e:	2800      	cmp	r0, #0
 8009450:	d152      	bne.n	80094f8 <_svfprintf_r+0x13d8>
 8009452:	ae29      	add	r6, sp, #164	; 0xa4
 8009454:	e7c5      	b.n	80093e2 <_svfprintf_r+0x12c2>
 8009456:	2c00      	cmp	r4, #0
 8009458:	dde3      	ble.n	8009422 <_svfprintf_r+0x1302>
 800945a:	4d3e      	ldr	r5, [pc, #248]	; (8009554 <_svfprintf_r+0x1434>)
 800945c:	2710      	movs	r7, #16
 800945e:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 8009462:	2c10      	cmp	r4, #16
 8009464:	f103 0301 	add.w	r3, r3, #1
 8009468:	f106 0108 	add.w	r1, r6, #8
 800946c:	6035      	str	r5, [r6, #0]
 800946e:	dc07      	bgt.n	8009480 <_svfprintf_r+0x1360>
 8009470:	6074      	str	r4, [r6, #4]
 8009472:	2b07      	cmp	r3, #7
 8009474:	4414      	add	r4, r2
 8009476:	e9cd 3427 	strd	r3, r4, [sp, #156]	; 0x9c
 800947a:	dcca      	bgt.n	8009412 <_svfprintf_r+0x12f2>
 800947c:	460e      	mov	r6, r1
 800947e:	e7d0      	b.n	8009422 <_svfprintf_r+0x1302>
 8009480:	3210      	adds	r2, #16
 8009482:	2b07      	cmp	r3, #7
 8009484:	6077      	str	r7, [r6, #4]
 8009486:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 800948a:	dd06      	ble.n	800949a <_svfprintf_r+0x137a>
 800948c:	aa26      	add	r2, sp, #152	; 0x98
 800948e:	4641      	mov	r1, r8
 8009490:	9803      	ldr	r0, [sp, #12]
 8009492:	f001 fd2b 	bl	800aeec <__ssprint_r>
 8009496:	bb78      	cbnz	r0, 80094f8 <_svfprintf_r+0x13d8>
 8009498:	a929      	add	r1, sp, #164	; 0xa4
 800949a:	3c10      	subs	r4, #16
 800949c:	460e      	mov	r6, r1
 800949e:	e7de      	b.n	800945e <_svfprintf_r+0x133e>
 80094a0:	2201      	movs	r2, #1
 80094a2:	2b07      	cmp	r3, #7
 80094a4:	f8c4 b000 	str.w	fp, [r4]
 80094a8:	6062      	str	r2, [r4, #4]
 80094aa:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80094ae:	ddb8      	ble.n	8009422 <_svfprintf_r+0x1302>
 80094b0:	e7af      	b.n	8009412 <_svfprintf_r+0x12f2>
 80094b2:	3608      	adds	r6, #8
 80094b4:	e7b5      	b.n	8009422 <_svfprintf_r+0x1302>
 80094b6:	460c      	mov	r4, r1
 80094b8:	f7ff bbd9 	b.w	8008c6e <_svfprintf_r+0xb4e>
 80094bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094be:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80094c0:	1a9d      	subs	r5, r3, r2
 80094c2:	2d00      	cmp	r5, #0
 80094c4:	f77f abd7 	ble.w	8008c76 <_svfprintf_r+0xb56>
 80094c8:	4e23      	ldr	r6, [pc, #140]	; (8009558 <_svfprintf_r+0x1438>)
 80094ca:	2710      	movs	r7, #16
 80094cc:	e9dd 3227 	ldrd	r3, r2, [sp, #156]	; 0x9c
 80094d0:	2d10      	cmp	r5, #16
 80094d2:	f103 0301 	add.w	r3, r3, #1
 80094d6:	6026      	str	r6, [r4, #0]
 80094d8:	dc18      	bgt.n	800950c <_svfprintf_r+0x13ec>
 80094da:	6065      	str	r5, [r4, #4]
 80094dc:	2b07      	cmp	r3, #7
 80094de:	4415      	add	r5, r2
 80094e0:	e9cd 3527 	strd	r3, r5, [sp, #156]	; 0x9c
 80094e4:	f77f abc7 	ble.w	8008c76 <_svfprintf_r+0xb56>
 80094e8:	aa26      	add	r2, sp, #152	; 0x98
 80094ea:	4641      	mov	r1, r8
 80094ec:	9803      	ldr	r0, [sp, #12]
 80094ee:	f001 fcfd 	bl	800aeec <__ssprint_r>
 80094f2:	2800      	cmp	r0, #0
 80094f4:	f43f abbf 	beq.w	8008c76 <_svfprintf_r+0xb56>
 80094f8:	f1b9 0f00 	cmp.w	r9, #0
 80094fc:	f43f a8a8 	beq.w	8008650 <_svfprintf_r+0x530>
 8009500:	4649      	mov	r1, r9
 8009502:	9803      	ldr	r0, [sp, #12]
 8009504:	f000 fed8 	bl	800a2b8 <_free_r>
 8009508:	f7ff b8a2 	b.w	8008650 <_svfprintf_r+0x530>
 800950c:	3210      	adds	r2, #16
 800950e:	2b07      	cmp	r3, #7
 8009510:	6067      	str	r7, [r4, #4]
 8009512:	e9cd 3227 	strd	r3, r2, [sp, #156]	; 0x9c
 8009516:	dc02      	bgt.n	800951e <_svfprintf_r+0x13fe>
 8009518:	3408      	adds	r4, #8
 800951a:	3d10      	subs	r5, #16
 800951c:	e7d6      	b.n	80094cc <_svfprintf_r+0x13ac>
 800951e:	aa26      	add	r2, sp, #152	; 0x98
 8009520:	4641      	mov	r1, r8
 8009522:	9803      	ldr	r0, [sp, #12]
 8009524:	f001 fce2 	bl	800aeec <__ssprint_r>
 8009528:	2800      	cmp	r0, #0
 800952a:	d1e5      	bne.n	80094f8 <_svfprintf_r+0x13d8>
 800952c:	ac29      	add	r4, sp, #164	; 0xa4
 800952e:	e7f4      	b.n	800951a <_svfprintf_r+0x13fa>
 8009530:	4649      	mov	r1, r9
 8009532:	9803      	ldr	r0, [sp, #12]
 8009534:	f000 fec0 	bl	800a2b8 <_free_r>
 8009538:	f7ff bbb5 	b.w	8008ca6 <_svfprintf_r+0xb86>
 800953c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800953e:	2b00      	cmp	r3, #0
 8009540:	f43f a886 	beq.w	8008650 <_svfprintf_r+0x530>
 8009544:	aa26      	add	r2, sp, #152	; 0x98
 8009546:	4641      	mov	r1, r8
 8009548:	9803      	ldr	r0, [sp, #12]
 800954a:	f001 fccf 	bl	800aeec <__ssprint_r>
 800954e:	f7ff b87f 	b.w	8008650 <_svfprintf_r+0x530>
 8009552:	bf00      	nop
 8009554:	0800d668 	.word	0x0800d668
 8009558:	0800d658 	.word	0x0800d658

0800955c <register_fini>:
 800955c:	4b02      	ldr	r3, [pc, #8]	; (8009568 <register_fini+0xc>)
 800955e:	b113      	cbz	r3, 8009566 <register_fini+0xa>
 8009560:	4802      	ldr	r0, [pc, #8]	; (800956c <register_fini+0x10>)
 8009562:	f000 b805 	b.w	8009570 <atexit>
 8009566:	4770      	bx	lr
 8009568:	00000000 	.word	0x00000000
 800956c:	0800a1e9 	.word	0x0800a1e9

08009570 <atexit>:
 8009570:	2300      	movs	r3, #0
 8009572:	4601      	mov	r1, r0
 8009574:	461a      	mov	r2, r3
 8009576:	4618      	mov	r0, r3
 8009578:	f001 bd4a 	b.w	800b010 <__register_exitproc>

0800957c <quorem>:
 800957c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009580:	6903      	ldr	r3, [r0, #16]
 8009582:	690c      	ldr	r4, [r1, #16]
 8009584:	42a3      	cmp	r3, r4
 8009586:	4680      	mov	r8, r0
 8009588:	f2c0 8082 	blt.w	8009690 <quorem+0x114>
 800958c:	3c01      	subs	r4, #1
 800958e:	f101 0714 	add.w	r7, r1, #20
 8009592:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009596:	f100 0614 	add.w	r6, r0, #20
 800959a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800959e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80095a2:	eb06 030c 	add.w	r3, r6, ip
 80095a6:	3501      	adds	r5, #1
 80095a8:	eb07 090c 	add.w	r9, r7, ip
 80095ac:	9301      	str	r3, [sp, #4]
 80095ae:	fbb0 f5f5 	udiv	r5, r0, r5
 80095b2:	b395      	cbz	r5, 800961a <quorem+0x9e>
 80095b4:	f04f 0a00 	mov.w	sl, #0
 80095b8:	4638      	mov	r0, r7
 80095ba:	46b6      	mov	lr, r6
 80095bc:	46d3      	mov	fp, sl
 80095be:	f850 2b04 	ldr.w	r2, [r0], #4
 80095c2:	b293      	uxth	r3, r2
 80095c4:	fb05 a303 	mla	r3, r5, r3, sl
 80095c8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	ebab 0303 	sub.w	r3, fp, r3
 80095d2:	0c12      	lsrs	r2, r2, #16
 80095d4:	f8de b000 	ldr.w	fp, [lr]
 80095d8:	fb05 a202 	mla	r2, r5, r2, sl
 80095dc:	fa13 f38b 	uxtah	r3, r3, fp
 80095e0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80095e4:	fa1f fb82 	uxth.w	fp, r2
 80095e8:	f8de 2000 	ldr.w	r2, [lr]
 80095ec:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80095f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095f4:	b29b      	uxth	r3, r3
 80095f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095fa:	4581      	cmp	r9, r0
 80095fc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009600:	f84e 3b04 	str.w	r3, [lr], #4
 8009604:	d2db      	bcs.n	80095be <quorem+0x42>
 8009606:	f856 300c 	ldr.w	r3, [r6, ip]
 800960a:	b933      	cbnz	r3, 800961a <quorem+0x9e>
 800960c:	9b01      	ldr	r3, [sp, #4]
 800960e:	3b04      	subs	r3, #4
 8009610:	429e      	cmp	r6, r3
 8009612:	461a      	mov	r2, r3
 8009614:	d330      	bcc.n	8009678 <quorem+0xfc>
 8009616:	f8c8 4010 	str.w	r4, [r8, #16]
 800961a:	4640      	mov	r0, r8
 800961c:	f001 fb5a 	bl	800acd4 <__mcmp>
 8009620:	2800      	cmp	r0, #0
 8009622:	db25      	blt.n	8009670 <quorem+0xf4>
 8009624:	3501      	adds	r5, #1
 8009626:	4630      	mov	r0, r6
 8009628:	f04f 0c00 	mov.w	ip, #0
 800962c:	f857 2b04 	ldr.w	r2, [r7], #4
 8009630:	f8d0 e000 	ldr.w	lr, [r0]
 8009634:	b293      	uxth	r3, r2
 8009636:	ebac 0303 	sub.w	r3, ip, r3
 800963a:	0c12      	lsrs	r2, r2, #16
 800963c:	fa13 f38e 	uxtah	r3, r3, lr
 8009640:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009644:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009648:	b29b      	uxth	r3, r3
 800964a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800964e:	45b9      	cmp	r9, r7
 8009650:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009654:	f840 3b04 	str.w	r3, [r0], #4
 8009658:	d2e8      	bcs.n	800962c <quorem+0xb0>
 800965a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800965e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009662:	b92a      	cbnz	r2, 8009670 <quorem+0xf4>
 8009664:	3b04      	subs	r3, #4
 8009666:	429e      	cmp	r6, r3
 8009668:	461a      	mov	r2, r3
 800966a:	d30b      	bcc.n	8009684 <quorem+0x108>
 800966c:	f8c8 4010 	str.w	r4, [r8, #16]
 8009670:	4628      	mov	r0, r5
 8009672:	b003      	add	sp, #12
 8009674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009678:	6812      	ldr	r2, [r2, #0]
 800967a:	3b04      	subs	r3, #4
 800967c:	2a00      	cmp	r2, #0
 800967e:	d1ca      	bne.n	8009616 <quorem+0x9a>
 8009680:	3c01      	subs	r4, #1
 8009682:	e7c5      	b.n	8009610 <quorem+0x94>
 8009684:	6812      	ldr	r2, [r2, #0]
 8009686:	3b04      	subs	r3, #4
 8009688:	2a00      	cmp	r2, #0
 800968a:	d1ef      	bne.n	800966c <quorem+0xf0>
 800968c:	3c01      	subs	r4, #1
 800968e:	e7ea      	b.n	8009666 <quorem+0xea>
 8009690:	2000      	movs	r0, #0
 8009692:	e7ee      	b.n	8009672 <quorem+0xf6>
 8009694:	0000      	movs	r0, r0
	...

08009698 <_dtoa_r>:
 8009698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800969c:	b097      	sub	sp, #92	; 0x5c
 800969e:	ec57 6b10 	vmov	r6, r7, d0
 80096a2:	9106      	str	r1, [sp, #24]
 80096a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80096a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80096a8:	4604      	mov	r4, r0
 80096aa:	9312      	str	r3, [sp, #72]	; 0x48
 80096ac:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80096ae:	e9cd 6700 	strd	r6, r7, [sp]
 80096b2:	b141      	cbz	r1, 80096c6 <_dtoa_r+0x2e>
 80096b4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80096b6:	604a      	str	r2, [r1, #4]
 80096b8:	2301      	movs	r3, #1
 80096ba:	4093      	lsls	r3, r2
 80096bc:	608b      	str	r3, [r1, #8]
 80096be:	f001 f944 	bl	800a94a <_Bfree>
 80096c2:	2300      	movs	r3, #0
 80096c4:	6423      	str	r3, [r4, #64]	; 0x40
 80096c6:	1e3b      	subs	r3, r7, #0
 80096c8:	bfb9      	ittee	lt
 80096ca:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80096ce:	9301      	strlt	r3, [sp, #4]
 80096d0:	2300      	movge	r3, #0
 80096d2:	602b      	strge	r3, [r5, #0]
 80096d4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80096d8:	4baf      	ldr	r3, [pc, #700]	; (8009998 <_dtoa_r+0x300>)
 80096da:	bfbc      	itt	lt
 80096dc:	2201      	movlt	r2, #1
 80096de:	602a      	strlt	r2, [r5, #0]
 80096e0:	ea33 0308 	bics.w	r3, r3, r8
 80096e4:	d116      	bne.n	8009714 <_dtoa_r+0x7c>
 80096e6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80096e8:	f242 730f 	movw	r3, #9999	; 0x270f
 80096ec:	6013      	str	r3, [r2, #0]
 80096ee:	9b00      	ldr	r3, [sp, #0]
 80096f0:	b923      	cbnz	r3, 80096fc <_dtoa_r+0x64>
 80096f2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80096f6:	2800      	cmp	r0, #0
 80096f8:	f000 8543 	beq.w	800a182 <_dtoa_r+0xaea>
 80096fc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096fe:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80099ac <_dtoa_r+0x314>
 8009702:	b11b      	cbz	r3, 800970c <_dtoa_r+0x74>
 8009704:	f10b 0303 	add.w	r3, fp, #3
 8009708:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	4658      	mov	r0, fp
 800970e:	b017      	add	sp, #92	; 0x5c
 8009710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009714:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009718:	2200      	movs	r2, #0
 800971a:	2300      	movs	r3, #0
 800971c:	4630      	mov	r0, r6
 800971e:	4639      	mov	r1, r7
 8009720:	f7f7 f9da 	bl	8000ad8 <__aeabi_dcmpeq>
 8009724:	4681      	mov	r9, r0
 8009726:	b160      	cbz	r0, 8009742 <_dtoa_r+0xaa>
 8009728:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800972a:	2301      	movs	r3, #1
 800972c:	6013      	str	r3, [r2, #0]
 800972e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009730:	2b00      	cmp	r3, #0
 8009732:	f000 8522 	beq.w	800a17a <_dtoa_r+0xae2>
 8009736:	4b99      	ldr	r3, [pc, #612]	; (800999c <_dtoa_r+0x304>)
 8009738:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800973a:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800973e:	6013      	str	r3, [r2, #0]
 8009740:	e7e4      	b.n	800970c <_dtoa_r+0x74>
 8009742:	aa14      	add	r2, sp, #80	; 0x50
 8009744:	a915      	add	r1, sp, #84	; 0x54
 8009746:	ec47 6b10 	vmov	d0, r6, r7
 800974a:	4620      	mov	r0, r4
 800974c:	f001 fb39 	bl	800adc2 <__d2b>
 8009750:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009754:	9004      	str	r0, [sp, #16]
 8009756:	2d00      	cmp	r5, #0
 8009758:	d07c      	beq.n	8009854 <_dtoa_r+0x1bc>
 800975a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800975e:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009762:	46b2      	mov	sl, r6
 8009764:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009768:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800976c:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8009770:	2200      	movs	r2, #0
 8009772:	4b8b      	ldr	r3, [pc, #556]	; (80099a0 <_dtoa_r+0x308>)
 8009774:	4650      	mov	r0, sl
 8009776:	4659      	mov	r1, fp
 8009778:	f7f6 fd8e 	bl	8000298 <__aeabi_dsub>
 800977c:	a380      	add	r3, pc, #512	; (adr r3, 8009980 <_dtoa_r+0x2e8>)
 800977e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009782:	f7f6 ff41 	bl	8000608 <__aeabi_dmul>
 8009786:	a380      	add	r3, pc, #512	; (adr r3, 8009988 <_dtoa_r+0x2f0>)
 8009788:	e9d3 2300 	ldrd	r2, r3, [r3]
 800978c:	f7f6 fd86 	bl	800029c <__adddf3>
 8009790:	4606      	mov	r6, r0
 8009792:	4628      	mov	r0, r5
 8009794:	460f      	mov	r7, r1
 8009796:	f7f6 fecd 	bl	8000534 <__aeabi_i2d>
 800979a:	a37d      	add	r3, pc, #500	; (adr r3, 8009990 <_dtoa_r+0x2f8>)
 800979c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a0:	f7f6 ff32 	bl	8000608 <__aeabi_dmul>
 80097a4:	4602      	mov	r2, r0
 80097a6:	460b      	mov	r3, r1
 80097a8:	4630      	mov	r0, r6
 80097aa:	4639      	mov	r1, r7
 80097ac:	f7f6 fd76 	bl	800029c <__adddf3>
 80097b0:	4606      	mov	r6, r0
 80097b2:	460f      	mov	r7, r1
 80097b4:	f7f7 f9d8 	bl	8000b68 <__aeabi_d2iz>
 80097b8:	2200      	movs	r2, #0
 80097ba:	4682      	mov	sl, r0
 80097bc:	2300      	movs	r3, #0
 80097be:	4630      	mov	r0, r6
 80097c0:	4639      	mov	r1, r7
 80097c2:	f7f7 f993 	bl	8000aec <__aeabi_dcmplt>
 80097c6:	b148      	cbz	r0, 80097dc <_dtoa_r+0x144>
 80097c8:	4650      	mov	r0, sl
 80097ca:	f7f6 feb3 	bl	8000534 <__aeabi_i2d>
 80097ce:	4632      	mov	r2, r6
 80097d0:	463b      	mov	r3, r7
 80097d2:	f7f7 f981 	bl	8000ad8 <__aeabi_dcmpeq>
 80097d6:	b908      	cbnz	r0, 80097dc <_dtoa_r+0x144>
 80097d8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80097dc:	f1ba 0f16 	cmp.w	sl, #22
 80097e0:	d859      	bhi.n	8009896 <_dtoa_r+0x1fe>
 80097e2:	4970      	ldr	r1, [pc, #448]	; (80099a4 <_dtoa_r+0x30c>)
 80097e4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80097e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097f0:	f7f7 f99a 	bl	8000b28 <__aeabi_dcmpgt>
 80097f4:	2800      	cmp	r0, #0
 80097f6:	d050      	beq.n	800989a <_dtoa_r+0x202>
 80097f8:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80097fc:	2300      	movs	r3, #0
 80097fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009800:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009802:	1b5d      	subs	r5, r3, r5
 8009804:	f1b5 0801 	subs.w	r8, r5, #1
 8009808:	bf49      	itett	mi
 800980a:	f1c5 0301 	rsbmi	r3, r5, #1
 800980e:	2300      	movpl	r3, #0
 8009810:	9305      	strmi	r3, [sp, #20]
 8009812:	f04f 0800 	movmi.w	r8, #0
 8009816:	bf58      	it	pl
 8009818:	9305      	strpl	r3, [sp, #20]
 800981a:	f1ba 0f00 	cmp.w	sl, #0
 800981e:	db3e      	blt.n	800989e <_dtoa_r+0x206>
 8009820:	2300      	movs	r3, #0
 8009822:	44d0      	add	r8, sl
 8009824:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8009828:	9307      	str	r3, [sp, #28]
 800982a:	9b06      	ldr	r3, [sp, #24]
 800982c:	2b09      	cmp	r3, #9
 800982e:	f200 808d 	bhi.w	800994c <_dtoa_r+0x2b4>
 8009832:	2b05      	cmp	r3, #5
 8009834:	bfc4      	itt	gt
 8009836:	3b04      	subgt	r3, #4
 8009838:	9306      	strgt	r3, [sp, #24]
 800983a:	9b06      	ldr	r3, [sp, #24]
 800983c:	f1a3 0302 	sub.w	r3, r3, #2
 8009840:	bfcc      	ite	gt
 8009842:	2500      	movgt	r5, #0
 8009844:	2501      	movle	r5, #1
 8009846:	2b03      	cmp	r3, #3
 8009848:	f200 808c 	bhi.w	8009964 <_dtoa_r+0x2cc>
 800984c:	e8df f003 	tbb	[pc, r3]
 8009850:	6e317c7a 	.word	0x6e317c7a
 8009854:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009858:	441d      	add	r5, r3
 800985a:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800985e:	2820      	cmp	r0, #32
 8009860:	dd13      	ble.n	800988a <_dtoa_r+0x1f2>
 8009862:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009866:	9b00      	ldr	r3, [sp, #0]
 8009868:	fa08 f800 	lsl.w	r8, r8, r0
 800986c:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8009870:	fa23 f000 	lsr.w	r0, r3, r0
 8009874:	ea48 0000 	orr.w	r0, r8, r0
 8009878:	f7f6 fe4c 	bl	8000514 <__aeabi_ui2d>
 800987c:	2301      	movs	r3, #1
 800987e:	4682      	mov	sl, r0
 8009880:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009884:	3d01      	subs	r5, #1
 8009886:	9313      	str	r3, [sp, #76]	; 0x4c
 8009888:	e772      	b.n	8009770 <_dtoa_r+0xd8>
 800988a:	9b00      	ldr	r3, [sp, #0]
 800988c:	f1c0 0020 	rsb	r0, r0, #32
 8009890:	fa03 f000 	lsl.w	r0, r3, r0
 8009894:	e7f0      	b.n	8009878 <_dtoa_r+0x1e0>
 8009896:	2301      	movs	r3, #1
 8009898:	e7b1      	b.n	80097fe <_dtoa_r+0x166>
 800989a:	900f      	str	r0, [sp, #60]	; 0x3c
 800989c:	e7b0      	b.n	8009800 <_dtoa_r+0x168>
 800989e:	9b05      	ldr	r3, [sp, #20]
 80098a0:	eba3 030a 	sub.w	r3, r3, sl
 80098a4:	9305      	str	r3, [sp, #20]
 80098a6:	f1ca 0300 	rsb	r3, sl, #0
 80098aa:	9307      	str	r3, [sp, #28]
 80098ac:	2300      	movs	r3, #0
 80098ae:	930e      	str	r3, [sp, #56]	; 0x38
 80098b0:	e7bb      	b.n	800982a <_dtoa_r+0x192>
 80098b2:	2301      	movs	r3, #1
 80098b4:	930a      	str	r3, [sp, #40]	; 0x28
 80098b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	dd56      	ble.n	800996a <_dtoa_r+0x2d2>
 80098bc:	9302      	str	r3, [sp, #8]
 80098be:	4699      	mov	r9, r3
 80098c0:	2200      	movs	r2, #0
 80098c2:	6462      	str	r2, [r4, #68]	; 0x44
 80098c4:	2204      	movs	r2, #4
 80098c6:	f102 0014 	add.w	r0, r2, #20
 80098ca:	4298      	cmp	r0, r3
 80098cc:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80098ce:	d951      	bls.n	8009974 <_dtoa_r+0x2dc>
 80098d0:	4620      	mov	r0, r4
 80098d2:	f001 f815 	bl	800a900 <_Balloc>
 80098d6:	f1b9 0f0e 	cmp.w	r9, #14
 80098da:	4683      	mov	fp, r0
 80098dc:	6420      	str	r0, [r4, #64]	; 0x40
 80098de:	f200 80e8 	bhi.w	8009ab2 <_dtoa_r+0x41a>
 80098e2:	2d00      	cmp	r5, #0
 80098e4:	f000 80e5 	beq.w	8009ab2 <_dtoa_r+0x41a>
 80098e8:	ed9d 7b00 	vldr	d7, [sp]
 80098ec:	f1ba 0f00 	cmp.w	sl, #0
 80098f0:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80098f4:	dd76      	ble.n	80099e4 <_dtoa_r+0x34c>
 80098f6:	4a2b      	ldr	r2, [pc, #172]	; (80099a4 <_dtoa_r+0x30c>)
 80098f8:	f00a 030f 	and.w	r3, sl, #15
 80098fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009900:	ed93 7b00 	vldr	d7, [r3]
 8009904:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009908:	06f0      	lsls	r0, r6, #27
 800990a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800990e:	d567      	bpl.n	80099e0 <_dtoa_r+0x348>
 8009910:	4b25      	ldr	r3, [pc, #148]	; (80099a8 <_dtoa_r+0x310>)
 8009912:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009916:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800991a:	f7f6 ff9f 	bl	800085c <__aeabi_ddiv>
 800991e:	e9cd 0100 	strd	r0, r1, [sp]
 8009922:	f006 060f 	and.w	r6, r6, #15
 8009926:	2503      	movs	r5, #3
 8009928:	4f1f      	ldr	r7, [pc, #124]	; (80099a8 <_dtoa_r+0x310>)
 800992a:	e04e      	b.n	80099ca <_dtoa_r+0x332>
 800992c:	2301      	movs	r3, #1
 800992e:	930a      	str	r3, [sp, #40]	; 0x28
 8009930:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009932:	4453      	add	r3, sl
 8009934:	f103 0901 	add.w	r9, r3, #1
 8009938:	9302      	str	r3, [sp, #8]
 800993a:	464b      	mov	r3, r9
 800993c:	2b01      	cmp	r3, #1
 800993e:	bfb8      	it	lt
 8009940:	2301      	movlt	r3, #1
 8009942:	e7bd      	b.n	80098c0 <_dtoa_r+0x228>
 8009944:	2300      	movs	r3, #0
 8009946:	e7b5      	b.n	80098b4 <_dtoa_r+0x21c>
 8009948:	2300      	movs	r3, #0
 800994a:	e7f0      	b.n	800992e <_dtoa_r+0x296>
 800994c:	2501      	movs	r5, #1
 800994e:	2300      	movs	r3, #0
 8009950:	9306      	str	r3, [sp, #24]
 8009952:	950a      	str	r5, [sp, #40]	; 0x28
 8009954:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009958:	9302      	str	r3, [sp, #8]
 800995a:	4699      	mov	r9, r3
 800995c:	2200      	movs	r2, #0
 800995e:	2312      	movs	r3, #18
 8009960:	920b      	str	r2, [sp, #44]	; 0x2c
 8009962:	e7ad      	b.n	80098c0 <_dtoa_r+0x228>
 8009964:	2301      	movs	r3, #1
 8009966:	930a      	str	r3, [sp, #40]	; 0x28
 8009968:	e7f4      	b.n	8009954 <_dtoa_r+0x2bc>
 800996a:	2301      	movs	r3, #1
 800996c:	9302      	str	r3, [sp, #8]
 800996e:	4699      	mov	r9, r3
 8009970:	461a      	mov	r2, r3
 8009972:	e7f5      	b.n	8009960 <_dtoa_r+0x2c8>
 8009974:	3101      	adds	r1, #1
 8009976:	6461      	str	r1, [r4, #68]	; 0x44
 8009978:	0052      	lsls	r2, r2, #1
 800997a:	e7a4      	b.n	80098c6 <_dtoa_r+0x22e>
 800997c:	f3af 8000 	nop.w
 8009980:	636f4361 	.word	0x636f4361
 8009984:	3fd287a7 	.word	0x3fd287a7
 8009988:	8b60c8b3 	.word	0x8b60c8b3
 800998c:	3fc68a28 	.word	0x3fc68a28
 8009990:	509f79fb 	.word	0x509f79fb
 8009994:	3fd34413 	.word	0x3fd34413
 8009998:	7ff00000 	.word	0x7ff00000
 800999c:	0800d657 	.word	0x0800d657
 80099a0:	3ff80000 	.word	0x3ff80000
 80099a4:	0800d6b8 	.word	0x0800d6b8
 80099a8:	0800d690 	.word	0x0800d690
 80099ac:	0800d681 	.word	0x0800d681
 80099b0:	07f1      	lsls	r1, r6, #31
 80099b2:	d508      	bpl.n	80099c6 <_dtoa_r+0x32e>
 80099b4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80099b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099bc:	f7f6 fe24 	bl	8000608 <__aeabi_dmul>
 80099c0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80099c4:	3501      	adds	r5, #1
 80099c6:	1076      	asrs	r6, r6, #1
 80099c8:	3708      	adds	r7, #8
 80099ca:	2e00      	cmp	r6, #0
 80099cc:	d1f0      	bne.n	80099b0 <_dtoa_r+0x318>
 80099ce:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80099d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099d6:	f7f6 ff41 	bl	800085c <__aeabi_ddiv>
 80099da:	e9cd 0100 	strd	r0, r1, [sp]
 80099de:	e01a      	b.n	8009a16 <_dtoa_r+0x37e>
 80099e0:	2502      	movs	r5, #2
 80099e2:	e7a1      	b.n	8009928 <_dtoa_r+0x290>
 80099e4:	f000 80a0 	beq.w	8009b28 <_dtoa_r+0x490>
 80099e8:	f1ca 0600 	rsb	r6, sl, #0
 80099ec:	4b9f      	ldr	r3, [pc, #636]	; (8009c6c <_dtoa_r+0x5d4>)
 80099ee:	4fa0      	ldr	r7, [pc, #640]	; (8009c70 <_dtoa_r+0x5d8>)
 80099f0:	f006 020f 	and.w	r2, r6, #15
 80099f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009a00:	f7f6 fe02 	bl	8000608 <__aeabi_dmul>
 8009a04:	e9cd 0100 	strd	r0, r1, [sp]
 8009a08:	1136      	asrs	r6, r6, #4
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	2502      	movs	r5, #2
 8009a0e:	2e00      	cmp	r6, #0
 8009a10:	d17f      	bne.n	8009b12 <_dtoa_r+0x47a>
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d1e1      	bne.n	80099da <_dtoa_r+0x342>
 8009a16:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	f000 8087 	beq.w	8009b2c <_dtoa_r+0x494>
 8009a1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009a22:	2200      	movs	r2, #0
 8009a24:	4b93      	ldr	r3, [pc, #588]	; (8009c74 <_dtoa_r+0x5dc>)
 8009a26:	4630      	mov	r0, r6
 8009a28:	4639      	mov	r1, r7
 8009a2a:	f7f7 f85f 	bl	8000aec <__aeabi_dcmplt>
 8009a2e:	2800      	cmp	r0, #0
 8009a30:	d07c      	beq.n	8009b2c <_dtoa_r+0x494>
 8009a32:	f1b9 0f00 	cmp.w	r9, #0
 8009a36:	d079      	beq.n	8009b2c <_dtoa_r+0x494>
 8009a38:	9b02      	ldr	r3, [sp, #8]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	dd35      	ble.n	8009aaa <_dtoa_r+0x412>
 8009a3e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8009a42:	9308      	str	r3, [sp, #32]
 8009a44:	4639      	mov	r1, r7
 8009a46:	2200      	movs	r2, #0
 8009a48:	4b8b      	ldr	r3, [pc, #556]	; (8009c78 <_dtoa_r+0x5e0>)
 8009a4a:	4630      	mov	r0, r6
 8009a4c:	f7f6 fddc 	bl	8000608 <__aeabi_dmul>
 8009a50:	e9cd 0100 	strd	r0, r1, [sp]
 8009a54:	9f02      	ldr	r7, [sp, #8]
 8009a56:	3501      	adds	r5, #1
 8009a58:	4628      	mov	r0, r5
 8009a5a:	f7f6 fd6b 	bl	8000534 <__aeabi_i2d>
 8009a5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009a62:	f7f6 fdd1 	bl	8000608 <__aeabi_dmul>
 8009a66:	2200      	movs	r2, #0
 8009a68:	4b84      	ldr	r3, [pc, #528]	; (8009c7c <_dtoa_r+0x5e4>)
 8009a6a:	f7f6 fc17 	bl	800029c <__adddf3>
 8009a6e:	4605      	mov	r5, r0
 8009a70:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009a74:	2f00      	cmp	r7, #0
 8009a76:	d15d      	bne.n	8009b34 <_dtoa_r+0x49c>
 8009a78:	2200      	movs	r2, #0
 8009a7a:	4b81      	ldr	r3, [pc, #516]	; (8009c80 <_dtoa_r+0x5e8>)
 8009a7c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a80:	f7f6 fc0a 	bl	8000298 <__aeabi_dsub>
 8009a84:	462a      	mov	r2, r5
 8009a86:	4633      	mov	r3, r6
 8009a88:	e9cd 0100 	strd	r0, r1, [sp]
 8009a8c:	f7f7 f84c 	bl	8000b28 <__aeabi_dcmpgt>
 8009a90:	2800      	cmp	r0, #0
 8009a92:	f040 8288 	bne.w	8009fa6 <_dtoa_r+0x90e>
 8009a96:	462a      	mov	r2, r5
 8009a98:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8009a9c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009aa0:	f7f7 f824 	bl	8000aec <__aeabi_dcmplt>
 8009aa4:	2800      	cmp	r0, #0
 8009aa6:	f040 827c 	bne.w	8009fa2 <_dtoa_r+0x90a>
 8009aaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009aae:	e9cd 2300 	strd	r2, r3, [sp]
 8009ab2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	f2c0 8150 	blt.w	8009d5a <_dtoa_r+0x6c2>
 8009aba:	f1ba 0f0e 	cmp.w	sl, #14
 8009abe:	f300 814c 	bgt.w	8009d5a <_dtoa_r+0x6c2>
 8009ac2:	4b6a      	ldr	r3, [pc, #424]	; (8009c6c <_dtoa_r+0x5d4>)
 8009ac4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009ac8:	ed93 7b00 	vldr	d7, [r3]
 8009acc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ad4:	f280 80d8 	bge.w	8009c88 <_dtoa_r+0x5f0>
 8009ad8:	f1b9 0f00 	cmp.w	r9, #0
 8009adc:	f300 80d4 	bgt.w	8009c88 <_dtoa_r+0x5f0>
 8009ae0:	f040 825e 	bne.w	8009fa0 <_dtoa_r+0x908>
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	4b66      	ldr	r3, [pc, #408]	; (8009c80 <_dtoa_r+0x5e8>)
 8009ae8:	ec51 0b17 	vmov	r0, r1, d7
 8009aec:	f7f6 fd8c 	bl	8000608 <__aeabi_dmul>
 8009af0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009af4:	f7f7 f80e 	bl	8000b14 <__aeabi_dcmpge>
 8009af8:	464f      	mov	r7, r9
 8009afa:	464e      	mov	r6, r9
 8009afc:	2800      	cmp	r0, #0
 8009afe:	f040 8234 	bne.w	8009f6a <_dtoa_r+0x8d2>
 8009b02:	2331      	movs	r3, #49	; 0x31
 8009b04:	f10b 0501 	add.w	r5, fp, #1
 8009b08:	f88b 3000 	strb.w	r3, [fp]
 8009b0c:	f10a 0a01 	add.w	sl, sl, #1
 8009b10:	e22f      	b.n	8009f72 <_dtoa_r+0x8da>
 8009b12:	07f2      	lsls	r2, r6, #31
 8009b14:	d505      	bpl.n	8009b22 <_dtoa_r+0x48a>
 8009b16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b1a:	f7f6 fd75 	bl	8000608 <__aeabi_dmul>
 8009b1e:	3501      	adds	r5, #1
 8009b20:	2301      	movs	r3, #1
 8009b22:	1076      	asrs	r6, r6, #1
 8009b24:	3708      	adds	r7, #8
 8009b26:	e772      	b.n	8009a0e <_dtoa_r+0x376>
 8009b28:	2502      	movs	r5, #2
 8009b2a:	e774      	b.n	8009a16 <_dtoa_r+0x37e>
 8009b2c:	f8cd a020 	str.w	sl, [sp, #32]
 8009b30:	464f      	mov	r7, r9
 8009b32:	e791      	b.n	8009a58 <_dtoa_r+0x3c0>
 8009b34:	4b4d      	ldr	r3, [pc, #308]	; (8009c6c <_dtoa_r+0x5d4>)
 8009b36:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009b3a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d047      	beq.n	8009bd4 <_dtoa_r+0x53c>
 8009b44:	4602      	mov	r2, r0
 8009b46:	460b      	mov	r3, r1
 8009b48:	2000      	movs	r0, #0
 8009b4a:	494e      	ldr	r1, [pc, #312]	; (8009c84 <_dtoa_r+0x5ec>)
 8009b4c:	f7f6 fe86 	bl	800085c <__aeabi_ddiv>
 8009b50:	462a      	mov	r2, r5
 8009b52:	4633      	mov	r3, r6
 8009b54:	f7f6 fba0 	bl	8000298 <__aeabi_dsub>
 8009b58:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009b5c:	465d      	mov	r5, fp
 8009b5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b62:	f7f7 f801 	bl	8000b68 <__aeabi_d2iz>
 8009b66:	4606      	mov	r6, r0
 8009b68:	f7f6 fce4 	bl	8000534 <__aeabi_i2d>
 8009b6c:	4602      	mov	r2, r0
 8009b6e:	460b      	mov	r3, r1
 8009b70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009b74:	f7f6 fb90 	bl	8000298 <__aeabi_dsub>
 8009b78:	3630      	adds	r6, #48	; 0x30
 8009b7a:	f805 6b01 	strb.w	r6, [r5], #1
 8009b7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009b82:	e9cd 0100 	strd	r0, r1, [sp]
 8009b86:	f7f6 ffb1 	bl	8000aec <__aeabi_dcmplt>
 8009b8a:	2800      	cmp	r0, #0
 8009b8c:	d163      	bne.n	8009c56 <_dtoa_r+0x5be>
 8009b8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b92:	2000      	movs	r0, #0
 8009b94:	4937      	ldr	r1, [pc, #220]	; (8009c74 <_dtoa_r+0x5dc>)
 8009b96:	f7f6 fb7f 	bl	8000298 <__aeabi_dsub>
 8009b9a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009b9e:	f7f6 ffa5 	bl	8000aec <__aeabi_dcmplt>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	f040 80b7 	bne.w	8009d16 <_dtoa_r+0x67e>
 8009ba8:	eba5 030b 	sub.w	r3, r5, fp
 8009bac:	429f      	cmp	r7, r3
 8009bae:	f77f af7c 	ble.w	8009aaa <_dtoa_r+0x412>
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	4b30      	ldr	r3, [pc, #192]	; (8009c78 <_dtoa_r+0x5e0>)
 8009bb6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009bba:	f7f6 fd25 	bl	8000608 <__aeabi_dmul>
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009bc4:	4b2c      	ldr	r3, [pc, #176]	; (8009c78 <_dtoa_r+0x5e0>)
 8009bc6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bca:	f7f6 fd1d 	bl	8000608 <__aeabi_dmul>
 8009bce:	e9cd 0100 	strd	r0, r1, [sp]
 8009bd2:	e7c4      	b.n	8009b5e <_dtoa_r+0x4c6>
 8009bd4:	462a      	mov	r2, r5
 8009bd6:	4633      	mov	r3, r6
 8009bd8:	f7f6 fd16 	bl	8000608 <__aeabi_dmul>
 8009bdc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009be0:	eb0b 0507 	add.w	r5, fp, r7
 8009be4:	465e      	mov	r6, fp
 8009be6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bea:	f7f6 ffbd 	bl	8000b68 <__aeabi_d2iz>
 8009bee:	4607      	mov	r7, r0
 8009bf0:	f7f6 fca0 	bl	8000534 <__aeabi_i2d>
 8009bf4:	3730      	adds	r7, #48	; 0x30
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009bfe:	f7f6 fb4b 	bl	8000298 <__aeabi_dsub>
 8009c02:	f806 7b01 	strb.w	r7, [r6], #1
 8009c06:	42ae      	cmp	r6, r5
 8009c08:	e9cd 0100 	strd	r0, r1, [sp]
 8009c0c:	f04f 0200 	mov.w	r2, #0
 8009c10:	d126      	bne.n	8009c60 <_dtoa_r+0x5c8>
 8009c12:	4b1c      	ldr	r3, [pc, #112]	; (8009c84 <_dtoa_r+0x5ec>)
 8009c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009c18:	f7f6 fb40 	bl	800029c <__adddf3>
 8009c1c:	4602      	mov	r2, r0
 8009c1e:	460b      	mov	r3, r1
 8009c20:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c24:	f7f6 ff80 	bl	8000b28 <__aeabi_dcmpgt>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d174      	bne.n	8009d16 <_dtoa_r+0x67e>
 8009c2c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009c30:	2000      	movs	r0, #0
 8009c32:	4914      	ldr	r1, [pc, #80]	; (8009c84 <_dtoa_r+0x5ec>)
 8009c34:	f7f6 fb30 	bl	8000298 <__aeabi_dsub>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009c40:	f7f6 ff54 	bl	8000aec <__aeabi_dcmplt>
 8009c44:	2800      	cmp	r0, #0
 8009c46:	f43f af30 	beq.w	8009aaa <_dtoa_r+0x412>
 8009c4a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c4e:	2b30      	cmp	r3, #48	; 0x30
 8009c50:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009c54:	d002      	beq.n	8009c5c <_dtoa_r+0x5c4>
 8009c56:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009c5a:	e04a      	b.n	8009cf2 <_dtoa_r+0x65a>
 8009c5c:	4615      	mov	r5, r2
 8009c5e:	e7f4      	b.n	8009c4a <_dtoa_r+0x5b2>
 8009c60:	4b05      	ldr	r3, [pc, #20]	; (8009c78 <_dtoa_r+0x5e0>)
 8009c62:	f7f6 fcd1 	bl	8000608 <__aeabi_dmul>
 8009c66:	e9cd 0100 	strd	r0, r1, [sp]
 8009c6a:	e7bc      	b.n	8009be6 <_dtoa_r+0x54e>
 8009c6c:	0800d6b8 	.word	0x0800d6b8
 8009c70:	0800d690 	.word	0x0800d690
 8009c74:	3ff00000 	.word	0x3ff00000
 8009c78:	40240000 	.word	0x40240000
 8009c7c:	401c0000 	.word	0x401c0000
 8009c80:	40140000 	.word	0x40140000
 8009c84:	3fe00000 	.word	0x3fe00000
 8009c88:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009c8c:	465d      	mov	r5, fp
 8009c8e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009c92:	4630      	mov	r0, r6
 8009c94:	4639      	mov	r1, r7
 8009c96:	f7f6 fde1 	bl	800085c <__aeabi_ddiv>
 8009c9a:	f7f6 ff65 	bl	8000b68 <__aeabi_d2iz>
 8009c9e:	4680      	mov	r8, r0
 8009ca0:	f7f6 fc48 	bl	8000534 <__aeabi_i2d>
 8009ca4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ca8:	f7f6 fcae 	bl	8000608 <__aeabi_dmul>
 8009cac:	4602      	mov	r2, r0
 8009cae:	460b      	mov	r3, r1
 8009cb0:	4630      	mov	r0, r6
 8009cb2:	4639      	mov	r1, r7
 8009cb4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009cb8:	f7f6 faee 	bl	8000298 <__aeabi_dsub>
 8009cbc:	f805 6b01 	strb.w	r6, [r5], #1
 8009cc0:	eba5 060b 	sub.w	r6, r5, fp
 8009cc4:	45b1      	cmp	r9, r6
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	d139      	bne.n	8009d40 <_dtoa_r+0x6a8>
 8009ccc:	f7f6 fae6 	bl	800029c <__adddf3>
 8009cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cd4:	4606      	mov	r6, r0
 8009cd6:	460f      	mov	r7, r1
 8009cd8:	f7f6 ff26 	bl	8000b28 <__aeabi_dcmpgt>
 8009cdc:	b9c8      	cbnz	r0, 8009d12 <_dtoa_r+0x67a>
 8009cde:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	4639      	mov	r1, r7
 8009ce6:	f7f6 fef7 	bl	8000ad8 <__aeabi_dcmpeq>
 8009cea:	b110      	cbz	r0, 8009cf2 <_dtoa_r+0x65a>
 8009cec:	f018 0f01 	tst.w	r8, #1
 8009cf0:	d10f      	bne.n	8009d12 <_dtoa_r+0x67a>
 8009cf2:	9904      	ldr	r1, [sp, #16]
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	f000 fe28 	bl	800a94a <_Bfree>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009cfe:	702b      	strb	r3, [r5, #0]
 8009d00:	f10a 0301 	add.w	r3, sl, #1
 8009d04:	6013      	str	r3, [r2, #0]
 8009d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	f43f acff 	beq.w	800970c <_dtoa_r+0x74>
 8009d0e:	601d      	str	r5, [r3, #0]
 8009d10:	e4fc      	b.n	800970c <_dtoa_r+0x74>
 8009d12:	f8cd a020 	str.w	sl, [sp, #32]
 8009d16:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009d1a:	2a39      	cmp	r2, #57	; 0x39
 8009d1c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8009d20:	d108      	bne.n	8009d34 <_dtoa_r+0x69c>
 8009d22:	459b      	cmp	fp, r3
 8009d24:	d10a      	bne.n	8009d3c <_dtoa_r+0x6a4>
 8009d26:	9b08      	ldr	r3, [sp, #32]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	9308      	str	r3, [sp, #32]
 8009d2c:	2330      	movs	r3, #48	; 0x30
 8009d2e:	f88b 3000 	strb.w	r3, [fp]
 8009d32:	465b      	mov	r3, fp
 8009d34:	781a      	ldrb	r2, [r3, #0]
 8009d36:	3201      	adds	r2, #1
 8009d38:	701a      	strb	r2, [r3, #0]
 8009d3a:	e78c      	b.n	8009c56 <_dtoa_r+0x5be>
 8009d3c:	461d      	mov	r5, r3
 8009d3e:	e7ea      	b.n	8009d16 <_dtoa_r+0x67e>
 8009d40:	2200      	movs	r2, #0
 8009d42:	4b9b      	ldr	r3, [pc, #620]	; (8009fb0 <_dtoa_r+0x918>)
 8009d44:	f7f6 fc60 	bl	8000608 <__aeabi_dmul>
 8009d48:	2200      	movs	r2, #0
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	4606      	mov	r6, r0
 8009d4e:	460f      	mov	r7, r1
 8009d50:	f7f6 fec2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d09a      	beq.n	8009c8e <_dtoa_r+0x5f6>
 8009d58:	e7cb      	b.n	8009cf2 <_dtoa_r+0x65a>
 8009d5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d5c:	2a00      	cmp	r2, #0
 8009d5e:	f000 808b 	beq.w	8009e78 <_dtoa_r+0x7e0>
 8009d62:	9a06      	ldr	r2, [sp, #24]
 8009d64:	2a01      	cmp	r2, #1
 8009d66:	dc6e      	bgt.n	8009e46 <_dtoa_r+0x7ae>
 8009d68:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009d6a:	2a00      	cmp	r2, #0
 8009d6c:	d067      	beq.n	8009e3e <_dtoa_r+0x7a6>
 8009d6e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d72:	9f07      	ldr	r7, [sp, #28]
 8009d74:	9d05      	ldr	r5, [sp, #20]
 8009d76:	9a05      	ldr	r2, [sp, #20]
 8009d78:	2101      	movs	r1, #1
 8009d7a:	441a      	add	r2, r3
 8009d7c:	4620      	mov	r0, r4
 8009d7e:	9205      	str	r2, [sp, #20]
 8009d80:	4498      	add	r8, r3
 8009d82:	f000 fe74 	bl	800aa6e <__i2b>
 8009d86:	4606      	mov	r6, r0
 8009d88:	2d00      	cmp	r5, #0
 8009d8a:	dd0c      	ble.n	8009da6 <_dtoa_r+0x70e>
 8009d8c:	f1b8 0f00 	cmp.w	r8, #0
 8009d90:	dd09      	ble.n	8009da6 <_dtoa_r+0x70e>
 8009d92:	4545      	cmp	r5, r8
 8009d94:	9a05      	ldr	r2, [sp, #20]
 8009d96:	462b      	mov	r3, r5
 8009d98:	bfa8      	it	ge
 8009d9a:	4643      	movge	r3, r8
 8009d9c:	1ad2      	subs	r2, r2, r3
 8009d9e:	9205      	str	r2, [sp, #20]
 8009da0:	1aed      	subs	r5, r5, r3
 8009da2:	eba8 0803 	sub.w	r8, r8, r3
 8009da6:	9b07      	ldr	r3, [sp, #28]
 8009da8:	b1eb      	cbz	r3, 8009de6 <_dtoa_r+0x74e>
 8009daa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d067      	beq.n	8009e80 <_dtoa_r+0x7e8>
 8009db0:	b18f      	cbz	r7, 8009dd6 <_dtoa_r+0x73e>
 8009db2:	4631      	mov	r1, r6
 8009db4:	463a      	mov	r2, r7
 8009db6:	4620      	mov	r0, r4
 8009db8:	f000 fef8 	bl	800abac <__pow5mult>
 8009dbc:	9a04      	ldr	r2, [sp, #16]
 8009dbe:	4601      	mov	r1, r0
 8009dc0:	4606      	mov	r6, r0
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	f000 fe5c 	bl	800aa80 <__multiply>
 8009dc8:	9904      	ldr	r1, [sp, #16]
 8009dca:	9008      	str	r0, [sp, #32]
 8009dcc:	4620      	mov	r0, r4
 8009dce:	f000 fdbc 	bl	800a94a <_Bfree>
 8009dd2:	9b08      	ldr	r3, [sp, #32]
 8009dd4:	9304      	str	r3, [sp, #16]
 8009dd6:	9b07      	ldr	r3, [sp, #28]
 8009dd8:	1bda      	subs	r2, r3, r7
 8009dda:	d004      	beq.n	8009de6 <_dtoa_r+0x74e>
 8009ddc:	9904      	ldr	r1, [sp, #16]
 8009dde:	4620      	mov	r0, r4
 8009de0:	f000 fee4 	bl	800abac <__pow5mult>
 8009de4:	9004      	str	r0, [sp, #16]
 8009de6:	2101      	movs	r1, #1
 8009de8:	4620      	mov	r0, r4
 8009dea:	f000 fe40 	bl	800aa6e <__i2b>
 8009dee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009df0:	4607      	mov	r7, r0
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 81cf 	beq.w	800a196 <_dtoa_r+0xafe>
 8009df8:	461a      	mov	r2, r3
 8009dfa:	4601      	mov	r1, r0
 8009dfc:	4620      	mov	r0, r4
 8009dfe:	f000 fed5 	bl	800abac <__pow5mult>
 8009e02:	9b06      	ldr	r3, [sp, #24]
 8009e04:	2b01      	cmp	r3, #1
 8009e06:	4607      	mov	r7, r0
 8009e08:	dc40      	bgt.n	8009e8c <_dtoa_r+0x7f4>
 8009e0a:	9b00      	ldr	r3, [sp, #0]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d139      	bne.n	8009e84 <_dtoa_r+0x7ec>
 8009e10:	9b01      	ldr	r3, [sp, #4]
 8009e12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d136      	bne.n	8009e88 <_dtoa_r+0x7f0>
 8009e1a:	9b01      	ldr	r3, [sp, #4]
 8009e1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009e20:	0d1b      	lsrs	r3, r3, #20
 8009e22:	051b      	lsls	r3, r3, #20
 8009e24:	b12b      	cbz	r3, 8009e32 <_dtoa_r+0x79a>
 8009e26:	9b05      	ldr	r3, [sp, #20]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	9305      	str	r3, [sp, #20]
 8009e2c:	f108 0801 	add.w	r8, r8, #1
 8009e30:	2301      	movs	r3, #1
 8009e32:	9307      	str	r3, [sp, #28]
 8009e34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d12a      	bne.n	8009e90 <_dtoa_r+0x7f8>
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	e030      	b.n	8009ea0 <_dtoa_r+0x808>
 8009e3e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e40:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e44:	e795      	b.n	8009d72 <_dtoa_r+0x6da>
 8009e46:	9b07      	ldr	r3, [sp, #28]
 8009e48:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 8009e4c:	42bb      	cmp	r3, r7
 8009e4e:	bfbf      	itttt	lt
 8009e50:	9b07      	ldrlt	r3, [sp, #28]
 8009e52:	9707      	strlt	r7, [sp, #28]
 8009e54:	1afa      	sublt	r2, r7, r3
 8009e56:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009e58:	bfbb      	ittet	lt
 8009e5a:	189b      	addlt	r3, r3, r2
 8009e5c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009e5e:	1bdf      	subge	r7, r3, r7
 8009e60:	2700      	movlt	r7, #0
 8009e62:	f1b9 0f00 	cmp.w	r9, #0
 8009e66:	bfb5      	itete	lt
 8009e68:	9b05      	ldrlt	r3, [sp, #20]
 8009e6a:	9d05      	ldrge	r5, [sp, #20]
 8009e6c:	eba3 0509 	sublt.w	r5, r3, r9
 8009e70:	464b      	movge	r3, r9
 8009e72:	bfb8      	it	lt
 8009e74:	2300      	movlt	r3, #0
 8009e76:	e77e      	b.n	8009d76 <_dtoa_r+0x6de>
 8009e78:	9f07      	ldr	r7, [sp, #28]
 8009e7a:	9d05      	ldr	r5, [sp, #20]
 8009e7c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009e7e:	e783      	b.n	8009d88 <_dtoa_r+0x6f0>
 8009e80:	9a07      	ldr	r2, [sp, #28]
 8009e82:	e7ab      	b.n	8009ddc <_dtoa_r+0x744>
 8009e84:	2300      	movs	r3, #0
 8009e86:	e7d4      	b.n	8009e32 <_dtoa_r+0x79a>
 8009e88:	9b00      	ldr	r3, [sp, #0]
 8009e8a:	e7d2      	b.n	8009e32 <_dtoa_r+0x79a>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9307      	str	r3, [sp, #28]
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009e96:	6918      	ldr	r0, [r3, #16]
 8009e98:	f000 fd9b 	bl	800a9d2 <__hi0bits>
 8009e9c:	f1c0 0020 	rsb	r0, r0, #32
 8009ea0:	4440      	add	r0, r8
 8009ea2:	f010 001f 	ands.w	r0, r0, #31
 8009ea6:	d047      	beq.n	8009f38 <_dtoa_r+0x8a0>
 8009ea8:	f1c0 0320 	rsb	r3, r0, #32
 8009eac:	2b04      	cmp	r3, #4
 8009eae:	dd3b      	ble.n	8009f28 <_dtoa_r+0x890>
 8009eb0:	9b05      	ldr	r3, [sp, #20]
 8009eb2:	f1c0 001c 	rsb	r0, r0, #28
 8009eb6:	4403      	add	r3, r0
 8009eb8:	9305      	str	r3, [sp, #20]
 8009eba:	4405      	add	r5, r0
 8009ebc:	4480      	add	r8, r0
 8009ebe:	9b05      	ldr	r3, [sp, #20]
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	dd05      	ble.n	8009ed0 <_dtoa_r+0x838>
 8009ec4:	461a      	mov	r2, r3
 8009ec6:	9904      	ldr	r1, [sp, #16]
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f000 feaf 	bl	800ac2c <__lshift>
 8009ece:	9004      	str	r0, [sp, #16]
 8009ed0:	f1b8 0f00 	cmp.w	r8, #0
 8009ed4:	dd05      	ble.n	8009ee2 <_dtoa_r+0x84a>
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	4642      	mov	r2, r8
 8009eda:	4620      	mov	r0, r4
 8009edc:	f000 fea6 	bl	800ac2c <__lshift>
 8009ee0:	4607      	mov	r7, r0
 8009ee2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009ee4:	b353      	cbz	r3, 8009f3c <_dtoa_r+0x8a4>
 8009ee6:	4639      	mov	r1, r7
 8009ee8:	9804      	ldr	r0, [sp, #16]
 8009eea:	f000 fef3 	bl	800acd4 <__mcmp>
 8009eee:	2800      	cmp	r0, #0
 8009ef0:	da24      	bge.n	8009f3c <_dtoa_r+0x8a4>
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	220a      	movs	r2, #10
 8009ef6:	9904      	ldr	r1, [sp, #16]
 8009ef8:	4620      	mov	r0, r4
 8009efa:	f000 fd2f 	bl	800a95c <__multadd>
 8009efe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f00:	9004      	str	r0, [sp, #16]
 8009f02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	f000 814c 	beq.w	800a1a4 <_dtoa_r+0xb0c>
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	4631      	mov	r1, r6
 8009f10:	220a      	movs	r2, #10
 8009f12:	4620      	mov	r0, r4
 8009f14:	f000 fd22 	bl	800a95c <__multadd>
 8009f18:	9b02      	ldr	r3, [sp, #8]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	4606      	mov	r6, r0
 8009f1e:	dc4f      	bgt.n	8009fc0 <_dtoa_r+0x928>
 8009f20:	9b06      	ldr	r3, [sp, #24]
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	dd4c      	ble.n	8009fc0 <_dtoa_r+0x928>
 8009f26:	e011      	b.n	8009f4c <_dtoa_r+0x8b4>
 8009f28:	d0c9      	beq.n	8009ebe <_dtoa_r+0x826>
 8009f2a:	9a05      	ldr	r2, [sp, #20]
 8009f2c:	331c      	adds	r3, #28
 8009f2e:	441a      	add	r2, r3
 8009f30:	9205      	str	r2, [sp, #20]
 8009f32:	441d      	add	r5, r3
 8009f34:	4498      	add	r8, r3
 8009f36:	e7c2      	b.n	8009ebe <_dtoa_r+0x826>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	e7f6      	b.n	8009f2a <_dtoa_r+0x892>
 8009f3c:	f1b9 0f00 	cmp.w	r9, #0
 8009f40:	dc38      	bgt.n	8009fb4 <_dtoa_r+0x91c>
 8009f42:	9b06      	ldr	r3, [sp, #24]
 8009f44:	2b02      	cmp	r3, #2
 8009f46:	dd35      	ble.n	8009fb4 <_dtoa_r+0x91c>
 8009f48:	f8cd 9008 	str.w	r9, [sp, #8]
 8009f4c:	9b02      	ldr	r3, [sp, #8]
 8009f4e:	b963      	cbnz	r3, 8009f6a <_dtoa_r+0x8d2>
 8009f50:	4639      	mov	r1, r7
 8009f52:	2205      	movs	r2, #5
 8009f54:	4620      	mov	r0, r4
 8009f56:	f000 fd01 	bl	800a95c <__multadd>
 8009f5a:	4601      	mov	r1, r0
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	9804      	ldr	r0, [sp, #16]
 8009f60:	f000 feb8 	bl	800acd4 <__mcmp>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	f73f adcc 	bgt.w	8009b02 <_dtoa_r+0x46a>
 8009f6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f6c:	465d      	mov	r5, fp
 8009f6e:	ea6f 0a03 	mvn.w	sl, r3
 8009f72:	f04f 0900 	mov.w	r9, #0
 8009f76:	4639      	mov	r1, r7
 8009f78:	4620      	mov	r0, r4
 8009f7a:	f000 fce6 	bl	800a94a <_Bfree>
 8009f7e:	2e00      	cmp	r6, #0
 8009f80:	f43f aeb7 	beq.w	8009cf2 <_dtoa_r+0x65a>
 8009f84:	f1b9 0f00 	cmp.w	r9, #0
 8009f88:	d005      	beq.n	8009f96 <_dtoa_r+0x8fe>
 8009f8a:	45b1      	cmp	r9, r6
 8009f8c:	d003      	beq.n	8009f96 <_dtoa_r+0x8fe>
 8009f8e:	4649      	mov	r1, r9
 8009f90:	4620      	mov	r0, r4
 8009f92:	f000 fcda 	bl	800a94a <_Bfree>
 8009f96:	4631      	mov	r1, r6
 8009f98:	4620      	mov	r0, r4
 8009f9a:	f000 fcd6 	bl	800a94a <_Bfree>
 8009f9e:	e6a8      	b.n	8009cf2 <_dtoa_r+0x65a>
 8009fa0:	2700      	movs	r7, #0
 8009fa2:	463e      	mov	r6, r7
 8009fa4:	e7e1      	b.n	8009f6a <_dtoa_r+0x8d2>
 8009fa6:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009faa:	463e      	mov	r6, r7
 8009fac:	e5a9      	b.n	8009b02 <_dtoa_r+0x46a>
 8009fae:	bf00      	nop
 8009fb0:	40240000 	.word	0x40240000
 8009fb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009fb6:	f8cd 9008 	str.w	r9, [sp, #8]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	f000 80f9 	beq.w	800a1b2 <_dtoa_r+0xb1a>
 8009fc0:	2d00      	cmp	r5, #0
 8009fc2:	dd05      	ble.n	8009fd0 <_dtoa_r+0x938>
 8009fc4:	4631      	mov	r1, r6
 8009fc6:	462a      	mov	r2, r5
 8009fc8:	4620      	mov	r0, r4
 8009fca:	f000 fe2f 	bl	800ac2c <__lshift>
 8009fce:	4606      	mov	r6, r0
 8009fd0:	9b07      	ldr	r3, [sp, #28]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d04c      	beq.n	800a070 <_dtoa_r+0x9d8>
 8009fd6:	6871      	ldr	r1, [r6, #4]
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f000 fc91 	bl	800a900 <_Balloc>
 8009fde:	6932      	ldr	r2, [r6, #16]
 8009fe0:	3202      	adds	r2, #2
 8009fe2:	4605      	mov	r5, r0
 8009fe4:	0092      	lsls	r2, r2, #2
 8009fe6:	f106 010c 	add.w	r1, r6, #12
 8009fea:	300c      	adds	r0, #12
 8009fec:	f7fd ffa0 	bl	8007f30 <memcpy>
 8009ff0:	2201      	movs	r2, #1
 8009ff2:	4629      	mov	r1, r5
 8009ff4:	4620      	mov	r0, r4
 8009ff6:	f000 fe19 	bl	800ac2c <__lshift>
 8009ffa:	9b00      	ldr	r3, [sp, #0]
 8009ffc:	f8cd b014 	str.w	fp, [sp, #20]
 800a000:	f003 0301 	and.w	r3, r3, #1
 800a004:	46b1      	mov	r9, r6
 800a006:	9307      	str	r3, [sp, #28]
 800a008:	4606      	mov	r6, r0
 800a00a:	4639      	mov	r1, r7
 800a00c:	9804      	ldr	r0, [sp, #16]
 800a00e:	f7ff fab5 	bl	800957c <quorem>
 800a012:	4649      	mov	r1, r9
 800a014:	4605      	mov	r5, r0
 800a016:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a01a:	9804      	ldr	r0, [sp, #16]
 800a01c:	f000 fe5a 	bl	800acd4 <__mcmp>
 800a020:	4632      	mov	r2, r6
 800a022:	9000      	str	r0, [sp, #0]
 800a024:	4639      	mov	r1, r7
 800a026:	4620      	mov	r0, r4
 800a028:	f000 fe6e 	bl	800ad08 <__mdiff>
 800a02c:	68c3      	ldr	r3, [r0, #12]
 800a02e:	4602      	mov	r2, r0
 800a030:	bb03      	cbnz	r3, 800a074 <_dtoa_r+0x9dc>
 800a032:	4601      	mov	r1, r0
 800a034:	9008      	str	r0, [sp, #32]
 800a036:	9804      	ldr	r0, [sp, #16]
 800a038:	f000 fe4c 	bl	800acd4 <__mcmp>
 800a03c:	9a08      	ldr	r2, [sp, #32]
 800a03e:	4603      	mov	r3, r0
 800a040:	4611      	mov	r1, r2
 800a042:	4620      	mov	r0, r4
 800a044:	9308      	str	r3, [sp, #32]
 800a046:	f000 fc80 	bl	800a94a <_Bfree>
 800a04a:	9b08      	ldr	r3, [sp, #32]
 800a04c:	b9a3      	cbnz	r3, 800a078 <_dtoa_r+0x9e0>
 800a04e:	9a06      	ldr	r2, [sp, #24]
 800a050:	b992      	cbnz	r2, 800a078 <_dtoa_r+0x9e0>
 800a052:	9a07      	ldr	r2, [sp, #28]
 800a054:	b982      	cbnz	r2, 800a078 <_dtoa_r+0x9e0>
 800a056:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a05a:	d029      	beq.n	800a0b0 <_dtoa_r+0xa18>
 800a05c:	9b00      	ldr	r3, [sp, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	dd01      	ble.n	800a066 <_dtoa_r+0x9ce>
 800a062:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a066:	9b05      	ldr	r3, [sp, #20]
 800a068:	1c5d      	adds	r5, r3, #1
 800a06a:	f883 8000 	strb.w	r8, [r3]
 800a06e:	e782      	b.n	8009f76 <_dtoa_r+0x8de>
 800a070:	4630      	mov	r0, r6
 800a072:	e7c2      	b.n	8009ffa <_dtoa_r+0x962>
 800a074:	2301      	movs	r3, #1
 800a076:	e7e3      	b.n	800a040 <_dtoa_r+0x9a8>
 800a078:	9a00      	ldr	r2, [sp, #0]
 800a07a:	2a00      	cmp	r2, #0
 800a07c:	db04      	blt.n	800a088 <_dtoa_r+0x9f0>
 800a07e:	d125      	bne.n	800a0cc <_dtoa_r+0xa34>
 800a080:	9a06      	ldr	r2, [sp, #24]
 800a082:	bb1a      	cbnz	r2, 800a0cc <_dtoa_r+0xa34>
 800a084:	9a07      	ldr	r2, [sp, #28]
 800a086:	bb0a      	cbnz	r2, 800a0cc <_dtoa_r+0xa34>
 800a088:	2b00      	cmp	r3, #0
 800a08a:	ddec      	ble.n	800a066 <_dtoa_r+0x9ce>
 800a08c:	2201      	movs	r2, #1
 800a08e:	9904      	ldr	r1, [sp, #16]
 800a090:	4620      	mov	r0, r4
 800a092:	f000 fdcb 	bl	800ac2c <__lshift>
 800a096:	4639      	mov	r1, r7
 800a098:	9004      	str	r0, [sp, #16]
 800a09a:	f000 fe1b 	bl	800acd4 <__mcmp>
 800a09e:	2800      	cmp	r0, #0
 800a0a0:	dc03      	bgt.n	800a0aa <_dtoa_r+0xa12>
 800a0a2:	d1e0      	bne.n	800a066 <_dtoa_r+0x9ce>
 800a0a4:	f018 0f01 	tst.w	r8, #1
 800a0a8:	d0dd      	beq.n	800a066 <_dtoa_r+0x9ce>
 800a0aa:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a0ae:	d1d8      	bne.n	800a062 <_dtoa_r+0x9ca>
 800a0b0:	9b05      	ldr	r3, [sp, #20]
 800a0b2:	9a05      	ldr	r2, [sp, #20]
 800a0b4:	1c5d      	adds	r5, r3, #1
 800a0b6:	2339      	movs	r3, #57	; 0x39
 800a0b8:	7013      	strb	r3, [r2, #0]
 800a0ba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a0be:	2b39      	cmp	r3, #57	; 0x39
 800a0c0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a0c4:	d04f      	beq.n	800a166 <_dtoa_r+0xace>
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	7013      	strb	r3, [r2, #0]
 800a0ca:	e754      	b.n	8009f76 <_dtoa_r+0x8de>
 800a0cc:	9a05      	ldr	r2, [sp, #20]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	f102 0501 	add.w	r5, r2, #1
 800a0d4:	dd06      	ble.n	800a0e4 <_dtoa_r+0xa4c>
 800a0d6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a0da:	d0e9      	beq.n	800a0b0 <_dtoa_r+0xa18>
 800a0dc:	f108 0801 	add.w	r8, r8, #1
 800a0e0:	9b05      	ldr	r3, [sp, #20]
 800a0e2:	e7c2      	b.n	800a06a <_dtoa_r+0x9d2>
 800a0e4:	9a02      	ldr	r2, [sp, #8]
 800a0e6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a0ea:	eba5 030b 	sub.w	r3, r5, fp
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d021      	beq.n	800a136 <_dtoa_r+0xa9e>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	220a      	movs	r2, #10
 800a0f6:	9904      	ldr	r1, [sp, #16]
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f000 fc2f 	bl	800a95c <__multadd>
 800a0fe:	45b1      	cmp	r9, r6
 800a100:	9004      	str	r0, [sp, #16]
 800a102:	f04f 0300 	mov.w	r3, #0
 800a106:	f04f 020a 	mov.w	r2, #10
 800a10a:	4649      	mov	r1, r9
 800a10c:	4620      	mov	r0, r4
 800a10e:	d105      	bne.n	800a11c <_dtoa_r+0xa84>
 800a110:	f000 fc24 	bl	800a95c <__multadd>
 800a114:	4681      	mov	r9, r0
 800a116:	4606      	mov	r6, r0
 800a118:	9505      	str	r5, [sp, #20]
 800a11a:	e776      	b.n	800a00a <_dtoa_r+0x972>
 800a11c:	f000 fc1e 	bl	800a95c <__multadd>
 800a120:	4631      	mov	r1, r6
 800a122:	4681      	mov	r9, r0
 800a124:	2300      	movs	r3, #0
 800a126:	220a      	movs	r2, #10
 800a128:	4620      	mov	r0, r4
 800a12a:	f000 fc17 	bl	800a95c <__multadd>
 800a12e:	4606      	mov	r6, r0
 800a130:	e7f2      	b.n	800a118 <_dtoa_r+0xa80>
 800a132:	f04f 0900 	mov.w	r9, #0
 800a136:	2201      	movs	r2, #1
 800a138:	9904      	ldr	r1, [sp, #16]
 800a13a:	4620      	mov	r0, r4
 800a13c:	f000 fd76 	bl	800ac2c <__lshift>
 800a140:	4639      	mov	r1, r7
 800a142:	9004      	str	r0, [sp, #16]
 800a144:	f000 fdc6 	bl	800acd4 <__mcmp>
 800a148:	2800      	cmp	r0, #0
 800a14a:	dcb6      	bgt.n	800a0ba <_dtoa_r+0xa22>
 800a14c:	d102      	bne.n	800a154 <_dtoa_r+0xabc>
 800a14e:	f018 0f01 	tst.w	r8, #1
 800a152:	d1b2      	bne.n	800a0ba <_dtoa_r+0xa22>
 800a154:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a158:	2b30      	cmp	r3, #48	; 0x30
 800a15a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800a15e:	f47f af0a 	bne.w	8009f76 <_dtoa_r+0x8de>
 800a162:	4615      	mov	r5, r2
 800a164:	e7f6      	b.n	800a154 <_dtoa_r+0xabc>
 800a166:	4593      	cmp	fp, r2
 800a168:	d105      	bne.n	800a176 <_dtoa_r+0xade>
 800a16a:	2331      	movs	r3, #49	; 0x31
 800a16c:	f10a 0a01 	add.w	sl, sl, #1
 800a170:	f88b 3000 	strb.w	r3, [fp]
 800a174:	e6ff      	b.n	8009f76 <_dtoa_r+0x8de>
 800a176:	4615      	mov	r5, r2
 800a178:	e79f      	b.n	800a0ba <_dtoa_r+0xa22>
 800a17a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a1e0 <_dtoa_r+0xb48>
 800a17e:	f7ff bac5 	b.w	800970c <_dtoa_r+0x74>
 800a182:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a184:	f8df b05c 	ldr.w	fp, [pc, #92]	; 800a1e4 <_dtoa_r+0xb4c>
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f43f aabf 	beq.w	800970c <_dtoa_r+0x74>
 800a18e:	f10b 0308 	add.w	r3, fp, #8
 800a192:	f7ff bab9 	b.w	8009708 <_dtoa_r+0x70>
 800a196:	9b06      	ldr	r3, [sp, #24]
 800a198:	2b01      	cmp	r3, #1
 800a19a:	f77f ae36 	ble.w	8009e0a <_dtoa_r+0x772>
 800a19e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a1a0:	9307      	str	r3, [sp, #28]
 800a1a2:	e64a      	b.n	8009e3a <_dtoa_r+0x7a2>
 800a1a4:	9b02      	ldr	r3, [sp, #8]
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	dc03      	bgt.n	800a1b2 <_dtoa_r+0xb1a>
 800a1aa:	9b06      	ldr	r3, [sp, #24]
 800a1ac:	2b02      	cmp	r3, #2
 800a1ae:	f73f aecd 	bgt.w	8009f4c <_dtoa_r+0x8b4>
 800a1b2:	465d      	mov	r5, fp
 800a1b4:	4639      	mov	r1, r7
 800a1b6:	9804      	ldr	r0, [sp, #16]
 800a1b8:	f7ff f9e0 	bl	800957c <quorem>
 800a1bc:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a1c0:	f805 8b01 	strb.w	r8, [r5], #1
 800a1c4:	9a02      	ldr	r2, [sp, #8]
 800a1c6:	eba5 030b 	sub.w	r3, r5, fp
 800a1ca:	429a      	cmp	r2, r3
 800a1cc:	ddb1      	ble.n	800a132 <_dtoa_r+0xa9a>
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	220a      	movs	r2, #10
 800a1d2:	9904      	ldr	r1, [sp, #16]
 800a1d4:	4620      	mov	r0, r4
 800a1d6:	f000 fbc1 	bl	800a95c <__multadd>
 800a1da:	9004      	str	r0, [sp, #16]
 800a1dc:	e7ea      	b.n	800a1b4 <_dtoa_r+0xb1c>
 800a1de:	bf00      	nop
 800a1e0:	0800d656 	.word	0x0800d656
 800a1e4:	0800d678 	.word	0x0800d678

0800a1e8 <__libc_fini_array>:
 800a1e8:	b538      	push	{r3, r4, r5, lr}
 800a1ea:	4d07      	ldr	r5, [pc, #28]	; (800a208 <__libc_fini_array+0x20>)
 800a1ec:	4c07      	ldr	r4, [pc, #28]	; (800a20c <__libc_fini_array+0x24>)
 800a1ee:	1b64      	subs	r4, r4, r5
 800a1f0:	10a4      	asrs	r4, r4, #2
 800a1f2:	b91c      	cbnz	r4, 800a1fc <__libc_fini_array+0x14>
 800a1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1f8:	f002 ba06 	b.w	800c608 <_fini>
 800a1fc:	3c01      	subs	r4, #1
 800a1fe:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800a202:	4798      	blx	r3
 800a204:	e7f5      	b.n	800a1f2 <__libc_fini_array+0xa>
 800a206:	bf00      	nop
 800a208:	0800d8e8 	.word	0x0800d8e8
 800a20c:	0800d8ec 	.word	0x0800d8ec

0800a210 <_malloc_trim_r>:
 800a210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a214:	4605      	mov	r5, r0
 800a216:	2008      	movs	r0, #8
 800a218:	460c      	mov	r4, r1
 800a21a:	f000 fedf 	bl	800afdc <sysconf>
 800a21e:	4f23      	ldr	r7, [pc, #140]	; (800a2ac <_malloc_trim_r+0x9c>)
 800a220:	4680      	mov	r8, r0
 800a222:	4628      	mov	r0, r5
 800a224:	f000 fb60 	bl	800a8e8 <__malloc_lock>
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	685e      	ldr	r6, [r3, #4]
 800a22c:	f026 0603 	bic.w	r6, r6, #3
 800a230:	1b34      	subs	r4, r6, r4
 800a232:	3c11      	subs	r4, #17
 800a234:	4444      	add	r4, r8
 800a236:	fbb4 f4f8 	udiv	r4, r4, r8
 800a23a:	3c01      	subs	r4, #1
 800a23c:	fb08 f404 	mul.w	r4, r8, r4
 800a240:	45a0      	cmp	r8, r4
 800a242:	dd05      	ble.n	800a250 <_malloc_trim_r+0x40>
 800a244:	4628      	mov	r0, r5
 800a246:	f000 fb55 	bl	800a8f4 <__malloc_unlock>
 800a24a:	2000      	movs	r0, #0
 800a24c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a250:	2100      	movs	r1, #0
 800a252:	4628      	mov	r0, r5
 800a254:	f000 fe3a 	bl	800aecc <_sbrk_r>
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	4433      	add	r3, r6
 800a25c:	4298      	cmp	r0, r3
 800a25e:	d1f1      	bne.n	800a244 <_malloc_trim_r+0x34>
 800a260:	4261      	negs	r1, r4
 800a262:	4628      	mov	r0, r5
 800a264:	f000 fe32 	bl	800aecc <_sbrk_r>
 800a268:	3001      	adds	r0, #1
 800a26a:	d110      	bne.n	800a28e <_malloc_trim_r+0x7e>
 800a26c:	2100      	movs	r1, #0
 800a26e:	4628      	mov	r0, r5
 800a270:	f000 fe2c 	bl	800aecc <_sbrk_r>
 800a274:	68ba      	ldr	r2, [r7, #8]
 800a276:	1a83      	subs	r3, r0, r2
 800a278:	2b0f      	cmp	r3, #15
 800a27a:	dde3      	ble.n	800a244 <_malloc_trim_r+0x34>
 800a27c:	490c      	ldr	r1, [pc, #48]	; (800a2b0 <_malloc_trim_r+0xa0>)
 800a27e:	6809      	ldr	r1, [r1, #0]
 800a280:	1a40      	subs	r0, r0, r1
 800a282:	490c      	ldr	r1, [pc, #48]	; (800a2b4 <_malloc_trim_r+0xa4>)
 800a284:	f043 0301 	orr.w	r3, r3, #1
 800a288:	6008      	str	r0, [r1, #0]
 800a28a:	6053      	str	r3, [r2, #4]
 800a28c:	e7da      	b.n	800a244 <_malloc_trim_r+0x34>
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	4a08      	ldr	r2, [pc, #32]	; (800a2b4 <_malloc_trim_r+0xa4>)
 800a292:	1b36      	subs	r6, r6, r4
 800a294:	f046 0601 	orr.w	r6, r6, #1
 800a298:	605e      	str	r6, [r3, #4]
 800a29a:	6813      	ldr	r3, [r2, #0]
 800a29c:	4628      	mov	r0, r5
 800a29e:	1b1c      	subs	r4, r3, r4
 800a2a0:	6014      	str	r4, [r2, #0]
 800a2a2:	f000 fb27 	bl	800a8f4 <__malloc_unlock>
 800a2a6:	2001      	movs	r0, #1
 800a2a8:	e7d0      	b.n	800a24c <_malloc_trim_r+0x3c>
 800a2aa:	bf00      	nop
 800a2ac:	20000630 	.word	0x20000630
 800a2b0:	20000a38 	.word	0x20000a38
 800a2b4:	20001114 	.word	0x20001114

0800a2b8 <_free_r>:
 800a2b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2bc:	4604      	mov	r4, r0
 800a2be:	4688      	mov	r8, r1
 800a2c0:	2900      	cmp	r1, #0
 800a2c2:	f000 80ab 	beq.w	800a41c <_free_r+0x164>
 800a2c6:	f000 fb0f 	bl	800a8e8 <__malloc_lock>
 800a2ca:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800a2ce:	4d54      	ldr	r5, [pc, #336]	; (800a420 <_free_r+0x168>)
 800a2d0:	f022 0001 	bic.w	r0, r2, #1
 800a2d4:	f1a8 0308 	sub.w	r3, r8, #8
 800a2d8:	181f      	adds	r7, r3, r0
 800a2da:	68a9      	ldr	r1, [r5, #8]
 800a2dc:	687e      	ldr	r6, [r7, #4]
 800a2de:	42b9      	cmp	r1, r7
 800a2e0:	f026 0603 	bic.w	r6, r6, #3
 800a2e4:	f002 0201 	and.w	r2, r2, #1
 800a2e8:	d11b      	bne.n	800a322 <_free_r+0x6a>
 800a2ea:	4430      	add	r0, r6
 800a2ec:	b93a      	cbnz	r2, 800a2fe <_free_r+0x46>
 800a2ee:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800a2f2:	1a9b      	subs	r3, r3, r2
 800a2f4:	4410      	add	r0, r2
 800a2f6:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800a2fa:	60ca      	str	r2, [r1, #12]
 800a2fc:	6091      	str	r1, [r2, #8]
 800a2fe:	f040 0201 	orr.w	r2, r0, #1
 800a302:	605a      	str	r2, [r3, #4]
 800a304:	60ab      	str	r3, [r5, #8]
 800a306:	4b47      	ldr	r3, [pc, #284]	; (800a424 <_free_r+0x16c>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4283      	cmp	r3, r0
 800a30c:	d804      	bhi.n	800a318 <_free_r+0x60>
 800a30e:	4b46      	ldr	r3, [pc, #280]	; (800a428 <_free_r+0x170>)
 800a310:	4620      	mov	r0, r4
 800a312:	6819      	ldr	r1, [r3, #0]
 800a314:	f7ff ff7c 	bl	800a210 <_malloc_trim_r>
 800a318:	4620      	mov	r0, r4
 800a31a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a31e:	f000 bae9 	b.w	800a8f4 <__malloc_unlock>
 800a322:	607e      	str	r6, [r7, #4]
 800a324:	2a00      	cmp	r2, #0
 800a326:	d139      	bne.n	800a39c <_free_r+0xe4>
 800a328:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800a32c:	1a5b      	subs	r3, r3, r1
 800a32e:	4408      	add	r0, r1
 800a330:	6899      	ldr	r1, [r3, #8]
 800a332:	f105 0c08 	add.w	ip, r5, #8
 800a336:	4561      	cmp	r1, ip
 800a338:	d032      	beq.n	800a3a0 <_free_r+0xe8>
 800a33a:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800a33e:	f8c1 c00c 	str.w	ip, [r1, #12]
 800a342:	f8cc 1008 	str.w	r1, [ip, #8]
 800a346:	19b9      	adds	r1, r7, r6
 800a348:	6849      	ldr	r1, [r1, #4]
 800a34a:	07c9      	lsls	r1, r1, #31
 800a34c:	d40a      	bmi.n	800a364 <_free_r+0xac>
 800a34e:	4430      	add	r0, r6
 800a350:	68b9      	ldr	r1, [r7, #8]
 800a352:	bb3a      	cbnz	r2, 800a3a4 <_free_r+0xec>
 800a354:	4e35      	ldr	r6, [pc, #212]	; (800a42c <_free_r+0x174>)
 800a356:	42b1      	cmp	r1, r6
 800a358:	d124      	bne.n	800a3a4 <_free_r+0xec>
 800a35a:	e9c5 3304 	strd	r3, r3, [r5, #16]
 800a35e:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a362:	2201      	movs	r2, #1
 800a364:	f040 0101 	orr.w	r1, r0, #1
 800a368:	6059      	str	r1, [r3, #4]
 800a36a:	5018      	str	r0, [r3, r0]
 800a36c:	2a00      	cmp	r2, #0
 800a36e:	d1d3      	bne.n	800a318 <_free_r+0x60>
 800a370:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800a374:	d21a      	bcs.n	800a3ac <_free_r+0xf4>
 800a376:	08c0      	lsrs	r0, r0, #3
 800a378:	1081      	asrs	r1, r0, #2
 800a37a:	2201      	movs	r2, #1
 800a37c:	408a      	lsls	r2, r1
 800a37e:	6869      	ldr	r1, [r5, #4]
 800a380:	3001      	adds	r0, #1
 800a382:	430a      	orrs	r2, r1
 800a384:	606a      	str	r2, [r5, #4]
 800a386:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800a38a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800a38e:	3a08      	subs	r2, #8
 800a390:	e9c3 1202 	strd	r1, r2, [r3, #8]
 800a394:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800a398:	60cb      	str	r3, [r1, #12]
 800a39a:	e7bd      	b.n	800a318 <_free_r+0x60>
 800a39c:	2200      	movs	r2, #0
 800a39e:	e7d2      	b.n	800a346 <_free_r+0x8e>
 800a3a0:	2201      	movs	r2, #1
 800a3a2:	e7d0      	b.n	800a346 <_free_r+0x8e>
 800a3a4:	68fe      	ldr	r6, [r7, #12]
 800a3a6:	60ce      	str	r6, [r1, #12]
 800a3a8:	60b1      	str	r1, [r6, #8]
 800a3aa:	e7db      	b.n	800a364 <_free_r+0xac>
 800a3ac:	0a42      	lsrs	r2, r0, #9
 800a3ae:	2a04      	cmp	r2, #4
 800a3b0:	d813      	bhi.n	800a3da <_free_r+0x122>
 800a3b2:	0982      	lsrs	r2, r0, #6
 800a3b4:	3238      	adds	r2, #56	; 0x38
 800a3b6:	1c51      	adds	r1, r2, #1
 800a3b8:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800a3bc:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800a3c0:	428e      	cmp	r6, r1
 800a3c2:	d124      	bne.n	800a40e <_free_r+0x156>
 800a3c4:	2001      	movs	r0, #1
 800a3c6:	1092      	asrs	r2, r2, #2
 800a3c8:	fa00 f202 	lsl.w	r2, r0, r2
 800a3cc:	6868      	ldr	r0, [r5, #4]
 800a3ce:	4302      	orrs	r2, r0
 800a3d0:	606a      	str	r2, [r5, #4]
 800a3d2:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800a3d6:	60b3      	str	r3, [r6, #8]
 800a3d8:	e7de      	b.n	800a398 <_free_r+0xe0>
 800a3da:	2a14      	cmp	r2, #20
 800a3dc:	d801      	bhi.n	800a3e2 <_free_r+0x12a>
 800a3de:	325b      	adds	r2, #91	; 0x5b
 800a3e0:	e7e9      	b.n	800a3b6 <_free_r+0xfe>
 800a3e2:	2a54      	cmp	r2, #84	; 0x54
 800a3e4:	d802      	bhi.n	800a3ec <_free_r+0x134>
 800a3e6:	0b02      	lsrs	r2, r0, #12
 800a3e8:	326e      	adds	r2, #110	; 0x6e
 800a3ea:	e7e4      	b.n	800a3b6 <_free_r+0xfe>
 800a3ec:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a3f0:	d802      	bhi.n	800a3f8 <_free_r+0x140>
 800a3f2:	0bc2      	lsrs	r2, r0, #15
 800a3f4:	3277      	adds	r2, #119	; 0x77
 800a3f6:	e7de      	b.n	800a3b6 <_free_r+0xfe>
 800a3f8:	f240 5154 	movw	r1, #1364	; 0x554
 800a3fc:	428a      	cmp	r2, r1
 800a3fe:	bf9a      	itte	ls
 800a400:	0c82      	lsrls	r2, r0, #18
 800a402:	327c      	addls	r2, #124	; 0x7c
 800a404:	227e      	movhi	r2, #126	; 0x7e
 800a406:	e7d6      	b.n	800a3b6 <_free_r+0xfe>
 800a408:	6889      	ldr	r1, [r1, #8]
 800a40a:	428e      	cmp	r6, r1
 800a40c:	d004      	beq.n	800a418 <_free_r+0x160>
 800a40e:	684a      	ldr	r2, [r1, #4]
 800a410:	f022 0203 	bic.w	r2, r2, #3
 800a414:	4282      	cmp	r2, r0
 800a416:	d8f7      	bhi.n	800a408 <_free_r+0x150>
 800a418:	68ce      	ldr	r6, [r1, #12]
 800a41a:	e7da      	b.n	800a3d2 <_free_r+0x11a>
 800a41c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a420:	20000630 	.word	0x20000630
 800a424:	20000a3c 	.word	0x20000a3c
 800a428:	20001144 	.word	0x20001144
 800a42c:	20000638 	.word	0x20000638

0800a430 <__locale_ctype_ptr_l>:
 800a430:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800a434:	4770      	bx	lr
	...

0800a438 <_localeconv_r>:
 800a438:	4b04      	ldr	r3, [pc, #16]	; (800a44c <_localeconv_r+0x14>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800a43e:	4b04      	ldr	r3, [pc, #16]	; (800a450 <_localeconv_r+0x18>)
 800a440:	2800      	cmp	r0, #0
 800a442:	bf08      	it	eq
 800a444:	4618      	moveq	r0, r3
 800a446:	30f0      	adds	r0, #240	; 0xf0
 800a448:	4770      	bx	lr
 800a44a:	bf00      	nop
 800a44c:	20000094 	.word	0x20000094
 800a450:	200004c4 	.word	0x200004c4

0800a454 <__retarget_lock_acquire_recursive>:
 800a454:	4770      	bx	lr

0800a456 <__retarget_lock_release_recursive>:
 800a456:	4770      	bx	lr

0800a458 <_malloc_r>:
 800a458:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a45c:	f101 050b 	add.w	r5, r1, #11
 800a460:	2d16      	cmp	r5, #22
 800a462:	4606      	mov	r6, r0
 800a464:	d906      	bls.n	800a474 <_malloc_r+0x1c>
 800a466:	f035 0507 	bics.w	r5, r5, #7
 800a46a:	d504      	bpl.n	800a476 <_malloc_r+0x1e>
 800a46c:	230c      	movs	r3, #12
 800a46e:	6033      	str	r3, [r6, #0]
 800a470:	2400      	movs	r4, #0
 800a472:	e1a8      	b.n	800a7c6 <_malloc_r+0x36e>
 800a474:	2510      	movs	r5, #16
 800a476:	428d      	cmp	r5, r1
 800a478:	d3f8      	bcc.n	800a46c <_malloc_r+0x14>
 800a47a:	4630      	mov	r0, r6
 800a47c:	f000 fa34 	bl	800a8e8 <__malloc_lock>
 800a480:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
 800a484:	4fc0      	ldr	r7, [pc, #768]	; (800a788 <_malloc_r+0x330>)
 800a486:	d238      	bcs.n	800a4fa <_malloc_r+0xa2>
 800a488:	f105 0208 	add.w	r2, r5, #8
 800a48c:	443a      	add	r2, r7
 800a48e:	f1a2 0108 	sub.w	r1, r2, #8
 800a492:	6854      	ldr	r4, [r2, #4]
 800a494:	428c      	cmp	r4, r1
 800a496:	ea4f 03d5 	mov.w	r3, r5, lsr #3
 800a49a:	d102      	bne.n	800a4a2 <_malloc_r+0x4a>
 800a49c:	68d4      	ldr	r4, [r2, #12]
 800a49e:	42a2      	cmp	r2, r4
 800a4a0:	d010      	beq.n	800a4c4 <_malloc_r+0x6c>
 800a4a2:	6863      	ldr	r3, [r4, #4]
 800a4a4:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800a4a8:	f023 0303 	bic.w	r3, r3, #3
 800a4ac:	60ca      	str	r2, [r1, #12]
 800a4ae:	4423      	add	r3, r4
 800a4b0:	6091      	str	r1, [r2, #8]
 800a4b2:	685a      	ldr	r2, [r3, #4]
 800a4b4:	f042 0201 	orr.w	r2, r2, #1
 800a4b8:	605a      	str	r2, [r3, #4]
 800a4ba:	4630      	mov	r0, r6
 800a4bc:	f000 fa1a 	bl	800a8f4 <__malloc_unlock>
 800a4c0:	3408      	adds	r4, #8
 800a4c2:	e180      	b.n	800a7c6 <_malloc_r+0x36e>
 800a4c4:	3302      	adds	r3, #2
 800a4c6:	4ab1      	ldr	r2, [pc, #708]	; (800a78c <_malloc_r+0x334>)
 800a4c8:	693c      	ldr	r4, [r7, #16]
 800a4ca:	4294      	cmp	r4, r2
 800a4cc:	4611      	mov	r1, r2
 800a4ce:	d075      	beq.n	800a5bc <_malloc_r+0x164>
 800a4d0:	6860      	ldr	r0, [r4, #4]
 800a4d2:	f020 0c03 	bic.w	ip, r0, #3
 800a4d6:	ebac 0005 	sub.w	r0, ip, r5
 800a4da:	280f      	cmp	r0, #15
 800a4dc:	dd48      	ble.n	800a570 <_malloc_r+0x118>
 800a4de:	1963      	adds	r3, r4, r5
 800a4e0:	f045 0501 	orr.w	r5, r5, #1
 800a4e4:	6065      	str	r5, [r4, #4]
 800a4e6:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800a4ea:	e9c3 2202 	strd	r2, r2, [r3, #8]
 800a4ee:	f040 0201 	orr.w	r2, r0, #1
 800a4f2:	605a      	str	r2, [r3, #4]
 800a4f4:	f844 000c 	str.w	r0, [r4, ip]
 800a4f8:	e7df      	b.n	800a4ba <_malloc_r+0x62>
 800a4fa:	0a6b      	lsrs	r3, r5, #9
 800a4fc:	d02a      	beq.n	800a554 <_malloc_r+0xfc>
 800a4fe:	2b04      	cmp	r3, #4
 800a500:	d812      	bhi.n	800a528 <_malloc_r+0xd0>
 800a502:	09ab      	lsrs	r3, r5, #6
 800a504:	3338      	adds	r3, #56	; 0x38
 800a506:	1c5a      	adds	r2, r3, #1
 800a508:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
 800a50c:	f1a2 0c08 	sub.w	ip, r2, #8
 800a510:	6854      	ldr	r4, [r2, #4]
 800a512:	4564      	cmp	r4, ip
 800a514:	d006      	beq.n	800a524 <_malloc_r+0xcc>
 800a516:	6862      	ldr	r2, [r4, #4]
 800a518:	f022 0203 	bic.w	r2, r2, #3
 800a51c:	1b50      	subs	r0, r2, r5
 800a51e:	280f      	cmp	r0, #15
 800a520:	dd1c      	ble.n	800a55c <_malloc_r+0x104>
 800a522:	3b01      	subs	r3, #1
 800a524:	3301      	adds	r3, #1
 800a526:	e7ce      	b.n	800a4c6 <_malloc_r+0x6e>
 800a528:	2b14      	cmp	r3, #20
 800a52a:	d801      	bhi.n	800a530 <_malloc_r+0xd8>
 800a52c:	335b      	adds	r3, #91	; 0x5b
 800a52e:	e7ea      	b.n	800a506 <_malloc_r+0xae>
 800a530:	2b54      	cmp	r3, #84	; 0x54
 800a532:	d802      	bhi.n	800a53a <_malloc_r+0xe2>
 800a534:	0b2b      	lsrs	r3, r5, #12
 800a536:	336e      	adds	r3, #110	; 0x6e
 800a538:	e7e5      	b.n	800a506 <_malloc_r+0xae>
 800a53a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800a53e:	d802      	bhi.n	800a546 <_malloc_r+0xee>
 800a540:	0beb      	lsrs	r3, r5, #15
 800a542:	3377      	adds	r3, #119	; 0x77
 800a544:	e7df      	b.n	800a506 <_malloc_r+0xae>
 800a546:	f240 5254 	movw	r2, #1364	; 0x554
 800a54a:	4293      	cmp	r3, r2
 800a54c:	d804      	bhi.n	800a558 <_malloc_r+0x100>
 800a54e:	0cab      	lsrs	r3, r5, #18
 800a550:	337c      	adds	r3, #124	; 0x7c
 800a552:	e7d8      	b.n	800a506 <_malloc_r+0xae>
 800a554:	233f      	movs	r3, #63	; 0x3f
 800a556:	e7d6      	b.n	800a506 <_malloc_r+0xae>
 800a558:	237e      	movs	r3, #126	; 0x7e
 800a55a:	e7d4      	b.n	800a506 <_malloc_r+0xae>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	68e1      	ldr	r1, [r4, #12]
 800a560:	db04      	blt.n	800a56c <_malloc_r+0x114>
 800a562:	68a3      	ldr	r3, [r4, #8]
 800a564:	60d9      	str	r1, [r3, #12]
 800a566:	608b      	str	r3, [r1, #8]
 800a568:	18a3      	adds	r3, r4, r2
 800a56a:	e7a2      	b.n	800a4b2 <_malloc_r+0x5a>
 800a56c:	460c      	mov	r4, r1
 800a56e:	e7d0      	b.n	800a512 <_malloc_r+0xba>
 800a570:	2800      	cmp	r0, #0
 800a572:	e9c7 2204 	strd	r2, r2, [r7, #16]
 800a576:	db07      	blt.n	800a588 <_malloc_r+0x130>
 800a578:	44a4      	add	ip, r4
 800a57a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 800a57e:	f043 0301 	orr.w	r3, r3, #1
 800a582:	f8cc 3004 	str.w	r3, [ip, #4]
 800a586:	e798      	b.n	800a4ba <_malloc_r+0x62>
 800a588:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 800a58c:	6878      	ldr	r0, [r7, #4]
 800a58e:	f080 8099 	bcs.w	800a6c4 <_malloc_r+0x26c>
 800a592:	ea4f 0cdc 	mov.w	ip, ip, lsr #3
 800a596:	ea4f 0eac 	mov.w	lr, ip, asr #2
 800a59a:	2201      	movs	r2, #1
 800a59c:	f10c 0c01 	add.w	ip, ip, #1
 800a5a0:	fa02 f20e 	lsl.w	r2, r2, lr
 800a5a4:	4310      	orrs	r0, r2
 800a5a6:	6078      	str	r0, [r7, #4]
 800a5a8:	eb07 02cc 	add.w	r2, r7, ip, lsl #3
 800a5ac:	f857 003c 	ldr.w	r0, [r7, ip, lsl #3]
 800a5b0:	3a08      	subs	r2, #8
 800a5b2:	e9c4 0202 	strd	r0, r2, [r4, #8]
 800a5b6:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
 800a5ba:	60c4      	str	r4, [r0, #12]
 800a5bc:	2001      	movs	r0, #1
 800a5be:	109a      	asrs	r2, r3, #2
 800a5c0:	fa00 f202 	lsl.w	r2, r0, r2
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	4290      	cmp	r0, r2
 800a5c8:	d326      	bcc.n	800a618 <_malloc_r+0x1c0>
 800a5ca:	4210      	tst	r0, r2
 800a5cc:	d106      	bne.n	800a5dc <_malloc_r+0x184>
 800a5ce:	f023 0303 	bic.w	r3, r3, #3
 800a5d2:	0052      	lsls	r2, r2, #1
 800a5d4:	4210      	tst	r0, r2
 800a5d6:	f103 0304 	add.w	r3, r3, #4
 800a5da:	d0fa      	beq.n	800a5d2 <_malloc_r+0x17a>
 800a5dc:	eb07 0cc3 	add.w	ip, r7, r3, lsl #3
 800a5e0:	46e1      	mov	r9, ip
 800a5e2:	4698      	mov	r8, r3
 800a5e4:	f8d9 400c 	ldr.w	r4, [r9, #12]
 800a5e8:	454c      	cmp	r4, r9
 800a5ea:	f040 80af 	bne.w	800a74c <_malloc_r+0x2f4>
 800a5ee:	f108 0801 	add.w	r8, r8, #1
 800a5f2:	f018 0f03 	tst.w	r8, #3
 800a5f6:	f109 0908 	add.w	r9, r9, #8
 800a5fa:	d1f3      	bne.n	800a5e4 <_malloc_r+0x18c>
 800a5fc:	0798      	lsls	r0, r3, #30
 800a5fe:	f040 80e8 	bne.w	800a7d2 <_malloc_r+0x37a>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	ea23 0302 	bic.w	r3, r3, r2
 800a608:	607b      	str	r3, [r7, #4]
 800a60a:	6878      	ldr	r0, [r7, #4]
 800a60c:	0052      	lsls	r2, r2, #1
 800a60e:	4290      	cmp	r0, r2
 800a610:	d302      	bcc.n	800a618 <_malloc_r+0x1c0>
 800a612:	2a00      	cmp	r2, #0
 800a614:	f040 80ec 	bne.w	800a7f0 <_malloc_r+0x398>
 800a618:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800a61c:	f8da 4004 	ldr.w	r4, [sl, #4]
 800a620:	f024 0203 	bic.w	r2, r4, #3
 800a624:	42aa      	cmp	r2, r5
 800a626:	d303      	bcc.n	800a630 <_malloc_r+0x1d8>
 800a628:	1b53      	subs	r3, r2, r5
 800a62a:	2b0f      	cmp	r3, #15
 800a62c:	f300 8140 	bgt.w	800a8b0 <_malloc_r+0x458>
 800a630:	4b57      	ldr	r3, [pc, #348]	; (800a790 <_malloc_r+0x338>)
 800a632:	9200      	str	r2, [sp, #0]
 800a634:	2008      	movs	r0, #8
 800a636:	681c      	ldr	r4, [r3, #0]
 800a638:	f000 fcd0 	bl	800afdc <sysconf>
 800a63c:	4b55      	ldr	r3, [pc, #340]	; (800a794 <_malloc_r+0x33c>)
 800a63e:	9a00      	ldr	r2, [sp, #0]
 800a640:	6819      	ldr	r1, [r3, #0]
 800a642:	3410      	adds	r4, #16
 800a644:	3101      	adds	r1, #1
 800a646:	442c      	add	r4, r5
 800a648:	bf1f      	itttt	ne
 800a64a:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
 800a64e:	1824      	addne	r4, r4, r0
 800a650:	4241      	negne	r1, r0
 800a652:	400c      	andne	r4, r1
 800a654:	4680      	mov	r8, r0
 800a656:	4621      	mov	r1, r4
 800a658:	4630      	mov	r0, r6
 800a65a:	e9cd 2300 	strd	r2, r3, [sp]
 800a65e:	f000 fc35 	bl	800aecc <_sbrk_r>
 800a662:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a666:	4683      	mov	fp, r0
 800a668:	f000 80fb 	beq.w	800a862 <_malloc_r+0x40a>
 800a66c:	9a00      	ldr	r2, [sp, #0]
 800a66e:	9b01      	ldr	r3, [sp, #4]
 800a670:	eb0a 0102 	add.w	r1, sl, r2
 800a674:	4281      	cmp	r1, r0
 800a676:	d902      	bls.n	800a67e <_malloc_r+0x226>
 800a678:	45ba      	cmp	sl, r7
 800a67a:	f040 80f2 	bne.w	800a862 <_malloc_r+0x40a>
 800a67e:	f8df 9120 	ldr.w	r9, [pc, #288]	; 800a7a0 <_malloc_r+0x348>
 800a682:	f8d9 0000 	ldr.w	r0, [r9]
 800a686:	4559      	cmp	r1, fp
 800a688:	eb00 0e04 	add.w	lr, r0, r4
 800a68c:	f8c9 e000 	str.w	lr, [r9]
 800a690:	f108 3cff 	add.w	ip, r8, #4294967295	; 0xffffffff
 800a694:	f040 80ae 	bne.w	800a7f4 <_malloc_r+0x39c>
 800a698:	ea11 0f0c 	tst.w	r1, ip
 800a69c:	f040 80aa 	bne.w	800a7f4 <_malloc_r+0x39c>
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	4414      	add	r4, r2
 800a6a4:	f044 0401 	orr.w	r4, r4, #1
 800a6a8:	605c      	str	r4, [r3, #4]
 800a6aa:	4a3b      	ldr	r2, [pc, #236]	; (800a798 <_malloc_r+0x340>)
 800a6ac:	f8d9 3000 	ldr.w	r3, [r9]
 800a6b0:	6811      	ldr	r1, [r2, #0]
 800a6b2:	428b      	cmp	r3, r1
 800a6b4:	bf88      	it	hi
 800a6b6:	6013      	strhi	r3, [r2, #0]
 800a6b8:	4a38      	ldr	r2, [pc, #224]	; (800a79c <_malloc_r+0x344>)
 800a6ba:	6811      	ldr	r1, [r2, #0]
 800a6bc:	428b      	cmp	r3, r1
 800a6be:	bf88      	it	hi
 800a6c0:	6013      	strhi	r3, [r2, #0]
 800a6c2:	e0ce      	b.n	800a862 <_malloc_r+0x40a>
 800a6c4:	ea4f 225c 	mov.w	r2, ip, lsr #9
 800a6c8:	2a04      	cmp	r2, #4
 800a6ca:	d818      	bhi.n	800a6fe <_malloc_r+0x2a6>
 800a6cc:	ea4f 129c 	mov.w	r2, ip, lsr #6
 800a6d0:	3238      	adds	r2, #56	; 0x38
 800a6d2:	f102 0e01 	add.w	lr, r2, #1
 800a6d6:	eb07 08c2 	add.w	r8, r7, r2, lsl #3
 800a6da:	f857 e03e 	ldr.w	lr, [r7, lr, lsl #3]
 800a6de:	45f0      	cmp	r8, lr
 800a6e0:	d12b      	bne.n	800a73a <_malloc_r+0x2e2>
 800a6e2:	1092      	asrs	r2, r2, #2
 800a6e4:	f04f 0c01 	mov.w	ip, #1
 800a6e8:	fa0c f202 	lsl.w	r2, ip, r2
 800a6ec:	4310      	orrs	r0, r2
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	e9c4 e802 	strd	lr, r8, [r4, #8]
 800a6f4:	f8c8 4008 	str.w	r4, [r8, #8]
 800a6f8:	f8ce 400c 	str.w	r4, [lr, #12]
 800a6fc:	e75e      	b.n	800a5bc <_malloc_r+0x164>
 800a6fe:	2a14      	cmp	r2, #20
 800a700:	d801      	bhi.n	800a706 <_malloc_r+0x2ae>
 800a702:	325b      	adds	r2, #91	; 0x5b
 800a704:	e7e5      	b.n	800a6d2 <_malloc_r+0x27a>
 800a706:	2a54      	cmp	r2, #84	; 0x54
 800a708:	d803      	bhi.n	800a712 <_malloc_r+0x2ba>
 800a70a:	ea4f 321c 	mov.w	r2, ip, lsr #12
 800a70e:	326e      	adds	r2, #110	; 0x6e
 800a710:	e7df      	b.n	800a6d2 <_malloc_r+0x27a>
 800a712:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800a716:	d803      	bhi.n	800a720 <_malloc_r+0x2c8>
 800a718:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 800a71c:	3277      	adds	r2, #119	; 0x77
 800a71e:	e7d8      	b.n	800a6d2 <_malloc_r+0x27a>
 800a720:	f240 5e54 	movw	lr, #1364	; 0x554
 800a724:	4572      	cmp	r2, lr
 800a726:	bf9a      	itte	ls
 800a728:	ea4f 429c 	movls.w	r2, ip, lsr #18
 800a72c:	327c      	addls	r2, #124	; 0x7c
 800a72e:	227e      	movhi	r2, #126	; 0x7e
 800a730:	e7cf      	b.n	800a6d2 <_malloc_r+0x27a>
 800a732:	f8de e008 	ldr.w	lr, [lr, #8]
 800a736:	45f0      	cmp	r8, lr
 800a738:	d005      	beq.n	800a746 <_malloc_r+0x2ee>
 800a73a:	f8de 2004 	ldr.w	r2, [lr, #4]
 800a73e:	f022 0203 	bic.w	r2, r2, #3
 800a742:	4562      	cmp	r2, ip
 800a744:	d8f5      	bhi.n	800a732 <_malloc_r+0x2da>
 800a746:	f8de 800c 	ldr.w	r8, [lr, #12]
 800a74a:	e7d1      	b.n	800a6f0 <_malloc_r+0x298>
 800a74c:	6860      	ldr	r0, [r4, #4]
 800a74e:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 800a752:	f020 0003 	bic.w	r0, r0, #3
 800a756:	eba0 0a05 	sub.w	sl, r0, r5
 800a75a:	f1ba 0f0f 	cmp.w	sl, #15
 800a75e:	dd21      	ble.n	800a7a4 <_malloc_r+0x34c>
 800a760:	68a2      	ldr	r2, [r4, #8]
 800a762:	1963      	adds	r3, r4, r5
 800a764:	f045 0501 	orr.w	r5, r5, #1
 800a768:	6065      	str	r5, [r4, #4]
 800a76a:	f8c2 e00c 	str.w	lr, [r2, #12]
 800a76e:	f8ce 2008 	str.w	r2, [lr, #8]
 800a772:	f04a 0201 	orr.w	r2, sl, #1
 800a776:	e9c7 3304 	strd	r3, r3, [r7, #16]
 800a77a:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800a77e:	605a      	str	r2, [r3, #4]
 800a780:	f844 a000 	str.w	sl, [r4, r0]
 800a784:	e699      	b.n	800a4ba <_malloc_r+0x62>
 800a786:	bf00      	nop
 800a788:	20000630 	.word	0x20000630
 800a78c:	20000638 	.word	0x20000638
 800a790:	20001144 	.word	0x20001144
 800a794:	20000a38 	.word	0x20000a38
 800a798:	2000113c 	.word	0x2000113c
 800a79c:	20001140 	.word	0x20001140
 800a7a0:	20001114 	.word	0x20001114
 800a7a4:	f1ba 0f00 	cmp.w	sl, #0
 800a7a8:	db11      	blt.n	800a7ce <_malloc_r+0x376>
 800a7aa:	4420      	add	r0, r4
 800a7ac:	6843      	ldr	r3, [r0, #4]
 800a7ae:	f043 0301 	orr.w	r3, r3, #1
 800a7b2:	6043      	str	r3, [r0, #4]
 800a7b4:	f854 3f08 	ldr.w	r3, [r4, #8]!
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f8c3 e00c 	str.w	lr, [r3, #12]
 800a7be:	f8ce 3008 	str.w	r3, [lr, #8]
 800a7c2:	f000 f897 	bl	800a8f4 <__malloc_unlock>
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	b003      	add	sp, #12
 800a7ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ce:	4674      	mov	r4, lr
 800a7d0:	e70a      	b.n	800a5e8 <_malloc_r+0x190>
 800a7d2:	f1ac 0008 	sub.w	r0, ip, #8
 800a7d6:	f8dc c000 	ldr.w	ip, [ip]
 800a7da:	4584      	cmp	ip, r0
 800a7dc:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a7e0:	f43f af0c 	beq.w	800a5fc <_malloc_r+0x1a4>
 800a7e4:	e711      	b.n	800a60a <_malloc_r+0x1b2>
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	0052      	lsls	r2, r2, #1
 800a7ea:	4210      	tst	r0, r2
 800a7ec:	d0fb      	beq.n	800a7e6 <_malloc_r+0x38e>
 800a7ee:	e6f5      	b.n	800a5dc <_malloc_r+0x184>
 800a7f0:	4643      	mov	r3, r8
 800a7f2:	e7fa      	b.n	800a7ea <_malloc_r+0x392>
 800a7f4:	6818      	ldr	r0, [r3, #0]
 800a7f6:	9200      	str	r2, [sp, #0]
 800a7f8:	3001      	adds	r0, #1
 800a7fa:	bf1b      	ittet	ne
 800a7fc:	ebab 0101 	subne.w	r1, fp, r1
 800a800:	4471      	addne	r1, lr
 800a802:	f8c3 b000 	streq.w	fp, [r3]
 800a806:	f8c9 1000 	strne.w	r1, [r9]
 800a80a:	f01b 0307 	ands.w	r3, fp, #7
 800a80e:	bf1c      	itt	ne
 800a810:	f1c3 0308 	rsbne	r3, r3, #8
 800a814:	449b      	addne	fp, r3
 800a816:	445c      	add	r4, fp
 800a818:	4498      	add	r8, r3
 800a81a:	ea04 030c 	and.w	r3, r4, ip
 800a81e:	eba8 0803 	sub.w	r8, r8, r3
 800a822:	4641      	mov	r1, r8
 800a824:	4630      	mov	r0, r6
 800a826:	f000 fb51 	bl	800aecc <_sbrk_r>
 800a82a:	1c43      	adds	r3, r0, #1
 800a82c:	bf04      	itt	eq
 800a82e:	4658      	moveq	r0, fp
 800a830:	f04f 0800 	moveq.w	r8, #0
 800a834:	f8d9 3000 	ldr.w	r3, [r9]
 800a838:	f8c7 b008 	str.w	fp, [r7, #8]
 800a83c:	eba0 000b 	sub.w	r0, r0, fp
 800a840:	4440      	add	r0, r8
 800a842:	4443      	add	r3, r8
 800a844:	f040 0001 	orr.w	r0, r0, #1
 800a848:	45ba      	cmp	sl, r7
 800a84a:	9a00      	ldr	r2, [sp, #0]
 800a84c:	f8c9 3000 	str.w	r3, [r9]
 800a850:	f8cb 0004 	str.w	r0, [fp, #4]
 800a854:	f43f af29 	beq.w	800a6aa <_malloc_r+0x252>
 800a858:	2a0f      	cmp	r2, #15
 800a85a:	d810      	bhi.n	800a87e <_malloc_r+0x426>
 800a85c:	2301      	movs	r3, #1
 800a85e:	f8cb 3004 	str.w	r3, [fp, #4]
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	f022 0203 	bic.w	r2, r2, #3
 800a86a:	42aa      	cmp	r2, r5
 800a86c:	eba2 0305 	sub.w	r3, r2, r5
 800a870:	d301      	bcc.n	800a876 <_malloc_r+0x41e>
 800a872:	2b0f      	cmp	r3, #15
 800a874:	dc1c      	bgt.n	800a8b0 <_malloc_r+0x458>
 800a876:	4630      	mov	r0, r6
 800a878:	f000 f83c 	bl	800a8f4 <__malloc_unlock>
 800a87c:	e5f8      	b.n	800a470 <_malloc_r+0x18>
 800a87e:	f8da 3004 	ldr.w	r3, [sl, #4]
 800a882:	f1a2 040c 	sub.w	r4, r2, #12
 800a886:	f024 0407 	bic.w	r4, r4, #7
 800a88a:	f003 0301 	and.w	r3, r3, #1
 800a88e:	4323      	orrs	r3, r4
 800a890:	f8ca 3004 	str.w	r3, [sl, #4]
 800a894:	2205      	movs	r2, #5
 800a896:	eb0a 0304 	add.w	r3, sl, r4
 800a89a:	2c0f      	cmp	r4, #15
 800a89c:	e9c3 2201 	strd	r2, r2, [r3, #4]
 800a8a0:	f67f af03 	bls.w	800a6aa <_malloc_r+0x252>
 800a8a4:	f10a 0108 	add.w	r1, sl, #8
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	f7ff fd05 	bl	800a2b8 <_free_r>
 800a8ae:	e6fc      	b.n	800a6aa <_malloc_r+0x252>
 800a8b0:	68bc      	ldr	r4, [r7, #8]
 800a8b2:	f045 0201 	orr.w	r2, r5, #1
 800a8b6:	4425      	add	r5, r4
 800a8b8:	f043 0301 	orr.w	r3, r3, #1
 800a8bc:	6062      	str	r2, [r4, #4]
 800a8be:	60bd      	str	r5, [r7, #8]
 800a8c0:	606b      	str	r3, [r5, #4]
 800a8c2:	e5fa      	b.n	800a4ba <_malloc_r+0x62>

0800a8c4 <__ascii_mbtowc>:
 800a8c4:	b082      	sub	sp, #8
 800a8c6:	b901      	cbnz	r1, 800a8ca <__ascii_mbtowc+0x6>
 800a8c8:	a901      	add	r1, sp, #4
 800a8ca:	b142      	cbz	r2, 800a8de <__ascii_mbtowc+0x1a>
 800a8cc:	b14b      	cbz	r3, 800a8e2 <__ascii_mbtowc+0x1e>
 800a8ce:	7813      	ldrb	r3, [r2, #0]
 800a8d0:	600b      	str	r3, [r1, #0]
 800a8d2:	7812      	ldrb	r2, [r2, #0]
 800a8d4:	1c10      	adds	r0, r2, #0
 800a8d6:	bf18      	it	ne
 800a8d8:	2001      	movne	r0, #1
 800a8da:	b002      	add	sp, #8
 800a8dc:	4770      	bx	lr
 800a8de:	4610      	mov	r0, r2
 800a8e0:	e7fb      	b.n	800a8da <__ascii_mbtowc+0x16>
 800a8e2:	f06f 0001 	mvn.w	r0, #1
 800a8e6:	e7f8      	b.n	800a8da <__ascii_mbtowc+0x16>

0800a8e8 <__malloc_lock>:
 800a8e8:	4801      	ldr	r0, [pc, #4]	; (800a8f0 <__malloc_lock+0x8>)
 800a8ea:	f7ff bdb3 	b.w	800a454 <__retarget_lock_acquire_recursive>
 800a8ee:	bf00      	nop
 800a8f0:	2000c18c 	.word	0x2000c18c

0800a8f4 <__malloc_unlock>:
 800a8f4:	4801      	ldr	r0, [pc, #4]	; (800a8fc <__malloc_unlock+0x8>)
 800a8f6:	f7ff bdae 	b.w	800a456 <__retarget_lock_release_recursive>
 800a8fa:	bf00      	nop
 800a8fc:	2000c18c 	.word	0x2000c18c

0800a900 <_Balloc>:
 800a900:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a902:	b570      	push	{r4, r5, r6, lr}
 800a904:	4605      	mov	r5, r0
 800a906:	460c      	mov	r4, r1
 800a908:	b17b      	cbz	r3, 800a92a <_Balloc+0x2a>
 800a90a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800a90c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800a910:	b9a0      	cbnz	r0, 800a93c <_Balloc+0x3c>
 800a912:	2101      	movs	r1, #1
 800a914:	fa01 f604 	lsl.w	r6, r1, r4
 800a918:	1d72      	adds	r2, r6, #5
 800a91a:	0092      	lsls	r2, r2, #2
 800a91c:	4628      	mov	r0, r5
 800a91e:	f000 fbcd 	bl	800b0bc <_calloc_r>
 800a922:	b148      	cbz	r0, 800a938 <_Balloc+0x38>
 800a924:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800a928:	e00b      	b.n	800a942 <_Balloc+0x42>
 800a92a:	2221      	movs	r2, #33	; 0x21
 800a92c:	2104      	movs	r1, #4
 800a92e:	f000 fbc5 	bl	800b0bc <_calloc_r>
 800a932:	64e8      	str	r0, [r5, #76]	; 0x4c
 800a934:	2800      	cmp	r0, #0
 800a936:	d1e8      	bne.n	800a90a <_Balloc+0xa>
 800a938:	2000      	movs	r0, #0
 800a93a:	bd70      	pop	{r4, r5, r6, pc}
 800a93c:	6802      	ldr	r2, [r0, #0]
 800a93e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800a942:	2300      	movs	r3, #0
 800a944:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a948:	e7f7      	b.n	800a93a <_Balloc+0x3a>

0800a94a <_Bfree>:
 800a94a:	b131      	cbz	r1, 800a95a <_Bfree+0x10>
 800a94c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800a94e:	684a      	ldr	r2, [r1, #4]
 800a950:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a954:	6008      	str	r0, [r1, #0]
 800a956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a95a:	4770      	bx	lr

0800a95c <__multadd>:
 800a95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a960:	690d      	ldr	r5, [r1, #16]
 800a962:	461f      	mov	r7, r3
 800a964:	4606      	mov	r6, r0
 800a966:	460c      	mov	r4, r1
 800a968:	f101 0c14 	add.w	ip, r1, #20
 800a96c:	2300      	movs	r3, #0
 800a96e:	f8dc 0000 	ldr.w	r0, [ip]
 800a972:	b281      	uxth	r1, r0
 800a974:	fb02 7101 	mla	r1, r2, r1, r7
 800a978:	0c0f      	lsrs	r7, r1, #16
 800a97a:	0c00      	lsrs	r0, r0, #16
 800a97c:	fb02 7000 	mla	r0, r2, r0, r7
 800a980:	b289      	uxth	r1, r1
 800a982:	3301      	adds	r3, #1
 800a984:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a988:	429d      	cmp	r5, r3
 800a98a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a98e:	f84c 1b04 	str.w	r1, [ip], #4
 800a992:	dcec      	bgt.n	800a96e <__multadd+0x12>
 800a994:	b1d7      	cbz	r7, 800a9cc <__multadd+0x70>
 800a996:	68a3      	ldr	r3, [r4, #8]
 800a998:	42ab      	cmp	r3, r5
 800a99a:	dc12      	bgt.n	800a9c2 <__multadd+0x66>
 800a99c:	6861      	ldr	r1, [r4, #4]
 800a99e:	4630      	mov	r0, r6
 800a9a0:	3101      	adds	r1, #1
 800a9a2:	f7ff ffad 	bl	800a900 <_Balloc>
 800a9a6:	6922      	ldr	r2, [r4, #16]
 800a9a8:	3202      	adds	r2, #2
 800a9aa:	f104 010c 	add.w	r1, r4, #12
 800a9ae:	4680      	mov	r8, r0
 800a9b0:	0092      	lsls	r2, r2, #2
 800a9b2:	300c      	adds	r0, #12
 800a9b4:	f7fd fabc 	bl	8007f30 <memcpy>
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	f7ff ffc5 	bl	800a94a <_Bfree>
 800a9c0:	4644      	mov	r4, r8
 800a9c2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a9c6:	3501      	adds	r5, #1
 800a9c8:	615f      	str	r7, [r3, #20]
 800a9ca:	6125      	str	r5, [r4, #16]
 800a9cc:	4620      	mov	r0, r4
 800a9ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a9d2 <__hi0bits>:
 800a9d2:	0c02      	lsrs	r2, r0, #16
 800a9d4:	0412      	lsls	r2, r2, #16
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	b9b2      	cbnz	r2, 800aa08 <__hi0bits+0x36>
 800a9da:	0403      	lsls	r3, r0, #16
 800a9dc:	2010      	movs	r0, #16
 800a9de:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a9e2:	bf04      	itt	eq
 800a9e4:	021b      	lsleq	r3, r3, #8
 800a9e6:	3008      	addeq	r0, #8
 800a9e8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a9ec:	bf04      	itt	eq
 800a9ee:	011b      	lsleq	r3, r3, #4
 800a9f0:	3004      	addeq	r0, #4
 800a9f2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a9f6:	bf04      	itt	eq
 800a9f8:	009b      	lsleq	r3, r3, #2
 800a9fa:	3002      	addeq	r0, #2
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	db06      	blt.n	800aa0e <__hi0bits+0x3c>
 800aa00:	005b      	lsls	r3, r3, #1
 800aa02:	d503      	bpl.n	800aa0c <__hi0bits+0x3a>
 800aa04:	3001      	adds	r0, #1
 800aa06:	4770      	bx	lr
 800aa08:	2000      	movs	r0, #0
 800aa0a:	e7e8      	b.n	800a9de <__hi0bits+0xc>
 800aa0c:	2020      	movs	r0, #32
 800aa0e:	4770      	bx	lr

0800aa10 <__lo0bits>:
 800aa10:	6803      	ldr	r3, [r0, #0]
 800aa12:	f013 0207 	ands.w	r2, r3, #7
 800aa16:	4601      	mov	r1, r0
 800aa18:	d00b      	beq.n	800aa32 <__lo0bits+0x22>
 800aa1a:	07da      	lsls	r2, r3, #31
 800aa1c:	d423      	bmi.n	800aa66 <__lo0bits+0x56>
 800aa1e:	0798      	lsls	r0, r3, #30
 800aa20:	bf49      	itett	mi
 800aa22:	085b      	lsrmi	r3, r3, #1
 800aa24:	089b      	lsrpl	r3, r3, #2
 800aa26:	2001      	movmi	r0, #1
 800aa28:	600b      	strmi	r3, [r1, #0]
 800aa2a:	bf5c      	itt	pl
 800aa2c:	600b      	strpl	r3, [r1, #0]
 800aa2e:	2002      	movpl	r0, #2
 800aa30:	4770      	bx	lr
 800aa32:	b298      	uxth	r0, r3
 800aa34:	b9a8      	cbnz	r0, 800aa62 <__lo0bits+0x52>
 800aa36:	0c1b      	lsrs	r3, r3, #16
 800aa38:	2010      	movs	r0, #16
 800aa3a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aa3e:	bf04      	itt	eq
 800aa40:	0a1b      	lsreq	r3, r3, #8
 800aa42:	3008      	addeq	r0, #8
 800aa44:	071a      	lsls	r2, r3, #28
 800aa46:	bf04      	itt	eq
 800aa48:	091b      	lsreq	r3, r3, #4
 800aa4a:	3004      	addeq	r0, #4
 800aa4c:	079a      	lsls	r2, r3, #30
 800aa4e:	bf04      	itt	eq
 800aa50:	089b      	lsreq	r3, r3, #2
 800aa52:	3002      	addeq	r0, #2
 800aa54:	07da      	lsls	r2, r3, #31
 800aa56:	d402      	bmi.n	800aa5e <__lo0bits+0x4e>
 800aa58:	085b      	lsrs	r3, r3, #1
 800aa5a:	d006      	beq.n	800aa6a <__lo0bits+0x5a>
 800aa5c:	3001      	adds	r0, #1
 800aa5e:	600b      	str	r3, [r1, #0]
 800aa60:	4770      	bx	lr
 800aa62:	4610      	mov	r0, r2
 800aa64:	e7e9      	b.n	800aa3a <__lo0bits+0x2a>
 800aa66:	2000      	movs	r0, #0
 800aa68:	4770      	bx	lr
 800aa6a:	2020      	movs	r0, #32
 800aa6c:	4770      	bx	lr

0800aa6e <__i2b>:
 800aa6e:	b510      	push	{r4, lr}
 800aa70:	460c      	mov	r4, r1
 800aa72:	2101      	movs	r1, #1
 800aa74:	f7ff ff44 	bl	800a900 <_Balloc>
 800aa78:	2201      	movs	r2, #1
 800aa7a:	6144      	str	r4, [r0, #20]
 800aa7c:	6102      	str	r2, [r0, #16]
 800aa7e:	bd10      	pop	{r4, pc}

0800aa80 <__multiply>:
 800aa80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa84:	4614      	mov	r4, r2
 800aa86:	690a      	ldr	r2, [r1, #16]
 800aa88:	6923      	ldr	r3, [r4, #16]
 800aa8a:	429a      	cmp	r2, r3
 800aa8c:	bfb8      	it	lt
 800aa8e:	460b      	movlt	r3, r1
 800aa90:	4688      	mov	r8, r1
 800aa92:	bfbc      	itt	lt
 800aa94:	46a0      	movlt	r8, r4
 800aa96:	461c      	movlt	r4, r3
 800aa98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800aa9c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800aaa0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aaa4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800aaa8:	eb07 0609 	add.w	r6, r7, r9
 800aaac:	42b3      	cmp	r3, r6
 800aaae:	bfb8      	it	lt
 800aab0:	3101      	addlt	r1, #1
 800aab2:	f7ff ff25 	bl	800a900 <_Balloc>
 800aab6:	f100 0514 	add.w	r5, r0, #20
 800aaba:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800aabe:	462b      	mov	r3, r5
 800aac0:	2200      	movs	r2, #0
 800aac2:	4573      	cmp	r3, lr
 800aac4:	d316      	bcc.n	800aaf4 <__multiply+0x74>
 800aac6:	f104 0214 	add.w	r2, r4, #20
 800aaca:	f108 0114 	add.w	r1, r8, #20
 800aace:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800aad2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	9b00      	ldr	r3, [sp, #0]
 800aada:	9201      	str	r2, [sp, #4]
 800aadc:	4293      	cmp	r3, r2
 800aade:	d80c      	bhi.n	800aafa <__multiply+0x7a>
 800aae0:	2e00      	cmp	r6, #0
 800aae2:	dd03      	ble.n	800aaec <__multiply+0x6c>
 800aae4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d05d      	beq.n	800aba8 <__multiply+0x128>
 800aaec:	6106      	str	r6, [r0, #16]
 800aaee:	b003      	add	sp, #12
 800aaf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaf4:	f843 2b04 	str.w	r2, [r3], #4
 800aaf8:	e7e3      	b.n	800aac2 <__multiply+0x42>
 800aafa:	f8b2 b000 	ldrh.w	fp, [r2]
 800aafe:	f1bb 0f00 	cmp.w	fp, #0
 800ab02:	d023      	beq.n	800ab4c <__multiply+0xcc>
 800ab04:	4689      	mov	r9, r1
 800ab06:	46ac      	mov	ip, r5
 800ab08:	f04f 0800 	mov.w	r8, #0
 800ab0c:	f859 4b04 	ldr.w	r4, [r9], #4
 800ab10:	f8dc a000 	ldr.w	sl, [ip]
 800ab14:	b2a3      	uxth	r3, r4
 800ab16:	fa1f fa8a 	uxth.w	sl, sl
 800ab1a:	fb0b a303 	mla	r3, fp, r3, sl
 800ab1e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ab22:	f8dc 4000 	ldr.w	r4, [ip]
 800ab26:	4443      	add	r3, r8
 800ab28:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ab2c:	fb0b 840a 	mla	r4, fp, sl, r8
 800ab30:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ab34:	46e2      	mov	sl, ip
 800ab36:	b29b      	uxth	r3, r3
 800ab38:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ab3c:	454f      	cmp	r7, r9
 800ab3e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800ab42:	f84a 3b04 	str.w	r3, [sl], #4
 800ab46:	d82b      	bhi.n	800aba0 <__multiply+0x120>
 800ab48:	f8cc 8004 	str.w	r8, [ip, #4]
 800ab4c:	9b01      	ldr	r3, [sp, #4]
 800ab4e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800ab52:	3204      	adds	r2, #4
 800ab54:	f1ba 0f00 	cmp.w	sl, #0
 800ab58:	d020      	beq.n	800ab9c <__multiply+0x11c>
 800ab5a:	682b      	ldr	r3, [r5, #0]
 800ab5c:	4689      	mov	r9, r1
 800ab5e:	46a8      	mov	r8, r5
 800ab60:	f04f 0b00 	mov.w	fp, #0
 800ab64:	f8b9 c000 	ldrh.w	ip, [r9]
 800ab68:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800ab6c:	fb0a 440c 	mla	r4, sl, ip, r4
 800ab70:	445c      	add	r4, fp
 800ab72:	46c4      	mov	ip, r8
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800ab7a:	f84c 3b04 	str.w	r3, [ip], #4
 800ab7e:	f859 3b04 	ldr.w	r3, [r9], #4
 800ab82:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800ab86:	0c1b      	lsrs	r3, r3, #16
 800ab88:	fb0a b303 	mla	r3, sl, r3, fp
 800ab8c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800ab90:	454f      	cmp	r7, r9
 800ab92:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800ab96:	d805      	bhi.n	800aba4 <__multiply+0x124>
 800ab98:	f8c8 3004 	str.w	r3, [r8, #4]
 800ab9c:	3504      	adds	r5, #4
 800ab9e:	e79b      	b.n	800aad8 <__multiply+0x58>
 800aba0:	46d4      	mov	ip, sl
 800aba2:	e7b3      	b.n	800ab0c <__multiply+0x8c>
 800aba4:	46e0      	mov	r8, ip
 800aba6:	e7dd      	b.n	800ab64 <__multiply+0xe4>
 800aba8:	3e01      	subs	r6, #1
 800abaa:	e799      	b.n	800aae0 <__multiply+0x60>

0800abac <__pow5mult>:
 800abac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abb0:	4615      	mov	r5, r2
 800abb2:	f012 0203 	ands.w	r2, r2, #3
 800abb6:	4606      	mov	r6, r0
 800abb8:	460f      	mov	r7, r1
 800abba:	d007      	beq.n	800abcc <__pow5mult+0x20>
 800abbc:	3a01      	subs	r2, #1
 800abbe:	4c1a      	ldr	r4, [pc, #104]	; (800ac28 <__pow5mult+0x7c>)
 800abc0:	2300      	movs	r3, #0
 800abc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800abc6:	f7ff fec9 	bl	800a95c <__multadd>
 800abca:	4607      	mov	r7, r0
 800abcc:	10ad      	asrs	r5, r5, #2
 800abce:	d027      	beq.n	800ac20 <__pow5mult+0x74>
 800abd0:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800abd2:	b944      	cbnz	r4, 800abe6 <__pow5mult+0x3a>
 800abd4:	f240 2171 	movw	r1, #625	; 0x271
 800abd8:	4630      	mov	r0, r6
 800abda:	f7ff ff48 	bl	800aa6e <__i2b>
 800abde:	2300      	movs	r3, #0
 800abe0:	64b0      	str	r0, [r6, #72]	; 0x48
 800abe2:	4604      	mov	r4, r0
 800abe4:	6003      	str	r3, [r0, #0]
 800abe6:	f04f 0800 	mov.w	r8, #0
 800abea:	07eb      	lsls	r3, r5, #31
 800abec:	d50a      	bpl.n	800ac04 <__pow5mult+0x58>
 800abee:	4639      	mov	r1, r7
 800abf0:	4622      	mov	r2, r4
 800abf2:	4630      	mov	r0, r6
 800abf4:	f7ff ff44 	bl	800aa80 <__multiply>
 800abf8:	4639      	mov	r1, r7
 800abfa:	4681      	mov	r9, r0
 800abfc:	4630      	mov	r0, r6
 800abfe:	f7ff fea4 	bl	800a94a <_Bfree>
 800ac02:	464f      	mov	r7, r9
 800ac04:	106d      	asrs	r5, r5, #1
 800ac06:	d00b      	beq.n	800ac20 <__pow5mult+0x74>
 800ac08:	6820      	ldr	r0, [r4, #0]
 800ac0a:	b938      	cbnz	r0, 800ac1c <__pow5mult+0x70>
 800ac0c:	4622      	mov	r2, r4
 800ac0e:	4621      	mov	r1, r4
 800ac10:	4630      	mov	r0, r6
 800ac12:	f7ff ff35 	bl	800aa80 <__multiply>
 800ac16:	6020      	str	r0, [r4, #0]
 800ac18:	f8c0 8000 	str.w	r8, [r0]
 800ac1c:	4604      	mov	r4, r0
 800ac1e:	e7e4      	b.n	800abea <__pow5mult+0x3e>
 800ac20:	4638      	mov	r0, r7
 800ac22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac26:	bf00      	nop
 800ac28:	0800d780 	.word	0x0800d780

0800ac2c <__lshift>:
 800ac2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac30:	460c      	mov	r4, r1
 800ac32:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac36:	6923      	ldr	r3, [r4, #16]
 800ac38:	6849      	ldr	r1, [r1, #4]
 800ac3a:	eb0a 0903 	add.w	r9, sl, r3
 800ac3e:	68a3      	ldr	r3, [r4, #8]
 800ac40:	4607      	mov	r7, r0
 800ac42:	4616      	mov	r6, r2
 800ac44:	f109 0501 	add.w	r5, r9, #1
 800ac48:	42ab      	cmp	r3, r5
 800ac4a:	db32      	blt.n	800acb2 <__lshift+0x86>
 800ac4c:	4638      	mov	r0, r7
 800ac4e:	f7ff fe57 	bl	800a900 <_Balloc>
 800ac52:	2300      	movs	r3, #0
 800ac54:	4680      	mov	r8, r0
 800ac56:	f100 0114 	add.w	r1, r0, #20
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	4553      	cmp	r3, sl
 800ac5e:	db2b      	blt.n	800acb8 <__lshift+0x8c>
 800ac60:	6920      	ldr	r0, [r4, #16]
 800ac62:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac66:	f104 0314 	add.w	r3, r4, #20
 800ac6a:	f016 021f 	ands.w	r2, r6, #31
 800ac6e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac72:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac76:	d025      	beq.n	800acc4 <__lshift+0x98>
 800ac78:	f1c2 0e20 	rsb	lr, r2, #32
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	681e      	ldr	r6, [r3, #0]
 800ac80:	468a      	mov	sl, r1
 800ac82:	4096      	lsls	r6, r2
 800ac84:	4330      	orrs	r0, r6
 800ac86:	f84a 0b04 	str.w	r0, [sl], #4
 800ac8a:	f853 0b04 	ldr.w	r0, [r3], #4
 800ac8e:	459c      	cmp	ip, r3
 800ac90:	fa20 f00e 	lsr.w	r0, r0, lr
 800ac94:	d814      	bhi.n	800acc0 <__lshift+0x94>
 800ac96:	6048      	str	r0, [r1, #4]
 800ac98:	b108      	cbz	r0, 800ac9e <__lshift+0x72>
 800ac9a:	f109 0502 	add.w	r5, r9, #2
 800ac9e:	3d01      	subs	r5, #1
 800aca0:	4638      	mov	r0, r7
 800aca2:	f8c8 5010 	str.w	r5, [r8, #16]
 800aca6:	4621      	mov	r1, r4
 800aca8:	f7ff fe4f 	bl	800a94a <_Bfree>
 800acac:	4640      	mov	r0, r8
 800acae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acb2:	3101      	adds	r1, #1
 800acb4:	005b      	lsls	r3, r3, #1
 800acb6:	e7c7      	b.n	800ac48 <__lshift+0x1c>
 800acb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800acbc:	3301      	adds	r3, #1
 800acbe:	e7cd      	b.n	800ac5c <__lshift+0x30>
 800acc0:	4651      	mov	r1, sl
 800acc2:	e7dc      	b.n	800ac7e <__lshift+0x52>
 800acc4:	3904      	subs	r1, #4
 800acc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800acca:	f841 2f04 	str.w	r2, [r1, #4]!
 800acce:	459c      	cmp	ip, r3
 800acd0:	d8f9      	bhi.n	800acc6 <__lshift+0x9a>
 800acd2:	e7e4      	b.n	800ac9e <__lshift+0x72>

0800acd4 <__mcmp>:
 800acd4:	6903      	ldr	r3, [r0, #16]
 800acd6:	690a      	ldr	r2, [r1, #16]
 800acd8:	1a9b      	subs	r3, r3, r2
 800acda:	b530      	push	{r4, r5, lr}
 800acdc:	d10c      	bne.n	800acf8 <__mcmp+0x24>
 800acde:	0092      	lsls	r2, r2, #2
 800ace0:	3014      	adds	r0, #20
 800ace2:	3114      	adds	r1, #20
 800ace4:	1884      	adds	r4, r0, r2
 800ace6:	4411      	add	r1, r2
 800ace8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800acec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800acf0:	4295      	cmp	r5, r2
 800acf2:	d003      	beq.n	800acfc <__mcmp+0x28>
 800acf4:	d305      	bcc.n	800ad02 <__mcmp+0x2e>
 800acf6:	2301      	movs	r3, #1
 800acf8:	4618      	mov	r0, r3
 800acfa:	bd30      	pop	{r4, r5, pc}
 800acfc:	42a0      	cmp	r0, r4
 800acfe:	d3f3      	bcc.n	800ace8 <__mcmp+0x14>
 800ad00:	e7fa      	b.n	800acf8 <__mcmp+0x24>
 800ad02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ad06:	e7f7      	b.n	800acf8 <__mcmp+0x24>

0800ad08 <__mdiff>:
 800ad08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad0c:	460d      	mov	r5, r1
 800ad0e:	4607      	mov	r7, r0
 800ad10:	4611      	mov	r1, r2
 800ad12:	4628      	mov	r0, r5
 800ad14:	4614      	mov	r4, r2
 800ad16:	f7ff ffdd 	bl	800acd4 <__mcmp>
 800ad1a:	1e06      	subs	r6, r0, #0
 800ad1c:	d108      	bne.n	800ad30 <__mdiff+0x28>
 800ad1e:	4631      	mov	r1, r6
 800ad20:	4638      	mov	r0, r7
 800ad22:	f7ff fded 	bl	800a900 <_Balloc>
 800ad26:	2301      	movs	r3, #1
 800ad28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800ad2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad30:	bfa4      	itt	ge
 800ad32:	4623      	movge	r3, r4
 800ad34:	462c      	movge	r4, r5
 800ad36:	4638      	mov	r0, r7
 800ad38:	6861      	ldr	r1, [r4, #4]
 800ad3a:	bfa6      	itte	ge
 800ad3c:	461d      	movge	r5, r3
 800ad3e:	2600      	movge	r6, #0
 800ad40:	2601      	movlt	r6, #1
 800ad42:	f7ff fddd 	bl	800a900 <_Balloc>
 800ad46:	692b      	ldr	r3, [r5, #16]
 800ad48:	60c6      	str	r6, [r0, #12]
 800ad4a:	6926      	ldr	r6, [r4, #16]
 800ad4c:	f105 0914 	add.w	r9, r5, #20
 800ad50:	f104 0214 	add.w	r2, r4, #20
 800ad54:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800ad58:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800ad5c:	f100 0514 	add.w	r5, r0, #20
 800ad60:	f04f 0e00 	mov.w	lr, #0
 800ad64:	f852 ab04 	ldr.w	sl, [r2], #4
 800ad68:	f859 4b04 	ldr.w	r4, [r9], #4
 800ad6c:	fa1e f18a 	uxtah	r1, lr, sl
 800ad70:	b2a3      	uxth	r3, r4
 800ad72:	1ac9      	subs	r1, r1, r3
 800ad74:	0c23      	lsrs	r3, r4, #16
 800ad76:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ad7a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ad7e:	b289      	uxth	r1, r1
 800ad80:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ad84:	45c8      	cmp	r8, r9
 800ad86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ad8a:	4694      	mov	ip, r2
 800ad8c:	f845 3b04 	str.w	r3, [r5], #4
 800ad90:	d8e8      	bhi.n	800ad64 <__mdiff+0x5c>
 800ad92:	45bc      	cmp	ip, r7
 800ad94:	d304      	bcc.n	800ada0 <__mdiff+0x98>
 800ad96:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ad9a:	b183      	cbz	r3, 800adbe <__mdiff+0xb6>
 800ad9c:	6106      	str	r6, [r0, #16]
 800ad9e:	e7c5      	b.n	800ad2c <__mdiff+0x24>
 800ada0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ada4:	fa1e f381 	uxtah	r3, lr, r1
 800ada8:	141a      	asrs	r2, r3, #16
 800adaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800adae:	b29b      	uxth	r3, r3
 800adb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adb4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800adb8:	f845 3b04 	str.w	r3, [r5], #4
 800adbc:	e7e9      	b.n	800ad92 <__mdiff+0x8a>
 800adbe:	3e01      	subs	r6, #1
 800adc0:	e7e9      	b.n	800ad96 <__mdiff+0x8e>

0800adc2 <__d2b>:
 800adc2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800adc6:	460e      	mov	r6, r1
 800adc8:	2101      	movs	r1, #1
 800adca:	ec59 8b10 	vmov	r8, r9, d0
 800adce:	4615      	mov	r5, r2
 800add0:	f7ff fd96 	bl	800a900 <_Balloc>
 800add4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800add8:	4607      	mov	r7, r0
 800adda:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800adde:	bb34      	cbnz	r4, 800ae2e <__d2b+0x6c>
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	f1b8 0300 	subs.w	r3, r8, #0
 800ade6:	d027      	beq.n	800ae38 <__d2b+0x76>
 800ade8:	a802      	add	r0, sp, #8
 800adea:	f840 3d08 	str.w	r3, [r0, #-8]!
 800adee:	f7ff fe0f 	bl	800aa10 <__lo0bits>
 800adf2:	9900      	ldr	r1, [sp, #0]
 800adf4:	b1f0      	cbz	r0, 800ae34 <__d2b+0x72>
 800adf6:	9a01      	ldr	r2, [sp, #4]
 800adf8:	f1c0 0320 	rsb	r3, r0, #32
 800adfc:	fa02 f303 	lsl.w	r3, r2, r3
 800ae00:	430b      	orrs	r3, r1
 800ae02:	40c2      	lsrs	r2, r0
 800ae04:	617b      	str	r3, [r7, #20]
 800ae06:	9201      	str	r2, [sp, #4]
 800ae08:	9b01      	ldr	r3, [sp, #4]
 800ae0a:	61bb      	str	r3, [r7, #24]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	bf14      	ite	ne
 800ae10:	2102      	movne	r1, #2
 800ae12:	2101      	moveq	r1, #1
 800ae14:	6139      	str	r1, [r7, #16]
 800ae16:	b1c4      	cbz	r4, 800ae4a <__d2b+0x88>
 800ae18:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ae1c:	4404      	add	r4, r0
 800ae1e:	6034      	str	r4, [r6, #0]
 800ae20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae24:	6028      	str	r0, [r5, #0]
 800ae26:	4638      	mov	r0, r7
 800ae28:	b003      	add	sp, #12
 800ae2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ae2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ae32:	e7d5      	b.n	800ade0 <__d2b+0x1e>
 800ae34:	6179      	str	r1, [r7, #20]
 800ae36:	e7e7      	b.n	800ae08 <__d2b+0x46>
 800ae38:	a801      	add	r0, sp, #4
 800ae3a:	f7ff fde9 	bl	800aa10 <__lo0bits>
 800ae3e:	9b01      	ldr	r3, [sp, #4]
 800ae40:	617b      	str	r3, [r7, #20]
 800ae42:	2101      	movs	r1, #1
 800ae44:	6139      	str	r1, [r7, #16]
 800ae46:	3020      	adds	r0, #32
 800ae48:	e7e5      	b.n	800ae16 <__d2b+0x54>
 800ae4a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ae4e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ae52:	6030      	str	r0, [r6, #0]
 800ae54:	6918      	ldr	r0, [r3, #16]
 800ae56:	f7ff fdbc 	bl	800a9d2 <__hi0bits>
 800ae5a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ae5e:	e7e1      	b.n	800ae24 <__d2b+0x62>

0800ae60 <frexp>:
 800ae60:	b570      	push	{r4, r5, r6, lr}
 800ae62:	2100      	movs	r1, #0
 800ae64:	ec55 4b10 	vmov	r4, r5, d0
 800ae68:	6001      	str	r1, [r0, #0]
 800ae6a:	4916      	ldr	r1, [pc, #88]	; (800aec4 <frexp+0x64>)
 800ae6c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800ae70:	428b      	cmp	r3, r1
 800ae72:	4606      	mov	r6, r0
 800ae74:	462a      	mov	r2, r5
 800ae76:	dc22      	bgt.n	800aebe <frexp+0x5e>
 800ae78:	ee10 1a10 	vmov	r1, s0
 800ae7c:	4319      	orrs	r1, r3
 800ae7e:	d01e      	beq.n	800aebe <frexp+0x5e>
 800ae80:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae84:	da0d      	bge.n	800aea2 <frexp+0x42>
 800ae86:	2200      	movs	r2, #0
 800ae88:	4b0f      	ldr	r3, [pc, #60]	; (800aec8 <frexp+0x68>)
 800ae8a:	ee10 0a10 	vmov	r0, s0
 800ae8e:	4629      	mov	r1, r5
 800ae90:	f7f5 fbba 	bl	8000608 <__aeabi_dmul>
 800ae94:	460a      	mov	r2, r1
 800ae96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ae9a:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800ae9e:	4604      	mov	r4, r0
 800aea0:	6031      	str	r1, [r6, #0]
 800aea2:	6831      	ldr	r1, [r6, #0]
 800aea4:	151b      	asrs	r3, r3, #20
 800aea6:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800aeaa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800aeae:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800aeb2:	440b      	add	r3, r1
 800aeb4:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800aeb8:	6033      	str	r3, [r6, #0]
 800aeba:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800aebe:	ec45 4b10 	vmov	d0, r4, r5
 800aec2:	bd70      	pop	{r4, r5, r6, pc}
 800aec4:	7fefffff 	.word	0x7fefffff
 800aec8:	43500000 	.word	0x43500000

0800aecc <_sbrk_r>:
 800aecc:	b538      	push	{r3, r4, r5, lr}
 800aece:	4c06      	ldr	r4, [pc, #24]	; (800aee8 <_sbrk_r+0x1c>)
 800aed0:	2300      	movs	r3, #0
 800aed2:	4605      	mov	r5, r0
 800aed4:	4608      	mov	r0, r1
 800aed6:	6023      	str	r3, [r4, #0]
 800aed8:	f7fc fef0 	bl	8007cbc <_sbrk>
 800aedc:	1c43      	adds	r3, r0, #1
 800aede:	d102      	bne.n	800aee6 <_sbrk_r+0x1a>
 800aee0:	6823      	ldr	r3, [r4, #0]
 800aee2:	b103      	cbz	r3, 800aee6 <_sbrk_r+0x1a>
 800aee4:	602b      	str	r3, [r5, #0]
 800aee6:	bd38      	pop	{r3, r4, r5, pc}
 800aee8:	2000c194 	.word	0x2000c194

0800aeec <__ssprint_r>:
 800aeec:	6893      	ldr	r3, [r2, #8]
 800aeee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aef2:	4681      	mov	r9, r0
 800aef4:	460c      	mov	r4, r1
 800aef6:	4616      	mov	r6, r2
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d05e      	beq.n	800afba <__ssprint_r+0xce>
 800aefc:	f04f 0b00 	mov.w	fp, #0
 800af00:	f8d2 a000 	ldr.w	sl, [r2]
 800af04:	465f      	mov	r7, fp
 800af06:	b357      	cbz	r7, 800af5e <__ssprint_r+0x72>
 800af08:	68a3      	ldr	r3, [r4, #8]
 800af0a:	429f      	cmp	r7, r3
 800af0c:	d340      	bcc.n	800af90 <__ssprint_r+0xa4>
 800af0e:	89a2      	ldrh	r2, [r4, #12]
 800af10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af14:	d03c      	beq.n	800af90 <__ssprint_r+0xa4>
 800af16:	6825      	ldr	r5, [r4, #0]
 800af18:	6921      	ldr	r1, [r4, #16]
 800af1a:	eba5 0801 	sub.w	r8, r5, r1
 800af1e:	6965      	ldr	r5, [r4, #20]
 800af20:	2302      	movs	r3, #2
 800af22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af26:	fb95 f5f3 	sdiv	r5, r5, r3
 800af2a:	f108 0301 	add.w	r3, r8, #1
 800af2e:	443b      	add	r3, r7
 800af30:	429d      	cmp	r5, r3
 800af32:	bf38      	it	cc
 800af34:	461d      	movcc	r5, r3
 800af36:	0553      	lsls	r3, r2, #21
 800af38:	d544      	bpl.n	800afc4 <__ssprint_r+0xd8>
 800af3a:	4629      	mov	r1, r5
 800af3c:	4648      	mov	r0, r9
 800af3e:	f7ff fa8b 	bl	800a458 <_malloc_r>
 800af42:	b988      	cbnz	r0, 800af68 <__ssprint_r+0x7c>
 800af44:	230c      	movs	r3, #12
 800af46:	f8c9 3000 	str.w	r3, [r9]
 800af4a:	89a3      	ldrh	r3, [r4, #12]
 800af4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af50:	81a3      	strh	r3, [r4, #12]
 800af52:	2300      	movs	r3, #0
 800af54:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800af58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af5c:	e02f      	b.n	800afbe <__ssprint_r+0xd2>
 800af5e:	e9da b700 	ldrd	fp, r7, [sl]
 800af62:	f10a 0a08 	add.w	sl, sl, #8
 800af66:	e7ce      	b.n	800af06 <__ssprint_r+0x1a>
 800af68:	4642      	mov	r2, r8
 800af6a:	6921      	ldr	r1, [r4, #16]
 800af6c:	9001      	str	r0, [sp, #4]
 800af6e:	f7fc ffdf 	bl	8007f30 <memcpy>
 800af72:	89a2      	ldrh	r2, [r4, #12]
 800af74:	9b01      	ldr	r3, [sp, #4]
 800af76:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800af7a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800af7e:	81a2      	strh	r2, [r4, #12]
 800af80:	6123      	str	r3, [r4, #16]
 800af82:	6165      	str	r5, [r4, #20]
 800af84:	4443      	add	r3, r8
 800af86:	eba5 0508 	sub.w	r5, r5, r8
 800af8a:	6023      	str	r3, [r4, #0]
 800af8c:	60a5      	str	r5, [r4, #8]
 800af8e:	463b      	mov	r3, r7
 800af90:	42bb      	cmp	r3, r7
 800af92:	bf28      	it	cs
 800af94:	463b      	movcs	r3, r7
 800af96:	461a      	mov	r2, r3
 800af98:	4659      	mov	r1, fp
 800af9a:	6820      	ldr	r0, [r4, #0]
 800af9c:	9301      	str	r3, [sp, #4]
 800af9e:	f000 f8ba 	bl	800b116 <memmove>
 800afa2:	68a2      	ldr	r2, [r4, #8]
 800afa4:	9b01      	ldr	r3, [sp, #4]
 800afa6:	1ad2      	subs	r2, r2, r3
 800afa8:	60a2      	str	r2, [r4, #8]
 800afaa:	6822      	ldr	r2, [r4, #0]
 800afac:	4413      	add	r3, r2
 800afae:	6023      	str	r3, [r4, #0]
 800afb0:	68b3      	ldr	r3, [r6, #8]
 800afb2:	1bdf      	subs	r7, r3, r7
 800afb4:	60b7      	str	r7, [r6, #8]
 800afb6:	2f00      	cmp	r7, #0
 800afb8:	d1d1      	bne.n	800af5e <__ssprint_r+0x72>
 800afba:	2000      	movs	r0, #0
 800afbc:	6070      	str	r0, [r6, #4]
 800afbe:	b003      	add	sp, #12
 800afc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afc4:	462a      	mov	r2, r5
 800afc6:	4648      	mov	r0, r9
 800afc8:	f000 f8be 	bl	800b148 <_realloc_r>
 800afcc:	4603      	mov	r3, r0
 800afce:	2800      	cmp	r0, #0
 800afd0:	d1d6      	bne.n	800af80 <__ssprint_r+0x94>
 800afd2:	6921      	ldr	r1, [r4, #16]
 800afd4:	4648      	mov	r0, r9
 800afd6:	f7ff f96f 	bl	800a2b8 <_free_r>
 800afda:	e7b3      	b.n	800af44 <__ssprint_r+0x58>

0800afdc <sysconf>:
 800afdc:	2808      	cmp	r0, #8
 800afde:	b508      	push	{r3, lr}
 800afe0:	d006      	beq.n	800aff0 <sysconf+0x14>
 800afe2:	f7fc ff7b 	bl	8007edc <__errno>
 800afe6:	2316      	movs	r3, #22
 800afe8:	6003      	str	r3, [r0, #0]
 800afea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800afee:	bd08      	pop	{r3, pc}
 800aff0:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800aff4:	e7fb      	b.n	800afee <sysconf+0x12>

0800aff6 <__ascii_wctomb>:
 800aff6:	b149      	cbz	r1, 800b00c <__ascii_wctomb+0x16>
 800aff8:	2aff      	cmp	r2, #255	; 0xff
 800affa:	bf85      	ittet	hi
 800affc:	238a      	movhi	r3, #138	; 0x8a
 800affe:	6003      	strhi	r3, [r0, #0]
 800b000:	700a      	strbls	r2, [r1, #0]
 800b002:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b006:	bf98      	it	ls
 800b008:	2001      	movls	r0, #1
 800b00a:	4770      	bx	lr
 800b00c:	4608      	mov	r0, r1
 800b00e:	4770      	bx	lr

0800b010 <__register_exitproc>:
 800b010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b014:	4c26      	ldr	r4, [pc, #152]	; (800b0b0 <__register_exitproc+0xa0>)
 800b016:	4606      	mov	r6, r0
 800b018:	6820      	ldr	r0, [r4, #0]
 800b01a:	4698      	mov	r8, r3
 800b01c:	460f      	mov	r7, r1
 800b01e:	4691      	mov	r9, r2
 800b020:	f7ff fa18 	bl	800a454 <__retarget_lock_acquire_recursive>
 800b024:	4b23      	ldr	r3, [pc, #140]	; (800b0b4 <__register_exitproc+0xa4>)
 800b026:	681d      	ldr	r5, [r3, #0]
 800b028:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800b02c:	b918      	cbnz	r0, 800b036 <__register_exitproc+0x26>
 800b02e:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800b032:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800b036:	6843      	ldr	r3, [r0, #4]
 800b038:	2b1f      	cmp	r3, #31
 800b03a:	dd19      	ble.n	800b070 <__register_exitproc+0x60>
 800b03c:	4b1e      	ldr	r3, [pc, #120]	; (800b0b8 <__register_exitproc+0xa8>)
 800b03e:	b933      	cbnz	r3, 800b04e <__register_exitproc+0x3e>
 800b040:	6820      	ldr	r0, [r4, #0]
 800b042:	f7ff fa08 	bl	800a456 <__retarget_lock_release_recursive>
 800b046:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b04a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b04e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800b052:	f3af 8000 	nop.w
 800b056:	2800      	cmp	r0, #0
 800b058:	d0f2      	beq.n	800b040 <__register_exitproc+0x30>
 800b05a:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800b05e:	6003      	str	r3, [r0, #0]
 800b060:	2200      	movs	r2, #0
 800b062:	6042      	str	r2, [r0, #4]
 800b064:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800b068:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800b06c:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800b070:	6843      	ldr	r3, [r0, #4]
 800b072:	b19e      	cbz	r6, 800b09c <__register_exitproc+0x8c>
 800b074:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800b078:	2201      	movs	r2, #1
 800b07a:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800b07e:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800b082:	409a      	lsls	r2, r3
 800b084:	4311      	orrs	r1, r2
 800b086:	2e02      	cmp	r6, #2
 800b088:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800b08c:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800b090:	bf02      	ittt	eq
 800b092:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800b096:	430a      	orreq	r2, r1
 800b098:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800b09c:	1c5a      	adds	r2, r3, #1
 800b09e:	3302      	adds	r3, #2
 800b0a0:	6042      	str	r2, [r0, #4]
 800b0a2:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800b0a6:	6820      	ldr	r0, [r4, #0]
 800b0a8:	f7ff f9d5 	bl	800a456 <__retarget_lock_release_recursive>
 800b0ac:	2000      	movs	r0, #0
 800b0ae:	e7cc      	b.n	800b04a <__register_exitproc+0x3a>
 800b0b0:	200004c0 	.word	0x200004c0
 800b0b4:	0800d620 	.word	0x0800d620
 800b0b8:	00000000 	.word	0x00000000

0800b0bc <_calloc_r>:
 800b0bc:	b510      	push	{r4, lr}
 800b0be:	4351      	muls	r1, r2
 800b0c0:	f7ff f9ca 	bl	800a458 <_malloc_r>
 800b0c4:	4604      	mov	r4, r0
 800b0c6:	b198      	cbz	r0, 800b0f0 <_calloc_r+0x34>
 800b0c8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800b0cc:	f022 0203 	bic.w	r2, r2, #3
 800b0d0:	3a04      	subs	r2, #4
 800b0d2:	2a24      	cmp	r2, #36	; 0x24
 800b0d4:	d81b      	bhi.n	800b10e <_calloc_r+0x52>
 800b0d6:	2a13      	cmp	r2, #19
 800b0d8:	d917      	bls.n	800b10a <_calloc_r+0x4e>
 800b0da:	2100      	movs	r1, #0
 800b0dc:	2a1b      	cmp	r2, #27
 800b0de:	e9c0 1100 	strd	r1, r1, [r0]
 800b0e2:	d807      	bhi.n	800b0f4 <_calloc_r+0x38>
 800b0e4:	f100 0308 	add.w	r3, r0, #8
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	e9c3 2200 	strd	r2, r2, [r3]
 800b0ee:	609a      	str	r2, [r3, #8]
 800b0f0:	4620      	mov	r0, r4
 800b0f2:	bd10      	pop	{r4, pc}
 800b0f4:	2a24      	cmp	r2, #36	; 0x24
 800b0f6:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800b0fa:	bf11      	iteee	ne
 800b0fc:	f100 0310 	addne.w	r3, r0, #16
 800b100:	6101      	streq	r1, [r0, #16]
 800b102:	f100 0318 	addeq.w	r3, r0, #24
 800b106:	6141      	streq	r1, [r0, #20]
 800b108:	e7ee      	b.n	800b0e8 <_calloc_r+0x2c>
 800b10a:	4603      	mov	r3, r0
 800b10c:	e7ec      	b.n	800b0e8 <_calloc_r+0x2c>
 800b10e:	2100      	movs	r1, #0
 800b110:	f7fc ff19 	bl	8007f46 <memset>
 800b114:	e7ec      	b.n	800b0f0 <_calloc_r+0x34>

0800b116 <memmove>:
 800b116:	4288      	cmp	r0, r1
 800b118:	b510      	push	{r4, lr}
 800b11a:	eb01 0302 	add.w	r3, r1, r2
 800b11e:	d807      	bhi.n	800b130 <memmove+0x1a>
 800b120:	1e42      	subs	r2, r0, #1
 800b122:	4299      	cmp	r1, r3
 800b124:	d00a      	beq.n	800b13c <memmove+0x26>
 800b126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b12a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800b12e:	e7f8      	b.n	800b122 <memmove+0xc>
 800b130:	4283      	cmp	r3, r0
 800b132:	d9f5      	bls.n	800b120 <memmove+0xa>
 800b134:	1881      	adds	r1, r0, r2
 800b136:	1ad2      	subs	r2, r2, r3
 800b138:	42d3      	cmn	r3, r2
 800b13a:	d100      	bne.n	800b13e <memmove+0x28>
 800b13c:	bd10      	pop	{r4, pc}
 800b13e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b142:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800b146:	e7f7      	b.n	800b138 <memmove+0x22>

0800b148 <_realloc_r>:
 800b148:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b14c:	4682      	mov	sl, r0
 800b14e:	460c      	mov	r4, r1
 800b150:	b929      	cbnz	r1, 800b15e <_realloc_r+0x16>
 800b152:	4611      	mov	r1, r2
 800b154:	b003      	add	sp, #12
 800b156:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b15a:	f7ff b97d 	b.w	800a458 <_malloc_r>
 800b15e:	9201      	str	r2, [sp, #4]
 800b160:	f7ff fbc2 	bl	800a8e8 <__malloc_lock>
 800b164:	9a01      	ldr	r2, [sp, #4]
 800b166:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800b16a:	f102 080b 	add.w	r8, r2, #11
 800b16e:	f1b8 0f16 	cmp.w	r8, #22
 800b172:	f1a4 0908 	sub.w	r9, r4, #8
 800b176:	f025 0603 	bic.w	r6, r5, #3
 800b17a:	d90b      	bls.n	800b194 <_realloc_r+0x4c>
 800b17c:	f038 0807 	bics.w	r8, r8, #7
 800b180:	d50a      	bpl.n	800b198 <_realloc_r+0x50>
 800b182:	230c      	movs	r3, #12
 800b184:	f8ca 3000 	str.w	r3, [sl]
 800b188:	f04f 0b00 	mov.w	fp, #0
 800b18c:	4658      	mov	r0, fp
 800b18e:	b003      	add	sp, #12
 800b190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b194:	f04f 0810 	mov.w	r8, #16
 800b198:	4590      	cmp	r8, r2
 800b19a:	d3f2      	bcc.n	800b182 <_realloc_r+0x3a>
 800b19c:	45b0      	cmp	r8, r6
 800b19e:	f340 8170 	ble.w	800b482 <_realloc_r+0x33a>
 800b1a2:	49a9      	ldr	r1, [pc, #676]	; (800b448 <_realloc_r+0x300>)
 800b1a4:	9101      	str	r1, [sp, #4]
 800b1a6:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800b1aa:	eb09 0306 	add.w	r3, r9, r6
 800b1ae:	459c      	cmp	ip, r3
 800b1b0:	6858      	ldr	r0, [r3, #4]
 800b1b2:	d005      	beq.n	800b1c0 <_realloc_r+0x78>
 800b1b4:	f020 0101 	bic.w	r1, r0, #1
 800b1b8:	4419      	add	r1, r3
 800b1ba:	6849      	ldr	r1, [r1, #4]
 800b1bc:	07cf      	lsls	r7, r1, #31
 800b1be:	d447      	bmi.n	800b250 <_realloc_r+0x108>
 800b1c0:	f020 0003 	bic.w	r0, r0, #3
 800b1c4:	459c      	cmp	ip, r3
 800b1c6:	eb06 0700 	add.w	r7, r6, r0
 800b1ca:	d119      	bne.n	800b200 <_realloc_r+0xb8>
 800b1cc:	f108 0110 	add.w	r1, r8, #16
 800b1d0:	42b9      	cmp	r1, r7
 800b1d2:	dc3f      	bgt.n	800b254 <_realloc_r+0x10c>
 800b1d4:	eb09 0308 	add.w	r3, r9, r8
 800b1d8:	9a01      	ldr	r2, [sp, #4]
 800b1da:	eba7 0708 	sub.w	r7, r7, r8
 800b1de:	f047 0701 	orr.w	r7, r7, #1
 800b1e2:	6093      	str	r3, [r2, #8]
 800b1e4:	605f      	str	r7, [r3, #4]
 800b1e6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b1ea:	f003 0301 	and.w	r3, r3, #1
 800b1ee:	ea43 0308 	orr.w	r3, r3, r8
 800b1f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b1f6:	4650      	mov	r0, sl
 800b1f8:	f7ff fb7c 	bl	800a8f4 <__malloc_unlock>
 800b1fc:	46a3      	mov	fp, r4
 800b1fe:	e7c5      	b.n	800b18c <_realloc_r+0x44>
 800b200:	45b8      	cmp	r8, r7
 800b202:	dc27      	bgt.n	800b254 <_realloc_r+0x10c>
 800b204:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800b208:	60da      	str	r2, [r3, #12]
 800b20a:	6093      	str	r3, [r2, #8]
 800b20c:	eba7 0008 	sub.w	r0, r7, r8
 800b210:	f8d9 2004 	ldr.w	r2, [r9, #4]
 800b214:	280f      	cmp	r0, #15
 800b216:	f002 0201 	and.w	r2, r2, #1
 800b21a:	eb09 0307 	add.w	r3, r9, r7
 800b21e:	f240 8132 	bls.w	800b486 <_realloc_r+0x33e>
 800b222:	eb09 0108 	add.w	r1, r9, r8
 800b226:	ea48 0202 	orr.w	r2, r8, r2
 800b22a:	f040 0001 	orr.w	r0, r0, #1
 800b22e:	f8c9 2004 	str.w	r2, [r9, #4]
 800b232:	6048      	str	r0, [r1, #4]
 800b234:	685a      	ldr	r2, [r3, #4]
 800b236:	f042 0201 	orr.w	r2, r2, #1
 800b23a:	605a      	str	r2, [r3, #4]
 800b23c:	3108      	adds	r1, #8
 800b23e:	4650      	mov	r0, sl
 800b240:	f7ff f83a 	bl	800a2b8 <_free_r>
 800b244:	4650      	mov	r0, sl
 800b246:	f7ff fb55 	bl	800a8f4 <__malloc_unlock>
 800b24a:	f109 0b08 	add.w	fp, r9, #8
 800b24e:	e79d      	b.n	800b18c <_realloc_r+0x44>
 800b250:	2000      	movs	r0, #0
 800b252:	4603      	mov	r3, r0
 800b254:	07e9      	lsls	r1, r5, #31
 800b256:	f100 80c6 	bmi.w	800b3e6 <_realloc_r+0x29e>
 800b25a:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800b25e:	eba9 0505 	sub.w	r5, r9, r5
 800b262:	6869      	ldr	r1, [r5, #4]
 800b264:	f021 0103 	bic.w	r1, r1, #3
 800b268:	eb01 0b06 	add.w	fp, r1, r6
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	f000 8086 	beq.w	800b37e <_realloc_r+0x236>
 800b272:	459c      	cmp	ip, r3
 800b274:	eb00 070b 	add.w	r7, r0, fp
 800b278:	d149      	bne.n	800b30e <_realloc_r+0x1c6>
 800b27a:	f108 0310 	add.w	r3, r8, #16
 800b27e:	42bb      	cmp	r3, r7
 800b280:	dc7d      	bgt.n	800b37e <_realloc_r+0x236>
 800b282:	46ab      	mov	fp, r5
 800b284:	68eb      	ldr	r3, [r5, #12]
 800b286:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800b28a:	60d3      	str	r3, [r2, #12]
 800b28c:	609a      	str	r2, [r3, #8]
 800b28e:	1f32      	subs	r2, r6, #4
 800b290:	2a24      	cmp	r2, #36	; 0x24
 800b292:	d837      	bhi.n	800b304 <_realloc_r+0x1bc>
 800b294:	2a13      	cmp	r2, #19
 800b296:	d933      	bls.n	800b300 <_realloc_r+0x1b8>
 800b298:	6823      	ldr	r3, [r4, #0]
 800b29a:	60ab      	str	r3, [r5, #8]
 800b29c:	6863      	ldr	r3, [r4, #4]
 800b29e:	60eb      	str	r3, [r5, #12]
 800b2a0:	2a1b      	cmp	r2, #27
 800b2a2:	d81b      	bhi.n	800b2dc <_realloc_r+0x194>
 800b2a4:	3408      	adds	r4, #8
 800b2a6:	f105 0310 	add.w	r3, r5, #16
 800b2aa:	6822      	ldr	r2, [r4, #0]
 800b2ac:	601a      	str	r2, [r3, #0]
 800b2ae:	6862      	ldr	r2, [r4, #4]
 800b2b0:	605a      	str	r2, [r3, #4]
 800b2b2:	68a2      	ldr	r2, [r4, #8]
 800b2b4:	609a      	str	r2, [r3, #8]
 800b2b6:	eb05 0308 	add.w	r3, r5, r8
 800b2ba:	9a01      	ldr	r2, [sp, #4]
 800b2bc:	eba7 0708 	sub.w	r7, r7, r8
 800b2c0:	f047 0701 	orr.w	r7, r7, #1
 800b2c4:	6093      	str	r3, [r2, #8]
 800b2c6:	605f      	str	r7, [r3, #4]
 800b2c8:	686b      	ldr	r3, [r5, #4]
 800b2ca:	f003 0301 	and.w	r3, r3, #1
 800b2ce:	ea43 0308 	orr.w	r3, r3, r8
 800b2d2:	606b      	str	r3, [r5, #4]
 800b2d4:	4650      	mov	r0, sl
 800b2d6:	f7ff fb0d 	bl	800a8f4 <__malloc_unlock>
 800b2da:	e757      	b.n	800b18c <_realloc_r+0x44>
 800b2dc:	68a3      	ldr	r3, [r4, #8]
 800b2de:	612b      	str	r3, [r5, #16]
 800b2e0:	68e3      	ldr	r3, [r4, #12]
 800b2e2:	616b      	str	r3, [r5, #20]
 800b2e4:	2a24      	cmp	r2, #36	; 0x24
 800b2e6:	bf01      	itttt	eq
 800b2e8:	6923      	ldreq	r3, [r4, #16]
 800b2ea:	61ab      	streq	r3, [r5, #24]
 800b2ec:	6962      	ldreq	r2, [r4, #20]
 800b2ee:	61ea      	streq	r2, [r5, #28]
 800b2f0:	bf19      	ittee	ne
 800b2f2:	3410      	addne	r4, #16
 800b2f4:	f105 0318 	addne.w	r3, r5, #24
 800b2f8:	f105 0320 	addeq.w	r3, r5, #32
 800b2fc:	3418      	addeq	r4, #24
 800b2fe:	e7d4      	b.n	800b2aa <_realloc_r+0x162>
 800b300:	465b      	mov	r3, fp
 800b302:	e7d2      	b.n	800b2aa <_realloc_r+0x162>
 800b304:	4621      	mov	r1, r4
 800b306:	4658      	mov	r0, fp
 800b308:	f7ff ff05 	bl	800b116 <memmove>
 800b30c:	e7d3      	b.n	800b2b6 <_realloc_r+0x16e>
 800b30e:	45b8      	cmp	r8, r7
 800b310:	dc35      	bgt.n	800b37e <_realloc_r+0x236>
 800b312:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800b316:	4628      	mov	r0, r5
 800b318:	60da      	str	r2, [r3, #12]
 800b31a:	6093      	str	r3, [r2, #8]
 800b31c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b320:	68eb      	ldr	r3, [r5, #12]
 800b322:	60d3      	str	r3, [r2, #12]
 800b324:	609a      	str	r2, [r3, #8]
 800b326:	1f32      	subs	r2, r6, #4
 800b328:	2a24      	cmp	r2, #36	; 0x24
 800b32a:	d824      	bhi.n	800b376 <_realloc_r+0x22e>
 800b32c:	2a13      	cmp	r2, #19
 800b32e:	d908      	bls.n	800b342 <_realloc_r+0x1fa>
 800b330:	6823      	ldr	r3, [r4, #0]
 800b332:	60ab      	str	r3, [r5, #8]
 800b334:	6863      	ldr	r3, [r4, #4]
 800b336:	60eb      	str	r3, [r5, #12]
 800b338:	2a1b      	cmp	r2, #27
 800b33a:	d80a      	bhi.n	800b352 <_realloc_r+0x20a>
 800b33c:	3408      	adds	r4, #8
 800b33e:	f105 0010 	add.w	r0, r5, #16
 800b342:	6823      	ldr	r3, [r4, #0]
 800b344:	6003      	str	r3, [r0, #0]
 800b346:	6863      	ldr	r3, [r4, #4]
 800b348:	6043      	str	r3, [r0, #4]
 800b34a:	68a3      	ldr	r3, [r4, #8]
 800b34c:	6083      	str	r3, [r0, #8]
 800b34e:	46a9      	mov	r9, r5
 800b350:	e75c      	b.n	800b20c <_realloc_r+0xc4>
 800b352:	68a3      	ldr	r3, [r4, #8]
 800b354:	612b      	str	r3, [r5, #16]
 800b356:	68e3      	ldr	r3, [r4, #12]
 800b358:	616b      	str	r3, [r5, #20]
 800b35a:	2a24      	cmp	r2, #36	; 0x24
 800b35c:	bf01      	itttt	eq
 800b35e:	6923      	ldreq	r3, [r4, #16]
 800b360:	61ab      	streq	r3, [r5, #24]
 800b362:	6963      	ldreq	r3, [r4, #20]
 800b364:	61eb      	streq	r3, [r5, #28]
 800b366:	bf19      	ittee	ne
 800b368:	3410      	addne	r4, #16
 800b36a:	f105 0018 	addne.w	r0, r5, #24
 800b36e:	f105 0020 	addeq.w	r0, r5, #32
 800b372:	3418      	addeq	r4, #24
 800b374:	e7e5      	b.n	800b342 <_realloc_r+0x1fa>
 800b376:	4621      	mov	r1, r4
 800b378:	f7ff fecd 	bl	800b116 <memmove>
 800b37c:	e7e7      	b.n	800b34e <_realloc_r+0x206>
 800b37e:	45d8      	cmp	r8, fp
 800b380:	dc31      	bgt.n	800b3e6 <_realloc_r+0x29e>
 800b382:	4628      	mov	r0, r5
 800b384:	68eb      	ldr	r3, [r5, #12]
 800b386:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800b38a:	60d3      	str	r3, [r2, #12]
 800b38c:	609a      	str	r2, [r3, #8]
 800b38e:	1f32      	subs	r2, r6, #4
 800b390:	2a24      	cmp	r2, #36	; 0x24
 800b392:	d824      	bhi.n	800b3de <_realloc_r+0x296>
 800b394:	2a13      	cmp	r2, #19
 800b396:	d908      	bls.n	800b3aa <_realloc_r+0x262>
 800b398:	6823      	ldr	r3, [r4, #0]
 800b39a:	60ab      	str	r3, [r5, #8]
 800b39c:	6863      	ldr	r3, [r4, #4]
 800b39e:	60eb      	str	r3, [r5, #12]
 800b3a0:	2a1b      	cmp	r2, #27
 800b3a2:	d80a      	bhi.n	800b3ba <_realloc_r+0x272>
 800b3a4:	3408      	adds	r4, #8
 800b3a6:	f105 0010 	add.w	r0, r5, #16
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	6003      	str	r3, [r0, #0]
 800b3ae:	6863      	ldr	r3, [r4, #4]
 800b3b0:	6043      	str	r3, [r0, #4]
 800b3b2:	68a3      	ldr	r3, [r4, #8]
 800b3b4:	6083      	str	r3, [r0, #8]
 800b3b6:	465f      	mov	r7, fp
 800b3b8:	e7c9      	b.n	800b34e <_realloc_r+0x206>
 800b3ba:	68a3      	ldr	r3, [r4, #8]
 800b3bc:	612b      	str	r3, [r5, #16]
 800b3be:	68e3      	ldr	r3, [r4, #12]
 800b3c0:	616b      	str	r3, [r5, #20]
 800b3c2:	2a24      	cmp	r2, #36	; 0x24
 800b3c4:	bf01      	itttt	eq
 800b3c6:	6923      	ldreq	r3, [r4, #16]
 800b3c8:	61ab      	streq	r3, [r5, #24]
 800b3ca:	6963      	ldreq	r3, [r4, #20]
 800b3cc:	61eb      	streq	r3, [r5, #28]
 800b3ce:	bf19      	ittee	ne
 800b3d0:	3410      	addne	r4, #16
 800b3d2:	f105 0018 	addne.w	r0, r5, #24
 800b3d6:	f105 0020 	addeq.w	r0, r5, #32
 800b3da:	3418      	addeq	r4, #24
 800b3dc:	e7e5      	b.n	800b3aa <_realloc_r+0x262>
 800b3de:	4621      	mov	r1, r4
 800b3e0:	f7ff fe99 	bl	800b116 <memmove>
 800b3e4:	e7e7      	b.n	800b3b6 <_realloc_r+0x26e>
 800b3e6:	4611      	mov	r1, r2
 800b3e8:	4650      	mov	r0, sl
 800b3ea:	f7ff f835 	bl	800a458 <_malloc_r>
 800b3ee:	4683      	mov	fp, r0
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	f43f af6f 	beq.w	800b2d4 <_realloc_r+0x18c>
 800b3f6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800b3fa:	f023 0301 	bic.w	r3, r3, #1
 800b3fe:	444b      	add	r3, r9
 800b400:	f1a0 0208 	sub.w	r2, r0, #8
 800b404:	4293      	cmp	r3, r2
 800b406:	d105      	bne.n	800b414 <_realloc_r+0x2cc>
 800b408:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800b40c:	f027 0703 	bic.w	r7, r7, #3
 800b410:	4437      	add	r7, r6
 800b412:	e6fb      	b.n	800b20c <_realloc_r+0xc4>
 800b414:	1f32      	subs	r2, r6, #4
 800b416:	2a24      	cmp	r2, #36	; 0x24
 800b418:	d82f      	bhi.n	800b47a <_realloc_r+0x332>
 800b41a:	2a13      	cmp	r2, #19
 800b41c:	d92a      	bls.n	800b474 <_realloc_r+0x32c>
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	6003      	str	r3, [r0, #0]
 800b422:	6863      	ldr	r3, [r4, #4]
 800b424:	6043      	str	r3, [r0, #4]
 800b426:	2a1b      	cmp	r2, #27
 800b428:	d810      	bhi.n	800b44c <_realloc_r+0x304>
 800b42a:	f104 0208 	add.w	r2, r4, #8
 800b42e:	f100 0308 	add.w	r3, r0, #8
 800b432:	6811      	ldr	r1, [r2, #0]
 800b434:	6019      	str	r1, [r3, #0]
 800b436:	6851      	ldr	r1, [r2, #4]
 800b438:	6059      	str	r1, [r3, #4]
 800b43a:	6892      	ldr	r2, [r2, #8]
 800b43c:	609a      	str	r2, [r3, #8]
 800b43e:	4621      	mov	r1, r4
 800b440:	4650      	mov	r0, sl
 800b442:	f7fe ff39 	bl	800a2b8 <_free_r>
 800b446:	e745      	b.n	800b2d4 <_realloc_r+0x18c>
 800b448:	20000630 	.word	0x20000630
 800b44c:	68a3      	ldr	r3, [r4, #8]
 800b44e:	6083      	str	r3, [r0, #8]
 800b450:	68e3      	ldr	r3, [r4, #12]
 800b452:	60c3      	str	r3, [r0, #12]
 800b454:	2a24      	cmp	r2, #36	; 0x24
 800b456:	bf01      	itttt	eq
 800b458:	6923      	ldreq	r3, [r4, #16]
 800b45a:	6103      	streq	r3, [r0, #16]
 800b45c:	6961      	ldreq	r1, [r4, #20]
 800b45e:	6141      	streq	r1, [r0, #20]
 800b460:	bf19      	ittee	ne
 800b462:	f104 0210 	addne.w	r2, r4, #16
 800b466:	f100 0310 	addne.w	r3, r0, #16
 800b46a:	f104 0218 	addeq.w	r2, r4, #24
 800b46e:	f100 0318 	addeq.w	r3, r0, #24
 800b472:	e7de      	b.n	800b432 <_realloc_r+0x2ea>
 800b474:	4603      	mov	r3, r0
 800b476:	4622      	mov	r2, r4
 800b478:	e7db      	b.n	800b432 <_realloc_r+0x2ea>
 800b47a:	4621      	mov	r1, r4
 800b47c:	f7ff fe4b 	bl	800b116 <memmove>
 800b480:	e7dd      	b.n	800b43e <_realloc_r+0x2f6>
 800b482:	4637      	mov	r7, r6
 800b484:	e6c2      	b.n	800b20c <_realloc_r+0xc4>
 800b486:	4317      	orrs	r7, r2
 800b488:	f8c9 7004 	str.w	r7, [r9, #4]
 800b48c:	685a      	ldr	r2, [r3, #4]
 800b48e:	f042 0201 	orr.w	r2, r2, #1
 800b492:	605a      	str	r2, [r3, #4]
 800b494:	e6d6      	b.n	800b244 <_realloc_r+0xfc>
 800b496:	bf00      	nop

0800b498 <pow>:
 800b498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b49c:	ed2d 8b04 	vpush	{d8-d9}
 800b4a0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 800b774 <pow+0x2dc>
 800b4a4:	b08d      	sub	sp, #52	; 0x34
 800b4a6:	ec57 6b10 	vmov	r6, r7, d0
 800b4aa:	ec55 4b11 	vmov	r4, r5, d1
 800b4ae:	f000 f9bf 	bl	800b830 <__ieee754_pow>
 800b4b2:	f999 3000 	ldrsb.w	r3, [r9]
 800b4b6:	9300      	str	r3, [sp, #0]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	eeb0 8a40 	vmov.f32	s16, s0
 800b4be:	eef0 8a60 	vmov.f32	s17, s1
 800b4c2:	46c8      	mov	r8, r9
 800b4c4:	d05f      	beq.n	800b586 <pow+0xee>
 800b4c6:	4622      	mov	r2, r4
 800b4c8:	462b      	mov	r3, r5
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	4629      	mov	r1, r5
 800b4ce:	f7f5 fb35 	bl	8000b3c <__aeabi_dcmpun>
 800b4d2:	4683      	mov	fp, r0
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d156      	bne.n	800b586 <pow+0xee>
 800b4d8:	4632      	mov	r2, r6
 800b4da:	463b      	mov	r3, r7
 800b4dc:	4630      	mov	r0, r6
 800b4de:	4639      	mov	r1, r7
 800b4e0:	f7f5 fb2c 	bl	8000b3c <__aeabi_dcmpun>
 800b4e4:	9001      	str	r0, [sp, #4]
 800b4e6:	b1e8      	cbz	r0, 800b524 <pow+0x8c>
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	f7f5 faf2 	bl	8000ad8 <__aeabi_dcmpeq>
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	d046      	beq.n	800b586 <pow+0xee>
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	9302      	str	r3, [sp, #8]
 800b4fc:	4b96      	ldr	r3, [pc, #600]	; (800b758 <pow+0x2c0>)
 800b4fe:	9303      	str	r3, [sp, #12]
 800b500:	4b96      	ldr	r3, [pc, #600]	; (800b75c <pow+0x2c4>)
 800b502:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800b506:	2200      	movs	r2, #0
 800b508:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b50c:	9b00      	ldr	r3, [sp, #0]
 800b50e:	2b02      	cmp	r3, #2
 800b510:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b514:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b518:	d033      	beq.n	800b582 <pow+0xea>
 800b51a:	a802      	add	r0, sp, #8
 800b51c:	f000 ff57 	bl	800c3ce <matherr>
 800b520:	bb48      	cbnz	r0, 800b576 <pow+0xde>
 800b522:	e05d      	b.n	800b5e0 <pow+0x148>
 800b524:	f04f 0a00 	mov.w	sl, #0
 800b528:	f04f 0b00 	mov.w	fp, #0
 800b52c:	4652      	mov	r2, sl
 800b52e:	465b      	mov	r3, fp
 800b530:	4630      	mov	r0, r6
 800b532:	4639      	mov	r1, r7
 800b534:	f7f5 fad0 	bl	8000ad8 <__aeabi_dcmpeq>
 800b538:	ec4b ab19 	vmov	d9, sl, fp
 800b53c:	2800      	cmp	r0, #0
 800b53e:	d054      	beq.n	800b5ea <pow+0x152>
 800b540:	4652      	mov	r2, sl
 800b542:	465b      	mov	r3, fp
 800b544:	4620      	mov	r0, r4
 800b546:	4629      	mov	r1, r5
 800b548:	f7f5 fac6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b54c:	4680      	mov	r8, r0
 800b54e:	b318      	cbz	r0, 800b598 <pow+0x100>
 800b550:	2301      	movs	r3, #1
 800b552:	9302      	str	r3, [sp, #8]
 800b554:	4b80      	ldr	r3, [pc, #512]	; (800b758 <pow+0x2c0>)
 800b556:	9303      	str	r3, [sp, #12]
 800b558:	9b01      	ldr	r3, [sp, #4]
 800b55a:	930a      	str	r3, [sp, #40]	; 0x28
 800b55c:	9b00      	ldr	r3, [sp, #0]
 800b55e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b562:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b566:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d0d5      	beq.n	800b51a <pow+0x82>
 800b56e:	4b7b      	ldr	r3, [pc, #492]	; (800b75c <pow+0x2c4>)
 800b570:	2200      	movs	r2, #0
 800b572:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b576:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b578:	b11b      	cbz	r3, 800b582 <pow+0xea>
 800b57a:	f7fc fcaf 	bl	8007edc <__errno>
 800b57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b580:	6003      	str	r3, [r0, #0]
 800b582:	ed9d 8b08 	vldr	d8, [sp, #32]
 800b586:	eeb0 0a48 	vmov.f32	s0, s16
 800b58a:	eef0 0a68 	vmov.f32	s1, s17
 800b58e:	b00d      	add	sp, #52	; 0x34
 800b590:	ecbd 8b04 	vpop	{d8-d9}
 800b594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b598:	ec45 4b10 	vmov	d0, r4, r5
 800b59c:	f000 ff0f 	bl	800c3be <finite>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d0f0      	beq.n	800b586 <pow+0xee>
 800b5a4:	4652      	mov	r2, sl
 800b5a6:	465b      	mov	r3, fp
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	4629      	mov	r1, r5
 800b5ac:	f7f5 fa9e 	bl	8000aec <__aeabi_dcmplt>
 800b5b0:	2800      	cmp	r0, #0
 800b5b2:	d0e8      	beq.n	800b586 <pow+0xee>
 800b5b4:	2301      	movs	r3, #1
 800b5b6:	9302      	str	r3, [sp, #8]
 800b5b8:	4b67      	ldr	r3, [pc, #412]	; (800b758 <pow+0x2c0>)
 800b5ba:	9303      	str	r3, [sp, #12]
 800b5bc:	f999 3000 	ldrsb.w	r3, [r9]
 800b5c0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 800b5c4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b5c8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b5cc:	b913      	cbnz	r3, 800b5d4 <pow+0x13c>
 800b5ce:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800b5d2:	e7a2      	b.n	800b51a <pow+0x82>
 800b5d4:	4962      	ldr	r1, [pc, #392]	; (800b760 <pow+0x2c8>)
 800b5d6:	2000      	movs	r0, #0
 800b5d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d19c      	bne.n	800b51a <pow+0x82>
 800b5e0:	f7fc fc7c 	bl	8007edc <__errno>
 800b5e4:	2321      	movs	r3, #33	; 0x21
 800b5e6:	6003      	str	r3, [r0, #0]
 800b5e8:	e7c5      	b.n	800b576 <pow+0xde>
 800b5ea:	eeb0 0a48 	vmov.f32	s0, s16
 800b5ee:	eef0 0a68 	vmov.f32	s1, s17
 800b5f2:	f000 fee4 	bl	800c3be <finite>
 800b5f6:	9000      	str	r0, [sp, #0]
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	f040 8081 	bne.w	800b700 <pow+0x268>
 800b5fe:	ec47 6b10 	vmov	d0, r6, r7
 800b602:	f000 fedc 	bl	800c3be <finite>
 800b606:	2800      	cmp	r0, #0
 800b608:	d07a      	beq.n	800b700 <pow+0x268>
 800b60a:	ec45 4b10 	vmov	d0, r4, r5
 800b60e:	f000 fed6 	bl	800c3be <finite>
 800b612:	2800      	cmp	r0, #0
 800b614:	d074      	beq.n	800b700 <pow+0x268>
 800b616:	ec53 2b18 	vmov	r2, r3, d8
 800b61a:	ee18 0a10 	vmov	r0, s16
 800b61e:	4619      	mov	r1, r3
 800b620:	f7f5 fa8c 	bl	8000b3c <__aeabi_dcmpun>
 800b624:	f999 9000 	ldrsb.w	r9, [r9]
 800b628:	4b4b      	ldr	r3, [pc, #300]	; (800b758 <pow+0x2c0>)
 800b62a:	b1b0      	cbz	r0, 800b65a <pow+0x1c2>
 800b62c:	2201      	movs	r2, #1
 800b62e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b632:	9b00      	ldr	r3, [sp, #0]
 800b634:	930a      	str	r3, [sp, #40]	; 0x28
 800b636:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b63a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b63e:	f1b9 0f00 	cmp.w	r9, #0
 800b642:	d0c4      	beq.n	800b5ce <pow+0x136>
 800b644:	4652      	mov	r2, sl
 800b646:	465b      	mov	r3, fp
 800b648:	4650      	mov	r0, sl
 800b64a:	4659      	mov	r1, fp
 800b64c:	f7f5 f906 	bl	800085c <__aeabi_ddiv>
 800b650:	f1b9 0f02 	cmp.w	r9, #2
 800b654:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b658:	e7c1      	b.n	800b5de <pow+0x146>
 800b65a:	2203      	movs	r2, #3
 800b65c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b660:	900a      	str	r0, [sp, #40]	; 0x28
 800b662:	4629      	mov	r1, r5
 800b664:	4620      	mov	r0, r4
 800b666:	2200      	movs	r2, #0
 800b668:	4b3e      	ldr	r3, [pc, #248]	; (800b764 <pow+0x2cc>)
 800b66a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b66e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b672:	f7f4 ffc9 	bl	8000608 <__aeabi_dmul>
 800b676:	4604      	mov	r4, r0
 800b678:	460d      	mov	r5, r1
 800b67a:	f1b9 0f00 	cmp.w	r9, #0
 800b67e:	d124      	bne.n	800b6ca <pow+0x232>
 800b680:	4b39      	ldr	r3, [pc, #228]	; (800b768 <pow+0x2d0>)
 800b682:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b686:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b68a:	4630      	mov	r0, r6
 800b68c:	4652      	mov	r2, sl
 800b68e:	465b      	mov	r3, fp
 800b690:	4639      	mov	r1, r7
 800b692:	f7f5 fa2b 	bl	8000aec <__aeabi_dcmplt>
 800b696:	2800      	cmp	r0, #0
 800b698:	d056      	beq.n	800b748 <pow+0x2b0>
 800b69a:	ec45 4b10 	vmov	d0, r4, r5
 800b69e:	f000 fea3 	bl	800c3e8 <rint>
 800b6a2:	4622      	mov	r2, r4
 800b6a4:	462b      	mov	r3, r5
 800b6a6:	ec51 0b10 	vmov	r0, r1, d0
 800b6aa:	f7f5 fa15 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6ae:	b920      	cbnz	r0, 800b6ba <pow+0x222>
 800b6b0:	4b2e      	ldr	r3, [pc, #184]	; (800b76c <pow+0x2d4>)
 800b6b2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800b6b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b6ba:	f998 3000 	ldrsb.w	r3, [r8]
 800b6be:	2b02      	cmp	r3, #2
 800b6c0:	d142      	bne.n	800b748 <pow+0x2b0>
 800b6c2:	f7fc fc0b 	bl	8007edc <__errno>
 800b6c6:	2322      	movs	r3, #34	; 0x22
 800b6c8:	e78d      	b.n	800b5e6 <pow+0x14e>
 800b6ca:	4b29      	ldr	r3, [pc, #164]	; (800b770 <pow+0x2d8>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b6d2:	4630      	mov	r0, r6
 800b6d4:	4652      	mov	r2, sl
 800b6d6:	465b      	mov	r3, fp
 800b6d8:	4639      	mov	r1, r7
 800b6da:	f7f5 fa07 	bl	8000aec <__aeabi_dcmplt>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d0eb      	beq.n	800b6ba <pow+0x222>
 800b6e2:	ec45 4b10 	vmov	d0, r4, r5
 800b6e6:	f000 fe7f 	bl	800c3e8 <rint>
 800b6ea:	4622      	mov	r2, r4
 800b6ec:	462b      	mov	r3, r5
 800b6ee:	ec51 0b10 	vmov	r0, r1, d0
 800b6f2:	f7f5 f9f1 	bl	8000ad8 <__aeabi_dcmpeq>
 800b6f6:	2800      	cmp	r0, #0
 800b6f8:	d1df      	bne.n	800b6ba <pow+0x222>
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	4b18      	ldr	r3, [pc, #96]	; (800b760 <pow+0x2c8>)
 800b6fe:	e7da      	b.n	800b6b6 <pow+0x21e>
 800b700:	2200      	movs	r2, #0
 800b702:	2300      	movs	r3, #0
 800b704:	ec51 0b18 	vmov	r0, r1, d8
 800b708:	f7f5 f9e6 	bl	8000ad8 <__aeabi_dcmpeq>
 800b70c:	2800      	cmp	r0, #0
 800b70e:	f43f af3a 	beq.w	800b586 <pow+0xee>
 800b712:	ec47 6b10 	vmov	d0, r6, r7
 800b716:	f000 fe52 	bl	800c3be <finite>
 800b71a:	2800      	cmp	r0, #0
 800b71c:	f43f af33 	beq.w	800b586 <pow+0xee>
 800b720:	ec45 4b10 	vmov	d0, r4, r5
 800b724:	f000 fe4b 	bl	800c3be <finite>
 800b728:	2800      	cmp	r0, #0
 800b72a:	f43f af2c 	beq.w	800b586 <pow+0xee>
 800b72e:	2304      	movs	r3, #4
 800b730:	9302      	str	r3, [sp, #8]
 800b732:	4b09      	ldr	r3, [pc, #36]	; (800b758 <pow+0x2c0>)
 800b734:	9303      	str	r3, [sp, #12]
 800b736:	2300      	movs	r3, #0
 800b738:	930a      	str	r3, [sp, #40]	; 0x28
 800b73a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b73e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800b742:	ed8d 9b08 	vstr	d9, [sp, #32]
 800b746:	e7b8      	b.n	800b6ba <pow+0x222>
 800b748:	a802      	add	r0, sp, #8
 800b74a:	f000 fe40 	bl	800c3ce <matherr>
 800b74e:	2800      	cmp	r0, #0
 800b750:	f47f af11 	bne.w	800b576 <pow+0xde>
 800b754:	e7b5      	b.n	800b6c2 <pow+0x22a>
 800b756:	bf00      	nop
 800b758:	0800d88d 	.word	0x0800d88d
 800b75c:	3ff00000 	.word	0x3ff00000
 800b760:	fff00000 	.word	0xfff00000
 800b764:	3fe00000 	.word	0x3fe00000
 800b768:	47efffff 	.word	0x47efffff
 800b76c:	c7efffff 	.word	0xc7efffff
 800b770:	7ff00000 	.word	0x7ff00000
 800b774:	20000a40 	.word	0x20000a40

0800b778 <sqrt>:
 800b778:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b77c:	ed2d 8b02 	vpush	{d8}
 800b780:	b08b      	sub	sp, #44	; 0x2c
 800b782:	ec55 4b10 	vmov	r4, r5, d0
 800b786:	f000 fd61 	bl	800c24c <__ieee754_sqrt>
 800b78a:	4b26      	ldr	r3, [pc, #152]	; (800b824 <sqrt+0xac>)
 800b78c:	eeb0 8a40 	vmov.f32	s16, s0
 800b790:	eef0 8a60 	vmov.f32	s17, s1
 800b794:	f993 6000 	ldrsb.w	r6, [r3]
 800b798:	1c73      	adds	r3, r6, #1
 800b79a:	d02a      	beq.n	800b7f2 <sqrt+0x7a>
 800b79c:	4622      	mov	r2, r4
 800b79e:	462b      	mov	r3, r5
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	4629      	mov	r1, r5
 800b7a4:	f7f5 f9ca 	bl	8000b3c <__aeabi_dcmpun>
 800b7a8:	4607      	mov	r7, r0
 800b7aa:	bb10      	cbnz	r0, 800b7f2 <sqrt+0x7a>
 800b7ac:	f04f 0800 	mov.w	r8, #0
 800b7b0:	f04f 0900 	mov.w	r9, #0
 800b7b4:	4642      	mov	r2, r8
 800b7b6:	464b      	mov	r3, r9
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	4629      	mov	r1, r5
 800b7bc:	f7f5 f996 	bl	8000aec <__aeabi_dcmplt>
 800b7c0:	b1b8      	cbz	r0, 800b7f2 <sqrt+0x7a>
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	9300      	str	r3, [sp, #0]
 800b7c6:	4b18      	ldr	r3, [pc, #96]	; (800b828 <sqrt+0xb0>)
 800b7c8:	9301      	str	r3, [sp, #4]
 800b7ca:	9708      	str	r7, [sp, #32]
 800b7cc:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800b7d0:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800b7d4:	b9b6      	cbnz	r6, 800b804 <sqrt+0x8c>
 800b7d6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800b7da:	4668      	mov	r0, sp
 800b7dc:	f000 fdf7 	bl	800c3ce <matherr>
 800b7e0:	b1d0      	cbz	r0, 800b818 <sqrt+0xa0>
 800b7e2:	9b08      	ldr	r3, [sp, #32]
 800b7e4:	b11b      	cbz	r3, 800b7ee <sqrt+0x76>
 800b7e6:	f7fc fb79 	bl	8007edc <__errno>
 800b7ea:	9b08      	ldr	r3, [sp, #32]
 800b7ec:	6003      	str	r3, [r0, #0]
 800b7ee:	ed9d 8b06 	vldr	d8, [sp, #24]
 800b7f2:	eeb0 0a48 	vmov.f32	s0, s16
 800b7f6:	eef0 0a68 	vmov.f32	s1, s17
 800b7fa:	b00b      	add	sp, #44	; 0x2c
 800b7fc:	ecbd 8b02 	vpop	{d8}
 800b800:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b804:	4642      	mov	r2, r8
 800b806:	464b      	mov	r3, r9
 800b808:	4640      	mov	r0, r8
 800b80a:	4649      	mov	r1, r9
 800b80c:	f7f5 f826 	bl	800085c <__aeabi_ddiv>
 800b810:	2e02      	cmp	r6, #2
 800b812:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b816:	d1e0      	bne.n	800b7da <sqrt+0x62>
 800b818:	f7fc fb60 	bl	8007edc <__errno>
 800b81c:	2321      	movs	r3, #33	; 0x21
 800b81e:	6003      	str	r3, [r0, #0]
 800b820:	e7df      	b.n	800b7e2 <sqrt+0x6a>
 800b822:	bf00      	nop
 800b824:	20000a40 	.word	0x20000a40
 800b828:	0800d891 	.word	0x0800d891
 800b82c:	00000000 	.word	0x00000000

0800b830 <__ieee754_pow>:
 800b830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b834:	b091      	sub	sp, #68	; 0x44
 800b836:	ed8d 1b00 	vstr	d1, [sp]
 800b83a:	e9dd 2900 	ldrd	r2, r9, [sp]
 800b83e:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800b842:	ea58 0302 	orrs.w	r3, r8, r2
 800b846:	ec57 6b10 	vmov	r6, r7, d0
 800b84a:	f000 84be 	beq.w	800c1ca <__ieee754_pow+0x99a>
 800b84e:	4b7a      	ldr	r3, [pc, #488]	; (800ba38 <__ieee754_pow+0x208>)
 800b850:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800b854:	429c      	cmp	r4, r3
 800b856:	463d      	mov	r5, r7
 800b858:	ee10 aa10 	vmov	sl, s0
 800b85c:	dc09      	bgt.n	800b872 <__ieee754_pow+0x42>
 800b85e:	d103      	bne.n	800b868 <__ieee754_pow+0x38>
 800b860:	b93e      	cbnz	r6, 800b872 <__ieee754_pow+0x42>
 800b862:	45a0      	cmp	r8, r4
 800b864:	dc0d      	bgt.n	800b882 <__ieee754_pow+0x52>
 800b866:	e001      	b.n	800b86c <__ieee754_pow+0x3c>
 800b868:	4598      	cmp	r8, r3
 800b86a:	dc02      	bgt.n	800b872 <__ieee754_pow+0x42>
 800b86c:	4598      	cmp	r8, r3
 800b86e:	d10e      	bne.n	800b88e <__ieee754_pow+0x5e>
 800b870:	b16a      	cbz	r2, 800b88e <__ieee754_pow+0x5e>
 800b872:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b876:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b87a:	ea54 030a 	orrs.w	r3, r4, sl
 800b87e:	f000 84a4 	beq.w	800c1ca <__ieee754_pow+0x99a>
 800b882:	486e      	ldr	r0, [pc, #440]	; (800ba3c <__ieee754_pow+0x20c>)
 800b884:	b011      	add	sp, #68	; 0x44
 800b886:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b88a:	f000 bda5 	b.w	800c3d8 <nan>
 800b88e:	2d00      	cmp	r5, #0
 800b890:	da53      	bge.n	800b93a <__ieee754_pow+0x10a>
 800b892:	4b6b      	ldr	r3, [pc, #428]	; (800ba40 <__ieee754_pow+0x210>)
 800b894:	4598      	cmp	r8, r3
 800b896:	dc4d      	bgt.n	800b934 <__ieee754_pow+0x104>
 800b898:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800b89c:	4598      	cmp	r8, r3
 800b89e:	dd4c      	ble.n	800b93a <__ieee754_pow+0x10a>
 800b8a0:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b8a4:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800b8a8:	2b14      	cmp	r3, #20
 800b8aa:	dd26      	ble.n	800b8fa <__ieee754_pow+0xca>
 800b8ac:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800b8b0:	fa22 f103 	lsr.w	r1, r2, r3
 800b8b4:	fa01 f303 	lsl.w	r3, r1, r3
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d13e      	bne.n	800b93a <__ieee754_pow+0x10a>
 800b8bc:	f001 0101 	and.w	r1, r1, #1
 800b8c0:	f1c1 0b02 	rsb	fp, r1, #2
 800b8c4:	2a00      	cmp	r2, #0
 800b8c6:	d15b      	bne.n	800b980 <__ieee754_pow+0x150>
 800b8c8:	4b5b      	ldr	r3, [pc, #364]	; (800ba38 <__ieee754_pow+0x208>)
 800b8ca:	4598      	cmp	r8, r3
 800b8cc:	d124      	bne.n	800b918 <__ieee754_pow+0xe8>
 800b8ce:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800b8d2:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800b8d6:	ea53 030a 	orrs.w	r3, r3, sl
 800b8da:	f000 8476 	beq.w	800c1ca <__ieee754_pow+0x99a>
 800b8de:	4b59      	ldr	r3, [pc, #356]	; (800ba44 <__ieee754_pow+0x214>)
 800b8e0:	429c      	cmp	r4, r3
 800b8e2:	dd2d      	ble.n	800b940 <__ieee754_pow+0x110>
 800b8e4:	f1b9 0f00 	cmp.w	r9, #0
 800b8e8:	f280 8473 	bge.w	800c1d2 <__ieee754_pow+0x9a2>
 800b8ec:	2000      	movs	r0, #0
 800b8ee:	2100      	movs	r1, #0
 800b8f0:	ec41 0b10 	vmov	d0, r0, r1
 800b8f4:	b011      	add	sp, #68	; 0x44
 800b8f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fa:	2a00      	cmp	r2, #0
 800b8fc:	d13e      	bne.n	800b97c <__ieee754_pow+0x14c>
 800b8fe:	f1c3 0314 	rsb	r3, r3, #20
 800b902:	fa48 f103 	asr.w	r1, r8, r3
 800b906:	fa01 f303 	lsl.w	r3, r1, r3
 800b90a:	4543      	cmp	r3, r8
 800b90c:	f040 8469 	bne.w	800c1e2 <__ieee754_pow+0x9b2>
 800b910:	f001 0101 	and.w	r1, r1, #1
 800b914:	f1c1 0b02 	rsb	fp, r1, #2
 800b918:	4b4b      	ldr	r3, [pc, #300]	; (800ba48 <__ieee754_pow+0x218>)
 800b91a:	4598      	cmp	r8, r3
 800b91c:	d118      	bne.n	800b950 <__ieee754_pow+0x120>
 800b91e:	f1b9 0f00 	cmp.w	r9, #0
 800b922:	f280 845a 	bge.w	800c1da <__ieee754_pow+0x9aa>
 800b926:	4948      	ldr	r1, [pc, #288]	; (800ba48 <__ieee754_pow+0x218>)
 800b928:	4632      	mov	r2, r6
 800b92a:	463b      	mov	r3, r7
 800b92c:	2000      	movs	r0, #0
 800b92e:	f7f4 ff95 	bl	800085c <__aeabi_ddiv>
 800b932:	e7dd      	b.n	800b8f0 <__ieee754_pow+0xc0>
 800b934:	f04f 0b02 	mov.w	fp, #2
 800b938:	e7c4      	b.n	800b8c4 <__ieee754_pow+0x94>
 800b93a:	f04f 0b00 	mov.w	fp, #0
 800b93e:	e7c1      	b.n	800b8c4 <__ieee754_pow+0x94>
 800b940:	f1b9 0f00 	cmp.w	r9, #0
 800b944:	dad2      	bge.n	800b8ec <__ieee754_pow+0xbc>
 800b946:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b94a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b94e:	e7cf      	b.n	800b8f0 <__ieee754_pow+0xc0>
 800b950:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800b954:	d106      	bne.n	800b964 <__ieee754_pow+0x134>
 800b956:	4632      	mov	r2, r6
 800b958:	463b      	mov	r3, r7
 800b95a:	4610      	mov	r0, r2
 800b95c:	4619      	mov	r1, r3
 800b95e:	f7f4 fe53 	bl	8000608 <__aeabi_dmul>
 800b962:	e7c5      	b.n	800b8f0 <__ieee754_pow+0xc0>
 800b964:	4b39      	ldr	r3, [pc, #228]	; (800ba4c <__ieee754_pow+0x21c>)
 800b966:	4599      	cmp	r9, r3
 800b968:	d10a      	bne.n	800b980 <__ieee754_pow+0x150>
 800b96a:	2d00      	cmp	r5, #0
 800b96c:	db08      	blt.n	800b980 <__ieee754_pow+0x150>
 800b96e:	ec47 6b10 	vmov	d0, r6, r7
 800b972:	b011      	add	sp, #68	; 0x44
 800b974:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b978:	f000 bc68 	b.w	800c24c <__ieee754_sqrt>
 800b97c:	f04f 0b00 	mov.w	fp, #0
 800b980:	ec47 6b10 	vmov	d0, r6, r7
 800b984:	f000 fd12 	bl	800c3ac <fabs>
 800b988:	ec51 0b10 	vmov	r0, r1, d0
 800b98c:	f1ba 0f00 	cmp.w	sl, #0
 800b990:	d127      	bne.n	800b9e2 <__ieee754_pow+0x1b2>
 800b992:	b124      	cbz	r4, 800b99e <__ieee754_pow+0x16e>
 800b994:	4b2c      	ldr	r3, [pc, #176]	; (800ba48 <__ieee754_pow+0x218>)
 800b996:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d121      	bne.n	800b9e2 <__ieee754_pow+0x1b2>
 800b99e:	f1b9 0f00 	cmp.w	r9, #0
 800b9a2:	da05      	bge.n	800b9b0 <__ieee754_pow+0x180>
 800b9a4:	4602      	mov	r2, r0
 800b9a6:	460b      	mov	r3, r1
 800b9a8:	2000      	movs	r0, #0
 800b9aa:	4927      	ldr	r1, [pc, #156]	; (800ba48 <__ieee754_pow+0x218>)
 800b9ac:	f7f4 ff56 	bl	800085c <__aeabi_ddiv>
 800b9b0:	2d00      	cmp	r5, #0
 800b9b2:	da9d      	bge.n	800b8f0 <__ieee754_pow+0xc0>
 800b9b4:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800b9b8:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800b9bc:	ea54 030b 	orrs.w	r3, r4, fp
 800b9c0:	d108      	bne.n	800b9d4 <__ieee754_pow+0x1a4>
 800b9c2:	4602      	mov	r2, r0
 800b9c4:	460b      	mov	r3, r1
 800b9c6:	4610      	mov	r0, r2
 800b9c8:	4619      	mov	r1, r3
 800b9ca:	f7f4 fc65 	bl	8000298 <__aeabi_dsub>
 800b9ce:	4602      	mov	r2, r0
 800b9d0:	460b      	mov	r3, r1
 800b9d2:	e7ac      	b.n	800b92e <__ieee754_pow+0xfe>
 800b9d4:	f1bb 0f01 	cmp.w	fp, #1
 800b9d8:	d18a      	bne.n	800b8f0 <__ieee754_pow+0xc0>
 800b9da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9de:	4619      	mov	r1, r3
 800b9e0:	e786      	b.n	800b8f0 <__ieee754_pow+0xc0>
 800b9e2:	0fed      	lsrs	r5, r5, #31
 800b9e4:	1e6b      	subs	r3, r5, #1
 800b9e6:	930d      	str	r3, [sp, #52]	; 0x34
 800b9e8:	ea5b 0303 	orrs.w	r3, fp, r3
 800b9ec:	d102      	bne.n	800b9f4 <__ieee754_pow+0x1c4>
 800b9ee:	4632      	mov	r2, r6
 800b9f0:	463b      	mov	r3, r7
 800b9f2:	e7e8      	b.n	800b9c6 <__ieee754_pow+0x196>
 800b9f4:	4b16      	ldr	r3, [pc, #88]	; (800ba50 <__ieee754_pow+0x220>)
 800b9f6:	4598      	cmp	r8, r3
 800b9f8:	f340 80fe 	ble.w	800bbf8 <__ieee754_pow+0x3c8>
 800b9fc:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ba00:	4598      	cmp	r8, r3
 800ba02:	dd0a      	ble.n	800ba1a <__ieee754_pow+0x1ea>
 800ba04:	4b0f      	ldr	r3, [pc, #60]	; (800ba44 <__ieee754_pow+0x214>)
 800ba06:	429c      	cmp	r4, r3
 800ba08:	dc0d      	bgt.n	800ba26 <__ieee754_pow+0x1f6>
 800ba0a:	f1b9 0f00 	cmp.w	r9, #0
 800ba0e:	f6bf af6d 	bge.w	800b8ec <__ieee754_pow+0xbc>
 800ba12:	a307      	add	r3, pc, #28	; (adr r3, 800ba30 <__ieee754_pow+0x200>)
 800ba14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba18:	e79f      	b.n	800b95a <__ieee754_pow+0x12a>
 800ba1a:	4b0e      	ldr	r3, [pc, #56]	; (800ba54 <__ieee754_pow+0x224>)
 800ba1c:	429c      	cmp	r4, r3
 800ba1e:	ddf4      	ble.n	800ba0a <__ieee754_pow+0x1da>
 800ba20:	4b09      	ldr	r3, [pc, #36]	; (800ba48 <__ieee754_pow+0x218>)
 800ba22:	429c      	cmp	r4, r3
 800ba24:	dd18      	ble.n	800ba58 <__ieee754_pow+0x228>
 800ba26:	f1b9 0f00 	cmp.w	r9, #0
 800ba2a:	dcf2      	bgt.n	800ba12 <__ieee754_pow+0x1e2>
 800ba2c:	e75e      	b.n	800b8ec <__ieee754_pow+0xbc>
 800ba2e:	bf00      	nop
 800ba30:	8800759c 	.word	0x8800759c
 800ba34:	7e37e43c 	.word	0x7e37e43c
 800ba38:	7ff00000 	.word	0x7ff00000
 800ba3c:	0800d68e 	.word	0x0800d68e
 800ba40:	433fffff 	.word	0x433fffff
 800ba44:	3fefffff 	.word	0x3fefffff
 800ba48:	3ff00000 	.word	0x3ff00000
 800ba4c:	3fe00000 	.word	0x3fe00000
 800ba50:	41e00000 	.word	0x41e00000
 800ba54:	3feffffe 	.word	0x3feffffe
 800ba58:	2200      	movs	r2, #0
 800ba5a:	4b63      	ldr	r3, [pc, #396]	; (800bbe8 <__ieee754_pow+0x3b8>)
 800ba5c:	f7f4 fc1c 	bl	8000298 <__aeabi_dsub>
 800ba60:	a355      	add	r3, pc, #340	; (adr r3, 800bbb8 <__ieee754_pow+0x388>)
 800ba62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba66:	4604      	mov	r4, r0
 800ba68:	460d      	mov	r5, r1
 800ba6a:	f7f4 fdcd 	bl	8000608 <__aeabi_dmul>
 800ba6e:	a354      	add	r3, pc, #336	; (adr r3, 800bbc0 <__ieee754_pow+0x390>)
 800ba70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba74:	4606      	mov	r6, r0
 800ba76:	460f      	mov	r7, r1
 800ba78:	4620      	mov	r0, r4
 800ba7a:	4629      	mov	r1, r5
 800ba7c:	f7f4 fdc4 	bl	8000608 <__aeabi_dmul>
 800ba80:	2200      	movs	r2, #0
 800ba82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba86:	4b59      	ldr	r3, [pc, #356]	; (800bbec <__ieee754_pow+0x3bc>)
 800ba88:	4620      	mov	r0, r4
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	f7f4 fdbc 	bl	8000608 <__aeabi_dmul>
 800ba90:	4602      	mov	r2, r0
 800ba92:	460b      	mov	r3, r1
 800ba94:	a14c      	add	r1, pc, #304	; (adr r1, 800bbc8 <__ieee754_pow+0x398>)
 800ba96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba9a:	f7f4 fbfd 	bl	8000298 <__aeabi_dsub>
 800ba9e:	4622      	mov	r2, r4
 800baa0:	462b      	mov	r3, r5
 800baa2:	f7f4 fdb1 	bl	8000608 <__aeabi_dmul>
 800baa6:	4602      	mov	r2, r0
 800baa8:	460b      	mov	r3, r1
 800baaa:	2000      	movs	r0, #0
 800baac:	4950      	ldr	r1, [pc, #320]	; (800bbf0 <__ieee754_pow+0x3c0>)
 800baae:	f7f4 fbf3 	bl	8000298 <__aeabi_dsub>
 800bab2:	4622      	mov	r2, r4
 800bab4:	462b      	mov	r3, r5
 800bab6:	4680      	mov	r8, r0
 800bab8:	4689      	mov	r9, r1
 800baba:	4620      	mov	r0, r4
 800babc:	4629      	mov	r1, r5
 800babe:	f7f4 fda3 	bl	8000608 <__aeabi_dmul>
 800bac2:	4602      	mov	r2, r0
 800bac4:	460b      	mov	r3, r1
 800bac6:	4640      	mov	r0, r8
 800bac8:	4649      	mov	r1, r9
 800baca:	f7f4 fd9d 	bl	8000608 <__aeabi_dmul>
 800bace:	a340      	add	r3, pc, #256	; (adr r3, 800bbd0 <__ieee754_pow+0x3a0>)
 800bad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bad4:	f7f4 fd98 	bl	8000608 <__aeabi_dmul>
 800bad8:	4602      	mov	r2, r0
 800bada:	460b      	mov	r3, r1
 800badc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bae0:	f7f4 fbda 	bl	8000298 <__aeabi_dsub>
 800bae4:	4602      	mov	r2, r0
 800bae6:	460b      	mov	r3, r1
 800bae8:	4604      	mov	r4, r0
 800baea:	460d      	mov	r5, r1
 800baec:	4630      	mov	r0, r6
 800baee:	4639      	mov	r1, r7
 800baf0:	f7f4 fbd4 	bl	800029c <__adddf3>
 800baf4:	2000      	movs	r0, #0
 800baf6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bafa:	4632      	mov	r2, r6
 800bafc:	463b      	mov	r3, r7
 800bafe:	f7f4 fbcb 	bl	8000298 <__aeabi_dsub>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4620      	mov	r0, r4
 800bb08:	4629      	mov	r1, r5
 800bb0a:	f7f4 fbc5 	bl	8000298 <__aeabi_dsub>
 800bb0e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bb10:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 800bb14:	4313      	orrs	r3, r2
 800bb16:	4606      	mov	r6, r0
 800bb18:	460f      	mov	r7, r1
 800bb1a:	f040 81eb 	bne.w	800bef4 <__ieee754_pow+0x6c4>
 800bb1e:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800bbd8 <__ieee754_pow+0x3a8>
 800bb22:	e9dd 4500 	ldrd	r4, r5, [sp]
 800bb26:	2400      	movs	r4, #0
 800bb28:	4622      	mov	r2, r4
 800bb2a:	462b      	mov	r3, r5
 800bb2c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bb30:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bb34:	f7f4 fbb0 	bl	8000298 <__aeabi_dsub>
 800bb38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bb3c:	f7f4 fd64 	bl	8000608 <__aeabi_dmul>
 800bb40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb44:	4680      	mov	r8, r0
 800bb46:	4689      	mov	r9, r1
 800bb48:	4630      	mov	r0, r6
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	f7f4 fd5c 	bl	8000608 <__aeabi_dmul>
 800bb50:	4602      	mov	r2, r0
 800bb52:	460b      	mov	r3, r1
 800bb54:	4640      	mov	r0, r8
 800bb56:	4649      	mov	r1, r9
 800bb58:	f7f4 fba0 	bl	800029c <__adddf3>
 800bb5c:	4622      	mov	r2, r4
 800bb5e:	462b      	mov	r3, r5
 800bb60:	4680      	mov	r8, r0
 800bb62:	4689      	mov	r9, r1
 800bb64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bb68:	f7f4 fd4e 	bl	8000608 <__aeabi_dmul>
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4604      	mov	r4, r0
 800bb70:	460d      	mov	r5, r1
 800bb72:	4602      	mov	r2, r0
 800bb74:	4649      	mov	r1, r9
 800bb76:	4640      	mov	r0, r8
 800bb78:	e9cd 4500 	strd	r4, r5, [sp]
 800bb7c:	f7f4 fb8e 	bl	800029c <__adddf3>
 800bb80:	4b1c      	ldr	r3, [pc, #112]	; (800bbf4 <__ieee754_pow+0x3c4>)
 800bb82:	4299      	cmp	r1, r3
 800bb84:	4606      	mov	r6, r0
 800bb86:	460f      	mov	r7, r1
 800bb88:	468b      	mov	fp, r1
 800bb8a:	f340 82f7 	ble.w	800c17c <__ieee754_pow+0x94c>
 800bb8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800bb92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800bb96:	4303      	orrs	r3, r0
 800bb98:	f000 81ea 	beq.w	800bf70 <__ieee754_pow+0x740>
 800bb9c:	a310      	add	r3, pc, #64	; (adr r3, 800bbe0 <__ieee754_pow+0x3b0>)
 800bb9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bba6:	f7f4 fd2f 	bl	8000608 <__aeabi_dmul>
 800bbaa:	a30d      	add	r3, pc, #52	; (adr r3, 800bbe0 <__ieee754_pow+0x3b0>)
 800bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb0:	e6d5      	b.n	800b95e <__ieee754_pow+0x12e>
 800bbb2:	bf00      	nop
 800bbb4:	f3af 8000 	nop.w
 800bbb8:	60000000 	.word	0x60000000
 800bbbc:	3ff71547 	.word	0x3ff71547
 800bbc0:	f85ddf44 	.word	0xf85ddf44
 800bbc4:	3e54ae0b 	.word	0x3e54ae0b
 800bbc8:	55555555 	.word	0x55555555
 800bbcc:	3fd55555 	.word	0x3fd55555
 800bbd0:	652b82fe 	.word	0x652b82fe
 800bbd4:	3ff71547 	.word	0x3ff71547
 800bbd8:	00000000 	.word	0x00000000
 800bbdc:	bff00000 	.word	0xbff00000
 800bbe0:	8800759c 	.word	0x8800759c
 800bbe4:	7e37e43c 	.word	0x7e37e43c
 800bbe8:	3ff00000 	.word	0x3ff00000
 800bbec:	3fd00000 	.word	0x3fd00000
 800bbf0:	3fe00000 	.word	0x3fe00000
 800bbf4:	408fffff 	.word	0x408fffff
 800bbf8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800bbfc:	f04f 0200 	mov.w	r2, #0
 800bc00:	da05      	bge.n	800bc0e <__ieee754_pow+0x3de>
 800bc02:	4bd3      	ldr	r3, [pc, #844]	; (800bf50 <__ieee754_pow+0x720>)
 800bc04:	f7f4 fd00 	bl	8000608 <__aeabi_dmul>
 800bc08:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800bc0c:	460c      	mov	r4, r1
 800bc0e:	1523      	asrs	r3, r4, #20
 800bc10:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800bc14:	4413      	add	r3, r2
 800bc16:	9309      	str	r3, [sp, #36]	; 0x24
 800bc18:	4bce      	ldr	r3, [pc, #824]	; (800bf54 <__ieee754_pow+0x724>)
 800bc1a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bc1e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800bc22:	429c      	cmp	r4, r3
 800bc24:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800bc28:	dd08      	ble.n	800bc3c <__ieee754_pow+0x40c>
 800bc2a:	4bcb      	ldr	r3, [pc, #812]	; (800bf58 <__ieee754_pow+0x728>)
 800bc2c:	429c      	cmp	r4, r3
 800bc2e:	f340 815e 	ble.w	800beee <__ieee754_pow+0x6be>
 800bc32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc34:	3301      	adds	r3, #1
 800bc36:	9309      	str	r3, [sp, #36]	; 0x24
 800bc38:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800bc3c:	f04f 0a00 	mov.w	sl, #0
 800bc40:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bc44:	930c      	str	r3, [sp, #48]	; 0x30
 800bc46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc48:	4bc4      	ldr	r3, [pc, #784]	; (800bf5c <__ieee754_pow+0x72c>)
 800bc4a:	4413      	add	r3, r2
 800bc4c:	ed93 7b00 	vldr	d7, [r3]
 800bc50:	4629      	mov	r1, r5
 800bc52:	ec53 2b17 	vmov	r2, r3, d7
 800bc56:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bc5a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bc5e:	f7f4 fb1b 	bl	8000298 <__aeabi_dsub>
 800bc62:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bc66:	4606      	mov	r6, r0
 800bc68:	460f      	mov	r7, r1
 800bc6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc6e:	f7f4 fb15 	bl	800029c <__adddf3>
 800bc72:	4602      	mov	r2, r0
 800bc74:	460b      	mov	r3, r1
 800bc76:	2000      	movs	r0, #0
 800bc78:	49b9      	ldr	r1, [pc, #740]	; (800bf60 <__ieee754_pow+0x730>)
 800bc7a:	f7f4 fdef 	bl	800085c <__aeabi_ddiv>
 800bc7e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	4630      	mov	r0, r6
 800bc88:	4639      	mov	r1, r7
 800bc8a:	f7f4 fcbd 	bl	8000608 <__aeabi_dmul>
 800bc8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bc92:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800bc96:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	9302      	str	r3, [sp, #8]
 800bc9e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bca2:	106d      	asrs	r5, r5, #1
 800bca4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800bca8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800bcac:	2200      	movs	r2, #0
 800bcae:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bcb2:	4640      	mov	r0, r8
 800bcb4:	4649      	mov	r1, r9
 800bcb6:	4614      	mov	r4, r2
 800bcb8:	461d      	mov	r5, r3
 800bcba:	f7f4 fca5 	bl	8000608 <__aeabi_dmul>
 800bcbe:	4602      	mov	r2, r0
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	4639      	mov	r1, r7
 800bcc6:	f7f4 fae7 	bl	8000298 <__aeabi_dsub>
 800bcca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bcce:	4606      	mov	r6, r0
 800bcd0:	460f      	mov	r7, r1
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	f7f4 fadf 	bl	8000298 <__aeabi_dsub>
 800bcda:	4602      	mov	r2, r0
 800bcdc:	460b      	mov	r3, r1
 800bcde:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800bce2:	f7f4 fad9 	bl	8000298 <__aeabi_dsub>
 800bce6:	4642      	mov	r2, r8
 800bce8:	464b      	mov	r3, r9
 800bcea:	f7f4 fc8d 	bl	8000608 <__aeabi_dmul>
 800bcee:	4602      	mov	r2, r0
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	4630      	mov	r0, r6
 800bcf4:	4639      	mov	r1, r7
 800bcf6:	f7f4 facf 	bl	8000298 <__aeabi_dsub>
 800bcfa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800bcfe:	f7f4 fc83 	bl	8000608 <__aeabi_dmul>
 800bd02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bd06:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd0a:	4610      	mov	r0, r2
 800bd0c:	4619      	mov	r1, r3
 800bd0e:	f7f4 fc7b 	bl	8000608 <__aeabi_dmul>
 800bd12:	a37b      	add	r3, pc, #492	; (adr r3, 800bf00 <__ieee754_pow+0x6d0>)
 800bd14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd18:	4604      	mov	r4, r0
 800bd1a:	460d      	mov	r5, r1
 800bd1c:	f7f4 fc74 	bl	8000608 <__aeabi_dmul>
 800bd20:	a379      	add	r3, pc, #484	; (adr r3, 800bf08 <__ieee754_pow+0x6d8>)
 800bd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd26:	f7f4 fab9 	bl	800029c <__adddf3>
 800bd2a:	4622      	mov	r2, r4
 800bd2c:	462b      	mov	r3, r5
 800bd2e:	f7f4 fc6b 	bl	8000608 <__aeabi_dmul>
 800bd32:	a377      	add	r3, pc, #476	; (adr r3, 800bf10 <__ieee754_pow+0x6e0>)
 800bd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd38:	f7f4 fab0 	bl	800029c <__adddf3>
 800bd3c:	4622      	mov	r2, r4
 800bd3e:	462b      	mov	r3, r5
 800bd40:	f7f4 fc62 	bl	8000608 <__aeabi_dmul>
 800bd44:	a374      	add	r3, pc, #464	; (adr r3, 800bf18 <__ieee754_pow+0x6e8>)
 800bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd4a:	f7f4 faa7 	bl	800029c <__adddf3>
 800bd4e:	4622      	mov	r2, r4
 800bd50:	462b      	mov	r3, r5
 800bd52:	f7f4 fc59 	bl	8000608 <__aeabi_dmul>
 800bd56:	a372      	add	r3, pc, #456	; (adr r3, 800bf20 <__ieee754_pow+0x6f0>)
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	f7f4 fa9e 	bl	800029c <__adddf3>
 800bd60:	4622      	mov	r2, r4
 800bd62:	462b      	mov	r3, r5
 800bd64:	f7f4 fc50 	bl	8000608 <__aeabi_dmul>
 800bd68:	a36f      	add	r3, pc, #444	; (adr r3, 800bf28 <__ieee754_pow+0x6f8>)
 800bd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6e:	f7f4 fa95 	bl	800029c <__adddf3>
 800bd72:	4622      	mov	r2, r4
 800bd74:	4606      	mov	r6, r0
 800bd76:	460f      	mov	r7, r1
 800bd78:	462b      	mov	r3, r5
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	f7f4 fc43 	bl	8000608 <__aeabi_dmul>
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	4630      	mov	r0, r6
 800bd88:	4639      	mov	r1, r7
 800bd8a:	f7f4 fc3d 	bl	8000608 <__aeabi_dmul>
 800bd8e:	4642      	mov	r2, r8
 800bd90:	4604      	mov	r4, r0
 800bd92:	460d      	mov	r5, r1
 800bd94:	464b      	mov	r3, r9
 800bd96:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bd9a:	f7f4 fa7f 	bl	800029c <__adddf3>
 800bd9e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bda2:	f7f4 fc31 	bl	8000608 <__aeabi_dmul>
 800bda6:	4622      	mov	r2, r4
 800bda8:	462b      	mov	r3, r5
 800bdaa:	f7f4 fa77 	bl	800029c <__adddf3>
 800bdae:	4642      	mov	r2, r8
 800bdb0:	4606      	mov	r6, r0
 800bdb2:	460f      	mov	r7, r1
 800bdb4:	464b      	mov	r3, r9
 800bdb6:	4640      	mov	r0, r8
 800bdb8:	4649      	mov	r1, r9
 800bdba:	f7f4 fc25 	bl	8000608 <__aeabi_dmul>
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	4b68      	ldr	r3, [pc, #416]	; (800bf64 <__ieee754_pow+0x734>)
 800bdc2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800bdc6:	f7f4 fa69 	bl	800029c <__adddf3>
 800bdca:	4632      	mov	r2, r6
 800bdcc:	463b      	mov	r3, r7
 800bdce:	f7f4 fa65 	bl	800029c <__adddf3>
 800bdd2:	9802      	ldr	r0, [sp, #8]
 800bdd4:	460d      	mov	r5, r1
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	4602      	mov	r2, r0
 800bdda:	460b      	mov	r3, r1
 800bddc:	4640      	mov	r0, r8
 800bdde:	4649      	mov	r1, r9
 800bde0:	f7f4 fc12 	bl	8000608 <__aeabi_dmul>
 800bde4:	2200      	movs	r2, #0
 800bde6:	4680      	mov	r8, r0
 800bde8:	4689      	mov	r9, r1
 800bdea:	4b5e      	ldr	r3, [pc, #376]	; (800bf64 <__ieee754_pow+0x734>)
 800bdec:	4620      	mov	r0, r4
 800bdee:	4629      	mov	r1, r5
 800bdf0:	f7f4 fa52 	bl	8000298 <__aeabi_dsub>
 800bdf4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bdf8:	f7f4 fa4e 	bl	8000298 <__aeabi_dsub>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4630      	mov	r0, r6
 800be02:	4639      	mov	r1, r7
 800be04:	f7f4 fa48 	bl	8000298 <__aeabi_dsub>
 800be08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be0c:	f7f4 fbfc 	bl	8000608 <__aeabi_dmul>
 800be10:	4622      	mov	r2, r4
 800be12:	4606      	mov	r6, r0
 800be14:	460f      	mov	r7, r1
 800be16:	462b      	mov	r3, r5
 800be18:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be1c:	f7f4 fbf4 	bl	8000608 <__aeabi_dmul>
 800be20:	4602      	mov	r2, r0
 800be22:	460b      	mov	r3, r1
 800be24:	4630      	mov	r0, r6
 800be26:	4639      	mov	r1, r7
 800be28:	f7f4 fa38 	bl	800029c <__adddf3>
 800be2c:	4606      	mov	r6, r0
 800be2e:	460f      	mov	r7, r1
 800be30:	4602      	mov	r2, r0
 800be32:	460b      	mov	r3, r1
 800be34:	4640      	mov	r0, r8
 800be36:	4649      	mov	r1, r9
 800be38:	f7f4 fa30 	bl	800029c <__adddf3>
 800be3c:	9802      	ldr	r0, [sp, #8]
 800be3e:	a33c      	add	r3, pc, #240	; (adr r3, 800bf30 <__ieee754_pow+0x700>)
 800be40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be44:	4604      	mov	r4, r0
 800be46:	460d      	mov	r5, r1
 800be48:	f7f4 fbde 	bl	8000608 <__aeabi_dmul>
 800be4c:	4642      	mov	r2, r8
 800be4e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be52:	464b      	mov	r3, r9
 800be54:	4620      	mov	r0, r4
 800be56:	4629      	mov	r1, r5
 800be58:	f7f4 fa1e 	bl	8000298 <__aeabi_dsub>
 800be5c:	4602      	mov	r2, r0
 800be5e:	460b      	mov	r3, r1
 800be60:	4630      	mov	r0, r6
 800be62:	4639      	mov	r1, r7
 800be64:	f7f4 fa18 	bl	8000298 <__aeabi_dsub>
 800be68:	a333      	add	r3, pc, #204	; (adr r3, 800bf38 <__ieee754_pow+0x708>)
 800be6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be6e:	f7f4 fbcb 	bl	8000608 <__aeabi_dmul>
 800be72:	a333      	add	r3, pc, #204	; (adr r3, 800bf40 <__ieee754_pow+0x710>)
 800be74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be78:	4606      	mov	r6, r0
 800be7a:	460f      	mov	r7, r1
 800be7c:	4620      	mov	r0, r4
 800be7e:	4629      	mov	r1, r5
 800be80:	f7f4 fbc2 	bl	8000608 <__aeabi_dmul>
 800be84:	4602      	mov	r2, r0
 800be86:	460b      	mov	r3, r1
 800be88:	4630      	mov	r0, r6
 800be8a:	4639      	mov	r1, r7
 800be8c:	f7f4 fa06 	bl	800029c <__adddf3>
 800be90:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be92:	4b35      	ldr	r3, [pc, #212]	; (800bf68 <__ieee754_pow+0x738>)
 800be94:	4413      	add	r3, r2
 800be96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be9a:	f7f4 f9ff 	bl	800029c <__adddf3>
 800be9e:	4604      	mov	r4, r0
 800bea0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bea2:	460d      	mov	r5, r1
 800bea4:	f7f4 fb46 	bl	8000534 <__aeabi_i2d>
 800bea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800beaa:	4b30      	ldr	r3, [pc, #192]	; (800bf6c <__ieee754_pow+0x73c>)
 800beac:	4413      	add	r3, r2
 800beae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800beb2:	4606      	mov	r6, r0
 800beb4:	460f      	mov	r7, r1
 800beb6:	4622      	mov	r2, r4
 800beb8:	462b      	mov	r3, r5
 800beba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bebe:	f7f4 f9ed 	bl	800029c <__adddf3>
 800bec2:	4642      	mov	r2, r8
 800bec4:	464b      	mov	r3, r9
 800bec6:	f7f4 f9e9 	bl	800029c <__adddf3>
 800beca:	4632      	mov	r2, r6
 800becc:	463b      	mov	r3, r7
 800bece:	f7f4 f9e5 	bl	800029c <__adddf3>
 800bed2:	9802      	ldr	r0, [sp, #8]
 800bed4:	4632      	mov	r2, r6
 800bed6:	463b      	mov	r3, r7
 800bed8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bedc:	f7f4 f9dc 	bl	8000298 <__aeabi_dsub>
 800bee0:	4642      	mov	r2, r8
 800bee2:	464b      	mov	r3, r9
 800bee4:	f7f4 f9d8 	bl	8000298 <__aeabi_dsub>
 800bee8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800beec:	e607      	b.n	800bafe <__ieee754_pow+0x2ce>
 800beee:	f04f 0a01 	mov.w	sl, #1
 800bef2:	e6a5      	b.n	800bc40 <__ieee754_pow+0x410>
 800bef4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 800bf48 <__ieee754_pow+0x718>
 800bef8:	e613      	b.n	800bb22 <__ieee754_pow+0x2f2>
 800befa:	bf00      	nop
 800befc:	f3af 8000 	nop.w
 800bf00:	4a454eef 	.word	0x4a454eef
 800bf04:	3fca7e28 	.word	0x3fca7e28
 800bf08:	93c9db65 	.word	0x93c9db65
 800bf0c:	3fcd864a 	.word	0x3fcd864a
 800bf10:	a91d4101 	.word	0xa91d4101
 800bf14:	3fd17460 	.word	0x3fd17460
 800bf18:	518f264d 	.word	0x518f264d
 800bf1c:	3fd55555 	.word	0x3fd55555
 800bf20:	db6fabff 	.word	0xdb6fabff
 800bf24:	3fdb6db6 	.word	0x3fdb6db6
 800bf28:	33333303 	.word	0x33333303
 800bf2c:	3fe33333 	.word	0x3fe33333
 800bf30:	e0000000 	.word	0xe0000000
 800bf34:	3feec709 	.word	0x3feec709
 800bf38:	dc3a03fd 	.word	0xdc3a03fd
 800bf3c:	3feec709 	.word	0x3feec709
 800bf40:	145b01f5 	.word	0x145b01f5
 800bf44:	be3e2fe0 	.word	0xbe3e2fe0
 800bf48:	00000000 	.word	0x00000000
 800bf4c:	3ff00000 	.word	0x3ff00000
 800bf50:	43400000 	.word	0x43400000
 800bf54:	0003988e 	.word	0x0003988e
 800bf58:	000bb679 	.word	0x000bb679
 800bf5c:	0800d898 	.word	0x0800d898
 800bf60:	3ff00000 	.word	0x3ff00000
 800bf64:	40080000 	.word	0x40080000
 800bf68:	0800d8b8 	.word	0x0800d8b8
 800bf6c:	0800d8a8 	.word	0x0800d8a8
 800bf70:	a3b4      	add	r3, pc, #720	; (adr r3, 800c244 <__ieee754_pow+0xa14>)
 800bf72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf76:	4640      	mov	r0, r8
 800bf78:	4649      	mov	r1, r9
 800bf7a:	f7f4 f98f 	bl	800029c <__adddf3>
 800bf7e:	4622      	mov	r2, r4
 800bf80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf84:	462b      	mov	r3, r5
 800bf86:	4630      	mov	r0, r6
 800bf88:	4639      	mov	r1, r7
 800bf8a:	f7f4 f985 	bl	8000298 <__aeabi_dsub>
 800bf8e:	4602      	mov	r2, r0
 800bf90:	460b      	mov	r3, r1
 800bf92:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf96:	f7f4 fdc7 	bl	8000b28 <__aeabi_dcmpgt>
 800bf9a:	2800      	cmp	r0, #0
 800bf9c:	f47f adfe 	bne.w	800bb9c <__ieee754_pow+0x36c>
 800bfa0:	4aa3      	ldr	r2, [pc, #652]	; (800c230 <__ieee754_pow+0xa00>)
 800bfa2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bfa6:	4293      	cmp	r3, r2
 800bfa8:	f340 810a 	ble.w	800c1c0 <__ieee754_pow+0x990>
 800bfac:	151b      	asrs	r3, r3, #20
 800bfae:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800bfb2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800bfb6:	fa4a f303 	asr.w	r3, sl, r3
 800bfba:	445b      	add	r3, fp
 800bfbc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bfc0:	4e9c      	ldr	r6, [pc, #624]	; (800c234 <__ieee754_pow+0xa04>)
 800bfc2:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800bfc6:	4116      	asrs	r6, r2
 800bfc8:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800bfcc:	2000      	movs	r0, #0
 800bfce:	ea23 0106 	bic.w	r1, r3, r6
 800bfd2:	f1c2 0214 	rsb	r2, r2, #20
 800bfd6:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800bfda:	fa4a fa02 	asr.w	sl, sl, r2
 800bfde:	f1bb 0f00 	cmp.w	fp, #0
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	4629      	mov	r1, r5
 800bfea:	bfb8      	it	lt
 800bfec:	f1ca 0a00 	rsblt	sl, sl, #0
 800bff0:	f7f4 f952 	bl	8000298 <__aeabi_dsub>
 800bff4:	e9cd 0100 	strd	r0, r1, [sp]
 800bff8:	4642      	mov	r2, r8
 800bffa:	464b      	mov	r3, r9
 800bffc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c000:	f7f4 f94c 	bl	800029c <__adddf3>
 800c004:	2000      	movs	r0, #0
 800c006:	a378      	add	r3, pc, #480	; (adr r3, 800c1e8 <__ieee754_pow+0x9b8>)
 800c008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c00c:	4604      	mov	r4, r0
 800c00e:	460d      	mov	r5, r1
 800c010:	f7f4 fafa 	bl	8000608 <__aeabi_dmul>
 800c014:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c018:	4606      	mov	r6, r0
 800c01a:	460f      	mov	r7, r1
 800c01c:	4620      	mov	r0, r4
 800c01e:	4629      	mov	r1, r5
 800c020:	f7f4 f93a 	bl	8000298 <__aeabi_dsub>
 800c024:	4602      	mov	r2, r0
 800c026:	460b      	mov	r3, r1
 800c028:	4640      	mov	r0, r8
 800c02a:	4649      	mov	r1, r9
 800c02c:	f7f4 f934 	bl	8000298 <__aeabi_dsub>
 800c030:	a36f      	add	r3, pc, #444	; (adr r3, 800c1f0 <__ieee754_pow+0x9c0>)
 800c032:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c036:	f7f4 fae7 	bl	8000608 <__aeabi_dmul>
 800c03a:	a36f      	add	r3, pc, #444	; (adr r3, 800c1f8 <__ieee754_pow+0x9c8>)
 800c03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c040:	4680      	mov	r8, r0
 800c042:	4689      	mov	r9, r1
 800c044:	4620      	mov	r0, r4
 800c046:	4629      	mov	r1, r5
 800c048:	f7f4 fade 	bl	8000608 <__aeabi_dmul>
 800c04c:	4602      	mov	r2, r0
 800c04e:	460b      	mov	r3, r1
 800c050:	4640      	mov	r0, r8
 800c052:	4649      	mov	r1, r9
 800c054:	f7f4 f922 	bl	800029c <__adddf3>
 800c058:	4604      	mov	r4, r0
 800c05a:	460d      	mov	r5, r1
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4630      	mov	r0, r6
 800c062:	4639      	mov	r1, r7
 800c064:	f7f4 f91a 	bl	800029c <__adddf3>
 800c068:	4632      	mov	r2, r6
 800c06a:	463b      	mov	r3, r7
 800c06c:	4680      	mov	r8, r0
 800c06e:	4689      	mov	r9, r1
 800c070:	f7f4 f912 	bl	8000298 <__aeabi_dsub>
 800c074:	4602      	mov	r2, r0
 800c076:	460b      	mov	r3, r1
 800c078:	4620      	mov	r0, r4
 800c07a:	4629      	mov	r1, r5
 800c07c:	f7f4 f90c 	bl	8000298 <__aeabi_dsub>
 800c080:	4642      	mov	r2, r8
 800c082:	4606      	mov	r6, r0
 800c084:	460f      	mov	r7, r1
 800c086:	464b      	mov	r3, r9
 800c088:	4640      	mov	r0, r8
 800c08a:	4649      	mov	r1, r9
 800c08c:	f7f4 fabc 	bl	8000608 <__aeabi_dmul>
 800c090:	a35b      	add	r3, pc, #364	; (adr r3, 800c200 <__ieee754_pow+0x9d0>)
 800c092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c096:	4604      	mov	r4, r0
 800c098:	460d      	mov	r5, r1
 800c09a:	f7f4 fab5 	bl	8000608 <__aeabi_dmul>
 800c09e:	a35a      	add	r3, pc, #360	; (adr r3, 800c208 <__ieee754_pow+0x9d8>)
 800c0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0a4:	f7f4 f8f8 	bl	8000298 <__aeabi_dsub>
 800c0a8:	4622      	mov	r2, r4
 800c0aa:	462b      	mov	r3, r5
 800c0ac:	f7f4 faac 	bl	8000608 <__aeabi_dmul>
 800c0b0:	a357      	add	r3, pc, #348	; (adr r3, 800c210 <__ieee754_pow+0x9e0>)
 800c0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0b6:	f7f4 f8f1 	bl	800029c <__adddf3>
 800c0ba:	4622      	mov	r2, r4
 800c0bc:	462b      	mov	r3, r5
 800c0be:	f7f4 faa3 	bl	8000608 <__aeabi_dmul>
 800c0c2:	a355      	add	r3, pc, #340	; (adr r3, 800c218 <__ieee754_pow+0x9e8>)
 800c0c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c8:	f7f4 f8e6 	bl	8000298 <__aeabi_dsub>
 800c0cc:	4622      	mov	r2, r4
 800c0ce:	462b      	mov	r3, r5
 800c0d0:	f7f4 fa9a 	bl	8000608 <__aeabi_dmul>
 800c0d4:	a352      	add	r3, pc, #328	; (adr r3, 800c220 <__ieee754_pow+0x9f0>)
 800c0d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0da:	f7f4 f8df 	bl	800029c <__adddf3>
 800c0de:	4622      	mov	r2, r4
 800c0e0:	462b      	mov	r3, r5
 800c0e2:	f7f4 fa91 	bl	8000608 <__aeabi_dmul>
 800c0e6:	4602      	mov	r2, r0
 800c0e8:	460b      	mov	r3, r1
 800c0ea:	4640      	mov	r0, r8
 800c0ec:	4649      	mov	r1, r9
 800c0ee:	f7f4 f8d3 	bl	8000298 <__aeabi_dsub>
 800c0f2:	4604      	mov	r4, r0
 800c0f4:	460d      	mov	r5, r1
 800c0f6:	4602      	mov	r2, r0
 800c0f8:	460b      	mov	r3, r1
 800c0fa:	4640      	mov	r0, r8
 800c0fc:	4649      	mov	r1, r9
 800c0fe:	f7f4 fa83 	bl	8000608 <__aeabi_dmul>
 800c102:	2200      	movs	r2, #0
 800c104:	e9cd 0100 	strd	r0, r1, [sp]
 800c108:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c10c:	4620      	mov	r0, r4
 800c10e:	4629      	mov	r1, r5
 800c110:	f7f4 f8c2 	bl	8000298 <__aeabi_dsub>
 800c114:	4602      	mov	r2, r0
 800c116:	460b      	mov	r3, r1
 800c118:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c11c:	f7f4 fb9e 	bl	800085c <__aeabi_ddiv>
 800c120:	4632      	mov	r2, r6
 800c122:	4604      	mov	r4, r0
 800c124:	460d      	mov	r5, r1
 800c126:	463b      	mov	r3, r7
 800c128:	4640      	mov	r0, r8
 800c12a:	4649      	mov	r1, r9
 800c12c:	f7f4 fa6c 	bl	8000608 <__aeabi_dmul>
 800c130:	4632      	mov	r2, r6
 800c132:	463b      	mov	r3, r7
 800c134:	f7f4 f8b2 	bl	800029c <__adddf3>
 800c138:	4602      	mov	r2, r0
 800c13a:	460b      	mov	r3, r1
 800c13c:	4620      	mov	r0, r4
 800c13e:	4629      	mov	r1, r5
 800c140:	f7f4 f8aa 	bl	8000298 <__aeabi_dsub>
 800c144:	4642      	mov	r2, r8
 800c146:	464b      	mov	r3, r9
 800c148:	f7f4 f8a6 	bl	8000298 <__aeabi_dsub>
 800c14c:	4602      	mov	r2, r0
 800c14e:	460b      	mov	r3, r1
 800c150:	2000      	movs	r0, #0
 800c152:	4939      	ldr	r1, [pc, #228]	; (800c238 <__ieee754_pow+0xa08>)
 800c154:	f7f4 f8a0 	bl	8000298 <__aeabi_dsub>
 800c158:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800c15c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 800c160:	4602      	mov	r2, r0
 800c162:	460b      	mov	r3, r1
 800c164:	da2f      	bge.n	800c1c6 <__ieee754_pow+0x996>
 800c166:	4650      	mov	r0, sl
 800c168:	ec43 2b10 	vmov	d0, r2, r3
 800c16c:	f000 f9c0 	bl	800c4f0 <scalbn>
 800c170:	ec51 0b10 	vmov	r0, r1, d0
 800c174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c178:	f7ff bbf1 	b.w	800b95e <__ieee754_pow+0x12e>
 800c17c:	4b2f      	ldr	r3, [pc, #188]	; (800c23c <__ieee754_pow+0xa0c>)
 800c17e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800c182:	429e      	cmp	r6, r3
 800c184:	f77f af0c 	ble.w	800bfa0 <__ieee754_pow+0x770>
 800c188:	4b2d      	ldr	r3, [pc, #180]	; (800c240 <__ieee754_pow+0xa10>)
 800c18a:	440b      	add	r3, r1
 800c18c:	4303      	orrs	r3, r0
 800c18e:	d00b      	beq.n	800c1a8 <__ieee754_pow+0x978>
 800c190:	a325      	add	r3, pc, #148	; (adr r3, 800c228 <__ieee754_pow+0x9f8>)
 800c192:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c196:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c19a:	f7f4 fa35 	bl	8000608 <__aeabi_dmul>
 800c19e:	a322      	add	r3, pc, #136	; (adr r3, 800c228 <__ieee754_pow+0x9f8>)
 800c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1a4:	f7ff bbdb 	b.w	800b95e <__ieee754_pow+0x12e>
 800c1a8:	4622      	mov	r2, r4
 800c1aa:	462b      	mov	r3, r5
 800c1ac:	f7f4 f874 	bl	8000298 <__aeabi_dsub>
 800c1b0:	4642      	mov	r2, r8
 800c1b2:	464b      	mov	r3, r9
 800c1b4:	f7f4 fcae 	bl	8000b14 <__aeabi_dcmpge>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	f43f aef1 	beq.w	800bfa0 <__ieee754_pow+0x770>
 800c1be:	e7e7      	b.n	800c190 <__ieee754_pow+0x960>
 800c1c0:	f04f 0a00 	mov.w	sl, #0
 800c1c4:	e718      	b.n	800bff8 <__ieee754_pow+0x7c8>
 800c1c6:	4621      	mov	r1, r4
 800c1c8:	e7d4      	b.n	800c174 <__ieee754_pow+0x944>
 800c1ca:	2000      	movs	r0, #0
 800c1cc:	491a      	ldr	r1, [pc, #104]	; (800c238 <__ieee754_pow+0xa08>)
 800c1ce:	f7ff bb8f 	b.w	800b8f0 <__ieee754_pow+0xc0>
 800c1d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c1d6:	f7ff bb8b 	b.w	800b8f0 <__ieee754_pow+0xc0>
 800c1da:	4630      	mov	r0, r6
 800c1dc:	4639      	mov	r1, r7
 800c1de:	f7ff bb87 	b.w	800b8f0 <__ieee754_pow+0xc0>
 800c1e2:	4693      	mov	fp, r2
 800c1e4:	f7ff bb98 	b.w	800b918 <__ieee754_pow+0xe8>
 800c1e8:	00000000 	.word	0x00000000
 800c1ec:	3fe62e43 	.word	0x3fe62e43
 800c1f0:	fefa39ef 	.word	0xfefa39ef
 800c1f4:	3fe62e42 	.word	0x3fe62e42
 800c1f8:	0ca86c39 	.word	0x0ca86c39
 800c1fc:	be205c61 	.word	0xbe205c61
 800c200:	72bea4d0 	.word	0x72bea4d0
 800c204:	3e663769 	.word	0x3e663769
 800c208:	c5d26bf1 	.word	0xc5d26bf1
 800c20c:	3ebbbd41 	.word	0x3ebbbd41
 800c210:	af25de2c 	.word	0xaf25de2c
 800c214:	3f11566a 	.word	0x3f11566a
 800c218:	16bebd93 	.word	0x16bebd93
 800c21c:	3f66c16c 	.word	0x3f66c16c
 800c220:	5555553e 	.word	0x5555553e
 800c224:	3fc55555 	.word	0x3fc55555
 800c228:	c2f8f359 	.word	0xc2f8f359
 800c22c:	01a56e1f 	.word	0x01a56e1f
 800c230:	3fe00000 	.word	0x3fe00000
 800c234:	000fffff 	.word	0x000fffff
 800c238:	3ff00000 	.word	0x3ff00000
 800c23c:	4090cbff 	.word	0x4090cbff
 800c240:	3f6f3400 	.word	0x3f6f3400
 800c244:	652b82fe 	.word	0x652b82fe
 800c248:	3c971547 	.word	0x3c971547

0800c24c <__ieee754_sqrt>:
 800c24c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c250:	4955      	ldr	r1, [pc, #340]	; (800c3a8 <__ieee754_sqrt+0x15c>)
 800c252:	ec55 4b10 	vmov	r4, r5, d0
 800c256:	43a9      	bics	r1, r5
 800c258:	462b      	mov	r3, r5
 800c25a:	462a      	mov	r2, r5
 800c25c:	d112      	bne.n	800c284 <__ieee754_sqrt+0x38>
 800c25e:	ee10 2a10 	vmov	r2, s0
 800c262:	ee10 0a10 	vmov	r0, s0
 800c266:	4629      	mov	r1, r5
 800c268:	f7f4 f9ce 	bl	8000608 <__aeabi_dmul>
 800c26c:	4602      	mov	r2, r0
 800c26e:	460b      	mov	r3, r1
 800c270:	4620      	mov	r0, r4
 800c272:	4629      	mov	r1, r5
 800c274:	f7f4 f812 	bl	800029c <__adddf3>
 800c278:	4604      	mov	r4, r0
 800c27a:	460d      	mov	r5, r1
 800c27c:	ec45 4b10 	vmov	d0, r4, r5
 800c280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c284:	2d00      	cmp	r5, #0
 800c286:	ee10 0a10 	vmov	r0, s0
 800c28a:	4621      	mov	r1, r4
 800c28c:	dc0f      	bgt.n	800c2ae <__ieee754_sqrt+0x62>
 800c28e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800c292:	4330      	orrs	r0, r6
 800c294:	d0f2      	beq.n	800c27c <__ieee754_sqrt+0x30>
 800c296:	b155      	cbz	r5, 800c2ae <__ieee754_sqrt+0x62>
 800c298:	ee10 2a10 	vmov	r2, s0
 800c29c:	4620      	mov	r0, r4
 800c29e:	4629      	mov	r1, r5
 800c2a0:	f7f3 fffa 	bl	8000298 <__aeabi_dsub>
 800c2a4:	4602      	mov	r2, r0
 800c2a6:	460b      	mov	r3, r1
 800c2a8:	f7f4 fad8 	bl	800085c <__aeabi_ddiv>
 800c2ac:	e7e4      	b.n	800c278 <__ieee754_sqrt+0x2c>
 800c2ae:	151b      	asrs	r3, r3, #20
 800c2b0:	d073      	beq.n	800c39a <__ieee754_sqrt+0x14e>
 800c2b2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c2b6:	07dd      	lsls	r5, r3, #31
 800c2b8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800c2bc:	bf48      	it	mi
 800c2be:	0fc8      	lsrmi	r0, r1, #31
 800c2c0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800c2c4:	bf44      	itt	mi
 800c2c6:	0049      	lslmi	r1, r1, #1
 800c2c8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800c2cc:	2500      	movs	r5, #0
 800c2ce:	1058      	asrs	r0, r3, #1
 800c2d0:	0fcb      	lsrs	r3, r1, #31
 800c2d2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800c2d6:	0049      	lsls	r1, r1, #1
 800c2d8:	2316      	movs	r3, #22
 800c2da:	462c      	mov	r4, r5
 800c2dc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800c2e0:	19a7      	adds	r7, r4, r6
 800c2e2:	4297      	cmp	r7, r2
 800c2e4:	bfde      	ittt	le
 800c2e6:	19bc      	addle	r4, r7, r6
 800c2e8:	1bd2      	suble	r2, r2, r7
 800c2ea:	19ad      	addle	r5, r5, r6
 800c2ec:	0fcf      	lsrs	r7, r1, #31
 800c2ee:	3b01      	subs	r3, #1
 800c2f0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800c2f4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c2f8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c2fc:	d1f0      	bne.n	800c2e0 <__ieee754_sqrt+0x94>
 800c2fe:	f04f 0c20 	mov.w	ip, #32
 800c302:	469e      	mov	lr, r3
 800c304:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800c308:	42a2      	cmp	r2, r4
 800c30a:	eb06 070e 	add.w	r7, r6, lr
 800c30e:	dc02      	bgt.n	800c316 <__ieee754_sqrt+0xca>
 800c310:	d112      	bne.n	800c338 <__ieee754_sqrt+0xec>
 800c312:	428f      	cmp	r7, r1
 800c314:	d810      	bhi.n	800c338 <__ieee754_sqrt+0xec>
 800c316:	2f00      	cmp	r7, #0
 800c318:	eb07 0e06 	add.w	lr, r7, r6
 800c31c:	da42      	bge.n	800c3a4 <__ieee754_sqrt+0x158>
 800c31e:	f1be 0f00 	cmp.w	lr, #0
 800c322:	db3f      	blt.n	800c3a4 <__ieee754_sqrt+0x158>
 800c324:	f104 0801 	add.w	r8, r4, #1
 800c328:	1b12      	subs	r2, r2, r4
 800c32a:	428f      	cmp	r7, r1
 800c32c:	bf88      	it	hi
 800c32e:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 800c332:	1bc9      	subs	r1, r1, r7
 800c334:	4433      	add	r3, r6
 800c336:	4644      	mov	r4, r8
 800c338:	0052      	lsls	r2, r2, #1
 800c33a:	f1bc 0c01 	subs.w	ip, ip, #1
 800c33e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800c342:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800c346:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800c34a:	d1dd      	bne.n	800c308 <__ieee754_sqrt+0xbc>
 800c34c:	430a      	orrs	r2, r1
 800c34e:	d006      	beq.n	800c35e <__ieee754_sqrt+0x112>
 800c350:	1c5c      	adds	r4, r3, #1
 800c352:	bf13      	iteet	ne
 800c354:	3301      	addne	r3, #1
 800c356:	3501      	addeq	r5, #1
 800c358:	4663      	moveq	r3, ip
 800c35a:	f023 0301 	bicne.w	r3, r3, #1
 800c35e:	106a      	asrs	r2, r5, #1
 800c360:	085b      	lsrs	r3, r3, #1
 800c362:	07e9      	lsls	r1, r5, #31
 800c364:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800c368:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800c36c:	bf48      	it	mi
 800c36e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800c372:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800c376:	461c      	mov	r4, r3
 800c378:	e780      	b.n	800c27c <__ieee754_sqrt+0x30>
 800c37a:	0aca      	lsrs	r2, r1, #11
 800c37c:	3815      	subs	r0, #21
 800c37e:	0549      	lsls	r1, r1, #21
 800c380:	2a00      	cmp	r2, #0
 800c382:	d0fa      	beq.n	800c37a <__ieee754_sqrt+0x12e>
 800c384:	02d6      	lsls	r6, r2, #11
 800c386:	d50a      	bpl.n	800c39e <__ieee754_sqrt+0x152>
 800c388:	f1c3 0420 	rsb	r4, r3, #32
 800c38c:	fa21 f404 	lsr.w	r4, r1, r4
 800c390:	1e5d      	subs	r5, r3, #1
 800c392:	4099      	lsls	r1, r3
 800c394:	4322      	orrs	r2, r4
 800c396:	1b43      	subs	r3, r0, r5
 800c398:	e78b      	b.n	800c2b2 <__ieee754_sqrt+0x66>
 800c39a:	4618      	mov	r0, r3
 800c39c:	e7f0      	b.n	800c380 <__ieee754_sqrt+0x134>
 800c39e:	0052      	lsls	r2, r2, #1
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	e7ef      	b.n	800c384 <__ieee754_sqrt+0x138>
 800c3a4:	46a0      	mov	r8, r4
 800c3a6:	e7bf      	b.n	800c328 <__ieee754_sqrt+0xdc>
 800c3a8:	7ff00000 	.word	0x7ff00000

0800c3ac <fabs>:
 800c3ac:	ec51 0b10 	vmov	r0, r1, d0
 800c3b0:	ee10 2a10 	vmov	r2, s0
 800c3b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c3b8:	ec43 2b10 	vmov	d0, r2, r3
 800c3bc:	4770      	bx	lr

0800c3be <finite>:
 800c3be:	ee10 3a90 	vmov	r3, s1
 800c3c2:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800c3c6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c3ca:	0fc0      	lsrs	r0, r0, #31
 800c3cc:	4770      	bx	lr

0800c3ce <matherr>:
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	4770      	bx	lr
 800c3d2:	0000      	movs	r0, r0
 800c3d4:	0000      	movs	r0, r0
	...

0800c3d8 <nan>:
 800c3d8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c3e0 <nan+0x8>
 800c3dc:	4770      	bx	lr
 800c3de:	bf00      	nop
 800c3e0:	00000000 	.word	0x00000000
 800c3e4:	7ff80000 	.word	0x7ff80000

0800c3e8 <rint>:
 800c3e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c3ea:	ec51 0b10 	vmov	r0, r1, d0
 800c3ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c3f2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800c3f6:	2e13      	cmp	r6, #19
 800c3f8:	460b      	mov	r3, r1
 800c3fa:	ee10 4a10 	vmov	r4, s0
 800c3fe:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800c402:	dc56      	bgt.n	800c4b2 <rint+0xca>
 800c404:	2e00      	cmp	r6, #0
 800c406:	da2b      	bge.n	800c460 <rint+0x78>
 800c408:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800c40c:	4302      	orrs	r2, r0
 800c40e:	d023      	beq.n	800c458 <rint+0x70>
 800c410:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800c414:	4302      	orrs	r2, r0
 800c416:	4254      	negs	r4, r2
 800c418:	4314      	orrs	r4, r2
 800c41a:	0c4b      	lsrs	r3, r1, #17
 800c41c:	0b24      	lsrs	r4, r4, #12
 800c41e:	045b      	lsls	r3, r3, #17
 800c420:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800c424:	ea44 0103 	orr.w	r1, r4, r3
 800c428:	460b      	mov	r3, r1
 800c42a:	492f      	ldr	r1, [pc, #188]	; (800c4e8 <rint+0x100>)
 800c42c:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 800c430:	e9d1 6700 	ldrd	r6, r7, [r1]
 800c434:	4602      	mov	r2, r0
 800c436:	4639      	mov	r1, r7
 800c438:	4630      	mov	r0, r6
 800c43a:	f7f3 ff2f 	bl	800029c <__adddf3>
 800c43e:	e9cd 0100 	strd	r0, r1, [sp]
 800c442:	463b      	mov	r3, r7
 800c444:	4632      	mov	r2, r6
 800c446:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c44a:	f7f3 ff25 	bl	8000298 <__aeabi_dsub>
 800c44e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c452:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800c456:	4639      	mov	r1, r7
 800c458:	ec41 0b10 	vmov	d0, r0, r1
 800c45c:	b003      	add	sp, #12
 800c45e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c460:	4a22      	ldr	r2, [pc, #136]	; (800c4ec <rint+0x104>)
 800c462:	4132      	asrs	r2, r6
 800c464:	ea01 0702 	and.w	r7, r1, r2
 800c468:	4307      	orrs	r7, r0
 800c46a:	d0f5      	beq.n	800c458 <rint+0x70>
 800c46c:	0852      	lsrs	r2, r2, #1
 800c46e:	4011      	ands	r1, r2
 800c470:	430c      	orrs	r4, r1
 800c472:	d00b      	beq.n	800c48c <rint+0xa4>
 800c474:	ea23 0202 	bic.w	r2, r3, r2
 800c478:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800c47c:	2e13      	cmp	r6, #19
 800c47e:	fa43 f306 	asr.w	r3, r3, r6
 800c482:	bf0c      	ite	eq
 800c484:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800c488:	2400      	movne	r4, #0
 800c48a:	4313      	orrs	r3, r2
 800c48c:	4916      	ldr	r1, [pc, #88]	; (800c4e8 <rint+0x100>)
 800c48e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800c492:	4622      	mov	r2, r4
 800c494:	e9d5 4500 	ldrd	r4, r5, [r5]
 800c498:	4620      	mov	r0, r4
 800c49a:	4629      	mov	r1, r5
 800c49c:	f7f3 fefe 	bl	800029c <__adddf3>
 800c4a0:	e9cd 0100 	strd	r0, r1, [sp]
 800c4a4:	4622      	mov	r2, r4
 800c4a6:	462b      	mov	r3, r5
 800c4a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c4ac:	f7f3 fef4 	bl	8000298 <__aeabi_dsub>
 800c4b0:	e7d2      	b.n	800c458 <rint+0x70>
 800c4b2:	2e33      	cmp	r6, #51	; 0x33
 800c4b4:	dd07      	ble.n	800c4c6 <rint+0xde>
 800c4b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c4ba:	d1cd      	bne.n	800c458 <rint+0x70>
 800c4bc:	ee10 2a10 	vmov	r2, s0
 800c4c0:	f7f3 feec 	bl	800029c <__adddf3>
 800c4c4:	e7c8      	b.n	800c458 <rint+0x70>
 800c4c6:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800c4ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c4ce:	40f2      	lsrs	r2, r6
 800c4d0:	4210      	tst	r0, r2
 800c4d2:	d0c1      	beq.n	800c458 <rint+0x70>
 800c4d4:	0852      	lsrs	r2, r2, #1
 800c4d6:	4210      	tst	r0, r2
 800c4d8:	bf1f      	itttt	ne
 800c4da:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800c4de:	ea20 0202 	bicne.w	r2, r0, r2
 800c4e2:	4134      	asrne	r4, r6
 800c4e4:	4314      	orrne	r4, r2
 800c4e6:	e7d1      	b.n	800c48c <rint+0xa4>
 800c4e8:	0800d8c8 	.word	0x0800d8c8
 800c4ec:	000fffff 	.word	0x000fffff

0800c4f0 <scalbn>:
 800c4f0:	b570      	push	{r4, r5, r6, lr}
 800c4f2:	ec55 4b10 	vmov	r4, r5, d0
 800c4f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c4fa:	4606      	mov	r6, r0
 800c4fc:	462b      	mov	r3, r5
 800c4fe:	b9aa      	cbnz	r2, 800c52c <scalbn+0x3c>
 800c500:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c504:	4323      	orrs	r3, r4
 800c506:	d03b      	beq.n	800c580 <scalbn+0x90>
 800c508:	4b31      	ldr	r3, [pc, #196]	; (800c5d0 <scalbn+0xe0>)
 800c50a:	4629      	mov	r1, r5
 800c50c:	2200      	movs	r2, #0
 800c50e:	ee10 0a10 	vmov	r0, s0
 800c512:	f7f4 f879 	bl	8000608 <__aeabi_dmul>
 800c516:	4b2f      	ldr	r3, [pc, #188]	; (800c5d4 <scalbn+0xe4>)
 800c518:	429e      	cmp	r6, r3
 800c51a:	4604      	mov	r4, r0
 800c51c:	460d      	mov	r5, r1
 800c51e:	da12      	bge.n	800c546 <scalbn+0x56>
 800c520:	a327      	add	r3, pc, #156	; (adr r3, 800c5c0 <scalbn+0xd0>)
 800c522:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c526:	f7f4 f86f 	bl	8000608 <__aeabi_dmul>
 800c52a:	e009      	b.n	800c540 <scalbn+0x50>
 800c52c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c530:	428a      	cmp	r2, r1
 800c532:	d10c      	bne.n	800c54e <scalbn+0x5e>
 800c534:	ee10 2a10 	vmov	r2, s0
 800c538:	4620      	mov	r0, r4
 800c53a:	4629      	mov	r1, r5
 800c53c:	f7f3 feae 	bl	800029c <__adddf3>
 800c540:	4604      	mov	r4, r0
 800c542:	460d      	mov	r5, r1
 800c544:	e01c      	b.n	800c580 <scalbn+0x90>
 800c546:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c54a:	460b      	mov	r3, r1
 800c54c:	3a36      	subs	r2, #54	; 0x36
 800c54e:	4432      	add	r2, r6
 800c550:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c554:	428a      	cmp	r2, r1
 800c556:	dd0b      	ble.n	800c570 <scalbn+0x80>
 800c558:	ec45 4b11 	vmov	d1, r4, r5
 800c55c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800c5c8 <scalbn+0xd8>
 800c560:	f000 f83c 	bl	800c5dc <copysign>
 800c564:	a318      	add	r3, pc, #96	; (adr r3, 800c5c8 <scalbn+0xd8>)
 800c566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56a:	ec51 0b10 	vmov	r0, r1, d0
 800c56e:	e7da      	b.n	800c526 <scalbn+0x36>
 800c570:	2a00      	cmp	r2, #0
 800c572:	dd08      	ble.n	800c586 <scalbn+0x96>
 800c574:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c578:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c57c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c580:	ec45 4b10 	vmov	d0, r4, r5
 800c584:	bd70      	pop	{r4, r5, r6, pc}
 800c586:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c58a:	da0d      	bge.n	800c5a8 <scalbn+0xb8>
 800c58c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c590:	429e      	cmp	r6, r3
 800c592:	ec45 4b11 	vmov	d1, r4, r5
 800c596:	dce1      	bgt.n	800c55c <scalbn+0x6c>
 800c598:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800c5c0 <scalbn+0xd0>
 800c59c:	f000 f81e 	bl	800c5dc <copysign>
 800c5a0:	a307      	add	r3, pc, #28	; (adr r3, 800c5c0 <scalbn+0xd0>)
 800c5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5a6:	e7e0      	b.n	800c56a <scalbn+0x7a>
 800c5a8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c5ac:	3236      	adds	r2, #54	; 0x36
 800c5ae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c5b2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c5b6:	4620      	mov	r0, r4
 800c5b8:	4629      	mov	r1, r5
 800c5ba:	2200      	movs	r2, #0
 800c5bc:	4b06      	ldr	r3, [pc, #24]	; (800c5d8 <scalbn+0xe8>)
 800c5be:	e7b2      	b.n	800c526 <scalbn+0x36>
 800c5c0:	c2f8f359 	.word	0xc2f8f359
 800c5c4:	01a56e1f 	.word	0x01a56e1f
 800c5c8:	8800759c 	.word	0x8800759c
 800c5cc:	7e37e43c 	.word	0x7e37e43c
 800c5d0:	43500000 	.word	0x43500000
 800c5d4:	ffff3cb0 	.word	0xffff3cb0
 800c5d8:	3c900000 	.word	0x3c900000

0800c5dc <copysign>:
 800c5dc:	ec51 0b10 	vmov	r0, r1, d0
 800c5e0:	ee11 0a90 	vmov	r0, s3
 800c5e4:	ee10 2a10 	vmov	r2, s0
 800c5e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c5ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c5f0:	ea41 0300 	orr.w	r3, r1, r0
 800c5f4:	ec43 2b10 	vmov	d0, r2, r3
 800c5f8:	4770      	bx	lr
	...

0800c5fc <_init>:
 800c5fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5fe:	bf00      	nop
 800c600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c602:	bc08      	pop	{r3}
 800c604:	469e      	mov	lr, r3
 800c606:	4770      	bx	lr

0800c608 <_fini>:
 800c608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c60a:	bf00      	nop
 800c60c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c60e:	bc08      	pop	{r3}
 800c610:	469e      	mov	lr, r3
 800c612:	4770      	bx	lr
