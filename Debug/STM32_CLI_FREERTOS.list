
STM32_CLI_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd70  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b90  0800cf10  0800cf10  0001cf10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800daa0  0800daa0  0001daa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800daa8  0800daa8  0001daa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800daac  0800daac  0001daac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000808  20000000  0800dab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007e0  20000808  0800e2b8  00020808  2**2
                  ALLOC
  8 ._user_heap_stack 00003000  20000fe8  0800e2b8  00020fe8  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020808  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001ab05  00000000  00000000  00020838  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000353b  00000000  00000000  0003b33d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000015d8  00000000  00000000  0003e878  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001430  00000000  00000000  0003fe50  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000c494  00000000  00000000  00041280  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000065dd  00000000  00000000  0004d714  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00053cf1  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00006744  00000000  00000000  00053d70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000808 	.word	0x20000808
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cef8 	.word	0x0800cef8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000080c 	.word	0x2000080c
 80001dc:	0800cef8 	.word	0x0800cef8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b97a 	b.w	8000ebc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	468c      	mov	ip, r1
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	9e08      	ldr	r6, [sp, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d151      	bne.n	8000c94 <__udivmoddi4+0xb4>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d96d      	bls.n	8000cd2 <__udivmoddi4+0xf2>
 8000bf6:	fab2 fe82 	clz	lr, r2
 8000bfa:	f1be 0f00 	cmp.w	lr, #0
 8000bfe:	d00b      	beq.n	8000c18 <__udivmoddi4+0x38>
 8000c00:	f1ce 0c20 	rsb	ip, lr, #32
 8000c04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c1c:	0c25      	lsrs	r5, r4, #16
 8000c1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c22:	fa1f f987 	uxth.w	r9, r7
 8000c26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c2e:	fb08 f309 	mul.w	r3, r8, r9
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x6c>
 8000c36:	19ed      	adds	r5, r5, r7
 8000c38:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8123 	bcs.w	8000e86 <__udivmoddi4+0x2a6>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	f240 8120 	bls.w	8000e86 <__udivmoddi4+0x2a6>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	443d      	add	r5, r7
 8000c4c:	1aed      	subs	r5, r5, r3
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb00 f909 	mul.w	r9, r0, r9
 8000c60:	45a1      	cmp	r9, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x98>
 8000c64:	19e4      	adds	r4, r4, r7
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 810a 	bcs.w	8000e82 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8107 	bls.w	8000e82 <__udivmoddi4+0x2a2>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	eba4 0409 	sub.w	r4, r4, r9
 8000c7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c80:	2100      	movs	r1, #0
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d061      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000c86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6034      	str	r4, [r6, #0]
 8000c8e:	6073      	str	r3, [r6, #4]
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xc8>
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d054      	beq.n	8000d46 <__udivmoddi4+0x166>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	f040 808e 	bne.w	8000dce <__udivmoddi4+0x1ee>
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xdc>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2d0>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	46ac      	mov	ip, r5
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d03f      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000cca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b912      	cbnz	r2, 8000cda <__udivmoddi4+0xfa>
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cda:	fab7 fe87 	clz	lr, r7
 8000cde:	f1be 0f00 	cmp.w	lr, #0
 8000ce2:	d134      	bne.n	8000d4e <__udivmoddi4+0x16e>
 8000ce4:	1beb      	subs	r3, r5, r7
 8000ce6:	0c3a      	lsrs	r2, r7, #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cf2:	0c25      	lsrs	r5, r4, #16
 8000cf4:	fb02 3318 	mls	r3, r2, r8, r3
 8000cf8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfc:	fb0c f308 	mul.w	r3, ip, r8
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x134>
 8000d04:	19ed      	adds	r5, r5, r7
 8000d06:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x132>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	f200 80d1 	bhi.w	8000eb4 <__udivmoddi4+0x2d4>
 8000d12:	4680      	mov	r8, r0
 8000d14:	1aed      	subs	r5, r5, r3
 8000d16:	b2a3      	uxth	r3, r4
 8000d18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d24:	fb0c fc00 	mul.w	ip, ip, r0
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x15c>
 8000d2c:	19e4      	adds	r4, r4, r7
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x15a>
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	f200 80b8 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d44:	e79d      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1ce 0420 	rsb	r4, lr, #32
 8000d52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d5e:	0c3a      	lsrs	r2, r7, #16
 8000d60:	fa25 f404 	lsr.w	r4, r5, r4
 8000d64:	ea48 0803 	orr.w	r8, r8, r3
 8000d68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d70:	fb02 4411 	mls	r4, r2, r1, r4
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x1bc>
 8000d88:	19ed      	adds	r5, r5, r7
 8000d8a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d8e:	f080 808a 	bcs.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	f240 8087 	bls.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d98:	3902      	subs	r1, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aeb      	subs	r3, r5, r3
 8000d9e:	fa1f f588 	uxth.w	r5, r8
 8000da2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000da6:	fb02 3310 	mls	r3, r2, r0, r3
 8000daa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dae:	fb00 f30c 	mul.w	r3, r0, ip
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1e6>
 8000db6:	19ed      	adds	r5, r5, r7
 8000db8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dbc:	d26f      	bcs.n	8000e9e <__udivmoddi4+0x2be>
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d96d      	bls.n	8000e9e <__udivmoddi4+0x2be>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	1aeb      	subs	r3, r5, r3
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	e78f      	b.n	8000cee <__udivmoddi4+0x10e>
 8000dce:	f1c1 0720 	rsb	r7, r1, #32
 8000dd2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dd6:	408b      	lsls	r3, r1
 8000dd8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ddc:	ea48 0303 	orr.w	r3, r8, r3
 8000de0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000de4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000df2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000df6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dfa:	fa1f f883 	uxth.w	r8, r3
 8000dfe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e02:	fb09 f408 	mul.w	r4, r9, r8
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x244>
 8000e12:	18ed      	adds	r5, r5, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	d243      	bcs.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	d941      	bls.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e22:	441d      	add	r5, r3
 8000e24:	1b2d      	subs	r5, r5, r4
 8000e26:	fa1f fe8e 	uxth.w	lr, lr
 8000e2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e36:	fb00 f808 	mul.w	r8, r0, r8
 8000e3a:	45a0      	cmp	r8, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x26e>
 8000e3e:	18e4      	adds	r4, r4, r3
 8000e40:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e44:	d229      	bcs.n	8000e9a <__udivmoddi4+0x2ba>
 8000e46:	45a0      	cmp	r8, r4
 8000e48:	d927      	bls.n	8000e9a <__udivmoddi4+0x2ba>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	441c      	add	r4, r3
 8000e4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e52:	eba4 0408 	sub.w	r4, r4, r8
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	454c      	cmp	r4, r9
 8000e5c:	46c6      	mov	lr, r8
 8000e5e:	464d      	mov	r5, r9
 8000e60:	d315      	bcc.n	8000e8e <__udivmoddi4+0x2ae>
 8000e62:	d012      	beq.n	8000e8a <__udivmoddi4+0x2aa>
 8000e64:	b156      	cbz	r6, 8000e7c <__udivmoddi4+0x29c>
 8000e66:	ebba 030e 	subs.w	r3, sl, lr
 8000e6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431f      	orrs	r7, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	6037      	str	r7, [r6, #0]
 8000e7a:	6074      	str	r4, [r6, #4]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	4618      	mov	r0, r3
 8000e84:	e6f8      	b.n	8000c78 <__udivmoddi4+0x98>
 8000e86:	4690      	mov	r8, r2
 8000e88:	e6e0      	b.n	8000c4c <__udivmoddi4+0x6c>
 8000e8a:	45c2      	cmp	sl, r8
 8000e8c:	d2ea      	bcs.n	8000e64 <__udivmoddi4+0x284>
 8000e8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e92:	eb69 0503 	sbc.w	r5, r9, r3
 8000e96:	3801      	subs	r0, #1
 8000e98:	e7e4      	b.n	8000e64 <__udivmoddi4+0x284>
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	e7d7      	b.n	8000e4e <__udivmoddi4+0x26e>
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	e791      	b.n	8000dc6 <__udivmoddi4+0x1e6>
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	e7be      	b.n	8000e24 <__udivmoddi4+0x244>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	e778      	b.n	8000d9c <__udivmoddi4+0x1bc>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	e745      	b.n	8000d3c <__udivmoddi4+0x15c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xe6>
 8000eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb8:	443d      	add	r5, r7
 8000eba:	e72b      	b.n	8000d14 <__udivmoddi4+0x134>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_Init+0x40>)
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_Init+0x40>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_Init+0x40>)
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_Init+0x40>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <HAL_Init+0x40>)
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x40>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f94b 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f008 fa66 	bl	80093c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f992 	bl	800124c <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f40:	f000 f940 	bl	80011c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000190 	.word	0x20000190
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	20000000 	.word	0x20000000

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000004 	.word	0x20000004
 8000f88:	20000b14 	.word	0x20000b14

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000b14 	.word	0x20000b14

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff ffee 	bl	8000f8c <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <HAL_Delay+0x40>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffde 	bl	8000f8c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad2      	subs	r2, r2, r3
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3f7      	bcc.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	3710      	adds	r7, #16
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000004 	.word	0x20000004

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	4909      	ldr	r1, [pc, #36]	; (8001084 <__NVIC_EnableIRQ+0x38>)
 8001060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001064:	095b      	lsrs	r3, r3, #5
 8001066:	79fa      	ldrb	r2, [r7, #7]
 8001068:	f002 021f 	and.w	r2, r2, #31
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	490d      	ldr	r1, [pc, #52]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 800109e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	b2d2      	uxtb	r2, r2
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	4909      	ldr	r1, [pc, #36]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	3b04      	subs	r3, #4
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	b2d2      	uxtb	r2, r2
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	2201      	movs	r2, #1
 8001112:	69bb      	ldr	r3, [r7, #24]
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	1e5a      	subs	r2, r3, #1
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	401a      	ands	r2, r3
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001122:	2101      	movs	r1, #1
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fa01 f303 	lsl.w	r3, r1, r3
 800112a:	1e59      	subs	r1, r3, #1
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001130:	4313      	orrs	r3, r2
         );
}
 8001132:	4618      	mov	r0, r3
 8001134:	3724      	adds	r7, #36	; 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
	...

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001164:	f7ff ff90 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2b07      	cmp	r3, #7
 8001190:	d00f      	beq.n	80011b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b06      	cmp	r3, #6
 8001196:	d00c      	beq.n	80011b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b05      	cmp	r3, #5
 800119c:	d009      	beq.n	80011b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d006      	beq.n	80011b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d003      	beq.n	80011b2 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80011aa:	2192      	movs	r1, #146	; 0x92
 80011ac:	4804      	ldr	r0, [pc, #16]	; (80011c0 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80011ae:	f007 fdda 	bl	8008d66 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff ff18 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 80011b8:	bf00      	nop
 80011ba:	3708      	adds	r7, #8
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	0800cf10 	.word	0x0800cf10

080011c4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	60b9      	str	r1, [r7, #8]
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2b0f      	cmp	r3, #15
 80011da:	d903      	bls.n	80011e4 <HAL_NVIC_SetPriority+0x20>
 80011dc:	21aa      	movs	r1, #170	; 0xaa
 80011de:	480e      	ldr	r0, [pc, #56]	; (8001218 <HAL_NVIC_SetPriority+0x54>)
 80011e0:	f007 fdc1 	bl	8008d66 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b0f      	cmp	r3, #15
 80011e8:	d903      	bls.n	80011f2 <HAL_NVIC_SetPriority+0x2e>
 80011ea:	21ab      	movs	r1, #171	; 0xab
 80011ec:	480a      	ldr	r0, [pc, #40]	; (8001218 <HAL_NVIC_SetPriority+0x54>)
 80011ee:	f007 fdba 	bl	8008d66 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011f2:	f7ff ff1d 	bl	8001030 <__NVIC_GetPriorityGrouping>
 80011f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f8:	687a      	ldr	r2, [r7, #4]
 80011fa:	68b9      	ldr	r1, [r7, #8]
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff ff6d 	bl	80010dc <NVIC_EncodePriority>
 8001202:	4602      	mov	r2, r0
 8001204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001208:	4611      	mov	r1, r2
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff ff3c 	bl	8001088 <__NVIC_SetPriority>
}
 8001210:	bf00      	nop
 8001212:	3718      	adds	r7, #24
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	0800cf10 	.word	0x0800cf10

0800121c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8001226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122a:	2b00      	cmp	r3, #0
 800122c:	da03      	bge.n	8001236 <HAL_NVIC_EnableIRQ+0x1a>
 800122e:	21be      	movs	r1, #190	; 0xbe
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <HAL_NVIC_EnableIRQ+0x2c>)
 8001232:	f007 fd98 	bl	8008d66 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff06 	bl	800104c <__NVIC_EnableIRQ>
}
 8001240:	bf00      	nop
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	0800cf10 	.word	0x0800cf10

0800124c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ff73 	bl	8001140 <SysTick_Config>
 800125a:	4603      	mov	r3, r0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b086      	sub	sp, #24
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff fe8c 	bl	8000f8c <HAL_GetTick>
 8001274:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d101      	bne.n	8001280 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e204      	b.n	800168a <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a97      	ldr	r2, [pc, #604]	; (80014e4 <HAL_DMA_Init+0x280>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d04e      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a96      	ldr	r2, [pc, #600]	; (80014e8 <HAL_DMA_Init+0x284>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d049      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a94      	ldr	r2, [pc, #592]	; (80014ec <HAL_DMA_Init+0x288>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d044      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a93      	ldr	r2, [pc, #588]	; (80014f0 <HAL_DMA_Init+0x28c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d03f      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a91      	ldr	r2, [pc, #580]	; (80014f4 <HAL_DMA_Init+0x290>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d03a      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a90      	ldr	r2, [pc, #576]	; (80014f8 <HAL_DMA_Init+0x294>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d035      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a8e      	ldr	r2, [pc, #568]	; (80014fc <HAL_DMA_Init+0x298>)
 80012c2:	4293      	cmp	r3, r2
 80012c4:	d030      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a8d      	ldr	r2, [pc, #564]	; (8001500 <HAL_DMA_Init+0x29c>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d02b      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a8b      	ldr	r2, [pc, #556]	; (8001504 <HAL_DMA_Init+0x2a0>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d026      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4a8a      	ldr	r2, [pc, #552]	; (8001508 <HAL_DMA_Init+0x2a4>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d021      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a88      	ldr	r2, [pc, #544]	; (800150c <HAL_DMA_Init+0x2a8>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01c      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a87      	ldr	r2, [pc, #540]	; (8001510 <HAL_DMA_Init+0x2ac>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d017      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a85      	ldr	r2, [pc, #532]	; (8001514 <HAL_DMA_Init+0x2b0>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d012      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a84      	ldr	r2, [pc, #528]	; (8001518 <HAL_DMA_Init+0x2b4>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d00d      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a82      	ldr	r2, [pc, #520]	; (800151c <HAL_DMA_Init+0x2b8>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d008      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a81      	ldr	r2, [pc, #516]	; (8001520 <HAL_DMA_Init+0x2bc>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d003      	beq.n	8001328 <HAL_DMA_Init+0xc4>
 8001320:	21b8      	movs	r1, #184	; 0xb8
 8001322:	4880      	ldr	r0, [pc, #512]	; (8001524 <HAL_DMA_Init+0x2c0>)
 8001324:	f007 fd1f 	bl	8008d66 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d026      	beq.n	800137e <HAL_DMA_Init+0x11a>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001338:	d021      	beq.n	800137e <HAL_DMA_Init+0x11a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001342:	d01c      	beq.n	800137e <HAL_DMA_Init+0x11a>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 800134c:	d017      	beq.n	800137e <HAL_DMA_Init+0x11a>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001356:	d012      	beq.n	800137e <HAL_DMA_Init+0x11a>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 8001360:	d00d      	beq.n	800137e <HAL_DMA_Init+0x11a>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800136a:	d008      	beq.n	800137e <HAL_DMA_Init+0x11a>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001374:	d003      	beq.n	800137e <HAL_DMA_Init+0x11a>
 8001376:	21b9      	movs	r1, #185	; 0xb9
 8001378:	486a      	ldr	r0, [pc, #424]	; (8001524 <HAL_DMA_Init+0x2c0>)
 800137a:	f007 fcf4 	bl	8008d66 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d00b      	beq.n	800139e <HAL_DMA_Init+0x13a>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b40      	cmp	r3, #64	; 0x40
 800138c:	d007      	beq.n	800139e <HAL_DMA_Init+0x13a>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b80      	cmp	r3, #128	; 0x80
 8001394:	d003      	beq.n	800139e <HAL_DMA_Init+0x13a>
 8001396:	21ba      	movs	r1, #186	; 0xba
 8001398:	4862      	ldr	r0, [pc, #392]	; (8001524 <HAL_DMA_Init+0x2c0>)
 800139a:	f007 fce4 	bl	8008d66 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	68db      	ldr	r3, [r3, #12]
 80013a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013a6:	d007      	beq.n	80013b8 <HAL_DMA_Init+0x154>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_DMA_Init+0x154>
 80013b0:	21bb      	movs	r1, #187	; 0xbb
 80013b2:	485c      	ldr	r0, [pc, #368]	; (8001524 <HAL_DMA_Init+0x2c0>)
 80013b4:	f007 fcd7 	bl	8008d66 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013c0:	d007      	beq.n	80013d2 <HAL_DMA_Init+0x16e>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	691b      	ldr	r3, [r3, #16]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_DMA_Init+0x16e>
 80013ca:	21bc      	movs	r1, #188	; 0xbc
 80013cc:	4855      	ldr	r0, [pc, #340]	; (8001524 <HAL_DMA_Init+0x2c0>)
 80013ce:	f007 fcca 	bl	8008d66 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	695b      	ldr	r3, [r3, #20]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00d      	beq.n	80013f6 <HAL_DMA_Init+0x192>
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80013e2:	d008      	beq.n	80013f6 <HAL_DMA_Init+0x192>
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013ec:	d003      	beq.n	80013f6 <HAL_DMA_Init+0x192>
 80013ee:	21bd      	movs	r1, #189	; 0xbd
 80013f0:	484c      	ldr	r0, [pc, #304]	; (8001524 <HAL_DMA_Init+0x2c0>)
 80013f2:	f007 fcb8 	bl	8008d66 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00d      	beq.n	800141a <HAL_DMA_Init+0x1b6>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001406:	d008      	beq.n	800141a <HAL_DMA_Init+0x1b6>
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	699b      	ldr	r3, [r3, #24]
 800140c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001410:	d003      	beq.n	800141a <HAL_DMA_Init+0x1b6>
 8001412:	21be      	movs	r1, #190	; 0xbe
 8001414:	4843      	ldr	r0, [pc, #268]	; (8001524 <HAL_DMA_Init+0x2c0>)
 8001416:	f007 fca6 	bl	8008d66 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d00c      	beq.n	800143c <HAL_DMA_Init+0x1d8>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	69db      	ldr	r3, [r3, #28]
 8001426:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800142a:	d007      	beq.n	800143c <HAL_DMA_Init+0x1d8>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	69db      	ldr	r3, [r3, #28]
 8001430:	2b20      	cmp	r3, #32
 8001432:	d003      	beq.n	800143c <HAL_DMA_Init+0x1d8>
 8001434:	21bf      	movs	r1, #191	; 0xbf
 8001436:	483b      	ldr	r0, [pc, #236]	; (8001524 <HAL_DMA_Init+0x2c0>)
 8001438:	f007 fc95 	bl	8008d66 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d012      	beq.n	800146a <HAL_DMA_Init+0x206>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800144c:	d00d      	beq.n	800146a <HAL_DMA_Init+0x206>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001456:	d008      	beq.n	800146a <HAL_DMA_Init+0x206>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a1b      	ldr	r3, [r3, #32]
 800145c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001460:	d003      	beq.n	800146a <HAL_DMA_Init+0x206>
 8001462:	21c0      	movs	r1, #192	; 0xc0
 8001464:	482f      	ldr	r0, [pc, #188]	; (8001524 <HAL_DMA_Init+0x2c0>)
 8001466:	f007 fc7e 	bl	8008d66 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <HAL_DMA_Init+0x21e>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	2b04      	cmp	r3, #4
 8001478:	d003      	beq.n	8001482 <HAL_DMA_Init+0x21e>
 800147a:	21c1      	movs	r1, #193	; 0xc1
 800147c:	4829      	ldr	r0, [pc, #164]	; (8001524 <HAL_DMA_Init+0x2c0>)
 800147e:	f007 fc72 	bl	8008d66 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	2b00      	cmp	r3, #0
 8001488:	d065      	beq.n	8001556 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800148e:	2b00      	cmp	r3, #0
 8001490:	d00f      	beq.n	80014b2 <HAL_DMA_Init+0x24e>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001496:	2b01      	cmp	r3, #1
 8001498:	d00b      	beq.n	80014b2 <HAL_DMA_Init+0x24e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149e:	2b02      	cmp	r3, #2
 80014a0:	d007      	beq.n	80014b2 <HAL_DMA_Init+0x24e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a6:	2b03      	cmp	r3, #3
 80014a8:	d003      	beq.n	80014b2 <HAL_DMA_Init+0x24e>
 80014aa:	21c6      	movs	r1, #198	; 0xc6
 80014ac:	481d      	ldr	r0, [pc, #116]	; (8001524 <HAL_DMA_Init+0x2c0>)
 80014ae:	f007 fc5a 	bl	8008d66 <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d036      	beq.n	8001528 <HAL_DMA_Init+0x2c4>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80014c2:	d031      	beq.n	8001528 <HAL_DMA_Init+0x2c4>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014cc:	d02c      	beq.n	8001528 <HAL_DMA_Init+0x2c4>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80014d6:	d027      	beq.n	8001528 <HAL_DMA_Init+0x2c4>
 80014d8:	21c7      	movs	r1, #199	; 0xc7
 80014da:	4812      	ldr	r0, [pc, #72]	; (8001524 <HAL_DMA_Init+0x2c0>)
 80014dc:	f007 fc43 	bl	8008d66 <assert_failed>
 80014e0:	e022      	b.n	8001528 <HAL_DMA_Init+0x2c4>
 80014e2:	bf00      	nop
 80014e4:	40026010 	.word	0x40026010
 80014e8:	40026028 	.word	0x40026028
 80014ec:	40026040 	.word	0x40026040
 80014f0:	40026058 	.word	0x40026058
 80014f4:	40026070 	.word	0x40026070
 80014f8:	40026088 	.word	0x40026088
 80014fc:	400260a0 	.word	0x400260a0
 8001500:	400260b8 	.word	0x400260b8
 8001504:	40026410 	.word	0x40026410
 8001508:	40026428 	.word	0x40026428
 800150c:	40026440 	.word	0x40026440
 8001510:	40026458 	.word	0x40026458
 8001514:	40026470 	.word	0x40026470
 8001518:	40026488 	.word	0x40026488
 800151c:	400264a0 	.word	0x400264a0
 8001520:	400264b8 	.word	0x400264b8
 8001524:	0800cf4c 	.word	0x0800cf4c
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152c:	2b00      	cmp	r3, #0
 800152e:	d012      	beq.n	8001556 <HAL_DMA_Init+0x2f2>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001538:	d00d      	beq.n	8001556 <HAL_DMA_Init+0x2f2>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001542:	d008      	beq.n	8001556 <HAL_DMA_Init+0x2f2>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800154c:	d003      	beq.n	8001556 <HAL_DMA_Init+0x2f2>
 800154e:	21c8      	movs	r1, #200	; 0xc8
 8001550:	4850      	ldr	r0, [pc, #320]	; (8001694 <HAL_DMA_Init+0x430>)
 8001552:	f007 fc08 	bl	8008d66 <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2202      	movs	r2, #2
 8001562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	687a      	ldr	r2, [r7, #4]
 800156c:	6812      	ldr	r2, [r2, #0]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	f022 0201 	bic.w	r2, r2, #1
 8001574:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001576:	e00f      	b.n	8001598 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001578:	f7ff fd08 	bl	8000f8c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b05      	cmp	r3, #5
 8001584:	d908      	bls.n	8001598 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2220      	movs	r2, #32
 800158a:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2203      	movs	r2, #3
 8001590:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e078      	b.n	800168a <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0301 	and.w	r3, r3, #1
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1e8      	bne.n	8001578 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4b39      	ldr	r3, [pc, #228]	; (8001698 <HAL_DMA_Init+0x434>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685a      	ldr	r2, [r3, #4]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	691b      	ldr	r3, [r3, #16]
 80015ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a1b      	ldr	r3, [r3, #32]
 80015e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015e4:	697a      	ldr	r2, [r7, #20]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015ee:	2b04      	cmp	r3, #4
 80015f0:	d107      	bne.n	8001602 <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	4313      	orrs	r3, r2
 80015fc:	697a      	ldr	r2, [r7, #20]
 80015fe:	4313      	orrs	r3, r2
 8001600:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	695b      	ldr	r3, [r3, #20]
 8001610:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	f023 0307 	bic.w	r3, r3, #7
 8001618:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	4313      	orrs	r3, r2
 8001622:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	2b04      	cmp	r3, #4
 800162a:	d117      	bne.n	800165c <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	4313      	orrs	r3, r2
 8001634:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163a:	2b00      	cmp	r3, #0
 800163c:	d00e      	beq.n	800165c <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	f000 fa88 	bl	8001b54 <DMA_CheckFifoParam>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d008      	beq.n	800165c <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2240      	movs	r2, #64	; 0x40
 800164e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2201      	movs	r2, #1
 8001654:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001658:	2301      	movs	r3, #1
 800165a:	e016      	b.n	800168a <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f000 fa3f 	bl	8001ae8 <DMA_CalcBaseAndBitshift>
 800166a:	4603      	mov	r3, r0
 800166c:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001672:	223f      	movs	r2, #63	; 0x3f
 8001674:	409a      	lsls	r2, r3
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	0800cf4c 	.word	0x0800cf4c
 8001698:	f010803f 	.word	0xf010803f

0800169c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b086      	sub	sp, #24
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
 80016a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016aa:	2300      	movs	r3, #0
 80016ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_DMA_Start_IT+0x26>
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c0:	d304      	bcc.n	80016cc <HAL_DMA_Start_IT+0x30>
 80016c2:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 80016c6:	482b      	ldr	r0, [pc, #172]	; (8001774 <HAL_DMA_Start_IT+0xd8>)
 80016c8:	f007 fb4d 	bl	8008d66 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d101      	bne.n	80016da <HAL_DMA_Start_IT+0x3e>
 80016d6:	2302      	movs	r3, #2
 80016d8:	e048      	b.n	800176c <HAL_DMA_Start_IT+0xd0>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2201      	movs	r2, #1
 80016de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d137      	bne.n	800175e <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2202      	movs	r2, #2
 80016f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2200      	movs	r2, #0
 80016fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	68b9      	ldr	r1, [r7, #8]
 8001702:	68f8      	ldr	r0, [r7, #12]
 8001704:	f000 f9c2 	bl	8001a8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800170c:	223f      	movs	r2, #63	; 0x3f
 800170e:	409a      	lsls	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	68fa      	ldr	r2, [r7, #12]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	f042 0216 	orr.w	r2, r2, #22
 8001722:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	68fa      	ldr	r2, [r7, #12]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	6952      	ldr	r2, [r2, #20]
 800172e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001732:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	2b00      	cmp	r3, #0
 800173a:	d007      	beq.n	800174c <HAL_DMA_Start_IT+0xb0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	f042 0208 	orr.w	r2, r2, #8
 800174a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	6812      	ldr	r2, [r2, #0]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	f042 0201 	orr.w	r2, r2, #1
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	e005      	b.n	800176a <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001766:	2302      	movs	r3, #2
 8001768:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800176a:	7dfb      	ldrb	r3, [r7, #23]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	0800cf4c 	.word	0x0800cf4c

08001778 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b086      	sub	sp, #24
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001784:	4b92      	ldr	r3, [pc, #584]	; (80019d0 <HAL_DMA_IRQHandler+0x258>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a92      	ldr	r2, [pc, #584]	; (80019d4 <HAL_DMA_IRQHandler+0x25c>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0a9b      	lsrs	r3, r3, #10
 8001790:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001796:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a2:	2208      	movs	r2, #8
 80017a4:	409a      	lsls	r2, r3
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4013      	ands	r3, r2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d01a      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d013      	beq.n	80017e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	687a      	ldr	r2, [r7, #4]
 80017c2:	6812      	ldr	r2, [r2, #0]
 80017c4:	6812      	ldr	r2, [r2, #0]
 80017c6:	f022 0204 	bic.w	r2, r2, #4
 80017ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017d0:	2208      	movs	r2, #8
 80017d2:	409a      	lsls	r2, r3
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017dc:	f043 0201 	orr.w	r2, r3, #1
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e8:	2201      	movs	r2, #1
 80017ea:	409a      	lsls	r2, r3
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4013      	ands	r3, r2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d012      	beq.n	800181a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00b      	beq.n	800181a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001806:	2201      	movs	r2, #1
 8001808:	409a      	lsls	r2, r3
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	f043 0202 	orr.w	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800181e:	2204      	movs	r2, #4
 8001820:	409a      	lsls	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d012      	beq.n	8001850 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00b      	beq.n	8001850 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800183c:	2204      	movs	r2, #4
 800183e:	409a      	lsls	r2, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001848:	f043 0204 	orr.w	r2, r3, #4
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001854:	2210      	movs	r2, #16
 8001856:	409a      	lsls	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4013      	ands	r3, r2
 800185c:	2b00      	cmp	r3, #0
 800185e:	d043      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d03c      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001872:	2210      	movs	r2, #16
 8001874:	409a      	lsls	r2, r3
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d018      	beq.n	80018ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001892:	2b00      	cmp	r3, #0
 8001894:	d108      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189a:	2b00      	cmp	r3, #0
 800189c:	d024      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
 80018a6:	e01f      	b.n	80018e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d01b      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
 80018b8:	e016      	b.n	80018e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d107      	bne.n	80018d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6812      	ldr	r2, [r2, #0]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	f022 0208 	bic.w	r2, r2, #8
 80018d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ec:	2220      	movs	r2, #32
 80018ee:	409a      	lsls	r2, r3
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4013      	ands	r3, r2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 808e 	beq.w	8001a16 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0310 	and.w	r3, r3, #16
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8086 	beq.w	8001a16 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800190e:	2220      	movs	r2, #32
 8001910:	409a      	lsls	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800191c:	b2db      	uxtb	r3, r3
 800191e:	2b05      	cmp	r3, #5
 8001920:	d136      	bne.n	8001990 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6812      	ldr	r2, [r2, #0]
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	f022 0216 	bic.w	r2, r2, #22
 8001930:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	6812      	ldr	r2, [r2, #0]
 800193a:	6952      	ldr	r2, [r2, #20]
 800193c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001940:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	2b00      	cmp	r3, #0
 8001948:	d103      	bne.n	8001952 <HAL_DMA_IRQHandler+0x1da>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800194e:	2b00      	cmp	r3, #0
 8001950:	d007      	beq.n	8001962 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	6812      	ldr	r2, [r2, #0]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	f022 0208 	bic.w	r2, r2, #8
 8001960:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001966:	223f      	movs	r2, #63	; 0x3f
 8001968:	409a      	lsls	r2, r3
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001982:	2b00      	cmp	r3, #0
 8001984:	d07d      	beq.n	8001a82 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	4798      	blx	r3
        }
        return;
 800198e:	e078      	b.n	8001a82 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800199a:	2b00      	cmp	r3, #0
 800199c:	d01c      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d108      	bne.n	80019be <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d030      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	4798      	blx	r3
 80019bc:	e02b      	b.n	8001a16 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d027      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	4798      	blx	r3
 80019ce:	e022      	b.n	8001a16 <HAL_DMA_IRQHandler+0x29e>
 80019d0:	20000190 	.word	0x20000190
 80019d4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10f      	bne.n	8001a06 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	6812      	ldr	r2, [r2, #0]
 80019ee:	6812      	ldr	r2, [r2, #0]
 80019f0:	f022 0210 	bic.w	r2, r2, #16
 80019f4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2200      	movs	r2, #0
 80019fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2201      	movs	r2, #1
 8001a02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d032      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d022      	beq.n	8001a70 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2205      	movs	r2, #5
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	6812      	ldr	r2, [r2, #0]
 8001a3a:	6812      	ldr	r2, [r2, #0]
 8001a3c:	f022 0201 	bic.w	r2, r2, #1
 8001a40:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	3301      	adds	r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d807      	bhi.n	8001a5e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0301 	and.w	r3, r3, #1
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d1f2      	bne.n	8001a42 <HAL_DMA_IRQHandler+0x2ca>
 8001a5c:	e000      	b.n	8001a60 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a5e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	4798      	blx	r3
 8001a80:	e000      	b.n	8001a84 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a82:	bf00      	nop
    }
  }
}
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop

08001a8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
 8001a98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	6812      	ldr	r2, [r2, #0]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001aa8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	2b40      	cmp	r3, #64	; 0x40
 8001ab8:	d108      	bne.n	8001acc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001aca:	e007      	b.n	8001adc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	60da      	str	r2, [r3, #12]
}
 8001adc:	bf00      	nop
 8001ade:	3714      	adds	r7, #20
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	3b10      	subs	r3, #16
 8001af8:	4a14      	ldr	r2, [pc, #80]	; (8001b4c <DMA_CalcBaseAndBitshift+0x64>)
 8001afa:	fba2 2303 	umull	r2, r3, r2, r3
 8001afe:	091b      	lsrs	r3, r3, #4
 8001b00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001b02:	4a13      	ldr	r2, [pc, #76]	; (8001b50 <DMA_CalcBaseAndBitshift+0x68>)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	4413      	add	r3, r2
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	d909      	bls.n	8001b2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b1e:	f023 0303 	bic.w	r3, r3, #3
 8001b22:	1d1a      	adds	r2, r3, #4
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	659a      	str	r2, [r3, #88]	; 0x58
 8001b28:	e007      	b.n	8001b3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b32:	f023 0303 	bic.w	r3, r3, #3
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	aaaaaaab 	.word	0xaaaaaaab
 8001b50:	0800d498 	.word	0x0800d498

08001b54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b085      	sub	sp, #20
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699b      	ldr	r3, [r3, #24]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d11f      	bne.n	8001bae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b6e:	68bb      	ldr	r3, [r7, #8]
 8001b70:	2b03      	cmp	r3, #3
 8001b72:	d855      	bhi.n	8001c20 <DMA_CheckFifoParam+0xcc>
 8001b74:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <DMA_CheckFifoParam+0x28>)
 8001b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7a:	bf00      	nop
 8001b7c:	08001b8d 	.word	0x08001b8d
 8001b80:	08001b9f 	.word	0x08001b9f
 8001b84:	08001b8d 	.word	0x08001b8d
 8001b88:	08001c21 	.word	0x08001c21
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d045      	beq.n	8001c24 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b9c:	e042      	b.n	8001c24 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ba6:	d13f      	bne.n	8001c28 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bac:	e03c      	b.n	8001c28 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699b      	ldr	r3, [r3, #24]
 8001bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bb6:	d121      	bne.n	8001bfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	d836      	bhi.n	8001c2c <DMA_CheckFifoParam+0xd8>
 8001bbe:	a201      	add	r2, pc, #4	; (adr r2, 8001bc4 <DMA_CheckFifoParam+0x70>)
 8001bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc4:	08001bd5 	.word	0x08001bd5
 8001bc8:	08001bdb 	.word	0x08001bdb
 8001bcc:	08001bd5 	.word	0x08001bd5
 8001bd0:	08001bed 	.word	0x08001bed
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bd8:	e02f      	b.n	8001c3a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d024      	beq.n	8001c30 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bea:	e021      	b.n	8001c30 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bf4:	d11e      	bne.n	8001c34 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bfa:	e01b      	b.n	8001c34 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	d902      	bls.n	8001c08 <DMA_CheckFifoParam+0xb4>
 8001c02:	2b03      	cmp	r3, #3
 8001c04:	d003      	beq.n	8001c0e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001c06:	e018      	b.n	8001c3a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001c0c:	e015      	b.n	8001c3a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00e      	beq.n	8001c38 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8001c1e:	e00b      	b.n	8001c38 <DMA_CheckFifoParam+0xe4>
      break;
 8001c20:	bf00      	nop
 8001c22:	e00a      	b.n	8001c3a <DMA_CheckFifoParam+0xe6>
      break;
 8001c24:	bf00      	nop
 8001c26:	e008      	b.n	8001c3a <DMA_CheckFifoParam+0xe6>
      break;
 8001c28:	bf00      	nop
 8001c2a:	e006      	b.n	8001c3a <DMA_CheckFifoParam+0xe6>
      break;
 8001c2c:	bf00      	nop
 8001c2e:	e004      	b.n	8001c3a <DMA_CheckFifoParam+0xe6>
      break;
 8001c30:	bf00      	nop
 8001c32:	e002      	b.n	8001c3a <DMA_CheckFifoParam+0xe6>
      break;   
 8001c34:	bf00      	nop
 8001c36:	e000      	b.n	8001c3a <DMA_CheckFifoParam+0xe6>
      break;
 8001c38:	bf00      	nop
    }
  } 
  
  return status; 
 8001c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	4a3b      	ldr	r2, [pc, #236]	; (8001d50 <HAL_GPIO_Init+0x108>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d017      	beq.n	8001c96 <HAL_GPIO_Init+0x4e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	4a3a      	ldr	r2, [pc, #232]	; (8001d54 <HAL_GPIO_Init+0x10c>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d013      	beq.n	8001c96 <HAL_GPIO_Init+0x4e>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	4a39      	ldr	r2, [pc, #228]	; (8001d58 <HAL_GPIO_Init+0x110>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d00f      	beq.n	8001c96 <HAL_GPIO_Init+0x4e>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a38      	ldr	r2, [pc, #224]	; (8001d5c <HAL_GPIO_Init+0x114>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d00b      	beq.n	8001c96 <HAL_GPIO_Init+0x4e>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a37      	ldr	r2, [pc, #220]	; (8001d60 <HAL_GPIO_Init+0x118>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d007      	beq.n	8001c96 <HAL_GPIO_Init+0x4e>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a36      	ldr	r2, [pc, #216]	; (8001d64 <HAL_GPIO_Init+0x11c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d003      	beq.n	8001c96 <HAL_GPIO_Init+0x4e>
 8001c8e:	21b3      	movs	r1, #179	; 0xb3
 8001c90:	4835      	ldr	r0, [pc, #212]	; (8001d68 <HAL_GPIO_Init+0x120>)
 8001c92:	f007 f868 	bl	8008d66 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d005      	beq.n	8001cac <HAL_GPIO_Init+0x64>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	0c1b      	lsrs	r3, r3, #16
 8001ca6:	041b      	lsls	r3, r3, #16
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d003      	beq.n	8001cb4 <HAL_GPIO_Init+0x6c>
 8001cac:	21b4      	movs	r1, #180	; 0xb4
 8001cae:	482e      	ldr	r0, [pc, #184]	; (8001d68 <HAL_GPIO_Init+0x120>)
 8001cb0:	f007 f859 	bl	8008d66 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d035      	beq.n	8001d28 <HAL_GPIO_Init+0xe0>
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d031      	beq.n	8001d28 <HAL_GPIO_Init+0xe0>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	2b11      	cmp	r3, #17
 8001cca:	d02d      	beq.n	8001d28 <HAL_GPIO_Init+0xe0>
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b02      	cmp	r3, #2
 8001cd2:	d029      	beq.n	8001d28 <HAL_GPIO_Init+0xe0>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b12      	cmp	r3, #18
 8001cda:	d025      	beq.n	8001d28 <HAL_GPIO_Init+0xe0>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	4a22      	ldr	r2, [pc, #136]	; (8001d6c <HAL_GPIO_Init+0x124>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d020      	beq.n	8001d28 <HAL_GPIO_Init+0xe0>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <HAL_GPIO_Init+0x128>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d01b      	beq.n	8001d28 <HAL_GPIO_Init+0xe0>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	4a1f      	ldr	r2, [pc, #124]	; (8001d74 <HAL_GPIO_Init+0x12c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d016      	beq.n	8001d28 <HAL_GPIO_Init+0xe0>
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4a1e      	ldr	r2, [pc, #120]	; (8001d78 <HAL_GPIO_Init+0x130>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d011      	beq.n	8001d28 <HAL_GPIO_Init+0xe0>
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <HAL_GPIO_Init+0x134>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d00c      	beq.n	8001d28 <HAL_GPIO_Init+0xe0>
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a1b      	ldr	r2, [pc, #108]	; (8001d80 <HAL_GPIO_Init+0x138>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d007      	beq.n	8001d28 <HAL_GPIO_Init+0xe0>
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	2b03      	cmp	r3, #3
 8001d1e:	d003      	beq.n	8001d28 <HAL_GPIO_Init+0xe0>
 8001d20:	21b5      	movs	r1, #181	; 0xb5
 8001d22:	4811      	ldr	r0, [pc, #68]	; (8001d68 <HAL_GPIO_Init+0x120>)
 8001d24:	f007 f81f 	bl	8008d66 <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d00b      	beq.n	8001d48 <HAL_GPIO_Init+0x100>
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d007      	beq.n	8001d48 <HAL_GPIO_Init+0x100>
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x100>
 8001d40:	21b6      	movs	r1, #182	; 0xb6
 8001d42:	4809      	ldr	r0, [pc, #36]	; (8001d68 <HAL_GPIO_Init+0x120>)
 8001d44:	f007 f80f 	bl	8008d66 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d48:	2300      	movs	r3, #0
 8001d4a:	61fb      	str	r3, [r7, #28]
 8001d4c:	e201      	b.n	8002152 <HAL_GPIO_Init+0x50a>
 8001d4e:	bf00      	nop
 8001d50:	40020000 	.word	0x40020000
 8001d54:	40020400 	.word	0x40020400
 8001d58:	40020800 	.word	0x40020800
 8001d5c:	40020c00 	.word	0x40020c00
 8001d60:	40021000 	.word	0x40021000
 8001d64:	40021c00 	.word	0x40021c00
 8001d68:	0800cf84 	.word	0x0800cf84
 8001d6c:	10110000 	.word	0x10110000
 8001d70:	10210000 	.word	0x10210000
 8001d74:	10310000 	.word	0x10310000
 8001d78:	10120000 	.word	0x10120000
 8001d7c:	10220000 	.word	0x10220000
 8001d80:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d84:	2201      	movs	r2, #1
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	f040 81d5 	bne.w	800214c <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d004      	beq.n	8001db4 <HAL_GPIO_Init+0x16c>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	2b12      	cmp	r3, #18
 8001db0:	f040 808c 	bne.w	8001ecc <HAL_GPIO_Init+0x284>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	691b      	ldr	r3, [r3, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d063      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	2b0c      	cmp	r3, #12
 8001dc2:	d05f      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	691b      	ldr	r3, [r3, #16]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d05b      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691b      	ldr	r3, [r3, #16]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d057      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d053      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d04f      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	691b      	ldr	r3, [r3, #16]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d04b      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d047      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d043      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	691b      	ldr	r3, [r3, #16]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d03f      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	691b      	ldr	r3, [r3, #16]
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d03b      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d037      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	2b04      	cmp	r3, #4
 8001e1a:	d033      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d02f      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d02b      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	2b05      	cmp	r3, #5
 8001e32:	d027      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	691b      	ldr	r3, [r3, #16]
 8001e38:	2b06      	cmp	r3, #6
 8001e3a:	d023      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d01f      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	2b07      	cmp	r3, #7
 8001e4a:	d01b      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	2b07      	cmp	r3, #7
 8001e52:	d017      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	2b08      	cmp	r3, #8
 8001e5a:	d013      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	2b0a      	cmp	r3, #10
 8001e62:	d00f      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	2b09      	cmp	r3, #9
 8001e6a:	d00b      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	d007      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	2b0f      	cmp	r3, #15
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x23c>
 8001e7c:	21c7      	movs	r1, #199	; 0xc7
 8001e7e:	4879      	ldr	r0, [pc, #484]	; (8002064 <HAL_GPIO_Init+0x41c>)
 8001e80:	f006 ff71 	bl	8008d66 <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	08da      	lsrs	r2, r3, #3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3208      	adds	r2, #8
 8001e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	f003 0307 	and.w	r3, r3, #7
 8001e98:	009b      	lsls	r3, r3, #2
 8001e9a:	220f      	movs	r2, #15
 8001e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea0:	43db      	mvns	r3, r3
 8001ea2:	69ba      	ldr	r2, [r7, #24]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	08da      	lsrs	r2, r3, #3
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	3208      	adds	r2, #8
 8001ec6:	69b9      	ldr	r1, [r7, #24]
 8001ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	2203      	movs	r2, #3
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	43db      	mvns	r3, r3
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0203 	and.w	r2, r3, #3
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d00b      	beq.n	8001f20 <HAL_GPIO_Init+0x2d8>
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d007      	beq.n	8001f20 <HAL_GPIO_Init+0x2d8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f14:	2b11      	cmp	r3, #17
 8001f16:	d003      	beq.n	8001f20 <HAL_GPIO_Init+0x2d8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	2b12      	cmp	r3, #18
 8001f1e:	d144      	bne.n	8001faa <HAL_GPIO_Init+0x362>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d00f      	beq.n	8001f48 <HAL_GPIO_Init+0x300>
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d00b      	beq.n	8001f48 <HAL_GPIO_Init+0x300>
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d007      	beq.n	8001f48 <HAL_GPIO_Init+0x300>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d003      	beq.n	8001f48 <HAL_GPIO_Init+0x300>
 8001f40:	21da      	movs	r1, #218	; 0xda
 8001f42:	4848      	ldr	r0, [pc, #288]	; (8002064 <HAL_GPIO_Init+0x41c>)
 8001f44:	f006 ff0f 	bl	8008d66 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	2203      	movs	r2, #3
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43db      	mvns	r3, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	68da      	ldr	r2, [r3, #12]
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f7e:	2201      	movs	r2, #1
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	fa02 f303 	lsl.w	r3, r2, r3
 8001f86:	43db      	mvns	r3, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	091b      	lsrs	r3, r3, #4
 8001f94:	f003 0201 	and.w	r2, r3, #1
 8001f98:	69fb      	ldr	r3, [r7, #28]
 8001f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9e:	69ba      	ldr	r2, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fba:	43db      	mvns	r3, r3
 8001fbc:	69ba      	ldr	r2, [r7, #24]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	f000 80b2 	beq.w	800214c <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	4a1e      	ldr	r2, [pc, #120]	; (8002068 <HAL_GPIO_Init+0x420>)
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_GPIO_Init+0x420>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff6:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_GPIO_Init+0x420>)
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002004:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_GPIO_Init+0x424>)
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	089b      	lsrs	r3, r3, #2
 800200a:	3302      	adds	r3, #2
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	220f      	movs	r2, #15
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	4a11      	ldr	r2, [pc, #68]	; (8002070 <HAL_GPIO_Init+0x428>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d029      	beq.n	8002084 <HAL_GPIO_Init+0x43c>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <HAL_GPIO_Init+0x42c>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d013      	beq.n	8002060 <HAL_GPIO_Init+0x418>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <HAL_GPIO_Init+0x430>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d00d      	beq.n	800205c <HAL_GPIO_Init+0x414>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_GPIO_Init+0x434>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d007      	beq.n	8002058 <HAL_GPIO_Init+0x410>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_GPIO_Init+0x438>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d101      	bne.n	8002054 <HAL_GPIO_Init+0x40c>
 8002050:	2304      	movs	r3, #4
 8002052:	e018      	b.n	8002086 <HAL_GPIO_Init+0x43e>
 8002054:	2307      	movs	r3, #7
 8002056:	e016      	b.n	8002086 <HAL_GPIO_Init+0x43e>
 8002058:	2303      	movs	r3, #3
 800205a:	e014      	b.n	8002086 <HAL_GPIO_Init+0x43e>
 800205c:	2302      	movs	r3, #2
 800205e:	e012      	b.n	8002086 <HAL_GPIO_Init+0x43e>
 8002060:	2301      	movs	r3, #1
 8002062:	e010      	b.n	8002086 <HAL_GPIO_Init+0x43e>
 8002064:	0800cf84 	.word	0x0800cf84
 8002068:	40023800 	.word	0x40023800
 800206c:	40013800 	.word	0x40013800
 8002070:	40020000 	.word	0x40020000
 8002074:	40020400 	.word	0x40020400
 8002078:	40020800 	.word	0x40020800
 800207c:	40020c00 	.word	0x40020c00
 8002080:	40021000 	.word	0x40021000
 8002084:	2300      	movs	r3, #0
 8002086:	69fa      	ldr	r2, [r7, #28]
 8002088:	f002 0203 	and.w	r2, r2, #3
 800208c:	0092      	lsls	r2, r2, #2
 800208e:	4093      	lsls	r3, r2
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002096:	4933      	ldr	r1, [pc, #204]	; (8002164 <HAL_GPIO_Init+0x51c>)
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	089b      	lsrs	r3, r3, #2
 800209c:	3302      	adds	r3, #2
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a4:	4b30      	ldr	r3, [pc, #192]	; (8002168 <HAL_GPIO_Init+0x520>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d003      	beq.n	80020c8 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c8:	4a27      	ldr	r2, [pc, #156]	; (8002168 <HAL_GPIO_Init+0x520>)
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020ce:	4b26      	ldr	r3, [pc, #152]	; (8002168 <HAL_GPIO_Init+0x520>)
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d4:	693b      	ldr	r3, [r7, #16]
 80020d6:	43db      	mvns	r3, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4013      	ands	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 80020ea:	69ba      	ldr	r2, [r7, #24]
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020f2:	4a1d      	ldr	r2, [pc, #116]	; (8002168 <HAL_GPIO_Init+0x520>)
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_GPIO_Init+0x520>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d003      	beq.n	800211c <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	693b      	ldr	r3, [r7, #16]
 8002118:	4313      	orrs	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800211c:	4a12      	ldr	r2, [pc, #72]	; (8002168 <HAL_GPIO_Init+0x520>)
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <HAL_GPIO_Init+0x520>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	43db      	mvns	r3, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4013      	ands	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002146:	4a08      	ldr	r2, [pc, #32]	; (8002168 <HAL_GPIO_Init+0x520>)
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	3301      	adds	r3, #1
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	2b0f      	cmp	r3, #15
 8002156:	f67f ae15 	bls.w	8001d84 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 800215a:	bf00      	nop
 800215c:	3720      	adds	r7, #32
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40013800 	.word	0x40013800
 8002168:	40013c00 	.word	0x40013c00

0800216c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	460b      	mov	r3, r1
 8002176:	807b      	strh	r3, [r7, #2]
 8002178:	4613      	mov	r3, r2
 800217a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 800217c:	887b      	ldrh	r3, [r7, #2]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d004      	beq.n	800218c <HAL_GPIO_WritePin+0x20>
 8002182:	887b      	ldrh	r3, [r7, #2]
 8002184:	0c1b      	lsrs	r3, r3, #16
 8002186:	041b      	lsls	r3, r3, #16
 8002188:	2b00      	cmp	r3, #0
 800218a:	d004      	beq.n	8002196 <HAL_GPIO_WritePin+0x2a>
 800218c:	f240 119f 	movw	r1, #415	; 0x19f
 8002190:	480e      	ldr	r0, [pc, #56]	; (80021cc <HAL_GPIO_WritePin+0x60>)
 8002192:	f006 fde8 	bl	8008d66 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002196:	787b      	ldrb	r3, [r7, #1]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d007      	beq.n	80021ac <HAL_GPIO_WritePin+0x40>
 800219c:	787b      	ldrb	r3, [r7, #1]
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d004      	beq.n	80021ac <HAL_GPIO_WritePin+0x40>
 80021a2:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 80021a6:	4809      	ldr	r0, [pc, #36]	; (80021cc <HAL_GPIO_WritePin+0x60>)
 80021a8:	f006 fddd 	bl	8008d66 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80021ac:	787b      	ldrb	r3, [r7, #1]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d003      	beq.n	80021ba <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80021b2:	887a      	ldrh	r2, [r7, #2]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021b8:	e003      	b.n	80021c2 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021ba:	887b      	ldrh	r3, [r7, #2]
 80021bc:	041a      	lsls	r2, r3, #16
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	619a      	str	r2, [r3, #24]
}
 80021c2:	bf00      	nop
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	0800cf84 	.word	0x0800cf84

080021d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80021da:	4b08      	ldr	r3, [pc, #32]	; (80021fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021dc:	695a      	ldr	r2, [r3, #20]
 80021de:	88fb      	ldrh	r3, [r7, #6]
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d006      	beq.n	80021f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021e6:	4a05      	ldr	r2, [pc, #20]	; (80021fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021e8:	88fb      	ldrh	r3, [r7, #6]
 80021ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021ec:	88fb      	ldrh	r3, [r7, #6]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f005 fede 	bl	8007fb0 <HAL_GPIO_EXTI_Callback>
  }
}
 80021f4:	bf00      	nop
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40013c00 	.word	0x40013c00

08002200 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002200:	b590      	push	{r4, r7, lr}
 8002202:	b085      	sub	sp, #20
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e1a1      	b.n	8002556 <HAL_I2C_Init+0x356>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a9b      	ldr	r2, [pc, #620]	; (8002484 <HAL_I2C_Init+0x284>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d00e      	beq.n	800223a <HAL_I2C_Init+0x3a>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a99      	ldr	r2, [pc, #612]	; (8002488 <HAL_I2C_Init+0x288>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d009      	beq.n	800223a <HAL_I2C_Init+0x3a>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4a98      	ldr	r2, [pc, #608]	; (800248c <HAL_I2C_Init+0x28c>)
 800222c:	4293      	cmp	r3, r2
 800222e:	d004      	beq.n	800223a <HAL_I2C_Init+0x3a>
 8002230:	f240 11bb 	movw	r1, #443	; 0x1bb
 8002234:	4896      	ldr	r0, [pc, #600]	; (8002490 <HAL_I2C_Init+0x290>)
 8002236:	f006 fd96 	bl	8008d66 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d004      	beq.n	800224c <HAL_I2C_Init+0x4c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	4a93      	ldr	r2, [pc, #588]	; (8002494 <HAL_I2C_Init+0x294>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d904      	bls.n	8002256 <HAL_I2C_Init+0x56>
 800224c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
 8002250:	488f      	ldr	r0, [pc, #572]	; (8002490 <HAL_I2C_Init+0x290>)
 8002252:	f006 fd88 	bl	8008d66 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d009      	beq.n	8002272 <HAL_I2C_Init+0x72>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002266:	d004      	beq.n	8002272 <HAL_I2C_Init+0x72>
 8002268:	f240 11bd 	movw	r1, #445	; 0x1bd
 800226c:	4888      	ldr	r0, [pc, #544]	; (8002490 <HAL_I2C_Init+0x290>)
 800226e:	f006 fd7a 	bl	8008d66 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800227a:	f023 0303 	bic.w	r3, r3, #3
 800227e:	2b00      	cmp	r3, #0
 8002280:	d004      	beq.n	800228c <HAL_I2C_Init+0x8c>
 8002282:	f44f 71df 	mov.w	r1, #446	; 0x1be
 8002286:	4882      	ldr	r0, [pc, #520]	; (8002490 <HAL_I2C_Init+0x290>)
 8002288:	f006 fd6d 	bl	8008d66 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002294:	d009      	beq.n	80022aa <HAL_I2C_Init+0xaa>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800229e:	d004      	beq.n	80022aa <HAL_I2C_Init+0xaa>
 80022a0:	f240 11bf 	movw	r1, #447	; 0x1bf
 80022a4:	487a      	ldr	r0, [pc, #488]	; (8002490 <HAL_I2C_Init+0x290>)
 80022a6:	f006 fd5e 	bl	8008d66 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <HAL_I2C_Init+0xc4>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d004      	beq.n	80022c4 <HAL_I2C_Init+0xc4>
 80022ba:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
 80022be:	4874      	ldr	r0, [pc, #464]	; (8002490 <HAL_I2C_Init+0x290>)
 80022c0:	f006 fd51 	bl	8008d66 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	f023 03fe 	bic.w	r3, r3, #254	; 0xfe
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d004      	beq.n	80022da <HAL_I2C_Init+0xda>
 80022d0:	f240 11c1 	movw	r1, #449	; 0x1c1
 80022d4:	486e      	ldr	r0, [pc, #440]	; (8002490 <HAL_I2C_Init+0x290>)
 80022d6:	f006 fd46 	bl	8008d66 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d008      	beq.n	80022f4 <HAL_I2C_Init+0xf4>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69db      	ldr	r3, [r3, #28]
 80022e6:	2b40      	cmp	r3, #64	; 0x40
 80022e8:	d004      	beq.n	80022f4 <HAL_I2C_Init+0xf4>
 80022ea:	f44f 71e1 	mov.w	r1, #450	; 0x1c2
 80022ee:	4868      	ldr	r0, [pc, #416]	; (8002490 <HAL_I2C_Init+0x290>)
 80022f0:	f006 fd39 	bl	8008d66 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d008      	beq.n	800230e <HAL_I2C_Init+0x10e>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	2b80      	cmp	r3, #128	; 0x80
 8002302:	d004      	beq.n	800230e <HAL_I2C_Init+0x10e>
 8002304:	f240 11c3 	movw	r1, #451	; 0x1c3
 8002308:	4861      	ldr	r0, [pc, #388]	; (8002490 <HAL_I2C_Init+0x290>)
 800230a:	f006 fd2c 	bl	8008d66 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d106      	bne.n	8002328 <HAL_I2C_Init+0x128>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f006 fc40 	bl	8008ba8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2224      	movs	r2, #36	; 0x24
 800232c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	6812      	ldr	r2, [r2, #0]
 8002338:	6812      	ldr	r2, [r2, #0]
 800233a:	f022 0201 	bic.w	r2, r2, #1
 800233e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002340:	f001 fc9c 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 8002344:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4a53      	ldr	r2, [pc, #332]	; (8002498 <HAL_I2C_Init+0x298>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d807      	bhi.n	8002360 <HAL_I2C_Init+0x160>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	4a52      	ldr	r2, [pc, #328]	; (800249c <HAL_I2C_Init+0x29c>)
 8002354:	4293      	cmp	r3, r2
 8002356:	bf94      	ite	ls
 8002358:	2301      	movls	r3, #1
 800235a:	2300      	movhi	r3, #0
 800235c:	b2db      	uxtb	r3, r3
 800235e:	e006      	b.n	800236e <HAL_I2C_Init+0x16e>
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	4a4f      	ldr	r2, [pc, #316]	; (80024a0 <HAL_I2C_Init+0x2a0>)
 8002364:	4293      	cmp	r3, r2
 8002366:	bf94      	ite	ls
 8002368:	2301      	movls	r3, #1
 800236a:	2300      	movhi	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2C_Init+0x176>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e0ef      	b.n	8002556 <HAL_I2C_Init+0x356>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	4a4a      	ldr	r2, [pc, #296]	; (80024a4 <HAL_I2C_Init+0x2a4>)
 800237a:	fba2 2303 	umull	r2, r3, r2, r3
 800237e:	0c9b      	lsrs	r3, r3, #18
 8002380:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	6852      	ldr	r2, [r2, #4]
 800238c:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8002390:	68ba      	ldr	r2, [r7, #8]
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	483b      	ldr	r0, [pc, #236]	; (8002498 <HAL_I2C_Init+0x298>)
 80023aa:	4283      	cmp	r3, r0
 80023ac:	d802      	bhi.n	80023b4 <HAL_I2C_Init+0x1b4>
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	3301      	adds	r3, #1
 80023b2:	e009      	b.n	80023c8 <HAL_I2C_Init+0x1c8>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80023ba:	fb00 f303 	mul.w	r3, r0, r3
 80023be:	483a      	ldr	r0, [pc, #232]	; (80024a8 <HAL_I2C_Init+0x2a8>)
 80023c0:	fba0 0303 	umull	r0, r3, r0, r3
 80023c4:	099b      	lsrs	r3, r3, #6
 80023c6:	3301      	adds	r3, #1
 80023c8:	430b      	orrs	r3, r1
 80023ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6818      	ldr	r0, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	69db      	ldr	r3, [r3, #28]
 80023d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80023da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	492d      	ldr	r1, [pc, #180]	; (8002498 <HAL_I2C_Init+0x298>)
 80023e4:	428b      	cmp	r3, r1
 80023e6:	d80d      	bhi.n	8002404 <HAL_I2C_Init+0x204>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1e59      	subs	r1, r3, #1
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fc:	2b04      	cmp	r3, #4
 80023fe:	bf38      	it	cc
 8002400:	2304      	movcc	r3, #4
 8002402:	e063      	b.n	80024cc <HAL_I2C_Init+0x2cc>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d111      	bne.n	8002430 <HAL_I2C_Init+0x230>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1e5c      	subs	r4, r3, #1
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6859      	ldr	r1, [r3, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	440b      	add	r3, r1
 800241a:	fbb4 f3f3 	udiv	r3, r4, r3
 800241e:	3301      	adds	r3, #1
 8002420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	e012      	b.n	8002456 <HAL_I2C_Init+0x256>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	1e5c      	subs	r4, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6859      	ldr	r1, [r3, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	440b      	add	r3, r1
 800243e:	0099      	lsls	r1, r3, #2
 8002440:	440b      	add	r3, r1
 8002442:	fbb4 f3f3 	udiv	r3, r4, r3
 8002446:	3301      	adds	r3, #1
 8002448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800244c:	2b00      	cmp	r3, #0
 800244e:	bf0c      	ite	eq
 8002450:	2301      	moveq	r3, #1
 8002452:	2300      	movne	r3, #0
 8002454:	b2db      	uxtb	r3, r3
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <HAL_I2C_Init+0x25e>
 800245a:	2301      	movs	r3, #1
 800245c:	e036      	b.n	80024cc <HAL_I2C_Init+0x2cc>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	689b      	ldr	r3, [r3, #8]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d122      	bne.n	80024ac <HAL_I2C_Init+0x2ac>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1e5c      	subs	r4, r3, #1
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6859      	ldr	r1, [r3, #4]
 800246e:	460b      	mov	r3, r1
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	440b      	add	r3, r1
 8002474:	fbb4 f3f3 	udiv	r3, r4, r3
 8002478:	3301      	adds	r3, #1
 800247a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800247e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002482:	e023      	b.n	80024cc <HAL_I2C_Init+0x2cc>
 8002484:	40005400 	.word	0x40005400
 8002488:	40005800 	.word	0x40005800
 800248c:	40005c00 	.word	0x40005c00
 8002490:	0800cfc0 	.word	0x0800cfc0
 8002494:	00061a80 	.word	0x00061a80
 8002498:	000186a0 	.word	0x000186a0
 800249c:	001e847f 	.word	0x001e847f
 80024a0:	003d08ff 	.word	0x003d08ff
 80024a4:	431bde83 	.word	0x431bde83
 80024a8:	10624dd3 	.word	0x10624dd3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1e5c      	subs	r4, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	0099      	lsls	r1, r3, #2
 80024bc:	440b      	add	r3, r1
 80024be:	fbb4 f3f3 	udiv	r3, r4, r3
 80024c2:	3301      	adds	r3, #1
 80024c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	6812      	ldr	r2, [r2, #0]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	69d0      	ldr	r0, [r2, #28]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6a12      	ldr	r2, [r2, #32]
 80024e6:	4302      	orrs	r2, r0
 80024e8:	430a      	orrs	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80024fa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80024fe:	6879      	ldr	r1, [r7, #4]
 8002500:	6908      	ldr	r0, [r1, #16]
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	68c9      	ldr	r1, [r1, #12]
 8002506:	4301      	orrs	r1, r0
 8002508:	430b      	orrs	r3, r1
 800250a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6812      	ldr	r2, [r2, #0]
 8002514:	68d2      	ldr	r2, [r2, #12]
 8002516:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 800251a:	687a      	ldr	r2, [r7, #4]
 800251c:	6950      	ldr	r0, [r2, #20]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6992      	ldr	r2, [r2, #24]
 8002522:	4302      	orrs	r2, r0
 8002524:	430a      	orrs	r2, r1
 8002526:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	6812      	ldr	r2, [r2, #0]
 8002530:	6812      	ldr	r2, [r2, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2220      	movs	r2, #32
 8002542:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bd90      	pop	{r4, r7, pc}
 800255e:	bf00      	nop

08002560 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	607a      	str	r2, [r7, #4]
 800256a:	461a      	mov	r2, r3
 800256c:	460b      	mov	r3, r1
 800256e:	817b      	strh	r3, [r7, #10]
 8002570:	4613      	mov	r3, r2
 8002572:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7fe fd0a 	bl	8000f8c <HAL_GetTick>
 8002578:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b20      	cmp	r3, #32
 8002584:	f040 80e0 	bne.w	8002748 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	2319      	movs	r3, #25
 800258e:	2201      	movs	r2, #1
 8002590:	4970      	ldr	r1, [pc, #448]	; (8002754 <HAL_I2C_Master_Transmit+0x1f4>)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fc34 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800259e:	2302      	movs	r3, #2
 80025a0:	e0d3      	b.n	800274a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_I2C_Master_Transmit+0x50>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e0cc      	b.n	800274a <HAL_I2C_Master_Transmit+0x1ea>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d007      	beq.n	80025d6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	6812      	ldr	r2, [r2, #0]
 80025ce:	6812      	ldr	r2, [r2, #0]
 80025d0:	f042 0201 	orr.w	r2, r2, #1
 80025d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	68fa      	ldr	r2, [r7, #12]
 80025dc:	6812      	ldr	r2, [r2, #0]
 80025de:	6812      	ldr	r2, [r2, #0]
 80025e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2221      	movs	r2, #33	; 0x21
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2210      	movs	r2, #16
 80025f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	893a      	ldrh	r2, [r7, #8]
 8002606:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29a      	uxth	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4a50      	ldr	r2, [pc, #320]	; (8002758 <HAL_I2C_Master_Transmit+0x1f8>)
 8002616:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002618:	8979      	ldrh	r1, [r7, #10]
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	6a3a      	ldr	r2, [r7, #32]
 800261e:	68f8      	ldr	r0, [r7, #12]
 8002620:	f000 fac2 	bl	8002ba8 <I2C_MasterRequestWrite>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e08d      	b.n	800274a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800262e:	2300      	movs	r3, #0
 8002630:	613b      	str	r3, [r7, #16]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695b      	ldr	r3, [r3, #20]
 8002638:	613b      	str	r3, [r7, #16]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	699b      	ldr	r3, [r3, #24]
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002644:	e066      	b.n	8002714 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	6a39      	ldr	r1, [r7, #32]
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 fcae 	bl	8002fac <I2C_WaitOnTXEFlagUntilTimeout>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00d      	beq.n	8002672 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	2b04      	cmp	r3, #4
 800265c:	d107      	bne.n	800266e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	6812      	ldr	r2, [r2, #0]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800266c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06b      	b.n	800274a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800267a:	7812      	ldrb	r2, [r2, #0]
 800267c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	1c5a      	adds	r2, r3, #1
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	f003 0304 	and.w	r3, r3, #4
 80026ac:	2b04      	cmp	r3, #4
 80026ae:	d11b      	bne.n	80026e8 <HAL_I2C_Master_Transmit+0x188>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d017      	beq.n	80026e8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	68fa      	ldr	r2, [r7, #12]
 80026be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026c0:	7812      	ldrb	r2, [r2, #0]
 80026c2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e0:	3b01      	subs	r3, #1
 80026e2:	b29a      	uxth	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	6a39      	ldr	r1, [r7, #32]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 fc9e 	bl	800302e <I2C_WaitOnBTFFlagUntilTimeout>
 80026f2:	4603      	mov	r3, r0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00d      	beq.n	8002714 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d107      	bne.n	8002710 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	6812      	ldr	r2, [r2, #0]
 800270a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800270e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e01a      	b.n	800274a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002718:	2b00      	cmp	r3, #0
 800271a:	d194      	bne.n	8002646 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2220      	movs	r2, #32
 8002730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002744:	2300      	movs	r3, #0
 8002746:	e000      	b.n	800274a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002748:	2302      	movs	r3, #2
  }
}
 800274a:	4618      	mov	r0, r3
 800274c:	3718      	adds	r7, #24
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	00100002 	.word	0x00100002
 8002758:	ffff0000 	.word	0xffff0000

0800275c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08c      	sub	sp, #48	; 0x30
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	461a      	mov	r2, r3
 8002768:	460b      	mov	r3, r1
 800276a:	817b      	strh	r3, [r7, #10]
 800276c:	4613      	mov	r3, r2
 800276e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002770:	f7fe fc0c 	bl	8000f8c <HAL_GetTick>
 8002774:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b20      	cmp	r3, #32
 8002780:	f040 820b 	bne.w	8002b9a <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	2319      	movs	r3, #25
 800278a:	2201      	movs	r2, #1
 800278c:	497c      	ldr	r1, [pc, #496]	; (8002980 <HAL_I2C_Master_Receive+0x224>)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f000 fb36 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800279a:	2302      	movs	r3, #2
 800279c:	e1fe      	b.n	8002b9c <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d101      	bne.n	80027ac <HAL_I2C_Master_Receive+0x50>
 80027a8:	2302      	movs	r3, #2
 80027aa:	e1f7      	b.n	8002b9c <HAL_I2C_Master_Receive+0x440>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d007      	beq.n	80027d2 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	f042 0201 	orr.w	r2, r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027e0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2222      	movs	r2, #34	; 0x22
 80027e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2210      	movs	r2, #16
 80027ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	893a      	ldrh	r2, [r7, #8]
 8002802:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002808:	b29a      	uxth	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	4a5c      	ldr	r2, [pc, #368]	; (8002984 <HAL_I2C_Master_Receive+0x228>)
 8002812:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002814:	8979      	ldrh	r1, [r7, #10]
 8002816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fa3a 	bl	8002c94 <I2C_MasterRequestRead>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e1b8      	b.n	8002b9c <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282e:	2b00      	cmp	r3, #0
 8002830:	d113      	bne.n	800285a <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002832:	2300      	movs	r3, #0
 8002834:	623b      	str	r3, [r7, #32]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	623b      	str	r3, [r7, #32]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	699b      	ldr	r3, [r3, #24]
 8002844:	623b      	str	r3, [r7, #32]
 8002846:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	6812      	ldr	r2, [r2, #0]
 8002850:	6812      	ldr	r2, [r2, #0]
 8002852:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002856:	601a      	str	r2, [r3, #0]
 8002858:	e18c      	b.n	8002b74 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800285e:	2b01      	cmp	r3, #1
 8002860:	d11b      	bne.n	800289a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	6812      	ldr	r2, [r2, #0]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002870:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	695b      	ldr	r3, [r3, #20]
 800287c:	61fb      	str	r3, [r7, #28]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	61fb      	str	r3, [r7, #28]
 8002886:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	6812      	ldr	r2, [r2, #0]
 8002890:	6812      	ldr	r2, [r2, #0]
 8002892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	e16c      	b.n	8002b74 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d11b      	bne.n	80028da <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	68fa      	ldr	r2, [r7, #12]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028b0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028c0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c2:	2300      	movs	r3, #0
 80028c4:	61bb      	str	r3, [r7, #24]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	695b      	ldr	r3, [r3, #20]
 80028cc:	61bb      	str	r3, [r7, #24]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	61bb      	str	r3, [r7, #24]
 80028d6:	69bb      	ldr	r3, [r7, #24]
 80028d8:	e14c      	b.n	8002b74 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80028e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	617b      	str	r3, [r7, #20]
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002900:	e138      	b.n	8002b74 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002906:	2b03      	cmp	r3, #3
 8002908:	f200 80f1 	bhi.w	8002aee <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002910:	2b01      	cmp	r3, #1
 8002912:	d123      	bne.n	800295c <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002914:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002916:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002918:	68f8      	ldr	r0, [r7, #12]
 800291a:	f000 fbc9 	bl	80030b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 800291e:	4603      	mov	r3, r0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d001      	beq.n	8002928 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e139      	b.n	8002b9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	68fa      	ldr	r2, [r7, #12]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	6912      	ldr	r2, [r2, #16]
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	1c5a      	adds	r2, r3, #1
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002944:	3b01      	subs	r3, #1
 8002946:	b29a      	uxth	r2, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002950:	b29b      	uxth	r3, r3
 8002952:	3b01      	subs	r3, #1
 8002954:	b29a      	uxth	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	855a      	strh	r2, [r3, #42]	; 0x2a
 800295a:	e10b      	b.n	8002b74 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002960:	2b02      	cmp	r3, #2
 8002962:	d14e      	bne.n	8002a02 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296a:	2200      	movs	r2, #0
 800296c:	4906      	ldr	r1, [pc, #24]	; (8002988 <HAL_I2C_Master_Receive+0x22c>)
 800296e:	68f8      	ldr	r0, [r7, #12]
 8002970:	f000 fa46 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d008      	beq.n	800298c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e10e      	b.n	8002b9c <HAL_I2C_Master_Receive+0x440>
 800297e:	bf00      	nop
 8002980:	00100002 	.word	0x00100002
 8002984:	ffff0000 	.word	0xffff0000
 8002988:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68fa      	ldr	r2, [r7, #12]
 8002992:	6812      	ldr	r2, [r2, #0]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800299a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	6912      	ldr	r2, [r2, #16]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b8:	3b01      	subs	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	3b01      	subs	r3, #1
 80029c8:	b29a      	uxth	r2, r3
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	68fa      	ldr	r2, [r7, #12]
 80029d4:	6812      	ldr	r2, [r2, #0]
 80029d6:	6912      	ldr	r2, [r2, #16]
 80029d8:	b2d2      	uxtb	r2, r2
 80029da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e0:	1c5a      	adds	r2, r3, #1
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	3b01      	subs	r3, #1
 80029fa:	b29a      	uxth	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a00:	e0b8      	b.n	8002b74 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	2200      	movs	r2, #0
 8002a0a:	4966      	ldr	r1, [pc, #408]	; (8002ba4 <HAL_I2C_Master_Receive+0x448>)
 8002a0c:	68f8      	ldr	r0, [r7, #12]
 8002a0e:	f000 f9f7 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 8002a12:	4603      	mov	r3, r0
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d001      	beq.n	8002a1c <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0bf      	b.n	8002b9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	6812      	ldr	r2, [r2, #0]
 8002a24:	6812      	ldr	r2, [r2, #0]
 8002a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	68fa      	ldr	r2, [r7, #12]
 8002a32:	6812      	ldr	r2, [r2, #0]
 8002a34:	6912      	ldr	r2, [r2, #16]
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a48:	3b01      	subs	r3, #1
 8002a4a:	b29a      	uxth	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	3b01      	subs	r3, #1
 8002a58:	b29a      	uxth	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a64:	2200      	movs	r2, #0
 8002a66:	494f      	ldr	r1, [pc, #316]	; (8002ba4 <HAL_I2C_Master_Receive+0x448>)
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f9c9 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e091      	b.n	8002b9c <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	6812      	ldr	r2, [r2, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a86:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	6812      	ldr	r2, [r2, #0]
 8002a90:	6912      	ldr	r2, [r2, #16]
 8002a92:	b2d2      	uxtb	r2, r2
 8002a94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9a:	1c5a      	adds	r2, r3, #1
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa4:	3b01      	subs	r3, #1
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abe:	68fa      	ldr	r2, [r7, #12]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	6912      	ldr	r2, [r2, #16]
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002aec:	e042      	b.n	8002b74 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f000 fadc 	bl	80030b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e04c      	b.n	8002b9c <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	68fa      	ldr	r2, [r7, #12]
 8002b08:	6812      	ldr	r2, [r2, #0]
 8002b0a:	6912      	ldr	r2, [r2, #16]
 8002b0c:	b2d2      	uxtb	r2, r2
 8002b0e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	1c5a      	adds	r2, r3, #1
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695b      	ldr	r3, [r3, #20]
 8002b3a:	f003 0304 	and.w	r3, r3, #4
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d118      	bne.n	8002b74 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	6812      	ldr	r2, [r2, #0]
 8002b4a:	6912      	ldr	r2, [r2, #16]
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	1c5a      	adds	r2, r3, #1
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	3b01      	subs	r3, #1
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	f47f aec2 	bne.w	8002902 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2220      	movs	r2, #32
 8002b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b96:	2300      	movs	r3, #0
 8002b98:	e000      	b.n	8002b9c <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002b9a:	2302      	movs	r3, #2
  }
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	3728      	adds	r7, #40	; 0x28
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	00010004 	.word	0x00010004

08002ba8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b088      	sub	sp, #32
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	607a      	str	r2, [r7, #4]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b08      	cmp	r3, #8
 8002bc2:	d006      	beq.n	8002bd2 <I2C_MasterRequestWrite+0x2a>
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d003      	beq.n	8002bd2 <I2C_MasterRequestWrite+0x2a>
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002bd0:	d108      	bne.n	8002be4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68fa      	ldr	r2, [r7, #12]
 8002bd8:	6812      	ldr	r2, [r2, #0]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be0:	601a      	str	r2, [r3, #0]
 8002be2:	e00b      	b.n	8002bfc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	2b12      	cmp	r3, #18
 8002bea:	d107      	bne.n	8002bfc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bfa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	9300      	str	r3, [sp, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2200      	movs	r2, #0
 8002c04:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 f8f9 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d001      	beq.n	8002c18 <I2C_MasterRequestWrite+0x70>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e034      	b.n	8002c82 <I2C_MasterRequestWrite+0xda>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	691b      	ldr	r3, [r3, #16]
 8002c1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c20:	d107      	bne.n	8002c32 <I2C_MasterRequestWrite+0x8a>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	897a      	ldrh	r2, [r7, #10]
 8002c28:	b2d2      	uxtb	r2, r2
 8002c2a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c2e:	611a      	str	r2, [r3, #16]
 8002c30:	e01b      	b.n	8002c6a <I2C_MasterRequestWrite+0xc2>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	897a      	ldrh	r2, [r7, #10]
 8002c38:	11d2      	asrs	r2, r2, #7
 8002c3a:	b2d2      	uxtb	r2, r2
 8002c3c:	f002 0206 	and.w	r2, r2, #6
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	f062 020f 	orn	r2, r2, #15
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	490f      	ldr	r1, [pc, #60]	; (8002c8c <I2C_MasterRequestWrite+0xe4>)
 8002c50:	68f8      	ldr	r0, [r7, #12]
 8002c52:	f000 f92c 	bl	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <I2C_MasterRequestWrite+0xb8>
    {
      return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e010      	b.n	8002c82 <I2C_MasterRequestWrite+0xda>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	897a      	ldrh	r2, [r7, #10]
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	4908      	ldr	r1, [pc, #32]	; (8002c90 <I2C_MasterRequestWrite+0xe8>)
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f91c 	bl	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <I2C_MasterRequestWrite+0xd8>
  {
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <I2C_MasterRequestWrite+0xda>
  }

  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	00010008 	.word	0x00010008
 8002c90:	00010002 	.word	0x00010002

08002c94 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b088      	sub	sp, #32
 8002c98:	af02      	add	r7, sp, #8
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	603b      	str	r3, [r7, #0]
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	6812      	ldr	r2, [r2, #0]
 8002cb4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002cb8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	2b08      	cmp	r3, #8
 8002cbe:	d006      	beq.n	8002cce <I2C_MasterRequestRead+0x3a>
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d003      	beq.n	8002cce <I2C_MasterRequestRead+0x3a>
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002ccc:	d108      	bne.n	8002ce0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	68fa      	ldr	r2, [r7, #12]
 8002cd4:	6812      	ldr	r2, [r2, #0]
 8002cd6:	6812      	ldr	r2, [r2, #0]
 8002cd8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e00b      	b.n	8002cf8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	2b11      	cmp	r3, #17
 8002ce6:	d107      	bne.n	8002cf8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68fa      	ldr	r2, [r7, #12]
 8002cee:	6812      	ldr	r2, [r2, #0]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d04:	68f8      	ldr	r0, [r7, #12]
 8002d06:	f000 f87b 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <I2C_MasterRequestRead+0x80>
  {
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e06d      	b.n	8002df0 <I2C_MasterRequestRead+0x15c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d1c:	d108      	bne.n	8002d30 <I2C_MasterRequestRead+0x9c>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	897a      	ldrh	r2, [r7, #10]
 8002d24:	b2d2      	uxtb	r2, r2
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	b2d2      	uxtb	r2, r2
 8002d2c:	611a      	str	r2, [r3, #16]
 8002d2e:	e053      	b.n	8002dd8 <I2C_MasterRequestRead+0x144>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	897a      	ldrh	r2, [r7, #10]
 8002d36:	11d2      	asrs	r2, r2, #7
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	f002 0206 	and.w	r2, r2, #6
 8002d3e:	b2d2      	uxtb	r2, r2
 8002d40:	f062 020f 	orn	r2, r2, #15
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	492a      	ldr	r1, [pc, #168]	; (8002df8 <I2C_MasterRequestRead+0x164>)
 8002d4e:	68f8      	ldr	r0, [r7, #12]
 8002d50:	f000 f8ad 	bl	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d001      	beq.n	8002d5e <I2C_MasterRequestRead+0xca>
    {
      return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e048      	b.n	8002df0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	897a      	ldrh	r2, [r7, #10]
 8002d64:	b2d2      	uxtb	r2, r2
 8002d66:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4923      	ldr	r1, [pc, #140]	; (8002dfc <I2C_MasterRequestRead+0x168>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f89d 	bl	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <I2C_MasterRequestRead+0xea>
    {
      return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e038      	b.n	8002df0 <I2C_MasterRequestRead+0x15c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	695b      	ldr	r3, [r3, #20]
 8002d88:	613b      	str	r3, [r7, #16]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	699b      	ldr	r3, [r3, #24]
 8002d90:	613b      	str	r3, [r7, #16]
 8002d92:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	6812      	ldr	r2, [r2, #0]
 8002d9c:	6812      	ldr	r2, [r2, #0]
 8002d9e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002da2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	9300      	str	r3, [sp, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002db0:	68f8      	ldr	r0, [r7, #12]
 8002db2:	f000 f825 	bl	8002e00 <I2C_WaitOnFlagUntilTimeout>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d001      	beq.n	8002dc0 <I2C_MasterRequestRead+0x12c>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e017      	b.n	8002df0 <I2C_MasterRequestRead+0x15c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	897a      	ldrh	r2, [r7, #10]
 8002dc6:	11d2      	asrs	r2, r2, #7
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	f002 0206 	and.w	r2, r2, #6
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	f062 020e 	orn	r2, r2, #14
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4907      	ldr	r1, [pc, #28]	; (8002dfc <I2C_MasterRequestRead+0x168>)
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 f865 	bl	8002eae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <I2C_MasterRequestRead+0x15a>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e000      	b.n	8002df0 <I2C_MasterRequestRead+0x15c>
  }

  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3718      	adds	r7, #24
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	00010008 	.word	0x00010008
 8002dfc:	00010002 	.word	0x00010002

08002e00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e10:	e025      	b.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e18:	d021      	beq.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1a:	f7fe f8b7 	bl	8000f8c <HAL_GetTick>
 8002e1e:	4602      	mov	r2, r0
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	1ad2      	subs	r2, r2, r3
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d802      	bhi.n	8002e30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d116      	bne.n	8002e5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2200      	movs	r2, #0
 8002e34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	f043 0220 	orr.w	r2, r3, #32
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e023      	b.n	8002ea6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	0c1b      	lsrs	r3, r3, #16
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d10d      	bne.n	8002e84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	695b      	ldr	r3, [r3, #20]
 8002e6e:	43da      	mvns	r2, r3
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	4013      	ands	r3, r2
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	bf0c      	ite	eq
 8002e7a:	2301      	moveq	r3, #1
 8002e7c:	2300      	movne	r3, #0
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	461a      	mov	r2, r3
 8002e82:	e00c      	b.n	8002e9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	699b      	ldr	r3, [r3, #24]
 8002e8a:	43da      	mvns	r2, r3
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	bf0c      	ite	eq
 8002e96:	2301      	moveq	r3, #1
 8002e98:	2300      	movne	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	79fb      	ldrb	r3, [r7, #7]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d0b6      	beq.n	8002e12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b084      	sub	sp, #16
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	60f8      	str	r0, [r7, #12]
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ebc:	e051      	b.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ec8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ecc:	d123      	bne.n	8002f16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	6812      	ldr	r2, [r2, #0]
 8002ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002edc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ee6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	2200      	movs	r2, #0
 8002eec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2220      	movs	r2, #32
 8002ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f043 0204 	orr.w	r2, r3, #4
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e046      	b.n	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f1c:	d021      	beq.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f1e:	f7fe f835 	bl	8000f8c <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	1ad2      	subs	r2, r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d802      	bhi.n	8002f34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d116      	bne.n	8002f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	f043 0220 	orr.w	r2, r3, #32
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e020      	b.n	8002fa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	0c1b      	lsrs	r3, r3, #16
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d10c      	bne.n	8002f86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	43da      	mvns	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	4013      	ands	r3, r2
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	bf14      	ite	ne
 8002f7e:	2301      	movne	r3, #1
 8002f80:	2300      	moveq	r3, #0
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	e00b      	b.n	8002f9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	43da      	mvns	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	4013      	ands	r3, r2
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	bf14      	ite	ne
 8002f98:	2301      	movne	r3, #1
 8002f9a:	2300      	moveq	r3, #0
 8002f9c:	b2db      	uxtb	r3, r3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d18d      	bne.n	8002ebe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3710      	adds	r7, #16
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fb8:	e02d      	b.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f8ce 	bl	800315c <I2C_IsAcknowledgeFailed>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e02d      	b.n	8003026 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fd0:	d021      	beq.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd2:	f7fd ffdb 	bl	8000f8c <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	1ad2      	subs	r2, r2, r3
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d802      	bhi.n	8002fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d116      	bne.n	8003016 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f043 0220 	orr.w	r2, r3, #32
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2200      	movs	r2, #0
 800300e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e007      	b.n	8003026 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003020:	2b80      	cmp	r3, #128	; 0x80
 8003022:	d1ca      	bne.n	8002fba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b084      	sub	sp, #16
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800303a:	e02d      	b.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800303c:	68f8      	ldr	r0, [r7, #12]
 800303e:	f000 f88d 	bl	800315c <I2C_IsAcknowledgeFailed>
 8003042:	4603      	mov	r3, r0
 8003044:	2b00      	cmp	r3, #0
 8003046:	d001      	beq.n	800304c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e02d      	b.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003052:	d021      	beq.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003054:	f7fd ff9a 	bl	8000f8c <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	1ad2      	subs	r2, r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	429a      	cmp	r2, r3
 8003062:	d802      	bhi.n	800306a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d116      	bne.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e007      	b.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d1ca      	bne.n	800303c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b084      	sub	sp, #16
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030bc:	e042      	b.n	8003144 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d119      	bne.n	8003100 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f06f 0210 	mvn.w	r2, #16
 80030d4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2200      	movs	r2, #0
 80030da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e029      	b.n	8003154 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003100:	f7fd ff44 	bl	8000f8c <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	1ad2      	subs	r2, r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	429a      	cmp	r2, r3
 800310e:	d802      	bhi.n	8003116 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d116      	bne.n	8003144 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2220      	movs	r2, #32
 8003120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003130:	f043 0220 	orr.w	r2, r3, #32
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003140:	2301      	movs	r3, #1
 8003142:	e007      	b.n	8003154 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b40      	cmp	r3, #64	; 0x40
 8003150:	d1b5      	bne.n	80030be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800316e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003172:	d11b      	bne.n	80031ac <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800317c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2220      	movs	r2, #32
 8003188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	f043 0204 	orr.w	r2, r3, #4
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	370c      	adds	r7, #12
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
	...

080031bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e2e0      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2b0f      	cmp	r3, #15
 80031d4:	d903      	bls.n	80031de <HAL_RCC_OscConfig+0x22>
 80031d6:	21e8      	movs	r1, #232	; 0xe8
 80031d8:	48a3      	ldr	r0, [pc, #652]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 80031da:	f005 fdc4 	bl	8008d66 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	f000 8088 	beq.w	80032fc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00d      	beq.n	8003210 <HAL_RCC_OscConfig+0x54>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fc:	d008      	beq.n	8003210 <HAL_RCC_OscConfig+0x54>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003206:	d003      	beq.n	8003210 <HAL_RCC_OscConfig+0x54>
 8003208:	21ed      	movs	r1, #237	; 0xed
 800320a:	4897      	ldr	r0, [pc, #604]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800320c:	f005 fdab 	bl	8008d66 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003210:	4b96      	ldr	r3, [pc, #600]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b04      	cmp	r3, #4
 800321a:	d00c      	beq.n	8003236 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800321c:	4b93      	ldr	r3, [pc, #588]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003224:	2b08      	cmp	r3, #8
 8003226:	d112      	bne.n	800324e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003228:	4b90      	ldr	r3, [pc, #576]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003234:	d10b      	bne.n	800324e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003236:	4b8d      	ldr	r3, [pc, #564]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d05b      	beq.n	80032fa <HAL_RCC_OscConfig+0x13e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d157      	bne.n	80032fa <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e2a0      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003256:	d106      	bne.n	8003266 <HAL_RCC_OscConfig+0xaa>
 8003258:	4a84      	ldr	r2, [pc, #528]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 800325a:	4b84      	ldr	r3, [pc, #528]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003262:	6013      	str	r3, [r2, #0]
 8003264:	e01d      	b.n	80032a2 <HAL_RCC_OscConfig+0xe6>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800326e:	d10c      	bne.n	800328a <HAL_RCC_OscConfig+0xce>
 8003270:	4a7e      	ldr	r2, [pc, #504]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 8003272:	4b7e      	ldr	r3, [pc, #504]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4a7b      	ldr	r2, [pc, #492]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 800327e:	4b7b      	ldr	r3, [pc, #492]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003286:	6013      	str	r3, [r2, #0]
 8003288:	e00b      	b.n	80032a2 <HAL_RCC_OscConfig+0xe6>
 800328a:	4a78      	ldr	r2, [pc, #480]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 800328c:	4b77      	ldr	r3, [pc, #476]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003294:	6013      	str	r3, [r2, #0]
 8003296:	4a75      	ldr	r2, [pc, #468]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 8003298:	4b74      	ldr	r3, [pc, #464]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d013      	beq.n	80032d2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032aa:	f7fd fe6f 	bl	8000f8c <HAL_GetTick>
 80032ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032b0:	e008      	b.n	80032c4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032b2:	f7fd fe6b 	bl	8000f8c <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b64      	cmp	r3, #100	; 0x64
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e265      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c4:	4b69      	ldr	r3, [pc, #420]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0f0      	beq.n	80032b2 <HAL_RCC_OscConfig+0xf6>
 80032d0:	e014      	b.n	80032fc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fd fe5b 	bl	8000f8c <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032da:	f7fd fe57 	bl	8000f8c <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b64      	cmp	r3, #100	; 0x64
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e251      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ec:	4b5f      	ldr	r3, [pc, #380]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f0      	bne.n	80032da <HAL_RCC_OscConfig+0x11e>
 80032f8:	e000      	b.n	80032fc <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d079      	beq.n	80033fc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_RCC_OscConfig+0x166>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d004      	beq.n	8003322 <HAL_RCC_OscConfig+0x166>
 8003318:	f240 111f 	movw	r1, #287	; 0x11f
 800331c:	4852      	ldr	r0, [pc, #328]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800331e:	f005 fd22 	bl	8008d66 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	691b      	ldr	r3, [r3, #16]
 8003326:	2b1f      	cmp	r3, #31
 8003328:	d904      	bls.n	8003334 <HAL_RCC_OscConfig+0x178>
 800332a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800332e:	484e      	ldr	r0, [pc, #312]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 8003330:	f005 fd19 	bl	8008d66 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003334:	4b4d      	ldr	r3, [pc, #308]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f003 030c 	and.w	r3, r3, #12
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003340:	4b4a      	ldr	r3, [pc, #296]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003348:	2b08      	cmp	r3, #8
 800334a:	d11c      	bne.n	8003386 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800334c:	4b47      	ldr	r3, [pc, #284]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d116      	bne.n	8003386 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003358:	4b44      	ldr	r3, [pc, #272]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_OscConfig+0x1b4>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	68db      	ldr	r3, [r3, #12]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d001      	beq.n	8003370 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e20f      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003370:	493e      	ldr	r1, [pc, #248]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 8003372:	4b3e      	ldr	r3, [pc, #248]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003384:	e03a      	b.n	80033fc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	68db      	ldr	r3, [r3, #12]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d020      	beq.n	80033d0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800338e:	4b38      	ldr	r3, [pc, #224]	; (8003470 <HAL_RCC_OscConfig+0x2b4>)
 8003390:	2201      	movs	r2, #1
 8003392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fd fdfa 	bl	8000f8c <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800339c:	f7fd fdf6 	bl	8000f8c <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e1f0      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ae:	4b2f      	ldr	r3, [pc, #188]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0302 	and.w	r3, r3, #2
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d0f0      	beq.n	800339c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ba:	492c      	ldr	r1, [pc, #176]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 80033bc:	4b2b      	ldr	r3, [pc, #172]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]
 80033ce:	e015      	b.n	80033fc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033d0:	4b27      	ldr	r3, [pc, #156]	; (8003470 <HAL_RCC_OscConfig+0x2b4>)
 80033d2:	2200      	movs	r2, #0
 80033d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d6:	f7fd fdd9 	bl	8000f8c <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033de:	f7fd fdd5 	bl	8000f8c <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e1cf      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f0:	4b1e      	ldr	r3, [pc, #120]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f0      	bne.n	80033de <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f003 0308 	and.w	r3, r3, #8
 8003404:	2b00      	cmp	r3, #0
 8003406:	d046      	beq.n	8003496 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d008      	beq.n	8003422 <HAL_RCC_OscConfig+0x266>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	695b      	ldr	r3, [r3, #20]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d004      	beq.n	8003422 <HAL_RCC_OscConfig+0x266>
 8003418:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800341c:	4812      	ldr	r0, [pc, #72]	; (8003468 <HAL_RCC_OscConfig+0x2ac>)
 800341e:	f005 fca2 	bl	8008d66 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d016      	beq.n	8003458 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800342a:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_RCC_OscConfig+0x2b8>)
 800342c:	2201      	movs	r2, #1
 800342e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003430:	f7fd fdac 	bl	8000f8c <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003438:	f7fd fda8 	bl	8000f8c <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b02      	cmp	r3, #2
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1a2      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800344a:	4b08      	ldr	r3, [pc, #32]	; (800346c <HAL_RCC_OscConfig+0x2b0>)
 800344c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0x27c>
 8003456:	e01e      	b.n	8003496 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_RCC_OscConfig+0x2b8>)
 800345a:	2200      	movs	r2, #0
 800345c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800345e:	f7fd fd95 	bl	8000f8c <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003464:	e011      	b.n	800348a <HAL_RCC_OscConfig+0x2ce>
 8003466:	bf00      	nop
 8003468:	0800cff8 	.word	0x0800cff8
 800346c:	40023800 	.word	0x40023800
 8003470:	42470000 	.word	0x42470000
 8003474:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003478:	f7fd fd88 	bl	8000f8c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b02      	cmp	r3, #2
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e182      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800348a:	4b97      	ldr	r3, [pc, #604]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 800348c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0304 	and.w	r3, r3, #4
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 80a8 	beq.w	80035f4 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a4:	2300      	movs	r3, #0
 80034a6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00c      	beq.n	80034ca <HAL_RCC_OscConfig+0x30e>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d008      	beq.n	80034ca <HAL_RCC_OscConfig+0x30e>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b05      	cmp	r3, #5
 80034be:	d004      	beq.n	80034ca <HAL_RCC_OscConfig+0x30e>
 80034c0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80034c4:	4889      	ldr	r0, [pc, #548]	; (80036ec <HAL_RCC_OscConfig+0x530>)
 80034c6:	f005 fc4e 	bl	8008d66 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ca:	4b87      	ldr	r3, [pc, #540]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10f      	bne.n	80034f6 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]
 80034da:	4a83      	ldr	r2, [pc, #524]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 80034dc:	4b82      	ldr	r3, [pc, #520]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e4:	6413      	str	r3, [r2, #64]	; 0x40
 80034e6:	4b80      	ldr	r3, [pc, #512]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80034f2:	2301      	movs	r3, #1
 80034f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f6:	4b7e      	ldr	r3, [pc, #504]	; (80036f0 <HAL_RCC_OscConfig+0x534>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d118      	bne.n	8003534 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003502:	4a7b      	ldr	r2, [pc, #492]	; (80036f0 <HAL_RCC_OscConfig+0x534>)
 8003504:	4b7a      	ldr	r3, [pc, #488]	; (80036f0 <HAL_RCC_OscConfig+0x534>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800350e:	f7fd fd3d 	bl	8000f8c <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003516:	f7fd fd39 	bl	8000f8c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e133      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003528:	4b71      	ldr	r3, [pc, #452]	; (80036f0 <HAL_RCC_OscConfig+0x534>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003530:	2b00      	cmp	r3, #0
 8003532:	d0f0      	beq.n	8003516 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d106      	bne.n	800354a <HAL_RCC_OscConfig+0x38e>
 800353c:	4a6a      	ldr	r2, [pc, #424]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 800353e:	4b6a      	ldr	r3, [pc, #424]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 8003540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003542:	f043 0301 	orr.w	r3, r3, #1
 8003546:	6713      	str	r3, [r2, #112]	; 0x70
 8003548:	e01c      	b.n	8003584 <HAL_RCC_OscConfig+0x3c8>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	2b05      	cmp	r3, #5
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0x3b0>
 8003552:	4a65      	ldr	r2, [pc, #404]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 8003554:	4b64      	ldr	r3, [pc, #400]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 8003556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003558:	f043 0304 	orr.w	r3, r3, #4
 800355c:	6713      	str	r3, [r2, #112]	; 0x70
 800355e:	4a62      	ldr	r2, [pc, #392]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 8003560:	4b61      	ldr	r3, [pc, #388]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	f043 0301 	orr.w	r3, r3, #1
 8003568:	6713      	str	r3, [r2, #112]	; 0x70
 800356a:	e00b      	b.n	8003584 <HAL_RCC_OscConfig+0x3c8>
 800356c:	4a5e      	ldr	r2, [pc, #376]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 800356e:	4b5e      	ldr	r3, [pc, #376]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 8003570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	6713      	str	r3, [r2, #112]	; 0x70
 8003578:	4a5b      	ldr	r2, [pc, #364]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 800357a:	4b5b      	ldr	r3, [pc, #364]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	f023 0304 	bic.w	r3, r3, #4
 8003582:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	689b      	ldr	r3, [r3, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d015      	beq.n	80035b8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800358c:	f7fd fcfe 	bl	8000f8c <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003592:	e00a      	b.n	80035aa <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003594:	f7fd fcfa 	bl	8000f8c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	f241 3288 	movw	r2, #5000	; 0x1388
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d901      	bls.n	80035aa <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e0f2      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035aa:	4b4f      	ldr	r3, [pc, #316]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	f003 0302 	and.w	r3, r3, #2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d0ee      	beq.n	8003594 <HAL_RCC_OscConfig+0x3d8>
 80035b6:	e014      	b.n	80035e2 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b8:	f7fd fce8 	bl	8000f8c <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035be:	e00a      	b.n	80035d6 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035c0:	f7fd fce4 	bl	8000f8c <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e0dc      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d6:	4b44      	ldr	r3, [pc, #272]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 80035d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1ee      	bne.n	80035c0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d105      	bne.n	80035f4 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e8:	4a3f      	ldr	r2, [pc, #252]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 80035ea:	4b3f      	ldr	r3, [pc, #252]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00c      	beq.n	8003616 <HAL_RCC_OscConfig+0x45a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d008      	beq.n	8003616 <HAL_RCC_OscConfig+0x45a>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d004      	beq.n	8003616 <HAL_RCC_OscConfig+0x45a>
 800360c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8003610:	4836      	ldr	r0, [pc, #216]	; (80036ec <HAL_RCC_OscConfig+0x530>)
 8003612:	f005 fba8 	bl	8008d66 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80b7 	beq.w	800378e <HAL_RCC_OscConfig+0x5d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003620:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <HAL_RCC_OscConfig+0x52c>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	f003 030c 	and.w	r3, r3, #12
 8003628:	2b08      	cmp	r3, #8
 800362a:	f000 80ae 	beq.w	800378a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	699b      	ldr	r3, [r3, #24]
 8003632:	2b02      	cmp	r3, #2
 8003634:	f040 8092 	bne.w	800375c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	69db      	ldr	r3, [r3, #28]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d009      	beq.n	8003654 <HAL_RCC_OscConfig+0x498>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	69db      	ldr	r3, [r3, #28]
 8003644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003648:	d004      	beq.n	8003654 <HAL_RCC_OscConfig+0x498>
 800364a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800364e:	4827      	ldr	r0, [pc, #156]	; (80036ec <HAL_RCC_OscConfig+0x530>)
 8003650:	f005 fb89 	bl	8008d66 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	2b3f      	cmp	r3, #63	; 0x3f
 800365a:	d904      	bls.n	8003666 <HAL_RCC_OscConfig+0x4aa>
 800365c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8003660:	4822      	ldr	r0, [pc, #136]	; (80036ec <HAL_RCC_OscConfig+0x530>)
 8003662:	f005 fb80 	bl	8008d66 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366a:	2b31      	cmp	r3, #49	; 0x31
 800366c:	d904      	bls.n	8003678 <HAL_RCC_OscConfig+0x4bc>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003672:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8003676:	d904      	bls.n	8003682 <HAL_RCC_OscConfig+0x4c6>
 8003678:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800367c:	481b      	ldr	r0, [pc, #108]	; (80036ec <HAL_RCC_OscConfig+0x530>)
 800367e:	f005 fb72 	bl	8008d66 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003686:	2b02      	cmp	r3, #2
 8003688:	d010      	beq.n	80036ac <HAL_RCC_OscConfig+0x4f0>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	2b04      	cmp	r3, #4
 8003690:	d00c      	beq.n	80036ac <HAL_RCC_OscConfig+0x4f0>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	2b06      	cmp	r3, #6
 8003698:	d008      	beq.n	80036ac <HAL_RCC_OscConfig+0x4f0>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d004      	beq.n	80036ac <HAL_RCC_OscConfig+0x4f0>
 80036a2:	f240 11db 	movw	r1, #475	; 0x1db
 80036a6:	4811      	ldr	r0, [pc, #68]	; (80036ec <HAL_RCC_OscConfig+0x530>)
 80036a8:	f005 fb5d 	bl	8008d66 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d903      	bls.n	80036bc <HAL_RCC_OscConfig+0x500>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	2b0f      	cmp	r3, #15
 80036ba:	d904      	bls.n	80036c6 <HAL_RCC_OscConfig+0x50a>
 80036bc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80036c0:	480a      	ldr	r0, [pc, #40]	; (80036ec <HAL_RCC_OscConfig+0x530>)
 80036c2:	f005 fb50 	bl	8008d66 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036c6:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_RCC_OscConfig+0x538>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036cc:	f7fd fc5e 	bl	8000f8c <HAL_GetTick>
 80036d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036d2:	e011      	b.n	80036f8 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036d4:	f7fd fc5a 	bl	8000f8c <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d90a      	bls.n	80036f8 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e054      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
 80036e6:	bf00      	nop
 80036e8:	40023800 	.word	0x40023800
 80036ec:	0800cff8 	.word	0x0800cff8
 80036f0:	40007000 	.word	0x40007000
 80036f4:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f8:	4b27      	ldr	r3, [pc, #156]	; (8003798 <HAL_RCC_OscConfig+0x5dc>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e7      	bne.n	80036d4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003704:	4924      	ldr	r1, [pc, #144]	; (8003798 <HAL_RCC_OscConfig+0x5dc>)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	019b      	lsls	r3, r3, #6
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371c:	085b      	lsrs	r3, r3, #1
 800371e:	3b01      	subs	r3, #1
 8003720:	041b      	lsls	r3, r3, #16
 8003722:	431a      	orrs	r2, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372e:	4b1b      	ldr	r3, [pc, #108]	; (800379c <HAL_RCC_OscConfig+0x5e0>)
 8003730:	2201      	movs	r2, #1
 8003732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003734:	f7fd fc2a 	bl	8000f8c <HAL_GetTick>
 8003738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800373c:	f7fd fc26 	bl	8000f8c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e020      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800374e:	4b12      	ldr	r3, [pc, #72]	; (8003798 <HAL_RCC_OscConfig+0x5dc>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d0f0      	beq.n	800373c <HAL_RCC_OscConfig+0x580>
 800375a:	e018      	b.n	800378e <HAL_RCC_OscConfig+0x5d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375c:	4b0f      	ldr	r3, [pc, #60]	; (800379c <HAL_RCC_OscConfig+0x5e0>)
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003762:	f7fd fc13 	bl	8000f8c <HAL_GetTick>
 8003766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800376a:	f7fd fc0f 	bl	8000f8c <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e009      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800377c:	4b06      	ldr	r3, [pc, #24]	; (8003798 <HAL_RCC_OscConfig+0x5dc>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1f0      	bne.n	800376a <HAL_RCC_OscConfig+0x5ae>
 8003788:	e001      	b.n	800378e <HAL_RCC_OscConfig+0x5d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <HAL_RCC_OscConfig+0x5d4>
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}
 8003798:	40023800 	.word	0x40023800
 800379c:	42470060 	.word	0x42470060

080037a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b084      	sub	sp, #16
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d101      	bne.n	80037b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e172      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x24>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b0f      	cmp	r3, #15
 80037c2:	d904      	bls.n	80037ce <HAL_RCC_ClockConfig+0x2e>
 80037c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80037c8:	487b      	ldr	r0, [pc, #492]	; (80039b8 <HAL_RCC_ClockConfig+0x218>)
 80037ca:	f005 facc 	bl	8008d66 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d019      	beq.n	8003808 <HAL_RCC_ClockConfig+0x68>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d016      	beq.n	8003808 <HAL_RCC_ClockConfig+0x68>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d013      	beq.n	8003808 <HAL_RCC_ClockConfig+0x68>
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	2b03      	cmp	r3, #3
 80037e4:	d010      	beq.n	8003808 <HAL_RCC_ClockConfig+0x68>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d00d      	beq.n	8003808 <HAL_RCC_ClockConfig+0x68>
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	2b05      	cmp	r3, #5
 80037f0:	d00a      	beq.n	8003808 <HAL_RCC_ClockConfig+0x68>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b06      	cmp	r3, #6
 80037f6:	d007      	beq.n	8003808 <HAL_RCC_ClockConfig+0x68>
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	2b07      	cmp	r3, #7
 80037fc:	d004      	beq.n	8003808 <HAL_RCC_ClockConfig+0x68>
 80037fe:	f240 2141 	movw	r1, #577	; 0x241
 8003802:	486d      	ldr	r0, [pc, #436]	; (80039b8 <HAL_RCC_ClockConfig+0x218>)
 8003804:	f005 faaf 	bl	8008d66 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003808:	4b6c      	ldr	r3, [pc, #432]	; (80039bc <HAL_RCC_ClockConfig+0x21c>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 020f 	and.w	r2, r3, #15
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d20c      	bcs.n	8003830 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003816:	4b69      	ldr	r3, [pc, #420]	; (80039bc <HAL_RCC_ClockConfig+0x21c>)
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800381e:	4b67      	ldr	r3, [pc, #412]	; (80039bc <HAL_RCC_ClockConfig+0x21c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 020f 	and.w	r2, r3, #15
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	429a      	cmp	r2, r3
 800382a:	d001      	beq.n	8003830 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e134      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2fa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0302 	and.w	r3, r3, #2
 8003838:	2b00      	cmp	r3, #0
 800383a:	d049      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0304 	and.w	r3, r3, #4
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003848:	4a5d      	ldr	r2, [pc, #372]	; (80039c0 <HAL_RCC_ClockConfig+0x220>)
 800384a:	4b5d      	ldr	r3, [pc, #372]	; (80039c0 <HAL_RCC_ClockConfig+0x220>)
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0308 	and.w	r3, r3, #8
 800385c:	2b00      	cmp	r3, #0
 800385e:	d005      	beq.n	800386c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003860:	4a57      	ldr	r2, [pc, #348]	; (80039c0 <HAL_RCC_ClockConfig+0x220>)
 8003862:	4b57      	ldr	r3, [pc, #348]	; (80039c0 <HAL_RCC_ClockConfig+0x220>)
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d024      	beq.n	80038be <HAL_RCC_ClockConfig+0x11e>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b80      	cmp	r3, #128	; 0x80
 800387a:	d020      	beq.n	80038be <HAL_RCC_ClockConfig+0x11e>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	2b90      	cmp	r3, #144	; 0x90
 8003882:	d01c      	beq.n	80038be <HAL_RCC_ClockConfig+0x11e>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	2ba0      	cmp	r3, #160	; 0xa0
 800388a:	d018      	beq.n	80038be <HAL_RCC_ClockConfig+0x11e>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	2bb0      	cmp	r3, #176	; 0xb0
 8003892:	d014      	beq.n	80038be <HAL_RCC_ClockConfig+0x11e>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2bc0      	cmp	r3, #192	; 0xc0
 800389a:	d010      	beq.n	80038be <HAL_RCC_ClockConfig+0x11e>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2bd0      	cmp	r3, #208	; 0xd0
 80038a2:	d00c      	beq.n	80038be <HAL_RCC_ClockConfig+0x11e>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2be0      	cmp	r3, #224	; 0xe0
 80038aa:	d008      	beq.n	80038be <HAL_RCC_ClockConfig+0x11e>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	2bf0      	cmp	r3, #240	; 0xf0
 80038b2:	d004      	beq.n	80038be <HAL_RCC_ClockConfig+0x11e>
 80038b4:	f44f 7119 	mov.w	r1, #612	; 0x264
 80038b8:	483f      	ldr	r0, [pc, #252]	; (80039b8 <HAL_RCC_ClockConfig+0x218>)
 80038ba:	f005 fa54 	bl	8008d66 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038be:	4940      	ldr	r1, [pc, #256]	; (80039c0 <HAL_RCC_ClockConfig+0x220>)
 80038c0:	4b3f      	ldr	r3, [pc, #252]	; (80039c0 <HAL_RCC_ClockConfig+0x220>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d059      	beq.n	8003990 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d010      	beq.n	8003906 <HAL_RCC_ClockConfig+0x166>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d00c      	beq.n	8003906 <HAL_RCC_ClockConfig+0x166>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d008      	beq.n	8003906 <HAL_RCC_ClockConfig+0x166>
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	d004      	beq.n	8003906 <HAL_RCC_ClockConfig+0x166>
 80038fc:	f240 216b 	movw	r1, #619	; 0x26b
 8003900:	482d      	ldr	r0, [pc, #180]	; (80039b8 <HAL_RCC_ClockConfig+0x218>)
 8003902:	f005 fa30 	bl	8008d66 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800390e:	4b2c      	ldr	r3, [pc, #176]	; (80039c0 <HAL_RCC_ClockConfig+0x220>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d119      	bne.n	800394e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e0bd      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2fa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d003      	beq.n	800392e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392a:	2b03      	cmp	r3, #3
 800392c:	d107      	bne.n	800393e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392e:	4b24      	ldr	r3, [pc, #144]	; (80039c0 <HAL_RCC_ClockConfig+0x220>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d109      	bne.n	800394e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e0ad      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2fa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <HAL_RCC_ClockConfig+0x220>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e0a5      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2fa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394e:	491c      	ldr	r1, [pc, #112]	; (80039c0 <HAL_RCC_ClockConfig+0x220>)
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <HAL_RCC_ClockConfig+0x220>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 0203 	bic.w	r2, r3, #3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	4313      	orrs	r3, r2
 800395e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003960:	f7fd fb14 	bl	8000f8c <HAL_GetTick>
 8003964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003966:	e00a      	b.n	800397e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003968:	f7fd fb10 	bl	8000f8c <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	; 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e08d      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2fa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397e:	4b10      	ldr	r3, [pc, #64]	; (80039c0 <HAL_RCC_ClockConfig+0x220>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 020c 	and.w	r2, r3, #12
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	429a      	cmp	r2, r3
 800398e:	d1eb      	bne.n	8003968 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003990:	4b0a      	ldr	r3, [pc, #40]	; (80039bc <HAL_RCC_ClockConfig+0x21c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 020f 	and.w	r2, r3, #15
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	429a      	cmp	r2, r3
 800399c:	d912      	bls.n	80039c4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399e:	4b07      	ldr	r3, [pc, #28]	; (80039bc <HAL_RCC_ClockConfig+0x21c>)
 80039a0:	683a      	ldr	r2, [r7, #0]
 80039a2:	b2d2      	uxtb	r2, r2
 80039a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_ClockConfig+0x21c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 020f 	and.w	r2, r3, #15
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d007      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e070      	b.n	8003a9a <HAL_RCC_ClockConfig+0x2fa>
 80039b8:	0800cff8 	.word	0x0800cff8
 80039bc:	40023c00 	.word	0x40023c00
 80039c0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d025      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d018      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x26a>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e0:	d013      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x26a>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80039ea:	d00e      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x26a>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80039f4:	d009      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x26a>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80039fe:	d004      	beq.n	8003a0a <HAL_RCC_ClockConfig+0x26a>
 8003a00:	f240 21a9 	movw	r1, #681	; 0x2a9
 8003a04:	4827      	ldr	r0, [pc, #156]	; (8003aa4 <HAL_RCC_ClockConfig+0x304>)
 8003a06:	f005 f9ae 	bl	8008d66 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a0a:	4927      	ldr	r1, [pc, #156]	; (8003aa8 <HAL_RCC_ClockConfig+0x308>)
 8003a0c:	4b26      	ldr	r3, [pc, #152]	; (8003aa8 <HAL_RCC_ClockConfig+0x308>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0308 	and.w	r3, r3, #8
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d026      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d018      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x2c2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	691b      	ldr	r3, [r3, #16]
 8003a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a38:	d013      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x2c2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003a42:	d00e      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x2c2>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x2c2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8003a56:	d004      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x2c2>
 8003a58:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8003a5c:	4811      	ldr	r0, [pc, #68]	; (8003aa4 <HAL_RCC_ClockConfig+0x304>)
 8003a5e:	f005 f982 	bl	8008d66 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a62:	4911      	ldr	r1, [pc, #68]	; (8003aa8 <HAL_RCC_ClockConfig+0x308>)
 8003a64:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <HAL_RCC_ClockConfig+0x308>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	00db      	lsls	r3, r3, #3
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a76:	f000 f81d 	bl	8003ab4 <HAL_RCC_GetSysClockFreq>
 8003a7a:	4601      	mov	r1, r0
 8003a7c:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <HAL_RCC_ClockConfig+0x308>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	4a09      	ldr	r2, [pc, #36]	; (8003aac <HAL_RCC_ClockConfig+0x30c>)
 8003a88:	5cd3      	ldrb	r3, [r2, r3]
 8003a8a:	fa21 f303 	lsr.w	r3, r1, r3
 8003a8e:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <HAL_RCC_ClockConfig+0x310>)
 8003a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003a92:	2000      	movs	r0, #0
 8003a94:	f7fd fa36 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3710      	adds	r7, #16
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	0800cff8 	.word	0x0800cff8
 8003aa8:	40023800 	.word	0x40023800
 8003aac:	0800d7c0 	.word	0x0800d7c0
 8003ab0:	20000190 	.word	0x20000190

08003ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab8:	b08f      	sub	sp, #60	; 0x3c
 8003aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003acc:	4b62      	ldr	r3, [pc, #392]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 030c 	and.w	r3, r3, #12
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d007      	beq.n	8003ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ad8:	2b08      	cmp	r3, #8
 8003ada:	d008      	beq.n	8003aee <HAL_RCC_GetSysClockFreq+0x3a>
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f040 80b2 	bne.w	8003c46 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ae2:	4b5e      	ldr	r3, [pc, #376]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8003ae6:	e0b1      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ae8:	4b5d      	ldr	r3, [pc, #372]	; (8003c60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003aea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003aec:	e0ae      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003aee:	4b5a      	ldr	r3, [pc, #360]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003af8:	4b57      	ldr	r3, [pc, #348]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d04e      	beq.n	8003ba2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b04:	4b54      	ldr	r3, [pc, #336]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	099b      	lsrs	r3, r3, #6
 8003b0a:	f04f 0400 	mov.w	r4, #0
 8003b0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	ea01 0103 	and.w	r1, r1, r3
 8003b1a:	ea02 0204 	and.w	r2, r2, r4
 8003b1e:	460b      	mov	r3, r1
 8003b20:	4614      	mov	r4, r2
 8003b22:	0160      	lsls	r0, r4, #5
 8003b24:	6278      	str	r0, [r7, #36]	; 0x24
 8003b26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b28:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003b2c:	6278      	str	r0, [r7, #36]	; 0x24
 8003b2e:	015b      	lsls	r3, r3, #5
 8003b30:	623b      	str	r3, [r7, #32]
 8003b32:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003b36:	1a5b      	subs	r3, r3, r1
 8003b38:	eb64 0402 	sbc.w	r4, r4, r2
 8003b3c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003b40:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8003b44:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8003b48:	ebb8 0803 	subs.w	r8, r8, r3
 8003b4c:	eb69 0904 	sbc.w	r9, r9, r4
 8003b50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b54:	61fb      	str	r3, [r7, #28]
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003b62:	61bb      	str	r3, [r7, #24]
 8003b64:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8003b68:	eb18 0801 	adds.w	r8, r8, r1
 8003b6c:	eb49 0902 	adc.w	r9, r9, r2
 8003b70:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003b74:	617b      	str	r3, [r7, #20]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003b7c:	617b      	str	r3, [r7, #20]
 8003b7e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8003b88:	4640      	mov	r0, r8
 8003b8a:	4649      	mov	r1, r9
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	f04f 0400 	mov.w	r4, #0
 8003b92:	461a      	mov	r2, r3
 8003b94:	4623      	mov	r3, r4
 8003b96:	f7fd f80b 	bl	8000bb0 <__aeabi_uldivmod>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	460c      	mov	r4, r1
 8003b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003ba0:	e043      	b.n	8003c2a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba2:	4b2d      	ldr	r3, [pc, #180]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	099b      	lsrs	r3, r3, #6
 8003ba8:	f04f 0400 	mov.w	r4, #0
 8003bac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bb0:	f04f 0200 	mov.w	r2, #0
 8003bb4:	ea01 0103 	and.w	r1, r1, r3
 8003bb8:	ea02 0204 	and.w	r2, r2, r4
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4614      	mov	r4, r2
 8003bc0:	0160      	lsls	r0, r4, #5
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	015b      	lsls	r3, r3, #5
 8003bce:	60bb      	str	r3, [r7, #8]
 8003bd0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8003bd4:	1a5b      	subs	r3, r3, r1
 8003bd6:	eb64 0402 	sbc.w	r4, r4, r2
 8003bda:	01a6      	lsls	r6, r4, #6
 8003bdc:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8003be0:	019d      	lsls	r5, r3, #6
 8003be2:	1aed      	subs	r5, r5, r3
 8003be4:	eb66 0604 	sbc.w	r6, r6, r4
 8003be8:	00f3      	lsls	r3, r6, #3
 8003bea:	607b      	str	r3, [r7, #4]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003bf2:	607b      	str	r3, [r7, #4]
 8003bf4:	00eb      	lsls	r3, r5, #3
 8003bf6:	603b      	str	r3, [r7, #0]
 8003bf8:	e897 0060 	ldmia.w	r7, {r5, r6}
 8003bfc:	186d      	adds	r5, r5, r1
 8003bfe:	eb46 0602 	adc.w	r6, r6, r2
 8003c02:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8003c06:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8003c0a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8003c0e:	4655      	mov	r5, sl
 8003c10:	465e      	mov	r6, fp
 8003c12:	4628      	mov	r0, r5
 8003c14:	4631      	mov	r1, r6
 8003c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c18:	f04f 0400 	mov.w	r4, #0
 8003c1c:	461a      	mov	r2, r3
 8003c1e:	4623      	mov	r3, r4
 8003c20:	f7fc ffc6 	bl	8000bb0 <__aeabi_uldivmod>
 8003c24:	4603      	mov	r3, r0
 8003c26:	460c      	mov	r4, r1
 8003c28:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c2a:	4b0b      	ldr	r3, [pc, #44]	; (8003c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	0c1b      	lsrs	r3, r3, #16
 8003c30:	f003 0303 	and.w	r3, r3, #3
 8003c34:	3301      	adds	r3, #1
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8003c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c44:	e002      	b.n	8003c4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c46:	4b05      	ldr	r3, [pc, #20]	; (8003c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003c48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003c4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	373c      	adds	r7, #60	; 0x3c
 8003c52:	46bd      	mov	sp, r7
 8003c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	00f42400 	.word	0x00f42400
 8003c60:	007a1200 	.word	0x007a1200

08003c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c64:	b480      	push	{r7}
 8003c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c68:	4b03      	ldr	r3, [pc, #12]	; (8003c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000190 	.word	0x20000190

08003c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c80:	f7ff fff0 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003c84:	4601      	mov	r1, r0
 8003c86:	4b05      	ldr	r3, [pc, #20]	; (8003c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	0a9b      	lsrs	r3, r3, #10
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	4a03      	ldr	r2, [pc, #12]	; (8003ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c92:	5cd3      	ldrb	r3, [r2, r3]
 8003c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	0800d7d0 	.word	0x0800d7d0

08003ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ca8:	f7ff ffdc 	bl	8003c64 <HAL_RCC_GetHCLKFreq>
 8003cac:	4601      	mov	r1, r0
 8003cae:	4b05      	ldr	r3, [pc, #20]	; (8003cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	0b5b      	lsrs	r3, r3, #13
 8003cb4:	f003 0307 	and.w	r3, r3, #7
 8003cb8:	4a03      	ldr	r2, [pc, #12]	; (8003cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	40023800 	.word	0x40023800
 8003cc8:	0800d7d0 	.word	0x0800d7d0

08003ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e10d      	b.n	8003efa <HAL_SPI_Init+0x22e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a88      	ldr	r2, [pc, #544]	; (8003f04 <HAL_SPI_Init+0x238>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d013      	beq.n	8003d10 <HAL_SPI_Init+0x44>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a86      	ldr	r2, [pc, #536]	; (8003f08 <HAL_SPI_Init+0x23c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00e      	beq.n	8003d10 <HAL_SPI_Init+0x44>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a85      	ldr	r2, [pc, #532]	; (8003f0c <HAL_SPI_Init+0x240>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d009      	beq.n	8003d10 <HAL_SPI_Init+0x44>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a83      	ldr	r2, [pc, #524]	; (8003f10 <HAL_SPI_Init+0x244>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d004      	beq.n	8003d10 <HAL_SPI_Init+0x44>
 8003d06:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8003d0a:	4882      	ldr	r0, [pc, #520]	; (8003f14 <HAL_SPI_Init+0x248>)
 8003d0c:	f005 f82b 	bl	8008d66 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d009      	beq.n	8003d2c <HAL_SPI_Init+0x60>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d20:	d004      	beq.n	8003d2c <HAL_SPI_Init+0x60>
 8003d22:	f240 113f 	movw	r1, #319	; 0x13f
 8003d26:	487b      	ldr	r0, [pc, #492]	; (8003f14 <HAL_SPI_Init+0x248>)
 8003d28:	f005 f81d 	bl	8008d66 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	689b      	ldr	r3, [r3, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d00e      	beq.n	8003d52 <HAL_SPI_Init+0x86>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3c:	d009      	beq.n	8003d52 <HAL_SPI_Init+0x86>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d46:	d004      	beq.n	8003d52 <HAL_SPI_Init+0x86>
 8003d48:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8003d4c:	4871      	ldr	r0, [pc, #452]	; (8003f14 <HAL_SPI_Init+0x248>)
 8003d4e:	f005 f80a 	bl	8008d66 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5a:	d008      	beq.n	8003d6e <HAL_SPI_Init+0xa2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d004      	beq.n	8003d6e <HAL_SPI_Init+0xa2>
 8003d64:	f240 1141 	movw	r1, #321	; 0x141
 8003d68:	486a      	ldr	r0, [pc, #424]	; (8003f14 <HAL_SPI_Init+0x248>)
 8003d6a:	f004 fffc 	bl	8008d66 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d76:	d00d      	beq.n	8003d94 <HAL_SPI_Init+0xc8>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d009      	beq.n	8003d94 <HAL_SPI_Init+0xc8>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	699b      	ldr	r3, [r3, #24]
 8003d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d88:	d004      	beq.n	8003d94 <HAL_SPI_Init+0xc8>
 8003d8a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8003d8e:	4861      	ldr	r0, [pc, #388]	; (8003f14 <HAL_SPI_Init+0x248>)
 8003d90:	f004 ffe9 	bl	8008d66 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	69db      	ldr	r3, [r3, #28]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d020      	beq.n	8003dde <HAL_SPI_Init+0x112>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	69db      	ldr	r3, [r3, #28]
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d01c      	beq.n	8003dde <HAL_SPI_Init+0x112>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	2b10      	cmp	r3, #16
 8003daa:	d018      	beq.n	8003dde <HAL_SPI_Init+0x112>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	69db      	ldr	r3, [r3, #28]
 8003db0:	2b18      	cmp	r3, #24
 8003db2:	d014      	beq.n	8003dde <HAL_SPI_Init+0x112>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	69db      	ldr	r3, [r3, #28]
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	d010      	beq.n	8003dde <HAL_SPI_Init+0x112>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	2b28      	cmp	r3, #40	; 0x28
 8003dc2:	d00c      	beq.n	8003dde <HAL_SPI_Init+0x112>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	2b30      	cmp	r3, #48	; 0x30
 8003dca:	d008      	beq.n	8003dde <HAL_SPI_Init+0x112>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	2b38      	cmp	r3, #56	; 0x38
 8003dd2:	d004      	beq.n	8003dde <HAL_SPI_Init+0x112>
 8003dd4:	f240 1143 	movw	r1, #323	; 0x143
 8003dd8:	484e      	ldr	r0, [pc, #312]	; (8003f14 <HAL_SPI_Init+0x248>)
 8003dda:	f004 ffc4 	bl	8008d66 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a1b      	ldr	r3, [r3, #32]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d008      	beq.n	8003df8 <HAL_SPI_Init+0x12c>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a1b      	ldr	r3, [r3, #32]
 8003dea:	2b80      	cmp	r3, #128	; 0x80
 8003dec:	d004      	beq.n	8003df8 <HAL_SPI_Init+0x12c>
 8003dee:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8003df2:	4848      	ldr	r0, [pc, #288]	; (8003f14 <HAL_SPI_Init+0x248>)
 8003df4:	f004 ffb7 	bl	8008d66 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d008      	beq.n	8003e12 <HAL_SPI_Init+0x146>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	2b10      	cmp	r3, #16
 8003e06:	d004      	beq.n	8003e12 <HAL_SPI_Init+0x146>
 8003e08:	f240 1145 	movw	r1, #325	; 0x145
 8003e0c:	4841      	ldr	r0, [pc, #260]	; (8003f14 <HAL_SPI_Init+0x248>)
 8003e0e:	f004 ffaa 	bl	8008d66 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d119      	bne.n	8003e4e <HAL_SPI_Init+0x182>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d008      	beq.n	8003e34 <HAL_SPI_Init+0x168>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d004      	beq.n	8003e34 <HAL_SPI_Init+0x168>
 8003e2a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8003e2e:	4839      	ldr	r0, [pc, #228]	; (8003f14 <HAL_SPI_Init+0x248>)
 8003e30:	f004 ff99 	bl	8008d66 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d008      	beq.n	8003e4e <HAL_SPI_Init+0x182>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d004      	beq.n	8003e4e <HAL_SPI_Init+0x182>
 8003e44:	f240 1149 	movw	r1, #329	; 0x149
 8003e48:	4832      	ldr	r0, [pc, #200]	; (8003f14 <HAL_SPI_Init+0x248>)
 8003e4a:	f004 ff8c 	bl	8008d66 <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d106      	bne.n	8003e6e <HAL_SPI_Init+0x1a2>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f005 fa43 	bl	80092f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2202      	movs	r2, #2
 8003e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	6812      	ldr	r2, [r2, #0]
 8003e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	6851      	ldr	r1, [r2, #4]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6892      	ldr	r2, [r2, #8]
 8003e92:	4311      	orrs	r1, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	68d2      	ldr	r2, [r2, #12]
 8003e98:	4311      	orrs	r1, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6912      	ldr	r2, [r2, #16]
 8003e9e:	4311      	orrs	r1, r2
 8003ea0:	687a      	ldr	r2, [r7, #4]
 8003ea2:	6952      	ldr	r2, [r2, #20]
 8003ea4:	4311      	orrs	r1, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6992      	ldr	r2, [r2, #24]
 8003eaa:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003eae:	4311      	orrs	r1, r2
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	69d2      	ldr	r2, [r2, #28]
 8003eb4:	4311      	orrs	r1, r2
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	6a12      	ldr	r2, [r2, #32]
 8003eba:	4311      	orrs	r1, r2
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003ec0:	430a      	orrs	r2, r1
 8003ec2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	6992      	ldr	r2, [r2, #24]
 8003ecc:	0c12      	lsrs	r2, r2, #16
 8003ece:	f002 0104 	and.w	r1, r2, #4
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003ed6:	430a      	orrs	r2, r1
 8003ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	6812      	ldr	r2, [r2, #0]
 8003ee2:	69d2      	ldr	r2, [r2, #28]
 8003ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	40013000 	.word	0x40013000
 8003f08:	40003800 	.word	0x40003800
 8003f0c:	40003c00 	.word	0x40003c00
 8003f10:	40013400 	.word	0x40013400
 8003f14:	0800d030 	.word	0x0800d030

08003f18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08c      	sub	sp, #48	; 0x30
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f26:	2301      	movs	r3, #1
 8003f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d004      	beq.n	8003f42 <HAL_SPI_TransmitReceive+0x2a>
 8003f38:	f240 4155 	movw	r1, #1109	; 0x455
 8003f3c:	4884      	ldr	r0, [pc, #528]	; (8004150 <HAL_SPI_TransmitReceive+0x238>)
 8003f3e:	f004 ff12 	bl	8008d66 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_SPI_TransmitReceive+0x38>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e18b      	b.n	8004268 <HAL_SPI_TransmitReceive+0x350>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f58:	f7fd f818 	bl	8000f8c <HAL_GetTick>
 8003f5c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003f6e:	887b      	ldrh	r3, [r7, #2]
 8003f70:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d00f      	beq.n	8003f9a <HAL_SPI_TransmitReceive+0x82>
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f80:	d107      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d103      	bne.n	8003f92 <HAL_SPI_TransmitReceive+0x7a>
 8003f8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d003      	beq.n	8003f9a <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
 8003f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003f98:	e15c      	b.n	8004254 <HAL_SPI_TransmitReceive+0x33c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_SPI_TransmitReceive+0x94>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_SPI_TransmitReceive+0x94>
 8003fa6:	887b      	ldrh	r3, [r7, #2]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d103      	bne.n	8003fb4 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003fb2:	e14f      	b.n	8004254 <HAL_SPI_TransmitReceive+0x33c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b04      	cmp	r3, #4
 8003fbe:	d003      	beq.n	8003fc8 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2205      	movs	r2, #5
 8003fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	887a      	ldrh	r2, [r7, #2]
 8003fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	887a      	ldrh	r2, [r7, #2]
 8003fde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	887a      	ldrh	r2, [r7, #2]
 8003fea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	887a      	ldrh	r2, [r7, #2]
 8003ff0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d007      	beq.n	800401c <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	6812      	ldr	r2, [r2, #0]
 8004014:	6812      	ldr	r2, [r2, #0]
 8004016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800401a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004024:	d178      	bne.n	8004118 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d002      	beq.n	8004034 <HAL_SPI_TransmitReceive+0x11c>
 800402e:	8b7b      	ldrh	r3, [r7, #26]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d166      	bne.n	8004102 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800403c:	8812      	ldrh	r2, [r2, #0]
 800403e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	1c9a      	adds	r2, r3, #2
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800404e:	b29b      	uxth	r3, r3
 8004050:	3b01      	subs	r3, #1
 8004052:	b29a      	uxth	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004058:	e053      	b.n	8004102 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0302 	and.w	r3, r3, #2
 8004064:	2b02      	cmp	r3, #2
 8004066:	d11b      	bne.n	80040a0 <HAL_SPI_TransmitReceive+0x188>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800406c:	b29b      	uxth	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d016      	beq.n	80040a0 <HAL_SPI_TransmitReceive+0x188>
 8004072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004074:	2b01      	cmp	r3, #1
 8004076:	d113      	bne.n	80040a0 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004080:	8812      	ldrh	r2, [r2, #0]
 8004082:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	1c9a      	adds	r2, r3, #2
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004092:	b29b      	uxth	r3, r3
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 0301 	and.w	r3, r3, #1
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d119      	bne.n	80040e2 <HAL_SPI_TransmitReceive+0x1ca>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d014      	beq.n	80040e2 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	68d2      	ldr	r2, [r2, #12]
 80040c2:	b292      	uxth	r2, r2
 80040c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	1c9a      	adds	r2, r3, #2
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040de:	2301      	movs	r3, #1
 80040e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040e2:	f7fc ff53 	bl	8000f8c <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	1ad2      	subs	r2, r2, r3
 80040ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d307      	bcc.n	8004102 <HAL_SPI_TransmitReceive+0x1ea>
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f8:	d003      	beq.n	8004102 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004100:	e0a8      	b.n	8004254 <HAL_SPI_TransmitReceive+0x33c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1a6      	bne.n	800405a <HAL_SPI_TransmitReceive+0x142>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1a1      	bne.n	800405a <HAL_SPI_TransmitReceive+0x142>
 8004116:	e07f      	b.n	8004218 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d002      	beq.n	8004126 <HAL_SPI_TransmitReceive+0x20e>
 8004120:	8b7b      	ldrh	r3, [r7, #26]
 8004122:	2b01      	cmp	r3, #1
 8004124:	d16e      	bne.n	8004204 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	330c      	adds	r3, #12
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004142:	b29b      	uxth	r3, r3
 8004144:	3b01      	subs	r3, #1
 8004146:	b29a      	uxth	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800414c:	e05a      	b.n	8004204 <HAL_SPI_TransmitReceive+0x2ec>
 800414e:	bf00      	nop
 8004150:	0800d030 	.word	0x0800d030
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b02      	cmp	r3, #2
 8004160:	d11c      	bne.n	800419c <HAL_SPI_TransmitReceive+0x284>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d017      	beq.n	800419c <HAL_SPI_TransmitReceive+0x284>
 800416c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416e:	2b01      	cmp	r3, #1
 8004170:	d114      	bne.n	800419c <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	330c      	adds	r3, #12
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800417c:	7812      	ldrb	r2, [r2, #0]
 800417e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800418e:	b29b      	uxth	r3, r3
 8004190:	3b01      	subs	r3, #1
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004198:	2300      	movs	r3, #0
 800419a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f003 0301 	and.w	r3, r3, #1
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d119      	bne.n	80041de <HAL_SPI_TransmitReceive+0x2c6>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d014      	beq.n	80041de <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041b8:	68fa      	ldr	r2, [r7, #12]
 80041ba:	6812      	ldr	r2, [r2, #0]
 80041bc:	68d2      	ldr	r2, [r2, #12]
 80041be:	b2d2      	uxtb	r2, r2
 80041c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c6:	1c5a      	adds	r2, r3, #1
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	3b01      	subs	r3, #1
 80041d4:	b29a      	uxth	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041da:	2301      	movs	r3, #1
 80041dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041de:	f7fc fed5 	bl	8000f8c <HAL_GetTick>
 80041e2:	4602      	mov	r2, r0
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	1ad2      	subs	r2, r2, r3
 80041e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d303      	bcc.n	80041f6 <HAL_SPI_TransmitReceive+0x2de>
 80041ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041f4:	d102      	bne.n	80041fc <HAL_SPI_TransmitReceive+0x2e4>
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d103      	bne.n	8004204 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004202:	e027      	b.n	8004254 <HAL_SPI_TransmitReceive+0x33c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004208:	b29b      	uxth	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1a2      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x23c>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d19d      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800421a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f891 	bl	8004344 <SPI_EndRxTxTransaction>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d006      	beq.n	8004236 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	2220      	movs	r2, #32
 8004232:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004234:	e00e      	b.n	8004254 <HAL_SPI_TransmitReceive+0x33c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10a      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x33c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800423e:	2300      	movs	r3, #0
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	617b      	str	r3, [r7, #20]
 8004252:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004268:	4618      	mov	r0, r3
 800426a:	3730      	adds	r7, #48	; 0x30
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004280:	e04c      	b.n	800431c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004288:	d048      	beq.n	800431c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800428a:	f7fc fe7f 	bl	8000f8c <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	1ad2      	subs	r2, r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d202      	bcs.n	80042a0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d13d      	bne.n	800431c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	6812      	ldr	r2, [r2, #0]
 80042a8:	6852      	ldr	r2, [r2, #4]
 80042aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80042ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80042b8:	d111      	bne.n	80042de <SPI_WaitFlagStateUntilTimeout+0x6e>
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042c2:	d004      	beq.n	80042ce <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042cc:	d107      	bne.n	80042de <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	68fa      	ldr	r2, [r7, #12]
 80042d4:	6812      	ldr	r2, [r2, #0]
 80042d6:	6812      	ldr	r2, [r2, #0]
 80042d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042e6:	d10f      	bne.n	8004308 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	6812      	ldr	r2, [r2, #0]
 80042f0:	6812      	ldr	r2, [r2, #0]
 80042f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	6812      	ldr	r2, [r2, #0]
 8004300:	6812      	ldr	r2, [r2, #0]
 8004302:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004306:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e00f      	b.n	800433c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	689a      	ldr	r2, [r3, #8]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	401a      	ands	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	429a      	cmp	r2, r3
 800432a:	bf0c      	ite	eq
 800432c:	2301      	moveq	r3, #1
 800432e:	2300      	movne	r3, #0
 8004330:	b2db      	uxtb	r3, r3
 8004332:	461a      	mov	r2, r3
 8004334:	79fb      	ldrb	r3, [r7, #7]
 8004336:	429a      	cmp	r2, r3
 8004338:	d1a3      	bne.n	8004282 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800433a:	2300      	movs	r3, #0
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af02      	add	r7, sp, #8
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	9300      	str	r3, [sp, #0]
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	2200      	movs	r2, #0
 8004358:	2180      	movs	r1, #128	; 0x80
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f7ff ff88 	bl	8004270 <SPI_WaitFlagStateUntilTimeout>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d007      	beq.n	8004376 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	f043 0220 	orr.w	r2, r3, #32
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e000      	b.n	8004378 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b086      	sub	sp, #24
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e17e      	b.n	8004692 <HAL_TIM_Encoder_Init+0x312>
  }

  /* Check the parameters */
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d014      	beq.n	80043c6 <HAL_TIM_Encoder_Init+0x46>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	689b      	ldr	r3, [r3, #8]
 80043a0:	2b10      	cmp	r3, #16
 80043a2:	d010      	beq.n	80043c6 <HAL_TIM_Encoder_Init+0x46>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d00c      	beq.n	80043c6 <HAL_TIM_Encoder_Init+0x46>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	2b40      	cmp	r3, #64	; 0x40
 80043b2:	d008      	beq.n	80043c6 <HAL_TIM_Encoder_Init+0x46>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	2b60      	cmp	r3, #96	; 0x60
 80043ba:	d004      	beq.n	80043c6 <HAL_TIM_Encoder_Init+0x46>
 80043bc:	f640 2129 	movw	r1, #2601	; 0xa29
 80043c0:	4872      	ldr	r0, [pc, #456]	; (800458c <HAL_TIM_Encoder_Init+0x20c>)
 80043c2:	f004 fcd0 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00e      	beq.n	80043ec <HAL_TIM_Encoder_Init+0x6c>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043d6:	d009      	beq.n	80043ec <HAL_TIM_Encoder_Init+0x6c>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043e0:	d004      	beq.n	80043ec <HAL_TIM_Encoder_Init+0x6c>
 80043e2:	f640 212a 	movw	r1, #2602	; 0xa2a
 80043e6:	4869      	ldr	r0, [pc, #420]	; (800458c <HAL_TIM_Encoder_Init+0x20c>)
 80043e8:	f004 fcbd 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	699b      	ldr	r3, [r3, #24]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d008      	beq.n	8004406 <HAL_TIM_Encoder_Init+0x86>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	2b80      	cmp	r3, #128	; 0x80
 80043fa:	d004      	beq.n	8004406 <HAL_TIM_Encoder_Init+0x86>
 80043fc:	f640 212b 	movw	r1, #2603	; 0xa2b
 8004400:	4862      	ldr	r0, [pc, #392]	; (800458c <HAL_TIM_Encoder_Init+0x20c>)
 8004402:	f004 fcb0 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a61      	ldr	r2, [pc, #388]	; (8004590 <HAL_TIM_Encoder_Init+0x210>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d01d      	beq.n	800444c <HAL_TIM_Encoder_Init+0xcc>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004418:	d018      	beq.n	800444c <HAL_TIM_Encoder_Init+0xcc>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a5d      	ldr	r2, [pc, #372]	; (8004594 <HAL_TIM_Encoder_Init+0x214>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d013      	beq.n	800444c <HAL_TIM_Encoder_Init+0xcc>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a5b      	ldr	r2, [pc, #364]	; (8004598 <HAL_TIM_Encoder_Init+0x218>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d00e      	beq.n	800444c <HAL_TIM_Encoder_Init+0xcc>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a5a      	ldr	r2, [pc, #360]	; (800459c <HAL_TIM_Encoder_Init+0x21c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d009      	beq.n	800444c <HAL_TIM_Encoder_Init+0xcc>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4a58      	ldr	r2, [pc, #352]	; (80045a0 <HAL_TIM_Encoder_Init+0x220>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d004      	beq.n	800444c <HAL_TIM_Encoder_Init+0xcc>
 8004442:	f640 212c 	movw	r1, #2604	; 0xa2c
 8004446:	4851      	ldr	r0, [pc, #324]	; (800458c <HAL_TIM_Encoder_Init+0x20c>)
 8004448:	f004 fc8d 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d00c      	beq.n	800446e <HAL_TIM_Encoder_Init+0xee>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d008      	beq.n	800446e <HAL_TIM_Encoder_Init+0xee>
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	2b03      	cmp	r3, #3
 8004462:	d004      	beq.n	800446e <HAL_TIM_Encoder_Init+0xee>
 8004464:	f640 212d 	movw	r1, #2605	; 0xa2d
 8004468:	4848      	ldr	r0, [pc, #288]	; (800458c <HAL_TIM_Encoder_Init+0x20c>)
 800446a:	f004 fc7c 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d00c      	beq.n	8004490 <HAL_TIM_Encoder_Init+0x110>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d008      	beq.n	8004490 <HAL_TIM_Encoder_Init+0x110>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2b03      	cmp	r3, #3
 8004484:	d004      	beq.n	8004490 <HAL_TIM_Encoder_Init+0x110>
 8004486:	f640 212e 	movw	r1, #2606	; 0xa2e
 800448a:	4840      	ldr	r0, [pc, #256]	; (800458c <HAL_TIM_Encoder_Init+0x20c>)
 800448c:	f004 fc6b 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	699b      	ldr	r3, [r3, #24]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d00c      	beq.n	80044b2 <HAL_TIM_Encoder_Init+0x132>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	699b      	ldr	r3, [r3, #24]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d008      	beq.n	80044b2 <HAL_TIM_Encoder_Init+0x132>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d004      	beq.n	80044b2 <HAL_TIM_Encoder_Init+0x132>
 80044a8:	f640 212f 	movw	r1, #2607	; 0xa2f
 80044ac:	4837      	ldr	r0, [pc, #220]	; (800458c <HAL_TIM_Encoder_Init+0x20c>)
 80044ae:	f004 fc5a 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d00c      	beq.n	80044d4 <HAL_TIM_Encoder_Init+0x154>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d008      	beq.n	80044d4 <HAL_TIM_Encoder_Init+0x154>
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b0a      	cmp	r3, #10
 80044c8:	d004      	beq.n	80044d4 <HAL_TIM_Encoder_Init+0x154>
 80044ca:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 80044ce:	482f      	ldr	r0, [pc, #188]	; (800458c <HAL_TIM_Encoder_Init+0x20c>)
 80044d0:	f004 fc49 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC2Polarity));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	695b      	ldr	r3, [r3, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00c      	beq.n	80044f6 <HAL_TIM_Encoder_Init+0x176>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	695b      	ldr	r3, [r3, #20]
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d008      	beq.n	80044f6 <HAL_TIM_Encoder_Init+0x176>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	2b0a      	cmp	r3, #10
 80044ea:	d004      	beq.n	80044f6 <HAL_TIM_Encoder_Init+0x176>
 80044ec:	f640 2131 	movw	r1, #2609	; 0xa31
 80044f0:	4826      	ldr	r0, [pc, #152]	; (800458c <HAL_TIM_Encoder_Init+0x20c>)
 80044f2:	f004 fc38 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d010      	beq.n	8004520 <HAL_TIM_Encoder_Init+0x1a0>
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68db      	ldr	r3, [r3, #12]
 8004502:	2b04      	cmp	r3, #4
 8004504:	d00c      	beq.n	8004520 <HAL_TIM_Encoder_Init+0x1a0>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	68db      	ldr	r3, [r3, #12]
 800450a:	2b08      	cmp	r3, #8
 800450c:	d008      	beq.n	8004520 <HAL_TIM_Encoder_Init+0x1a0>
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	2b0c      	cmp	r3, #12
 8004514:	d004      	beq.n	8004520 <HAL_TIM_Encoder_Init+0x1a0>
 8004516:	f640 2132 	movw	r1, #2610	; 0xa32
 800451a:	481c      	ldr	r0, [pc, #112]	; (800458c <HAL_TIM_Encoder_Init+0x20c>)
 800451c:	f004 fc23 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	69db      	ldr	r3, [r3, #28]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d010      	beq.n	800454a <HAL_TIM_Encoder_Init+0x1ca>
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	69db      	ldr	r3, [r3, #28]
 800452c:	2b04      	cmp	r3, #4
 800452e:	d00c      	beq.n	800454a <HAL_TIM_Encoder_Init+0x1ca>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	2b08      	cmp	r3, #8
 8004536:	d008      	beq.n	800454a <HAL_TIM_Encoder_Init+0x1ca>
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	69db      	ldr	r3, [r3, #28]
 800453c:	2b0c      	cmp	r3, #12
 800453e:	d004      	beq.n	800454a <HAL_TIM_Encoder_Init+0x1ca>
 8004540:	f640 2133 	movw	r1, #2611	; 0xa33
 8004544:	4811      	ldr	r0, [pc, #68]	; (800458c <HAL_TIM_Encoder_Init+0x20c>)
 8004546:	f004 fc0e 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b0f      	cmp	r3, #15
 8004550:	d904      	bls.n	800455c <HAL_TIM_Encoder_Init+0x1dc>
 8004552:	f640 2134 	movw	r1, #2612	; 0xa34
 8004556:	480d      	ldr	r0, [pc, #52]	; (800458c <HAL_TIM_Encoder_Init+0x20c>)
 8004558:	f004 fc05 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	2b0f      	cmp	r3, #15
 8004562:	d904      	bls.n	800456e <HAL_TIM_Encoder_Init+0x1ee>
 8004564:	f640 2135 	movw	r1, #2613	; 0xa35
 8004568:	4808      	ldr	r0, [pc, #32]	; (800458c <HAL_TIM_Encoder_Init+0x20c>)
 800456a:	f004 fbfc 	bl	8008d66 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b00      	cmp	r3, #0
 8004578:	d114      	bne.n	80045a4 <HAL_TIM_Encoder_Init+0x224>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f005 f8f6 	bl	8009774 <HAL_TIM_Encoder_MspInit>
 8004588:	e00c      	b.n	80045a4 <HAL_TIM_Encoder_Init+0x224>
 800458a:	bf00      	nop
 800458c:	0800d068 	.word	0x0800d068
 8004590:	40010000 	.word	0x40010000
 8004594:	40000400 	.word	0x40000400
 8004598:	40000800 	.word	0x40000800
 800459c:	40000c00 	.word	0x40000c00
 80045a0:	40014000 	.word	0x40014000
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ba:	f023 0307 	bic.w	r3, r3, #7
 80045be:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	3304      	adds	r3, #4
 80045c8:	4619      	mov	r1, r3
 80045ca:	4610      	mov	r0, r2
 80045cc:	f000 f8cc 	bl	8004768 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	699b      	ldr	r3, [r3, #24]
 80045de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045f8:	f023 0303 	bic.w	r3, r3, #3
 80045fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	689a      	ldr	r2, [r3, #8]
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	699b      	ldr	r3, [r3, #24]
 8004606:	021b      	lsls	r3, r3, #8
 8004608:	4313      	orrs	r3, r2
 800460a:	693a      	ldr	r2, [r7, #16]
 800460c:	4313      	orrs	r3, r2
 800460e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004616:	f023 030c 	bic.w	r3, r3, #12
 800461a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68da      	ldr	r2, [r3, #12]
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	69db      	ldr	r3, [r3, #28]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	4313      	orrs	r3, r2
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	011a      	lsls	r2, r3, #4
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6a1b      	ldr	r3, [r3, #32]
 8004644:	031b      	lsls	r3, r3, #12
 8004646:	4313      	orrs	r3, r2
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004654:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800465c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	685a      	ldr	r2, [r3, #4]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	695b      	ldr	r3, [r3, #20]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	4313      	orrs	r3, r2
 800466a:	68fa      	ldr	r2, [r7, #12]
 800466c:	4313      	orrs	r3, r2
 800466e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3718      	adds	r7, #24
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop

0800469c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a29      	ldr	r2, [pc, #164]	; (8004750 <HAL_TIM_Encoder_Start+0xb4>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d01d      	beq.n	80046ec <HAL_TIM_Encoder_Start+0x50>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b8:	d018      	beq.n	80046ec <HAL_TIM_Encoder_Start+0x50>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a25      	ldr	r2, [pc, #148]	; (8004754 <HAL_TIM_Encoder_Start+0xb8>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d013      	beq.n	80046ec <HAL_TIM_Encoder_Start+0x50>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a23      	ldr	r2, [pc, #140]	; (8004758 <HAL_TIM_Encoder_Start+0xbc>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d00e      	beq.n	80046ec <HAL_TIM_Encoder_Start+0x50>
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a22      	ldr	r2, [pc, #136]	; (800475c <HAL_TIM_Encoder_Start+0xc0>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d009      	beq.n	80046ec <HAL_TIM_Encoder_Start+0x50>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a20      	ldr	r2, [pc, #128]	; (8004760 <HAL_TIM_Encoder_Start+0xc4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d004      	beq.n	80046ec <HAL_TIM_Encoder_Start+0x50>
 80046e2:	f640 21cf 	movw	r1, #2767	; 0xacf
 80046e6:	481f      	ldr	r0, [pc, #124]	; (8004764 <HAL_TIM_Encoder_Start+0xc8>)
 80046e8:	f004 fb3d 	bl	8008d66 <assert_failed>

  /* Enable the encoder interface channels */
  switch (Channel)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d002      	beq.n	80046f8 <HAL_TIM_Encoder_Start+0x5c>
 80046f2:	2b04      	cmp	r3, #4
 80046f4:	d008      	beq.n	8004708 <HAL_TIM_Encoder_Start+0x6c>
 80046f6:	e00f      	b.n	8004718 <HAL_TIM_Encoder_Start+0x7c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	2201      	movs	r2, #1
 80046fe:	2100      	movs	r1, #0
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f8b1 	bl	8004868 <TIM_CCxChannelCmd>
      break;
 8004706:	e016      	b.n	8004736 <HAL_TIM_Encoder_Start+0x9a>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2201      	movs	r2, #1
 800470e:	2104      	movs	r1, #4
 8004710:	4618      	mov	r0, r3
 8004712:	f000 f8a9 	bl	8004868 <TIM_CCxChannelCmd>
      break;
 8004716:	e00e      	b.n	8004736 <HAL_TIM_Encoder_Start+0x9a>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2201      	movs	r2, #1
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f000 f8a1 	bl	8004868 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2201      	movs	r2, #1
 800472c:	2104      	movs	r1, #4
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f89a 	bl	8004868 <TIM_CCxChannelCmd>
      break;
 8004734:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	6812      	ldr	r2, [r2, #0]
 8004740:	f042 0201 	orr.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3708      	adds	r7, #8
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40010000 	.word	0x40010000
 8004754:	40000400 	.word	0x40000400
 8004758:	40000800 	.word	0x40000800
 800475c:	40000c00 	.word	0x40000c00
 8004760:	40014000 	.word	0x40014000
 8004764:	0800d068 	.word	0x0800d068

08004768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a34      	ldr	r2, [pc, #208]	; (800484c <TIM_Base_SetConfig+0xe4>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d00f      	beq.n	80047a0 <TIM_Base_SetConfig+0x38>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004786:	d00b      	beq.n	80047a0 <TIM_Base_SetConfig+0x38>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4a31      	ldr	r2, [pc, #196]	; (8004850 <TIM_Base_SetConfig+0xe8>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d007      	beq.n	80047a0 <TIM_Base_SetConfig+0x38>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a30      	ldr	r2, [pc, #192]	; (8004854 <TIM_Base_SetConfig+0xec>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_Base_SetConfig+0x38>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a2f      	ldr	r2, [pc, #188]	; (8004858 <TIM_Base_SetConfig+0xf0>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d108      	bne.n	80047b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a25      	ldr	r2, [pc, #148]	; (800484c <TIM_Base_SetConfig+0xe4>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01b      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047c0:	d017      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a22      	ldr	r2, [pc, #136]	; (8004850 <TIM_Base_SetConfig+0xe8>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d013      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a21      	ldr	r2, [pc, #132]	; (8004854 <TIM_Base_SetConfig+0xec>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d00f      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a20      	ldr	r2, [pc, #128]	; (8004858 <TIM_Base_SetConfig+0xf0>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00b      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a1f      	ldr	r2, [pc, #124]	; (800485c <TIM_Base_SetConfig+0xf4>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d007      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a1e      	ldr	r2, [pc, #120]	; (8004860 <TIM_Base_SetConfig+0xf8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d003      	beq.n	80047f2 <TIM_Base_SetConfig+0x8a>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a1d      	ldr	r2, [pc, #116]	; (8004864 <TIM_Base_SetConfig+0xfc>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d108      	bne.n	8004804 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	689a      	ldr	r2, [r3, #8]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	4a08      	ldr	r2, [pc, #32]	; (800484c <TIM_Base_SetConfig+0xe4>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d103      	bne.n	8004838 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	691a      	ldr	r2, [r3, #16]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	615a      	str	r2, [r3, #20]
}
 800483e:	bf00      	nop
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40010000 	.word	0x40010000
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40000c00 	.word	0x40000c00
 800485c:	40014000 	.word	0x40014000
 8004860:	40014400 	.word	0x40014400
 8004864:	40014800 	.word	0x40014800

08004868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4a2a      	ldr	r2, [pc, #168]	; (8004920 <TIM_CCxChannelCmd+0xb8>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d020      	beq.n	80048be <TIM_CCxChannelCmd+0x56>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004882:	d01c      	beq.n	80048be <TIM_CCxChannelCmd+0x56>
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4a27      	ldr	r2, [pc, #156]	; (8004924 <TIM_CCxChannelCmd+0xbc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d018      	beq.n	80048be <TIM_CCxChannelCmd+0x56>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	4a26      	ldr	r2, [pc, #152]	; (8004928 <TIM_CCxChannelCmd+0xc0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d014      	beq.n	80048be <TIM_CCxChannelCmd+0x56>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4a25      	ldr	r2, [pc, #148]	; (800492c <TIM_CCxChannelCmd+0xc4>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d010      	beq.n	80048be <TIM_CCxChannelCmd+0x56>
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	4a24      	ldr	r2, [pc, #144]	; (8004930 <TIM_CCxChannelCmd+0xc8>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00c      	beq.n	80048be <TIM_CCxChannelCmd+0x56>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4a23      	ldr	r2, [pc, #140]	; (8004934 <TIM_CCxChannelCmd+0xcc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d008      	beq.n	80048be <TIM_CCxChannelCmd+0x56>
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4a22      	ldr	r2, [pc, #136]	; (8004938 <TIM_CCxChannelCmd+0xd0>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d004      	beq.n	80048be <TIM_CCxChannelCmd+0x56>
 80048b4:	f641 11b7 	movw	r1, #6583	; 0x19b7
 80048b8:	4820      	ldr	r0, [pc, #128]	; (800493c <TIM_CCxChannelCmd+0xd4>)
 80048ba:	f004 fa54 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d010      	beq.n	80048e6 <TIM_CCxChannelCmd+0x7e>
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d00d      	beq.n	80048e6 <TIM_CCxChannelCmd+0x7e>
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d00a      	beq.n	80048e6 <TIM_CCxChannelCmd+0x7e>
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b0c      	cmp	r3, #12
 80048d4:	d007      	beq.n	80048e6 <TIM_CCxChannelCmd+0x7e>
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	2b3c      	cmp	r3, #60	; 0x3c
 80048da:	d004      	beq.n	80048e6 <TIM_CCxChannelCmd+0x7e>
 80048dc:	f641 11b8 	movw	r1, #6584	; 0x19b8
 80048e0:	4816      	ldr	r0, [pc, #88]	; (800493c <TIM_CCxChannelCmd+0xd4>)
 80048e2:	f004 fa40 	bl	8008d66 <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	f003 031f 	and.w	r3, r3, #31
 80048ec:	2201      	movs	r2, #1
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a1a      	ldr	r2, [r3, #32]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	43db      	mvns	r3, r3
 80048fc:	401a      	ands	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6a1a      	ldr	r2, [r3, #32]
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	f003 031f 	and.w	r3, r3, #31
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	fa01 f303 	lsl.w	r3, r1, r3
 8004912:	431a      	orrs	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	621a      	str	r2, [r3, #32]
}
 8004918:	bf00      	nop
 800491a:	3718      	adds	r7, #24
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}
 8004920:	40010000 	.word	0x40010000
 8004924:	40000400 	.word	0x40000400
 8004928:	40000800 	.word	0x40000800
 800492c:	40000c00 	.word	0x40000c00
 8004930:	40014000 	.word	0x40014000
 8004934:	40014400 	.word	0x40014400
 8004938:	40014800 	.word	0x40014800
 800493c:	0800d068 	.word	0x0800d068

08004940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a46      	ldr	r2, [pc, #280]	; (8004a68 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d018      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800495c:	d013      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a42      	ldr	r2, [pc, #264]	; (8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d00e      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a40      	ldr	r2, [pc, #256]	; (8004a70 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d009      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a3f      	ldr	r2, [pc, #252]	; (8004a74 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d004      	beq.n	8004986 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800497c:	f240 6161 	movw	r1, #1633	; 0x661
 8004980:	483d      	ldr	r0, [pc, #244]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 8004982:	f004 f9f0 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d020      	beq.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2b10      	cmp	r3, #16
 8004994:	d01c      	beq.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b20      	cmp	r3, #32
 800499c:	d018      	beq.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2b30      	cmp	r3, #48	; 0x30
 80049a4:	d014      	beq.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b40      	cmp	r3, #64	; 0x40
 80049ac:	d010      	beq.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b50      	cmp	r3, #80	; 0x50
 80049b4:	d00c      	beq.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b60      	cmp	r3, #96	; 0x60
 80049bc:	d008      	beq.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	2b70      	cmp	r3, #112	; 0x70
 80049c4:	d004      	beq.n	80049d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80049c6:	f240 6162 	movw	r1, #1634	; 0x662
 80049ca:	482b      	ldr	r0, [pc, #172]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 80049cc:	f004 f9cb 	bl	8008d66 <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b80      	cmp	r3, #128	; 0x80
 80049d6:	d008      	beq.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d004      	beq.n	80049ea <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80049e0:	f240 6163 	movw	r1, #1635	; 0x663
 80049e4:	4824      	ldr	r0, [pc, #144]	; (8004a78 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 80049e6:	f004 f9be 	bl	8008d66 <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e032      	b.n	8004a5e <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a30:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68ba      	ldr	r2, [r7, #8]
 8004a4a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a5c:	2300      	movs	r3, #0
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	0800d0a0 	.word	0x0800d0a0

08004a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e0a0      	b.n	8004bd0 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	699b      	ldr	r3, [r3, #24]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d02c      	beq.n	8004af0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a4f      	ldr	r2, [pc, #316]	; (8004bd8 <HAL_UART_Init+0x15c>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d00e      	beq.n	8004abe <HAL_UART_Init+0x42>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a4d      	ldr	r2, [pc, #308]	; (8004bdc <HAL_UART_Init+0x160>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d009      	beq.n	8004abe <HAL_UART_Init+0x42>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a4c      	ldr	r2, [pc, #304]	; (8004be0 <HAL_UART_Init+0x164>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d004      	beq.n	8004abe <HAL_UART_Init+0x42>
 8004ab4:	f240 1149 	movw	r1, #329	; 0x149
 8004ab8:	484a      	ldr	r0, [pc, #296]	; (8004be4 <HAL_UART_Init+0x168>)
 8004aba:	f004 f954 	bl	8008d66 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d028      	beq.n	8004b18 <HAL_UART_Init+0x9c>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ace:	d023      	beq.n	8004b18 <HAL_UART_Init+0x9c>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad8:	d01e      	beq.n	8004b18 <HAL_UART_Init+0x9c>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ae2:	d019      	beq.n	8004b18 <HAL_UART_Init+0x9c>
 8004ae4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8004ae8:	483e      	ldr	r0, [pc, #248]	; (8004be4 <HAL_UART_Init+0x168>)
 8004aea:	f004 f93c 	bl	8008d66 <assert_failed>
 8004aee:	e013      	b.n	8004b18 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a38      	ldr	r2, [pc, #224]	; (8004bd8 <HAL_UART_Init+0x15c>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d00e      	beq.n	8004b18 <HAL_UART_Init+0x9c>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a37      	ldr	r2, [pc, #220]	; (8004bdc <HAL_UART_Init+0x160>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d009      	beq.n	8004b18 <HAL_UART_Init+0x9c>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a35      	ldr	r2, [pc, #212]	; (8004be0 <HAL_UART_Init+0x164>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <HAL_UART_Init+0x9c>
 8004b0e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8004b12:	4834      	ldr	r0, [pc, #208]	; (8004be4 <HAL_UART_Init+0x168>)
 8004b14:	f004 f927 	bl	8008d66 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d009      	beq.n	8004b34 <HAL_UART_Init+0xb8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b28:	d004      	beq.n	8004b34 <HAL_UART_Init+0xb8>
 8004b2a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8004b2e:	482d      	ldr	r0, [pc, #180]	; (8004be4 <HAL_UART_Init+0x168>)
 8004b30:	f004 f919 	bl	8008d66 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d009      	beq.n	8004b50 <HAL_UART_Init+0xd4>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b44:	d004      	beq.n	8004b50 <HAL_UART_Init+0xd4>
 8004b46:	f240 1151 	movw	r1, #337	; 0x151
 8004b4a:	4826      	ldr	r0, [pc, #152]	; (8004be4 <HAL_UART_Init+0x168>)
 8004b4c:	f004 f90b 	bl	8008d66 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d106      	bne.n	8004b6a <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f004 fedf 	bl	8009928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2224      	movs	r2, #36	; 0x24
 8004b6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	687a      	ldr	r2, [r7, #4]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	68d2      	ldr	r2, [r2, #12]
 8004b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b82:	6878      	ldr	r0, [r7, #4]
 8004b84:	f000 f98e 	bl	8004ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	6812      	ldr	r2, [r2, #0]
 8004b90:	6912      	ldr	r2, [r2, #16]
 8004b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	6812      	ldr	r2, [r2, #0]
 8004ba0:	6952      	ldr	r2, [r2, #20]
 8004ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ba6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	6812      	ldr	r2, [r2, #0]
 8004bb0:	68d2      	ldr	r2, [r2, #12]
 8004bb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40011000 	.word	0x40011000
 8004bdc:	40004400 	.word	0x40004400
 8004be0:	40011400 	.word	0x40011400
 8004be4:	0800d0dc 	.word	0x0800d0dc

08004be8 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	4613      	mov	r3, r2
 8004bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	2b20      	cmp	r3, #32
 8004c00:	d166      	bne.n	8004cd0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_UART_Receive_DMA+0x26>
 8004c08:	88fb      	ldrh	r3, [r7, #6]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e05f      	b.n	8004cd2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_UART_Receive_DMA+0x38>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e058      	b.n	8004cd2 <HAL_UART_Receive_DMA+0xea>
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004c28:	68ba      	ldr	r2, [r7, #8]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	88fa      	ldrh	r2, [r7, #6]
 8004c32:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2200      	movs	r2, #0
 8004c38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2222      	movs	r2, #34	; 0x22
 8004c3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c46:	4a25      	ldr	r2, [pc, #148]	; (8004cdc <HAL_UART_Receive_DMA+0xf4>)
 8004c48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c4e:	4a24      	ldr	r2, [pc, #144]	; (8004ce0 <HAL_UART_Receive_DMA+0xf8>)
 8004c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c56:	4a23      	ldr	r2, [pc, #140]	; (8004ce4 <HAL_UART_Receive_DMA+0xfc>)
 8004c58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c5e:	2200      	movs	r2, #0
 8004c60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004c62:	f107 0308 	add.w	r3, r7, #8
 8004c66:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	681a      	ldr	r2, [r3, #0]
 8004c78:	88fb      	ldrh	r3, [r7, #6]
 8004c7a:	f7fc fd0f 	bl	800169c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	613b      	str	r3, [r7, #16]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68fa      	ldr	r2, [r7, #12]
 8004ca2:	6812      	ldr	r2, [r2, #0]
 8004ca4:	68d2      	ldr	r2, [r2, #12]
 8004ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004caa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	6952      	ldr	r2, [r2, #20]
 8004cb6:	f042 0201 	orr.w	r2, r2, #1
 8004cba:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	6812      	ldr	r2, [r2, #0]
 8004cc4:	6952      	ldr	r2, [r2, #20]
 8004cc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cca:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	e000      	b.n	8004cd2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004cd0:	2302      	movs	r3, #2
  }
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	08004d25 	.word	0x08004d25
 8004ce0:	08004d8d 	.word	0x08004d8d
 8004ce4:	08004da9 	.word	0x08004da9

08004ce8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d30:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d11e      	bne.n	8004d7e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	68d2      	ldr	r2, [r2, #12]
 8004d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d54:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	6812      	ldr	r2, [r2, #0]
 8004d5e:	6952      	ldr	r2, [r2, #20]
 8004d60:	f022 0201 	bic.w	r2, r2, #1
 8004d64:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	6812      	ldr	r2, [r2, #0]
 8004d6e:	6952      	ldr	r2, [r2, #20]
 8004d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d74:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2220      	movs	r2, #32
 8004d7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8004d7e:	68f8      	ldr	r0, [r7, #12]
 8004d80:	f7ff ffb2 	bl	8004ce8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d84:	bf00      	nop
 8004d86:	3710      	adds	r7, #16
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}

08004d8c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d98:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff ffae 	bl	8004cfc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004da0:	bf00      	nop
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004db0:	2300      	movs	r3, #0
 8004db2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dc4:	2b80      	cmp	r3, #128	; 0x80
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b21      	cmp	r3, #33	; 0x21
 8004dda:	d108      	bne.n	8004dee <UART_DMAError+0x46>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d005      	beq.n	8004dee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2200      	movs	r2, #0
 8004de6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004de8:	68b8      	ldr	r0, [r7, #8]
 8004dea:	f000 f827 	bl	8004e3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df8:	2b40      	cmp	r3, #64	; 0x40
 8004dfa:	bf0c      	ite	eq
 8004dfc:	2301      	moveq	r3, #1
 8004dfe:	2300      	movne	r3, #0
 8004e00:	b2db      	uxtb	r3, r3
 8004e02:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b22      	cmp	r3, #34	; 0x22
 8004e0e:	d108      	bne.n	8004e22 <UART_DMAError+0x7a>
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004e1c:	68b8      	ldr	r0, [r7, #8]
 8004e1e:	f000 f823 	bl	8004e68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	f043 0210 	orr.w	r2, r3, #16
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e2e:	68b8      	ldr	r0, [r7, #8]
 8004e30:	f7ff ff6e 	bl	8004d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	687a      	ldr	r2, [r7, #4]
 8004e4a:	6812      	ldr	r2, [r2, #0]
 8004e4c:	68d2      	ldr	r2, [r2, #12]
 8004e4e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8004e52:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2220      	movs	r2, #32
 8004e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	68d2      	ldr	r2, [r2, #12]
 8004e7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004e7e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	6812      	ldr	r2, [r2, #0]
 8004e88:	6952      	ldr	r2, [r2, #20]
 8004e8a:	f022 0201 	bic.w	r2, r2, #1
 8004e8e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	4aa8      	ldr	r2, [pc, #672]	; (8005154 <UART_SetConfig+0x2b0>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d904      	bls.n	8004ec0 <UART_SetConfig+0x1c>
 8004eb6:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8004eba:	48a7      	ldr	r0, [pc, #668]	; (8005158 <UART_SetConfig+0x2b4>)
 8004ebc:	f003 ff53 	bl	8008d66 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d009      	beq.n	8004edc <UART_SetConfig+0x38>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ed0:	d004      	beq.n	8004edc <UART_SetConfig+0x38>
 8004ed2:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8004ed6:	48a0      	ldr	r0, [pc, #640]	; (8005158 <UART_SetConfig+0x2b4>)
 8004ed8:	f003 ff45 	bl	8008d66 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d00e      	beq.n	8004f02 <UART_SetConfig+0x5e>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eec:	d009      	beq.n	8004f02 <UART_SetConfig+0x5e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004ef6:	d004      	beq.n	8004f02 <UART_SetConfig+0x5e>
 8004ef8:	f640 31e7 	movw	r1, #3047	; 0xbe7
 8004efc:	4896      	ldr	r0, [pc, #600]	; (8005158 <UART_SetConfig+0x2b4>)
 8004efe:	f003 ff32 	bl	8008d66 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695a      	ldr	r2, [r3, #20]
 8004f06:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d103      	bne.n	8004f18 <UART_SetConfig+0x74>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d104      	bne.n	8004f22 <UART_SetConfig+0x7e>
 8004f18:	f640 31e8 	movw	r1, #3048	; 0xbe8
 8004f1c:	488e      	ldr	r0, [pc, #568]	; (8005158 <UART_SetConfig+0x2b4>)
 8004f1e:	f003 ff22 	bl	8008d66 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6812      	ldr	r2, [r2, #0]
 8004f2a:	6912      	ldr	r2, [r2, #16]
 8004f2c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	68d2      	ldr	r2, [r2, #12]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	431a      	orrs	r2, r3
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	695b      	ldr	r3, [r3, #20]
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004f5e:	f023 030c 	bic.w	r3, r3, #12
 8004f62:	68f9      	ldr	r1, [r7, #12]
 8004f64:	430b      	orrs	r3, r1
 8004f66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6812      	ldr	r2, [r2, #0]
 8004f70:	6952      	ldr	r2, [r2, #20]
 8004f72:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6992      	ldr	r2, [r2, #24]
 8004f7a:	430a      	orrs	r2, r1
 8004f7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f86:	f040 80ef 	bne.w	8005168 <UART_SetConfig+0x2c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a73      	ldr	r2, [pc, #460]	; (800515c <UART_SetConfig+0x2b8>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <UART_SetConfig+0xfa>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a71      	ldr	r2, [pc, #452]	; (8005160 <UART_SetConfig+0x2bc>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d16c      	bne.n	8005078 <UART_SetConfig+0x1d4>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681c      	ldr	r4, [r3, #0]
 8004fa2:	f7fe fe7f 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	4613      	mov	r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	4413      	add	r3, r2
 8004fae:	009a      	lsls	r2, r3, #2
 8004fb0:	441a      	add	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	005b      	lsls	r3, r3, #1
 8004fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbc:	4a69      	ldr	r2, [pc, #420]	; (8005164 <UART_SetConfig+0x2c0>)
 8004fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc2:	095b      	lsrs	r3, r3, #5
 8004fc4:	011d      	lsls	r5, r3, #4
 8004fc6:	f7fe fe6d 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009a      	lsls	r2, r3, #2
 8004fd4:	441a      	add	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	005b      	lsls	r3, r3, #1
 8004fdc:	fbb2 f6f3 	udiv	r6, r2, r3
 8004fe0:	f7fe fe60 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 8004fe4:	4602      	mov	r2, r0
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	009b      	lsls	r3, r3, #2
 8004fea:	4413      	add	r3, r2
 8004fec:	009a      	lsls	r2, r3, #2
 8004fee:	441a      	add	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	005b      	lsls	r3, r3, #1
 8004ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ffa:	4a5a      	ldr	r2, [pc, #360]	; (8005164 <UART_SetConfig+0x2c0>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	2264      	movs	r2, #100	; 0x64
 8005004:	fb02 f303 	mul.w	r3, r2, r3
 8005008:	1af3      	subs	r3, r6, r3
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	3332      	adds	r3, #50	; 0x32
 800500e:	4a55      	ldr	r2, [pc, #340]	; (8005164 <UART_SetConfig+0x2c0>)
 8005010:	fba2 2303 	umull	r2, r3, r2, r3
 8005014:	095b      	lsrs	r3, r3, #5
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800501c:	441d      	add	r5, r3
 800501e:	f7fe fe41 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 8005022:	4602      	mov	r2, r0
 8005024:	4613      	mov	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	009a      	lsls	r2, r3, #2
 800502c:	441a      	add	r2, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	005b      	lsls	r3, r3, #1
 8005034:	fbb2 f6f3 	udiv	r6, r2, r3
 8005038:	f7fe fe34 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 800503c:	4602      	mov	r2, r0
 800503e:	4613      	mov	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4413      	add	r3, r2
 8005044:	009a      	lsls	r2, r3, #2
 8005046:	441a      	add	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005052:	4a44      	ldr	r2, [pc, #272]	; (8005164 <UART_SetConfig+0x2c0>)
 8005054:	fba2 2303 	umull	r2, r3, r2, r3
 8005058:	095b      	lsrs	r3, r3, #5
 800505a:	2264      	movs	r2, #100	; 0x64
 800505c:	fb02 f303 	mul.w	r3, r2, r3
 8005060:	1af3      	subs	r3, r6, r3
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	3332      	adds	r3, #50	; 0x32
 8005066:	4a3f      	ldr	r2, [pc, #252]	; (8005164 <UART_SetConfig+0x2c0>)
 8005068:	fba2 2303 	umull	r2, r3, r2, r3
 800506c:	095b      	lsrs	r3, r3, #5
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	442b      	add	r3, r5
 8005074:	60a3      	str	r3, [r4, #8]
 8005076:	e159      	b.n	800532c <UART_SetConfig+0x488>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681c      	ldr	r4, [r3, #0]
 800507c:	f7fe fdfe 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 8005080:	4602      	mov	r2, r0
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009a      	lsls	r2, r3, #2
 800508a:	441a      	add	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	005b      	lsls	r3, r3, #1
 8005092:	fbb2 f3f3 	udiv	r3, r2, r3
 8005096:	4a33      	ldr	r2, [pc, #204]	; (8005164 <UART_SetConfig+0x2c0>)
 8005098:	fba2 2303 	umull	r2, r3, r2, r3
 800509c:	095b      	lsrs	r3, r3, #5
 800509e:	011d      	lsls	r5, r3, #4
 80050a0:	f7fe fdec 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 80050a4:	4602      	mov	r2, r0
 80050a6:	4613      	mov	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	4413      	add	r3, r2
 80050ac:	009a      	lsls	r2, r3, #2
 80050ae:	441a      	add	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	005b      	lsls	r3, r3, #1
 80050b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80050ba:	f7fe fddf 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 80050be:	4602      	mov	r2, r0
 80050c0:	4613      	mov	r3, r2
 80050c2:	009b      	lsls	r3, r3, #2
 80050c4:	4413      	add	r3, r2
 80050c6:	009a      	lsls	r2, r3, #2
 80050c8:	441a      	add	r2, r3
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050d4:	4a23      	ldr	r2, [pc, #140]	; (8005164 <UART_SetConfig+0x2c0>)
 80050d6:	fba2 2303 	umull	r2, r3, r2, r3
 80050da:	095b      	lsrs	r3, r3, #5
 80050dc:	2264      	movs	r2, #100	; 0x64
 80050de:	fb02 f303 	mul.w	r3, r2, r3
 80050e2:	1af3      	subs	r3, r6, r3
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	3332      	adds	r3, #50	; 0x32
 80050e8:	4a1e      	ldr	r2, [pc, #120]	; (8005164 <UART_SetConfig+0x2c0>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	095b      	lsrs	r3, r3, #5
 80050f0:	005b      	lsls	r3, r3, #1
 80050f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050f6:	441d      	add	r5, r3
 80050f8:	f7fe fdc0 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 80050fc:	4602      	mov	r2, r0
 80050fe:	4613      	mov	r3, r2
 8005100:	009b      	lsls	r3, r3, #2
 8005102:	4413      	add	r3, r2
 8005104:	009a      	lsls	r2, r3, #2
 8005106:	441a      	add	r2, r3
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	685b      	ldr	r3, [r3, #4]
 800510c:	005b      	lsls	r3, r3, #1
 800510e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005112:	f7fe fdb3 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 8005116:	4602      	mov	r2, r0
 8005118:	4613      	mov	r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	4413      	add	r3, r2
 800511e:	009a      	lsls	r2, r3, #2
 8005120:	441a      	add	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	005b      	lsls	r3, r3, #1
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	4a0d      	ldr	r2, [pc, #52]	; (8005164 <UART_SetConfig+0x2c0>)
 800512e:	fba2 2303 	umull	r2, r3, r2, r3
 8005132:	095b      	lsrs	r3, r3, #5
 8005134:	2264      	movs	r2, #100	; 0x64
 8005136:	fb02 f303 	mul.w	r3, r2, r3
 800513a:	1af3      	subs	r3, r6, r3
 800513c:	00db      	lsls	r3, r3, #3
 800513e:	3332      	adds	r3, #50	; 0x32
 8005140:	4a08      	ldr	r2, [pc, #32]	; (8005164 <UART_SetConfig+0x2c0>)
 8005142:	fba2 2303 	umull	r2, r3, r2, r3
 8005146:	095b      	lsrs	r3, r3, #5
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	442b      	add	r3, r5
 800514e:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8005150:	e0ec      	b.n	800532c <UART_SetConfig+0x488>
 8005152:	bf00      	nop
 8005154:	00a037a0 	.word	0x00a037a0
 8005158:	0800d0dc 	.word	0x0800d0dc
 800515c:	40011000 	.word	0x40011000
 8005160:	40011400 	.word	0x40011400
 8005164:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a71      	ldr	r2, [pc, #452]	; (8005334 <UART_SetConfig+0x490>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <UART_SetConfig+0x2d8>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a70      	ldr	r2, [pc, #448]	; (8005338 <UART_SetConfig+0x494>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d16b      	bne.n	8005254 <UART_SetConfig+0x3b0>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681c      	ldr	r4, [r3, #0]
 8005180:	f7fe fd90 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 8005184:	4602      	mov	r2, r0
 8005186:	4613      	mov	r3, r2
 8005188:	009b      	lsls	r3, r3, #2
 800518a:	4413      	add	r3, r2
 800518c:	009a      	lsls	r2, r3, #2
 800518e:	441a      	add	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	685b      	ldr	r3, [r3, #4]
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	fbb2 f3f3 	udiv	r3, r2, r3
 800519a:	4a68      	ldr	r2, [pc, #416]	; (800533c <UART_SetConfig+0x498>)
 800519c:	fba2 2303 	umull	r2, r3, r2, r3
 80051a0:	095b      	lsrs	r3, r3, #5
 80051a2:	011d      	lsls	r5, r3, #4
 80051a4:	f7fe fd7e 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4613      	mov	r3, r2
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	4413      	add	r3, r2
 80051b0:	009a      	lsls	r2, r3, #2
 80051b2:	441a      	add	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	009b      	lsls	r3, r3, #2
 80051ba:	fbb2 f6f3 	udiv	r6, r2, r3
 80051be:	f7fe fd71 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 80051c2:	4602      	mov	r2, r0
 80051c4:	4613      	mov	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4413      	add	r3, r2
 80051ca:	009a      	lsls	r2, r3, #2
 80051cc:	441a      	add	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d8:	4a58      	ldr	r2, [pc, #352]	; (800533c <UART_SetConfig+0x498>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	2264      	movs	r2, #100	; 0x64
 80051e2:	fb02 f303 	mul.w	r3, r2, r3
 80051e6:	1af3      	subs	r3, r6, r3
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	3332      	adds	r3, #50	; 0x32
 80051ec:	4a53      	ldr	r2, [pc, #332]	; (800533c <UART_SetConfig+0x498>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	095b      	lsrs	r3, r3, #5
 80051f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80051f8:	441d      	add	r5, r3
 80051fa:	f7fe fd53 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 80051fe:	4602      	mov	r2, r0
 8005200:	4613      	mov	r3, r2
 8005202:	009b      	lsls	r3, r3, #2
 8005204:	4413      	add	r3, r2
 8005206:	009a      	lsls	r2, r3, #2
 8005208:	441a      	add	r2, r3
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	009b      	lsls	r3, r3, #2
 8005210:	fbb2 f6f3 	udiv	r6, r2, r3
 8005214:	f7fe fd46 	bl	8003ca4 <HAL_RCC_GetPCLK2Freq>
 8005218:	4602      	mov	r2, r0
 800521a:	4613      	mov	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	4413      	add	r3, r2
 8005220:	009a      	lsls	r2, r3, #2
 8005222:	441a      	add	r2, r3
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	fbb2 f3f3 	udiv	r3, r2, r3
 800522e:	4a43      	ldr	r2, [pc, #268]	; (800533c <UART_SetConfig+0x498>)
 8005230:	fba2 2303 	umull	r2, r3, r2, r3
 8005234:	095b      	lsrs	r3, r3, #5
 8005236:	2264      	movs	r2, #100	; 0x64
 8005238:	fb02 f303 	mul.w	r3, r2, r3
 800523c:	1af3      	subs	r3, r6, r3
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	3332      	adds	r3, #50	; 0x32
 8005242:	4a3e      	ldr	r2, [pc, #248]	; (800533c <UART_SetConfig+0x498>)
 8005244:	fba2 2303 	umull	r2, r3, r2, r3
 8005248:	095b      	lsrs	r3, r3, #5
 800524a:	f003 030f 	and.w	r3, r3, #15
 800524e:	442b      	add	r3, r5
 8005250:	60a3      	str	r3, [r4, #8]
 8005252:	e06b      	b.n	800532c <UART_SetConfig+0x488>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681c      	ldr	r4, [r3, #0]
 8005258:	f7fe fd10 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 800525c:	4602      	mov	r2, r0
 800525e:	4613      	mov	r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	009a      	lsls	r2, r3, #2
 8005266:	441a      	add	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005272:	4a32      	ldr	r2, [pc, #200]	; (800533c <UART_SetConfig+0x498>)
 8005274:	fba2 2303 	umull	r2, r3, r2, r3
 8005278:	095b      	lsrs	r3, r3, #5
 800527a:	011d      	lsls	r5, r3, #4
 800527c:	f7fe fcfe 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 8005280:	4602      	mov	r2, r0
 8005282:	4613      	mov	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4413      	add	r3, r2
 8005288:	009a      	lsls	r2, r3, #2
 800528a:	441a      	add	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	fbb2 f6f3 	udiv	r6, r2, r3
 8005296:	f7fe fcf1 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 800529a:	4602      	mov	r2, r0
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009a      	lsls	r2, r3, #2
 80052a4:	441a      	add	r2, r3
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	4a22      	ldr	r2, [pc, #136]	; (800533c <UART_SetConfig+0x498>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	095b      	lsrs	r3, r3, #5
 80052b8:	2264      	movs	r2, #100	; 0x64
 80052ba:	fb02 f303 	mul.w	r3, r2, r3
 80052be:	1af3      	subs	r3, r6, r3
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	3332      	adds	r3, #50	; 0x32
 80052c4:	4a1d      	ldr	r2, [pc, #116]	; (800533c <UART_SetConfig+0x498>)
 80052c6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052d0:	441d      	add	r5, r3
 80052d2:	f7fe fcd3 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 80052d6:	4602      	mov	r2, r0
 80052d8:	4613      	mov	r3, r2
 80052da:	009b      	lsls	r3, r3, #2
 80052dc:	4413      	add	r3, r2
 80052de:	009a      	lsls	r2, r3, #2
 80052e0:	441a      	add	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	009b      	lsls	r3, r3, #2
 80052e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80052ec:	f7fe fcc6 	bl	8003c7c <HAL_RCC_GetPCLK1Freq>
 80052f0:	4602      	mov	r2, r0
 80052f2:	4613      	mov	r3, r2
 80052f4:	009b      	lsls	r3, r3, #2
 80052f6:	4413      	add	r3, r2
 80052f8:	009a      	lsls	r2, r3, #2
 80052fa:	441a      	add	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	fbb2 f3f3 	udiv	r3, r2, r3
 8005306:	4a0d      	ldr	r2, [pc, #52]	; (800533c <UART_SetConfig+0x498>)
 8005308:	fba2 2303 	umull	r2, r3, r2, r3
 800530c:	095b      	lsrs	r3, r3, #5
 800530e:	2264      	movs	r2, #100	; 0x64
 8005310:	fb02 f303 	mul.w	r3, r2, r3
 8005314:	1af3      	subs	r3, r6, r3
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	3332      	adds	r3, #50	; 0x32
 800531a:	4a08      	ldr	r2, [pc, #32]	; (800533c <UART_SetConfig+0x498>)
 800531c:	fba2 2303 	umull	r2, r3, r2, r3
 8005320:	095b      	lsrs	r3, r3, #5
 8005322:	f003 030f 	and.w	r3, r3, #15
 8005326:	442b      	add	r3, r5
 8005328:	60a3      	str	r3, [r4, #8]
}
 800532a:	e7ff      	b.n	800532c <UART_SetConfig+0x488>
 800532c:	bf00      	nop
 800532e:	3714      	adds	r7, #20
 8005330:	46bd      	mov	sp, r7
 8005332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005334:	40011000 	.word	0x40011000
 8005338:	40011400 	.word	0x40011400
 800533c:	51eb851f 	.word	0x51eb851f

08005340 <L6470_ResetAppCmdPkg>:
  * @brief  Reset the structure used to store the identifier of the L6470
  *         application command and its the needed parameters.
  * @param  L6470_AppCmdPkg   The structure to be reset.
  */
void L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint8_t id;
  
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8005348:	2300      	movs	r3, #0
 800534a:	73fb      	strb	r3, [r7, #15]
 800534c:	e01a      	b.n	8005384 <L6470_ResetAppCmdPkg+0x44>
  {
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800534e:	7bfb      	ldrb	r3, [r7, #15]
 8005350:	011b      	lsls	r3, r3, #4
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	4413      	add	r3, r2
 8005356:	2200      	movs	r2, #0
 8005358:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800535a:	7bfb      	ldrb	r3, [r7, #15]
 800535c:	011b      	lsls	r3, r3, #4
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	4413      	add	r3, r2
 8005362:	2200      	movs	r2, #0
 8005364:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8005366:	7bfb      	ldrb	r3, [r7, #15]
 8005368:	011b      	lsls	r3, r3, #4
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	4413      	add	r3, r2
 800536e:	2200      	movs	r2, #0
 8005370:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8005372:	7bfb      	ldrb	r3, [r7, #15]
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	4413      	add	r3, r2
 800537a:	2200      	movs	r2, #0
 800537c:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	3301      	adds	r3, #1
 8005382:	73fb      	strb	r3, [r7, #15]
 8005384:	7bfb      	ldrb	r3, [r7, #15]
 8005386:	2b03      	cmp	r3, #3
 8005388:	d9e1      	bls.n	800534e <L6470_ResetAppCmdPkg+0xe>
  }
}
 800538a:	bf00      	nop
 800538c:	3714      	adds	r7, #20
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr

08005396 <L6470_FillAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_FillAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	607b      	str	r3, [r7, #4]
 80053a0:	4603      	mov	r3, r0
 80053a2:	73fb      	strb	r3, [r7, #15]
 80053a4:	4613      	mov	r3, r2
 80053a6:	73bb      	strb	r3, [r7, #14]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	4413      	add	r3, r2
 80053b0:	7bba      	ldrb	r2, [r7, #14]
 80053b2:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80053b4:	7bfb      	ldrb	r3, [r7, #15]
 80053b6:	011b      	lsls	r3, r3, #4
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	4413      	add	r3, r2
 80053bc:	687a      	ldr	r2, [r7, #4]
 80053be:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	011b      	lsls	r3, r3, #4
 80053c4:	68ba      	ldr	r2, [r7, #8]
 80053c6:	4413      	add	r3, r2
 80053c8:	69ba      	ldr	r2, [r7, #24]
 80053ca:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
 80053ce:	011b      	lsls	r3, r3, #4
 80053d0:	68ba      	ldr	r2, [r7, #8]
 80053d2:	4413      	add	r3, r2
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	60da      	str	r2, [r3, #12]
}
 80053d8:	bf00      	nop
 80053da:	3714      	adds	r7, #20
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <L6470_PrepareAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_PrepareAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	60b9      	str	r1, [r7, #8]
 80053ec:	607b      	str	r3, [r7, #4]
 80053ee:	4603      	mov	r3, r0
 80053f0:	73fb      	strb	r3, [r7, #15]
 80053f2:	4613      	mov	r3, r2
 80053f4:	73bb      	strb	r3, [r7, #14]
  if(!L6470_DaisyChain_HalfPrepared)
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <L6470_PrepareAppCmdPkg+0x44>)
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d105      	bne.n	800540a <L6470_PrepareAppCmdPkg+0x26>
  {
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80053fe:	4b0a      	ldr	r3, [pc, #40]	; (8005428 <L6470_PrepareAppCmdPkg+0x44>)
 8005400:	2201      	movs	r2, #1
 8005402:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8005404:	68b8      	ldr	r0, [r7, #8]
 8005406:	f7ff ff9b 	bl	8005340 <L6470_ResetAppCmdPkg>
  }
  
  L6470_FillAppCmdPkg(L6470_Id, pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800540a:	7bba      	ldrb	r2, [r7, #14]
 800540c:	7bf8      	ldrb	r0, [r7, #15]
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	9301      	str	r3, [sp, #4]
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	9300      	str	r3, [sp, #0]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	68b9      	ldr	r1, [r7, #8]
 800541a:	f7ff ffbc 	bl	8005396 <L6470_FillAppCmdPkg>
}
 800541e:	bf00      	nop
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	20000824 	.word	0x20000824

0800542c <L6470_PrepareDaisyChainCommand>:
  *
  * @param  pL6470_AppCmdPkg              Pointer to the sL6470_AppCmdPkg_t to be filled.
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the structure used by SPI to send the commands.
  */
void L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
{
 800542c:	b490      	push	{r4, r7}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint8_t PARAMLengthBytes; /* The number of bytes related to the numeric value for the addressed register */
  uint8_t spibyte;
  uint8_t i;
  
  /* Reset the structure used to send the command to the L6470 Daisy Chain through the SPI */
  i = 0;
 8005436:	2300      	movs	r3, #0
 8005438:	737b      	strb	r3, [r7, #13]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800543a:	2300      	movs	r3, #0
 800543c:	73bb      	strb	r3, [r7, #14]
 800543e:	e013      	b.n	8005468 <L6470_PrepareDaisyChainCommand+0x3c>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005440:	2300      	movs	r3, #0
 8005442:	73fb      	strb	r3, [r7, #15]
 8005444:	e00a      	b.n	800545c <L6470_PrepareDaisyChainCommand+0x30>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8005446:	7b7b      	ldrb	r3, [r7, #13]
 8005448:	1c5a      	adds	r2, r3, #1
 800544a:	737a      	strb	r2, [r7, #13]
 800544c:	461a      	mov	r2, r3
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	4413      	add	r3, r2
 8005452:	2200      	movs	r2, #0
 8005454:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8005456:	7bfb      	ldrb	r3, [r7, #15]
 8005458:	3301      	adds	r3, #1
 800545a:	73fb      	strb	r3, [r7, #15]
 800545c:	7bfb      	ldrb	r3, [r7, #15]
 800545e:	2b03      	cmp	r3, #3
 8005460:	d9f1      	bls.n	8005446 <L6470_PrepareDaisyChainCommand+0x1a>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8005462:	7bbb      	ldrb	r3, [r7, #14]
 8005464:	3301      	adds	r3, #1
 8005466:	73bb      	strb	r3, [r7, #14]
 8005468:	7bbb      	ldrb	r3, [r7, #14]
 800546a:	2b03      	cmp	r3, #3
 800546c:	d9e8      	bls.n	8005440 <L6470_PrepareDaisyChainCommand+0x14>
  
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800546e:	2300      	movs	r3, #0
 8005470:	73fb      	strb	r3, [r7, #15]
 8005472:	e1f7      	b.n	8005864 <L6470_PrepareDaisyChainCommand+0x438>
  {
    /* Build the 1st bytes to transmit with the binary code of the command */
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	441a      	add	r2, r3
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	440b      	add	r3, r1
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	4618      	mov	r0, r3
 8005486:	49b3      	ldr	r1, [pc, #716]	; (8005754 <L6470_PrepareDaisyChainCommand+0x328>)
 8005488:	4603      	mov	r3, r0
 800548a:	00db      	lsls	r3, r3, #3
 800548c:	1a1b      	subs	r3, r3, r0
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	440b      	add	r3, r1
 8005492:	330c      	adds	r3, #12
 8005494:	781b      	ldrb	r3, [r3, #0]
 8005496:	7013      	strb	r3, [r2, #0]
    
    /* Perform the related L6470_AppCmdId */
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8005498:	7bfb      	ldrb	r3, [r7, #15]
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	687a      	ldr	r2, [r7, #4]
 800549e:	4413      	add	r3, r2
 80054a0:	781b      	ldrb	r3, [r3, #0]
 80054a2:	2b12      	cmp	r3, #18
 80054a4:	f200 81db 	bhi.w	800585e <L6470_PrepareDaisyChainCommand+0x432>
 80054a8:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <L6470_PrepareDaisyChainCommand+0x84>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	0800585f 	.word	0x0800585f
 80054b4:	080054fd 	.word	0x080054fd
 80054b8:	08005585 	.word	0x08005585
 80054bc:	080055b3 	.word	0x080055b3
 80054c0:	0800561b 	.word	0x0800561b
 80054c4:	08005649 	.word	0x08005649
 80054c8:	080056b1 	.word	0x080056b1
 80054cc:	080056ed 	.word	0x080056ed
 80054d0:	08005761 	.word	0x08005761
 80054d4:	080057fd 	.word	0x080057fd
 80054d8:	0800585f 	.word	0x0800585f
 80054dc:	0800585f 	.word	0x0800585f
 80054e0:	0800585f 	.word	0x0800585f
 80054e4:	0800585f 	.word	0x0800585f
 80054e8:	0800585f 	.word	0x0800585f
 80054ec:	0800585f 	.word	0x0800585f
 80054f0:	0800585f 	.word	0x0800585f
 80054f4:	0800585f 	.word	0x0800585f
 80054f8:	0800585f 	.word	0x0800585f
    {
    case L6470_NOP_ID:
      break;
    case L6470_SETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	18d1      	adds	r1, r2, r3
 8005502:	7bfb      	ldrb	r3, [r7, #15]
 8005504:	683a      	ldr	r2, [r7, #0]
 8005506:	4413      	add	r3, r2
 8005508:	7818      	ldrb	r0, [r3, #0]
 800550a:	7bfb      	ldrb	r3, [r7, #15]
 800550c:	011b      	lsls	r3, r3, #4
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	4413      	add	r3, r2
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	4c90      	ldr	r4, [pc, #576]	; (8005758 <L6470_PrepareDaisyChainCommand+0x32c>)
 8005516:	4613      	mov	r3, r2
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	4413      	add	r3, r2
 800551c:	009b      	lsls	r3, r3, #2
 800551e:	4423      	add	r3, r4
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	4303      	orrs	r3, r0
 8005524:	b2db      	uxtb	r3, r3
 8005526:	700b      	strb	r3, [r1, #0]
      
      /* The length, in byte, of this register (PARAM) is... */
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8005528:	7bfb      	ldrb	r3, [r7, #15]
 800552a:	011b      	lsls	r3, r3, #4
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	4413      	add	r3, r2
 8005530:	685a      	ldr	r2, [r3, #4]
 8005532:	4989      	ldr	r1, [pc, #548]	; (8005758 <L6470_PrepareDaisyChainCommand+0x32c>)
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	440b      	add	r3, r1
 800553e:	330e      	adds	r3, #14
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	733b      	strb	r3, [r7, #12]
      
      /* Build the others bytes to transmit (VALUE) */
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005544:	2301      	movs	r3, #1
 8005546:	73bb      	strb	r3, [r7, #14]
 8005548:	e016      	b.n	8005578 <L6470_PrepareDaisyChainCommand+0x14c>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800554a:	7bbb      	ldrb	r3, [r7, #14]
 800554c:	009a      	lsls	r2, r3, #2
 800554e:	7bfb      	ldrb	r3, [r7, #15]
 8005550:	4413      	add	r3, r2
 8005552:	461a      	mov	r2, r3
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	4413      	add	r3, r2
 8005558:	7bfa      	ldrb	r2, [r7, #15]
 800555a:	0112      	lsls	r2, r2, #4
 800555c:	6879      	ldr	r1, [r7, #4]
 800555e:	440a      	add	r2, r1
 8005560:	6891      	ldr	r1, [r2, #8]
 8005562:	7b38      	ldrb	r0, [r7, #12]
 8005564:	7bba      	ldrb	r2, [r7, #14]
 8005566:	1a82      	subs	r2, r0, r2
 8005568:	00d2      	lsls	r2, r2, #3
 800556a:	fa21 f202 	lsr.w	r2, r1, r2
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8005572:	7bbb      	ldrb	r3, [r7, #14]
 8005574:	3301      	adds	r3, #1
 8005576:	73bb      	strb	r3, [r7, #14]
 8005578:	7bba      	ldrb	r2, [r7, #14]
 800557a:	7b3b      	ldrb	r3, [r7, #12]
 800557c:	3301      	adds	r3, #1
 800557e:	429a      	cmp	r2, r3
 8005580:	dbe3      	blt.n	800554a <L6470_PrepareDaisyChainCommand+0x11e>
      }
      break;
 8005582:	e16c      	b.n	800585e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_GETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	18d1      	adds	r1, r2, r3
 800558a:	7bfb      	ldrb	r3, [r7, #15]
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	4413      	add	r3, r2
 8005590:	7818      	ldrb	r0, [r3, #0]
 8005592:	7bfb      	ldrb	r3, [r7, #15]
 8005594:	011b      	lsls	r3, r3, #4
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	685a      	ldr	r2, [r3, #4]
 800559c:	4c6e      	ldr	r4, [pc, #440]	; (8005758 <L6470_PrepareDaisyChainCommand+0x32c>)
 800559e:	4613      	mov	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4423      	add	r3, r4
 80055a8:	781b      	ldrb	r3, [r3, #0]
 80055aa:	4303      	orrs	r3, r0
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	700b      	strb	r3, [r1, #0]
      break;
 80055b0:	e155      	b.n	800585e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_RUN_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80055b2:	7bfb      	ldrb	r3, [r7, #15]
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	18d1      	adds	r1, r2, r3
 80055b8:	7bfb      	ldrb	r3, [r7, #15]
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	4413      	add	r3, r2
 80055be:	7818      	ldrb	r0, [r3, #0]
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	4413      	add	r3, r2
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	4c64      	ldr	r4, [pc, #400]	; (800575c <L6470_PrepareDaisyChainCommand+0x330>)
 80055cc:	4613      	mov	r3, r2
 80055ce:	00db      	lsls	r3, r3, #3
 80055d0:	4413      	add	r3, r2
 80055d2:	4423      	add	r3, r4
 80055d4:	3308      	adds	r3, #8
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	4303      	orrs	r3, r0
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80055de:	2301      	movs	r3, #1
 80055e0:	73bb      	strb	r3, [r7, #14]
 80055e2:	e016      	b.n	8005612 <L6470_PrepareDaisyChainCommand+0x1e6>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80055e4:	7bbb      	ldrb	r3, [r7, #14]
 80055e6:	009a      	lsls	r2, r3, #2
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	4413      	add	r3, r2
 80055ec:	461a      	mov	r2, r3
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	4413      	add	r3, r2
 80055f2:	7bfa      	ldrb	r2, [r7, #15]
 80055f4:	0112      	lsls	r2, r2, #4
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	440a      	add	r2, r1
 80055fa:	6891      	ldr	r1, [r2, #8]
 80055fc:	7bba      	ldrb	r2, [r7, #14]
 80055fe:	f1c2 0203 	rsb	r2, r2, #3
 8005602:	00d2      	lsls	r2, r2, #3
 8005604:	fa21 f202 	lsr.w	r2, r1, r2
 8005608:	b2d2      	uxtb	r2, r2
 800560a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800560c:	7bbb      	ldrb	r3, [r7, #14]
 800560e:	3301      	adds	r3, #1
 8005610:	73bb      	strb	r3, [r7, #14]
 8005612:	7bbb      	ldrb	r3, [r7, #14]
 8005614:	2b03      	cmp	r3, #3
 8005616:	d9e5      	bls.n	80055e4 <L6470_PrepareDaisyChainCommand+0x1b8>
      }
      break;
 8005618:	e121      	b.n	800585e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_STEPCLOCK_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800561a:	7bfb      	ldrb	r3, [r7, #15]
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	18d1      	adds	r1, r2, r3
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	683a      	ldr	r2, [r7, #0]
 8005624:	4413      	add	r3, r2
 8005626:	7818      	ldrb	r0, [r3, #0]
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	4413      	add	r3, r2
 8005630:	685a      	ldr	r2, [r3, #4]
 8005632:	4c4a      	ldr	r4, [pc, #296]	; (800575c <L6470_PrepareDaisyChainCommand+0x330>)
 8005634:	4613      	mov	r3, r2
 8005636:	00db      	lsls	r3, r3, #3
 8005638:	4413      	add	r3, r2
 800563a:	4423      	add	r3, r4
 800563c:	3308      	adds	r3, #8
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	4303      	orrs	r3, r0
 8005642:	b2db      	uxtb	r3, r3
 8005644:	700b      	strb	r3, [r1, #0]
      break;
 8005646:	e10a      	b.n	800585e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_MOVE_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	683a      	ldr	r2, [r7, #0]
 800564c:	18d1      	adds	r1, r2, r3
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	683a      	ldr	r2, [r7, #0]
 8005652:	4413      	add	r3, r2
 8005654:	7818      	ldrb	r0, [r3, #0]
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	011b      	lsls	r3, r3, #4
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	4413      	add	r3, r2
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	4c3e      	ldr	r4, [pc, #248]	; (800575c <L6470_PrepareDaisyChainCommand+0x330>)
 8005662:	4613      	mov	r3, r2
 8005664:	00db      	lsls	r3, r3, #3
 8005666:	4413      	add	r3, r2
 8005668:	4423      	add	r3, r4
 800566a:	3308      	adds	r3, #8
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	4303      	orrs	r3, r0
 8005670:	b2db      	uxtb	r3, r3
 8005672:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (N_STEP) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005674:	2301      	movs	r3, #1
 8005676:	73bb      	strb	r3, [r7, #14]
 8005678:	e016      	b.n	80056a8 <L6470_PrepareDaisyChainCommand+0x27c>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800567a:	7bbb      	ldrb	r3, [r7, #14]
 800567c:	009a      	lsls	r2, r3, #2
 800567e:	7bfb      	ldrb	r3, [r7, #15]
 8005680:	4413      	add	r3, r2
 8005682:	461a      	mov	r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	4413      	add	r3, r2
 8005688:	7bfa      	ldrb	r2, [r7, #15]
 800568a:	0112      	lsls	r2, r2, #4
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	440a      	add	r2, r1
 8005690:	6891      	ldr	r1, [r2, #8]
 8005692:	7bba      	ldrb	r2, [r7, #14]
 8005694:	f1c2 0203 	rsb	r2, r2, #3
 8005698:	00d2      	lsls	r2, r2, #3
 800569a:	fa21 f202 	lsr.w	r2, r1, r2
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80056a2:	7bbb      	ldrb	r3, [r7, #14]
 80056a4:	3301      	adds	r3, #1
 80056a6:	73bb      	strb	r3, [r7, #14]
 80056a8:	7bbb      	ldrb	r3, [r7, #14]
 80056aa:	2b03      	cmp	r3, #3
 80056ac:	d9e5      	bls.n	800567a <L6470_PrepareDaisyChainCommand+0x24e>
      }      
      break;
 80056ae:	e0d6      	b.n	800585e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_GOTO_ID:
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80056b0:	2301      	movs	r3, #1
 80056b2:	73bb      	strb	r3, [r7, #14]
 80056b4:	e016      	b.n	80056e4 <L6470_PrepareDaisyChainCommand+0x2b8>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 80056b6:	7bbb      	ldrb	r3, [r7, #14]
 80056b8:	009a      	lsls	r2, r3, #2
 80056ba:	7bfb      	ldrb	r3, [r7, #15]
 80056bc:	4413      	add	r3, r2
 80056be:	461a      	mov	r2, r3
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	4413      	add	r3, r2
 80056c4:	7bfa      	ldrb	r2, [r7, #15]
 80056c6:	0112      	lsls	r2, r2, #4
 80056c8:	6879      	ldr	r1, [r7, #4]
 80056ca:	440a      	add	r2, r1
 80056cc:	6851      	ldr	r1, [r2, #4]
 80056ce:	7bba      	ldrb	r2, [r7, #14]
 80056d0:	f1c2 0203 	rsb	r2, r2, #3
 80056d4:	00d2      	lsls	r2, r2, #3
 80056d6:	fa21 f202 	lsr.w	r2, r1, r2
 80056da:	b2d2      	uxtb	r2, r2
 80056dc:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80056de:	7bbb      	ldrb	r3, [r7, #14]
 80056e0:	3301      	adds	r3, #1
 80056e2:	73bb      	strb	r3, [r7, #14]
 80056e4:	7bbb      	ldrb	r3, [r7, #14]
 80056e6:	2b03      	cmp	r3, #3
 80056e8:	d9e5      	bls.n	80056b6 <L6470_PrepareDaisyChainCommand+0x28a>
      }
      break;
 80056ea:	e0b8      	b.n	800585e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_GOTODIR_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	18d1      	adds	r1, r2, r3
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	683a      	ldr	r2, [r7, #0]
 80056f6:	4413      	add	r3, r2
 80056f8:	7818      	ldrb	r0, [r3, #0]
 80056fa:	7bfb      	ldrb	r3, [r7, #15]
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	4413      	add	r3, r2
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	4c15      	ldr	r4, [pc, #84]	; (800575c <L6470_PrepareDaisyChainCommand+0x330>)
 8005706:	4613      	mov	r3, r2
 8005708:	00db      	lsls	r3, r3, #3
 800570a:	4413      	add	r3, r2
 800570c:	4423      	add	r3, r4
 800570e:	3308      	adds	r3, #8
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	4303      	orrs	r3, r0
 8005714:	b2db      	uxtb	r3, r3
 8005716:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005718:	2301      	movs	r3, #1
 800571a:	73bb      	strb	r3, [r7, #14]
 800571c:	e016      	b.n	800574c <L6470_PrepareDaisyChainCommand+0x320>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800571e:	7bbb      	ldrb	r3, [r7, #14]
 8005720:	009a      	lsls	r2, r3, #2
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	4413      	add	r3, r2
 8005726:	461a      	mov	r2, r3
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	4413      	add	r3, r2
 800572c:	7bfa      	ldrb	r2, [r7, #15]
 800572e:	0112      	lsls	r2, r2, #4
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	440a      	add	r2, r1
 8005734:	6891      	ldr	r1, [r2, #8]
 8005736:	7bba      	ldrb	r2, [r7, #14]
 8005738:	f1c2 0203 	rsb	r2, r2, #3
 800573c:	00d2      	lsls	r2, r2, #3
 800573e:	fa21 f202 	lsr.w	r2, r1, r2
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8005746:	7bbb      	ldrb	r3, [r7, #14]
 8005748:	3301      	adds	r3, #1
 800574a:	73bb      	strb	r3, [r7, #14]
 800574c:	7bbb      	ldrb	r3, [r7, #14]
 800574e:	2b03      	cmp	r3, #3
 8005750:	d9e5      	bls.n	800571e <L6470_PrepareDaisyChainCommand+0x2f2>
      }
      break;
 8005752:	e084      	b.n	800585e <L6470_PrepareDaisyChainCommand+0x432>
 8005754:	0800d694 	.word	0x0800d694
 8005758:	0800d4a0 	.word	0x0800d4a0
 800575c:	0800d7a0 	.word	0x0800d7a0
    case L6470_GOUNTIL_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	683a      	ldr	r2, [r7, #0]
 8005764:	18d1      	adds	r1, r2, r3
 8005766:	7bfb      	ldrb	r3, [r7, #15]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	4413      	add	r3, r2
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	b258      	sxtb	r0, r3
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	4413      	add	r3, r2
 8005778:	685a      	ldr	r2, [r3, #4]
 800577a:	4c3f      	ldr	r4, [pc, #252]	; (8005878 <L6470_PrepareDaisyChainCommand+0x44c>)
 800577c:	4613      	mov	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	4423      	add	r3, r4
 8005784:	3304      	adds	r3, #4
 8005786:	781b      	ldrb	r3, [r3, #0]
 8005788:	00db      	lsls	r3, r3, #3
 800578a:	b25b      	sxtb	r3, r3
 800578c:	4303      	orrs	r3, r0
 800578e:	b25b      	sxtb	r3, r3
 8005790:	b2db      	uxtb	r3, r3
 8005792:	700b      	strb	r3, [r1, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005794:	7bfb      	ldrb	r3, [r7, #15]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	18d1      	adds	r1, r2, r3
 800579a:	7bfb      	ldrb	r3, [r7, #15]
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	4413      	add	r3, r2
 80057a0:	7818      	ldrb	r0, [r3, #0]
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	4413      	add	r3, r2
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	4c33      	ldr	r4, [pc, #204]	; (800587c <L6470_PrepareDaisyChainCommand+0x450>)
 80057ae:	4613      	mov	r3, r2
 80057b0:	00db      	lsls	r3, r3, #3
 80057b2:	4413      	add	r3, r2
 80057b4:	4423      	add	r3, r4
 80057b6:	3308      	adds	r3, #8
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	4303      	orrs	r3, r0
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80057c0:	2301      	movs	r3, #1
 80057c2:	73bb      	strb	r3, [r7, #14]
 80057c4:	e016      	b.n	80057f4 <L6470_PrepareDaisyChainCommand+0x3c8>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 80057c6:	7bbb      	ldrb	r3, [r7, #14]
 80057c8:	009a      	lsls	r2, r3, #2
 80057ca:	7bfb      	ldrb	r3, [r7, #15]
 80057cc:	4413      	add	r3, r2
 80057ce:	461a      	mov	r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	4413      	add	r3, r2
 80057d4:	7bfa      	ldrb	r2, [r7, #15]
 80057d6:	0112      	lsls	r2, r2, #4
 80057d8:	6879      	ldr	r1, [r7, #4]
 80057da:	440a      	add	r2, r1
 80057dc:	68d1      	ldr	r1, [r2, #12]
 80057de:	7bba      	ldrb	r2, [r7, #14]
 80057e0:	f1c2 0203 	rsb	r2, r2, #3
 80057e4:	00d2      	lsls	r2, r2, #3
 80057e6:	fa21 f202 	lsr.w	r2, r1, r2
 80057ea:	b2d2      	uxtb	r2, r2
 80057ec:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80057ee:	7bbb      	ldrb	r3, [r7, #14]
 80057f0:	3301      	adds	r3, #1
 80057f2:	73bb      	strb	r3, [r7, #14]
 80057f4:	7bbb      	ldrb	r3, [r7, #14]
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d9e5      	bls.n	80057c6 <L6470_PrepareDaisyChainCommand+0x39a>
      }
      break;
 80057fa:	e030      	b.n	800585e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_RELEASESW_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	18d1      	adds	r1, r2, r3
 8005802:	7bfb      	ldrb	r3, [r7, #15]
 8005804:	683a      	ldr	r2, [r7, #0]
 8005806:	4413      	add	r3, r2
 8005808:	781b      	ldrb	r3, [r3, #0]
 800580a:	b258      	sxtb	r0, r3
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	011b      	lsls	r3, r3, #4
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	4413      	add	r3, r2
 8005814:	685a      	ldr	r2, [r3, #4]
 8005816:	4c18      	ldr	r4, [pc, #96]	; (8005878 <L6470_PrepareDaisyChainCommand+0x44c>)
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	4423      	add	r3, r4
 8005820:	3304      	adds	r3, #4
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	00db      	lsls	r3, r3, #3
 8005826:	b25b      	sxtb	r3, r3
 8005828:	4303      	orrs	r3, r0
 800582a:	b25b      	sxtb	r3, r3
 800582c:	b2db      	uxtb	r3, r3
 800582e:	700b      	strb	r3, [r1, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	18d1      	adds	r1, r2, r3
 8005836:	7bfb      	ldrb	r3, [r7, #15]
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	4413      	add	r3, r2
 800583c:	7818      	ldrb	r0, [r3, #0]
 800583e:	7bfb      	ldrb	r3, [r7, #15]
 8005840:	011b      	lsls	r3, r3, #4
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	4413      	add	r3, r2
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	4c0c      	ldr	r4, [pc, #48]	; (800587c <L6470_PrepareDaisyChainCommand+0x450>)
 800584a:	4613      	mov	r3, r2
 800584c:	00db      	lsls	r3, r3, #3
 800584e:	4413      	add	r3, r2
 8005850:	4423      	add	r3, r4
 8005852:	3308      	adds	r3, #8
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	4303      	orrs	r3, r0
 8005858:	b2db      	uxtb	r3, r3
 800585a:	700b      	strb	r3, [r1, #0]
      break;
 800585c:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	3301      	adds	r3, #1
 8005862:	73fb      	strb	r3, [r7, #15]
 8005864:	7bfb      	ldrb	r3, [r7, #15]
 8005866:	2b03      	cmp	r3, #3
 8005868:	f67f ae04 	bls.w	8005474 <L6470_PrepareDaisyChainCommand+0x48>
      break;
    case L6470_GETSTATUS_ID:
      break;
    }
  }
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bc90      	pop	{r4, r7}
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	0800d7b4 	.word	0x0800d7b4
 800587c:	0800d7a0 	.word	0x0800d7a0

08005880 <AbsPos_2_Position>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
int32_t AbsPos_2_Position(uint32_t AbsPos)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  if (AbsPos > L6470_MAX_POSITION)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800588e:	d303      	bcc.n	8005898 <AbsPos_2_Position+0x18>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 8005896:	e000      	b.n	800589a <AbsPos_2_Position+0x1a>
  else
    return AbsPos;
 8005898:	687b      	ldr	r3, [r7, #4]
}
 800589a:	4618      	mov	r0, r3
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <Step_s_2_Speed>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
uint32_t Step_s_2_Speed(float Step_s)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 80058b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80058b6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80058e8 <Step_s_2_Speed+0x40>
 80058ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80058be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c2:	d80a      	bhi.n	80058da <Step_s_2_Speed+0x32>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 80058c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80058c8:	eddf 6a08 	vldr	s13, [pc, #32]	; 80058ec <Step_s_2_Speed+0x44>
 80058cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d4:	ee17 3a90 	vmov	r3, s15
 80058d8:	e000      	b.n	80058dc <Step_s_2_Speed+0x34>
  else
    return 0;   // Warning
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr
 80058e8:	4674241b 	.word	0x4674241b
 80058ec:	3c74242a 	.word	0x3c74242a

080058f0 <Step_s2_2_Acc>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACC register value.
  */
uint16_t Step_s2_2_Acc(float Step_s2)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 80058fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80058fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005934 <Step_s2_2_Acc+0x44>
 8005902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800590a:	d80c      	bhi.n	8005926 <Step_s2_2_Acc+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800590c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005910:	eddf 6a09 	vldr	s13, [pc, #36]	; 8005938 <Step_s2_2_Acc+0x48>
 8005914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800591c:	edc7 7a00 	vstr	s15, [r7]
 8005920:	883b      	ldrh	r3, [r7, #0]
 8005922:	b29b      	uxth	r3, r3
 8005924:	e000      	b.n	8005928 <Step_s2_2_Acc+0x38>
  else
    return 0;   // Warning
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr
 8005934:	4768c671 	.word	0x4768c671
 8005938:	4168d4fe 	.word	0x4168d4fe

0800593c <Step_s2_2_Dec>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DEC register value.
  */
uint16_t Step_s2_2_Dec(float Step_s2)
{
 800593c:	b480      	push	{r7}
 800593e:	b083      	sub	sp, #12
 8005940:	af00      	add	r7, sp, #0
 8005942:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8005946:	edd7 7a01 	vldr	s15, [r7, #4]
 800594a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005980 <Step_s2_2_Dec+0x44>
 800594e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005956:	d80c      	bhi.n	8005972 <Step_s2_2_Dec+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8005958:	ed97 7a01 	vldr	s14, [r7, #4]
 800595c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8005984 <Step_s2_2_Dec+0x48>
 8005960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005968:	edc7 7a00 	vstr	s15, [r7]
 800596c:	883b      	ldrh	r3, [r7, #0]
 800596e:	b29b      	uxth	r3, r3
 8005970:	e000      	b.n	8005974 <Step_s2_2_Dec+0x38>
  else
    return 0;   // Warning
 8005972:	2300      	movs	r3, #0
}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	4768c671 	.word	0x4768c671
 8005984:	4168d4fe 	.word	0x4168d4fe

08005988 <Step_s_2_MaxSpeed>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
uint16_t Step_s_2_MaxSpeed(float Step_s)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8005992:	edd7 7a01 	vldr	s15, [r7, #4]
 8005996:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80059cc <Step_s_2_MaxSpeed+0x44>
 800599a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800599e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a2:	d80c      	bhi.n	80059be <Step_s_2_MaxSpeed+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 80059a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80059a8:	eddf 6a09 	vldr	s13, [pc, #36]	; 80059d0 <Step_s_2_MaxSpeed+0x48>
 80059ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059b4:	edc7 7a00 	vstr	s15, [r7]
 80059b8:	883b      	ldrh	r3, [r7, #0]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	e000      	b.n	80059c0 <Step_s_2_MaxSpeed+0x38>
  else
    return 0;   // Warning
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	370c      	adds	r7, #12
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	4673e702 	.word	0x4673e702
 80059d0:	4174240b 	.word	0x4174240b

080059d4 <Step_s_2_MinSpeed>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
uint16_t Step_s_2_MinSpeed(float Step_s)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 80059de:	edd7 7a01 	vldr	s15, [r7, #4]
 80059e2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005a18 <Step_s_2_MinSpeed+0x44>
 80059e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80059ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059ee:	d80c      	bhi.n	8005a0a <Step_s_2_MinSpeed+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80059f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80059f4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8005a1c <Step_s_2_MinSpeed+0x48>
 80059f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80059fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a00:	edc7 7a00 	vstr	s15, [r7]
 8005a04:	883b      	ldrh	r3, [r7, #0]
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	e000      	b.n	8005a0c <Step_s_2_MinSpeed+0x38>
  else
    return 0;   // Warning
 8005a0a:	2300      	movs	r3, #0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr
 8005a18:	447414bf 	.word	0x447414bf
 8005a1c:	3e742401 	.word	0x3e742401

08005a20 <Step_s_2_FsSpd>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_FsSpd(float Step_s)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8005a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a2e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8005a6c <Step_s_2_FsSpd+0x4c>
 8005a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a3a:	d810      	bhi.n	8005a5e <Step_s_2_FsSpd+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8005a3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a40:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005a70 <Step_s_2_FsSpd+0x50>
 8005a44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005a4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a54:	edc7 7a00 	vstr	s15, [r7]
 8005a58:	883b      	ldrh	r3, [r7, #0]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	e000      	b.n	8005a60 <Step_s_2_FsSpd+0x40>
  else
    return 0;   // Warning
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	370c      	adds	r7, #12
 8005a64:	46bd      	mov	sp, r7
 8005a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6a:	4770      	bx	lr
 8005a6c:	4673e180 	.word	0x4673e180
 8005a70:	41740000 	.word	0x41740000

08005a74 <Step_s_2_IntSpeed>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_IntSpeed(float Step_s)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8005a7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005a82:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005ab8 <Step_s_2_IntSpeed+0x44>
 8005a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a8e:	d80c      	bhi.n	8005aaa <Step_s_2_IntSpeed+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8005a90:	ed97 7a01 	vldr	s14, [r7, #4]
 8005a94:	eddf 6a09 	vldr	s13, [pc, #36]	; 8005abc <Step_s_2_IntSpeed+0x48>
 8005a98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aa0:	edc7 7a00 	vstr	s15, [r7]
 8005aa4:	883b      	ldrh	r3, [r7, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	e000      	b.n	8005aac <Step_s_2_IntSpeed+0x38>
  else
    return 0;   // Warning
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	370c      	adds	r7, #12
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	44742023 	.word	0x44742023
 8005abc:	3d7423f4 	.word	0x3d7423f4

08005ac0 <s_Step_2_StSlp>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_StSlp(float s_Step)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8005aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8005ace:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005b04 <s_Step_2_StSlp+0x44>
 8005ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ada:	d80c      	bhi.n	8005af6 <s_Step_2_StSlp+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8005adc:	ed97 7a01 	vldr	s14, [r7, #4]
 8005ae0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8005b08 <s_Step_2_StSlp+0x48>
 8005ae4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005aec:	edc7 7a00 	vstr	s15, [r7]
 8005af0:	783b      	ldrb	r3, [r7, #0]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	e000      	b.n	8005af8 <s_Step_2_StSlp+0x38>
  else
    return 0;   // Warning
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr
 8005b04:	3b8311d9 	.word	0x3b8311d9
 8005b08:	3783956e 	.word	0x3783956e

08005b0c <s_Step_2_FnSlpAcc>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpAcc(float s_Step)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8005b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b1a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005b50 <s_Step_2_FnSlpAcc+0x44>
 8005b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b26:	d80c      	bhi.n	8005b42 <s_Step_2_FnSlpAcc+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8005b28:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b2c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8005b54 <s_Step_2_FnSlpAcc+0x48>
 8005b30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b38:	edc7 7a00 	vstr	s15, [r7]
 8005b3c:	783b      	ldrb	r3, [r7, #0]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	e000      	b.n	8005b44 <s_Step_2_FnSlpAcc+0x38>
  else
    return 0;   // Warning
 8005b42:	2300      	movs	r3, #0
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	370c      	adds	r7, #12
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4e:	4770      	bx	lr
 8005b50:	3b8311d9 	.word	0x3b8311d9
 8005b54:	3783956e 	.word	0x3783956e

08005b58 <s_Step_2_FnSlpDec>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpDec(float s_Step)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8005b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8005b66:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8005b9c <s_Step_2_FnSlpDec+0x44>
 8005b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b72:	d80c      	bhi.n	8005b8e <s_Step_2_FnSlpDec+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8005b74:	ed97 7a01 	vldr	s14, [r7, #4]
 8005b78:	eddf 6a09 	vldr	s13, [pc, #36]	; 8005ba0 <s_Step_2_FnSlpDec+0x48>
 8005b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b84:	edc7 7a00 	vstr	s15, [r7]
 8005b88:	783b      	ldrb	r3, [r7, #0]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	e000      	b.n	8005b90 <s_Step_2_FnSlpDec+0x38>
  else
    return 0;   // Warning
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr
 8005b9c:	3b8311d9 	.word	0x3b8311d9
 8005ba0:	3783956e 	.word	0x3783956e

08005ba4 <mA_2_OcdTh>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
uint8_t mA_2_OcdTh(float mA)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8005bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8005bb2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005c3c <mA_2_OcdTh+0x98>
 8005bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbe:	d836      	bhi.n	8005c2e <mA_2_OcdTh+0x8a>
  {
    result = (mA / ((float)375));
 8005bc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8005bc4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8005c40 <mA_2_OcdTh+0x9c>
 8005bc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005bcc:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 8005bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bd8:	edc7 7a00 	vstr	s15, [r7]
 8005bdc:	783b      	ldrb	r3, [r7, #0]
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	ee07 3a90 	vmov	s15, r3
 8005be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be8:	ed97 7a03 	vldr	s14, [r7, #12]
 8005bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005bf0:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 8005bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bf8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c04:	d50a      	bpl.n	8005c1c <mA_2_OcdTh+0x78>
      return ((uint8_t)result - 1);
 8005c06:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c0e:	edc7 7a00 	vstr	s15, [r7]
 8005c12:	783b      	ldrb	r3, [r7, #0]
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	3b01      	subs	r3, #1
 8005c18:	b2db      	uxtb	r3, r3
 8005c1a:	e009      	b.n	8005c30 <mA_2_OcdTh+0x8c>
    else
      return ((uint8_t)result);    
 8005c1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c24:	edc7 7a00 	vstr	s15, [r7]
 8005c28:	783b      	ldrb	r3, [r7, #0]
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	e000      	b.n	8005c30 <mA_2_OcdTh+0x8c>
  }
  else
    return 0;   // Warning
 8005c2e:	2300      	movs	r3, #0
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr
 8005c3c:	45bb8000 	.word	0x45bb8000
 8005c40:	43bb8000 	.word	0x43bb8000

08005c44 <mA_2_StallTh>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
uint8_t mA_2_StallTh(float mA)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b085      	sub	sp, #20
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8005c4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005c52:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8005cdc <mA_2_StallTh+0x98>
 8005c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c5e:	d836      	bhi.n	8005cce <mA_2_StallTh+0x8a>
  {
    result = (mA / ((float)31.25));
 8005c60:	ed97 7a01 	vldr	s14, [r7, #4]
 8005c64:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8005ce0 <mA_2_StallTh+0x9c>
 8005c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005c6c:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 8005c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c78:	edc7 7a00 	vstr	s15, [r7]
 8005c7c:	783b      	ldrb	r3, [r7, #0]
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	ee07 3a90 	vmov	s15, r3
 8005c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c88:	ed97 7a03 	vldr	s14, [r7, #12]
 8005c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c90:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 8005c94:	edd7 7a02 	vldr	s15, [r7, #8]
 8005c98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca4:	d50a      	bpl.n	8005cbc <mA_2_StallTh+0x78>
      return ((uint8_t)result - 1);
 8005ca6:	edd7 7a03 	vldr	s15, [r7, #12]
 8005caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cae:	edc7 7a00 	vstr	s15, [r7]
 8005cb2:	783b      	ldrb	r3, [r7, #0]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	e009      	b.n	8005cd0 <mA_2_StallTh+0x8c>
    else
      return ((uint8_t)result);    
 8005cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8005cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005cc4:	edc7 7a00 	vstr	s15, [r7]
 8005cc8:	783b      	ldrb	r3, [r7, #0]
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	e000      	b.n	8005cd0 <mA_2_StallTh+0x8c>
  }
  else
    return 0;   // Warning
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr
 8005cdc:	457a0000 	.word	0x457a0000
 8005ce0:	41fa0000 	.word	0x41fa0000

08005ce4 <L6470_SetParam>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * @param  Value         The new value.
  */
void L6470_SetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af02      	add	r7, sp, #8
 8005cea:	4603      	mov	r3, r0
 8005cec:	603a      	str	r2, [r7, #0]
 8005cee:	71fb      	strb	r3, [r7, #7]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8005cf4:	79ba      	ldrb	r2, [r7, #6]
 8005cf6:	79f8      	ldrb	r0, [r7, #7]
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	4613      	mov	r3, r2
 8005d02:	2201      	movs	r2, #1
 8005d04:	4907      	ldr	r1, [pc, #28]	; (8005d24 <L6470_SetParam+0x40>)
 8005d06:	f7ff fb6d 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005d0a:	4907      	ldr	r1, [pc, #28]	; (8005d28 <L6470_SetParam+0x44>)
 8005d0c:	4805      	ldr	r0, [pc, #20]	; (8005d24 <L6470_SetParam+0x40>)
 8005d0e:	f7ff fb8d 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005d12:	4906      	ldr	r1, [pc, #24]	; (8005d2c <L6470_SetParam+0x48>)
 8005d14:	4804      	ldr	r0, [pc, #16]	; (8005d28 <L6470_SetParam+0x44>)
 8005d16:	f000 fc51 	bl	80065bc <L6470_DaisyChainCommand>
}
 8005d1a:	bf00      	nop
 8005d1c:	3708      	adds	r7, #8
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	20000b38 	.word	0x20000b38
 8005d28:	20000b28 	.word	0x20000b28
 8005d2c:	20000b18 	.word	0x20000b18

08005d30 <L6470_GetParam>:
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * 
  * @retval ReceivedValue The register value.
  */
uint32_t L6470_GetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b086      	sub	sp, #24
 8005d34:	af02      	add	r7, sp, #8
 8005d36:	4603      	mov	r3, r0
 8005d38:	460a      	mov	r2, r1
 8005d3a:	71fb      	strb	r3, [r7, #7]
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	71bb      	strb	r3, [r7, #6]
  uint8_t ValueLengthByte;
  uint32_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8005d40:	79ba      	ldrb	r2, [r7, #6]
 8005d42:	79f8      	ldrb	r0, [r7, #7]
 8005d44:	2300      	movs	r3, #0
 8005d46:	9301      	str	r3, [sp, #4]
 8005d48:	2300      	movs	r3, #0
 8005d4a:	9300      	str	r3, [sp, #0]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	2202      	movs	r2, #2
 8005d50:	4910      	ldr	r1, [pc, #64]	; (8005d94 <L6470_GetParam+0x64>)
 8005d52:	f7ff fb47 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005d56:	4910      	ldr	r1, [pc, #64]	; (8005d98 <L6470_GetParam+0x68>)
 8005d58:	480e      	ldr	r0, [pc, #56]	; (8005d94 <L6470_GetParam+0x64>)
 8005d5a:	f7ff fb67 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005d5e:	490f      	ldr	r1, [pc, #60]	; (8005d9c <L6470_GetParam+0x6c>)
 8005d60:	480d      	ldr	r0, [pc, #52]	; (8005d98 <L6470_GetParam+0x68>)
 8005d62:	f000 fc2b 	bl	80065bc <L6470_DaisyChainCommand>
  
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8005d66:	79ba      	ldrb	r2, [r7, #6]
 8005d68:	490d      	ldr	r1, [pc, #52]	; (8005da0 <L6470_GetParam+0x70>)
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	440b      	add	r3, r1
 8005d74:	330e      	adds	r3, #14
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	73fb      	strb	r3, [r7, #15]
  
  ReceivedValue = L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8005d7a:	7bfa      	ldrb	r2, [r7, #15]
 8005d7c:	79fb      	ldrb	r3, [r7, #7]
 8005d7e:	4907      	ldr	r1, [pc, #28]	; (8005d9c <L6470_GetParam+0x6c>)
 8005d80:	4618      	mov	r0, r3
 8005d82:	f000 fc61 	bl	8006648 <L6470_ExtractReturnedData>
 8005d86:	60b8      	str	r0, [r7, #8]
  
  return ReceivedValue;
 8005d88:	68bb      	ldr	r3, [r7, #8]
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3710      	adds	r7, #16
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd80      	pop	{r7, pc}
 8005d92:	bf00      	nop
 8005d94:	20000b38 	.word	0x20000b38
 8005d98:	20000b28 	.word	0x20000b28
 8005d9c:	20000b18 	.word	0x20000b18
 8005da0:	0800d4a0 	.word	0x0800d4a0

08005da4 <L6470_Run>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_Run(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b084      	sub	sp, #16
 8005da8:	af02      	add	r7, sp, #8
 8005daa:	4603      	mov	r3, r0
 8005dac:	603a      	str	r2, [r7, #0]
 8005dae:	71fb      	strb	r3, [r7, #7]
 8005db0:	460b      	mov	r3, r1
 8005db2:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8005db4:	79ba      	ldrb	r2, [r7, #6]
 8005db6:	79f8      	ldrb	r0, [r7, #7]
 8005db8:	2300      	movs	r3, #0
 8005dba:	9301      	str	r3, [sp, #4]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	9300      	str	r3, [sp, #0]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	2203      	movs	r2, #3
 8005dc4:	4907      	ldr	r1, [pc, #28]	; (8005de4 <L6470_Run+0x40>)
 8005dc6:	f7ff fb0d 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005dca:	4907      	ldr	r1, [pc, #28]	; (8005de8 <L6470_Run+0x44>)
 8005dcc:	4805      	ldr	r0, [pc, #20]	; (8005de4 <L6470_Run+0x40>)
 8005dce:	f7ff fb2d 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005dd2:	4906      	ldr	r1, [pc, #24]	; (8005dec <L6470_Run+0x48>)
 8005dd4:	4804      	ldr	r0, [pc, #16]	; (8005de8 <L6470_Run+0x44>)
 8005dd6:	f000 fbf1 	bl	80065bc <L6470_DaisyChainCommand>
}
 8005dda:	bf00      	nop
 8005ddc:	3708      	adds	r7, #8
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000b38 	.word	0x20000b38
 8005de8:	20000b28 	.word	0x20000b28
 8005dec:	20000b18 	.word	0x20000b18

08005df0 <L6470_StepClock>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_StepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af02      	add	r7, sp, #8
 8005df6:	4603      	mov	r3, r0
 8005df8:	460a      	mov	r2, r1
 8005dfa:	71fb      	strb	r3, [r7, #7]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8005e00:	79ba      	ldrb	r2, [r7, #6]
 8005e02:	79f8      	ldrb	r0, [r7, #7]
 8005e04:	2300      	movs	r3, #0
 8005e06:	9301      	str	r3, [sp, #4]
 8005e08:	2300      	movs	r3, #0
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	2204      	movs	r2, #4
 8005e10:	4907      	ldr	r1, [pc, #28]	; (8005e30 <L6470_StepClock+0x40>)
 8005e12:	f7ff fae7 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005e16:	4907      	ldr	r1, [pc, #28]	; (8005e34 <L6470_StepClock+0x44>)
 8005e18:	4805      	ldr	r0, [pc, #20]	; (8005e30 <L6470_StepClock+0x40>)
 8005e1a:	f7ff fb07 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005e1e:	4906      	ldr	r1, [pc, #24]	; (8005e38 <L6470_StepClock+0x48>)
 8005e20:	4804      	ldr	r0, [pc, #16]	; (8005e34 <L6470_StepClock+0x44>)
 8005e22:	f000 fbcb 	bl	80065bc <L6470_DaisyChainCommand>
}
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000b38 	.word	0x20000b38
 8005e34:	20000b28 	.word	0x20000b28
 8005e38:	20000b18 	.word	0x20000b18

08005e3c <L6470_Move>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  N_Step        The number of microsteps.
  */
void L6470_Move(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af02      	add	r7, sp, #8
 8005e42:	4603      	mov	r3, r0
 8005e44:	603a      	str	r2, [r7, #0]
 8005e46:	71fb      	strb	r3, [r7, #7]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8005e4c:	79ba      	ldrb	r2, [r7, #6]
 8005e4e:	79f8      	ldrb	r0, [r7, #7]
 8005e50:	2300      	movs	r3, #0
 8005e52:	9301      	str	r3, [sp, #4]
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	9300      	str	r3, [sp, #0]
 8005e58:	4613      	mov	r3, r2
 8005e5a:	2205      	movs	r2, #5
 8005e5c:	4907      	ldr	r1, [pc, #28]	; (8005e7c <L6470_Move+0x40>)
 8005e5e:	f7ff fac1 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005e62:	4907      	ldr	r1, [pc, #28]	; (8005e80 <L6470_Move+0x44>)
 8005e64:	4805      	ldr	r0, [pc, #20]	; (8005e7c <L6470_Move+0x40>)
 8005e66:	f7ff fae1 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005e6a:	4906      	ldr	r1, [pc, #24]	; (8005e84 <L6470_Move+0x48>)
 8005e6c:	4804      	ldr	r0, [pc, #16]	; (8005e80 <L6470_Move+0x44>)
 8005e6e:	f000 fba5 	bl	80065bc <L6470_DaisyChainCommand>
}
 8005e72:	bf00      	nop
 8005e74:	3708      	adds	r7, #8
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	20000b38 	.word	0x20000b38
 8005e80:	20000b28 	.word	0x20000b28
 8005e84:	20000b18 	.word	0x20000b18

08005e88 <L6470_GoTo>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af02      	add	r7, sp, #8
 8005e8e:	4603      	mov	r3, r0
 8005e90:	6039      	str	r1, [r7, #0]
 8005e92:	71fb      	strb	r3, [r7, #7]
  if (AbsPos <= L6470_POSITION_RANGE)
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005e9a:	d211      	bcs.n	8005ec0 <L6470_GoTo+0x38>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8005e9c:	79f8      	ldrb	r0, [r7, #7]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9301      	str	r3, [sp, #4]
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	2206      	movs	r2, #6
 8005eaa:	4907      	ldr	r1, [pc, #28]	; (8005ec8 <L6470_GoTo+0x40>)
 8005eac:	f7ff fa9a 	bl	80053e4 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005eb0:	4906      	ldr	r1, [pc, #24]	; (8005ecc <L6470_GoTo+0x44>)
 8005eb2:	4805      	ldr	r0, [pc, #20]	; (8005ec8 <L6470_GoTo+0x40>)
 8005eb4:	f7ff faba 	bl	800542c <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005eb8:	4905      	ldr	r1, [pc, #20]	; (8005ed0 <L6470_GoTo+0x48>)
 8005eba:	4804      	ldr	r0, [pc, #16]	; (8005ecc <L6470_GoTo+0x44>)
 8005ebc:	f000 fb7e 	bl	80065bc <L6470_DaisyChainCommand>
  }
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20000b38 	.word	0x20000b38
 8005ecc:	20000b28 	.word	0x20000b28
 8005ed0:	20000b18 	.word	0x20000b18

08005ed4 <L6470_GoToDir>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af02      	add	r7, sp, #8
 8005eda:	4603      	mov	r3, r0
 8005edc:	603a      	str	r2, [r7, #0]
 8005ede:	71fb      	strb	r3, [r7, #7]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	71bb      	strb	r3, [r7, #6]
  if (AbsPos <= L6470_POSITION_RANGE)
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005eea:	d212      	bcs.n	8005f12 <L6470_GoToDir+0x3e>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8005eec:	79ba      	ldrb	r2, [r7, #6]
 8005eee:	79f8      	ldrb	r0, [r7, #7]
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	9301      	str	r3, [sp, #4]
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	2207      	movs	r2, #7
 8005efc:	4907      	ldr	r1, [pc, #28]	; (8005f1c <L6470_GoToDir+0x48>)
 8005efe:	f7ff fa71 	bl	80053e4 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005f02:	4907      	ldr	r1, [pc, #28]	; (8005f20 <L6470_GoToDir+0x4c>)
 8005f04:	4805      	ldr	r0, [pc, #20]	; (8005f1c <L6470_GoToDir+0x48>)
 8005f06:	f7ff fa91 	bl	800542c <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005f0a:	4906      	ldr	r1, [pc, #24]	; (8005f24 <L6470_GoToDir+0x50>)
 8005f0c:	4804      	ldr	r0, [pc, #16]	; (8005f20 <L6470_GoToDir+0x4c>)
 8005f0e:	f000 fb55 	bl	80065bc <L6470_DaisyChainCommand>
  }
}
 8005f12:	bf00      	nop
 8005f14:	3708      	adds	r7, #8
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000b38 	.word	0x20000b38
 8005f20:	20000b28 	.word	0x20000b28
 8005f24:	20000b18 	.word	0x20000b18

08005f28 <L6470_GoUntil>:
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_GoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af02      	add	r7, sp, #8
 8005f2e:	603b      	str	r3, [r7, #0]
 8005f30:	4603      	mov	r3, r0
 8005f32:	71fb      	strb	r3, [r7, #7]
 8005f34:	460b      	mov	r3, r1
 8005f36:	71bb      	strb	r3, [r7, #6]
 8005f38:	4613      	mov	r3, r2
 8005f3a:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8005f3c:	79b9      	ldrb	r1, [r7, #6]
 8005f3e:	797b      	ldrb	r3, [r7, #5]
 8005f40:	79f8      	ldrb	r0, [r7, #7]
 8005f42:	683a      	ldr	r2, [r7, #0]
 8005f44:	9201      	str	r2, [sp, #4]
 8005f46:	9300      	str	r3, [sp, #0]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	2208      	movs	r2, #8
 8005f4c:	4907      	ldr	r1, [pc, #28]	; (8005f6c <L6470_GoUntil+0x44>)
 8005f4e:	f7ff fa49 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005f52:	4907      	ldr	r1, [pc, #28]	; (8005f70 <L6470_GoUntil+0x48>)
 8005f54:	4805      	ldr	r0, [pc, #20]	; (8005f6c <L6470_GoUntil+0x44>)
 8005f56:	f7ff fa69 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005f5a:	4906      	ldr	r1, [pc, #24]	; (8005f74 <L6470_GoUntil+0x4c>)
 8005f5c:	4804      	ldr	r0, [pc, #16]	; (8005f70 <L6470_GoUntil+0x48>)
 8005f5e:	f000 fb2d 	bl	80065bc <L6470_DaisyChainCommand>
}
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000b38 	.word	0x20000b38
 8005f70:	20000b28 	.word	0x20000b28
 8005f74:	20000b18 	.word	0x20000b18

08005f78 <L6470_ReleaseSW>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_ReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af02      	add	r7, sp, #8
 8005f7e:	4603      	mov	r3, r0
 8005f80:	71fb      	strb	r3, [r7, #7]
 8005f82:	460b      	mov	r3, r1
 8005f84:	71bb      	strb	r3, [r7, #6]
 8005f86:	4613      	mov	r3, r2
 8005f88:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8005f8a:	79b9      	ldrb	r1, [r7, #6]
 8005f8c:	797b      	ldrb	r3, [r7, #5]
 8005f8e:	79f8      	ldrb	r0, [r7, #7]
 8005f90:	2200      	movs	r2, #0
 8005f92:	9201      	str	r2, [sp, #4]
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	460b      	mov	r3, r1
 8005f98:	2209      	movs	r2, #9
 8005f9a:	4907      	ldr	r1, [pc, #28]	; (8005fb8 <L6470_ReleaseSW+0x40>)
 8005f9c:	f7ff fa22 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005fa0:	4906      	ldr	r1, [pc, #24]	; (8005fbc <L6470_ReleaseSW+0x44>)
 8005fa2:	4805      	ldr	r0, [pc, #20]	; (8005fb8 <L6470_ReleaseSW+0x40>)
 8005fa4:	f7ff fa42 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005fa8:	4905      	ldr	r1, [pc, #20]	; (8005fc0 <L6470_ReleaseSW+0x48>)
 8005faa:	4804      	ldr	r0, [pc, #16]	; (8005fbc <L6470_ReleaseSW+0x44>)
 8005fac:	f000 fb06 	bl	80065bc <L6470_DaisyChainCommand>
}
 8005fb0:	bf00      	nop
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}
 8005fb8:	20000b38 	.word	0x20000b38
 8005fbc:	20000b28 	.word	0x20000b28
 8005fc0:	20000b18 	.word	0x20000b18

08005fc4 <L6470_GoHome>:
  *         via the shortest path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoHome(uint8_t L6470_Id)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af02      	add	r7, sp, #8
 8005fca:	4603      	mov	r3, r0
 8005fcc:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8005fce:	79f8      	ldrb	r0, [r7, #7]
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	9301      	str	r3, [sp, #4]
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	2300      	movs	r3, #0
 8005fda:	220a      	movs	r2, #10
 8005fdc:	4907      	ldr	r1, [pc, #28]	; (8005ffc <L6470_GoHome+0x38>)
 8005fde:	f7ff fa01 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005fe2:	4907      	ldr	r1, [pc, #28]	; (8006000 <L6470_GoHome+0x3c>)
 8005fe4:	4805      	ldr	r0, [pc, #20]	; (8005ffc <L6470_GoHome+0x38>)
 8005fe6:	f7ff fa21 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005fea:	4906      	ldr	r1, [pc, #24]	; (8006004 <L6470_GoHome+0x40>)
 8005fec:	4804      	ldr	r0, [pc, #16]	; (8006000 <L6470_GoHome+0x3c>)
 8005fee:	f000 fae5 	bl	80065bc <L6470_DaisyChainCommand>
}
 8005ff2:	bf00      	nop
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000b38 	.word	0x20000b38
 8006000:	20000b28 	.word	0x20000b28
 8006004:	20000b18 	.word	0x20000b18

08006008 <L6470_GoMark>:
  *         minimum path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoMark(uint8_t L6470_Id)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af02      	add	r7, sp, #8
 800600e:	4603      	mov	r3, r0
 8006010:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8006012:	79f8      	ldrb	r0, [r7, #7]
 8006014:	2300      	movs	r3, #0
 8006016:	9301      	str	r3, [sp, #4]
 8006018:	2300      	movs	r3, #0
 800601a:	9300      	str	r3, [sp, #0]
 800601c:	2300      	movs	r3, #0
 800601e:	220b      	movs	r2, #11
 8006020:	4907      	ldr	r1, [pc, #28]	; (8006040 <L6470_GoMark+0x38>)
 8006022:	f7ff f9df 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8006026:	4907      	ldr	r1, [pc, #28]	; (8006044 <L6470_GoMark+0x3c>)
 8006028:	4805      	ldr	r0, [pc, #20]	; (8006040 <L6470_GoMark+0x38>)
 800602a:	f7ff f9ff 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800602e:	4906      	ldr	r1, [pc, #24]	; (8006048 <L6470_GoMark+0x40>)
 8006030:	4804      	ldr	r0, [pc, #16]	; (8006044 <L6470_GoMark+0x3c>)
 8006032:	f000 fac3 	bl	80065bc <L6470_DaisyChainCommand>
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000b38 	.word	0x20000b38
 8006044:	20000b28 	.word	0x20000b28
 8006048:	20000b18 	.word	0x20000b18

0800604c <L6470_ResetPos>:
  * @brief  ResetPos command resets the ABS_POS register to zero.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetPos(uint8_t L6470_Id)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af02      	add	r7, sp, #8
 8006052:	4603      	mov	r3, r0
 8006054:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8006056:	79f8      	ldrb	r0, [r7, #7]
 8006058:	2300      	movs	r3, #0
 800605a:	9301      	str	r3, [sp, #4]
 800605c:	2300      	movs	r3, #0
 800605e:	9300      	str	r3, [sp, #0]
 8006060:	2300      	movs	r3, #0
 8006062:	220c      	movs	r2, #12
 8006064:	4907      	ldr	r1, [pc, #28]	; (8006084 <L6470_ResetPos+0x38>)
 8006066:	f7ff f9bd 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800606a:	4907      	ldr	r1, [pc, #28]	; (8006088 <L6470_ResetPos+0x3c>)
 800606c:	4805      	ldr	r0, [pc, #20]	; (8006084 <L6470_ResetPos+0x38>)
 800606e:	f7ff f9dd 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8006072:	4906      	ldr	r1, [pc, #24]	; (800608c <L6470_ResetPos+0x40>)
 8006074:	4804      	ldr	r0, [pc, #16]	; (8006088 <L6470_ResetPos+0x3c>)
 8006076:	f000 faa1 	bl	80065bc <L6470_DaisyChainCommand>
}
 800607a:	bf00      	nop
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000b38 	.word	0x20000b38
 8006088:	20000b28 	.word	0x20000b28
 800608c:	20000b18 	.word	0x20000b18

08006090 <L6470_ResetDevice>:
  * @brief  ResetDevice command resets the device to power-up conditions.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetDevice(uint8_t L6470_Id)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af02      	add	r7, sp, #8
 8006096:	4603      	mov	r3, r0
 8006098:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800609a:	79f8      	ldrb	r0, [r7, #7]
 800609c:	2300      	movs	r3, #0
 800609e:	9301      	str	r3, [sp, #4]
 80060a0:	2300      	movs	r3, #0
 80060a2:	9300      	str	r3, [sp, #0]
 80060a4:	2300      	movs	r3, #0
 80060a6:	220d      	movs	r2, #13
 80060a8:	4907      	ldr	r1, [pc, #28]	; (80060c8 <L6470_ResetDevice+0x38>)
 80060aa:	f7ff f99b 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80060ae:	4907      	ldr	r1, [pc, #28]	; (80060cc <L6470_ResetDevice+0x3c>)
 80060b0:	4805      	ldr	r0, [pc, #20]	; (80060c8 <L6470_ResetDevice+0x38>)
 80060b2:	f7ff f9bb 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80060b6:	4906      	ldr	r1, [pc, #24]	; (80060d0 <L6470_ResetDevice+0x40>)
 80060b8:	4804      	ldr	r0, [pc, #16]	; (80060cc <L6470_ResetDevice+0x3c>)
 80060ba:	f000 fa7f 	bl	80065bc <L6470_DaisyChainCommand>
}
 80060be:	bf00      	nop
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	20000b38 	.word	0x20000b38
 80060cc:	20000b28 	.word	0x20000b28
 80060d0:	20000b18 	.word	0x20000b18

080060d4 <L6470_SoftStop>:
  *         in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftStop(uint8_t L6470_Id)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af02      	add	r7, sp, #8
 80060da:	4603      	mov	r3, r0
 80060dc:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80060de:	79f8      	ldrb	r0, [r7, #7]
 80060e0:	2300      	movs	r3, #0
 80060e2:	9301      	str	r3, [sp, #4]
 80060e4:	2300      	movs	r3, #0
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	2300      	movs	r3, #0
 80060ea:	220e      	movs	r2, #14
 80060ec:	4907      	ldr	r1, [pc, #28]	; (800610c <L6470_SoftStop+0x38>)
 80060ee:	f7ff f979 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80060f2:	4907      	ldr	r1, [pc, #28]	; (8006110 <L6470_SoftStop+0x3c>)
 80060f4:	4805      	ldr	r0, [pc, #20]	; (800610c <L6470_SoftStop+0x38>)
 80060f6:	f7ff f999 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80060fa:	4906      	ldr	r1, [pc, #24]	; (8006114 <L6470_SoftStop+0x40>)
 80060fc:	4804      	ldr	r0, [pc, #16]	; (8006110 <L6470_SoftStop+0x3c>)
 80060fe:	f000 fa5d 	bl	80065bc <L6470_DaisyChainCommand>
}
 8006102:	bf00      	nop
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000b38 	.word	0x20000b38
 8006110:	20000b28 	.word	0x20000b28
 8006114:	20000b18 	.word	0x20000b18

08006118 <L6470_HardStop>:
  * @brief  HardStop command causes an immediate motor stop with infinite deceleration.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardStop(uint8_t L6470_Id)
{
 8006118:	b580      	push	{r7, lr}
 800611a:	b084      	sub	sp, #16
 800611c:	af02      	add	r7, sp, #8
 800611e:	4603      	mov	r3, r0
 8006120:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8006122:	79f8      	ldrb	r0, [r7, #7]
 8006124:	2300      	movs	r3, #0
 8006126:	9301      	str	r3, [sp, #4]
 8006128:	2300      	movs	r3, #0
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	2300      	movs	r3, #0
 800612e:	220f      	movs	r2, #15
 8006130:	4907      	ldr	r1, [pc, #28]	; (8006150 <L6470_HardStop+0x38>)
 8006132:	f7ff f957 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8006136:	4907      	ldr	r1, [pc, #28]	; (8006154 <L6470_HardStop+0x3c>)
 8006138:	4805      	ldr	r0, [pc, #20]	; (8006150 <L6470_HardStop+0x38>)
 800613a:	f7ff f977 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800613e:	4906      	ldr	r1, [pc, #24]	; (8006158 <L6470_HardStop+0x40>)
 8006140:	4804      	ldr	r0, [pc, #16]	; (8006154 <L6470_HardStop+0x3c>)
 8006142:	f000 fa3b 	bl	80065bc <L6470_DaisyChainCommand>
}
 8006146:	bf00      	nop
 8006148:	3708      	adds	r7, #8
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000b38 	.word	0x20000b38
 8006154:	20000b28 	.word	0x20000b28
 8006158:	20000b18 	.word	0x20000b18

0800615c <L6470_SoftHiZ>:
  *         stored in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftHiZ(uint8_t L6470_Id)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af02      	add	r7, sp, #8
 8006162:	4603      	mov	r3, r0
 8006164:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8006166:	79f8      	ldrb	r0, [r7, #7]
 8006168:	2300      	movs	r3, #0
 800616a:	9301      	str	r3, [sp, #4]
 800616c:	2300      	movs	r3, #0
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	2300      	movs	r3, #0
 8006172:	2210      	movs	r2, #16
 8006174:	4907      	ldr	r1, [pc, #28]	; (8006194 <L6470_SoftHiZ+0x38>)
 8006176:	f7ff f935 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800617a:	4907      	ldr	r1, [pc, #28]	; (8006198 <L6470_SoftHiZ+0x3c>)
 800617c:	4805      	ldr	r0, [pc, #20]	; (8006194 <L6470_SoftHiZ+0x38>)
 800617e:	f7ff f955 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8006182:	4906      	ldr	r1, [pc, #24]	; (800619c <L6470_SoftHiZ+0x40>)
 8006184:	4804      	ldr	r0, [pc, #16]	; (8006198 <L6470_SoftHiZ+0x3c>)
 8006186:	f000 fa19 	bl	80065bc <L6470_DaisyChainCommand>
}
 800618a:	bf00      	nop
 800618c:	3708      	adds	r7, #8
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000b38 	.word	0x20000b38
 8006198:	20000b28 	.word	0x20000b28
 800619c:	20000b18 	.word	0x20000b18

080061a0 <L6470_HardHiZ>:
  * @brief  HardHiZ command immediately disables the power bridges (high impedance state).
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardHiZ(uint8_t L6470_Id)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af02      	add	r7, sp, #8
 80061a6:	4603      	mov	r3, r0
 80061a8:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80061aa:	79f8      	ldrb	r0, [r7, #7]
 80061ac:	2300      	movs	r3, #0
 80061ae:	9301      	str	r3, [sp, #4]
 80061b0:	2300      	movs	r3, #0
 80061b2:	9300      	str	r3, [sp, #0]
 80061b4:	2300      	movs	r3, #0
 80061b6:	2211      	movs	r2, #17
 80061b8:	4907      	ldr	r1, [pc, #28]	; (80061d8 <L6470_HardHiZ+0x38>)
 80061ba:	f7ff f913 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80061be:	4907      	ldr	r1, [pc, #28]	; (80061dc <L6470_HardHiZ+0x3c>)
 80061c0:	4805      	ldr	r0, [pc, #20]	; (80061d8 <L6470_HardHiZ+0x38>)
 80061c2:	f7ff f933 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80061c6:	4906      	ldr	r1, [pc, #24]	; (80061e0 <L6470_HardHiZ+0x40>)
 80061c8:	4804      	ldr	r0, [pc, #16]	; (80061dc <L6470_HardHiZ+0x3c>)
 80061ca:	f000 f9f7 	bl	80065bc <L6470_DaisyChainCommand>
}
 80061ce:	bf00      	nop
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
 80061d6:	bf00      	nop
 80061d8:	20000b38 	.word	0x20000b38
 80061dc:	20000b28 	.word	0x20000b28
 80061e0:	20000b18 	.word	0x20000b18

080061e4 <L6470_GetStatus>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * 
  * @retval ReceivedValue The register value.
  */
uint16_t L6470_GetStatus(uint8_t L6470_Id)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af02      	add	r7, sp, #8
 80061ea:	4603      	mov	r3, r0
 80061ec:	71fb      	strb	r3, [r7, #7]
  uint16_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80061ee:	79f8      	ldrb	r0, [r7, #7]
 80061f0:	2300      	movs	r3, #0
 80061f2:	9301      	str	r3, [sp, #4]
 80061f4:	2300      	movs	r3, #0
 80061f6:	9300      	str	r3, [sp, #0]
 80061f8:	2300      	movs	r3, #0
 80061fa:	2212      	movs	r2, #18
 80061fc:	490b      	ldr	r1, [pc, #44]	; (800622c <L6470_GetStatus+0x48>)
 80061fe:	f7ff f8f1 	bl	80053e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8006202:	490b      	ldr	r1, [pc, #44]	; (8006230 <L6470_GetStatus+0x4c>)
 8006204:	4809      	ldr	r0, [pc, #36]	; (800622c <L6470_GetStatus+0x48>)
 8006206:	f7ff f911 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800620a:	490a      	ldr	r1, [pc, #40]	; (8006234 <L6470_GetStatus+0x50>)
 800620c:	4808      	ldr	r0, [pc, #32]	; (8006230 <L6470_GetStatus+0x4c>)
 800620e:	f000 f9d5 	bl	80065bc <L6470_DaisyChainCommand>
  
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8006212:	79fb      	ldrb	r3, [r7, #7]
 8006214:	2202      	movs	r2, #2
 8006216:	4907      	ldr	r1, [pc, #28]	; (8006234 <L6470_GetStatus+0x50>)
 8006218:	4618      	mov	r0, r3
 800621a:	f000 fa15 	bl	8006648 <L6470_ExtractReturnedData>
 800621e:	4603      	mov	r3, r0
 8006220:	81fb      	strh	r3, [r7, #14]
  
  return ReceivedValue;
 8006222:	89fb      	ldrh	r3, [r7, #14]
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20000b38 	.word	0x20000b38
 8006230:	20000b28 	.word	0x20000b28
 8006234:	20000b18 	.word	0x20000b18

08006238 <L6470_PrepareSetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af02      	add	r7, sp, #8
 800623e:	4603      	mov	r3, r0
 8006240:	603a      	str	r2, [r7, #0]
 8006242:	71fb      	strb	r3, [r7, #7]
 8006244:	460b      	mov	r3, r1
 8006246:	71bb      	strb	r3, [r7, #6]
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8006248:	79ba      	ldrb	r2, [r7, #6]
 800624a:	79f8      	ldrb	r0, [r7, #7]
 800624c:	2300      	movs	r3, #0
 800624e:	9301      	str	r3, [sp, #4]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	4613      	mov	r3, r2
 8006256:	2201      	movs	r2, #1
 8006258:	4903      	ldr	r1, [pc, #12]	; (8006268 <L6470_PrepareSetParam+0x30>)
 800625a:	f7ff f8c3 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 800625e:	bf00      	nop
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop
 8006268:	20000b38 	.word	0x20000b38

0800626c <L6470_PrepareGetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af02      	add	r7, sp, #8
 8006272:	4603      	mov	r3, r0
 8006274:	460a      	mov	r2, r1
 8006276:	71fb      	strb	r3, [r7, #7]
 8006278:	4613      	mov	r3, r2
 800627a:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800627c:	79ba      	ldrb	r2, [r7, #6]
 800627e:	79f8      	ldrb	r0, [r7, #7]
 8006280:	2300      	movs	r3, #0
 8006282:	9301      	str	r3, [sp, #4]
 8006284:	2300      	movs	r3, #0
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	4613      	mov	r3, r2
 800628a:	2202      	movs	r2, #2
 800628c:	4903      	ldr	r1, [pc, #12]	; (800629c <L6470_PrepareGetParam+0x30>)
 800628e:	f7ff f8a9 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	20000b38 	.word	0x20000b38

080062a0 <L6470_PrepareRun>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareRun(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af02      	add	r7, sp, #8
 80062a6:	4603      	mov	r3, r0
 80062a8:	603a      	str	r2, [r7, #0]
 80062aa:	71fb      	strb	r3, [r7, #7]
 80062ac:	460b      	mov	r3, r1
 80062ae:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80062b0:	79ba      	ldrb	r2, [r7, #6]
 80062b2:	79f8      	ldrb	r0, [r7, #7]
 80062b4:	2300      	movs	r3, #0
 80062b6:	9301      	str	r3, [sp, #4]
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	9300      	str	r3, [sp, #0]
 80062bc:	4613      	mov	r3, r2
 80062be:	2203      	movs	r2, #3
 80062c0:	4903      	ldr	r1, [pc, #12]	; (80062d0 <L6470_PrepareRun+0x30>)
 80062c2:	f7ff f88f 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 80062c6:	bf00      	nop
 80062c8:	3708      	adds	r7, #8
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000b38 	.word	0x20000b38

080062d4 <L6470_PrepareStepClock>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareStepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af02      	add	r7, sp, #8
 80062da:	4603      	mov	r3, r0
 80062dc:	460a      	mov	r2, r1
 80062de:	71fb      	strb	r3, [r7, #7]
 80062e0:	4613      	mov	r3, r2
 80062e2:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80062e4:	79ba      	ldrb	r2, [r7, #6]
 80062e6:	79f8      	ldrb	r0, [r7, #7]
 80062e8:	2300      	movs	r3, #0
 80062ea:	9301      	str	r3, [sp, #4]
 80062ec:	2300      	movs	r3, #0
 80062ee:	9300      	str	r3, [sp, #0]
 80062f0:	4613      	mov	r3, r2
 80062f2:	2204      	movs	r2, #4
 80062f4:	4903      	ldr	r1, [pc, #12]	; (8006304 <L6470_PrepareStepClock+0x30>)
 80062f6:	f7ff f875 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 80062fa:	bf00      	nop
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	20000b38 	.word	0x20000b38

08006308 <L6470_PrepareMove>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareMove(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af02      	add	r7, sp, #8
 800630e:	4603      	mov	r3, r0
 8006310:	603a      	str	r2, [r7, #0]
 8006312:	71fb      	strb	r3, [r7, #7]
 8006314:	460b      	mov	r3, r1
 8006316:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8006318:	79ba      	ldrb	r2, [r7, #6]
 800631a:	79f8      	ldrb	r0, [r7, #7]
 800631c:	2300      	movs	r3, #0
 800631e:	9301      	str	r3, [sp, #4]
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	4613      	mov	r3, r2
 8006326:	2205      	movs	r2, #5
 8006328:	4903      	ldr	r1, [pc, #12]	; (8006338 <L6470_PrepareMove+0x30>)
 800632a:	f7ff f85b 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 800632e:	bf00      	nop
 8006330:	3708      	adds	r7, #8
 8006332:	46bd      	mov	sp, r7
 8006334:	bd80      	pop	{r7, pc}
 8006336:	bf00      	nop
 8006338:	20000b38 	.word	0x20000b38

0800633c <L6470_PrepareGoTo>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af02      	add	r7, sp, #8
 8006342:	4603      	mov	r3, r0
 8006344:	6039      	str	r1, [r7, #0]
 8006346:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8006348:	79f8      	ldrb	r0, [r7, #7]
 800634a:	2300      	movs	r3, #0
 800634c:	9301      	str	r3, [sp, #4]
 800634e:	2300      	movs	r3, #0
 8006350:	9300      	str	r3, [sp, #0]
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	2206      	movs	r2, #6
 8006356:	4903      	ldr	r1, [pc, #12]	; (8006364 <L6470_PrepareGoTo+0x28>)
 8006358:	f7ff f844 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 800635c:	bf00      	nop
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	20000b38 	.word	0x20000b38

08006368 <L6470_PrepareGoToDir>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b084      	sub	sp, #16
 800636c:	af02      	add	r7, sp, #8
 800636e:	4603      	mov	r3, r0
 8006370:	603a      	str	r2, [r7, #0]
 8006372:	71fb      	strb	r3, [r7, #7]
 8006374:	460b      	mov	r3, r1
 8006376:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8006378:	79ba      	ldrb	r2, [r7, #6]
 800637a:	79f8      	ldrb	r0, [r7, #7]
 800637c:	2300      	movs	r3, #0
 800637e:	9301      	str	r3, [sp, #4]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	4613      	mov	r3, r2
 8006386:	2207      	movs	r2, #7
 8006388:	4903      	ldr	r1, [pc, #12]	; (8006398 <L6470_PrepareGoToDir+0x30>)
 800638a:	f7ff f82b 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 800638e:	bf00      	nop
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop
 8006398:	20000b38 	.word	0x20000b38

0800639c <L6470_PrepareGoUntil>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af02      	add	r7, sp, #8
 80063a2:	603b      	str	r3, [r7, #0]
 80063a4:	4603      	mov	r3, r0
 80063a6:	71fb      	strb	r3, [r7, #7]
 80063a8:	460b      	mov	r3, r1
 80063aa:	71bb      	strb	r3, [r7, #6]
 80063ac:	4613      	mov	r3, r2
 80063ae:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80063b0:	79b9      	ldrb	r1, [r7, #6]
 80063b2:	797b      	ldrb	r3, [r7, #5]
 80063b4:	79f8      	ldrb	r0, [r7, #7]
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	9201      	str	r2, [sp, #4]
 80063ba:	9300      	str	r3, [sp, #0]
 80063bc:	460b      	mov	r3, r1
 80063be:	2208      	movs	r2, #8
 80063c0:	4903      	ldr	r1, [pc, #12]	; (80063d0 <L6470_PrepareGoUntil+0x34>)
 80063c2:	f7ff f80f 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000b38 	.word	0x20000b38

080063d4 <L6470_PrepareReleaseSW>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af02      	add	r7, sp, #8
 80063da:	4603      	mov	r3, r0
 80063dc:	71fb      	strb	r3, [r7, #7]
 80063de:	460b      	mov	r3, r1
 80063e0:	71bb      	strb	r3, [r7, #6]
 80063e2:	4613      	mov	r3, r2
 80063e4:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80063e6:	79b9      	ldrb	r1, [r7, #6]
 80063e8:	797b      	ldrb	r3, [r7, #5]
 80063ea:	79f8      	ldrb	r0, [r7, #7]
 80063ec:	2200      	movs	r2, #0
 80063ee:	9201      	str	r2, [sp, #4]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	460b      	mov	r3, r1
 80063f4:	2209      	movs	r2, #9
 80063f6:	4903      	ldr	r1, [pc, #12]	; (8006404 <L6470_PrepareReleaseSW+0x30>)
 80063f8:	f7fe fff4 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 80063fc:	bf00      	nop
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}
 8006404:	20000b38 	.word	0x20000b38

08006408 <L6470_PrepareGoHome>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoHome(uint8_t L6470_Id)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af02      	add	r7, sp, #8
 800640e:	4603      	mov	r3, r0
 8006410:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8006412:	79f8      	ldrb	r0, [r7, #7]
 8006414:	2300      	movs	r3, #0
 8006416:	9301      	str	r3, [sp, #4]
 8006418:	2300      	movs	r3, #0
 800641a:	9300      	str	r3, [sp, #0]
 800641c:	2300      	movs	r3, #0
 800641e:	220a      	movs	r2, #10
 8006420:	4903      	ldr	r1, [pc, #12]	; (8006430 <L6470_PrepareGoHome+0x28>)
 8006422:	f7fe ffdf 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 8006426:	bf00      	nop
 8006428:	3708      	adds	r7, #8
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	20000b38 	.word	0x20000b38

08006434 <L6470_PrepareGoMark>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoMark(uint8_t L6470_Id)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af02      	add	r7, sp, #8
 800643a:	4603      	mov	r3, r0
 800643c:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800643e:	79f8      	ldrb	r0, [r7, #7]
 8006440:	2300      	movs	r3, #0
 8006442:	9301      	str	r3, [sp, #4]
 8006444:	2300      	movs	r3, #0
 8006446:	9300      	str	r3, [sp, #0]
 8006448:	2300      	movs	r3, #0
 800644a:	220b      	movs	r2, #11
 800644c:	4903      	ldr	r1, [pc, #12]	; (800645c <L6470_PrepareGoMark+0x28>)
 800644e:	f7fe ffc9 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 8006452:	bf00      	nop
 8006454:	3708      	adds	r7, #8
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}
 800645a:	bf00      	nop
 800645c:	20000b38 	.word	0x20000b38

08006460 <L6470_PrepareResetPos>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetPos(uint8_t L6470_Id)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af02      	add	r7, sp, #8
 8006466:	4603      	mov	r3, r0
 8006468:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800646a:	79f8      	ldrb	r0, [r7, #7]
 800646c:	2300      	movs	r3, #0
 800646e:	9301      	str	r3, [sp, #4]
 8006470:	2300      	movs	r3, #0
 8006472:	9300      	str	r3, [sp, #0]
 8006474:	2300      	movs	r3, #0
 8006476:	220c      	movs	r2, #12
 8006478:	4903      	ldr	r1, [pc, #12]	; (8006488 <L6470_PrepareResetPos+0x28>)
 800647a:	f7fe ffb3 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000b38 	.word	0x20000b38

0800648c <L6470_PrepareResetDevice>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetDevice(uint8_t L6470_Id)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af02      	add	r7, sp, #8
 8006492:	4603      	mov	r3, r0
 8006494:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8006496:	79f8      	ldrb	r0, [r7, #7]
 8006498:	2300      	movs	r3, #0
 800649a:	9301      	str	r3, [sp, #4]
 800649c:	2300      	movs	r3, #0
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	2300      	movs	r3, #0
 80064a2:	220d      	movs	r2, #13
 80064a4:	4903      	ldr	r1, [pc, #12]	; (80064b4 <L6470_PrepareResetDevice+0x28>)
 80064a6:	f7fe ff9d 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 80064aa:	bf00      	nop
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	20000b38 	.word	0x20000b38

080064b8 <L6470_PrepareSoftStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftStop(uint8_t L6470_Id)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af02      	add	r7, sp, #8
 80064be:	4603      	mov	r3, r0
 80064c0:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80064c2:	79f8      	ldrb	r0, [r7, #7]
 80064c4:	2300      	movs	r3, #0
 80064c6:	9301      	str	r3, [sp, #4]
 80064c8:	2300      	movs	r3, #0
 80064ca:	9300      	str	r3, [sp, #0]
 80064cc:	2300      	movs	r3, #0
 80064ce:	220e      	movs	r2, #14
 80064d0:	4903      	ldr	r1, [pc, #12]	; (80064e0 <L6470_PrepareSoftStop+0x28>)
 80064d2:	f7fe ff87 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 80064d6:	bf00      	nop
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000b38 	.word	0x20000b38

080064e4 <L6470_PrepareHardStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardStop(uint8_t L6470_Id)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af02      	add	r7, sp, #8
 80064ea:	4603      	mov	r3, r0
 80064ec:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80064ee:	79f8      	ldrb	r0, [r7, #7]
 80064f0:	2300      	movs	r3, #0
 80064f2:	9301      	str	r3, [sp, #4]
 80064f4:	2300      	movs	r3, #0
 80064f6:	9300      	str	r3, [sp, #0]
 80064f8:	2300      	movs	r3, #0
 80064fa:	220f      	movs	r2, #15
 80064fc:	4903      	ldr	r1, [pc, #12]	; (800650c <L6470_PrepareHardStop+0x28>)
 80064fe:	f7fe ff71 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 8006502:	bf00      	nop
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}
 800650a:	bf00      	nop
 800650c:	20000b38 	.word	0x20000b38

08006510 <L6470_PrepareSoftHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftHiZ(uint8_t L6470_Id)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af02      	add	r7, sp, #8
 8006516:	4603      	mov	r3, r0
 8006518:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800651a:	79f8      	ldrb	r0, [r7, #7]
 800651c:	2300      	movs	r3, #0
 800651e:	9301      	str	r3, [sp, #4]
 8006520:	2300      	movs	r3, #0
 8006522:	9300      	str	r3, [sp, #0]
 8006524:	2300      	movs	r3, #0
 8006526:	2210      	movs	r2, #16
 8006528:	4903      	ldr	r1, [pc, #12]	; (8006538 <L6470_PrepareSoftHiZ+0x28>)
 800652a:	f7fe ff5b 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	bf00      	nop
 8006538:	20000b38 	.word	0x20000b38

0800653c <L6470_PrepareHardHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardHiZ(uint8_t L6470_Id)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b084      	sub	sp, #16
 8006540:	af02      	add	r7, sp, #8
 8006542:	4603      	mov	r3, r0
 8006544:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8006546:	79f8      	ldrb	r0, [r7, #7]
 8006548:	2300      	movs	r3, #0
 800654a:	9301      	str	r3, [sp, #4]
 800654c:	2300      	movs	r3, #0
 800654e:	9300      	str	r3, [sp, #0]
 8006550:	2300      	movs	r3, #0
 8006552:	2211      	movs	r2, #17
 8006554:	4903      	ldr	r1, [pc, #12]	; (8006564 <L6470_PrepareHardHiZ+0x28>)
 8006556:	f7fe ff45 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 800655a:	bf00      	nop
 800655c:	3708      	adds	r7, #8
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000b38 	.word	0x20000b38

08006568 <L6470_PrepareGetStatus>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetStatus(uint8_t L6470_Id)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af02      	add	r7, sp, #8
 800656e:	4603      	mov	r3, r0
 8006570:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8006572:	79f8      	ldrb	r0, [r7, #7]
 8006574:	2300      	movs	r3, #0
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	2300      	movs	r3, #0
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	2300      	movs	r3, #0
 800657e:	2212      	movs	r2, #18
 8006580:	4903      	ldr	r1, [pc, #12]	; (8006590 <L6470_PrepareGetStatus+0x28>)
 8006582:	f7fe ff2f 	bl	80053e4 <L6470_PrepareAppCmdPkg>
}
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	20000b38 	.word	0x20000b38

08006594 <L6470_PerformPreparedApplicationCommand>:
  * @retval (uint8_t*)L6470_DaisyChainSpiRxStruct  The pointer to the structure
  *         containing returned values from each L6470 of the daisy chain for each
  *         sent SPI data.
  */
uint8_t* L6470_PerformPreparedApplicationCommand(void)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	af00      	add	r7, sp, #0
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8006598:	4905      	ldr	r1, [pc, #20]	; (80065b0 <L6470_PerformPreparedApplicationCommand+0x1c>)
 800659a:	4806      	ldr	r0, [pc, #24]	; (80065b4 <L6470_PerformPreparedApplicationCommand+0x20>)
 800659c:	f7fe ff46 	bl	800542c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80065a0:	4905      	ldr	r1, [pc, #20]	; (80065b8 <L6470_PerformPreparedApplicationCommand+0x24>)
 80065a2:	4803      	ldr	r0, [pc, #12]	; (80065b0 <L6470_PerformPreparedApplicationCommand+0x1c>)
 80065a4:	f000 f80a 	bl	80065bc <L6470_DaisyChainCommand>
  
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 80065a8:	4b03      	ldr	r3, [pc, #12]	; (80065b8 <L6470_PerformPreparedApplicationCommand+0x24>)
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	bd80      	pop	{r7, pc}
 80065ae:	bf00      	nop
 80065b0:	20000b28 	.word	0x20000b28
 80065b4:	20000b38 	.word	0x20000b38
 80065b8:	20000b18 	.word	0x20000b18

080065bc <L6470_DaisyChainCommand>:
  * @brief  Send command to the L6470 daisy chain via SPI
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the matrix array of bytes to be sent to the daisy chain L6470
  * @param  pL6470_DaisyChainSpiRxStruct  Pointer to the matrix array of bytes to be received from the daisy chain L6470
  */
void L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	6039      	str	r1, [r7, #0]
  uint8_t spibyte;
  
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80065c6:	4b1c      	ldr	r3, [pc, #112]	; (8006638 <L6470_DaisyChainCommand+0x7c>)
 80065c8:	2200      	movs	r2, #0
 80065ca:	701a      	strb	r2, [r3, #0]
  
  /* Send all command bytes via SPI */
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80065cc:	2300      	movs	r3, #0
 80065ce:	73fb      	strb	r3, [r7, #15]
 80065d0:	e02b      	b.n	800662a <L6470_DaisyChainCommand+0x6e>
  {
    /* Enable SPI communication for L6470 */
    L6470_nCS_LOW();
 80065d2:	2200      	movs	r2, #0
 80065d4:	2110      	movs	r1, #16
 80065d6:	4819      	ldr	r0, [pc, #100]	; (800663c <L6470_DaisyChainCommand+0x80>)
 80065d8:	f7fb fdc8 	bl	800216c <HAL_GPIO_WritePin>
    
    /* Send the command via SPI */
    L6470_SPI_Communication(&hspi1, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	461a      	mov	r2, r3
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	1899      	adds	r1, r3, r2
 80065e6:	7bfb      	ldrb	r3, [r7, #15]
 80065e8:	009b      	lsls	r3, r3, #2
 80065ea:	461a      	mov	r2, r3
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	441a      	add	r2, r3
 80065f0:	230a      	movs	r3, #10
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	2304      	movs	r3, #4
 80065f6:	4812      	ldr	r0, [pc, #72]	; (8006640 <L6470_DaisyChainCommand+0x84>)
 80065f8:	f7fd fc8e 	bl	8003f18 <HAL_SPI_TransmitReceive>
    
    /* Allow the device to decode the received command */
    L6470_nCS_HIGH();
 80065fc:	2201      	movs	r2, #1
 80065fe:	2110      	movs	r1, #16
 8006600:	480e      	ldr	r0, [pc, #56]	; (800663c <L6470_DaisyChainCommand+0x80>)
 8006602:	f7fb fdb3 	bl	800216c <HAL_GPIO_WritePin>
    
    _DELAY(TDISCS);
 8006606:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <L6470_DaisyChainCommand+0x88>)
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]
 800660c:	e006      	b.n	800661c <L6470_DaisyChainCommand+0x60>
 800660e:	bf00      	nop
 8006610:	4b0c      	ldr	r3, [pc, #48]	; (8006644 <L6470_DaisyChainCommand+0x88>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	3301      	adds	r3, #1
 8006616:	b2da      	uxtb	r2, r3
 8006618:	4b0a      	ldr	r3, [pc, #40]	; (8006644 <L6470_DaisyChainCommand+0x88>)
 800661a:	701a      	strb	r2, [r3, #0]
 800661c:	4b09      	ldr	r3, [pc, #36]	; (8006644 <L6470_DaisyChainCommand+0x88>)
 800661e:	781b      	ldrb	r3, [r3, #0]
 8006620:	2b13      	cmp	r3, #19
 8006622:	d9f4      	bls.n	800660e <L6470_DaisyChainCommand+0x52>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8006624:	7bfb      	ldrb	r3, [r7, #15]
 8006626:	3301      	adds	r3, #1
 8006628:	73fb      	strb	r3, [r7, #15]
 800662a:	7bfb      	ldrb	r3, [r7, #15]
 800662c:	2b03      	cmp	r3, #3
 800662e:	d9d0      	bls.n	80065d2 <L6470_DaisyChainCommand+0x16>
  }
}
 8006630:	bf00      	nop
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	20000824 	.word	0x20000824
 800663c:	40020000 	.word	0x40020000
 8006640:	20000e20 	.word	0x20000e20
 8006644:	20000b7a 	.word	0x20000b7a

08006648 <L6470_ExtractReturnedData>:
  * @param    pL6470_DaisyChainSpiRxStruct  uint8_t-pointer to the matrix that
  *           contains the received data by SPI from the L6470 daisy chain.
  * @param    LengthByte  The number of bytes about the received value.
  */
uint32_t L6470_ExtractReturnedData(uint8_t L6470_Id, uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
{
 8006648:	b480      	push	{r7}
 800664a:	b085      	sub	sp, #20
 800664c:	af00      	add	r7, sp, #0
 800664e:	4603      	mov	r3, r0
 8006650:	6039      	str	r1, [r7, #0]
 8006652:	71fb      	strb	r3, [r7, #7]
 8006654:	4613      	mov	r3, r2
 8006656:	71bb      	strb	r3, [r7, #6]
  uint32_t value;
  uint8_t i;
  
  value = 0x000000;
 8006658:	2300      	movs	r3, #0
 800665a:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800665c:	2301      	movs	r3, #1
 800665e:	72fb      	strb	r3, [r7, #11]
 8006660:	e015      	b.n	800668e <L6470_ExtractReturnedData+0x46>
  {
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8006662:	7afb      	ldrb	r3, [r7, #11]
 8006664:	009b      	lsls	r3, r3, #2
 8006666:	461a      	mov	r2, r3
 8006668:	79fb      	ldrb	r3, [r7, #7]
 800666a:	4413      	add	r3, r2
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	4413      	add	r3, r2
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	4619      	mov	r1, r3
 8006674:	79ba      	ldrb	r2, [r7, #6]
 8006676:	7afb      	ldrb	r3, [r7, #11]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	00db      	lsls	r3, r3, #3
 800667c:	fa01 f303 	lsl.w	r3, r1, r3
 8006680:	461a      	mov	r2, r3
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	4313      	orrs	r3, r2
 8006686:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8006688:	7afb      	ldrb	r3, [r7, #11]
 800668a:	3301      	adds	r3, #1
 800668c:	72fb      	strb	r3, [r7, #11]
 800668e:	7afb      	ldrb	r3, [r7, #11]
 8006690:	2b03      	cmp	r3, #3
 8006692:	d9e6      	bls.n	8006662 <L6470_ExtractReturnedData+0x1a>
  }
  
  return value;
 8006694:	68fb      	ldr	r3, [r7, #12]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3714      	adds	r7, #20
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
	...

080066a4 <L6470_CheckStatusRegisterFlag>:
  *
  * @retval state The flag state.
  */

uint8_t L6470_CheckStatusRegisterFlag(uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 80066a4:	b590      	push	{r4, r7, lr}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	4603      	mov	r3, r0
 80066ac:	460a      	mov	r2, r1
 80066ae:	71fb      	strb	r3, [r7, #7]
 80066b0:	4613      	mov	r3, r2
 80066b2:	71bb      	strb	r3, [r7, #6]
  uint8_t state = 0;
 80066b4:	2300      	movs	r3, #0
 80066b6:	73fb      	strb	r3, [r7, #15]
  
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_Id, L6470_STATUS_ID);
 80066b8:	4b56      	ldr	r3, [pc, #344]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 80066ba:	681c      	ldr	r4, [r3, #0]
 80066bc:	79fb      	ldrb	r3, [r7, #7]
 80066be:	2118      	movs	r1, #24
 80066c0:	4618      	mov	r0, r3
 80066c2:	f7ff fb35 	bl	8005d30 <L6470_GetParam>
 80066c6:	4603      	mov	r3, r0
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	8023      	strh	r3, [r4, #0]
  
  switch(L6470_StatusRegisterFlagId)
 80066cc:	79bb      	ldrb	r3, [r7, #6]
 80066ce:	2b0e      	cmp	r3, #14
 80066d0:	f200 809a 	bhi.w	8006808 <L6470_CheckStatusRegisterFlag+0x164>
 80066d4:	a201      	add	r2, pc, #4	; (adr r2, 80066dc <L6470_CheckStatusRegisterFlag+0x38>)
 80066d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066da:	bf00      	nop
 80066dc:	08006719 	.word	0x08006719
 80066e0:	08006729 	.word	0x08006729
 80066e4:	08006739 	.word	0x08006739
 80066e8:	08006749 	.word	0x08006749
 80066ec:	08006759 	.word	0x08006759
 80066f0:	08006769 	.word	0x08006769
 80066f4:	08006779 	.word	0x08006779
 80066f8:	08006789 	.word	0x08006789
 80066fc:	08006799 	.word	0x08006799
 8006700:	080067a9 	.word	0x080067a9
 8006704:	080067b9 	.word	0x080067b9
 8006708:	080067c9 	.word	0x080067c9
 800670c:	080067d9 	.word	0x080067d9
 8006710:	080067e9 	.word	0x080067e9
 8006714:	080067f9 	.word	0x080067f9
  {
  case HiZ_ID:
    state = pL6470_StatusRegister->HiZ;
 8006718:	4b3e      	ldr	r3, [pc, #248]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006722:	b2db      	uxtb	r3, r3
 8006724:	73fb      	strb	r3, [r7, #15]
    break;
 8006726:	e06f      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case BUSY_ID:
    state = pL6470_StatusRegister->BUSY;
 8006728:	4b3a      	ldr	r3, [pc, #232]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006732:	b2db      	uxtb	r3, r3
 8006734:	73fb      	strb	r3, [r7, #15]
    break;
 8006736:	e067      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case SW_F_ID:
    state = pL6470_StatusRegister->SW_F;
 8006738:	4b36      	ldr	r3, [pc, #216]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	781b      	ldrb	r3, [r3, #0]
 800673e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006742:	b2db      	uxtb	r3, r3
 8006744:	73fb      	strb	r3, [r7, #15]
    break;
 8006746:	e05f      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case SW_EVN_ID:
    state = pL6470_StatusRegister->SW_EVN;
 8006748:	4b32      	ldr	r3, [pc, #200]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8006752:	b2db      	uxtb	r3, r3
 8006754:	73fb      	strb	r3, [r7, #15]
    break;
 8006756:	e057      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case DIR_ID:
    state = pL6470_StatusRegister->DIR;
 8006758:	4b2e      	ldr	r3, [pc, #184]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8006762:	b2db      	uxtb	r3, r3
 8006764:	73fb      	strb	r3, [r7, #15]
    break;
 8006766:	e04f      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case MOT_STATUS_ID:
    state = pL6470_StatusRegister->MOT_STATUS;
 8006768:	4b2a      	ldr	r3, [pc, #168]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8006772:	b2db      	uxtb	r3, r3
 8006774:	73fb      	strb	r3, [r7, #15]
    break;
 8006776:	e047      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case NOTPERF_CMD_ID:
    state = pL6470_StatusRegister->NOTPERF_CMD;
 8006778:	4b26      	ldr	r3, [pc, #152]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	781b      	ldrb	r3, [r3, #0]
 800677e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006782:	b2db      	uxtb	r3, r3
 8006784:	73fb      	strb	r3, [r7, #15]
    break;
 8006786:	e03f      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case WRONG_CMD_ID:
    state = pL6470_StatusRegister->WRONG_CMD;
 8006788:	4b22      	ldr	r3, [pc, #136]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	785b      	ldrb	r3, [r3, #1]
 800678e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006792:	b2db      	uxtb	r3, r3
 8006794:	73fb      	strb	r3, [r7, #15]
    break;
 8006796:	e037      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case UVLO_ID:
    state = pL6470_StatusRegister->UVLO;
 8006798:	4b1e      	ldr	r3, [pc, #120]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	785b      	ldrb	r3, [r3, #1]
 800679e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	73fb      	strb	r3, [r7, #15]
    break;
 80067a6:	e02f      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case TH_WRN_ID:
    state = pL6470_StatusRegister->TH_WRN;
 80067a8:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	785b      	ldrb	r3, [r3, #1]
 80067ae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	73fb      	strb	r3, [r7, #15]
    break;
 80067b6:	e027      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case TH_SD_ID:
    state = pL6470_StatusRegister->TH_SD;
 80067b8:	4b16      	ldr	r3, [pc, #88]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	785b      	ldrb	r3, [r3, #1]
 80067be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	73fb      	strb	r3, [r7, #15]
    break;
 80067c6:	e01f      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case OCD_ID:
    state = pL6470_StatusRegister->OCD;
 80067c8:	4b12      	ldr	r3, [pc, #72]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	785b      	ldrb	r3, [r3, #1]
 80067ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	73fb      	strb	r3, [r7, #15]
    break;
 80067d6:	e017      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_A_ID:
    state = pL6470_StatusRegister->STEP_LOSS_A;
 80067d8:	4b0e      	ldr	r3, [pc, #56]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	785b      	ldrb	r3, [r3, #1]
 80067de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80067e2:	b2db      	uxtb	r3, r3
 80067e4:	73fb      	strb	r3, [r7, #15]
    break;
 80067e6:	e00f      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_B_ID:
    state = pL6470_StatusRegister->STEP_LOSS_B;
 80067e8:	4b0a      	ldr	r3, [pc, #40]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	785b      	ldrb	r3, [r3, #1]
 80067ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80067f2:	b2db      	uxtb	r3, r3
 80067f4:	73fb      	strb	r3, [r7, #15]
    break;
 80067f6:	e007      	b.n	8006808 <L6470_CheckStatusRegisterFlag+0x164>
  case SCK_MOD_ID:
    state = pL6470_StatusRegister->SCK_MOD;
 80067f8:	4b06      	ldr	r3, [pc, #24]	; (8006814 <L6470_CheckStatusRegisterFlag+0x170>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	785b      	ldrb	r3, [r3, #1]
 80067fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006802:	b2db      	uxtb	r3, r3
 8006804:	73fb      	strb	r3, [r7, #15]
    break;
 8006806:	bf00      	nop
  }
  
  return state;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	bd90      	pop	{r4, r7, pc}
 8006812:	bf00      	nop
 8006814:	2000009c 	.word	0x2000009c

08006818 <L6470_Config>:
  * @brief  Configures the L6470 registers.
  * @param  StepperMotorDriverHandle_t* The pointer to the stepper motor driver handle structure.
  * @param  MotorParameterData_t* The pointer to the related parameter data structure.
  */
void L6470_Config(StepperMotorDriverHandle_t *StepperMotorDriverHandle, MotorParameterData_t *MotorParameterData)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  StepperMotorDriverHandle->Register.ACC = Step_s2_2_Acc(MotorParameterData->acc);
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	edd3 7a05 	vldr	s15, [r3, #20]
 8006828:	eeb0 0a67 	vmov.f32	s0, s15
 800682c:	f7ff f860 	bl	80058f0 <Step_s2_2_Acc>
 8006830:	4603      	mov	r3, r0
 8006832:	461a      	mov	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	839a      	strh	r2, [r3, #28]
  StepperMotorDriverHandle->Register.DEC = Step_s2_2_Dec(MotorParameterData->dec);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	edd3 7a06 	vldr	s15, [r3, #24]
 800683e:	eeb0 0a67 	vmov.f32	s0, s15
 8006842:	f7ff f87b 	bl	800593c <Step_s2_2_Dec>
 8006846:	4603      	mov	r3, r0
 8006848:	461a      	mov	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	83da      	strh	r2, [r3, #30]
  StepperMotorDriverHandle->Register.MAX_SPEED = Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	edd3 7a07 	vldr	s15, [r3, #28]
 8006854:	eeb0 0a67 	vmov.f32	s0, s15
 8006858:	f7ff f896 	bl	8005988 <Step_s_2_MaxSpeed>
 800685c:	4603      	mov	r3, r0
 800685e:	461a      	mov	r2, r3
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	841a      	strh	r2, [r3, #32]
  StepperMotorDriverHandle->Register.MIN_SPEED = Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	edd3 7a08 	vldr	s15, [r3, #32]
 800686a:	eeb0 0a67 	vmov.f32	s0, s15
 800686e:	f7ff f8b1 	bl	80059d4 <Step_s_2_MinSpeed>
 8006872:	4603      	mov	r3, r0
 8006874:	461a      	mov	r2, r3
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	845a      	strh	r2, [r3, #34]	; 0x22
  StepperMotorDriverHandle->Register.FS_SPD = Step_s_2_FsSpd(MotorParameterData->fsspd);
 800687a:	68bb      	ldr	r3, [r7, #8]
 800687c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8006880:	eeb0 0a67 	vmov.f32	s0, s15
 8006884:	f7ff f8cc 	bl	8005a20 <Step_s_2_FsSpd>
 8006888:	4603      	mov	r3, r0
 800688a:	461a      	mov	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	849a      	strh	r2, [r3, #36]	; 0x24
  StepperMotorDriverHandle->Register.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8006896:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8006b44 <L6470_Config+0x32c>
 800689a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	ed93 7a00 	vldr	s14, [r3]
 80068a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80068b0:	793b      	ldrb	r3, [r7, #4]
 80068b2:	b2da      	uxtb	r2, r3
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  StepperMotorDriverHandle->Register.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80068c0:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8006b44 <L6470_Config+0x32c>
 80068c4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	ed93 7a00 	vldr	s14, [r3]
 80068ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80068da:	793b      	ldrb	r3, [r7, #4]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  StepperMotorDriverHandle->Register.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80068ea:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8006b44 <L6470_Config+0x32c>
 80068ee:	ee67 6a87 	vmul.f32	s13, s15, s14
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	ed93 7a00 	vldr	s14, [r3]
 80068f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006900:	edc7 7a01 	vstr	s15, [r7, #4]
 8006904:	793b      	ldrb	r3, [r7, #4]
 8006906:	b2da      	uxtb	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  StepperMotorDriverHandle->Register.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8006914:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8006b44 <L6470_Config+0x32c>
 8006918:	ee67 6a87 	vmul.f32	s13, s15, s14
 800691c:	68bb      	ldr	r3, [r7, #8]
 800691e:	ed93 7a00 	vldr	s14, [r3]
 8006922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800692a:	edc7 7a01 	vstr	s15, [r7, #4]
 800692e:	793b      	ldrb	r3, [r7, #4]
 8006930:	b2da      	uxtb	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  StepperMotorDriverHandle->Register.INT_SPEED = Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800693e:	eeb0 0a67 	vmov.f32	s0, s15
 8006942:	f7ff f897 	bl	8005a74 <Step_s_2_IntSpeed>
 8006946:	4603      	mov	r3, r0
 8006948:	461a      	mov	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	855a      	strh	r2, [r3, #42]	; 0x2a
  StepperMotorDriverHandle->Register.ST_SLP = s_Step_2_StSlp(MotorParameterData->stslp);
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8006954:	eeb0 0a67 	vmov.f32	s0, s15
 8006958:	f7ff f8b2 	bl	8005ac0 <s_Step_2_StSlp>
 800695c:	4603      	mov	r3, r0
 800695e:	461a      	mov	r2, r3
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  StepperMotorDriverHandle->Register.FN_SLP_ACC = s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800696c:	eeb0 0a67 	vmov.f32	s0, s15
 8006970:	f7ff f8cc 	bl	8005b0c <s_Step_2_FnSlpAcc>
 8006974:	4603      	mov	r3, r0
 8006976:	461a      	mov	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  StepperMotorDriverHandle->Register.FN_SLP_DEC = s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800697e:	68bb      	ldr	r3, [r7, #8]
 8006980:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8006984:	eeb0 0a67 	vmov.f32	s0, s15
 8006988:	f7ff f8e6 	bl	8005b58 <s_Step_2_FnSlpDec>
 800698c:	4603      	mov	r3, r0
 800698e:	461a      	mov	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  StepperMotorDriverHandle->Register.K_THERM = MotorParameterData->kterm;
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  StepperMotorDriverHandle->Register.OCD_TH = mA_2_OcdTh(MotorParameterData->ocdth);
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80069a8:	eeb0 0a67 	vmov.f32	s0, s15
 80069ac:	f7ff f8fa 	bl	8005ba4 <mA_2_OcdTh>
 80069b0:	4603      	mov	r3, r0
 80069b2:	461a      	mov	r2, r3
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  StepperMotorDriverHandle->Register.STALL_TH = mA_2_StallTh(MotorParameterData->stallth);
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80069c0:	eeb0 0a67 	vmov.f32	s0, s15
 80069c4:	f7ff f93e 	bl	8005c44 <mA_2_StallTh>
 80069c8:	4603      	mov	r3, r0
 80069ca:	461a      	mov	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  StepperMotorDriverHandle->Register.STEP_MODE = MotorParameterData->step_sel;
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  StepperMotorDriverHandle->Register.ALARM_EN = MotorParameterData->alarmen;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  StepperMotorDriverHandle->Register.CONFIG = MotorParameterData->config;
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	86da      	strh	r2, [r3, #54]	; 0x36
  
  /* Write the L6470 registers with the prepared data */
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ACC_ID, StepperMotorDriverHandle->Register.ACC);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	7810      	ldrb	r0, [r2, #0]
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	8b92      	ldrh	r2, [r2, #28]
 8006a02:	2104      	movs	r1, #4
 8006a04:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_DEC_ID, StepperMotorDriverHandle->Register.DEC);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	7810      	ldrb	r0, [r2, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	8bd2      	ldrh	r2, [r2, #30]
 8006a14:	2105      	movs	r1, #5
 8006a16:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MAX_SPEED_ID, StepperMotorDriverHandle->Register.MAX_SPEED);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	7810      	ldrb	r0, [r2, #0]
 8006a22:	68fa      	ldr	r2, [r7, #12]
 8006a24:	8c12      	ldrh	r2, [r2, #32]
 8006a26:	2106      	movs	r1, #6
 8006a28:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MIN_SPEED_ID, StepperMotorDriverHandle->Register.MIN_SPEED);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	689b      	ldr	r3, [r3, #8]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68fa      	ldr	r2, [r7, #12]
 8006a32:	7810      	ldrb	r0, [r2, #0]
 8006a34:	68fa      	ldr	r2, [r7, #12]
 8006a36:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8006a38:	2107      	movs	r1, #7
 8006a3a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FS_SPD_ID, StepperMotorDriverHandle->Register.FS_SPD);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	7810      	ldrb	r0, [r2, #0]
 8006a46:	68fa      	ldr	r2, [r7, #12]
 8006a48:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8006a4a:	2108      	movs	r1, #8
 8006a4c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_HOLD_ID, StepperMotorDriverHandle->Register.KVAL_HOLD);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	689b      	ldr	r3, [r3, #8]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	7810      	ldrb	r0, [r2, #0]
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8006a5e:	2109      	movs	r1, #9
 8006a60:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_RUN_ID, StepperMotorDriverHandle->Register.KVAL_RUN);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68fa      	ldr	r2, [r7, #12]
 8006a6a:	7810      	ldrb	r0, [r2, #0]
 8006a6c:	68fa      	ldr	r2, [r7, #12]
 8006a6e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8006a72:	210a      	movs	r1, #10
 8006a74:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_ACC_ID, StepperMotorDriverHandle->Register.KVAL_ACC);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	68fa      	ldr	r2, [r7, #12]
 8006a7e:	7810      	ldrb	r0, [r2, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8006a86:	210b      	movs	r1, #11
 8006a88:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_DEC_ID, StepperMotorDriverHandle->Register.KVAL_DEC);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	689b      	ldr	r3, [r3, #8]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	7810      	ldrb	r0, [r2, #0]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8006a9a:	210c      	movs	r1, #12
 8006a9c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_INT_SPEED_ID, StepperMotorDriverHandle->Register.INT_SPEED);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	7810      	ldrb	r0, [r2, #0]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8006aac:	210d      	movs	r1, #13
 8006aae:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ST_SLP_ID, StepperMotorDriverHandle->Register.ST_SLP);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	7810      	ldrb	r0, [r2, #0]
 8006aba:	68fa      	ldr	r2, [r7, #12]
 8006abc:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8006ac0:	210e      	movs	r1, #14
 8006ac2:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_ACC_ID, StepperMotorDriverHandle->Register.FN_SLP_ACC);
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	7810      	ldrb	r0, [r2, #0]
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8006ad4:	210f      	movs	r1, #15
 8006ad6:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_DEC_ID, StepperMotorDriverHandle->Register.FN_SLP_DEC);
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	7810      	ldrb	r0, [r2, #0]
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8006ae8:	2110      	movs	r1, #16
 8006aea:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_K_THERM_ID, StepperMotorDriverHandle->Register.K_THERM);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	68fa      	ldr	r2, [r7, #12]
 8006af4:	7810      	ldrb	r0, [r2, #0]
 8006af6:	68fa      	ldr	r2, [r7, #12]
 8006af8:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8006afc:	2111      	movs	r1, #17
 8006afe:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_OCD_TH_ID, StepperMotorDriverHandle->Register.OCD_TH);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68fa      	ldr	r2, [r7, #12]
 8006b08:	7810      	ldrb	r0, [r2, #0]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8006b10:	2113      	movs	r1, #19
 8006b12:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STALL_TH_ID, StepperMotorDriverHandle->Register.STALL_TH);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	7810      	ldrb	r0, [r2, #0]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006b24:	2114      	movs	r1, #20
 8006b26:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STEP_MODE_ID, StepperMotorDriverHandle->Register.STEP_MODE);
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	7810      	ldrb	r0, [r2, #0]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8006b38:	2115      	movs	r1, #21
 8006b3a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ALARM_EN_ID, StepperMotorDriverHandle->Register.ALARM_EN);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	e001      	b.n	8006b48 <L6470_Config+0x330>
 8006b44:	43800000 	.word	0x43800000
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	7810      	ldrb	r0, [r2, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006b52:	2116      	movs	r1, #22
 8006b54:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_CONFIG_ID, StepperMotorDriverHandle->Register.CONFIG);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	7810      	ldrb	r0, [r2, #0]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8006b64:	2117      	movs	r1, #23
 8006b66:	4798      	blx	r3
}
 8006b68:	bf00      	nop
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <Move_Callback_Helper>:


/*************************************************************************/

void Move_Callback_Helper(uint8_t axis_index)
    {
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	4603      	mov	r3, r0
 8006b78:	71fb      	strb	r3, [r7, #7]

    if (Motor_Direction[axis_index])
 8006b7a:	79fb      	ldrb	r3, [r7, #7]
 8006b7c:	4a1a      	ldr	r2, [pc, #104]	; (8006be8 <Move_Callback_Helper+0x78>)
 8006b7e:	5cd3      	ldrb	r3, [r2, r3]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d01c      	beq.n	8006bbe <Move_Callback_Helper+0x4e>
	{

	if (Motor_Current_Steps[axis_index] + Motor_Parameter[axis_index]
 8006b84:	79fb      	ldrb	r3, [r7, #7]
 8006b86:	4a19      	ldr	r2, [pc, #100]	; (8006bec <Move_Callback_Helper+0x7c>)
 8006b88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	4918      	ldr	r1, [pc, #96]	; (8006bf0 <Move_Callback_Helper+0x80>)
 8006b90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006b94:	441a      	add	r2, r3
		> Motor_MAX_Steps[axis_index])
 8006b96:	79fb      	ldrb	r3, [r7, #7]
 8006b98:	4916      	ldr	r1, [pc, #88]	; (8006bf4 <Move_Callback_Helper+0x84>)
 8006b9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
	if (Motor_Current_Steps[axis_index] + Motor_Parameter[axis_index]
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	dd12      	ble.n	8006bc8 <Move_Callback_Helper+0x58>
	    {
	    Motor_Parameter[axis_index] = Motor_MAX_Steps[axis_index] - Motor_Current_Steps[axis_index];
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	79fa      	ldrb	r2, [r7, #7]
 8006ba6:	4913      	ldr	r1, [pc, #76]	; (8006bf4 <Move_Callback_Helper+0x84>)
 8006ba8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8006bac:	79fa      	ldrb	r2, [r7, #7]
 8006bae:	480f      	ldr	r0, [pc, #60]	; (8006bec <Move_Callback_Helper+0x7c>)
 8006bb0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8006bb4:	1a8a      	subs	r2, r1, r2
 8006bb6:	490e      	ldr	r1, [pc, #56]	; (8006bf0 <Move_Callback_Helper+0x80>)
 8006bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006bbc:	e004      	b.n	8006bc8 <Move_Callback_Helper+0x58>
	    }
	}
    else
	{
	Motor_Parameter[axis_index] = 0;
 8006bbe:	79fb      	ldrb	r3, [r7, #7]
 8006bc0:	4a0b      	ldr	r2, [pc, #44]	; (8006bf0 <Move_Callback_Helper+0x80>)
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

	L6470_PrepareMove(axis_index, Motor_Direction[axis_index],
 8006bc8:	79fb      	ldrb	r3, [r7, #7]
 8006bca:	4a07      	ldr	r2, [pc, #28]	; (8006be8 <Move_Callback_Helper+0x78>)
 8006bcc:	5cd1      	ldrb	r1, [r2, r3]
		Motor_Parameter[axis_index]);
 8006bce:	79fb      	ldrb	r3, [r7, #7]
 8006bd0:	4a07      	ldr	r2, [pc, #28]	; (8006bf0 <Move_Callback_Helper+0x80>)
 8006bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	L6470_PrepareMove(axis_index, Motor_Direction[axis_index],
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	79fb      	ldrb	r3, [r7, #7]
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7ff fb94 	bl	8006308 <L6470_PrepareMove>
    }
 8006be0:	bf00      	nop
 8006be2:	3708      	adds	r7, #8
 8006be4:	46bd      	mov	sp, r7
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20000a30 	.word	0x20000a30
 8006bec:	20000a44 	.word	0x20000a44
 8006bf0:	20000a34 	.word	0x20000a34
 8006bf4:	20000180 	.word	0x20000180

08006bf8 <Goto_Callback_Helper>:


void Goto_Callback_Helper(uint8_t axis_index)
    {
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b084      	sub	sp, #16
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	4603      	mov	r3, r0
 8006c00:	71fb      	strb	r3, [r7, #7]

    uint8_t direction = L6470_DIR_FWD_ID;
 8006c02:	2301      	movs	r3, #1
 8006c04:	73fb      	strb	r3, [r7, #15]

    if (Motor_Direction[axis_index])
 8006c06:	79fb      	ldrb	r3, [r7, #7]
 8006c08:	4a1b      	ldr	r2, [pc, #108]	; (8006c78 <Goto_Callback_Helper+0x80>)
 8006c0a:	5cd3      	ldrb	r3, [r2, r3]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01e      	beq.n	8006c4e <Goto_Callback_Helper+0x56>
	{
	if (Motor_Parameter[axis_index] > Motor_MAX_Steps[axis_index])
 8006c10:	79fb      	ldrb	r3, [r7, #7]
 8006c12:	4a1a      	ldr	r2, [pc, #104]	; (8006c7c <Goto_Callback_Helper+0x84>)
 8006c14:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c18:	79fb      	ldrb	r3, [r7, #7]
 8006c1a:	4919      	ldr	r1, [pc, #100]	; (8006c80 <Goto_Callback_Helper+0x88>)
 8006c1c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	dd07      	ble.n	8006c34 <Goto_Callback_Helper+0x3c>
	    {
	    Motor_Parameter[axis_index] = Motor_MAX_Steps[axis_index];
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	79fa      	ldrb	r2, [r7, #7]
 8006c28:	4915      	ldr	r1, [pc, #84]	; (8006c80 <Goto_Callback_Helper+0x88>)
 8006c2a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8006c2e:	4913      	ldr	r1, [pc, #76]	; (8006c7c <Goto_Callback_Helper+0x84>)
 8006c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    }

	if (Motor_Parameter[axis_index] < Motor_Current_Steps[axis_index])
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	4a11      	ldr	r2, [pc, #68]	; (8006c7c <Goto_Callback_Helper+0x84>)
 8006c38:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006c3c:	79fb      	ldrb	r3, [r7, #7]
 8006c3e:	4911      	ldr	r1, [pc, #68]	; (8006c84 <Goto_Callback_Helper+0x8c>)
 8006c40:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	da09      	bge.n	8006c5c <Goto_Callback_Helper+0x64>
	    {
	    direction = L6470_DIR_REV_ID; //reverse
 8006c48:	2300      	movs	r3, #0
 8006c4a:	73fb      	strb	r3, [r7, #15]
 8006c4c:	e006      	b.n	8006c5c <Goto_Callback_Helper+0x64>
	    }
	}
    else
	{
	Motor_Parameter[axis_index] = 0;
 8006c4e:	79fb      	ldrb	r3, [r7, #7]
 8006c50:	4a0a      	ldr	r2, [pc, #40]	; (8006c7c <Goto_Callback_Helper+0x84>)
 8006c52:	2100      	movs	r1, #0
 8006c54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	direction = L6470_DIR_REV_ID;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	73fb      	strb	r3, [r7, #15]
	}

    L6470_PrepareGoToDir(axis_index, direction,
	    Motor_Parameter[axis_index]);
 8006c5c:	79fb      	ldrb	r3, [r7, #7]
 8006c5e:	4a07      	ldr	r2, [pc, #28]	; (8006c7c <Goto_Callback_Helper+0x84>)
 8006c60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    L6470_PrepareGoToDir(axis_index, direction,
 8006c64:	461a      	mov	r2, r3
 8006c66:	7bf9      	ldrb	r1, [r7, #15]
 8006c68:	79fb      	ldrb	r3, [r7, #7]
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7ff fb7c 	bl	8006368 <L6470_PrepareGoToDir>
    }
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20000a30 	.word	0x20000a30
 8006c7c:	20000a34 	.word	0x20000a34
 8006c80:	20000180 	.word	0x20000180
 8006c84:	20000a44 	.word	0x20000a44

08006c88 <Run_Callback_Helper>:


void Run_Callback_Helper(uint8_t axis_index)
    {
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b084      	sub	sp, #16
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	71fb      	strb	r3, [r7, #7]

    uint32_t speed = 0;
 8006c92:	2300      	movs	r3, #0
 8006c94:	60fb      	str	r3, [r7, #12]
	}
    if (Motor_Current_Steps[axis_index] < 0)
	{
	//Motor_Parameter[axis_index] = 0;
	}
    speed = Step_s_2_Speed(Motor_Parameter[axis_index]);
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	4a0b      	ldr	r2, [pc, #44]	; (8006cc8 <Run_Callback_Helper+0x40>)
 8006c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c9e:	ee07 3a90 	vmov	s15, r3
 8006ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ca6:	eeb0 0a67 	vmov.f32	s0, s15
 8006caa:	f7fe fdfd 	bl	80058a8 <Step_s_2_Speed>
 8006cae:	60f8      	str	r0, [r7, #12]
    L6470_PrepareRun(axis_index, Motor_Direction[axis_index], speed);
 8006cb0:	79fb      	ldrb	r3, [r7, #7]
 8006cb2:	4a06      	ldr	r2, [pc, #24]	; (8006ccc <Run_Callback_Helper+0x44>)
 8006cb4:	5cd1      	ldrb	r1, [r2, r3]
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	68fa      	ldr	r2, [r7, #12]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7ff faf0 	bl	80062a0 <L6470_PrepareRun>
    }
 8006cc0:	bf00      	nop
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	20000a34 	.word	0x20000a34
 8006ccc:	20000a30 	.word	0x20000a30

08006cd0 <Speed_Callback_Helper>:


void Speed_Callback_Helper(uint8_t axis_index)
    {
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	71fb      	strb	r3, [r7, #7]

    uint32_t speed = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60fb      	str	r3, [r7, #12]

    if (Motor_Parameter[axis_index] > 15000)
 8006cde:	79fb      	ldrb	r3, [r7, #7]
 8006ce0:	4a11      	ldr	r2, [pc, #68]	; (8006d28 <Speed_Callback_Helper+0x58>)
 8006ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ce6:	f643 2298 	movw	r2, #15000	; 0x3a98
 8006cea:	4293      	cmp	r3, r2
 8006cec:	dd05      	ble.n	8006cfa <Speed_Callback_Helper+0x2a>
	{
	Motor_Parameter[axis_index] = 15000;
 8006cee:	79fb      	ldrb	r3, [r7, #7]
 8006cf0:	4a0d      	ldr	r2, [pc, #52]	; (8006d28 <Speed_Callback_Helper+0x58>)
 8006cf2:	f643 2198 	movw	r1, #15000	; 0x3a98
 8006cf6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

    speed = Step_s_2_Speed(Motor_Parameter[axis_index]);
 8006cfa:	79fb      	ldrb	r3, [r7, #7]
 8006cfc:	4a0a      	ldr	r2, [pc, #40]	; (8006d28 <Speed_Callback_Helper+0x58>)
 8006cfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d02:	ee07 3a90 	vmov	s15, r3
 8006d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d0a:	eeb0 0a67 	vmov.f32	s0, s15
 8006d0e:	f7fe fdcb 	bl	80058a8 <Step_s_2_Speed>
 8006d12:	60f8      	str	r0, [r7, #12]
    L6470_PrepareSetParam(axis_index, L6470_MAX_SPEED_ID, speed);
 8006d14:	79fb      	ldrb	r3, [r7, #7]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	2106      	movs	r1, #6
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff fa8c 	bl	8006238 <L6470_PrepareSetParam>
    }
 8006d20:	bf00      	nop
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	20000a34 	.word	0x20000a34

08006d2c <Store_In_AT24>:



uint8_t Store_In_AT24(uint8_t location, int32_t data)
    {
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b088      	sub	sp, #32
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	4603      	mov	r3, r0
 8006d34:	6039      	str	r1, [r7, #0]
 8006d36:	71fb      	strb	r3, [r7, #7]
        uint8_t i2c_frame[AT24CXX_PAGE_SIZE] = {0};
 8006d38:	f107 030c 	add.w	r3, r7, #12
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	601a      	str	r2, [r3, #0]
 8006d40:	605a      	str	r2, [r3, #4]
        uint8_t i2c_status = 0;
 8006d42:	2300      	movs	r3, #0
 8006d44:	75fb      	strb	r3, [r7, #23]
	i2c_frame[0] = location; //loaction in at24c
 8006d46:	79fb      	ldrb	r3, [r7, #7]
 8006d48:	733b      	strb	r3, [r7, #12]

	itoa(data,(char*)&i2c_frame[1],10);
 8006d4a:	f107 030c 	add.w	r3, r7, #12
 8006d4e:	3301      	adds	r3, #1
 8006d50:	220a      	movs	r2, #10
 8006d52:	4619      	mov	r1, r3
 8006d54:	6838      	ldr	r0, [r7, #0]
 8006d56:	f002 fed3 	bl	8009b00 <itoa>

	if(HAL_I2C_Master_Transmit(&hi2c1, AT24CXX_ADDRESS, i2c_frame, AT24CXX_PAGE_SIZE+1 ,5) == HAL_OK)
 8006d5a:	f107 020c 	add.w	r2, r7, #12
 8006d5e:	2305      	movs	r3, #5
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	2309      	movs	r3, #9
 8006d64:	21a6      	movs	r1, #166	; 0xa6
 8006d66:	4806      	ldr	r0, [pc, #24]	; (8006d80 <Store_In_AT24+0x54>)
 8006d68:	f7fb fbfa 	bl	8002560 <HAL_I2C_Master_Transmit>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d101      	bne.n	8006d76 <Store_In_AT24+0x4a>
	    {
	    i2c_status = 1;
 8006d72:	2301      	movs	r3, #1
 8006d74:	75fb      	strb	r3, [r7, #23]
	    }
	return i2c_status;
 8006d76:	7dfb      	ldrb	r3, [r7, #23]
    }
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}
 8006d80:	20000b7c 	.word	0x20000b7c

08006d84 <Get_From_AT24>:

uint8_t Get_From_AT24(uint8_t location, int32_t* data)
    {
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b088      	sub	sp, #32
 8006d88:	af02      	add	r7, sp, #8
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	6039      	str	r1, [r7, #0]
 8006d8e:	71fb      	strb	r3, [r7, #7]
    uint8_t i2c_frame[AT24CXX_PAGE_SIZE] = {0};
 8006d90:	f107 030c 	add.w	r3, r7, #12
 8006d94:	2200      	movs	r2, #0
 8006d96:	601a      	str	r2, [r3, #0]
 8006d98:	605a      	str	r2, [r3, #4]
    uint8_t i2c_status = 0;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	75fb      	strb	r3, [r7, #23]
    // set read pointer in at24c //dummy write
    if (HAL_I2C_Master_Transmit(&hi2c1, AT24CXX_ADDRESS, &location, 1, 5)
 8006d9e:	1dfa      	adds	r2, r7, #7
 8006da0:	2305      	movs	r3, #5
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	2301      	movs	r3, #1
 8006da6:	21a6      	movs	r1, #166	; 0xa6
 8006da8:	4810      	ldr	r0, [pc, #64]	; (8006dec <Get_From_AT24+0x68>)
 8006daa:	f7fb fbd9 	bl	8002560 <HAL_I2C_Master_Transmit>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d115      	bne.n	8006de0 <Get_From_AT24+0x5c>
	    == HAL_OK)
	{
	if (HAL_I2C_Master_Receive(&hi2c1, AT24CXX_ADDRESS, i2c_frame,
 8006db4:	f107 020c 	add.w	r2, r7, #12
 8006db8:	2305      	movs	r3, #5
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	2308      	movs	r3, #8
 8006dbe:	21a6      	movs	r1, #166	; 0xa6
 8006dc0:	480a      	ldr	r0, [pc, #40]	; (8006dec <Get_From_AT24+0x68>)
 8006dc2:	f7fb fccb 	bl	800275c <HAL_I2C_Master_Receive>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d109      	bne.n	8006de0 <Get_From_AT24+0x5c>
		AT24CXX_PAGE_SIZE, 5) == HAL_OK)
	    {
	    i2c_status = 1;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	75fb      	strb	r3, [r7, #23]
	    *data = atoi((char*)i2c_frame);
 8006dd0:	f107 030c 	add.w	r3, r7, #12
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f002 fe4c 	bl	8009a72 <atoi>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	601a      	str	r2, [r3, #0]
	    }
	}

    return i2c_status;
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
    }
 8006de2:	4618      	mov	r0, r3
 8006de4:	3718      	adds	r7, #24
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}
 8006dea:	bf00      	nop
 8006dec:	20000b7c 	.word	0x20000b7c

08006df0 <Print_Command_Ok>:


void Print_Command_Ok(char* cli_tx_out_buffer, const char* cli_rx_command)
    {
 8006df0:	b580      	push	{r7, lr}
 8006df2:	b082      	sub	sp, #8
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
 8006df8:	6039      	str	r1, [r7, #0]
    strncat(cli_tx_out_buffer, "\r\nOk->", 20);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7f9 f9f0 	bl	80001e0 <strlen>
 8006e00:	4603      	mov	r3, r0
 8006e02:	461a      	mov	r2, r3
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4413      	add	r3, r2
 8006e08:	4a0f      	ldr	r2, [pc, #60]	; (8006e48 <Print_Command_Ok+0x58>)
 8006e0a:	6810      	ldr	r0, [r2, #0]
 8006e0c:	6018      	str	r0, [r3, #0]
 8006e0e:	8891      	ldrh	r1, [r2, #4]
 8006e10:	7992      	ldrb	r2, [r2, #6]
 8006e12:	8099      	strh	r1, [r3, #4]
 8006e14:	719a      	strb	r2, [r3, #6]
    strncat(cli_tx_out_buffer, cli_rx_command, strlen(cli_rx_command));
 8006e16:	6838      	ldr	r0, [r7, #0]
 8006e18:	f7f9 f9e2 	bl	80001e0 <strlen>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	461a      	mov	r2, r3
 8006e20:	6839      	ldr	r1, [r7, #0]
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f002 fe9a 	bl	8009b5c <strncat>
    strncat(cli_tx_out_buffer, "\r\n", 3);
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f7f9 f9d9 	bl	80001e0 <strlen>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	461a      	mov	r2, r3
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4413      	add	r3, r2
 8006e36:	4a05      	ldr	r2, [pc, #20]	; (8006e4c <Print_Command_Ok+0x5c>)
 8006e38:	8811      	ldrh	r1, [r2, #0]
 8006e3a:	7892      	ldrb	r2, [r2, #2]
 8006e3c:	8019      	strh	r1, [r3, #0]
 8006e3e:	709a      	strb	r2, [r3, #2]
    }
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	0800d118 	.word	0x0800d118
 8006e4c:	0800d120 	.word	0x0800d120

08006e50 <Print_Command_Err>:

void Print_Command_Err(char* cli_tx_out_buffer, const char* cli_rx_command)
    {
 8006e50:	b5b0      	push	{r4, r5, r7, lr}
 8006e52:	b082      	sub	sp, #8
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
    strncat(cli_tx_out_buffer, "\r\nInvalid Command:", 50);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7f9 f9c0 	bl	80001e0 <strlen>
 8006e60:	4603      	mov	r3, r0
 8006e62:	461a      	mov	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4413      	add	r3, r2
 8006e68:	4a12      	ldr	r2, [pc, #72]	; (8006eb4 <Print_Command_Err+0x64>)
 8006e6a:	461d      	mov	r5, r3
 8006e6c:	4614      	mov	r4, r2
 8006e6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006e70:	6028      	str	r0, [r5, #0]
 8006e72:	6069      	str	r1, [r5, #4]
 8006e74:	60aa      	str	r2, [r5, #8]
 8006e76:	60eb      	str	r3, [r5, #12]
 8006e78:	8823      	ldrh	r3, [r4, #0]
 8006e7a:	78a2      	ldrb	r2, [r4, #2]
 8006e7c:	822b      	strh	r3, [r5, #16]
 8006e7e:	4613      	mov	r3, r2
 8006e80:	74ab      	strb	r3, [r5, #18]
    strncat(cli_tx_out_buffer, cli_rx_command, strlen(cli_rx_command));
 8006e82:	6838      	ldr	r0, [r7, #0]
 8006e84:	f7f9 f9ac 	bl	80001e0 <strlen>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f002 fe64 	bl	8009b5c <strncat>
    strncat(cli_tx_out_buffer, "\r\n", 3);
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7f9 f9a3 	bl	80001e0 <strlen>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4413      	add	r3, r2
 8006ea2:	4a05      	ldr	r2, [pc, #20]	; (8006eb8 <Print_Command_Err+0x68>)
 8006ea4:	8811      	ldrh	r1, [r2, #0]
 8006ea6:	7892      	ldrb	r2, [r2, #2]
 8006ea8:	8019      	strh	r1, [r3, #0]
 8006eaa:	709a      	strb	r2, [r3, #2]
    }
 8006eac:	bf00      	nop
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bdb0      	pop	{r4, r5, r7, pc}
 8006eb4:	0800d124 	.word	0x0800d124
 8006eb8:	0800d120 	.word	0x0800d120

08006ebc <Parse_Parameters>:


uint8_t Parse_Parameters(uint8_t index, char* param, uint16_t param_len)
    {
 8006ebc:	b590      	push	{r4, r7, lr}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	6039      	str	r1, [r7, #0]
 8006ec6:	71fb      	strb	r3, [r7, #7]
 8006ec8:	4613      	mov	r3, r2
 8006eca:	80bb      	strh	r3, [r7, #4]

    char str_to_int[11] = "0";
 8006ecc:	2330      	movs	r3, #48	; 0x30
 8006ece:	60bb      	str	r3, [r7, #8]
 8006ed0:	f107 030c 	add.w	r3, r7, #12
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	601a      	str	r2, [r3, #0]
 8006ed8:	f8c3 2003 	str.w	r2, [r3, #3]
    uint8_t i = 0;
 8006edc:	2300      	movs	r3, #0
 8006ede:	75fb      	strb	r3, [r7, #23]
    uint8_t ok_flag = 1;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	75bb      	strb	r3, [r7, #22]

    if (param_len == 1)
 8006ee4:	88bb      	ldrh	r3, [r7, #4]
 8006ee6:	2b01      	cmp	r3, #1
 8006ee8:	d101      	bne.n	8006eee <Parse_Parameters+0x32>
	{
	 return 0;
 8006eea:	2300      	movs	r3, #0
 8006eec:	e041      	b.n	8006f72 <Parse_Parameters+0xb6>
	}

    if (*param == '-')
 8006eee:	683b      	ldr	r3, [r7, #0]
 8006ef0:	781b      	ldrb	r3, [r3, #0]
 8006ef2:	2b2d      	cmp	r3, #45	; 0x2d
 8006ef4:	d107      	bne.n	8006f06 <Parse_Parameters+0x4a>
	{
	param++;
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	3301      	adds	r3, #1
 8006efa:	603b      	str	r3, [r7, #0]
	Motor_Direction[index] = L6470_DIR_REV_ID; //reverse , toward home
 8006efc:	79fb      	ldrb	r3, [r7, #7]
 8006efe:	4a1f      	ldr	r2, [pc, #124]	; (8006f7c <Parse_Parameters+0xc0>)
 8006f00:	2100      	movs	r1, #0
 8006f02:	54d1      	strb	r1, [r2, r3]
 8006f04:	e01f      	b.n	8006f46 <Parse_Parameters+0x8a>
	}
    else
	{
	Motor_Direction[index] = L6470_DIR_FWD_ID; //forward away from home
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	4a1c      	ldr	r2, [pc, #112]	; (8006f7c <Parse_Parameters+0xc0>)
 8006f0a:	2101      	movs	r1, #1
 8006f0c:	54d1      	strb	r1, [r2, r3]
	}

    while (*param != '\0' && *param != ' ')
 8006f0e:	e01a      	b.n	8006f46 <Parse_Parameters+0x8a>
	{

	if (*param < '0' || *param > '9' || i >= 10)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b2f      	cmp	r3, #47	; 0x2f
 8006f16:	d906      	bls.n	8006f26 <Parse_Parameters+0x6a>
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b39      	cmp	r3, #57	; 0x39
 8006f1e:	d802      	bhi.n	8006f26 <Parse_Parameters+0x6a>
 8006f20:	7dfb      	ldrb	r3, [r7, #23]
 8006f22:	2b09      	cmp	r3, #9
 8006f24:	d902      	bls.n	8006f2c <Parse_Parameters+0x70>
	    {
	    ok_flag = 0; //not number
 8006f26:	2300      	movs	r3, #0
 8006f28:	75bb      	strb	r3, [r7, #22]
	    break;
 8006f2a:	e014      	b.n	8006f56 <Parse_Parameters+0x9a>
	    }
	str_to_int[i++] = *param++;
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	1c5a      	adds	r2, r3, #1
 8006f30:	75fa      	strb	r2, [r7, #23]
 8006f32:	4619      	mov	r1, r3
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	603a      	str	r2, [r7, #0]
 8006f3a:	781a      	ldrb	r2, [r3, #0]
 8006f3c:	f107 0318 	add.w	r3, r7, #24
 8006f40:	440b      	add	r3, r1
 8006f42:	f803 2c10 	strb.w	r2, [r3, #-16]
    while (*param != '\0' && *param != ' ')
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	781b      	ldrb	r3, [r3, #0]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d003      	beq.n	8006f56 <Parse_Parameters+0x9a>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d1dc      	bne.n	8006f10 <Parse_Parameters+0x54>
	}

    if(ok_flag)
 8006f56:	7dbb      	ldrb	r3, [r7, #22]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d009      	beq.n	8006f70 <Parse_Parameters+0xb4>
	{


	Motor_Parameter[index] = atoi(str_to_int);
 8006f5c:	79fc      	ldrb	r4, [r7, #7]
 8006f5e:	f107 0308 	add.w	r3, r7, #8
 8006f62:	4618      	mov	r0, r3
 8006f64:	f002 fd85 	bl	8009a72 <atoi>
 8006f68:	4602      	mov	r2, r0
 8006f6a:	4b05      	ldr	r3, [pc, #20]	; (8006f80 <Parse_Parameters+0xc4>)
 8006f6c:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	}

    return ok_flag;
 8006f70:	7dbb      	ldrb	r3, [r7, #22]
    }
 8006f72:	4618      	mov	r0, r3
 8006f74:	371c      	adds	r7, #28
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd90      	pop	{r4, r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000a30 	.word	0x20000a30
 8006f80:	20000a34 	.word	0x20000a34

08006f84 <Parse_Int>:


uint8_t Parse_Int(char* param, int32_t* param_int)
    {
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b086      	sub	sp, #24
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]

    char str_to_int[11] = "0";
 8006f8e:	2330      	movs	r3, #48	; 0x30
 8006f90:	60bb      	str	r3, [r7, #8]
 8006f92:	f107 030c 	add.w	r3, r7, #12
 8006f96:	2200      	movs	r2, #0
 8006f98:	601a      	str	r2, [r3, #0]
 8006f9a:	f8c3 2003 	str.w	r2, [r3, #3]
    uint8_t i = 0;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	75fb      	strb	r3, [r7, #23]
    uint8_t ok_flag = 1;
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	75bb      	strb	r3, [r7, #22]

    while (*param != '\0' && *param != ' ')
 8006fa6:	e01a      	b.n	8006fde <Parse_Int+0x5a>
	{

	if (*param < '0' || *param > '9' || i >= 10)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	781b      	ldrb	r3, [r3, #0]
 8006fac:	2b2f      	cmp	r3, #47	; 0x2f
 8006fae:	d906      	bls.n	8006fbe <Parse_Int+0x3a>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	2b39      	cmp	r3, #57	; 0x39
 8006fb6:	d802      	bhi.n	8006fbe <Parse_Int+0x3a>
 8006fb8:	7dfb      	ldrb	r3, [r7, #23]
 8006fba:	2b09      	cmp	r3, #9
 8006fbc:	d902      	bls.n	8006fc4 <Parse_Int+0x40>
	    {
	    ok_flag = 0; //not number
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	75bb      	strb	r3, [r7, #22]
	    break;
 8006fc2:	e014      	b.n	8006fee <Parse_Int+0x6a>
	    }
	str_to_int[i++] = *param++;
 8006fc4:	7dfb      	ldrb	r3, [r7, #23]
 8006fc6:	1c5a      	adds	r2, r3, #1
 8006fc8:	75fa      	strb	r2, [r7, #23]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	607a      	str	r2, [r7, #4]
 8006fd2:	781a      	ldrb	r2, [r3, #0]
 8006fd4:	f107 0318 	add.w	r3, r7, #24
 8006fd8:	440b      	add	r3, r1
 8006fda:	f803 2c10 	strb.w	r2, [r3, #-16]
    while (*param != '\0' && *param != ' ')
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <Parse_Int+0x6a>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	2b20      	cmp	r3, #32
 8006fec:	d1dc      	bne.n	8006fa8 <Parse_Int+0x24>
	}

    if(ok_flag)
 8006fee:	7dbb      	ldrb	r3, [r7, #22]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <Parse_Int+0x80>
	{
	*param_int = atoi(str_to_int);
 8006ff4:	f107 0308 	add.w	r3, r7, #8
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f002 fd3a 	bl	8009a72 <atoi>
 8006ffe:	4602      	mov	r2, r0
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	601a      	str	r2, [r3, #0]
	}

    return ok_flag;
 8007004:	7dbb      	ldrb	r3, [r7, #22]
    }
 8007006:	4618      	mov	r0, r3
 8007008:	3718      	adds	r7, #24
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
	...

08007010 <Move_Callback>:


uint8_t Move_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 8007010:	b580      	push	{r7, lr}
 8007012:	b088      	sub	sp, #32
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	4613      	mov	r3, r2
 800701c:	80fb      	strh	r3, [r7, #6]

    uint8_t  is_command_valid = 1;
 800701e:	2301      	movs	r3, #1
 8007020:	77fb      	strb	r3, [r7, #31]
    uint8_t  param_number = 1;//param number, starting from first
 8007022:	2301      	movs	r3, #1
 8007024:	77bb      	strb	r3, [r7, #30]
    uint8_t  param_counts = 0;//received param count
 8007026:	2300      	movs	r3, #0
 8007028:	777b      	strb	r3, [r7, #29]
    uint16_t param_len = 0;
 800702a:	2300      	movs	r3, #0
 800702c:	82fb      	strh	r3, [r7, #22]
    char*    param_ptr = NULL;
 800702e:	2300      	movs	r3, #0
 8007030:	61bb      	str	r3, [r7, #24]

    if(Control_Mode)
 8007032:	4b7b      	ldr	r3, [pc, #492]	; (8007220 <Move_Callback+0x210>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f000 80ed 	beq.w	8007216 <Move_Callback+0x206>
	{

    L6470_PrepareGetParam(X_AXIS_INDEX,L6470_ABS_POS_ID);
 800703c:	2100      	movs	r1, #0
 800703e:	2000      	movs	r0, #0
 8007040:	f7ff f914 	bl	800626c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(Y_AXIS_INDEX,L6470_ABS_POS_ID);
 8007044:	2100      	movs	r1, #0
 8007046:	2001      	movs	r0, #1
 8007048:	f7ff f910 	bl	800626c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(Z_AXIS_INDEX,L6470_ABS_POS_ID);
 800704c:	2100      	movs	r1, #0
 800704e:	2002      	movs	r0, #2
 8007050:	f7ff f90c 	bl	800626c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(M_AXIS_INDEX,L6470_ABS_POS_ID);
 8007054:	2100      	movs	r1, #0
 8007056:	2003      	movs	r0, #3
 8007058:	f7ff f908 	bl	800626c <L6470_PrepareGetParam>
    L6470_PerformPreparedApplicationCommand();
 800705c:	f7ff fa9a 	bl	8006594 <L6470_PerformPreparedApplicationCommand>

    Motor_Current_Steps[X_AXIS_INDEX] = L6470_ExtractReturnedData(X_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8007060:	2203      	movs	r2, #3
 8007062:	4970      	ldr	r1, [pc, #448]	; (8007224 <Move_Callback+0x214>)
 8007064:	2000      	movs	r0, #0
 8007066:	f7ff faef 	bl	8006648 <L6470_ExtractReturnedData>
 800706a:	4603      	mov	r3, r0
 800706c:	461a      	mov	r2, r3
 800706e:	4b6e      	ldr	r3, [pc, #440]	; (8007228 <Move_Callback+0x218>)
 8007070:	601a      	str	r2, [r3, #0]
    Motor_Current_Steps[Y_AXIS_INDEX] = L6470_ExtractReturnedData(Y_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8007072:	2203      	movs	r2, #3
 8007074:	496b      	ldr	r1, [pc, #428]	; (8007224 <Move_Callback+0x214>)
 8007076:	2001      	movs	r0, #1
 8007078:	f7ff fae6 	bl	8006648 <L6470_ExtractReturnedData>
 800707c:	4603      	mov	r3, r0
 800707e:	461a      	mov	r2, r3
 8007080:	4b69      	ldr	r3, [pc, #420]	; (8007228 <Move_Callback+0x218>)
 8007082:	605a      	str	r2, [r3, #4]
    Motor_Current_Steps[Z_AXIS_INDEX] = L6470_ExtractReturnedData(Z_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8007084:	2203      	movs	r2, #3
 8007086:	4967      	ldr	r1, [pc, #412]	; (8007224 <Move_Callback+0x214>)
 8007088:	2002      	movs	r0, #2
 800708a:	f7ff fadd 	bl	8006648 <L6470_ExtractReturnedData>
 800708e:	4603      	mov	r3, r0
 8007090:	461a      	mov	r2, r3
 8007092:	4b65      	ldr	r3, [pc, #404]	; (8007228 <Move_Callback+0x218>)
 8007094:	609a      	str	r2, [r3, #8]
    Motor_Current_Steps[M_AXIS_INDEX] = L6470_ExtractReturnedData(M_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8007096:	2203      	movs	r2, #3
 8007098:	4962      	ldr	r1, [pc, #392]	; (8007224 <Move_Callback+0x214>)
 800709a:	2003      	movs	r0, #3
 800709c:	f7ff fad4 	bl	8006648 <L6470_ExtractReturnedData>
 80070a0:	4603      	mov	r3, r0
 80070a2:	461a      	mov	r2, r3
 80070a4:	4b60      	ldr	r3, [pc, #384]	; (8007228 <Move_Callback+0x218>)
 80070a6:	60da      	str	r2, [r3, #12]


    Motor_Current_Steps[X_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[X_AXIS_INDEX]);
 80070a8:	4b5f      	ldr	r3, [pc, #380]	; (8007228 <Move_Callback+0x218>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fe fbe7 	bl	8005880 <AbsPos_2_Position>
 80070b2:	4602      	mov	r2, r0
 80070b4:	4b5c      	ldr	r3, [pc, #368]	; (8007228 <Move_Callback+0x218>)
 80070b6:	601a      	str	r2, [r3, #0]
    Motor_Current_Steps[Y_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Y_AXIS_INDEX]);
 80070b8:	4b5b      	ldr	r3, [pc, #364]	; (8007228 <Move_Callback+0x218>)
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fe fbdf 	bl	8005880 <AbsPos_2_Position>
 80070c2:	4602      	mov	r2, r0
 80070c4:	4b58      	ldr	r3, [pc, #352]	; (8007228 <Move_Callback+0x218>)
 80070c6:	605a      	str	r2, [r3, #4]
    Motor_Current_Steps[Z_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Z_AXIS_INDEX]);
 80070c8:	4b57      	ldr	r3, [pc, #348]	; (8007228 <Move_Callback+0x218>)
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fe fbd7 	bl	8005880 <AbsPos_2_Position>
 80070d2:	4602      	mov	r2, r0
 80070d4:	4b54      	ldr	r3, [pc, #336]	; (8007228 <Move_Callback+0x218>)
 80070d6:	609a      	str	r2, [r3, #8]
    Motor_Current_Steps[M_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[M_AXIS_INDEX]);
 80070d8:	4b53      	ldr	r3, [pc, #332]	; (8007228 <Move_Callback+0x218>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	4618      	mov	r0, r3
 80070de:	f7fe fbcf 	bl	8005880 <AbsPos_2_Position>
 80070e2:	4602      	mov	r2, r0
 80070e4:	4b50      	ldr	r3, [pc, #320]	; (8007228 <Move_Callback+0x218>)
 80070e6:	60da      	str	r2, [r3, #12]

    do
	{

	param_ptr = CLI_Get_Parameter(cli_rx_command,
		                           param_number++,
 80070e8:	7fbb      	ldrb	r3, [r7, #30]
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	77ba      	strb	r2, [r7, #30]
	param_ptr = CLI_Get_Parameter(cli_rx_command,
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	f107 0216 	add.w	r2, r7, #22
 80070f4:	4619      	mov	r1, r3
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f001 fbca 	bl	8008890 <CLI_Get_Parameter>
 80070fc:	61b8      	str	r0, [r7, #24]
		                           &param_len);

	if (param_ptr != NULL)
 80070fe:	69bb      	ldr	r3, [r7, #24]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d06e      	beq.n	80071e2 <Move_Callback+0x1d2>
	    {

	    param_counts++;
 8007104:	7f7b      	ldrb	r3, [r7, #29]
 8007106:	3301      	adds	r3, #1
 8007108:	777b      	strb	r3, [r7, #29]

	    switch (*param_ptr)
 800710a:	69bb      	ldr	r3, [r7, #24]
 800710c:	781b      	ldrb	r3, [r3, #0]
 800710e:	3b6d      	subs	r3, #109	; 0x6d
 8007110:	2b0d      	cmp	r3, #13
 8007112:	d863      	bhi.n	80071dc <Move_Callback+0x1cc>
 8007114:	a201      	add	r2, pc, #4	; (adr r2, 800711c <Move_Callback+0x10c>)
 8007116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800711a:	bf00      	nop
 800711c:	080071bb 	.word	0x080071bb
 8007120:	080071dd 	.word	0x080071dd
 8007124:	080071dd 	.word	0x080071dd
 8007128:	080071dd 	.word	0x080071dd
 800712c:	080071dd 	.word	0x080071dd
 8007130:	080071dd 	.word	0x080071dd
 8007134:	080071dd 	.word	0x080071dd
 8007138:	080071dd 	.word	0x080071dd
 800713c:	080071dd 	.word	0x080071dd
 8007140:	080071dd 	.word	0x080071dd
 8007144:	080071dd 	.word	0x080071dd
 8007148:	08007155 	.word	0x08007155
 800714c:	08007177 	.word	0x08007177
 8007150:	08007199 	.word	0x08007199
		{
	    case 'x':
		if (Parse_Parameters(X_AXIS_INDEX, (param_ptr+1), param_len))
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	3301      	adds	r3, #1
 8007158:	8afa      	ldrh	r2, [r7, #22]
 800715a:	4619      	mov	r1, r3
 800715c:	2000      	movs	r0, #0
 800715e:	f7ff fead 	bl	8006ebc <Parse_Parameters>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d003      	beq.n	8007170 <Move_Callback+0x160>
		    {
		    Move_Callback_Helper(X_AXIS_INDEX);
 8007168:	2000      	movs	r0, #0
 800716a:	f7ff fd01 	bl	8006b70 <Move_Callback_Helper>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 800716e:	e038      	b.n	80071e2 <Move_Callback+0x1d2>
		    is_command_valid = 0;
 8007170:	2300      	movs	r3, #0
 8007172:	77fb      	strb	r3, [r7, #31]
		break;
 8007174:	e035      	b.n	80071e2 <Move_Callback+0x1d2>

	    case 'y':
		if (Parse_Parameters(Y_AXIS_INDEX, (param_ptr+1), param_len))
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	3301      	adds	r3, #1
 800717a:	8afa      	ldrh	r2, [r7, #22]
 800717c:	4619      	mov	r1, r3
 800717e:	2001      	movs	r0, #1
 8007180:	f7ff fe9c 	bl	8006ebc <Parse_Parameters>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d003      	beq.n	8007192 <Move_Callback+0x182>
		    {
		    Move_Callback_Helper(Y_AXIS_INDEX);
 800718a:	2001      	movs	r0, #1
 800718c:	f7ff fcf0 	bl	8006b70 <Move_Callback_Helper>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 8007190:	e027      	b.n	80071e2 <Move_Callback+0x1d2>
		    is_command_valid = 0;
 8007192:	2300      	movs	r3, #0
 8007194:	77fb      	strb	r3, [r7, #31]
		break;
 8007196:	e024      	b.n	80071e2 <Move_Callback+0x1d2>

	    case 'z':
		if (Parse_Parameters(Z_AXIS_INDEX, (param_ptr+1), param_len))
 8007198:	69bb      	ldr	r3, [r7, #24]
 800719a:	3301      	adds	r3, #1
 800719c:	8afa      	ldrh	r2, [r7, #22]
 800719e:	4619      	mov	r1, r3
 80071a0:	2002      	movs	r0, #2
 80071a2:	f7ff fe8b 	bl	8006ebc <Parse_Parameters>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d003      	beq.n	80071b4 <Move_Callback+0x1a4>
		    {
		    Move_Callback_Helper(Z_AXIS_INDEX);
 80071ac:	2002      	movs	r0, #2
 80071ae:	f7ff fcdf 	bl	8006b70 <Move_Callback_Helper>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 80071b2:	e016      	b.n	80071e2 <Move_Callback+0x1d2>
		    is_command_valid = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	77fb      	strb	r3, [r7, #31]
		break;
 80071b8:	e013      	b.n	80071e2 <Move_Callback+0x1d2>

	    case 'm':
		if (Parse_Parameters(M_AXIS_INDEX, (param_ptr+1), param_len))
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	3301      	adds	r3, #1
 80071be:	8afa      	ldrh	r2, [r7, #22]
 80071c0:	4619      	mov	r1, r3
 80071c2:	2003      	movs	r0, #3
 80071c4:	f7ff fe7a 	bl	8006ebc <Parse_Parameters>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d003      	beq.n	80071d6 <Move_Callback+0x1c6>
		    {
		    Move_Callback_Helper(M_AXIS_INDEX);
 80071ce:	2003      	movs	r0, #3
 80071d0:	f7ff fcce 	bl	8006b70 <Move_Callback_Helper>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 80071d4:	e005      	b.n	80071e2 <Move_Callback+0x1d2>
		    is_command_valid = 0;
 80071d6:	2300      	movs	r3, #0
 80071d8:	77fb      	strb	r3, [r7, #31]
		break;
 80071da:	e002      	b.n	80071e2 <Move_Callback+0x1d2>
	    default:
		is_command_valid = 0;
 80071dc:	2300      	movs	r3, #0
 80071de:	77fb      	strb	r3, [r7, #31]
		break;
 80071e0:	bf00      	nop

		}
	    }

	}
    while (param_ptr != NULL);
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	f47f af7f 	bne.w	80070e8 <Move_Callback+0xd8>

    if (!param_counts)// no param received
 80071ea:	7f7b      	ldrb	r3, [r7, #29]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d101      	bne.n	80071f4 <Move_Callback+0x1e4>
	{
	is_command_valid = 0;
 80071f0:	2300      	movs	r3, #0
 80071f2:	77fb      	strb	r3, [r7, #31]
	}

    if (is_command_valid)
 80071f4:	7ffb      	ldrb	r3, [r7, #31]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d009      	beq.n	800720e <Move_Callback+0x1fe>
	{
	Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 80071fa:	68f9      	ldr	r1, [r7, #12]
 80071fc:	68b8      	ldr	r0, [r7, #8]
 80071fe:	f7ff fdf7 	bl	8006df0 <Print_Command_Ok>
	L6470_PerformPreparedApplicationCommand();
 8007202:	f7ff f9c7 	bl	8006594 <L6470_PerformPreparedApplicationCommand>
	Cammand_Executing_Flag = 1;
 8007206:	4b09      	ldr	r3, [pc, #36]	; (800722c <Move_Callback+0x21c>)
 8007208:	2201      	movs	r2, #1
 800720a:	701a      	strb	r2, [r3, #0]
 800720c:	e003      	b.n	8007216 <Move_Callback+0x206>
	}
    else
	{
	Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	68b8      	ldr	r0, [r7, #8]
 8007212:	f7ff fe1d 	bl	8006e50 <Print_Command_Err>
	}

	}

    return 0;// operation complete do not call again
 8007216:	2300      	movs	r3, #0

    }
 8007218:	4618      	mov	r0, r3
 800721a:	3720      	adds	r7, #32
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}
 8007220:	20000a2e 	.word	0x20000a2e
 8007224:	20000b18 	.word	0x20000b18
 8007228:	20000a44 	.word	0x20000a44
 800722c:	20000825 	.word	0x20000825

08007230 <Goto_Callback>:




uint8_t Goto_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 8007230:	b580      	push	{r7, lr}
 8007232:	b088      	sub	sp, #32
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	4613      	mov	r3, r2
 800723c:	80fb      	strh	r3, [r7, #6]

    uint8_t  is_command_valid = 1;
 800723e:	2301      	movs	r3, #1
 8007240:	77fb      	strb	r3, [r7, #31]
    uint8_t  param_number = 1;//param number, starting from first
 8007242:	2301      	movs	r3, #1
 8007244:	77bb      	strb	r3, [r7, #30]
    uint8_t  param_counts = 0;//received param count
 8007246:	2300      	movs	r3, #0
 8007248:	777b      	strb	r3, [r7, #29]
    uint16_t param_len = 0;
 800724a:	2300      	movs	r3, #0
 800724c:	82fb      	strh	r3, [r7, #22]
    char*    param_ptr = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	61bb      	str	r3, [r7, #24]

    if(Control_Mode)
 8007252:	4b7b      	ldr	r3, [pc, #492]	; (8007440 <Goto_Callback+0x210>)
 8007254:	781b      	ldrb	r3, [r3, #0]
 8007256:	2b00      	cmp	r3, #0
 8007258:	f000 80ed 	beq.w	8007436 <Goto_Callback+0x206>
	{

    L6470_PrepareGetParam(X_AXIS_INDEX,L6470_ABS_POS_ID);
 800725c:	2100      	movs	r1, #0
 800725e:	2000      	movs	r0, #0
 8007260:	f7ff f804 	bl	800626c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(Y_AXIS_INDEX,L6470_ABS_POS_ID);
 8007264:	2100      	movs	r1, #0
 8007266:	2001      	movs	r0, #1
 8007268:	f7ff f800 	bl	800626c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(Z_AXIS_INDEX,L6470_ABS_POS_ID);
 800726c:	2100      	movs	r1, #0
 800726e:	2002      	movs	r0, #2
 8007270:	f7fe fffc 	bl	800626c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(M_AXIS_INDEX,L6470_ABS_POS_ID);
 8007274:	2100      	movs	r1, #0
 8007276:	2003      	movs	r0, #3
 8007278:	f7fe fff8 	bl	800626c <L6470_PrepareGetParam>
    L6470_PerformPreparedApplicationCommand();
 800727c:	f7ff f98a 	bl	8006594 <L6470_PerformPreparedApplicationCommand>

    Motor_Current_Steps[X_AXIS_INDEX] = L6470_ExtractReturnedData(X_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8007280:	2203      	movs	r2, #3
 8007282:	4970      	ldr	r1, [pc, #448]	; (8007444 <Goto_Callback+0x214>)
 8007284:	2000      	movs	r0, #0
 8007286:	f7ff f9df 	bl	8006648 <L6470_ExtractReturnedData>
 800728a:	4603      	mov	r3, r0
 800728c:	461a      	mov	r2, r3
 800728e:	4b6e      	ldr	r3, [pc, #440]	; (8007448 <Goto_Callback+0x218>)
 8007290:	601a      	str	r2, [r3, #0]
    Motor_Current_Steps[Y_AXIS_INDEX] = L6470_ExtractReturnedData(Y_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8007292:	2203      	movs	r2, #3
 8007294:	496b      	ldr	r1, [pc, #428]	; (8007444 <Goto_Callback+0x214>)
 8007296:	2001      	movs	r0, #1
 8007298:	f7ff f9d6 	bl	8006648 <L6470_ExtractReturnedData>
 800729c:	4603      	mov	r3, r0
 800729e:	461a      	mov	r2, r3
 80072a0:	4b69      	ldr	r3, [pc, #420]	; (8007448 <Goto_Callback+0x218>)
 80072a2:	605a      	str	r2, [r3, #4]
    Motor_Current_Steps[Z_AXIS_INDEX] = L6470_ExtractReturnedData(Z_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 80072a4:	2203      	movs	r2, #3
 80072a6:	4967      	ldr	r1, [pc, #412]	; (8007444 <Goto_Callback+0x214>)
 80072a8:	2002      	movs	r0, #2
 80072aa:	f7ff f9cd 	bl	8006648 <L6470_ExtractReturnedData>
 80072ae:	4603      	mov	r3, r0
 80072b0:	461a      	mov	r2, r3
 80072b2:	4b65      	ldr	r3, [pc, #404]	; (8007448 <Goto_Callback+0x218>)
 80072b4:	609a      	str	r2, [r3, #8]
    Motor_Current_Steps[M_AXIS_INDEX] = L6470_ExtractReturnedData(M_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 80072b6:	2203      	movs	r2, #3
 80072b8:	4962      	ldr	r1, [pc, #392]	; (8007444 <Goto_Callback+0x214>)
 80072ba:	2003      	movs	r0, #3
 80072bc:	f7ff f9c4 	bl	8006648 <L6470_ExtractReturnedData>
 80072c0:	4603      	mov	r3, r0
 80072c2:	461a      	mov	r2, r3
 80072c4:	4b60      	ldr	r3, [pc, #384]	; (8007448 <Goto_Callback+0x218>)
 80072c6:	60da      	str	r2, [r3, #12]


    Motor_Current_Steps[X_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[X_AXIS_INDEX]);
 80072c8:	4b5f      	ldr	r3, [pc, #380]	; (8007448 <Goto_Callback+0x218>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7fe fad7 	bl	8005880 <AbsPos_2_Position>
 80072d2:	4602      	mov	r2, r0
 80072d4:	4b5c      	ldr	r3, [pc, #368]	; (8007448 <Goto_Callback+0x218>)
 80072d6:	601a      	str	r2, [r3, #0]
    Motor_Current_Steps[Y_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Y_AXIS_INDEX]);
 80072d8:	4b5b      	ldr	r3, [pc, #364]	; (8007448 <Goto_Callback+0x218>)
 80072da:	685b      	ldr	r3, [r3, #4]
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fe facf 	bl	8005880 <AbsPos_2_Position>
 80072e2:	4602      	mov	r2, r0
 80072e4:	4b58      	ldr	r3, [pc, #352]	; (8007448 <Goto_Callback+0x218>)
 80072e6:	605a      	str	r2, [r3, #4]
    Motor_Current_Steps[Z_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Z_AXIS_INDEX]);
 80072e8:	4b57      	ldr	r3, [pc, #348]	; (8007448 <Goto_Callback+0x218>)
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	4618      	mov	r0, r3
 80072ee:	f7fe fac7 	bl	8005880 <AbsPos_2_Position>
 80072f2:	4602      	mov	r2, r0
 80072f4:	4b54      	ldr	r3, [pc, #336]	; (8007448 <Goto_Callback+0x218>)
 80072f6:	609a      	str	r2, [r3, #8]
    Motor_Current_Steps[M_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[M_AXIS_INDEX]);
 80072f8:	4b53      	ldr	r3, [pc, #332]	; (8007448 <Goto_Callback+0x218>)
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7fe fabf 	bl	8005880 <AbsPos_2_Position>
 8007302:	4602      	mov	r2, r0
 8007304:	4b50      	ldr	r3, [pc, #320]	; (8007448 <Goto_Callback+0x218>)
 8007306:	60da      	str	r2, [r3, #12]

    do
	{

	param_ptr = CLI_Get_Parameter(cli_rx_command,
		                           param_number++,
 8007308:	7fbb      	ldrb	r3, [r7, #30]
 800730a:	1c5a      	adds	r2, r3, #1
 800730c:	77ba      	strb	r2, [r7, #30]
	param_ptr = CLI_Get_Parameter(cli_rx_command,
 800730e:	b29b      	uxth	r3, r3
 8007310:	f107 0216 	add.w	r2, r7, #22
 8007314:	4619      	mov	r1, r3
 8007316:	68f8      	ldr	r0, [r7, #12]
 8007318:	f001 faba 	bl	8008890 <CLI_Get_Parameter>
 800731c:	61b8      	str	r0, [r7, #24]
		                           &param_len);

	if (param_ptr != NULL)
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d06e      	beq.n	8007402 <Goto_Callback+0x1d2>
	    {

	    param_counts++;
 8007324:	7f7b      	ldrb	r3, [r7, #29]
 8007326:	3301      	adds	r3, #1
 8007328:	777b      	strb	r3, [r7, #29]

	    switch (*param_ptr)
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	3b6d      	subs	r3, #109	; 0x6d
 8007330:	2b0d      	cmp	r3, #13
 8007332:	d863      	bhi.n	80073fc <Goto_Callback+0x1cc>
 8007334:	a201      	add	r2, pc, #4	; (adr r2, 800733c <Goto_Callback+0x10c>)
 8007336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733a:	bf00      	nop
 800733c:	080073db 	.word	0x080073db
 8007340:	080073fd 	.word	0x080073fd
 8007344:	080073fd 	.word	0x080073fd
 8007348:	080073fd 	.word	0x080073fd
 800734c:	080073fd 	.word	0x080073fd
 8007350:	080073fd 	.word	0x080073fd
 8007354:	080073fd 	.word	0x080073fd
 8007358:	080073fd 	.word	0x080073fd
 800735c:	080073fd 	.word	0x080073fd
 8007360:	080073fd 	.word	0x080073fd
 8007364:	080073fd 	.word	0x080073fd
 8007368:	08007375 	.word	0x08007375
 800736c:	08007397 	.word	0x08007397
 8007370:	080073b9 	.word	0x080073b9
		{
	    case 'x':
		if (Parse_Parameters(X_AXIS_INDEX, (param_ptr+1), param_len))
 8007374:	69bb      	ldr	r3, [r7, #24]
 8007376:	3301      	adds	r3, #1
 8007378:	8afa      	ldrh	r2, [r7, #22]
 800737a:	4619      	mov	r1, r3
 800737c:	2000      	movs	r0, #0
 800737e:	f7ff fd9d 	bl	8006ebc <Parse_Parameters>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d003      	beq.n	8007390 <Goto_Callback+0x160>
		    {
		    Goto_Callback_Helper(X_AXIS_INDEX);
 8007388:	2000      	movs	r0, #0
 800738a:	f7ff fc35 	bl	8006bf8 <Goto_Callback_Helper>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 800738e:	e038      	b.n	8007402 <Goto_Callback+0x1d2>
		    is_command_valid = 0;
 8007390:	2300      	movs	r3, #0
 8007392:	77fb      	strb	r3, [r7, #31]
		break;
 8007394:	e035      	b.n	8007402 <Goto_Callback+0x1d2>

	    case 'y':
		if (Parse_Parameters(Y_AXIS_INDEX, (param_ptr+1), param_len))
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	3301      	adds	r3, #1
 800739a:	8afa      	ldrh	r2, [r7, #22]
 800739c:	4619      	mov	r1, r3
 800739e:	2001      	movs	r0, #1
 80073a0:	f7ff fd8c 	bl	8006ebc <Parse_Parameters>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d003      	beq.n	80073b2 <Goto_Callback+0x182>
		    {
		    Goto_Callback_Helper(Y_AXIS_INDEX);
 80073aa:	2001      	movs	r0, #1
 80073ac:	f7ff fc24 	bl	8006bf8 <Goto_Callback_Helper>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 80073b0:	e027      	b.n	8007402 <Goto_Callback+0x1d2>
		    is_command_valid = 0;
 80073b2:	2300      	movs	r3, #0
 80073b4:	77fb      	strb	r3, [r7, #31]
		break;
 80073b6:	e024      	b.n	8007402 <Goto_Callback+0x1d2>

	    case 'z':
		if (Parse_Parameters(Z_AXIS_INDEX, (param_ptr+1), param_len))
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	3301      	adds	r3, #1
 80073bc:	8afa      	ldrh	r2, [r7, #22]
 80073be:	4619      	mov	r1, r3
 80073c0:	2002      	movs	r0, #2
 80073c2:	f7ff fd7b 	bl	8006ebc <Parse_Parameters>
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <Goto_Callback+0x1a4>
		    {
		    Goto_Callback_Helper(Z_AXIS_INDEX);
 80073cc:	2002      	movs	r0, #2
 80073ce:	f7ff fc13 	bl	8006bf8 <Goto_Callback_Helper>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 80073d2:	e016      	b.n	8007402 <Goto_Callback+0x1d2>
		    is_command_valid = 0;
 80073d4:	2300      	movs	r3, #0
 80073d6:	77fb      	strb	r3, [r7, #31]
		break;
 80073d8:	e013      	b.n	8007402 <Goto_Callback+0x1d2>

	    case 'm':
		if (Parse_Parameters(M_AXIS_INDEX, (param_ptr+1), param_len))
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	3301      	adds	r3, #1
 80073de:	8afa      	ldrh	r2, [r7, #22]
 80073e0:	4619      	mov	r1, r3
 80073e2:	2003      	movs	r0, #3
 80073e4:	f7ff fd6a 	bl	8006ebc <Parse_Parameters>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <Goto_Callback+0x1c6>
		    {
		    Goto_Callback_Helper(M_AXIS_INDEX);
 80073ee:	2003      	movs	r0, #3
 80073f0:	f7ff fc02 	bl	8006bf8 <Goto_Callback_Helper>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 80073f4:	e005      	b.n	8007402 <Goto_Callback+0x1d2>
		    is_command_valid = 0;
 80073f6:	2300      	movs	r3, #0
 80073f8:	77fb      	strb	r3, [r7, #31]
		break;
 80073fa:	e002      	b.n	8007402 <Goto_Callback+0x1d2>
	    default:
		is_command_valid = 0;
 80073fc:	2300      	movs	r3, #0
 80073fe:	77fb      	strb	r3, [r7, #31]
		break;
 8007400:	bf00      	nop

		}
	    }

	}
    while (param_ptr != NULL);
 8007402:	69bb      	ldr	r3, [r7, #24]
 8007404:	2b00      	cmp	r3, #0
 8007406:	f47f af7f 	bne.w	8007308 <Goto_Callback+0xd8>

    if (!param_counts)// no param received
 800740a:	7f7b      	ldrb	r3, [r7, #29]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <Goto_Callback+0x1e4>
	{
	is_command_valid = 0;
 8007410:	2300      	movs	r3, #0
 8007412:	77fb      	strb	r3, [r7, #31]
	}

    if (is_command_valid)
 8007414:	7ffb      	ldrb	r3, [r7, #31]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d009      	beq.n	800742e <Goto_Callback+0x1fe>
	{
	Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 800741a:	68f9      	ldr	r1, [r7, #12]
 800741c:	68b8      	ldr	r0, [r7, #8]
 800741e:	f7ff fce7 	bl	8006df0 <Print_Command_Ok>
	L6470_PerformPreparedApplicationCommand();
 8007422:	f7ff f8b7 	bl	8006594 <L6470_PerformPreparedApplicationCommand>
	Cammand_Executing_Flag = 1;
 8007426:	4b09      	ldr	r3, [pc, #36]	; (800744c <Goto_Callback+0x21c>)
 8007428:	2201      	movs	r2, #1
 800742a:	701a      	strb	r2, [r3, #0]
 800742c:	e003      	b.n	8007436 <Goto_Callback+0x206>
	}
    else
	{
	Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 800742e:	68f9      	ldr	r1, [r7, #12]
 8007430:	68b8      	ldr	r0, [r7, #8]
 8007432:	f7ff fd0d 	bl	8006e50 <Print_Command_Err>
	}

	}

    return 0;// operation complete do not call again
 8007436:	2300      	movs	r3, #0

    }
 8007438:	4618      	mov	r0, r3
 800743a:	3720      	adds	r7, #32
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}
 8007440:	20000a2e 	.word	0x20000a2e
 8007444:	20000b18 	.word	0x20000b18
 8007448:	20000a44 	.word	0x20000a44
 800744c:	20000825 	.word	0x20000825

08007450 <Speed_Callback>:




uint8_t Speed_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 8007450:	b580      	push	{r7, lr}
 8007452:	b088      	sub	sp, #32
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	80fb      	strh	r3, [r7, #6]

    uint8_t  is_command_valid = 1;
 800745e:	2301      	movs	r3, #1
 8007460:	77fb      	strb	r3, [r7, #31]
    uint16_t param_len = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	82fb      	strh	r3, [r7, #22]
    uint8_t  param_number = 1;//param number, starting from first
 8007466:	2301      	movs	r3, #1
 8007468:	77bb      	strb	r3, [r7, #30]
    uint8_t  param_counts = 0;//received param count
 800746a:	2300      	movs	r3, #0
 800746c:	777b      	strb	r3, [r7, #29]
    char*    param_ptr = NULL;
 800746e:	2300      	movs	r3, #0
 8007470:	61bb      	str	r3, [r7, #24]

    if (Control_Mode)
 8007472:	4b50      	ldr	r3, [pc, #320]	; (80075b4 <Speed_Callback+0x164>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 8097 	beq.w	80075aa <Speed_Callback+0x15a>
	{

	do
	    {

	    param_ptr = CLI_Get_Parameter(cli_rx_command, param_number++,
 800747c:	7fbb      	ldrb	r3, [r7, #30]
 800747e:	1c5a      	adds	r2, r3, #1
 8007480:	77ba      	strb	r2, [r7, #30]
 8007482:	b29b      	uxth	r3, r3
 8007484:	f107 0216 	add.w	r2, r7, #22
 8007488:	4619      	mov	r1, r3
 800748a:	68f8      	ldr	r0, [r7, #12]
 800748c:	f001 fa00 	bl	8008890 <CLI_Get_Parameter>
 8007490:	61b8      	str	r0, [r7, #24]
		    &param_len);

	    if (param_ptr != NULL)
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d06e      	beq.n	8007576 <Speed_Callback+0x126>
		{

		param_counts++;
 8007498:	7f7b      	ldrb	r3, [r7, #29]
 800749a:	3301      	adds	r3, #1
 800749c:	777b      	strb	r3, [r7, #29]

		switch (*param_ptr)
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	3b6d      	subs	r3, #109	; 0x6d
 80074a4:	2b0d      	cmp	r3, #13
 80074a6:	d863      	bhi.n	8007570 <Speed_Callback+0x120>
 80074a8:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <Speed_Callback+0x60>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	0800754f 	.word	0x0800754f
 80074b4:	08007571 	.word	0x08007571
 80074b8:	08007571 	.word	0x08007571
 80074bc:	08007571 	.word	0x08007571
 80074c0:	08007571 	.word	0x08007571
 80074c4:	08007571 	.word	0x08007571
 80074c8:	08007571 	.word	0x08007571
 80074cc:	08007571 	.word	0x08007571
 80074d0:	08007571 	.word	0x08007571
 80074d4:	08007571 	.word	0x08007571
 80074d8:	08007571 	.word	0x08007571
 80074dc:	080074e9 	.word	0x080074e9
 80074e0:	0800750b 	.word	0x0800750b
 80074e4:	0800752d 	.word	0x0800752d
		    {
		case 'x':
		    if (Parse_Parameters(X_AXIS_INDEX, (param_ptr + 1),
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	3301      	adds	r3, #1
 80074ec:	8afa      	ldrh	r2, [r7, #22]
 80074ee:	4619      	mov	r1, r3
 80074f0:	2000      	movs	r0, #0
 80074f2:	f7ff fce3 	bl	8006ebc <Parse_Parameters>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d003      	beq.n	8007504 <Speed_Callback+0xb4>
			    param_len))
			{
			Speed_Callback_Helper(X_AXIS_INDEX);
 80074fc:	2000      	movs	r0, #0
 80074fe:	f7ff fbe7 	bl	8006cd0 <Speed_Callback_Helper>
			}
		    else
			{
			is_command_valid = 0;
			}
		    break;
 8007502:	e038      	b.n	8007576 <Speed_Callback+0x126>
			is_command_valid = 0;
 8007504:	2300      	movs	r3, #0
 8007506:	77fb      	strb	r3, [r7, #31]
		    break;
 8007508:	e035      	b.n	8007576 <Speed_Callback+0x126>

		case 'y':
		    if (Parse_Parameters(Y_AXIS_INDEX, (param_ptr + 1),
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	3301      	adds	r3, #1
 800750e:	8afa      	ldrh	r2, [r7, #22]
 8007510:	4619      	mov	r1, r3
 8007512:	2001      	movs	r0, #1
 8007514:	f7ff fcd2 	bl	8006ebc <Parse_Parameters>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <Speed_Callback+0xd6>
			    param_len))
			{
			Speed_Callback_Helper(Y_AXIS_INDEX);
 800751e:	2001      	movs	r0, #1
 8007520:	f7ff fbd6 	bl	8006cd0 <Speed_Callback_Helper>
			}
		    else
			{
			is_command_valid = 0;
			}
		    break;
 8007524:	e027      	b.n	8007576 <Speed_Callback+0x126>
			is_command_valid = 0;
 8007526:	2300      	movs	r3, #0
 8007528:	77fb      	strb	r3, [r7, #31]
		    break;
 800752a:	e024      	b.n	8007576 <Speed_Callback+0x126>

		case 'z':
		    if (Parse_Parameters(Z_AXIS_INDEX, (param_ptr + 1),
 800752c:	69bb      	ldr	r3, [r7, #24]
 800752e:	3301      	adds	r3, #1
 8007530:	8afa      	ldrh	r2, [r7, #22]
 8007532:	4619      	mov	r1, r3
 8007534:	2002      	movs	r0, #2
 8007536:	f7ff fcc1 	bl	8006ebc <Parse_Parameters>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d003      	beq.n	8007548 <Speed_Callback+0xf8>
			    param_len))
			{
			Speed_Callback_Helper(Z_AXIS_INDEX);
 8007540:	2002      	movs	r0, #2
 8007542:	f7ff fbc5 	bl	8006cd0 <Speed_Callback_Helper>
			}
		    else
			{
			is_command_valid = 0;
			}
		    break;
 8007546:	e016      	b.n	8007576 <Speed_Callback+0x126>
			is_command_valid = 0;
 8007548:	2300      	movs	r3, #0
 800754a:	77fb      	strb	r3, [r7, #31]
		    break;
 800754c:	e013      	b.n	8007576 <Speed_Callback+0x126>

		case 'm':
		    if (Parse_Parameters(M_AXIS_INDEX, (param_ptr + 1),
 800754e:	69bb      	ldr	r3, [r7, #24]
 8007550:	3301      	adds	r3, #1
 8007552:	8afa      	ldrh	r2, [r7, #22]
 8007554:	4619      	mov	r1, r3
 8007556:	2003      	movs	r0, #3
 8007558:	f7ff fcb0 	bl	8006ebc <Parse_Parameters>
 800755c:	4603      	mov	r3, r0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <Speed_Callback+0x11a>
			    param_len))
			{
			Speed_Callback_Helper(M_AXIS_INDEX);
 8007562:	2003      	movs	r0, #3
 8007564:	f7ff fbb4 	bl	8006cd0 <Speed_Callback_Helper>
			}
		    else
			{
			is_command_valid = 0;
			}
		    break;
 8007568:	e005      	b.n	8007576 <Speed_Callback+0x126>
			is_command_valid = 0;
 800756a:	2300      	movs	r3, #0
 800756c:	77fb      	strb	r3, [r7, #31]
		    break;
 800756e:	e002      	b.n	8007576 <Speed_Callback+0x126>
		default:
		    is_command_valid = 0;
 8007570:	2300      	movs	r3, #0
 8007572:	77fb      	strb	r3, [r7, #31]
		    break;
 8007574:	bf00      	nop

		    }
		}

	    }
	while (param_ptr != NULL);
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	2b00      	cmp	r3, #0
 800757a:	f47f af7f 	bne.w	800747c <Speed_Callback+0x2c>

	if (!param_counts)// no param received
 800757e:	7f7b      	ldrb	r3, [r7, #29]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d101      	bne.n	8007588 <Speed_Callback+0x138>
		{
		is_command_valid = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	77fb      	strb	r3, [r7, #31]
		}

	if (is_command_valid)
 8007588:	7ffb      	ldrb	r3, [r7, #31]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d009      	beq.n	80075a2 <Speed_Callback+0x152>
	    {
	    Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 800758e:	68f9      	ldr	r1, [r7, #12]
 8007590:	68b8      	ldr	r0, [r7, #8]
 8007592:	f7ff fc2d 	bl	8006df0 <Print_Command_Ok>
	    L6470_PerformPreparedApplicationCommand();
 8007596:	f7fe fffd 	bl	8006594 <L6470_PerformPreparedApplicationCommand>
	    Cammand_Executing_Flag = 1;
 800759a:	4b07      	ldr	r3, [pc, #28]	; (80075b8 <Speed_Callback+0x168>)
 800759c:	2201      	movs	r2, #1
 800759e:	701a      	strb	r2, [r3, #0]
 80075a0:	e003      	b.n	80075aa <Speed_Callback+0x15a>
	    }
	else
	    {
	    Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 80075a2:	68f9      	ldr	r1, [r7, #12]
 80075a4:	68b8      	ldr	r0, [r7, #8]
 80075a6:	f7ff fc53 	bl	8006e50 <Print_Command_Err>
	    }

	}

    return 0; // operation complete do not call again
 80075aa:	2300      	movs	r3, #0
    }
 80075ac:	4618      	mov	r0, r3
 80075ae:	3720      	adds	r7, #32
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20000a2e 	.word	0x20000a2e
 80075b8:	20000825 	.word	0x20000825

080075bc <Run_Callback>:




uint8_t Run_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 80075bc:	b580      	push	{r7, lr}
 80075be:	b088      	sub	sp, #32
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	60b9      	str	r1, [r7, #8]
 80075c6:	4613      	mov	r3, r2
 80075c8:	80fb      	strh	r3, [r7, #6]

    uint8_t  is_command_valid = 1;
 80075ca:	2301      	movs	r3, #1
 80075cc:	77fb      	strb	r3, [r7, #31]
    uint16_t param_len = 0;
 80075ce:	2300      	movs	r3, #0
 80075d0:	82fb      	strh	r3, [r7, #22]
    uint8_t  param_number = 1;//param number, starting from first
 80075d2:	2301      	movs	r3, #1
 80075d4:	77bb      	strb	r3, [r7, #30]
    uint8_t  param_counts = 0;//received param count
 80075d6:	2300      	movs	r3, #0
 80075d8:	777b      	strb	r3, [r7, #29]
    char*    param_ptr = NULL;
 80075da:	2300      	movs	r3, #0
 80075dc:	61bb      	str	r3, [r7, #24]


    if(Control_Mode)
 80075de:	4b7b      	ldr	r3, [pc, #492]	; (80077cc <Run_Callback+0x210>)
 80075e0:	781b      	ldrb	r3, [r3, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	f000 80ed 	beq.w	80077c2 <Run_Callback+0x206>
	{

    L6470_PrepareGetParam(X_AXIS_INDEX,L6470_ABS_POS_ID);
 80075e8:	2100      	movs	r1, #0
 80075ea:	2000      	movs	r0, #0
 80075ec:	f7fe fe3e 	bl	800626c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(Y_AXIS_INDEX,L6470_ABS_POS_ID);
 80075f0:	2100      	movs	r1, #0
 80075f2:	2001      	movs	r0, #1
 80075f4:	f7fe fe3a 	bl	800626c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(Z_AXIS_INDEX,L6470_ABS_POS_ID);
 80075f8:	2100      	movs	r1, #0
 80075fa:	2002      	movs	r0, #2
 80075fc:	f7fe fe36 	bl	800626c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(M_AXIS_INDEX,L6470_ABS_POS_ID);
 8007600:	2100      	movs	r1, #0
 8007602:	2003      	movs	r0, #3
 8007604:	f7fe fe32 	bl	800626c <L6470_PrepareGetParam>
    L6470_PerformPreparedApplicationCommand();
 8007608:	f7fe ffc4 	bl	8006594 <L6470_PerformPreparedApplicationCommand>

    Motor_Current_Steps[X_AXIS_INDEX] = L6470_ExtractReturnedData(X_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 800760c:	2203      	movs	r2, #3
 800760e:	4970      	ldr	r1, [pc, #448]	; (80077d0 <Run_Callback+0x214>)
 8007610:	2000      	movs	r0, #0
 8007612:	f7ff f819 	bl	8006648 <L6470_ExtractReturnedData>
 8007616:	4603      	mov	r3, r0
 8007618:	461a      	mov	r2, r3
 800761a:	4b6e      	ldr	r3, [pc, #440]	; (80077d4 <Run_Callback+0x218>)
 800761c:	601a      	str	r2, [r3, #0]
    Motor_Current_Steps[Y_AXIS_INDEX] = L6470_ExtractReturnedData(Y_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 800761e:	2203      	movs	r2, #3
 8007620:	496b      	ldr	r1, [pc, #428]	; (80077d0 <Run_Callback+0x214>)
 8007622:	2001      	movs	r0, #1
 8007624:	f7ff f810 	bl	8006648 <L6470_ExtractReturnedData>
 8007628:	4603      	mov	r3, r0
 800762a:	461a      	mov	r2, r3
 800762c:	4b69      	ldr	r3, [pc, #420]	; (80077d4 <Run_Callback+0x218>)
 800762e:	605a      	str	r2, [r3, #4]
    Motor_Current_Steps[Z_AXIS_INDEX] = L6470_ExtractReturnedData(Z_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8007630:	2203      	movs	r2, #3
 8007632:	4967      	ldr	r1, [pc, #412]	; (80077d0 <Run_Callback+0x214>)
 8007634:	2002      	movs	r0, #2
 8007636:	f7ff f807 	bl	8006648 <L6470_ExtractReturnedData>
 800763a:	4603      	mov	r3, r0
 800763c:	461a      	mov	r2, r3
 800763e:	4b65      	ldr	r3, [pc, #404]	; (80077d4 <Run_Callback+0x218>)
 8007640:	609a      	str	r2, [r3, #8]
    Motor_Current_Steps[M_AXIS_INDEX] = L6470_ExtractReturnedData(M_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8007642:	2203      	movs	r2, #3
 8007644:	4962      	ldr	r1, [pc, #392]	; (80077d0 <Run_Callback+0x214>)
 8007646:	2003      	movs	r0, #3
 8007648:	f7fe fffe 	bl	8006648 <L6470_ExtractReturnedData>
 800764c:	4603      	mov	r3, r0
 800764e:	461a      	mov	r2, r3
 8007650:	4b60      	ldr	r3, [pc, #384]	; (80077d4 <Run_Callback+0x218>)
 8007652:	60da      	str	r2, [r3, #12]

    Motor_Current_Steps[X_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[X_AXIS_INDEX]);
 8007654:	4b5f      	ldr	r3, [pc, #380]	; (80077d4 <Run_Callback+0x218>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4618      	mov	r0, r3
 800765a:	f7fe f911 	bl	8005880 <AbsPos_2_Position>
 800765e:	4602      	mov	r2, r0
 8007660:	4b5c      	ldr	r3, [pc, #368]	; (80077d4 <Run_Callback+0x218>)
 8007662:	601a      	str	r2, [r3, #0]
    Motor_Current_Steps[Y_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Y_AXIS_INDEX]);
 8007664:	4b5b      	ldr	r3, [pc, #364]	; (80077d4 <Run_Callback+0x218>)
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	4618      	mov	r0, r3
 800766a:	f7fe f909 	bl	8005880 <AbsPos_2_Position>
 800766e:	4602      	mov	r2, r0
 8007670:	4b58      	ldr	r3, [pc, #352]	; (80077d4 <Run_Callback+0x218>)
 8007672:	605a      	str	r2, [r3, #4]
    Motor_Current_Steps[Z_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Z_AXIS_INDEX]);
 8007674:	4b57      	ldr	r3, [pc, #348]	; (80077d4 <Run_Callback+0x218>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	4618      	mov	r0, r3
 800767a:	f7fe f901 	bl	8005880 <AbsPos_2_Position>
 800767e:	4602      	mov	r2, r0
 8007680:	4b54      	ldr	r3, [pc, #336]	; (80077d4 <Run_Callback+0x218>)
 8007682:	609a      	str	r2, [r3, #8]
    Motor_Current_Steps[M_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[M_AXIS_INDEX]);
 8007684:	4b53      	ldr	r3, [pc, #332]	; (80077d4 <Run_Callback+0x218>)
 8007686:	68db      	ldr	r3, [r3, #12]
 8007688:	4618      	mov	r0, r3
 800768a:	f7fe f8f9 	bl	8005880 <AbsPos_2_Position>
 800768e:	4602      	mov	r2, r0
 8007690:	4b50      	ldr	r3, [pc, #320]	; (80077d4 <Run_Callback+0x218>)
 8007692:	60da      	str	r2, [r3, #12]

    do
	{

	param_ptr = CLI_Get_Parameter(cli_rx_command,
		                           param_number++,
 8007694:	7fbb      	ldrb	r3, [r7, #30]
 8007696:	1c5a      	adds	r2, r3, #1
 8007698:	77ba      	strb	r2, [r7, #30]
	param_ptr = CLI_Get_Parameter(cli_rx_command,
 800769a:	b29b      	uxth	r3, r3
 800769c:	f107 0216 	add.w	r2, r7, #22
 80076a0:	4619      	mov	r1, r3
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f001 f8f4 	bl	8008890 <CLI_Get_Parameter>
 80076a8:	61b8      	str	r0, [r7, #24]
		                           &param_len);

	if (param_ptr != NULL)
 80076aa:	69bb      	ldr	r3, [r7, #24]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d06e      	beq.n	800778e <Run_Callback+0x1d2>
	    {

	    param_counts++;
 80076b0:	7f7b      	ldrb	r3, [r7, #29]
 80076b2:	3301      	adds	r3, #1
 80076b4:	777b      	strb	r3, [r7, #29]

	    switch (*param_ptr)
 80076b6:	69bb      	ldr	r3, [r7, #24]
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	3b6d      	subs	r3, #109	; 0x6d
 80076bc:	2b0d      	cmp	r3, #13
 80076be:	d863      	bhi.n	8007788 <Run_Callback+0x1cc>
 80076c0:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <Run_Callback+0x10c>)
 80076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	08007767 	.word	0x08007767
 80076cc:	08007789 	.word	0x08007789
 80076d0:	08007789 	.word	0x08007789
 80076d4:	08007789 	.word	0x08007789
 80076d8:	08007789 	.word	0x08007789
 80076dc:	08007789 	.word	0x08007789
 80076e0:	08007789 	.word	0x08007789
 80076e4:	08007789 	.word	0x08007789
 80076e8:	08007789 	.word	0x08007789
 80076ec:	08007789 	.word	0x08007789
 80076f0:	08007789 	.word	0x08007789
 80076f4:	08007701 	.word	0x08007701
 80076f8:	08007723 	.word	0x08007723
 80076fc:	08007745 	.word	0x08007745
		{
	    case 'x':
		if (Parse_Parameters(X_AXIS_INDEX, (param_ptr+1), param_len))
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	3301      	adds	r3, #1
 8007704:	8afa      	ldrh	r2, [r7, #22]
 8007706:	4619      	mov	r1, r3
 8007708:	2000      	movs	r0, #0
 800770a:	f7ff fbd7 	bl	8006ebc <Parse_Parameters>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d003      	beq.n	800771c <Run_Callback+0x160>
		    {
		    Run_Callback_Helper(X_AXIS_INDEX);
 8007714:	2000      	movs	r0, #0
 8007716:	f7ff fab7 	bl	8006c88 <Run_Callback_Helper>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 800771a:	e038      	b.n	800778e <Run_Callback+0x1d2>
		    is_command_valid = 0;
 800771c:	2300      	movs	r3, #0
 800771e:	77fb      	strb	r3, [r7, #31]
		break;
 8007720:	e035      	b.n	800778e <Run_Callback+0x1d2>

	    case 'y':
		if (Parse_Parameters(Y_AXIS_INDEX, (param_ptr+1), param_len))
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	3301      	adds	r3, #1
 8007726:	8afa      	ldrh	r2, [r7, #22]
 8007728:	4619      	mov	r1, r3
 800772a:	2001      	movs	r0, #1
 800772c:	f7ff fbc6 	bl	8006ebc <Parse_Parameters>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <Run_Callback+0x182>
		    {
		    Run_Callback_Helper(Y_AXIS_INDEX);
 8007736:	2001      	movs	r0, #1
 8007738:	f7ff faa6 	bl	8006c88 <Run_Callback_Helper>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 800773c:	e027      	b.n	800778e <Run_Callback+0x1d2>
		    is_command_valid = 0;
 800773e:	2300      	movs	r3, #0
 8007740:	77fb      	strb	r3, [r7, #31]
		break;
 8007742:	e024      	b.n	800778e <Run_Callback+0x1d2>

	    case 'z':
		if (Parse_Parameters(Z_AXIS_INDEX, (param_ptr+1), param_len))
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	3301      	adds	r3, #1
 8007748:	8afa      	ldrh	r2, [r7, #22]
 800774a:	4619      	mov	r1, r3
 800774c:	2002      	movs	r0, #2
 800774e:	f7ff fbb5 	bl	8006ebc <Parse_Parameters>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d003      	beq.n	8007760 <Run_Callback+0x1a4>
		    {
		    Run_Callback_Helper(Z_AXIS_INDEX);
 8007758:	2002      	movs	r0, #2
 800775a:	f7ff fa95 	bl	8006c88 <Run_Callback_Helper>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 800775e:	e016      	b.n	800778e <Run_Callback+0x1d2>
		    is_command_valid = 0;
 8007760:	2300      	movs	r3, #0
 8007762:	77fb      	strb	r3, [r7, #31]
		break;
 8007764:	e013      	b.n	800778e <Run_Callback+0x1d2>

	    case 'm':
		if (Parse_Parameters(M_AXIS_INDEX, (param_ptr+1), param_len))
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	3301      	adds	r3, #1
 800776a:	8afa      	ldrh	r2, [r7, #22]
 800776c:	4619      	mov	r1, r3
 800776e:	2003      	movs	r0, #3
 8007770:	f7ff fba4 	bl	8006ebc <Parse_Parameters>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <Run_Callback+0x1c6>
		    {
		    Run_Callback_Helper(M_AXIS_INDEX);
 800777a:	2003      	movs	r0, #3
 800777c:	f7ff fa84 	bl	8006c88 <Run_Callback_Helper>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 8007780:	e005      	b.n	800778e <Run_Callback+0x1d2>
		    is_command_valid = 0;
 8007782:	2300      	movs	r3, #0
 8007784:	77fb      	strb	r3, [r7, #31]
		break;
 8007786:	e002      	b.n	800778e <Run_Callback+0x1d2>
	    default:
		is_command_valid = 0;
 8007788:	2300      	movs	r3, #0
 800778a:	77fb      	strb	r3, [r7, #31]
		break;
 800778c:	bf00      	nop

		}
	    }

	}
    while (param_ptr != NULL);
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	2b00      	cmp	r3, #0
 8007792:	f47f af7f 	bne.w	8007694 <Run_Callback+0xd8>

    if (!param_counts)// no param received
 8007796:	7f7b      	ldrb	r3, [r7, #29]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d101      	bne.n	80077a0 <Run_Callback+0x1e4>
    	{
    	is_command_valid = 0;
 800779c:	2300      	movs	r3, #0
 800779e:	77fb      	strb	r3, [r7, #31]
    	}

    if (is_command_valid)
 80077a0:	7ffb      	ldrb	r3, [r7, #31]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d009      	beq.n	80077ba <Run_Callback+0x1fe>
	{
	Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 80077a6:	68f9      	ldr	r1, [r7, #12]
 80077a8:	68b8      	ldr	r0, [r7, #8]
 80077aa:	f7ff fb21 	bl	8006df0 <Print_Command_Ok>
	L6470_PerformPreparedApplicationCommand();
 80077ae:	f7fe fef1 	bl	8006594 <L6470_PerformPreparedApplicationCommand>
	Cammand_Executing_Flag = 1;
 80077b2:	4b09      	ldr	r3, [pc, #36]	; (80077d8 <Run_Callback+0x21c>)
 80077b4:	2201      	movs	r2, #1
 80077b6:	701a      	strb	r2, [r3, #0]
 80077b8:	e003      	b.n	80077c2 <Run_Callback+0x206>
	}
    else
	{
	Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 80077ba:	68f9      	ldr	r1, [r7, #12]
 80077bc:	68b8      	ldr	r0, [r7, #8]
 80077be:	f7ff fb47 	bl	8006e50 <Print_Command_Err>
	}
	}

    return 0;// operation complete do not call again
 80077c2:	2300      	movs	r3, #0

    }
 80077c4:	4618      	mov	r0, r3
 80077c6:	3720      	adds	r7, #32
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	20000a2e 	.word	0x20000a2e
 80077d0:	20000b18 	.word	0x20000b18
 80077d4:	20000a44 	.word	0x20000a44
 80077d8:	20000825 	.word	0x20000825

080077dc <Home_Callback>:



uint8_t Home_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)

    {
 80077dc:	b580      	push	{r7, lr}
 80077de:	b088      	sub	sp, #32
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]

    uint8_t  is_command_valid = 1;
 80077ea:	2301      	movs	r3, #1
 80077ec:	77fb      	strb	r3, [r7, #31]
    uint8_t  param_number = 1;//param number, starting from first
 80077ee:	2301      	movs	r3, #1
 80077f0:	77bb      	strb	r3, [r7, #30]
    uint8_t  param_counts = 0;//received param count
 80077f2:	2300      	movs	r3, #0
 80077f4:	777b      	strb	r3, [r7, #29]
    uint16_t param_len = 0;
 80077f6:	2300      	movs	r3, #0
 80077f8:	827b      	strh	r3, [r7, #18]
    char*    param_ptr = NULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	61bb      	str	r3, [r7, #24]

    uint32_t speed = Step_s_2_Speed(6000);
 80077fe:	ed9f 0a3e 	vldr	s0, [pc, #248]	; 80078f8 <Home_Callback+0x11c>
 8007802:	f7fe f851 	bl	80058a8 <Step_s_2_Speed>
 8007806:	6178      	str	r0, [r7, #20]

    do
	{

	param_ptr = CLI_Get_Parameter(cli_rx_command,
		                           param_number++,
 8007808:	7fbb      	ldrb	r3, [r7, #30]
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	77ba      	strb	r2, [r7, #30]
	param_ptr = CLI_Get_Parameter(cli_rx_command,
 800780e:	b29b      	uxth	r3, r3
 8007810:	f107 0212 	add.w	r2, r7, #18
 8007814:	4619      	mov	r1, r3
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	f001 f83a 	bl	8008890 <CLI_Get_Parameter>
 800781c:	61b8      	str	r0, [r7, #24]
		                           &param_len);
	if (param_ptr != NULL)
 800781e:	69bb      	ldr	r3, [r7, #24]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d04b      	beq.n	80078bc <Home_Callback+0xe0>
	    {

	    if (param_len == 1)
 8007824:	8a7b      	ldrh	r3, [r7, #18]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d146      	bne.n	80078b8 <Home_Callback+0xdc>
		{

	    param_counts++;
 800782a:	7f7b      	ldrb	r3, [r7, #29]
 800782c:	3301      	adds	r3, #1
 800782e:	777b      	strb	r3, [r7, #29]

	    switch (*param_ptr)
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	3b6d      	subs	r3, #109	; 0x6d
 8007836:	2b0d      	cmp	r3, #13
 8007838:	d83a      	bhi.n	80078b0 <Home_Callback+0xd4>
 800783a:	a201      	add	r2, pc, #4	; (adr r2, 8007840 <Home_Callback+0x64>)
 800783c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007840:	080078a3 	.word	0x080078a3
 8007844:	080078b1 	.word	0x080078b1
 8007848:	080078b1 	.word	0x080078b1
 800784c:	080078b1 	.word	0x080078b1
 8007850:	080078b1 	.word	0x080078b1
 8007854:	080078b1 	.word	0x080078b1
 8007858:	080078b1 	.word	0x080078b1
 800785c:	080078b1 	.word	0x080078b1
 8007860:	080078b1 	.word	0x080078b1
 8007864:	080078b1 	.word	0x080078b1
 8007868:	080078b1 	.word	0x080078b1
 800786c:	08007879 	.word	0x08007879
 8007870:	08007887 	.word	0x08007887
 8007874:	08007895 	.word	0x08007895
		{
	    case 'x':
		    L6470_PrepareGoUntil(X_AXIS_INDEX,
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	2200      	movs	r2, #0
 800787c:	2100      	movs	r1, #0
 800787e:	2000      	movs	r0, #0
 8007880:	f7fe fd8c 	bl	800639c <L6470_PrepareGoUntil>
			    L6470_ACT_RST_ID,
			    L6470_DIR_REV_ID,
			    speed);
		break;
 8007884:	e01a      	b.n	80078bc <Home_Callback+0xe0>

	    case 'y':
		    L6470_PrepareGoUntil(Y_AXIS_INDEX,
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	2200      	movs	r2, #0
 800788a:	2100      	movs	r1, #0
 800788c:	2001      	movs	r0, #1
 800788e:	f7fe fd85 	bl	800639c <L6470_PrepareGoUntil>
			    L6470_ACT_RST_ID,
			    L6470_DIR_REV_ID,
			    speed);
		break;
 8007892:	e013      	b.n	80078bc <Home_Callback+0xe0>

	    case 'z':
		    L6470_PrepareGoUntil(Z_AXIS_INDEX,
 8007894:	697b      	ldr	r3, [r7, #20]
 8007896:	2200      	movs	r2, #0
 8007898:	2100      	movs	r1, #0
 800789a:	2002      	movs	r0, #2
 800789c:	f7fe fd7e 	bl	800639c <L6470_PrepareGoUntil>
			    L6470_ACT_RST_ID,
			    L6470_DIR_REV_ID,
			    speed);
		break;
 80078a0:	e00c      	b.n	80078bc <Home_Callback+0xe0>

	    case 'm':
		    L6470_PrepareGoUntil(M_AXIS_INDEX,
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	2200      	movs	r2, #0
 80078a6:	2100      	movs	r1, #0
 80078a8:	2003      	movs	r0, #3
 80078aa:	f7fe fd77 	bl	800639c <L6470_PrepareGoUntil>
			    L6470_ACT_RST_ID,
			    L6470_DIR_REV_ID,
			    speed);
		break;
 80078ae:	e005      	b.n	80078bc <Home_Callback+0xe0>

	    default:
		    is_command_valid = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	77fb      	strb	r3, [r7, #31]
		break;
 80078b4:	bf00      	nop
 80078b6:	e001      	b.n	80078bc <Home_Callback+0xe0>

		}
	    }
	else
	    {
	    is_command_valid = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	77fb      	strb	r3, [r7, #31]
	    }

            }

	}
    while (param_ptr != NULL);
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d1a2      	bne.n	8007808 <Home_Callback+0x2c>

    if (!param_counts)// no param received
 80078c2:	7f7b      	ldrb	r3, [r7, #29]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d101      	bne.n	80078cc <Home_Callback+0xf0>
    	{
    	is_command_valid = 0;
 80078c8:	2300      	movs	r3, #0
 80078ca:	77fb      	strb	r3, [r7, #31]
    	}

    if (is_command_valid)
 80078cc:	7ffb      	ldrb	r3, [r7, #31]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d009      	beq.n	80078e6 <Home_Callback+0x10a>
	{
	Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 80078d2:	68f9      	ldr	r1, [r7, #12]
 80078d4:	68b8      	ldr	r0, [r7, #8]
 80078d6:	f7ff fa8b 	bl	8006df0 <Print_Command_Ok>
	L6470_PerformPreparedApplicationCommand();
 80078da:	f7fe fe5b 	bl	8006594 <L6470_PerformPreparedApplicationCommand>
	Cammand_Executing_Flag = 1;
 80078de:	4b07      	ldr	r3, [pc, #28]	; (80078fc <Home_Callback+0x120>)
 80078e0:	2201      	movs	r2, #1
 80078e2:	701a      	strb	r2, [r3, #0]
 80078e4:	e003      	b.n	80078ee <Home_Callback+0x112>
	}
    else
	{
	Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 80078e6:	68f9      	ldr	r1, [r7, #12]
 80078e8:	68b8      	ldr	r0, [r7, #8]
 80078ea:	f7ff fab1 	bl	8006e50 <Print_Command_Err>
	}

    return 0;// operation complete do not call again
 80078ee:	2300      	movs	r3, #0

    }
 80078f0:	4618      	mov	r0, r3
 80078f2:	3720      	adds	r7, #32
 80078f4:	46bd      	mov	sp, r7
 80078f6:	bd80      	pop	{r7, pc}
 80078f8:	45bb8000 	.word	0x45bb8000
 80078fc:	20000825 	.word	0x20000825

08007900 <Auto_Callback>:
    };



uint8_t Auto_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 8007900:	b580      	push	{r7, lr}
 8007902:	b086      	sub	sp, #24
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	4613      	mov	r3, r2
 800790c:	80fb      	strh	r3, [r7, #6]

    uint16_t param_len = 0;
 800790e:	2300      	movs	r3, #0
 8007910:	82fb      	strh	r3, [r7, #22]

    CLI_Get_Parameter(cli_rx_command,1,&param_len);
 8007912:	f107 0316 	add.w	r3, r7, #22
 8007916:	461a      	mov	r2, r3
 8007918:	2101      	movs	r1, #1
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f000 ffb8 	bl	8008890 <CLI_Get_Parameter>

    if(param_len == 0)
 8007920:	8afb      	ldrh	r3, [r7, #22]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d107      	bne.n	8007936 <Auto_Callback+0x36>
	{
	Control_Mode = 1;
 8007926:	4b08      	ldr	r3, [pc, #32]	; (8007948 <Auto_Callback+0x48>)
 8007928:	2201      	movs	r2, #1
 800792a:	701a      	strb	r2, [r3, #0]
	Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 800792c:	68f9      	ldr	r1, [r7, #12]
 800792e:	68b8      	ldr	r0, [r7, #8]
 8007930:	f7ff fa5e 	bl	8006df0 <Print_Command_Ok>
 8007934:	e003      	b.n	800793e <Auto_Callback+0x3e>
	}
    else
	{
	Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 8007936:	68f9      	ldr	r1, [r7, #12]
 8007938:	68b8      	ldr	r0, [r7, #8]
 800793a:	f7ff fa89 	bl	8006e50 <Print_Command_Err>
	}

    return 0; // operation complete do not call again
 800793e:	2300      	movs	r3, #0

    }
 8007940:	4618      	mov	r0, r3
 8007942:	3718      	adds	r7, #24
 8007944:	46bd      	mov	sp, r7
 8007946:	bd80      	pop	{r7, pc}
 8007948:	20000a2e 	.word	0x20000a2e

0800794c <Manual_Callback>:




uint8_t Manual_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 800794c:	b580      	push	{r7, lr}
 800794e:	b086      	sub	sp, #24
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	4613      	mov	r3, r2
 8007958:	80fb      	strh	r3, [r7, #6]

    uint16_t param_len = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	82fb      	strh	r3, [r7, #22]

    CLI_Get_Parameter(cli_rx_command,1,&param_len);
 800795e:	f107 0316 	add.w	r3, r7, #22
 8007962:	461a      	mov	r2, r3
 8007964:	2101      	movs	r1, #1
 8007966:	68f8      	ldr	r0, [r7, #12]
 8007968:	f000 ff92 	bl	8008890 <CLI_Get_Parameter>

    if(param_len == 0)
 800796c:	8afb      	ldrh	r3, [r7, #22]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d107      	bne.n	8007982 <Manual_Callback+0x36>
	{
	Control_Mode = 0;
 8007972:	4b08      	ldr	r3, [pc, #32]	; (8007994 <Manual_Callback+0x48>)
 8007974:	2200      	movs	r2, #0
 8007976:	701a      	strb	r2, [r3, #0]
	Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 8007978:	68f9      	ldr	r1, [r7, #12]
 800797a:	68b8      	ldr	r0, [r7, #8]
 800797c:	f7ff fa38 	bl	8006df0 <Print_Command_Ok>
 8007980:	e003      	b.n	800798a <Manual_Callback+0x3e>
	}
    else
	{
	Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 8007982:	68f9      	ldr	r1, [r7, #12]
 8007984:	68b8      	ldr	r0, [r7, #8]
 8007986:	f7ff fa63 	bl	8006e50 <Print_Command_Err>
	}

    return 0; // operation complete do not call again
 800798a:	2300      	movs	r3, #0

    }
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	20000a2e 	.word	0x20000a2e

08007998 <Getpos_Callback>:




uint8_t Getpos_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 8007998:	b590      	push	{r4, r7, lr}
 800799a:	b089      	sub	sp, #36	; 0x24
 800799c:	af02      	add	r7, sp, #8
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]

    uint16_t param_len = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	82fb      	strh	r3, [r7, #22]

    CLI_Get_Parameter(cli_rx_command,1,&param_len);
 80079aa:	f107 0316 	add.w	r3, r7, #22
 80079ae:	461a      	mov	r2, r3
 80079b0:	2101      	movs	r1, #1
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f000 ff6c 	bl	8008890 <CLI_Get_Parameter>

    if(param_len == 0)
 80079b8:	8afb      	ldrh	r3, [r7, #22]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d16f      	bne.n	8007a9e <Getpos_Callback+0x106>
	{
	    L6470_PrepareGetParam(X_AXIS_INDEX,L6470_ABS_POS_ID);
 80079be:	2100      	movs	r1, #0
 80079c0:	2000      	movs	r0, #0
 80079c2:	f7fe fc53 	bl	800626c <L6470_PrepareGetParam>
	    L6470_PrepareGetParam(Y_AXIS_INDEX,L6470_ABS_POS_ID);
 80079c6:	2100      	movs	r1, #0
 80079c8:	2001      	movs	r0, #1
 80079ca:	f7fe fc4f 	bl	800626c <L6470_PrepareGetParam>
	    L6470_PrepareGetParam(Z_AXIS_INDEX,L6470_ABS_POS_ID);
 80079ce:	2100      	movs	r1, #0
 80079d0:	2002      	movs	r0, #2
 80079d2:	f7fe fc4b 	bl	800626c <L6470_PrepareGetParam>
	    L6470_PrepareGetParam(M_AXIS_INDEX,L6470_ABS_POS_ID);
 80079d6:	2100      	movs	r1, #0
 80079d8:	2003      	movs	r0, #3
 80079da:	f7fe fc47 	bl	800626c <L6470_PrepareGetParam>
	    L6470_PerformPreparedApplicationCommand();
 80079de:	f7fe fdd9 	bl	8006594 <L6470_PerformPreparedApplicationCommand>

	    Motor_Current_Steps[X_AXIS_INDEX] = L6470_ExtractReturnedData(X_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 80079e2:	2203      	movs	r2, #3
 80079e4:	4932      	ldr	r1, [pc, #200]	; (8007ab0 <Getpos_Callback+0x118>)
 80079e6:	2000      	movs	r0, #0
 80079e8:	f7fe fe2e 	bl	8006648 <L6470_ExtractReturnedData>
 80079ec:	4603      	mov	r3, r0
 80079ee:	461a      	mov	r2, r3
 80079f0:	4b30      	ldr	r3, [pc, #192]	; (8007ab4 <Getpos_Callback+0x11c>)
 80079f2:	601a      	str	r2, [r3, #0]
	    Motor_Current_Steps[Y_AXIS_INDEX] = L6470_ExtractReturnedData(Y_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 80079f4:	2203      	movs	r2, #3
 80079f6:	492e      	ldr	r1, [pc, #184]	; (8007ab0 <Getpos_Callback+0x118>)
 80079f8:	2001      	movs	r0, #1
 80079fa:	f7fe fe25 	bl	8006648 <L6470_ExtractReturnedData>
 80079fe:	4603      	mov	r3, r0
 8007a00:	461a      	mov	r2, r3
 8007a02:	4b2c      	ldr	r3, [pc, #176]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a04:	605a      	str	r2, [r3, #4]
	    Motor_Current_Steps[Z_AXIS_INDEX] = L6470_ExtractReturnedData(Z_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8007a06:	2203      	movs	r2, #3
 8007a08:	4929      	ldr	r1, [pc, #164]	; (8007ab0 <Getpos_Callback+0x118>)
 8007a0a:	2002      	movs	r0, #2
 8007a0c:	f7fe fe1c 	bl	8006648 <L6470_ExtractReturnedData>
 8007a10:	4603      	mov	r3, r0
 8007a12:	461a      	mov	r2, r3
 8007a14:	4b27      	ldr	r3, [pc, #156]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a16:	609a      	str	r2, [r3, #8]
	    Motor_Current_Steps[M_AXIS_INDEX] = L6470_ExtractReturnedData(M_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8007a18:	2203      	movs	r2, #3
 8007a1a:	4925      	ldr	r1, [pc, #148]	; (8007ab0 <Getpos_Callback+0x118>)
 8007a1c:	2003      	movs	r0, #3
 8007a1e:	f7fe fe13 	bl	8006648 <L6470_ExtractReturnedData>
 8007a22:	4603      	mov	r3, r0
 8007a24:	461a      	mov	r2, r3
 8007a26:	4b23      	ldr	r3, [pc, #140]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a28:	60da      	str	r2, [r3, #12]

	    Motor_Current_Steps[X_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[X_AXIS_INDEX]);
 8007a2a:	4b22      	ldr	r3, [pc, #136]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fd ff26 	bl	8005880 <AbsPos_2_Position>
 8007a34:	4602      	mov	r2, r0
 8007a36:	4b1f      	ldr	r3, [pc, #124]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a38:	601a      	str	r2, [r3, #0]
	    Motor_Current_Steps[Y_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Y_AXIS_INDEX]);
 8007a3a:	4b1e      	ldr	r3, [pc, #120]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fd ff1e 	bl	8005880 <AbsPos_2_Position>
 8007a44:	4602      	mov	r2, r0
 8007a46:	4b1b      	ldr	r3, [pc, #108]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a48:	605a      	str	r2, [r3, #4]
	    Motor_Current_Steps[Z_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Z_AXIS_INDEX]);
 8007a4a:	4b1a      	ldr	r3, [pc, #104]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7fd ff16 	bl	8005880 <AbsPos_2_Position>
 8007a54:	4602      	mov	r2, r0
 8007a56:	4b17      	ldr	r3, [pc, #92]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a58:	609a      	str	r2, [r3, #8]
	    Motor_Current_Steps[M_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[M_AXIS_INDEX]);
 8007a5a:	4b16      	ldr	r3, [pc, #88]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a5c:	68db      	ldr	r3, [r3, #12]
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f7fd ff0e 	bl	8005880 <AbsPos_2_Position>
 8007a64:	4602      	mov	r2, r0
 8007a66:	4b13      	ldr	r3, [pc, #76]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a68:	60da      	str	r2, [r3, #12]

	    Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 8007a6a:	68f9      	ldr	r1, [r7, #12]
 8007a6c:	68b8      	ldr	r0, [r7, #8]
 8007a6e:	f7ff f9bf 	bl	8006df0 <Print_Command_Ok>

	    sprintf(cli_tx_out_buffer + strlen(cli_tx_out_buffer),"pos x%i y%i z%i m%i\r\nDone\r\n",(int)Motor_Current_Steps[X_AXIS_INDEX],(int)Motor_Current_Steps[Y_AXIS_INDEX],
 8007a72:	68b8      	ldr	r0, [r7, #8]
 8007a74:	f7f8 fbb4 	bl	80001e0 <strlen>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	1898      	adds	r0, r3, r2
 8007a7e:	4b0d      	ldr	r3, [pc, #52]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a80:	6819      	ldr	r1, [r3, #0]
 8007a82:	4b0c      	ldr	r3, [pc, #48]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a84:	685c      	ldr	r4, [r3, #4]
		    (int)Motor_Current_Steps[Z_AXIS_INDEX],(int)Motor_Current_Steps[M_AXIS_INDEX]);
 8007a86:	4b0b      	ldr	r3, [pc, #44]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a88:	689b      	ldr	r3, [r3, #8]
 8007a8a:	4a0a      	ldr	r2, [pc, #40]	; (8007ab4 <Getpos_Callback+0x11c>)
 8007a8c:	68d2      	ldr	r2, [r2, #12]
	    sprintf(cli_tx_out_buffer + strlen(cli_tx_out_buffer),"pos x%i y%i z%i m%i\r\nDone\r\n",(int)Motor_Current_Steps[X_AXIS_INDEX],(int)Motor_Current_Steps[Y_AXIS_INDEX],
 8007a8e:	9201      	str	r2, [sp, #4]
 8007a90:	9300      	str	r3, [sp, #0]
 8007a92:	4623      	mov	r3, r4
 8007a94:	460a      	mov	r2, r1
 8007a96:	4908      	ldr	r1, [pc, #32]	; (8007ab8 <Getpos_Callback+0x120>)
 8007a98:	f002 f83c 	bl	8009b14 <sprintf>
 8007a9c:	e003      	b.n	8007aa6 <Getpos_Callback+0x10e>

	}
    else
	{
	    Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 8007a9e:	68f9      	ldr	r1, [r7, #12]
 8007aa0:	68b8      	ldr	r0, [r7, #8]
 8007aa2:	f7ff f9d5 	bl	8006e50 <Print_Command_Err>
	}

    return 0; // operation complete do not call again
 8007aa6:	2300      	movs	r3, #0

    }
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	371c      	adds	r7, #28
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd90      	pop	{r4, r7, pc}
 8007ab0:	20000b18 	.word	0x20000b18
 8007ab4:	20000a44 	.word	0x20000a44
 8007ab8:	0800d270 	.word	0x0800d270

08007abc <Setfocus_Callback>:



/* expecting 4 params*/
uint8_t Setfocus_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 8007abc:	b5b0      	push	{r4, r5, r7, lr}
 8007abe:	b08a      	sub	sp, #40	; 0x28
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	4613      	mov	r3, r2
 8007ac8:	80fb      	strh	r3, [r7, #6]

    uint8_t is_command_valid = 1;
 8007aca:	2301      	movs	r3, #1
 8007acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t is_at24_write_ok = 0;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint16_t param_len = 0;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	83fb      	strh	r3, [r7, #30]
    int32_t lf = 0;
 8007ada:	2300      	movs	r3, #0
 8007adc:	61bb      	str	r3, [r7, #24]
    int32_t lfmin = 0;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	617b      	str	r3, [r7, #20]
    int32_t lfmax = 0;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	613b      	str	r3, [r7, #16]
    uint8_t store_index = 0;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    char* param_ptr = NULL;
 8007aec:	2300      	movs	r3, #0
 8007aee:	623b      	str	r3, [r7, #32]

    // if params are more than 4, command is invalid
    // check for fifth param
    param_ptr = CLI_Get_Parameter(cli_rx_command, 5, &param_len);
 8007af0:	f107 031e 	add.w	r3, r7, #30
 8007af4:	461a      	mov	r2, r3
 8007af6:	2105      	movs	r1, #5
 8007af8:	68f8      	ldr	r0, [r7, #12]
 8007afa:	f000 fec9 	bl	8008890 <CLI_Get_Parameter>
 8007afe:	6238      	str	r0, [r7, #32]

    if (param_ptr == NULL)
 8007b00:	6a3b      	ldr	r3, [r7, #32]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d142      	bne.n	8007b8c <Setfocus_Callback+0xd0>
	{
	//get first param
	param_ptr = CLI_Get_Parameter(cli_rx_command, 1, &param_len);
 8007b06:	f107 031e 	add.w	r3, r7, #30
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	2101      	movs	r1, #1
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f000 febe 	bl	8008890 <CLI_Get_Parameter>
 8007b14:	6238      	str	r0, [r7, #32]

	if(param_len == 2)
 8007b16:	8bfb      	ldrh	r3, [r7, #30]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d133      	bne.n	8007b84 <Setfocus_Callback+0xc8>
	    {
	    if(strncmp(param_ptr,"l1",2) == 0)
 8007b1c:	2202      	movs	r2, #2
 8007b1e:	4976      	ldr	r1, [pc, #472]	; (8007cf8 <Setfocus_Callback+0x23c>)
 8007b20:	6a38      	ldr	r0, [r7, #32]
 8007b22:	f002 f82f 	bl	8009b84 <strncmp>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d103      	bne.n	8007b34 <Setfocus_Callback+0x78>
		{
		store_index = 0;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b32:	e02e      	b.n	8007b92 <Setfocus_Callback+0xd6>
		}
	    else if(strncmp(param_ptr,"l2",2) == 0)
 8007b34:	2202      	movs	r2, #2
 8007b36:	4971      	ldr	r1, [pc, #452]	; (8007cfc <Setfocus_Callback+0x240>)
 8007b38:	6a38      	ldr	r0, [r7, #32]
 8007b3a:	f002 f823 	bl	8009b84 <strncmp>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d103      	bne.n	8007b4c <Setfocus_Callback+0x90>
		{
		store_index = 3;
 8007b44:	2303      	movs	r3, #3
 8007b46:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b4a:	e022      	b.n	8007b92 <Setfocus_Callback+0xd6>
		}
	    else if(strncmp(param_ptr,"l3",2) == 0)
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	496c      	ldr	r1, [pc, #432]	; (8007d00 <Setfocus_Callback+0x244>)
 8007b50:	6a38      	ldr	r0, [r7, #32]
 8007b52:	f002 f817 	bl	8009b84 <strncmp>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d103      	bne.n	8007b64 <Setfocus_Callback+0xa8>
		{
		store_index = 6;
 8007b5c:	2306      	movs	r3, #6
 8007b5e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b62:	e016      	b.n	8007b92 <Setfocus_Callback+0xd6>
		}
	    else if(strncmp(param_ptr,"l4",2) == 0)
 8007b64:	2202      	movs	r2, #2
 8007b66:	4967      	ldr	r1, [pc, #412]	; (8007d04 <Setfocus_Callback+0x248>)
 8007b68:	6a38      	ldr	r0, [r7, #32]
 8007b6a:	f002 f80b 	bl	8009b84 <strncmp>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d103      	bne.n	8007b7c <Setfocus_Callback+0xc0>
		{
		store_index = 9;
 8007b74:	2309      	movs	r3, #9
 8007b76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b7a:	e00a      	b.n	8007b92 <Setfocus_Callback+0xd6>
		}
	    else
		{
		is_command_valid = 0;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b82:	e006      	b.n	8007b92 <Setfocus_Callback+0xd6>
		}
	    }
	else
	    {
	    is_command_valid = 0;
 8007b84:	2300      	movs	r3, #0
 8007b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b8a:	e002      	b.n	8007b92 <Setfocus_Callback+0xd6>
	    }
	}
    else
	{
	is_command_valid = 0;
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


    //get second param
    param_ptr = CLI_Get_Parameter(cli_rx_command, 2, &param_len);
 8007b92:	f107 031e 	add.w	r3, r7, #30
 8007b96:	461a      	mov	r2, r3
 8007b98:	2102      	movs	r1, #2
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 fe78 	bl	8008890 <CLI_Get_Parameter>
 8007ba0:	6238      	str	r0, [r7, #32]
    if (!Parse_Int(param_ptr, &lf))
 8007ba2:	f107 0318 	add.w	r3, r7, #24
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6a38      	ldr	r0, [r7, #32]
 8007baa:	f7ff f9eb 	bl	8006f84 <Parse_Int>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d102      	bne.n	8007bba <Setfocus_Callback+0xfe>
	{
	is_command_valid = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    //get third param
    param_ptr = CLI_Get_Parameter(cli_rx_command, 3, &param_len);
 8007bba:	f107 031e 	add.w	r3, r7, #30
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	2103      	movs	r1, #3
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fe64 	bl	8008890 <CLI_Get_Parameter>
 8007bc8:	6238      	str	r0, [r7, #32]
    if (!Parse_Int(param_ptr, &lfmin))
 8007bca:	f107 0314 	add.w	r3, r7, #20
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6a38      	ldr	r0, [r7, #32]
 8007bd2:	f7ff f9d7 	bl	8006f84 <Parse_Int>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d102      	bne.n	8007be2 <Setfocus_Callback+0x126>
	{
	is_command_valid = 0;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
    //get forth param
    param_ptr = CLI_Get_Parameter(cli_rx_command, 4, &param_len);
 8007be2:	f107 031e 	add.w	r3, r7, #30
 8007be6:	461a      	mov	r2, r3
 8007be8:	2104      	movs	r1, #4
 8007bea:	68f8      	ldr	r0, [r7, #12]
 8007bec:	f000 fe50 	bl	8008890 <CLI_Get_Parameter>
 8007bf0:	6238      	str	r0, [r7, #32]
    if(param_ptr != NULL)
 8007bf2:	6a3b      	ldr	r3, [r7, #32]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00c      	beq.n	8007c12 <Setfocus_Callback+0x156>
	{
    if (!Parse_Int(param_ptr, &lfmax))
 8007bf8:	f107 0310 	add.w	r3, r7, #16
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6a38      	ldr	r0, [r7, #32]
 8007c00:	f7ff f9c0 	bl	8006f84 <Parse_Int>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d106      	bne.n	8007c18 <Setfocus_Callback+0x15c>
	{
	is_command_valid = 0;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007c10:	e002      	b.n	8007c18 <Setfocus_Callback+0x15c>
	}
	}
    else
	{
	is_command_valid = 0;
 8007c12:	2300      	movs	r3, #0
 8007c14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}


    if(is_command_valid)
 8007c18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d061      	beq.n	8007ce4 <Setfocus_Callback+0x228>
	{
	Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 8007c20:	68f9      	ldr	r1, [r7, #12]
 8007c22:	68b8      	ldr	r0, [r7, #8]
 8007c24:	f7ff f8e4 	bl	8006df0 <Print_Command_Ok>
	is_at24_write_ok = Store_In_AT24((store_index+0)*AT24CXX_PAGE_SIZE,lf);
 8007c28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	b2db      	uxtb	r3, r3
 8007c30:	69ba      	ldr	r2, [r7, #24]
 8007c32:	4611      	mov	r1, r2
 8007c34:	4618      	mov	r0, r3
 8007c36:	f7ff f879 	bl	8006d2c <Store_In_AT24>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_Delay(5);
 8007c40:	2005      	movs	r0, #5
 8007c42:	f7f9 f9af 	bl	8000fa4 <HAL_Delay>
	is_at24_write_ok += Store_In_AT24((store_index+1)*AT24CXX_PAGE_SIZE,lfmin);
 8007c46:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c4a:	3301      	adds	r3, #1
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	00db      	lsls	r3, r3, #3
 8007c50:	b2db      	uxtb	r3, r3
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4611      	mov	r1, r2
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7ff f868 	bl	8006d2c <Store_In_AT24>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007c64:	4413      	add	r3, r2
 8007c66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_Delay(5);
 8007c6a:	2005      	movs	r0, #5
 8007c6c:	f7f9 f99a 	bl	8000fa4 <HAL_Delay>
	is_at24_write_ok += Store_In_AT24((store_index+2)*AT24CXX_PAGE_SIZE,lfmax);
 8007c70:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c74:	3302      	adds	r3, #2
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	00db      	lsls	r3, r3, #3
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	693a      	ldr	r2, [r7, #16]
 8007c7e:	4611      	mov	r1, r2
 8007c80:	4618      	mov	r0, r3
 8007c82:	f7ff f853 	bl	8006d2c <Store_In_AT24>
 8007c86:	4603      	mov	r3, r0
 8007c88:	461a      	mov	r2, r3
 8007c8a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007c8e:	4413      	add	r3, r2
 8007c90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	    if(is_at24_write_ok == 3)
 8007c94:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d10f      	bne.n	8007cbc <Setfocus_Callback+0x200>
		{
		strncat(cli_tx_out_buffer,"\r\nDone\r\n",20);
 8007c9c:	68b8      	ldr	r0, [r7, #8]
 8007c9e:	f7f8 fa9f 	bl	80001e0 <strlen>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	461a      	mov	r2, r3
 8007ca6:	68bb      	ldr	r3, [r7, #8]
 8007ca8:	4413      	add	r3, r2
 8007caa:	4917      	ldr	r1, [pc, #92]	; (8007d08 <Setfocus_Callback+0x24c>)
 8007cac:	461a      	mov	r2, r3
 8007cae:	460b      	mov	r3, r1
 8007cb0:	cb03      	ldmia	r3!, {r0, r1}
 8007cb2:	6010      	str	r0, [r2, #0]
 8007cb4:	6051      	str	r1, [r2, #4]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	7213      	strb	r3, [r2, #8]
 8007cba:	e017      	b.n	8007cec <Setfocus_Callback+0x230>
		}
	    else
		{
		strncat(cli_tx_out_buffer, "AT24C Write Failed\r\n", 50);
 8007cbc:	68b8      	ldr	r0, [r7, #8]
 8007cbe:	f7f8 fa8f 	bl	80001e0 <strlen>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	4413      	add	r3, r2
 8007cca:	4a10      	ldr	r2, [pc, #64]	; (8007d0c <Setfocus_Callback+0x250>)
 8007ccc:	461d      	mov	r5, r3
 8007cce:	4614      	mov	r4, r2
 8007cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007cd2:	6028      	str	r0, [r5, #0]
 8007cd4:	6069      	str	r1, [r5, #4]
 8007cd6:	60aa      	str	r2, [r5, #8]
 8007cd8:	60eb      	str	r3, [r5, #12]
 8007cda:	6820      	ldr	r0, [r4, #0]
 8007cdc:	6128      	str	r0, [r5, #16]
 8007cde:	7923      	ldrb	r3, [r4, #4]
 8007ce0:	752b      	strb	r3, [r5, #20]
 8007ce2:	e003      	b.n	8007cec <Setfocus_Callback+0x230>
		}
	}
    else
	{
	Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 8007ce4:	68f9      	ldr	r1, [r7, #12]
 8007ce6:	68b8      	ldr	r0, [r7, #8]
 8007ce8:	f7ff f8b2 	bl	8006e50 <Print_Command_Err>
	}


    return 0;
 8007cec:	2300      	movs	r3, #0
    }
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3728      	adds	r7, #40	; 0x28
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bdb0      	pop	{r4, r5, r7, pc}
 8007cf6:	bf00      	nop
 8007cf8:	0800d2c4 	.word	0x0800d2c4
 8007cfc:	0800d2c8 	.word	0x0800d2c8
 8007d00:	0800d2cc 	.word	0x0800d2cc
 8007d04:	0800d2d0 	.word	0x0800d2d0
 8007d08:	0800d2d4 	.word	0x0800d2d4
 8007d0c:	0800d2e0 	.word	0x0800d2e0

08007d10 <Getfocus_Callback>:
    };



uint8_t Getfocus_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 8007d10:	b5b0      	push	{r4, r5, r7, lr}
 8007d12:	b08c      	sub	sp, #48	; 0x30
 8007d14:	af02      	add	r7, sp, #8
 8007d16:	60f8      	str	r0, [r7, #12]
 8007d18:	60b9      	str	r1, [r7, #8]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	80fb      	strh	r3, [r7, #6]

    uint8_t  is_command_valid = 1;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t  is_at24_read_ok = 0;
 8007d24:	2300      	movs	r3, #0
 8007d26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    int32_t  lf = 0;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	61fb      	str	r3, [r7, #28]
    int32_t  lfmin = 0;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	61bb      	str	r3, [r7, #24]
    int32_t  lfmax = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	617b      	str	r3, [r7, #20]
    uint8_t  store_index = 0;
 8007d36:	2300      	movs	r3, #0
 8007d38:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t  lense_no = 0;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    uint16_t param_len = 0;
 8007d42:	2300      	movs	r3, #0
 8007d44:	827b      	strh	r3, [r7, #18]
    char*    param_ptr = NULL;
 8007d46:	2300      	movs	r3, #0
 8007d48:	623b      	str	r3, [r7, #32]

    // if params are more than one, command is invalid
    // check for second param
    param_ptr = CLI_Get_Parameter(cli_rx_command, 2, &param_len);
 8007d4a:	f107 0312 	add.w	r3, r7, #18
 8007d4e:	461a      	mov	r2, r3
 8007d50:	2102      	movs	r1, #2
 8007d52:	68f8      	ldr	r0, [r7, #12]
 8007d54:	f000 fd9c 	bl	8008890 <CLI_Get_Parameter>
 8007d58:	6238      	str	r0, [r7, #32]

    if (param_ptr == NULL)
 8007d5a:	6a3b      	ldr	r3, [r7, #32]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d14e      	bne.n	8007dfe <Getfocus_Callback+0xee>
	{
	//get first param
	param_ptr = CLI_Get_Parameter(cli_rx_command, 1, &param_len);
 8007d60:	f107 0312 	add.w	r3, r7, #18
 8007d64:	461a      	mov	r2, r3
 8007d66:	2101      	movs	r1, #1
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f000 fd91 	bl	8008890 <CLI_Get_Parameter>
 8007d6e:	6238      	str	r0, [r7, #32]

	if(param_len == 2)
 8007d70:	8a7b      	ldrh	r3, [r7, #18]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d13f      	bne.n	8007df6 <Getfocus_Callback+0xe6>
	    {
	    if(strncmp(param_ptr,"l1",2) == 0)
 8007d76:	2202      	movs	r2, #2
 8007d78:	4959      	ldr	r1, [pc, #356]	; (8007ee0 <Getfocus_Callback+0x1d0>)
 8007d7a:	6a38      	ldr	r0, [r7, #32]
 8007d7c:	f001 ff02 	bl	8009b84 <strncmp>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d106      	bne.n	8007d94 <Getfocus_Callback+0x84>
		{
		store_index = 0;
 8007d86:	2300      	movs	r3, #0
 8007d88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		lense_no = 1;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007d92:	e037      	b.n	8007e04 <Getfocus_Callback+0xf4>
		}
	    else if(strncmp(param_ptr,"l2",2) == 0)
 8007d94:	2202      	movs	r2, #2
 8007d96:	4953      	ldr	r1, [pc, #332]	; (8007ee4 <Getfocus_Callback+0x1d4>)
 8007d98:	6a38      	ldr	r0, [r7, #32]
 8007d9a:	f001 fef3 	bl	8009b84 <strncmp>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d106      	bne.n	8007db2 <Getfocus_Callback+0xa2>
		{
		store_index = 3;
 8007da4:	2303      	movs	r3, #3
 8007da6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		lense_no = 2;
 8007daa:	2302      	movs	r3, #2
 8007dac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007db0:	e028      	b.n	8007e04 <Getfocus_Callback+0xf4>
		}
	    else if(strncmp(param_ptr,"l3",2) == 0)
 8007db2:	2202      	movs	r2, #2
 8007db4:	494c      	ldr	r1, [pc, #304]	; (8007ee8 <Getfocus_Callback+0x1d8>)
 8007db6:	6a38      	ldr	r0, [r7, #32]
 8007db8:	f001 fee4 	bl	8009b84 <strncmp>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d106      	bne.n	8007dd0 <Getfocus_Callback+0xc0>
		{
		store_index = 6;
 8007dc2:	2306      	movs	r3, #6
 8007dc4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		lense_no = 3;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007dce:	e019      	b.n	8007e04 <Getfocus_Callback+0xf4>
		}
	    else if(strncmp(param_ptr,"l4",2) == 0)
 8007dd0:	2202      	movs	r2, #2
 8007dd2:	4946      	ldr	r1, [pc, #280]	; (8007eec <Getfocus_Callback+0x1dc>)
 8007dd4:	6a38      	ldr	r0, [r7, #32]
 8007dd6:	f001 fed5 	bl	8009b84 <strncmp>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d106      	bne.n	8007dee <Getfocus_Callback+0xde>
		{
		store_index = 9;
 8007de0:	2309      	movs	r3, #9
 8007de2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		lense_no = 4;
 8007de6:	2304      	movs	r3, #4
 8007de8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8007dec:	e00a      	b.n	8007e04 <Getfocus_Callback+0xf4>
		}
	    else
		{
		is_command_valid = 0;
 8007dee:	2300      	movs	r3, #0
 8007df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007df4:	e006      	b.n	8007e04 <Getfocus_Callback+0xf4>
		}
	    }
	else
	    {
	    is_command_valid = 0;
 8007df6:	2300      	movs	r3, #0
 8007df8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007dfc:	e002      	b.n	8007e04 <Getfocus_Callback+0xf4>
	    }
	}
    else
	{
	is_command_valid = 0;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}



    if (is_command_valid)
 8007e04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d05f      	beq.n	8007ecc <Getfocus_Callback+0x1bc>
	{
	Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 8007e0c:	68f9      	ldr	r1, [r7, #12]
 8007e0e:	68b8      	ldr	r0, [r7, #8]
 8007e10:	f7fe ffee 	bl	8006df0 <Print_Command_Ok>

	is_at24_read_ok  = Get_From_AT24((store_index+0)*AT24CXX_PAGE_SIZE, &lf);
 8007e14:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e18:	00db      	lsls	r3, r3, #3
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	f107 021c 	add.w	r2, r7, #28
 8007e20:	4611      	mov	r1, r2
 8007e22:	4618      	mov	r0, r3
 8007e24:	f7fe ffae 	bl	8006d84 <Get_From_AT24>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	is_at24_read_ok += Get_From_AT24((store_index+1)*AT24CXX_PAGE_SIZE, &lfmin);
 8007e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e32:	3301      	adds	r3, #1
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	00db      	lsls	r3, r3, #3
 8007e38:	b2db      	uxtb	r3, r3
 8007e3a:	f107 0218 	add.w	r2, r7, #24
 8007e3e:	4611      	mov	r1, r2
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fe ff9f 	bl	8006d84 <Get_From_AT24>
 8007e46:	4603      	mov	r3, r0
 8007e48:	461a      	mov	r2, r3
 8007e4a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e4e:	4413      	add	r3, r2
 8007e50:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	is_at24_read_ok += Get_From_AT24((store_index+2)*AT24CXX_PAGE_SIZE, &lfmax);
 8007e54:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e58:	3302      	adds	r3, #2
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	00db      	lsls	r3, r3, #3
 8007e5e:	b2db      	uxtb	r3, r3
 8007e60:	f107 0214 	add.w	r2, r7, #20
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe ff8c 	bl	8006d84 <Get_From_AT24>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	461a      	mov	r2, r3
 8007e70:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e74:	4413      	add	r3, r2
 8007e76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	if(is_at24_read_ok == 3)
 8007e7a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007e7e:	2b03      	cmp	r3, #3
 8007e80:	d112      	bne.n	8007ea8 <Getfocus_Callback+0x198>
	    {
	    sprintf(cli_tx_out_buffer + strlen(cli_tx_out_buffer), "l%i %i %i %i\r\nDone\r\n",lense_no,(int)lf,(int)lfmin,(int)lfmax);
 8007e82:	68b8      	ldr	r0, [r7, #8]
 8007e84:	f7f8 f9ac 	bl	80001e0 <strlen>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	1898      	adds	r0, r3, r2
 8007e8e:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8007e92:	69fc      	ldr	r4, [r7, #28]
 8007e94:	69bb      	ldr	r3, [r7, #24]
 8007e96:	697a      	ldr	r2, [r7, #20]
 8007e98:	9201      	str	r2, [sp, #4]
 8007e9a:	9300      	str	r3, [sp, #0]
 8007e9c:	4623      	mov	r3, r4
 8007e9e:	460a      	mov	r2, r1
 8007ea0:	4913      	ldr	r1, [pc, #76]	; (8007ef0 <Getfocus_Callback+0x1e0>)
 8007ea2:	f001 fe37 	bl	8009b14 <sprintf>
 8007ea6:	e015      	b.n	8007ed4 <Getfocus_Callback+0x1c4>
	    }
	else
	    {
	    strncat(cli_tx_out_buffer, "AT24C Read Failed\r\n", 50);
 8007ea8:	68b8      	ldr	r0, [r7, #8]
 8007eaa:	f7f8 f999 	bl	80001e0 <strlen>
 8007eae:	4603      	mov	r3, r0
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	4a0f      	ldr	r2, [pc, #60]	; (8007ef4 <Getfocus_Callback+0x1e4>)
 8007eb8:	461d      	mov	r5, r3
 8007eba:	4614      	mov	r4, r2
 8007ebc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007ebe:	6028      	str	r0, [r5, #0]
 8007ec0:	6069      	str	r1, [r5, #4]
 8007ec2:	60aa      	str	r2, [r5, #8]
 8007ec4:	60eb      	str	r3, [r5, #12]
 8007ec6:	6820      	ldr	r0, [r4, #0]
 8007ec8:	6128      	str	r0, [r5, #16]
 8007eca:	e003      	b.n	8007ed4 <Getfocus_Callback+0x1c4>
	    }
	}
    else
	{
	Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 8007ecc:	68f9      	ldr	r1, [r7, #12]
 8007ece:	68b8      	ldr	r0, [r7, #8]
 8007ed0:	f7fe ffbe 	bl	8006e50 <Print_Command_Err>
	}

    return 0;// operation complete do not call again
 8007ed4:	2300      	movs	r3, #0

    }
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3728      	adds	r7, #40	; 0x28
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bdb0      	pop	{r4, r5, r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	0800d2c4 	.word	0x0800d2c4
 8007ee4:	0800d2c8 	.word	0x0800d2c8
 8007ee8:	0800d2cc 	.word	0x0800d2cc
 8007eec:	0800d2d0 	.word	0x0800d2d0
 8007ef0:	0800d334 	.word	0x0800d334
 8007ef4:	0800d34c 	.word	0x0800d34c

08007ef8 <Setlense_Callback>:




uint8_t Setlense_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 8007ef8:	b480      	push	{r7}
 8007efa:	b085      	sub	sp, #20
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	4613      	mov	r3, r2
 8007f04:	80fb      	strh	r3, [r7, #6]

    return 0;// operation complete do not call again
 8007f06:	2300      	movs	r3, #0

    }
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <Getlense_Callback>:




uint8_t Getlense_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	4613      	mov	r3, r2
 8007f20:	80fb      	strh	r3, [r7, #6]

    return 0;// operation complete do not call again
 8007f22:	2300      	movs	r3, #0

    }
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <CLI_Add_All_Commands>:
/*************************************************************************/



void CLI_Add_All_Commands()
    {
 8007f30:	b580      	push	{r7, lr}
 8007f32:	af00      	add	r7, sp, #0

    CLI_Add_Cammand(&Move_Defination);
 8007f34:	4812      	ldr	r0, [pc, #72]	; (8007f80 <CLI_Add_All_Commands+0x50>)
 8007f36:	f000 fc19 	bl	800876c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Speed_Defination);
 8007f3a:	4812      	ldr	r0, [pc, #72]	; (8007f84 <CLI_Add_All_Commands+0x54>)
 8007f3c:	f000 fc16 	bl	800876c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Run_Defination);
 8007f40:	4811      	ldr	r0, [pc, #68]	; (8007f88 <CLI_Add_All_Commands+0x58>)
 8007f42:	f000 fc13 	bl	800876c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Home_Defination);
 8007f46:	4811      	ldr	r0, [pc, #68]	; (8007f8c <CLI_Add_All_Commands+0x5c>)
 8007f48:	f000 fc10 	bl	800876c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Auto_Defination);
 8007f4c:	4810      	ldr	r0, [pc, #64]	; (8007f90 <CLI_Add_All_Commands+0x60>)
 8007f4e:	f000 fc0d 	bl	800876c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Manual_Defination);
 8007f52:	4810      	ldr	r0, [pc, #64]	; (8007f94 <CLI_Add_All_Commands+0x64>)
 8007f54:	f000 fc0a 	bl	800876c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Getpos_Defination);
 8007f58:	480f      	ldr	r0, [pc, #60]	; (8007f98 <CLI_Add_All_Commands+0x68>)
 8007f5a:	f000 fc07 	bl	800876c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Goto_Defination);
 8007f5e:	480f      	ldr	r0, [pc, #60]	; (8007f9c <CLI_Add_All_Commands+0x6c>)
 8007f60:	f000 fc04 	bl	800876c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Setfocus_Defination);
 8007f64:	480e      	ldr	r0, [pc, #56]	; (8007fa0 <CLI_Add_All_Commands+0x70>)
 8007f66:	f000 fc01 	bl	800876c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Getfocus_Defination);
 8007f6a:	480e      	ldr	r0, [pc, #56]	; (8007fa4 <CLI_Add_All_Commands+0x74>)
 8007f6c:	f000 fbfe 	bl	800876c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Setlense_Defination);
 8007f70:	480d      	ldr	r0, [pc, #52]	; (8007fa8 <CLI_Add_All_Commands+0x78>)
 8007f72:	f000 fbfb 	bl	800876c <CLI_Add_Cammand>
    CLI_Add_Cammand(&Getlense_Defination);
 8007f76:	480d      	ldr	r0, [pc, #52]	; (8007fac <CLI_Add_All_Commands+0x7c>)
 8007f78:	f000 fbf8 	bl	800876c <CLI_Add_Cammand>

    }
 8007f7c:	bf00      	nop
 8007f7e:	bd80      	pop	{r7, pc}
 8007f80:	200000a0 	.word	0x200000a0
 8007f84:	200000c0 	.word	0x200000c0
 8007f88:	200000d0 	.word	0x200000d0
 8007f8c:	200000e0 	.word	0x200000e0
 8007f90:	200000f0 	.word	0x200000f0
 8007f94:	20000100 	.word	0x20000100
 8007f98:	20000110 	.word	0x20000110
 8007f9c:	200000b0 	.word	0x200000b0
 8007fa0:	20000120 	.word	0x20000120
 8007fa4:	20000130 	.word	0x20000130
 8007fa8:	20000140 	.word	0x20000140
 8007fac:	20000150 	.word	0x20000150

08007fb0 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
    {
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b084      	sub	sp, #16
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin == L6470_Flag_INT_Pin)
 8007fba:	88fb      	ldrh	r3, [r7, #6]
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d178      	bne.n	80080b2 <HAL_GPIO_EXTI_Callback+0x102>
	{

	uint16_t status_register_x = L6470_GetStatus(X_AXIS_INDEX);
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	f7fe f90f 	bl	80061e4 <L6470_GetStatus>
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	81fb      	strh	r3, [r7, #14]
	uint16_t status_register_y = L6470_GetStatus(Y_AXIS_INDEX);
 8007fca:	2001      	movs	r0, #1
 8007fcc:	f7fe f90a 	bl	80061e4 <L6470_GetStatus>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	81bb      	strh	r3, [r7, #12]
	uint16_t status_register_z = L6470_GetStatus(Z_AXIS_INDEX);
 8007fd4:	2002      	movs	r0, #2
 8007fd6:	f7fe f905 	bl	80061e4 <L6470_GetStatus>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	817b      	strh	r3, [r7, #10]
	uint16_t status_register_m = L6470_GetStatus(M_AXIS_INDEX);
 8007fde:	2003      	movs	r0, #3
 8007fe0:	f7fe f900 	bl	80061e4 <L6470_GetStatus>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	813b      	strh	r3, [r7, #8]

	if ((status_register_x & STATUS_STEP_LOSS_A) == 0
 8007fe8:	89fb      	ldrh	r3, [r7, #14]
 8007fea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d004      	beq.n	8007ffc <HAL_GPIO_EXTI_Callback+0x4c>
		|| (status_register_x & STATUS_STEP_LOSS_B) == 0)
 8007ff2:	89fb      	ldrh	r3, [r7, #14]
 8007ff4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d102      	bne.n	8008002 <HAL_GPIO_EXTI_Callback+0x52>
	    {
	    L6470_HardStop(X_AXIS_INDEX);
 8007ffc:	2000      	movs	r0, #0
 8007ffe:	f7fe f88b 	bl	8006118 <L6470_HardStop>
	    }
	if ((status_register_y & STATUS_STEP_LOSS_A) == 0
 8008002:	89bb      	ldrh	r3, [r7, #12]
 8008004:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008008:	2b00      	cmp	r3, #0
 800800a:	d004      	beq.n	8008016 <HAL_GPIO_EXTI_Callback+0x66>
		|| (status_register_y & STATUS_STEP_LOSS_B) == 0)
 800800c:	89bb      	ldrh	r3, [r7, #12]
 800800e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008012:	2b00      	cmp	r3, #0
 8008014:	d102      	bne.n	800801c <HAL_GPIO_EXTI_Callback+0x6c>
	    {
	    L6470_HardStop(Y_AXIS_INDEX);
 8008016:	2001      	movs	r0, #1
 8008018:	f7fe f87e 	bl	8006118 <L6470_HardStop>
	    }
	if ((status_register_z & STATUS_STEP_LOSS_A) == 0
 800801c:	897b      	ldrh	r3, [r7, #10]
 800801e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d004      	beq.n	8008030 <HAL_GPIO_EXTI_Callback+0x80>
		|| (status_register_z & STATUS_STEP_LOSS_B) == 0)
 8008026:	897b      	ldrh	r3, [r7, #10]
 8008028:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800802c:	2b00      	cmp	r3, #0
 800802e:	d102      	bne.n	8008036 <HAL_GPIO_EXTI_Callback+0x86>
	    {
	    L6470_HardStop(Z_AXIS_INDEX);
 8008030:	2002      	movs	r0, #2
 8008032:	f7fe f871 	bl	8006118 <L6470_HardStop>
	    }
	if ((status_register_m & STATUS_STEP_LOSS_A) == 0
 8008036:	893b      	ldrh	r3, [r7, #8]
 8008038:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800803c:	2b00      	cmp	r3, #0
 800803e:	d004      	beq.n	800804a <HAL_GPIO_EXTI_Callback+0x9a>
		|| (status_register_m & STATUS_STEP_LOSS_B) == 0)
 8008040:	893b      	ldrh	r3, [r7, #8]
 8008042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008046:	2b00      	cmp	r3, #0
 8008048:	d102      	bne.n	8008050 <HAL_GPIO_EXTI_Callback+0xa0>
	    {
	    L6470_HardStop(M_AXIS_INDEX);
 800804a:	2003      	movs	r0, #3
 800804c:	f7fe f864 	bl	8006118 <L6470_HardStop>
	    }

	if (status_register_x & STATUS_SW_EVN)
 8008050:	89fb      	ldrh	r3, [r7, #14]
 8008052:	f003 0308 	and.w	r3, r3, #8
 8008056:	2b00      	cmp	r3, #0
 8008058:	d007      	beq.n	800806a <HAL_GPIO_EXTI_Callback+0xba>
	    {
	    L6470_HardStop(X_AXIS_INDEX);
 800805a:	2000      	movs	r0, #0
 800805c:	f7fe f85c 	bl	8006118 <L6470_HardStop>
	    L6470_ReleaseSW(X_AXIS_INDEX, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 8008060:	2201      	movs	r2, #1
 8008062:	2100      	movs	r1, #0
 8008064:	2000      	movs	r0, #0
 8008066:	f7fd ff87 	bl	8005f78 <L6470_ReleaseSW>
	    }
	if (status_register_y & STATUS_SW_EVN)
 800806a:	89bb      	ldrh	r3, [r7, #12]
 800806c:	f003 0308 	and.w	r3, r3, #8
 8008070:	2b00      	cmp	r3, #0
 8008072:	d007      	beq.n	8008084 <HAL_GPIO_EXTI_Callback+0xd4>
	    {
	    L6470_HardStop(Y_AXIS_INDEX);
 8008074:	2001      	movs	r0, #1
 8008076:	f7fe f84f 	bl	8006118 <L6470_HardStop>
	    L6470_ReleaseSW(Y_AXIS_INDEX, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 800807a:	2201      	movs	r2, #1
 800807c:	2100      	movs	r1, #0
 800807e:	2001      	movs	r0, #1
 8008080:	f7fd ff7a 	bl	8005f78 <L6470_ReleaseSW>
	    }
	if (status_register_z & STATUS_SW_EVN)
 8008084:	897b      	ldrh	r3, [r7, #10]
 8008086:	f003 0308 	and.w	r3, r3, #8
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <HAL_GPIO_EXTI_Callback+0xee>
	    {
	    L6470_HardStop(Z_AXIS_INDEX);
 800808e:	2002      	movs	r0, #2
 8008090:	f7fe f842 	bl	8006118 <L6470_HardStop>
	    L6470_ReleaseSW(Z_AXIS_INDEX, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 8008094:	2201      	movs	r2, #1
 8008096:	2100      	movs	r1, #0
 8008098:	2002      	movs	r0, #2
 800809a:	f7fd ff6d 	bl	8005f78 <L6470_ReleaseSW>
	    }
	if (status_register_m & STATUS_SW_EVN)
 800809e:	893b      	ldrh	r3, [r7, #8]
 80080a0:	f003 0308 	and.w	r3, r3, #8
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d004      	beq.n	80080b2 <HAL_GPIO_EXTI_Callback+0x102>
	    {
	    L6470_ReleaseSW(M_AXIS_INDEX, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 80080a8:	2201      	movs	r2, #1
 80080aa:	2100      	movs	r1, #0
 80080ac:	2003      	movs	r0, #3
 80080ae:	f7fd ff63 	bl	8005f78 <L6470_ReleaseSW>
	    }
	}



    if (GPIO_Pin == L6470_BUSY_SYNC_INT_Pin)
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d109      	bne.n	80080cc <HAL_GPIO_EXTI_Callback+0x11c>
	{
	if (Cammand_Executing_Flag)
 80080b8:	4b06      	ldr	r3, [pc, #24]	; (80080d4 <HAL_GPIO_EXTI_Callback+0x124>)
 80080ba:	781b      	ldrb	r3, [r3, #0]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d005      	beq.n	80080cc <HAL_GPIO_EXTI_Callback+0x11c>
	{
	Cammand_Executing_Flag = 0;
 80080c0:	4b04      	ldr	r3, [pc, #16]	; (80080d4 <HAL_GPIO_EXTI_Callback+0x124>)
 80080c2:	2200      	movs	r2, #0
 80080c4:	701a      	strb	r2, [r3, #0]
	CLI_UART_Send_String("\r\nDone\r\n\r\n->");
 80080c6:	4804      	ldr	r0, [pc, #16]	; (80080d8 <HAL_GPIO_EXTI_Callback+0x128>)
 80080c8:	f000 f836 	bl	8008138 <CLI_UART_Send_String>
	}
	}

    }
 80080cc:	bf00      	nop
 80080ce:	3710      	adds	r7, #16
 80080d0:	46bd      	mov	sp, r7
 80080d2:	bd80      	pop	{r7, pc}
 80080d4:	20000825 	.word	0x20000825
 80080d8:	0800d3f8 	.word	0x0800d3f8

080080dc <CLI_UART_Init>:

extern UART_HandleTypeDef huart2;
UART_HandleTypeDef* CLI_UART = &huart2;

void CLI_UART_Init()
    {
 80080dc:	b580      	push	{r7, lr}
 80080de:	af00      	add	r7, sp, #0
    CLI_Add_Help_Cammand();
 80080e0:	f000 fc6a 	bl	80089b8 <CLI_Add_Help_Cammand>
    Ring_Buffer_Init(CLI_UART);
 80080e4:	4b04      	ldr	r3, [pc, #16]	; (80080f8 <CLI_UART_Init+0x1c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4618      	mov	r0, r3
 80080ea:	f001 f847 	bl	800917c <Ring_Buffer_Init>
    CLI_UART_Send_String("\n->");
 80080ee:	4803      	ldr	r0, [pc, #12]	; (80080fc <CLI_UART_Init+0x20>)
 80080f0:	f000 f822 	bl	8008138 <CLI_UART_Send_String>
    }
 80080f4:	bf00      	nop
 80080f6:	bd80      	pop	{r7, pc}
 80080f8:	20000160 	.word	0x20000160
 80080fc:	0800d408 	.word	0x0800d408

08008100 <CLI_UART_Send_Char>:

void CLI_UART_Send_Char(char data)
    {
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	4603      	mov	r3, r0
 8008108:	71fb      	strb	r3, [r7, #7]
    CLI_UART->Instance->DR = (data);
 800810a:	4b0a      	ldr	r3, [pc, #40]	; (8008134 <CLI_UART_Send_Char+0x34>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	79fa      	ldrb	r2, [r7, #7]
 8008112:	605a      	str	r2, [r3, #4]
    while (__HAL_UART_GET_FLAG(CLI_UART,UART_FLAG_TC) == 0);
 8008114:	bf00      	nop
 8008116:	4b07      	ldr	r3, [pc, #28]	; (8008134 <CLI_UART_Send_Char+0x34>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008122:	2b40      	cmp	r3, #64	; 0x40
 8008124:	d1f7      	bne.n	8008116 <CLI_UART_Send_Char+0x16>
    }
 8008126:	bf00      	nop
 8008128:	370c      	adds	r7, #12
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	20000160 	.word	0x20000160

08008138 <CLI_UART_Send_String>:

void CLI_UART_Send_String(char* data)
    {
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
    uint16_t count = 0;
 8008140:	2300      	movs	r3, #0
 8008142:	81fb      	strh	r3, [r7, #14]
    while (*data)
 8008144:	e00c      	b.n	8008160 <CLI_UART_Send_String+0x28>
	{
	CLI_UART_Send_Char(*data++);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	1c5a      	adds	r2, r3, #1
 800814a:	607a      	str	r2, [r7, #4]
 800814c:	781b      	ldrb	r3, [r3, #0]
 800814e:	4618      	mov	r0, r3
 8008150:	f7ff ffd6 	bl	8008100 <CLI_UART_Send_Char>
	count++;
 8008154:	89fb      	ldrh	r3, [r7, #14]
 8008156:	3301      	adds	r3, #1
 8008158:	81fb      	strh	r3, [r7, #14]
	if (count == OUTPUT_BUFFER_SIZE)
 800815a:	89fb      	ldrh	r3, [r7, #14]
 800815c:	2b64      	cmp	r3, #100	; 0x64
 800815e:	d004      	beq.n	800816a <CLI_UART_Send_String+0x32>
    while (*data)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d1ee      	bne.n	8008146 <CLI_UART_Send_String+0xe>
	    {
	    break;
	    }
	}
    }
 8008168:	e000      	b.n	800816c <CLI_UART_Send_String+0x34>
	    break;
 800816a:	bf00      	nop
    }
 800816c:	bf00      	nop
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <CLI_UART_Loop>:

void CLI_UART_Loop()
    {
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0

    static uint8_t rx_char_count;
    uint8_t rx_char;
    uint8_t call_again;

    while (Ring_Buffer_Get_Count())
 800817a:	e05d      	b.n	8008238 <CLI_UART_Loop+0xc4>
	{

	Ring_Buffer_Get_Char(&rx_char);
 800817c:	1dbb      	adds	r3, r7, #6
 800817e:	4618      	mov	r0, r3
 8008180:	f001 f81e 	bl	80091c0 <Ring_Buffer_Get_Char>

	if (rx_char == '\n') // end of command
 8008184:	79bb      	ldrb	r3, [r7, #6]
 8008186:	2b0a      	cmp	r3, #10
 8008188:	d126      	bne.n	80081d8 <CLI_UART_Loop+0x64>
	    {

	    if (rx_char_count) // new command received
 800818a:	4b30      	ldr	r3, [pc, #192]	; (800824c <CLI_UART_Loop+0xd8>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00c      	beq.n	80081ac <CLI_UART_Loop+0x38>
		{
		strncpy(CLI_CMD_Buffer, CLI_Input_Buffer, INPUT_BUFFER_SIZE); // copy command
 8008192:	2264      	movs	r2, #100	; 0x64
 8008194:	492e      	ldr	r1, [pc, #184]	; (8008250 <CLI_UART_Loop+0xdc>)
 8008196:	482f      	ldr	r0, [pc, #188]	; (8008254 <CLI_UART_Loop+0xe0>)
 8008198:	f001 fd06 	bl	8009ba8 <strncpy>
		memset(CLI_Input_Buffer, 0x00, INPUT_BUFFER_SIZE); //reset input buffer
 800819c:	2264      	movs	r2, #100	; 0x64
 800819e:	2100      	movs	r1, #0
 80081a0:	482b      	ldr	r0, [pc, #172]	; (8008250 <CLI_UART_Loop+0xdc>)
 80081a2:	f001 fcaf 	bl	8009b04 <memset>
		rx_char_count = 0;
 80081a6:	4b29      	ldr	r3, [pc, #164]	; (800824c <CLI_UART_Loop+0xd8>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	701a      	strb	r2, [r3, #0]
		}

	    do
		{
		memset(CLI_Output_Buffer, 0x00, OUTPUT_BUFFER_SIZE); //reset output buffer
 80081ac:	2264      	movs	r2, #100	; 0x64
 80081ae:	2100      	movs	r1, #0
 80081b0:	4829      	ldr	r0, [pc, #164]	; (8008258 <CLI_UART_Loop+0xe4>)
 80081b2:	f001 fca7 	bl	8009b04 <memset>
		call_again = CLI_Process_Cammand(CLI_CMD_Buffer, CLI_Output_Buffer, OUTPUT_BUFFER_SIZE);
 80081b6:	2264      	movs	r2, #100	; 0x64
 80081b8:	4927      	ldr	r1, [pc, #156]	; (8008258 <CLI_UART_Loop+0xe4>)
 80081ba:	4826      	ldr	r0, [pc, #152]	; (8008254 <CLI_UART_Loop+0xe0>)
 80081bc:	f000 fb00 	bl	80087c0 <CLI_Process_Cammand>
 80081c0:	4603      	mov	r3, r0
 80081c2:	71fb      	strb	r3, [r7, #7]
		CLI_UART_Send_String(CLI_Output_Buffer);
 80081c4:	4824      	ldr	r0, [pc, #144]	; (8008258 <CLI_UART_Loop+0xe4>)
 80081c6:	f7ff ffb7 	bl	8008138 <CLI_UART_Send_String>
		}
	    while(call_again);
 80081ca:	79fb      	ldrb	r3, [r7, #7]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d1ed      	bne.n	80081ac <CLI_UART_Loop+0x38>

	    CLI_UART_Send_String("\n->");
 80081d0:	4822      	ldr	r0, [pc, #136]	; (800825c <CLI_UART_Loop+0xe8>)
 80081d2:	f7ff ffb1 	bl	8008138 <CLI_UART_Send_String>
 80081d6:	e02f      	b.n	8008238 <CLI_UART_Loop+0xc4>

	    }
	else
	    {

	    if (rx_char == '\r')
 80081d8:	79bb      	ldrb	r3, [r7, #6]
 80081da:	2b0d      	cmp	r3, #13
 80081dc:	d02c      	beq.n	8008238 <CLI_UART_Loop+0xc4>
		{
		/* Ignore the character. */
		}
	    else if ((rx_char == '\b') || (rx_char == 0x7F)) // backspace or delete
 80081de:	79bb      	ldrb	r3, [r7, #6]
 80081e0:	2b08      	cmp	r3, #8
 80081e2:	d002      	beq.n	80081ea <CLI_UART_Loop+0x76>
 80081e4:	79bb      	ldrb	r3, [r7, #6]
 80081e6:	2b7f      	cmp	r3, #127	; 0x7f
 80081e8:	d110      	bne.n	800820c <CLI_UART_Loop+0x98>
		{
		/* Backspace was pressed.  Erase the last character in the
		 string - if any. */
		if (rx_char_count > 0)
 80081ea:	4b18      	ldr	r3, [pc, #96]	; (800824c <CLI_UART_Loop+0xd8>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d022      	beq.n	8008238 <CLI_UART_Loop+0xc4>
		    {
		    rx_char_count--;
 80081f2:	4b16      	ldr	r3, [pc, #88]	; (800824c <CLI_UART_Loop+0xd8>)
 80081f4:	781b      	ldrb	r3, [r3, #0]
 80081f6:	3b01      	subs	r3, #1
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	4b14      	ldr	r3, [pc, #80]	; (800824c <CLI_UART_Loop+0xd8>)
 80081fc:	701a      	strb	r2, [r3, #0]
		    CLI_Input_Buffer[rx_char_count] = '\0';
 80081fe:	4b13      	ldr	r3, [pc, #76]	; (800824c <CLI_UART_Loop+0xd8>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	461a      	mov	r2, r3
 8008204:	4b12      	ldr	r3, [pc, #72]	; (8008250 <CLI_UART_Loop+0xdc>)
 8008206:	2100      	movs	r1, #0
 8008208:	5499      	strb	r1, [r3, r2]
		if (rx_char_count > 0)
 800820a:	e015      	b.n	8008238 <CLI_UART_Loop+0xc4>
		    }
		}
	    else
		{
		// accumulate characters in input buffer
		if ((rx_char >= ' ') && (rx_char <= '~'))
 800820c:	79bb      	ldrb	r3, [r7, #6]
 800820e:	2b1f      	cmp	r3, #31
 8008210:	d912      	bls.n	8008238 <CLI_UART_Loop+0xc4>
 8008212:	79bb      	ldrb	r3, [r7, #6]
 8008214:	2b7e      	cmp	r3, #126	; 0x7e
 8008216:	d80f      	bhi.n	8008238 <CLI_UART_Loop+0xc4>
		    {
		    if (rx_char_count < INPUT_BUFFER_SIZE)
 8008218:	4b0c      	ldr	r3, [pc, #48]	; (800824c <CLI_UART_Loop+0xd8>)
 800821a:	781b      	ldrb	r3, [r3, #0]
 800821c:	2b63      	cmp	r3, #99	; 0x63
 800821e:	d80b      	bhi.n	8008238 <CLI_UART_Loop+0xc4>
			{
			CLI_Input_Buffer[rx_char_count] = rx_char;
 8008220:	4b0a      	ldr	r3, [pc, #40]	; (800824c <CLI_UART_Loop+0xd8>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	461a      	mov	r2, r3
 8008226:	79b9      	ldrb	r1, [r7, #6]
 8008228:	4b09      	ldr	r3, [pc, #36]	; (8008250 <CLI_UART_Loop+0xdc>)
 800822a:	5499      	strb	r1, [r3, r2]
			rx_char_count++;
 800822c:	4b07      	ldr	r3, [pc, #28]	; (800824c <CLI_UART_Loop+0xd8>)
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	3301      	adds	r3, #1
 8008232:	b2da      	uxtb	r2, r3
 8008234:	4b05      	ldr	r3, [pc, #20]	; (800824c <CLI_UART_Loop+0xd8>)
 8008236:	701a      	strb	r2, [r3, #0]
    while (Ring_Buffer_Get_Count())
 8008238:	f000 fff2 	bl	8009220 <Ring_Buffer_Get_Count>
 800823c:	4603      	mov	r3, r0
 800823e:	2b00      	cmp	r3, #0
 8008240:	d19c      	bne.n	800817c <CLI_UART_Loop+0x8>
			}
		    }
		}
	    }
	}
    }
 8008242:	bf00      	nop
 8008244:	3708      	adds	r7, #8
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	20000954 	.word	0x20000954
 8008250:	2000088c 	.word	0x2000088c
 8008254:	200008f0 	.word	0x200008f0
 8008258:	20000828 	.word	0x20000828
 800825c:	0800d408 	.word	0x0800d408

08008260 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8008260:	b580      	push	{r7, lr}
 8008262:	b082      	sub	sp, #8
 8008264:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8008266:	2300      	movs	r3, #0
 8008268:	607b      	str	r3, [r7, #4]
 800826a:	4a0c      	ldr	r2, [pc, #48]	; (800829c <MX_DMA_Init+0x3c>)
 800826c:	4b0b      	ldr	r3, [pc, #44]	; (800829c <MX_DMA_Init+0x3c>)
 800826e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008270:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008274:	6313      	str	r3, [r2, #48]	; 0x30
 8008276:	4b09      	ldr	r3, [pc, #36]	; (800829c <MX_DMA_Init+0x3c>)
 8008278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800827a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800827e:	607b      	str	r3, [r7, #4]
 8008280:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8008282:	2200      	movs	r2, #0
 8008284:	2100      	movs	r1, #0
 8008286:	2010      	movs	r0, #16
 8008288:	f7f8 ff9c 	bl	80011c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800828c:	2010      	movs	r0, #16
 800828e:	f7f8 ffc5 	bl	800121c <HAL_NVIC_EnableIRQ>

}
 8008292:	bf00      	nop
 8008294:	3708      	adds	r7, #8
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}
 800829a:	bf00      	nop
 800829c:	40023800 	.word	0x40023800

080082a0 <Encoder_Interface_Config>:

TIM_HandleTypeDef* Encoder_TIM[3] = {&htim1, &htim2, &htim3};


void Encoder_Interface_Config()
    {
 80082a0:	b580      	push	{r7, lr}
 80082a2:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 80082a4:	2100      	movs	r1, #0
 80082a6:	4806      	ldr	r0, [pc, #24]	; (80082c0 <Encoder_Interface_Config+0x20>)
 80082a8:	f7fc f9f8 	bl	800469c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 80082ac:	2100      	movs	r1, #0
 80082ae:	4805      	ldr	r0, [pc, #20]	; (80082c4 <Encoder_Interface_Config+0x24>)
 80082b0:	f7fc f9f4 	bl	800469c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 80082b4:	2100      	movs	r1, #0
 80082b6:	4804      	ldr	r0, [pc, #16]	; (80082c8 <Encoder_Interface_Config+0x28>)
 80082b8:	f7fc f9f0 	bl	800469c <HAL_TIM_Encoder_Start>
    }
 80082bc:	bf00      	nop
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	20000eb8 	.word	0x20000eb8
 80082c4:	20000ef8 	.word	0x20000ef8
 80082c8:	20000e78 	.word	0x20000e78
 80082cc:	00000000 	.word	0x00000000

080082d0 <Encoder_Scan_Helper>:


uint8_t Encoder_Scan_Helper(uint8_t index)

    {
 80082d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	4603      	mov	r3, r0
 80082d8:	71fb      	strb	r3, [r7, #7]

    static uint8_t runnig_flag[3] = {0};

    int16_t encoder_count[3] = {0};
 80082da:	f107 0308 	add.w	r3, r7, #8
 80082de:	2200      	movs	r2, #0
 80082e0:	601a      	str	r2, [r3, #0]
 80082e2:	809a      	strh	r2, [r3, #4]


    uint8_t direction = L6470_DIR_FWD_ID;
 80082e4:	2301      	movs	r3, #1
 80082e6:	75fb      	strb	r3, [r7, #23]
    int32_t speed_val = 0;
 80082e8:	2300      	movs	r3, #0
 80082ea:	613b      	str	r3, [r7, #16]

    uint8_t perform_prepared_action = 0;
 80082ec:	2300      	movs	r3, #0
 80082ee:	75bb      	strb	r3, [r7, #22]

    encoder_count[index] = Encoder_TIM[index]->Instance->CNT;
 80082f0:	79fb      	ldrb	r3, [r7, #7]
 80082f2:	79fa      	ldrb	r2, [r7, #7]
 80082f4:	49ce      	ldr	r1, [pc, #824]	; (8008630 <Encoder_Scan_Helper+0x360>)
 80082f6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80082fa:	6812      	ldr	r2, [r2, #0]
 80082fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80082fe:	b212      	sxth	r2, r2
 8008300:	005b      	lsls	r3, r3, #1
 8008302:	f107 0118 	add.w	r1, r7, #24
 8008306:	440b      	add	r3, r1
 8008308:	f823 2c10 	strh.w	r2, [r3, #-16]

    if (encoder_count[index])
 800830c:	79fb      	ldrb	r3, [r7, #7]
 800830e:	005b      	lsls	r3, r3, #1
 8008310:	f107 0218 	add.w	r2, r7, #24
 8008314:	4413      	add	r3, r2
 8008316:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 8160 	beq.w	80085e0 <Encoder_Scan_Helper+0x310>
	{
	perform_prepared_action = 1;
 8008320:	2301      	movs	r3, #1
 8008322:	75bb      	strb	r3, [r7, #22]

	Encoder_TIM[index]->Instance->CNT = 0;
 8008324:	79fb      	ldrb	r3, [r7, #7]
 8008326:	4ac2      	ldr	r2, [pc, #776]	; (8008630 <Encoder_Scan_Helper+0x360>)
 8008328:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	2200      	movs	r2, #0
 8008330:	625a      	str	r2, [r3, #36]	; 0x24

	if (encoder_count[index] > 0)
 8008332:	79fb      	ldrb	r3, [r7, #7]
 8008334:	005b      	lsls	r3, r3, #1
 8008336:	f107 0218 	add.w	r2, r7, #24
 800833a:	4413      	add	r3, r2
 800833c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	f340 8090 	ble.w	8008466 <Encoder_Scan_Helper+0x196>
	    {
	    direction = L6470_DIR_FWD_ID;
 8008346:	2301      	movs	r3, #1
 8008348:	75fb      	strb	r3, [r7, #23]
	    if(Motor_Current_Steps[index] > Motor_MAX_Steps[index] * 0.8)
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	4ab9      	ldr	r2, [pc, #740]	; (8008634 <Encoder_Scan_Helper+0x364>)
 800834e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008352:	4618      	mov	r0, r3
 8008354:	f7f8 f8ee 	bl	8000534 <__aeabi_i2d>
 8008358:	4604      	mov	r4, r0
 800835a:	460d      	mov	r5, r1
 800835c:	79fb      	ldrb	r3, [r7, #7]
 800835e:	4ab6      	ldr	r2, [pc, #728]	; (8008638 <Encoder_Scan_Helper+0x368>)
 8008360:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008364:	4618      	mov	r0, r3
 8008366:	f7f8 f8e5 	bl	8000534 <__aeabi_i2d>
 800836a:	a3a9      	add	r3, pc, #676	; (adr r3, 8008610 <Encoder_Scan_Helper+0x340>)
 800836c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008370:	f7f8 f946 	bl	8000600 <__aeabi_dmul>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	4620      	mov	r0, r4
 800837a:	4629      	mov	r1, r5
 800837c:	f7f8 fbd0 	bl	8000b20 <__aeabi_dcmpgt>
 8008380:	4603      	mov	r3, r0
 8008382:	2b00      	cmp	r3, #0
 8008384:	d036      	beq.n	80083f4 <Encoder_Scan_Helper+0x124>
		{
		encoder_count[index] = encoder_count[index];
 8008386:	79fa      	ldrb	r2, [r7, #7]
 8008388:	79fb      	ldrb	r3, [r7, #7]
 800838a:	005b      	lsls	r3, r3, #1
 800838c:	f107 0118 	add.w	r1, r7, #24
 8008390:	440b      	add	r3, r1
 8008392:	f933 1c10 	ldrsh.w	r1, [r3, #-16]
 8008396:	0053      	lsls	r3, r2, #1
 8008398:	f107 0218 	add.w	r2, r7, #24
 800839c:	4413      	add	r3, r2
 800839e:	460a      	mov	r2, r1
 80083a0:	f823 2c10 	strh.w	r2, [r3, #-16]
		if(Motor_Current_Steps[index] > Motor_MAX_Steps[index]*0.95)
 80083a4:	79fb      	ldrb	r3, [r7, #7]
 80083a6:	4aa3      	ldr	r2, [pc, #652]	; (8008634 <Encoder_Scan_Helper+0x364>)
 80083a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083ac:	4618      	mov	r0, r3
 80083ae:	f7f8 f8c1 	bl	8000534 <__aeabi_i2d>
 80083b2:	4604      	mov	r4, r0
 80083b4:	460d      	mov	r5, r1
 80083b6:	79fb      	ldrb	r3, [r7, #7]
 80083b8:	4a9f      	ldr	r2, [pc, #636]	; (8008638 <Encoder_Scan_Helper+0x368>)
 80083ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083be:	4618      	mov	r0, r3
 80083c0:	f7f8 f8b8 	bl	8000534 <__aeabi_i2d>
 80083c4:	a394      	add	r3, pc, #592	; (adr r3, 8008618 <Encoder_Scan_Helper+0x348>)
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	f7f8 f919 	bl	8000600 <__aeabi_dmul>
 80083ce:	4602      	mov	r2, r0
 80083d0:	460b      	mov	r3, r1
 80083d2:	4620      	mov	r0, r4
 80083d4:	4629      	mov	r1, r5
 80083d6:	f7f8 fba3 	bl	8000b20 <__aeabi_dcmpgt>
 80083da:	4603      	mov	r3, r0
 80083dc:	2b00      	cmp	r3, #0
 80083de:	f000 80e3 	beq.w	80085a8 <Encoder_Scan_Helper+0x2d8>
		    {
		    encoder_count[index] = 0;
 80083e2:	79fb      	ldrb	r3, [r7, #7]
 80083e4:	005b      	lsls	r3, r3, #1
 80083e6:	f107 0218 	add.w	r2, r7, #24
 80083ea:	4413      	add	r3, r2
 80083ec:	2200      	movs	r2, #0
 80083ee:	f823 2c10 	strh.w	r2, [r3, #-16]
 80083f2:	e0d9      	b.n	80085a8 <Encoder_Scan_Helper+0x2d8>
		    }
		}
	    else
		{
		encoder_count[index] = encoder_count[index]* exp(encoder_count[index] / 10);
 80083f4:	79fc      	ldrb	r4, [r7, #7]
 80083f6:	79fb      	ldrb	r3, [r7, #7]
 80083f8:	005b      	lsls	r3, r3, #1
 80083fa:	f107 0218 	add.w	r2, r7, #24
 80083fe:	4413      	add	r3, r2
 8008400:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8008404:	4618      	mov	r0, r3
 8008406:	f7f8 f895 	bl	8000534 <__aeabi_i2d>
 800840a:	4605      	mov	r5, r0
 800840c:	460e      	mov	r6, r1
 800840e:	79fb      	ldrb	r3, [r7, #7]
 8008410:	005b      	lsls	r3, r3, #1
 8008412:	f107 0218 	add.w	r2, r7, #24
 8008416:	4413      	add	r3, r2
 8008418:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800841c:	4a87      	ldr	r2, [pc, #540]	; (800863c <Encoder_Scan_Helper+0x36c>)
 800841e:	fb82 1203 	smull	r1, r2, r2, r3
 8008422:	1092      	asrs	r2, r2, #2
 8008424:	17db      	asrs	r3, r3, #31
 8008426:	1ad3      	subs	r3, r2, r3
 8008428:	b21b      	sxth	r3, r3
 800842a:	4618      	mov	r0, r3
 800842c:	f7f8 f882 	bl	8000534 <__aeabi_i2d>
 8008430:	4602      	mov	r2, r0
 8008432:	460b      	mov	r3, r1
 8008434:	ec43 2b10 	vmov	d0, r2, r3
 8008438:	f004 fb66 	bl	800cb08 <exp>
 800843c:	ec53 2b10 	vmov	r2, r3, d0
 8008440:	4628      	mov	r0, r5
 8008442:	4631      	mov	r1, r6
 8008444:	f7f8 f8dc 	bl	8000600 <__aeabi_dmul>
 8008448:	4602      	mov	r2, r0
 800844a:	460b      	mov	r3, r1
 800844c:	4610      	mov	r0, r2
 800844e:	4619      	mov	r1, r3
 8008450:	f7f8 fb86 	bl	8000b60 <__aeabi_d2iz>
 8008454:	4603      	mov	r3, r0
 8008456:	b21a      	sxth	r2, r3
 8008458:	0063      	lsls	r3, r4, #1
 800845a:	f107 0118 	add.w	r1, r7, #24
 800845e:	440b      	add	r3, r1
 8008460:	f823 2c10 	strh.w	r2, [r3, #-16]
 8008464:	e0a0      	b.n	80085a8 <Encoder_Scan_Helper+0x2d8>
		}
	    }
	else
	    {
	    encoder_count[index] *= -1;
 8008466:	79fa      	ldrb	r2, [r7, #7]
 8008468:	79fb      	ldrb	r3, [r7, #7]
 800846a:	005b      	lsls	r3, r3, #1
 800846c:	f107 0118 	add.w	r1, r7, #24
 8008470:	440b      	add	r3, r1
 8008472:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8008476:	b29b      	uxth	r3, r3
 8008478:	425b      	negs	r3, r3
 800847a:	b29b      	uxth	r3, r3
 800847c:	b219      	sxth	r1, r3
 800847e:	0053      	lsls	r3, r2, #1
 8008480:	f107 0218 	add.w	r2, r7, #24
 8008484:	4413      	add	r3, r2
 8008486:	460a      	mov	r2, r1
 8008488:	f823 2c10 	strh.w	r2, [r3, #-16]
	    direction = L6470_DIR_REV_ID;
 800848c:	2300      	movs	r3, #0
 800848e:	75fb      	strb	r3, [r7, #23]
	    if(Motor_Current_Steps[index] < Motor_MAX_Steps[index] * 0.2)
 8008490:	79fb      	ldrb	r3, [r7, #7]
 8008492:	4a68      	ldr	r2, [pc, #416]	; (8008634 <Encoder_Scan_Helper+0x364>)
 8008494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008498:	4618      	mov	r0, r3
 800849a:	f7f8 f84b 	bl	8000534 <__aeabi_i2d>
 800849e:	4604      	mov	r4, r0
 80084a0:	460d      	mov	r5, r1
 80084a2:	79fb      	ldrb	r3, [r7, #7]
 80084a4:	4a64      	ldr	r2, [pc, #400]	; (8008638 <Encoder_Scan_Helper+0x368>)
 80084a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f7f8 f842 	bl	8000534 <__aeabi_i2d>
 80084b0:	a35b      	add	r3, pc, #364	; (adr r3, 8008620 <Encoder_Scan_Helper+0x350>)
 80084b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b6:	f7f8 f8a3 	bl	8000600 <__aeabi_dmul>
 80084ba:	4602      	mov	r2, r0
 80084bc:	460b      	mov	r3, r1
 80084be:	4620      	mov	r0, r4
 80084c0:	4629      	mov	r1, r5
 80084c2:	f7f8 fb0f 	bl	8000ae4 <__aeabi_dcmplt>
 80084c6:	4603      	mov	r3, r0
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d035      	beq.n	8008538 <Encoder_Scan_Helper+0x268>
		{
		encoder_count[index] = encoder_count[index];
 80084cc:	79fa      	ldrb	r2, [r7, #7]
 80084ce:	79fb      	ldrb	r3, [r7, #7]
 80084d0:	005b      	lsls	r3, r3, #1
 80084d2:	f107 0118 	add.w	r1, r7, #24
 80084d6:	440b      	add	r3, r1
 80084d8:	f933 1c10 	ldrsh.w	r1, [r3, #-16]
 80084dc:	0053      	lsls	r3, r2, #1
 80084de:	f107 0218 	add.w	r2, r7, #24
 80084e2:	4413      	add	r3, r2
 80084e4:	460a      	mov	r2, r1
 80084e6:	f823 2c10 	strh.w	r2, [r3, #-16]
		if(Motor_Current_Steps[index] < Motor_MAX_Steps[index] * 0.05)
 80084ea:	79fb      	ldrb	r3, [r7, #7]
 80084ec:	4a51      	ldr	r2, [pc, #324]	; (8008634 <Encoder_Scan_Helper+0x364>)
 80084ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7f8 f81e 	bl	8000534 <__aeabi_i2d>
 80084f8:	4604      	mov	r4, r0
 80084fa:	460d      	mov	r5, r1
 80084fc:	79fb      	ldrb	r3, [r7, #7]
 80084fe:	4a4e      	ldr	r2, [pc, #312]	; (8008638 <Encoder_Scan_Helper+0x368>)
 8008500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008504:	4618      	mov	r0, r3
 8008506:	f7f8 f815 	bl	8000534 <__aeabi_i2d>
 800850a:	a347      	add	r3, pc, #284	; (adr r3, 8008628 <Encoder_Scan_Helper+0x358>)
 800850c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008510:	f7f8 f876 	bl	8000600 <__aeabi_dmul>
 8008514:	4602      	mov	r2, r0
 8008516:	460b      	mov	r3, r1
 8008518:	4620      	mov	r0, r4
 800851a:	4629      	mov	r1, r5
 800851c:	f7f8 fae2 	bl	8000ae4 <__aeabi_dcmplt>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d040      	beq.n	80085a8 <Encoder_Scan_Helper+0x2d8>
		    {
		    encoder_count[index] = 0;
 8008526:	79fb      	ldrb	r3, [r7, #7]
 8008528:	005b      	lsls	r3, r3, #1
 800852a:	f107 0218 	add.w	r2, r7, #24
 800852e:	4413      	add	r3, r2
 8008530:	2200      	movs	r2, #0
 8008532:	f823 2c10 	strh.w	r2, [r3, #-16]
 8008536:	e037      	b.n	80085a8 <Encoder_Scan_Helper+0x2d8>
		    }
		}
	    else
		{
		encoder_count[index] = encoder_count[index]* exp(encoder_count[index] / 10);
 8008538:	79fc      	ldrb	r4, [r7, #7]
 800853a:	79fb      	ldrb	r3, [r7, #7]
 800853c:	005b      	lsls	r3, r3, #1
 800853e:	f107 0218 	add.w	r2, r7, #24
 8008542:	4413      	add	r3, r2
 8008544:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8008548:	4618      	mov	r0, r3
 800854a:	f7f7 fff3 	bl	8000534 <__aeabi_i2d>
 800854e:	4605      	mov	r5, r0
 8008550:	460e      	mov	r6, r1
 8008552:	79fb      	ldrb	r3, [r7, #7]
 8008554:	005b      	lsls	r3, r3, #1
 8008556:	f107 0218 	add.w	r2, r7, #24
 800855a:	4413      	add	r3, r2
 800855c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8008560:	4a36      	ldr	r2, [pc, #216]	; (800863c <Encoder_Scan_Helper+0x36c>)
 8008562:	fb82 1203 	smull	r1, r2, r2, r3
 8008566:	1092      	asrs	r2, r2, #2
 8008568:	17db      	asrs	r3, r3, #31
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	b21b      	sxth	r3, r3
 800856e:	4618      	mov	r0, r3
 8008570:	f7f7 ffe0 	bl	8000534 <__aeabi_i2d>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	ec43 2b10 	vmov	d0, r2, r3
 800857c:	f004 fac4 	bl	800cb08 <exp>
 8008580:	ec53 2b10 	vmov	r2, r3, d0
 8008584:	4628      	mov	r0, r5
 8008586:	4631      	mov	r1, r6
 8008588:	f7f8 f83a 	bl	8000600 <__aeabi_dmul>
 800858c:	4602      	mov	r2, r0
 800858e:	460b      	mov	r3, r1
 8008590:	4610      	mov	r0, r2
 8008592:	4619      	mov	r1, r3
 8008594:	f7f8 fae4 	bl	8000b60 <__aeabi_d2iz>
 8008598:	4603      	mov	r3, r0
 800859a:	b21a      	sxth	r2, r3
 800859c:	0063      	lsls	r3, r4, #1
 800859e:	f107 0118 	add.w	r1, r7, #24
 80085a2:	440b      	add	r3, r1
 80085a4:	f823 2c10 	strh.w	r2, [r3, #-16]
		}
	    }

	runnig_flag[index] = 1;
 80085a8:	79fb      	ldrb	r3, [r7, #7]
 80085aa:	4a25      	ldr	r2, [pc, #148]	; (8008640 <Encoder_Scan_Helper+0x370>)
 80085ac:	2101      	movs	r1, #1
 80085ae:	54d1      	strb	r1, [r2, r3]
	speed_val = Step_s_2_Speed(encoder_count[index]);
 80085b0:	79fb      	ldrb	r3, [r7, #7]
 80085b2:	005b      	lsls	r3, r3, #1
 80085b4:	f107 0218 	add.w	r2, r7, #24
 80085b8:	4413      	add	r3, r2
 80085ba:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80085be:	ee07 3a90 	vmov	s15, r3
 80085c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80085c6:	eeb0 0a67 	vmov.f32	s0, s15
 80085ca:	f7fd f96d 	bl	80058a8 <Step_s_2_Speed>
 80085ce:	4603      	mov	r3, r0
 80085d0:	613b      	str	r3, [r7, #16]
	L6470_PrepareRun(index, direction, speed_val);
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	7df9      	ldrb	r1, [r7, #23]
 80085d6:	79fb      	ldrb	r3, [r7, #7]
 80085d8:	4618      	mov	r0, r3
 80085da:	f7fd fe61 	bl	80062a0 <L6470_PrepareRun>
 80085de:	e010      	b.n	8008602 <Encoder_Scan_Helper+0x332>

	}
    else if(runnig_flag[index])
 80085e0:	79fb      	ldrb	r3, [r7, #7]
 80085e2:	4a17      	ldr	r2, [pc, #92]	; (8008640 <Encoder_Scan_Helper+0x370>)
 80085e4:	5cd3      	ldrb	r3, [r2, r3]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00b      	beq.n	8008602 <Encoder_Scan_Helper+0x332>
	{
	runnig_flag[index] = 0;
 80085ea:	79fb      	ldrb	r3, [r7, #7]
 80085ec:	4a14      	ldr	r2, [pc, #80]	; (8008640 <Encoder_Scan_Helper+0x370>)
 80085ee:	2100      	movs	r1, #0
 80085f0:	54d1      	strb	r1, [r2, r3]
	perform_prepared_action = 1;
 80085f2:	2301      	movs	r3, #1
 80085f4:	75bb      	strb	r3, [r7, #22]
	L6470_PrepareRun(index, direction, 0);
 80085f6:	7df9      	ldrb	r1, [r7, #23]
 80085f8:	79fb      	ldrb	r3, [r7, #7]
 80085fa:	2200      	movs	r2, #0
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fd fe4f 	bl	80062a0 <L6470_PrepareRun>
	}

    return perform_prepared_action;
 8008602:	7dbb      	ldrb	r3, [r7, #22]
    }
 8008604:	4618      	mov	r0, r3
 8008606:	371c      	adds	r7, #28
 8008608:	46bd      	mov	sp, r7
 800860a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800860c:	f3af 8000 	nop.w
 8008610:	9999999a 	.word	0x9999999a
 8008614:	3fe99999 	.word	0x3fe99999
 8008618:	66666666 	.word	0x66666666
 800861c:	3fee6666 	.word	0x3fee6666
 8008620:	9999999a 	.word	0x9999999a
 8008624:	3fc99999 	.word	0x3fc99999
 8008628:	9999999a 	.word	0x9999999a
 800862c:	3fa99999 	.word	0x3fa99999
 8008630:	20000164 	.word	0x20000164
 8008634:	20000a44 	.word	0x20000a44
 8008638:	20000180 	.word	0x20000180
 800863c:	66666667 	.word	0x66666667
 8008640:	20000958 	.word	0x20000958

08008644 <Encoder_Loop>:

void Encoder_Loop()
    {
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0

    static uint32_t time_stamp = 0;

    uint8_t perform_prepared_action = 0;
 800864a:	2300      	movs	r3, #0
 800864c:	71fb      	strb	r3, [r7, #7]

    if (Control_Mode == 0)
 800864e:	4b43      	ldr	r3, [pc, #268]	; (800875c <Encoder_Loop+0x118>)
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d17e      	bne.n	8008754 <Encoder_Loop+0x110>
	{

	if (HAL_GetTick() - time_stamp > 10)
 8008656:	f7f8 fc99 	bl	8000f8c <HAL_GetTick>
 800865a:	4602      	mov	r2, r0
 800865c:	4b40      	ldr	r3, [pc, #256]	; (8008760 <Encoder_Loop+0x11c>)
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b0a      	cmp	r3, #10
 8008664:	d976      	bls.n	8008754 <Encoder_Loop+0x110>
	    {

	    time_stamp = HAL_GetTick();
 8008666:	f7f8 fc91 	bl	8000f8c <HAL_GetTick>
 800866a:	4602      	mov	r2, r0
 800866c:	4b3c      	ldr	r3, [pc, #240]	; (8008760 <Encoder_Loop+0x11c>)
 800866e:	601a      	str	r2, [r3, #0]

	    L6470_PrepareGetParam(X_AXIS_INDEX, L6470_ABS_POS_ID);
 8008670:	2100      	movs	r1, #0
 8008672:	2000      	movs	r0, #0
 8008674:	f7fd fdfa 	bl	800626c <L6470_PrepareGetParam>
	    L6470_PrepareGetParam(Y_AXIS_INDEX, L6470_ABS_POS_ID);
 8008678:	2100      	movs	r1, #0
 800867a:	2001      	movs	r0, #1
 800867c:	f7fd fdf6 	bl	800626c <L6470_PrepareGetParam>
	    L6470_PrepareGetParam(Z_AXIS_INDEX, L6470_ABS_POS_ID);
 8008680:	2100      	movs	r1, #0
 8008682:	2002      	movs	r0, #2
 8008684:	f7fd fdf2 	bl	800626c <L6470_PrepareGetParam>
	    L6470_PrepareGetParam(M_AXIS_INDEX, L6470_ABS_POS_ID);
 8008688:	2100      	movs	r1, #0
 800868a:	2003      	movs	r0, #3
 800868c:	f7fd fdee 	bl	800626c <L6470_PrepareGetParam>
	    L6470_PerformPreparedApplicationCommand();
 8008690:	f7fd ff80 	bl	8006594 <L6470_PerformPreparedApplicationCommand>

	    Motor_Current_Steps[X_AXIS_INDEX] = L6470_ExtractReturnedData(
 8008694:	2203      	movs	r2, #3
 8008696:	4933      	ldr	r1, [pc, #204]	; (8008764 <Encoder_Loop+0x120>)
 8008698:	2000      	movs	r0, #0
 800869a:	f7fd ffd5 	bl	8006648 <L6470_ExtractReturnedData>
 800869e:	4603      	mov	r3, r0
 80086a0:	461a      	mov	r2, r3
 80086a2:	4b31      	ldr	r3, [pc, #196]	; (8008768 <Encoder_Loop+0x124>)
 80086a4:	601a      	str	r2, [r3, #0]
	    X_AXIS_INDEX, (uint8_t*) L6470_DaisyChainSpiRxStruct, 3);
	    Motor_Current_Steps[Y_AXIS_INDEX] = L6470_ExtractReturnedData(
 80086a6:	2203      	movs	r2, #3
 80086a8:	492e      	ldr	r1, [pc, #184]	; (8008764 <Encoder_Loop+0x120>)
 80086aa:	2001      	movs	r0, #1
 80086ac:	f7fd ffcc 	bl	8006648 <L6470_ExtractReturnedData>
 80086b0:	4603      	mov	r3, r0
 80086b2:	461a      	mov	r2, r3
 80086b4:	4b2c      	ldr	r3, [pc, #176]	; (8008768 <Encoder_Loop+0x124>)
 80086b6:	605a      	str	r2, [r3, #4]
	    Y_AXIS_INDEX, (uint8_t*) L6470_DaisyChainSpiRxStruct, 3);
	    Motor_Current_Steps[Z_AXIS_INDEX] = L6470_ExtractReturnedData(
 80086b8:	2203      	movs	r2, #3
 80086ba:	492a      	ldr	r1, [pc, #168]	; (8008764 <Encoder_Loop+0x120>)
 80086bc:	2002      	movs	r0, #2
 80086be:	f7fd ffc3 	bl	8006648 <L6470_ExtractReturnedData>
 80086c2:	4603      	mov	r3, r0
 80086c4:	461a      	mov	r2, r3
 80086c6:	4b28      	ldr	r3, [pc, #160]	; (8008768 <Encoder_Loop+0x124>)
 80086c8:	609a      	str	r2, [r3, #8]
	    Z_AXIS_INDEX, (uint8_t*) L6470_DaisyChainSpiRxStruct, 3);
	    Motor_Current_Steps[M_AXIS_INDEX] = L6470_ExtractReturnedData(
 80086ca:	2203      	movs	r2, #3
 80086cc:	4925      	ldr	r1, [pc, #148]	; (8008764 <Encoder_Loop+0x120>)
 80086ce:	2003      	movs	r0, #3
 80086d0:	f7fd ffba 	bl	8006648 <L6470_ExtractReturnedData>
 80086d4:	4603      	mov	r3, r0
 80086d6:	461a      	mov	r2, r3
 80086d8:	4b23      	ldr	r3, [pc, #140]	; (8008768 <Encoder_Loop+0x124>)
 80086da:	60da      	str	r2, [r3, #12]
	    M_AXIS_INDEX, (uint8_t*) L6470_DaisyChainSpiRxStruct, 3);

	    Motor_Current_Steps[X_AXIS_INDEX] = AbsPos_2_Position(
		    Motor_Current_Steps[X_AXIS_INDEX]);
 80086dc:	4b22      	ldr	r3, [pc, #136]	; (8008768 <Encoder_Loop+0x124>)
 80086de:	681b      	ldr	r3, [r3, #0]
	    Motor_Current_Steps[X_AXIS_INDEX] = AbsPos_2_Position(
 80086e0:	4618      	mov	r0, r3
 80086e2:	f7fd f8cd 	bl	8005880 <AbsPos_2_Position>
 80086e6:	4602      	mov	r2, r0
 80086e8:	4b1f      	ldr	r3, [pc, #124]	; (8008768 <Encoder_Loop+0x124>)
 80086ea:	601a      	str	r2, [r3, #0]
	    Motor_Current_Steps[Y_AXIS_INDEX] = AbsPos_2_Position(
		    Motor_Current_Steps[Y_AXIS_INDEX]);
 80086ec:	4b1e      	ldr	r3, [pc, #120]	; (8008768 <Encoder_Loop+0x124>)
 80086ee:	685b      	ldr	r3, [r3, #4]
	    Motor_Current_Steps[Y_AXIS_INDEX] = AbsPos_2_Position(
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fd f8c5 	bl	8005880 <AbsPos_2_Position>
 80086f6:	4602      	mov	r2, r0
 80086f8:	4b1b      	ldr	r3, [pc, #108]	; (8008768 <Encoder_Loop+0x124>)
 80086fa:	605a      	str	r2, [r3, #4]
	    Motor_Current_Steps[Z_AXIS_INDEX] = AbsPos_2_Position(
		    Motor_Current_Steps[Z_AXIS_INDEX]);
 80086fc:	4b1a      	ldr	r3, [pc, #104]	; (8008768 <Encoder_Loop+0x124>)
 80086fe:	689b      	ldr	r3, [r3, #8]
	    Motor_Current_Steps[Z_AXIS_INDEX] = AbsPos_2_Position(
 8008700:	4618      	mov	r0, r3
 8008702:	f7fd f8bd 	bl	8005880 <AbsPos_2_Position>
 8008706:	4602      	mov	r2, r0
 8008708:	4b17      	ldr	r3, [pc, #92]	; (8008768 <Encoder_Loop+0x124>)
 800870a:	609a      	str	r2, [r3, #8]
	    Motor_Current_Steps[M_AXIS_INDEX] = AbsPos_2_Position(
		    Motor_Current_Steps[M_AXIS_INDEX]);
 800870c:	4b16      	ldr	r3, [pc, #88]	; (8008768 <Encoder_Loop+0x124>)
 800870e:	68db      	ldr	r3, [r3, #12]
	    Motor_Current_Steps[M_AXIS_INDEX] = AbsPos_2_Position(
 8008710:	4618      	mov	r0, r3
 8008712:	f7fd f8b5 	bl	8005880 <AbsPos_2_Position>
 8008716:	4602      	mov	r2, r0
 8008718:	4b13      	ldr	r3, [pc, #76]	; (8008768 <Encoder_Loop+0x124>)
 800871a:	60da      	str	r2, [r3, #12]

	    perform_prepared_action  = Encoder_Scan_Helper(X_AXIS_INDEX);
 800871c:	2000      	movs	r0, #0
 800871e:	f7ff fdd7 	bl	80082d0 <Encoder_Scan_Helper>
 8008722:	4603      	mov	r3, r0
 8008724:	71fb      	strb	r3, [r7, #7]
	    perform_prepared_action |= Encoder_Scan_Helper(Y_AXIS_INDEX);
 8008726:	2001      	movs	r0, #1
 8008728:	f7ff fdd2 	bl	80082d0 <Encoder_Scan_Helper>
 800872c:	4603      	mov	r3, r0
 800872e:	461a      	mov	r2, r3
 8008730:	79fb      	ldrb	r3, [r7, #7]
 8008732:	4313      	orrs	r3, r2
 8008734:	71fb      	strb	r3, [r7, #7]
	    perform_prepared_action |= Encoder_Scan_Helper(Z_AXIS_INDEX);
 8008736:	2002      	movs	r0, #2
 8008738:	f7ff fdca 	bl	80082d0 <Encoder_Scan_Helper>
 800873c:	4603      	mov	r3, r0
 800873e:	461a      	mov	r2, r3
 8008740:	79fb      	ldrb	r3, [r7, #7]
 8008742:	4313      	orrs	r3, r2
 8008744:	71fb      	strb	r3, [r7, #7]

	    if (perform_prepared_action)
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	2b00      	cmp	r3, #0
 800874a:	d003      	beq.n	8008754 <Encoder_Loop+0x110>
		{
		perform_prepared_action = 0;
 800874c:	2300      	movs	r3, #0
 800874e:	71fb      	strb	r3, [r7, #7]
		L6470_PerformPreparedApplicationCommand();
 8008750:	f7fd ff20 	bl	8006594 <L6470_PerformPreparedApplicationCommand>
		}


	    }
	}
    }
 8008754:	bf00      	nop
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}
 800875c:	20000a2e 	.word	0x20000a2e
 8008760:	2000095c 	.word	0x2000095c
 8008764:	20000b18 	.word	0x20000b18
 8008768:	20000a44 	.word	0x20000a44

0800876c <CLI_Add_Cammand>:
static const char* const CMD_Not_Recognized_Sring =
	":Command not recognized.  Enter 'help' to view a list of available commands.\r\n\r\n";


uint8_t CLI_Add_Cammand(CLI_Command_t* command_def)
    {
 800876c:	b580      	push	{r7, lr}
 800876e:	b082      	sub	sp, #8
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]

    if (Command_Count < MAX_COMMANDS)
 8008774:	4b10      	ldr	r3, [pc, #64]	; (80087b8 <CLI_Add_Cammand+0x4c>)
 8008776:	881b      	ldrh	r3, [r3, #0]
 8008778:	2b31      	cmp	r3, #49	; 0x31
 800877a:	d817      	bhi.n	80087ac <CLI_Add_Cammand+0x40>
	{
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4618      	mov	r0, r3
 8008782:	f7f7 fd2d 	bl	80001e0 <strlen>
 8008786:	4603      	mov	r3, r0
 8008788:	b29a      	uxth	r2, r3
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	811a      	strh	r2, [r3, #8]
	Cammand_List[Command_Count] = command_def;
 800878e:	4b0a      	ldr	r3, [pc, #40]	; (80087b8 <CLI_Add_Cammand+0x4c>)
 8008790:	881b      	ldrh	r3, [r3, #0]
 8008792:	4619      	mov	r1, r3
 8008794:	4a09      	ldr	r2, [pc, #36]	; (80087bc <CLI_Add_Cammand+0x50>)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	Command_Count++;
 800879c:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <CLI_Add_Cammand+0x4c>)
 800879e:	881b      	ldrh	r3, [r3, #0]
 80087a0:	3301      	adds	r3, #1
 80087a2:	b29a      	uxth	r2, r3
 80087a4:	4b04      	ldr	r3, [pc, #16]	; (80087b8 <CLI_Add_Cammand+0x4c>)
 80087a6:	801a      	strh	r2, [r3, #0]
	return 1; // command added successful
 80087a8:	2301      	movs	r3, #1
 80087aa:	e000      	b.n	80087ae <CLI_Add_Cammand+0x42>
	}

    return 0;
 80087ac:	2300      	movs	r3, #0

    }
 80087ae:	4618      	mov	r0, r3
 80087b0:	3708      	adds	r7, #8
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	20000960 	.word	0x20000960
 80087bc:	20000964 	.word	0x20000964

080087c0 <CLI_Process_Cammand>:

uint8_t CLI_Process_Cammand(const char* cli_in_buffer, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 80087c0:	b590      	push	{r4, r7, lr}
 80087c2:	b089      	sub	sp, #36	; 0x24
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	4613      	mov	r3, r2
 80087cc:	80fb      	strh	r3, [r7, #6]

    uint8_t is_command_valid = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	77fb      	strb	r3, [r7, #31]
    uint8_t xreturn = 0;
 80087d2:	2300      	movs	r3, #0
 80087d4:	77bb      	strb	r3, [r7, #30]
    CLI_Command_t* command_list_ptr = NULL;
 80087d6:	2300      	movs	r3, #0
 80087d8:	61bb      	str	r3, [r7, #24]


    /* Search for the command string in the list of registered commands. */
    for (uint16_t i = 0; i < Command_Count; i++)
 80087da:	2300      	movs	r3, #0
 80087dc:	82fb      	strh	r3, [r7, #22]
 80087de:	e023      	b.n	8008828 <CLI_Process_Cammand+0x68>
	{

	command_list_ptr = Cammand_List[i];
 80087e0:	8afb      	ldrh	r3, [r7, #22]
 80087e2:	4a28      	ldr	r2, [pc, #160]	; (8008884 <CLI_Process_Cammand+0xc4>)
 80087e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087e8:	61bb      	str	r3, [r7, #24]
	uint16_t cmd_len = command_list_ptr->CLI_Command_Length;
 80087ea:	69bb      	ldr	r3, [r7, #24]
 80087ec:	891b      	ldrh	r3, [r3, #8]
 80087ee:	82bb      	strh	r3, [r7, #20]

	/* To ensure the string lengths match exactly, so as not to pick up
	 a sub-string of a longer command, check the byte after the expected
	 end of the string is either the end of the string or a space before
	 a parameter. */
	if ((cli_in_buffer[cmd_len] == ' ')
 80087f0:	8abb      	ldrh	r3, [r7, #20]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	4413      	add	r3, r2
 80087f6:	781b      	ldrb	r3, [r3, #0]
 80087f8:	2b20      	cmp	r3, #32
 80087fa:	d005      	beq.n	8008808 <CLI_Process_Cammand+0x48>
		|| (cli_in_buffer[cmd_len] == 0x00))
 80087fc:	8abb      	ldrh	r3, [r7, #20]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	4413      	add	r3, r2
 8008802:	781b      	ldrb	r3, [r3, #0]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10c      	bne.n	8008822 <CLI_Process_Cammand+0x62>
	    {

	    if (strncmp(cli_in_buffer, command_list_ptr->CLI_Command,
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	8aba      	ldrh	r2, [r7, #20]
 800880e:	4619      	mov	r1, r3
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f001 f9b7 	bl	8009b84 <strncmp>
 8008816:	4603      	mov	r3, r0
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <CLI_Process_Cammand+0x62>
		    cmd_len) == 0)
		{
		is_command_valid = 1;
 800881c:	2301      	movs	r3, #1
 800881e:	77fb      	strb	r3, [r7, #31]
		break; // command found break the loop
 8008820:	e007      	b.n	8008832 <CLI_Process_Cammand+0x72>
    for (uint16_t i = 0; i < Command_Count; i++)
 8008822:	8afb      	ldrh	r3, [r7, #22]
 8008824:	3301      	adds	r3, #1
 8008826:	82fb      	strh	r3, [r7, #22]
 8008828:	4b17      	ldr	r3, [pc, #92]	; (8008888 <CLI_Process_Cammand+0xc8>)
 800882a:	881b      	ldrh	r3, [r3, #0]
 800882c:	8afa      	ldrh	r2, [r7, #22]
 800882e:	429a      	cmp	r2, r3
 8008830:	d3d6      	bcc.n	80087e0 <CLI_Process_Cammand+0x20>
		}
	    }
	}

    if (is_command_valid)
 8008832:	7ffb      	ldrb	r3, [r7, #31]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d00c      	beq.n	8008852 <CLI_Process_Cammand+0x92>
	{
	if (command_list_ptr->CLI_Callback != NULL)
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d01c      	beq.n	800887a <CLI_Process_Cammand+0xba>
	    {
		xreturn = command_list_ptr->CLI_Callback(
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	88fa      	ldrh	r2, [r7, #6]
 8008846:	68b9      	ldr	r1, [r7, #8]
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	4798      	blx	r3
 800884c:	4603      	mov	r3, r0
 800884e:	77bb      	strb	r3, [r7, #30]
 8008850:	e013      	b.n	800887a <CLI_Process_Cammand+0xba>
			cli_in_buffer, cli_tx_out_buffer, max_buffer_len);
	    }
	}
    else
	{
	strncpy(cli_tx_out_buffer, cli_in_buffer, strlen(cli_in_buffer));
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7f7 fcc4 	bl	80001e0 <strlen>
 8008858:	4603      	mov	r3, r0
 800885a:	461a      	mov	r2, r3
 800885c:	68f9      	ldr	r1, [r7, #12]
 800885e:	68b8      	ldr	r0, [r7, #8]
 8008860:	f001 f9a2 	bl	8009ba8 <strncpy>
	strncat(cli_tx_out_buffer, CMD_Not_Recognized_Sring,strlen(CMD_Not_Recognized_Sring));
 8008864:	4c09      	ldr	r4, [pc, #36]	; (800888c <CLI_Process_Cammand+0xcc>)
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <CLI_Process_Cammand+0xcc>)
 8008868:	4618      	mov	r0, r3
 800886a:	f7f7 fcb9 	bl	80001e0 <strlen>
 800886e:	4603      	mov	r3, r0
 8008870:	461a      	mov	r2, r3
 8008872:	4621      	mov	r1, r4
 8008874:	68b8      	ldr	r0, [r7, #8]
 8008876:	f001 f971 	bl	8009b5c <strncat>
	}

    return xreturn;
 800887a:	7fbb      	ldrb	r3, [r7, #30]

    }
 800887c:	4618      	mov	r0, r3
 800887e:	3724      	adds	r7, #36	; 0x24
 8008880:	46bd      	mov	sp, r7
 8008882:	bd90      	pop	{r4, r7, pc}
 8008884:	20000964 	.word	0x20000964
 8008888:	20000960 	.word	0x20000960
 800888c:	0800d40c 	.word	0x0800d40c

08008890 <CLI_Get_Parameter>:


char* CLI_Get_Parameter(const char *cli_in_buffer, uint16_t param_number,
	uint16_t *param_number_len)
    {
 8008890:	b480      	push	{r7}
 8008892:	b087      	sub	sp, #28
 8008894:	af00      	add	r7, sp, #0
 8008896:	60f8      	str	r0, [r7, #12]
 8008898:	460b      	mov	r3, r1
 800889a:	607a      	str	r2, [r7, #4]
 800889c:	817b      	strh	r3, [r7, #10]

    uint16_t uxParametersFound = 0;
 800889e:	2300      	movs	r3, #0
 80088a0:	82fb      	strh	r3, [r7, #22]
    char *pcReturn = NULL;
 80088a2:	2300      	movs	r3, #0
 80088a4:	613b      	str	r3, [r7, #16]

    *param_number_len = 0;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	801a      	strh	r2, [r3, #0]

    while (uxParametersFound < param_number)
 80088ac:	e03c      	b.n	8008928 <CLI_Get_Parameter+0x98>
	{
	/* Index the character pointer past the current word.  If this is the start
	 of the command string then the first word is the command itself. */
	while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) != ' '))
	    {
	    cli_in_buffer++;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	3301      	adds	r3, #1
 80088b2:	60fb      	str	r3, [r7, #12]
	while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) != ' '))
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	781b      	ldrb	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d007      	beq.n	80088cc <CLI_Get_Parameter+0x3c>
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2b20      	cmp	r3, #32
 80088c2:	d1f4      	bne.n	80088ae <CLI_Get_Parameter+0x1e>
	    }

	/* Find the start of the next string. */
	while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) == ' '))
 80088c4:	e002      	b.n	80088cc <CLI_Get_Parameter+0x3c>
	    {
	    cli_in_buffer++;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	3301      	adds	r3, #1
 80088ca:	60fb      	str	r3, [r7, #12]
	while (((*cli_in_buffer) != 0x00) && ((*cli_in_buffer) == ' '))
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	781b      	ldrb	r3, [r3, #0]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d003      	beq.n	80088dc <CLI_Get_Parameter+0x4c>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	781b      	ldrb	r3, [r3, #0]
 80088d8:	2b20      	cmp	r3, #32
 80088da:	d0f4      	beq.n	80088c6 <CLI_Get_Parameter+0x36>
	    }

	/* Was a string found? */
	if (*cli_in_buffer != 0x00)
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	781b      	ldrb	r3, [r3, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d026      	beq.n	8008932 <CLI_Get_Parameter+0xa2>
	    {
	    /* Is this the start of the required parameter? */
	    uxParametersFound++;
 80088e4:	8afb      	ldrh	r3, [r7, #22]
 80088e6:	3301      	adds	r3, #1
 80088e8:	82fb      	strh	r3, [r7, #22]

	    if (uxParametersFound == param_number)
 80088ea:	8afa      	ldrh	r2, [r7, #22]
 80088ec:	897b      	ldrh	r3, [r7, #10]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d11a      	bne.n	8008928 <CLI_Get_Parameter+0x98>
		{
		/* How long is the parameter? */
		pcReturn = (char*)cli_in_buffer;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	613b      	str	r3, [r7, #16]
		while (((*cli_in_buffer) != 0x00)
 80088f6:	e008      	b.n	800890a <CLI_Get_Parameter+0x7a>
			&& ((*cli_in_buffer) != ' '))
		    {
		    (*param_number_len)++;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	3301      	adds	r3, #1
 80088fe:	b29a      	uxth	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	801a      	strh	r2, [r3, #0]
		    cli_in_buffer++;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	3301      	adds	r3, #1
 8008908:	60fb      	str	r3, [r7, #12]
		while (((*cli_in_buffer) != 0x00)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d003      	beq.n	800891a <CLI_Get_Parameter+0x8a>
			&& ((*cli_in_buffer) != ' '))
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	2b20      	cmp	r3, #32
 8008918:	d1ee      	bne.n	80088f8 <CLI_Get_Parameter+0x68>
		    }

		if (*param_number_len == 0)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	881b      	ldrh	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d109      	bne.n	8008936 <CLI_Get_Parameter+0xa6>
		    {
		    pcReturn = NULL;
 8008922:	2300      	movs	r3, #0
 8008924:	613b      	str	r3, [r7, #16]
		    }

		break;
 8008926:	e006      	b.n	8008936 <CLI_Get_Parameter+0xa6>
    while (uxParametersFound < param_number)
 8008928:	8afa      	ldrh	r2, [r7, #22]
 800892a:	897b      	ldrh	r3, [r7, #10]
 800892c:	429a      	cmp	r2, r3
 800892e:	d3c1      	bcc.n	80088b4 <CLI_Get_Parameter+0x24>
 8008930:	e002      	b.n	8008938 <CLI_Get_Parameter+0xa8>
		}
	    }
	else
	    {
	    break;
 8008932:	bf00      	nop
 8008934:	e000      	b.n	8008938 <CLI_Get_Parameter+0xa8>
		break;
 8008936:	bf00      	nop
	    }
	}

    return pcReturn;
 8008938:	693b      	ldr	r3, [r7, #16]
    }
 800893a:	4618      	mov	r0, r3
 800893c:	371c      	adds	r7, #28
 800893e:	46bd      	mov	sp, r7
 8008940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008944:	4770      	bx	lr
	...

08008948 <Help_Callback>:



uint8_t Help_Callback(const char* cli_rx_command, char* cli_tx_out_buffer, uint16_t max_buffer_len)
    {
 8008948:	b590      	push	{r4, r7, lr}
 800894a:	b087      	sub	sp, #28
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	4613      	mov	r3, r2
 8008954:	80fb      	strh	r3, [r7, #6]

    static uint16_t count = 0;

    CLI_Command_t* command_list_ptr = Cammand_List[count];
 8008956:	4b15      	ldr	r3, [pc, #84]	; (80089ac <Help_Callback+0x64>)
 8008958:	881b      	ldrh	r3, [r3, #0]
 800895a:	461a      	mov	r2, r3
 800895c:	4b14      	ldr	r3, [pc, #80]	; (80089b0 <Help_Callback+0x68>)
 800895e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008962:	617b      	str	r3, [r7, #20]

    strncpy(cli_tx_out_buffer, command_list_ptr->CLI_Command_Description,
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	685c      	ldr	r4, [r3, #4]
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	4618      	mov	r0, r3
 800896e:	f7f7 fc37 	bl	80001e0 <strlen>
 8008972:	4603      	mov	r3, r0
 8008974:	461a      	mov	r2, r3
 8008976:	4621      	mov	r1, r4
 8008978:	68b8      	ldr	r0, [r7, #8]
 800897a:	f001 f915 	bl	8009ba8 <strncpy>
	    strlen(command_list_ptr->CLI_Command_Description));

    count++;
 800897e:	4b0b      	ldr	r3, [pc, #44]	; (80089ac <Help_Callback+0x64>)
 8008980:	881b      	ldrh	r3, [r3, #0]
 8008982:	3301      	adds	r3, #1
 8008984:	b29a      	uxth	r2, r3
 8008986:	4b09      	ldr	r3, [pc, #36]	; (80089ac <Help_Callback+0x64>)
 8008988:	801a      	strh	r2, [r3, #0]
    if (count < Command_Count)
 800898a:	4b08      	ldr	r3, [pc, #32]	; (80089ac <Help_Callback+0x64>)
 800898c:	881a      	ldrh	r2, [r3, #0]
 800898e:	4b09      	ldr	r3, [pc, #36]	; (80089b4 <Help_Callback+0x6c>)
 8008990:	881b      	ldrh	r3, [r3, #0]
 8008992:	429a      	cmp	r2, r3
 8008994:	d201      	bcs.n	800899a <Help_Callback+0x52>
	{
	return 1; //call again to generate next output
 8008996:	2301      	movs	r3, #1
 8008998:	e003      	b.n	80089a2 <Help_Callback+0x5a>
	}

    count = 0;
 800899a:	4b04      	ldr	r3, [pc, #16]	; (80089ac <Help_Callback+0x64>)
 800899c:	2200      	movs	r2, #0
 800899e:	801a      	strh	r2, [r3, #0]

    return 0; // operation complete do not call again
 80089a0:	2300      	movs	r3, #0

    }
 80089a2:	4618      	mov	r0, r3
 80089a4:	371c      	adds	r7, #28
 80089a6:	46bd      	mov	sp, r7
 80089a8:	bd90      	pop	{r4, r7, pc}
 80089aa:	bf00      	nop
 80089ac:	20000a2c 	.word	0x20000a2c
 80089b0:	20000964 	.word	0x20000964
 80089b4:	20000960 	.word	0x20000960

080089b8 <CLI_Add_Help_Cammand>:
    // require only if generated output in callback is larger than output buffer
    // to split generated output
	};

void CLI_Add_Help_Cammand()
    {
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0
    CLI_Add_Cammand(&Help_Defination);
 80089bc:	4802      	ldr	r0, [pc, #8]	; (80089c8 <CLI_Add_Help_Cammand+0x10>)
 80089be:	f7ff fed5 	bl	800876c <CLI_Add_Cammand>
    }
 80089c2:	bf00      	nop
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20000170 	.word	0x20000170

080089cc <MX_GPIO_Init>:
        * EXTI
     PB6   ------> S_TIM4_CH1
     PB7   ------> S_TIM4_CH2
*/
void MX_GPIO_Init(void)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b08a      	sub	sp, #40	; 0x28
 80089d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089d2:	f107 0314 	add.w	r3, r7, #20
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	605a      	str	r2, [r3, #4]
 80089dc:	609a      	str	r2, [r3, #8]
 80089de:	60da      	str	r2, [r3, #12]
 80089e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80089e2:	2300      	movs	r3, #0
 80089e4:	613b      	str	r3, [r7, #16]
 80089e6:	4a53      	ldr	r2, [pc, #332]	; (8008b34 <MX_GPIO_Init+0x168>)
 80089e8:	4b52      	ldr	r3, [pc, #328]	; (8008b34 <MX_GPIO_Init+0x168>)
 80089ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ec:	f043 0304 	orr.w	r3, r3, #4
 80089f0:	6313      	str	r3, [r2, #48]	; 0x30
 80089f2:	4b50      	ldr	r3, [pc, #320]	; (8008b34 <MX_GPIO_Init+0x168>)
 80089f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089f6:	f003 0304 	and.w	r3, r3, #4
 80089fa:	613b      	str	r3, [r7, #16]
 80089fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80089fe:	2300      	movs	r3, #0
 8008a00:	60fb      	str	r3, [r7, #12]
 8008a02:	4a4c      	ldr	r2, [pc, #304]	; (8008b34 <MX_GPIO_Init+0x168>)
 8008a04:	4b4b      	ldr	r3, [pc, #300]	; (8008b34 <MX_GPIO_Init+0x168>)
 8008a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8008a0e:	4b49      	ldr	r3, [pc, #292]	; (8008b34 <MX_GPIO_Init+0x168>)
 8008a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a16:	60fb      	str	r3, [r7, #12]
 8008a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	60bb      	str	r3, [r7, #8]
 8008a1e:	4a45      	ldr	r2, [pc, #276]	; (8008b34 <MX_GPIO_Init+0x168>)
 8008a20:	4b44      	ldr	r3, [pc, #272]	; (8008b34 <MX_GPIO_Init+0x168>)
 8008a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a24:	f043 0301 	orr.w	r3, r3, #1
 8008a28:	6313      	str	r3, [r2, #48]	; 0x30
 8008a2a:	4b42      	ldr	r3, [pc, #264]	; (8008b34 <MX_GPIO_Init+0x168>)
 8008a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2e:	f003 0301 	and.w	r3, r3, #1
 8008a32:	60bb      	str	r3, [r7, #8]
 8008a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008a36:	2300      	movs	r3, #0
 8008a38:	607b      	str	r3, [r7, #4]
 8008a3a:	4a3e      	ldr	r2, [pc, #248]	; (8008b34 <MX_GPIO_Init+0x168>)
 8008a3c:	4b3d      	ldr	r3, [pc, #244]	; (8008b34 <MX_GPIO_Init+0x168>)
 8008a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a40:	f043 0302 	orr.w	r3, r3, #2
 8008a44:	6313      	str	r3, [r2, #48]	; 0x30
 8008a46:	4b3b      	ldr	r3, [pc, #236]	; (8008b34 <MX_GPIO_Init+0x168>)
 8008a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a4a:	f003 0302 	and.w	r3, r3, #2
 8008a4e:	607b      	str	r3, [r7, #4]
 8008a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L6470_CS_GPIO_Port, L6470_CS_Pin, GPIO_PIN_SET);
 8008a52:	2201      	movs	r2, #1
 8008a54:	2110      	movs	r1, #16
 8008a56:	4838      	ldr	r0, [pc, #224]	; (8008b38 <MX_GPIO_Init+0x16c>)
 8008a58:	f7f9 fb88 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	2120      	movs	r1, #32
 8008a60:	4835      	ldr	r0, [pc, #212]	; (8008b38 <MX_GPIO_Init+0x16c>)
 8008a62:	f7f9 fb83 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L6470_RST_STBY_GPIO_Port, L6470_RST_STBY_Pin, GPIO_PIN_RESET);
 8008a66:	2200      	movs	r2, #0
 8008a68:	2120      	movs	r1, #32
 8008a6a:	4834      	ldr	r0, [pc, #208]	; (8008b3c <MX_GPIO_Init+0x170>)
 8008a6c:	f7f9 fb7e 	bl	800216c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|L6470_Flag_INT_Pin;
 8008a70:	f242 0302 	movw	r3, #8194	; 0x2002
 8008a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8008a76:	4b32      	ldr	r3, [pc, #200]	; (8008b40 <MX_GPIO_Init+0x174>)
 8008a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a7e:	f107 0314 	add.w	r3, r7, #20
 8008a82:	4619      	mov	r1, r3
 8008a84:	482f      	ldr	r0, [pc, #188]	; (8008b44 <MX_GPIO_Init+0x178>)
 8008a86:	f7f9 f8df 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L6470_BUSY_SYNC_INT_Pin;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8008a8e:	4b2e      	ldr	r3, [pc, #184]	; (8008b48 <MX_GPIO_Init+0x17c>)
 8008a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(L6470_BUSY_SYNC_INT_GPIO_Port, &GPIO_InitStruct);
 8008a96:	f107 0314 	add.w	r3, r7, #20
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	4829      	ldr	r0, [pc, #164]	; (8008b44 <MX_GPIO_Init+0x178>)
 8008a9e:	f7f9 f8d3 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = L6470_CS_Pin|LD2_Pin;
 8008aa2:	2330      	movs	r3, #48	; 0x30
 8008aa4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ab2:	f107 0314 	add.w	r3, r7, #20
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	481f      	ldr	r0, [pc, #124]	; (8008b38 <MX_GPIO_Init+0x16c>)
 8008aba:	f7f9 f8c5 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L6470_RST_STBY_Pin;
 8008abe:	2320      	movs	r3, #32
 8008ac0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8008ac2:	2311      	movs	r3, #17
 8008ac4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aca:	2300      	movs	r3, #0
 8008acc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(L6470_RST_STBY_GPIO_Port, &GPIO_InitStruct);
 8008ace:	f107 0314 	add.w	r3, r7, #20
 8008ad2:	4619      	mov	r1, r3
 8008ad4:	4819      	ldr	r0, [pc, #100]	; (8008b3c <MX_GPIO_Init+0x170>)
 8008ad6:	f7f9 f8b7 	bl	8001c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008ada:	23c0      	movs	r3, #192	; 0xc0
 8008adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ade:	2302      	movs	r3, #2
 8008ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8008aea:	2302      	movs	r3, #2
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008aee:	f107 0314 	add.w	r3, r7, #20
 8008af2:	4619      	mov	r1, r3
 8008af4:	4811      	ldr	r0, [pc, #68]	; (8008b3c <MX_GPIO_Init+0x170>)
 8008af6:	f7f9 f8a7 	bl	8001c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8008afa:	2200      	movs	r2, #0
 8008afc:	2100      	movs	r1, #0
 8008afe:	2006      	movs	r0, #6
 8008b00:	f7f8 fb60 	bl	80011c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8008b04:	2006      	movs	r0, #6
 8008b06:	f7f8 fb89 	bl	800121c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	2100      	movs	r1, #0
 8008b0e:	2007      	movs	r0, #7
 8008b10:	f7f8 fb58 	bl	80011c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8008b14:	2007      	movs	r0, #7
 8008b16:	f7f8 fb81 	bl	800121c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	2028      	movs	r0, #40	; 0x28
 8008b20:	f7f8 fb50 	bl	80011c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8008b24:	2028      	movs	r0, #40	; 0x28
 8008b26:	f7f8 fb79 	bl	800121c <HAL_NVIC_EnableIRQ>

}
 8008b2a:	bf00      	nop
 8008b2c:	3728      	adds	r7, #40	; 0x28
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	40023800 	.word	0x40023800
 8008b38:	40020000 	.word	0x40020000
 8008b3c:	40020400 	.word	0x40020400
 8008b40:	10210000 	.word	0x10210000
 8008b44:	40020800 	.word	0x40020800
 8008b48:	10110000 	.word	0x10110000

08008b4c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8008b50:	4b12      	ldr	r3, [pc, #72]	; (8008b9c <MX_I2C1_Init+0x50>)
 8008b52:	4a13      	ldr	r2, [pc, #76]	; (8008ba0 <MX_I2C1_Init+0x54>)
 8008b54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008b56:	4b11      	ldr	r3, [pc, #68]	; (8008b9c <MX_I2C1_Init+0x50>)
 8008b58:	4a12      	ldr	r2, [pc, #72]	; (8008ba4 <MX_I2C1_Init+0x58>)
 8008b5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008b5c:	4b0f      	ldr	r3, [pc, #60]	; (8008b9c <MX_I2C1_Init+0x50>)
 8008b5e:	2200      	movs	r2, #0
 8008b60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008b62:	4b0e      	ldr	r3, [pc, #56]	; (8008b9c <MX_I2C1_Init+0x50>)
 8008b64:	2200      	movs	r2, #0
 8008b66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008b68:	4b0c      	ldr	r3, [pc, #48]	; (8008b9c <MX_I2C1_Init+0x50>)
 8008b6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008b70:	4b0a      	ldr	r3, [pc, #40]	; (8008b9c <MX_I2C1_Init+0x50>)
 8008b72:	2200      	movs	r2, #0
 8008b74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008b76:	4b09      	ldr	r3, [pc, #36]	; (8008b9c <MX_I2C1_Init+0x50>)
 8008b78:	2200      	movs	r2, #0
 8008b7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008b7c:	4b07      	ldr	r3, [pc, #28]	; (8008b9c <MX_I2C1_Init+0x50>)
 8008b7e:	2200      	movs	r2, #0
 8008b80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008b82:	4b06      	ldr	r3, [pc, #24]	; (8008b9c <MX_I2C1_Init+0x50>)
 8008b84:	2200      	movs	r2, #0
 8008b86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008b88:	4804      	ldr	r0, [pc, #16]	; (8008b9c <MX_I2C1_Init+0x50>)
 8008b8a:	f7f9 fb39 	bl	8002200 <HAL_I2C_Init>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008b94:	f000 f8e0 	bl	8008d58 <Error_Handler>
  }

}
 8008b98:	bf00      	nop
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	20000b7c 	.word	0x20000b7c
 8008ba0:	40005400 	.word	0x40005400
 8008ba4:	00061a80 	.word	0x00061a80

08008ba8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b08a      	sub	sp, #40	; 0x28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bb0:	f107 0314 	add.w	r3, r7, #20
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	601a      	str	r2, [r3, #0]
 8008bb8:	605a      	str	r2, [r3, #4]
 8008bba:	609a      	str	r2, [r3, #8]
 8008bbc:	60da      	str	r2, [r3, #12]
 8008bbe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	4a19      	ldr	r2, [pc, #100]	; (8008c2c <HAL_I2C_MspInit+0x84>)
 8008bc6:	4293      	cmp	r3, r2
 8008bc8:	d12c      	bne.n	8008c24 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008bca:	2300      	movs	r3, #0
 8008bcc:	613b      	str	r3, [r7, #16]
 8008bce:	4a18      	ldr	r2, [pc, #96]	; (8008c30 <HAL_I2C_MspInit+0x88>)
 8008bd0:	4b17      	ldr	r3, [pc, #92]	; (8008c30 <HAL_I2C_MspInit+0x88>)
 8008bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bd4:	f043 0302 	orr.w	r3, r3, #2
 8008bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8008bda:	4b15      	ldr	r3, [pc, #84]	; (8008c30 <HAL_I2C_MspInit+0x88>)
 8008bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bde:	f003 0302 	and.w	r3, r3, #2
 8008be2:	613b      	str	r3, [r7, #16]
 8008be4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8008be6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008bea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008bec:	2312      	movs	r3, #18
 8008bee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008bf4:	2303      	movs	r3, #3
 8008bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8008bf8:	2304      	movs	r3, #4
 8008bfa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bfc:	f107 0314 	add.w	r3, r7, #20
 8008c00:	4619      	mov	r1, r3
 8008c02:	480c      	ldr	r0, [pc, #48]	; (8008c34 <HAL_I2C_MspInit+0x8c>)
 8008c04:	f7f9 f820 	bl	8001c48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008c08:	2300      	movs	r3, #0
 8008c0a:	60fb      	str	r3, [r7, #12]
 8008c0c:	4a08      	ldr	r2, [pc, #32]	; (8008c30 <HAL_I2C_MspInit+0x88>)
 8008c0e:	4b08      	ldr	r3, [pc, #32]	; (8008c30 <HAL_I2C_MspInit+0x88>)
 8008c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c16:	6413      	str	r3, [r2, #64]	; 0x40
 8008c18:	4b05      	ldr	r3, [pc, #20]	; (8008c30 <HAL_I2C_MspInit+0x88>)
 8008c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8008c24:	bf00      	nop
 8008c26:	3728      	adds	r7, #40	; 0x28
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}
 8008c2c:	40005400 	.word	0x40005400
 8008c30:	40023800 	.word	0x40023800
 8008c34:	40020400 	.word	0x40020400

08008c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008c3c:	f7f8 f940 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008c40:	f000 f81e 	bl	8008c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008c44:	f7ff fec2 	bl	80089cc <MX_GPIO_Init>
  MX_DMA_Init();
 8008c48:	f7ff fb0a 	bl	8008260 <MX_DMA_Init>
  MX_SPI1_Init();
 8008c4c:	f000 fb1c 	bl	8009288 <MX_SPI1_Init>
  MX_TIM1_Init();
 8008c50:	f000 fc90 	bl	8009574 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8008c54:	f000 fe3e 	bl	80098d4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8008c58:	f000 fce4 	bl	8009624 <MX_TIM2_Init>
  MX_I2C1_Init();
 8008c5c:	f7ff ff76 	bl	8008b4c <MX_I2C1_Init>
  MX_TIM3_Init();
 8008c60:	f000 fd34 	bl	80096cc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  Motor_Config();
 8008c64:	f000 f88a 	bl	8008d7c <Motor_Config>

  CLI_UART_Init();
 8008c68:	f7ff fa38 	bl	80080dc <CLI_UART_Init>

  CLI_Add_All_Commands();
 8008c6c:	f7ff f960 	bl	8007f30 <CLI_Add_All_Commands>

  Encoder_Interface_Config();
 8008c70:	f7ff fb16 	bl	80082a0 <Encoder_Interface_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      CLI_UART_Loop();
 8008c74:	f7ff fa7e 	bl	8008174 <CLI_UART_Loop>

      Encoder_Loop();
 8008c78:	f7ff fce4 	bl	8008644 <Encoder_Loop>
      CLI_UART_Loop();
 8008c7c:	e7fa      	b.n	8008c74 <main+0x3c>
	...

08008c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b094      	sub	sp, #80	; 0x50
 8008c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c86:	f107 0320 	add.w	r3, r7, #32
 8008c8a:	2230      	movs	r2, #48	; 0x30
 8008c8c:	2100      	movs	r1, #0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f000 ff38 	bl	8009b04 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c94:	f107 030c 	add.w	r3, r7, #12
 8008c98:	2200      	movs	r2, #0
 8008c9a:	601a      	str	r2, [r3, #0]
 8008c9c:	605a      	str	r2, [r3, #4]
 8008c9e:	609a      	str	r2, [r3, #8]
 8008ca0:	60da      	str	r2, [r3, #12]
 8008ca2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	60bb      	str	r3, [r7, #8]
 8008ca8:	4a29      	ldr	r2, [pc, #164]	; (8008d50 <SystemClock_Config+0xd0>)
 8008caa:	4b29      	ldr	r3, [pc, #164]	; (8008d50 <SystemClock_Config+0xd0>)
 8008cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cb2:	6413      	str	r3, [r2, #64]	; 0x40
 8008cb4:	4b26      	ldr	r3, [pc, #152]	; (8008d50 <SystemClock_Config+0xd0>)
 8008cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cbc:	60bb      	str	r3, [r7, #8]
 8008cbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8008cc0:	2300      	movs	r3, #0
 8008cc2:	607b      	str	r3, [r7, #4]
 8008cc4:	4a23      	ldr	r2, [pc, #140]	; (8008d54 <SystemClock_Config+0xd4>)
 8008cc6:	4b23      	ldr	r3, [pc, #140]	; (8008d54 <SystemClock_Config+0xd4>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008cce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	4b1f      	ldr	r3, [pc, #124]	; (8008d54 <SystemClock_Config+0xd4>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008cdc:	607b      	str	r3, [r7, #4]
 8008cde:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008ce8:	2310      	movs	r3, #16
 8008cea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008cec:	2302      	movs	r3, #2
 8008cee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8008cf4:	2310      	movs	r3, #16
 8008cf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008cf8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8008cfc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8008cfe:	2304      	movs	r3, #4
 8008d00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8008d02:	2307      	movs	r3, #7
 8008d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008d06:	f107 0320 	add.w	r3, r7, #32
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	f7fa fa56 	bl	80031bc <HAL_RCC_OscConfig>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8008d16:	f000 f81f 	bl	8008d58 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008d1a:	230f      	movs	r3, #15
 8008d1c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008d1e:	2302      	movs	r3, #2
 8008d20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008d22:	2300      	movs	r3, #0
 8008d24:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008d30:	f107 030c 	add.w	r3, r7, #12
 8008d34:	2102      	movs	r1, #2
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fa fd32 	bl	80037a0 <HAL_RCC_ClockConfig>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d001      	beq.n	8008d46 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8008d42:	f000 f809 	bl	8008d58 <Error_Handler>
  }
}
 8008d46:	bf00      	nop
 8008d48:	3750      	adds	r7, #80	; 0x50
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}
 8008d4e:	bf00      	nop
 8008d50:	40023800 	.word	0x40023800
 8008d54:	40007000 	.word	0x40007000

08008d58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008d5c:	bf00      	nop
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr

08008d66 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 8008d66:	b480      	push	{r7}
 8008d68:	b083      	sub	sp, #12
 8008d6a:	af00      	add	r7, sp, #0
 8008d6c:	6078      	str	r0, [r7, #4]
 8008d6e:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8008d70:	bf00      	nop
 8008d72:	370c      	adds	r7, #12
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <Motor_Config>:
int32_t Motor_Current_Steps[NO_OF_MOTORS] ={0}; // speed steps
int32_t Motor_MAX_Steps[NO_OF_MOTORS] ={MAX_X_AXIS_STEPS,MAX_Y_AXIS_STEPS,MAX_Z_AXIS_STEPS,MAX_M_AXIS_STEPS}; // speed steps


void Motor_Config()
    {
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b082      	sub	sp, #8
 8008d80:	af00      	add	r7, sp, #0

    Motor_X_Data.motorvoltage = 12.0;
 8008d82:	4b8c      	ldr	r3, [pc, #560]	; (8008fb4 <Motor_Config+0x238>)
 8008d84:	4a8c      	ldr	r2, [pc, #560]	; (8008fb8 <Motor_Config+0x23c>)
 8008d86:	601a      	str	r2, [r3, #0]
    Motor_X_Data.fullstepsperrevolution = 200;
 8008d88:	4b8a      	ldr	r3, [pc, #552]	; (8008fb4 <Motor_Config+0x238>)
 8008d8a:	4a8c      	ldr	r2, [pc, #560]	; (8008fbc <Motor_Config+0x240>)
 8008d8c:	605a      	str	r2, [r3, #4]
    Motor_X_Data.phasecurrent = 1.5;
 8008d8e:	4b89      	ldr	r3, [pc, #548]	; (8008fb4 <Motor_Config+0x238>)
 8008d90:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8008d94:	609a      	str	r2, [r3, #8]
    Motor_X_Data.phasevoltage = 3.0;
 8008d96:	4b87      	ldr	r3, [pc, #540]	; (8008fb4 <Motor_Config+0x238>)
 8008d98:	4a89      	ldr	r2, [pc, #548]	; (8008fc0 <Motor_Config+0x244>)
 8008d9a:	60da      	str	r2, [r3, #12]
    Motor_X_Data.speed = 200.0;
 8008d9c:	4b85      	ldr	r3, [pc, #532]	; (8008fb4 <Motor_Config+0x238>)
 8008d9e:	4a87      	ldr	r2, [pc, #540]	; (8008fbc <Motor_Config+0x240>)
 8008da0:	611a      	str	r2, [r3, #16]
    Motor_X_Data.acc = 100.0;
 8008da2:	4b84      	ldr	r3, [pc, #528]	; (8008fb4 <Motor_Config+0x238>)
 8008da4:	4a87      	ldr	r2, [pc, #540]	; (8008fc4 <Motor_Config+0x248>)
 8008da6:	615a      	str	r2, [r3, #20]
    Motor_X_Data.dec = 50.0;
 8008da8:	4b82      	ldr	r3, [pc, #520]	; (8008fb4 <Motor_Config+0x238>)
 8008daa:	4a87      	ldr	r2, [pc, #540]	; (8008fc8 <Motor_Config+0x24c>)
 8008dac:	619a      	str	r2, [r3, #24]
    Motor_X_Data.maxspeed = 1200.0;
 8008dae:	4b81      	ldr	r3, [pc, #516]	; (8008fb4 <Motor_Config+0x238>)
 8008db0:	4a86      	ldr	r2, [pc, #536]	; (8008fcc <Motor_Config+0x250>)
 8008db2:	61da      	str	r2, [r3, #28]
    Motor_X_Data.minspeed = 0.0;
 8008db4:	4b7f      	ldr	r3, [pc, #508]	; (8008fb4 <Motor_Config+0x238>)
 8008db6:	f04f 0200 	mov.w	r2, #0
 8008dba:	621a      	str	r2, [r3, #32]
    Motor_X_Data.fsspd = 1000.0;
 8008dbc:	4b7d      	ldr	r3, [pc, #500]	; (8008fb4 <Motor_Config+0x238>)
 8008dbe:	4a84      	ldr	r2, [pc, #528]	; (8008fd0 <Motor_Config+0x254>)
 8008dc0:	625a      	str	r2, [r3, #36]	; 0x24
    Motor_X_Data.kvalhold = 3.06;
 8008dc2:	4b7c      	ldr	r3, [pc, #496]	; (8008fb4 <Motor_Config+0x238>)
 8008dc4:	4a83      	ldr	r2, [pc, #524]	; (8008fd4 <Motor_Config+0x258>)
 8008dc6:	629a      	str	r2, [r3, #40]	; 0x28
    Motor_X_Data.kvalrun = 3.06;
 8008dc8:	4b7a      	ldr	r3, [pc, #488]	; (8008fb4 <Motor_Config+0x238>)
 8008dca:	4a82      	ldr	r2, [pc, #520]	; (8008fd4 <Motor_Config+0x258>)
 8008dcc:	62da      	str	r2, [r3, #44]	; 0x2c
    Motor_X_Data.kvalacc = 3.06;
 8008dce:	4b79      	ldr	r3, [pc, #484]	; (8008fb4 <Motor_Config+0x238>)
 8008dd0:	4a80      	ldr	r2, [pc, #512]	; (8008fd4 <Motor_Config+0x258>)
 8008dd2:	631a      	str	r2, [r3, #48]	; 0x30
    Motor_X_Data.kvaldec = 3.06;
 8008dd4:	4b77      	ldr	r3, [pc, #476]	; (8008fb4 <Motor_Config+0x238>)
 8008dd6:	4a7f      	ldr	r2, [pc, #508]	; (8008fd4 <Motor_Config+0x258>)
 8008dd8:	635a      	str	r2, [r3, #52]	; 0x34
    Motor_X_Data.intspeed = 61.52;
 8008dda:	4b76      	ldr	r3, [pc, #472]	; (8008fb4 <Motor_Config+0x238>)
 8008ddc:	4a7e      	ldr	r2, [pc, #504]	; (8008fd8 <Motor_Config+0x25c>)
 8008dde:	639a      	str	r2, [r3, #56]	; 0x38
    Motor_X_Data.stslp = 392.1569e-6;
 8008de0:	4b74      	ldr	r3, [pc, #464]	; (8008fb4 <Motor_Config+0x238>)
 8008de2:	4a7e      	ldr	r2, [pc, #504]	; (8008fdc <Motor_Config+0x260>)
 8008de4:	63da      	str	r2, [r3, #60]	; 0x3c
    Motor_X_Data.fnslpacc = 643.1372e-6;
 8008de6:	4b73      	ldr	r3, [pc, #460]	; (8008fb4 <Motor_Config+0x238>)
 8008de8:	4a7d      	ldr	r2, [pc, #500]	; (8008fe0 <Motor_Config+0x264>)
 8008dea:	641a      	str	r2, [r3, #64]	; 0x40
    Motor_X_Data.fnslpdec = 643.1372e-6;
 8008dec:	4b71      	ldr	r3, [pc, #452]	; (8008fb4 <Motor_Config+0x238>)
 8008dee:	4a7c      	ldr	r2, [pc, #496]	; (8008fe0 <Motor_Config+0x264>)
 8008df0:	645a      	str	r2, [r3, #68]	; 0x44
    Motor_X_Data.kterm = 0;
 8008df2:	4b70      	ldr	r3, [pc, #448]	; (8008fb4 <Motor_Config+0x238>)
 8008df4:	2200      	movs	r2, #0
 8008df6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Motor_X_Data.ocdth =   1500 * 1.00;
 8008dfa:	4b6e      	ldr	r3, [pc, #440]	; (8008fb4 <Motor_Config+0x238>)
 8008dfc:	4a79      	ldr	r2, [pc, #484]	; (8008fe4 <Motor_Config+0x268>)
 8008dfe:	64da      	str	r2, [r3, #76]	; 0x4c
    Motor_X_Data.stallth = 1000 * 1.00;
 8008e00:	4b6c      	ldr	r3, [pc, #432]	; (8008fb4 <Motor_Config+0x238>)
 8008e02:	4a73      	ldr	r2, [pc, #460]	; (8008fd0 <Motor_Config+0x254>)
 8008e04:	651a      	str	r2, [r3, #80]	; 0x50
    Motor_X_Data.step_sel = MICROSTEP_1_128;
 8008e06:	4b6b      	ldr	r3, [pc, #428]	; (8008fb4 <Motor_Config+0x238>)
 8008e08:	2207      	movs	r2, #7
 8008e0a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    Motor_X_Data.alarmen = 0xFF;
 8008e0e:	4b69      	ldr	r3, [pc, #420]	; (8008fb4 <Motor_Config+0x238>)
 8008e10:	22ff      	movs	r2, #255	; 0xff
 8008e12:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    Motor_X_Data.config = 0x2E88;
 8008e16:	4b67      	ldr	r3, [pc, #412]	; (8008fb4 <Motor_Config+0x238>)
 8008e18:	f642 6288 	movw	r2, #11912	; 0x2e88
 8008e1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56


    Motor_Y_Data.motorvoltage = 12.0;
 8008e20:	4b71      	ldr	r3, [pc, #452]	; (8008fe8 <Motor_Config+0x26c>)
 8008e22:	4a65      	ldr	r2, [pc, #404]	; (8008fb8 <Motor_Config+0x23c>)
 8008e24:	601a      	str	r2, [r3, #0]
    Motor_Y_Data.fullstepsperrevolution = 200;
 8008e26:	4b70      	ldr	r3, [pc, #448]	; (8008fe8 <Motor_Config+0x26c>)
 8008e28:	4a64      	ldr	r2, [pc, #400]	; (8008fbc <Motor_Config+0x240>)
 8008e2a:	605a      	str	r2, [r3, #4]
    Motor_Y_Data.phasecurrent = 1.5;
 8008e2c:	4b6e      	ldr	r3, [pc, #440]	; (8008fe8 <Motor_Config+0x26c>)
 8008e2e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8008e32:	609a      	str	r2, [r3, #8]
    Motor_Y_Data.phasevoltage = 3.0;
 8008e34:	4b6c      	ldr	r3, [pc, #432]	; (8008fe8 <Motor_Config+0x26c>)
 8008e36:	4a62      	ldr	r2, [pc, #392]	; (8008fc0 <Motor_Config+0x244>)
 8008e38:	60da      	str	r2, [r3, #12]
    Motor_Y_Data.speed = 100.0;
 8008e3a:	4b6b      	ldr	r3, [pc, #428]	; (8008fe8 <Motor_Config+0x26c>)
 8008e3c:	4a61      	ldr	r2, [pc, #388]	; (8008fc4 <Motor_Config+0x248>)
 8008e3e:	611a      	str	r2, [r3, #16]
    Motor_Y_Data.acc = 100.0;
 8008e40:	4b69      	ldr	r3, [pc, #420]	; (8008fe8 <Motor_Config+0x26c>)
 8008e42:	4a60      	ldr	r2, [pc, #384]	; (8008fc4 <Motor_Config+0x248>)
 8008e44:	615a      	str	r2, [r3, #20]
    Motor_Y_Data.dec = 50.0;
 8008e46:	4b68      	ldr	r3, [pc, #416]	; (8008fe8 <Motor_Config+0x26c>)
 8008e48:	4a5f      	ldr	r2, [pc, #380]	; (8008fc8 <Motor_Config+0x24c>)
 8008e4a:	619a      	str	r2, [r3, #24]
    Motor_Y_Data.maxspeed = 1200.0;
 8008e4c:	4b66      	ldr	r3, [pc, #408]	; (8008fe8 <Motor_Config+0x26c>)
 8008e4e:	4a5f      	ldr	r2, [pc, #380]	; (8008fcc <Motor_Config+0x250>)
 8008e50:	61da      	str	r2, [r3, #28]
    Motor_Y_Data.minspeed = 0.0;
 8008e52:	4b65      	ldr	r3, [pc, #404]	; (8008fe8 <Motor_Config+0x26c>)
 8008e54:	f04f 0200 	mov.w	r2, #0
 8008e58:	621a      	str	r2, [r3, #32]
    Motor_Y_Data.fsspd = 602.7;
 8008e5a:	4b63      	ldr	r3, [pc, #396]	; (8008fe8 <Motor_Config+0x26c>)
 8008e5c:	4a63      	ldr	r2, [pc, #396]	; (8008fec <Motor_Config+0x270>)
 8008e5e:	625a      	str	r2, [r3, #36]	; 0x24
    Motor_Y_Data.kvalhold = 3.06;
 8008e60:	4b61      	ldr	r3, [pc, #388]	; (8008fe8 <Motor_Config+0x26c>)
 8008e62:	4a5c      	ldr	r2, [pc, #368]	; (8008fd4 <Motor_Config+0x258>)
 8008e64:	629a      	str	r2, [r3, #40]	; 0x28
    Motor_Y_Data.kvalrun = 3.06;
 8008e66:	4b60      	ldr	r3, [pc, #384]	; (8008fe8 <Motor_Config+0x26c>)
 8008e68:	4a5a      	ldr	r2, [pc, #360]	; (8008fd4 <Motor_Config+0x258>)
 8008e6a:	62da      	str	r2, [r3, #44]	; 0x2c
    Motor_Y_Data.kvalacc = 3.06;
 8008e6c:	4b5e      	ldr	r3, [pc, #376]	; (8008fe8 <Motor_Config+0x26c>)
 8008e6e:	4a59      	ldr	r2, [pc, #356]	; (8008fd4 <Motor_Config+0x258>)
 8008e70:	631a      	str	r2, [r3, #48]	; 0x30
    Motor_Y_Data.kvaldec = 3.06;
 8008e72:	4b5d      	ldr	r3, [pc, #372]	; (8008fe8 <Motor_Config+0x26c>)
 8008e74:	4a57      	ldr	r2, [pc, #348]	; (8008fd4 <Motor_Config+0x258>)
 8008e76:	635a      	str	r2, [r3, #52]	; 0x34
    Motor_Y_Data.intspeed = 61.52;
 8008e78:	4b5b      	ldr	r3, [pc, #364]	; (8008fe8 <Motor_Config+0x26c>)
 8008e7a:	4a57      	ldr	r2, [pc, #348]	; (8008fd8 <Motor_Config+0x25c>)
 8008e7c:	639a      	str	r2, [r3, #56]	; 0x38
    Motor_Y_Data.stslp = 392.1569e-6;
 8008e7e:	4b5a      	ldr	r3, [pc, #360]	; (8008fe8 <Motor_Config+0x26c>)
 8008e80:	4a56      	ldr	r2, [pc, #344]	; (8008fdc <Motor_Config+0x260>)
 8008e82:	63da      	str	r2, [r3, #60]	; 0x3c
    Motor_Y_Data.fnslpacc = 643.1372e-6;
 8008e84:	4b58      	ldr	r3, [pc, #352]	; (8008fe8 <Motor_Config+0x26c>)
 8008e86:	4a56      	ldr	r2, [pc, #344]	; (8008fe0 <Motor_Config+0x264>)
 8008e88:	641a      	str	r2, [r3, #64]	; 0x40
    Motor_Y_Data.fnslpdec = 643.1372e-6;
 8008e8a:	4b57      	ldr	r3, [pc, #348]	; (8008fe8 <Motor_Config+0x26c>)
 8008e8c:	4a54      	ldr	r2, [pc, #336]	; (8008fe0 <Motor_Config+0x264>)
 8008e8e:	645a      	str	r2, [r3, #68]	; 0x44
    Motor_Y_Data.kterm = 0;
 8008e90:	4b55      	ldr	r3, [pc, #340]	; (8008fe8 <Motor_Config+0x26c>)
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Motor_Y_Data.ocdth = 1 * 1500 * 1.00;
 8008e98:	4b53      	ldr	r3, [pc, #332]	; (8008fe8 <Motor_Config+0x26c>)
 8008e9a:	4a52      	ldr	r2, [pc, #328]	; (8008fe4 <Motor_Config+0x268>)
 8008e9c:	64da      	str	r2, [r3, #76]	; 0x4c
    Motor_Y_Data.stallth = 1000 * 1.00;
 8008e9e:	4b52      	ldr	r3, [pc, #328]	; (8008fe8 <Motor_Config+0x26c>)
 8008ea0:	4a4b      	ldr	r2, [pc, #300]	; (8008fd0 <Motor_Config+0x254>)
 8008ea2:	651a      	str	r2, [r3, #80]	; 0x50
    Motor_Y_Data.step_sel = MICROSTEP_1_128;
 8008ea4:	4b50      	ldr	r3, [pc, #320]	; (8008fe8 <Motor_Config+0x26c>)
 8008ea6:	2207      	movs	r2, #7
 8008ea8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    Motor_Y_Data.alarmen = 0xFF;
 8008eac:	4b4e      	ldr	r3, [pc, #312]	; (8008fe8 <Motor_Config+0x26c>)
 8008eae:	22ff      	movs	r2, #255	; 0xff
 8008eb0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    Motor_Y_Data.config = 0x2E88;
 8008eb4:	4b4c      	ldr	r3, [pc, #304]	; (8008fe8 <Motor_Config+0x26c>)
 8008eb6:	f642 6288 	movw	r2, #11912	; 0x2e88
 8008eba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    Motor_Z_Data.motorvoltage = 12.0;
 8008ebe:	4b4c      	ldr	r3, [pc, #304]	; (8008ff0 <Motor_Config+0x274>)
 8008ec0:	4a3d      	ldr	r2, [pc, #244]	; (8008fb8 <Motor_Config+0x23c>)
 8008ec2:	601a      	str	r2, [r3, #0]
    Motor_Z_Data.fullstepsperrevolution = 200;
 8008ec4:	4b4a      	ldr	r3, [pc, #296]	; (8008ff0 <Motor_Config+0x274>)
 8008ec6:	4a3d      	ldr	r2, [pc, #244]	; (8008fbc <Motor_Config+0x240>)
 8008ec8:	605a      	str	r2, [r3, #4]
    Motor_Z_Data.phasecurrent = 1.5;
 8008eca:	4b49      	ldr	r3, [pc, #292]	; (8008ff0 <Motor_Config+0x274>)
 8008ecc:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8008ed0:	609a      	str	r2, [r3, #8]
    Motor_Z_Data.phasevoltage = 3.0;
 8008ed2:	4b47      	ldr	r3, [pc, #284]	; (8008ff0 <Motor_Config+0x274>)
 8008ed4:	4a3a      	ldr	r2, [pc, #232]	; (8008fc0 <Motor_Config+0x244>)
 8008ed6:	60da      	str	r2, [r3, #12]
    Motor_Z_Data.speed = 100.0;
 8008ed8:	4b45      	ldr	r3, [pc, #276]	; (8008ff0 <Motor_Config+0x274>)
 8008eda:	4a3a      	ldr	r2, [pc, #232]	; (8008fc4 <Motor_Config+0x248>)
 8008edc:	611a      	str	r2, [r3, #16]
    Motor_Z_Data.acc = 100.0;
 8008ede:	4b44      	ldr	r3, [pc, #272]	; (8008ff0 <Motor_Config+0x274>)
 8008ee0:	4a38      	ldr	r2, [pc, #224]	; (8008fc4 <Motor_Config+0x248>)
 8008ee2:	615a      	str	r2, [r3, #20]
    Motor_Z_Data.dec = 50.0;
 8008ee4:	4b42      	ldr	r3, [pc, #264]	; (8008ff0 <Motor_Config+0x274>)
 8008ee6:	4a38      	ldr	r2, [pc, #224]	; (8008fc8 <Motor_Config+0x24c>)
 8008ee8:	619a      	str	r2, [r3, #24]
    Motor_Z_Data.maxspeed = 1200.0;
 8008eea:	4b41      	ldr	r3, [pc, #260]	; (8008ff0 <Motor_Config+0x274>)
 8008eec:	4a37      	ldr	r2, [pc, #220]	; (8008fcc <Motor_Config+0x250>)
 8008eee:	61da      	str	r2, [r3, #28]
    Motor_Z_Data.minspeed = 100.0;
 8008ef0:	4b3f      	ldr	r3, [pc, #252]	; (8008ff0 <Motor_Config+0x274>)
 8008ef2:	4a34      	ldr	r2, [pc, #208]	; (8008fc4 <Motor_Config+0x248>)
 8008ef4:	621a      	str	r2, [r3, #32]
    Motor_Z_Data.fsspd = 602.7;
 8008ef6:	4b3e      	ldr	r3, [pc, #248]	; (8008ff0 <Motor_Config+0x274>)
 8008ef8:	4a3c      	ldr	r2, [pc, #240]	; (8008fec <Motor_Config+0x270>)
 8008efa:	625a      	str	r2, [r3, #36]	; 0x24
    Motor_Z_Data.kvalhold = 3.06;
 8008efc:	4b3c      	ldr	r3, [pc, #240]	; (8008ff0 <Motor_Config+0x274>)
 8008efe:	4a35      	ldr	r2, [pc, #212]	; (8008fd4 <Motor_Config+0x258>)
 8008f00:	629a      	str	r2, [r3, #40]	; 0x28
    Motor_Z_Data.kvalrun = 3.06;
 8008f02:	4b3b      	ldr	r3, [pc, #236]	; (8008ff0 <Motor_Config+0x274>)
 8008f04:	4a33      	ldr	r2, [pc, #204]	; (8008fd4 <Motor_Config+0x258>)
 8008f06:	62da      	str	r2, [r3, #44]	; 0x2c
    Motor_Z_Data.kvalacc = 3.06;
 8008f08:	4b39      	ldr	r3, [pc, #228]	; (8008ff0 <Motor_Config+0x274>)
 8008f0a:	4a32      	ldr	r2, [pc, #200]	; (8008fd4 <Motor_Config+0x258>)
 8008f0c:	631a      	str	r2, [r3, #48]	; 0x30
    Motor_Z_Data.kvaldec = 3.06;
 8008f0e:	4b38      	ldr	r3, [pc, #224]	; (8008ff0 <Motor_Config+0x274>)
 8008f10:	4a30      	ldr	r2, [pc, #192]	; (8008fd4 <Motor_Config+0x258>)
 8008f12:	635a      	str	r2, [r3, #52]	; 0x34
    Motor_Z_Data.intspeed = 61.52;
 8008f14:	4b36      	ldr	r3, [pc, #216]	; (8008ff0 <Motor_Config+0x274>)
 8008f16:	4a30      	ldr	r2, [pc, #192]	; (8008fd8 <Motor_Config+0x25c>)
 8008f18:	639a      	str	r2, [r3, #56]	; 0x38
    Motor_Z_Data.stslp = 392.1569e-6;
 8008f1a:	4b35      	ldr	r3, [pc, #212]	; (8008ff0 <Motor_Config+0x274>)
 8008f1c:	4a2f      	ldr	r2, [pc, #188]	; (8008fdc <Motor_Config+0x260>)
 8008f1e:	63da      	str	r2, [r3, #60]	; 0x3c
    Motor_Z_Data.fnslpacc = 643.1372e-6;
 8008f20:	4b33      	ldr	r3, [pc, #204]	; (8008ff0 <Motor_Config+0x274>)
 8008f22:	4a2f      	ldr	r2, [pc, #188]	; (8008fe0 <Motor_Config+0x264>)
 8008f24:	641a      	str	r2, [r3, #64]	; 0x40
    Motor_Z_Data.fnslpdec = 643.1372e-6;
 8008f26:	4b32      	ldr	r3, [pc, #200]	; (8008ff0 <Motor_Config+0x274>)
 8008f28:	4a2d      	ldr	r2, [pc, #180]	; (8008fe0 <Motor_Config+0x264>)
 8008f2a:	645a      	str	r2, [r3, #68]	; 0x44
    Motor_Z_Data.kterm = 0;
 8008f2c:	4b30      	ldr	r3, [pc, #192]	; (8008ff0 <Motor_Config+0x274>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Motor_Z_Data.ocdth = 1 * 1500 * 1.00;
 8008f34:	4b2e      	ldr	r3, [pc, #184]	; (8008ff0 <Motor_Config+0x274>)
 8008f36:	4a2b      	ldr	r2, [pc, #172]	; (8008fe4 <Motor_Config+0x268>)
 8008f38:	64da      	str	r2, [r3, #76]	; 0x4c
    Motor_Z_Data.stallth = 1000 * 1.00;
 8008f3a:	4b2d      	ldr	r3, [pc, #180]	; (8008ff0 <Motor_Config+0x274>)
 8008f3c:	4a24      	ldr	r2, [pc, #144]	; (8008fd0 <Motor_Config+0x254>)
 8008f3e:	651a      	str	r2, [r3, #80]	; 0x50
    Motor_Z_Data.step_sel = MICROSTEP_1_128;
 8008f40:	4b2b      	ldr	r3, [pc, #172]	; (8008ff0 <Motor_Config+0x274>)
 8008f42:	2207      	movs	r2, #7
 8008f44:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    Motor_Z_Data.alarmen = 0xFF;
 8008f48:	4b29      	ldr	r3, [pc, #164]	; (8008ff0 <Motor_Config+0x274>)
 8008f4a:	22ff      	movs	r2, #255	; 0xff
 8008f4c:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    Motor_Z_Data.config = 0x2E88;
 8008f50:	4b27      	ldr	r3, [pc, #156]	; (8008ff0 <Motor_Config+0x274>)
 8008f52:	f642 6288 	movw	r2, #11912	; 0x2e88
 8008f56:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    Motor_M_Data.motorvoltage = 9.0;
 8008f5a:	4b26      	ldr	r3, [pc, #152]	; (8008ff4 <Motor_Config+0x278>)
 8008f5c:	4a26      	ldr	r2, [pc, #152]	; (8008ff8 <Motor_Config+0x27c>)
 8008f5e:	601a      	str	r2, [r3, #0]
    Motor_M_Data.fullstepsperrevolution = 200;
 8008f60:	4b24      	ldr	r3, [pc, #144]	; (8008ff4 <Motor_Config+0x278>)
 8008f62:	4a16      	ldr	r2, [pc, #88]	; (8008fbc <Motor_Config+0x240>)
 8008f64:	605a      	str	r2, [r3, #4]
    Motor_M_Data.phasecurrent = 1.5;
 8008f66:	4b23      	ldr	r3, [pc, #140]	; (8008ff4 <Motor_Config+0x278>)
 8008f68:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8008f6c:	609a      	str	r2, [r3, #8]
    Motor_M_Data.phasevoltage = 3.0;
 8008f6e:	4b21      	ldr	r3, [pc, #132]	; (8008ff4 <Motor_Config+0x278>)
 8008f70:	4a13      	ldr	r2, [pc, #76]	; (8008fc0 <Motor_Config+0x244>)
 8008f72:	60da      	str	r2, [r3, #12]
    Motor_M_Data.speed = 100.0;
 8008f74:	4b1f      	ldr	r3, [pc, #124]	; (8008ff4 <Motor_Config+0x278>)
 8008f76:	4a13      	ldr	r2, [pc, #76]	; (8008fc4 <Motor_Config+0x248>)
 8008f78:	611a      	str	r2, [r3, #16]
    Motor_M_Data.acc = 1000.0;
 8008f7a:	4b1e      	ldr	r3, [pc, #120]	; (8008ff4 <Motor_Config+0x278>)
 8008f7c:	4a14      	ldr	r2, [pc, #80]	; (8008fd0 <Motor_Config+0x254>)
 8008f7e:	615a      	str	r2, [r3, #20]
    Motor_M_Data.dec = 500.0;
 8008f80:	4b1c      	ldr	r3, [pc, #112]	; (8008ff4 <Motor_Config+0x278>)
 8008f82:	4a1e      	ldr	r2, [pc, #120]	; (8008ffc <Motor_Config+0x280>)
 8008f84:	619a      	str	r2, [r3, #24]
    Motor_M_Data.maxspeed = 1200.0;
 8008f86:	4b1b      	ldr	r3, [pc, #108]	; (8008ff4 <Motor_Config+0x278>)
 8008f88:	4a10      	ldr	r2, [pc, #64]	; (8008fcc <Motor_Config+0x250>)
 8008f8a:	61da      	str	r2, [r3, #28]
    Motor_M_Data.minspeed = 0.0;
 8008f8c:	4b19      	ldr	r3, [pc, #100]	; (8008ff4 <Motor_Config+0x278>)
 8008f8e:	f04f 0200 	mov.w	r2, #0
 8008f92:	621a      	str	r2, [r3, #32]
    Motor_M_Data.fsspd = 602.7;
 8008f94:	4b17      	ldr	r3, [pc, #92]	; (8008ff4 <Motor_Config+0x278>)
 8008f96:	4a15      	ldr	r2, [pc, #84]	; (8008fec <Motor_Config+0x270>)
 8008f98:	625a      	str	r2, [r3, #36]	; 0x24
    Motor_M_Data.kvalhold = 3.06;
 8008f9a:	4b16      	ldr	r3, [pc, #88]	; (8008ff4 <Motor_Config+0x278>)
 8008f9c:	4a0d      	ldr	r2, [pc, #52]	; (8008fd4 <Motor_Config+0x258>)
 8008f9e:	629a      	str	r2, [r3, #40]	; 0x28
    Motor_M_Data.kvalrun = 3.06;
 8008fa0:	4b14      	ldr	r3, [pc, #80]	; (8008ff4 <Motor_Config+0x278>)
 8008fa2:	4a0c      	ldr	r2, [pc, #48]	; (8008fd4 <Motor_Config+0x258>)
 8008fa4:	62da      	str	r2, [r3, #44]	; 0x2c
    Motor_M_Data.kvalacc = 3.06;
 8008fa6:	4b13      	ldr	r3, [pc, #76]	; (8008ff4 <Motor_Config+0x278>)
 8008fa8:	4a0a      	ldr	r2, [pc, #40]	; (8008fd4 <Motor_Config+0x258>)
 8008faa:	631a      	str	r2, [r3, #48]	; 0x30
    Motor_M_Data.kvaldec = 3.06;
 8008fac:	4b11      	ldr	r3, [pc, #68]	; (8008ff4 <Motor_Config+0x278>)
 8008fae:	4a09      	ldr	r2, [pc, #36]	; (8008fd4 <Motor_Config+0x258>)
 8008fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8008fb2:	e025      	b.n	8009000 <Motor_Config+0x284>
 8008fb4:	20000cf8 	.word	0x20000cf8
 8008fb8:	41400000 	.word	0x41400000
 8008fbc:	43480000 	.word	0x43480000
 8008fc0:	40400000 	.word	0x40400000
 8008fc4:	42c80000 	.word	0x42c80000
 8008fc8:	42480000 	.word	0x42480000
 8008fcc:	44960000 	.word	0x44960000
 8008fd0:	447a0000 	.word	0x447a0000
 8008fd4:	4043d70a 	.word	0x4043d70a
 8008fd8:	4276147b 	.word	0x4276147b
 8008fdc:	39cd9a68 	.word	0x39cd9a68
 8008fe0:	3a289835 	.word	0x3a289835
 8008fe4:	44bb8000 	.word	0x44bb8000
 8008fe8:	20000c64 	.word	0x20000c64
 8008fec:	4416accd 	.word	0x4416accd
 8008ff0:	20000c0c 	.word	0x20000c0c
 8008ff4:	20000dc8 	.word	0x20000dc8
 8008ff8:	41100000 	.word	0x41100000
 8008ffc:	43fa0000 	.word	0x43fa0000
    Motor_M_Data.intspeed = 61.52;
 8009000:	4b4f      	ldr	r3, [pc, #316]	; (8009140 <Motor_Config+0x3c4>)
 8009002:	4a50      	ldr	r2, [pc, #320]	; (8009144 <Motor_Config+0x3c8>)
 8009004:	639a      	str	r2, [r3, #56]	; 0x38
    Motor_M_Data.stslp = 392.1569e-6;
 8009006:	4b4e      	ldr	r3, [pc, #312]	; (8009140 <Motor_Config+0x3c4>)
 8009008:	4a4f      	ldr	r2, [pc, #316]	; (8009148 <Motor_Config+0x3cc>)
 800900a:	63da      	str	r2, [r3, #60]	; 0x3c
    Motor_M_Data.fnslpacc = 643.1372e-6;
 800900c:	4b4c      	ldr	r3, [pc, #304]	; (8009140 <Motor_Config+0x3c4>)
 800900e:	4a4f      	ldr	r2, [pc, #316]	; (800914c <Motor_Config+0x3d0>)
 8009010:	641a      	str	r2, [r3, #64]	; 0x40
    Motor_M_Data.fnslpdec = 643.1372e-6;
 8009012:	4b4b      	ldr	r3, [pc, #300]	; (8009140 <Motor_Config+0x3c4>)
 8009014:	4a4d      	ldr	r2, [pc, #308]	; (800914c <Motor_Config+0x3d0>)
 8009016:	645a      	str	r2, [r3, #68]	; 0x44
    Motor_M_Data.kterm = 0;
 8009018:	4b49      	ldr	r3, [pc, #292]	; (8009140 <Motor_Config+0x3c4>)
 800901a:	2200      	movs	r2, #0
 800901c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Motor_M_Data.ocdth = 2000 * 1.00;
 8009020:	4b47      	ldr	r3, [pc, #284]	; (8009140 <Motor_Config+0x3c4>)
 8009022:	4a4b      	ldr	r2, [pc, #300]	; (8009150 <Motor_Config+0x3d4>)
 8009024:	64da      	str	r2, [r3, #76]	; 0x4c
    Motor_M_Data.stallth = 1500 * 1.00;
 8009026:	4b46      	ldr	r3, [pc, #280]	; (8009140 <Motor_Config+0x3c4>)
 8009028:	4a4a      	ldr	r2, [pc, #296]	; (8009154 <Motor_Config+0x3d8>)
 800902a:	651a      	str	r2, [r3, #80]	; 0x50
    Motor_M_Data.step_sel = MICROSTEP_1_128;
 800902c:	4b44      	ldr	r3, [pc, #272]	; (8009140 <Motor_Config+0x3c4>)
 800902e:	2207      	movs	r2, #7
 8009030:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    Motor_M_Data.alarmen = 0xFF;
 8009034:	4b42      	ldr	r3, [pc, #264]	; (8009140 <Motor_Config+0x3c4>)
 8009036:	22ff      	movs	r2, #255	; 0xff
 8009038:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    Motor_M_Data.config = 0x2E88;
 800903c:	4b40      	ldr	r3, [pc, #256]	; (8009140 <Motor_Config+0x3c4>)
 800903e:	f642 6288 	movw	r2, #11912	; 0x2e88
 8009042:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    L6470_ENABLE();
 8009046:	2201      	movs	r2, #1
 8009048:	2120      	movs	r1, #32
 800904a:	4843      	ldr	r0, [pc, #268]	; (8009158 <Motor_Config+0x3dc>)
 800904c:	f7f9 f88e 	bl	800216c <HAL_GPIO_WritePin>

    L6470_ResetDevice(0);
 8009050:	2000      	movs	r0, #0
 8009052:	f7fd f81d 	bl	8006090 <L6470_ResetDevice>
    L6470_GetStatus(0);
 8009056:	2000      	movs	r0, #0
 8009058:	f7fd f8c4 	bl	80061e4 <L6470_GetStatus>

    L6470_ResetDevice(1);
 800905c:	2001      	movs	r0, #1
 800905e:	f7fd f817 	bl	8006090 <L6470_ResetDevice>
    L6470_GetStatus(1);
 8009062:	2001      	movs	r0, #1
 8009064:	f7fd f8be 	bl	80061e4 <L6470_GetStatus>

    L6470_ResetDevice(2);
 8009068:	2002      	movs	r0, #2
 800906a:	f7fd f811 	bl	8006090 <L6470_ResetDevice>
    L6470_GetStatus(2);
 800906e:	2002      	movs	r0, #2
 8009070:	f7fd f8b8 	bl	80061e4 <L6470_GetStatus>

    L6470_ResetDevice(3);
 8009074:	2003      	movs	r0, #3
 8009076:	f7fd f80b 	bl	8006090 <L6470_ResetDevice>
    L6470_GetStatus(3);
 800907a:	2003      	movs	r0, #3
 800907c:	f7fd f8b2 	bl	80061e4 <L6470_GetStatus>

    Motor_X_Handler.DaisyChainPosition = 0;
 8009080:	4b36      	ldr	r3, [pc, #216]	; (800915c <Motor_Config+0x3e0>)
 8009082:	2200      	movs	r2, #0
 8009084:	701a      	strb	r2, [r3, #0]
    Motor_X_Handler.Command = &L6470Command;
 8009086:	4b35      	ldr	r3, [pc, #212]	; (800915c <Motor_Config+0x3e0>)
 8009088:	4a35      	ldr	r2, [pc, #212]	; (8009160 <Motor_Config+0x3e4>)
 800908a:	609a      	str	r2, [r3, #8]
    L6470_Config(&Motor_X_Handler, &Motor_X_Data);
 800908c:	4935      	ldr	r1, [pc, #212]	; (8009164 <Motor_Config+0x3e8>)
 800908e:	4833      	ldr	r0, [pc, #204]	; (800915c <Motor_Config+0x3e0>)
 8009090:	f7fd fbc2 	bl	8006818 <L6470_Config>

    Motor_Y_Handler.DaisyChainPosition = 1;
 8009094:	4b34      	ldr	r3, [pc, #208]	; (8009168 <Motor_Config+0x3ec>)
 8009096:	2201      	movs	r2, #1
 8009098:	701a      	strb	r2, [r3, #0]
    Motor_Y_Handler.Command = &L6470Command;
 800909a:	4b33      	ldr	r3, [pc, #204]	; (8009168 <Motor_Config+0x3ec>)
 800909c:	4a30      	ldr	r2, [pc, #192]	; (8009160 <Motor_Config+0x3e4>)
 800909e:	609a      	str	r2, [r3, #8]
    L6470_Config(&Motor_Y_Handler, &Motor_Y_Data);
 80090a0:	4932      	ldr	r1, [pc, #200]	; (800916c <Motor_Config+0x3f0>)
 80090a2:	4831      	ldr	r0, [pc, #196]	; (8009168 <Motor_Config+0x3ec>)
 80090a4:	f7fd fbb8 	bl	8006818 <L6470_Config>

    Motor_Z_Handler.DaisyChainPosition = 2;
 80090a8:	4b31      	ldr	r3, [pc, #196]	; (8009170 <Motor_Config+0x3f4>)
 80090aa:	2202      	movs	r2, #2
 80090ac:	701a      	strb	r2, [r3, #0]
    Motor_Z_Handler.Command = &L6470Command;
 80090ae:	4b30      	ldr	r3, [pc, #192]	; (8009170 <Motor_Config+0x3f4>)
 80090b0:	4a2b      	ldr	r2, [pc, #172]	; (8009160 <Motor_Config+0x3e4>)
 80090b2:	609a      	str	r2, [r3, #8]
    L6470_Config(&Motor_Z_Handler, &Motor_Z_Data);
 80090b4:	492f      	ldr	r1, [pc, #188]	; (8009174 <Motor_Config+0x3f8>)
 80090b6:	482e      	ldr	r0, [pc, #184]	; (8009170 <Motor_Config+0x3f4>)
 80090b8:	f7fd fbae 	bl	8006818 <L6470_Config>

    Motor_M_Handler.DaisyChainPosition = 3;
 80090bc:	4b2e      	ldr	r3, [pc, #184]	; (8009178 <Motor_Config+0x3fc>)
 80090be:	2203      	movs	r2, #3
 80090c0:	701a      	strb	r2, [r3, #0]
    Motor_M_Handler.Command = &L6470Command;
 80090c2:	4b2d      	ldr	r3, [pc, #180]	; (8009178 <Motor_Config+0x3fc>)
 80090c4:	4a26      	ldr	r2, [pc, #152]	; (8009160 <Motor_Config+0x3e4>)
 80090c6:	609a      	str	r2, [r3, #8]
    L6470_Config(&Motor_M_Handler, &Motor_M_Data);
 80090c8:	491d      	ldr	r1, [pc, #116]	; (8009140 <Motor_Config+0x3c4>)
 80090ca:	482b      	ldr	r0, [pc, #172]	; (8009178 <Motor_Config+0x3fc>)
 80090cc:	f7fd fba4 	bl	8006818 <L6470_Config>


    uint16_t status_register_x = L6470_GetStatus(0);
 80090d0:	2000      	movs	r0, #0
 80090d2:	f7fd f887 	bl	80061e4 <L6470_GetStatus>
 80090d6:	4603      	mov	r3, r0
 80090d8:	80fb      	strh	r3, [r7, #6]
    uint16_t status_register_y = L6470_GetStatus(1);
 80090da:	2001      	movs	r0, #1
 80090dc:	f7fd f882 	bl	80061e4 <L6470_GetStatus>
 80090e0:	4603      	mov	r3, r0
 80090e2:	80bb      	strh	r3, [r7, #4]
    uint16_t status_register_z = L6470_GetStatus(2);
 80090e4:	2002      	movs	r0, #2
 80090e6:	f7fd f87d 	bl	80061e4 <L6470_GetStatus>
 80090ea:	4603      	mov	r3, r0
 80090ec:	807b      	strh	r3, [r7, #2]
    uint16_t status_register_m = L6470_GetStatus(3);
 80090ee:	2003      	movs	r0, #3
 80090f0:	f7fd f878 	bl	80061e4 <L6470_GetStatus>
 80090f4:	4603      	mov	r3, r0
 80090f6:	803b      	strh	r3, [r7, #0]

    (void)status_register_m;


    if (status_register_z & STATUS_SW_F)
 80090f8:	887b      	ldrh	r3, [r7, #2]
 80090fa:	f003 0304 	and.w	r3, r3, #4
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d004      	beq.n	800910c <Motor_Config+0x390>
	{
	L6470_ReleaseSW(2, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 8009102:	2201      	movs	r2, #1
 8009104:	2100      	movs	r1, #0
 8009106:	2002      	movs	r0, #2
 8009108:	f7fc ff36 	bl	8005f78 <L6470_ReleaseSW>
	}

    if (status_register_x & STATUS_SW_F)
 800910c:	88fb      	ldrh	r3, [r7, #6]
 800910e:	f003 0304 	and.w	r3, r3, #4
 8009112:	2b00      	cmp	r3, #0
 8009114:	d004      	beq.n	8009120 <Motor_Config+0x3a4>
	{
	L6470_PrepareReleaseSW(0, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 8009116:	2201      	movs	r2, #1
 8009118:	2100      	movs	r1, #0
 800911a:	2000      	movs	r0, #0
 800911c:	f7fd f95a 	bl	80063d4 <L6470_PrepareReleaseSW>
	}

    if (status_register_y & STATUS_SW_F)
 8009120:	88bb      	ldrh	r3, [r7, #4]
 8009122:	f003 0304 	and.w	r3, r3, #4
 8009126:	2b00      	cmp	r3, #0
 8009128:	d004      	beq.n	8009134 <Motor_Config+0x3b8>
	{
	L6470_PrepareReleaseSW(1, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 800912a:	2201      	movs	r2, #1
 800912c:	2100      	movs	r1, #0
 800912e:	2001      	movs	r0, #1
 8009130:	f7fd f950 	bl	80063d4 <L6470_PrepareReleaseSW>
	}

    L6470_PerformPreparedApplicationCommand();
 8009134:	f7fd fa2e 	bl	8006594 <L6470_PerformPreparedApplicationCommand>

    }
 8009138:	bf00      	nop
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20000dc8 	.word	0x20000dc8
 8009144:	4276147b 	.word	0x4276147b
 8009148:	39cd9a68 	.word	0x39cd9a68
 800914c:	3a289835 	.word	0x3a289835
 8009150:	44fa0000 	.word	0x44fa0000
 8009154:	44bb8000 	.word	0x44bb8000
 8009158:	40020400 	.word	0x40020400
 800915c:	20000d50 	.word	0x20000d50
 8009160:	20000008 	.word	0x20000008
 8009164:	20000cf8 	.word	0x20000cf8
 8009168:	20000d8c 	.word	0x20000d8c
 800916c:	20000c64 	.word	0x20000c64
 8009170:	20000cbc 	.word	0x20000cbc
 8009174:	20000c0c 	.word	0x20000c0c
 8009178:	20000bd0 	.word	0x20000bd0

0800917c <Ring_Buffer_Init>:
static uint32_t Read_PTR;

#define WRITE_PTR (uint32_t)( BUFFER_SIZE - (huart->hdmarx->Instance->NDTR))

void Ring_Buffer_Init(UART_HandleTypeDef *_huart)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
	huart = _huart;
 8009184:	4a0b      	ldr	r2, [pc, #44]	; (80091b4 <Ring_Buffer_Init+0x38>)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6013      	str	r3, [r2, #0]
	huart->hdmarx->Instance->NDTR = BUFFER_SIZE;
 800918a:	4b0a      	ldr	r3, [pc, #40]	; (80091b4 <Ring_Buffer_Init+0x38>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2280      	movs	r2, #128	; 0x80
 8009194:	605a      	str	r2, [r3, #4]
	Read_PTR = 0;
 8009196:	4b08      	ldr	r3, [pc, #32]	; (80091b8 <Ring_Buffer_Init+0x3c>)
 8009198:	2200      	movs	r2, #0
 800919a:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(huart, RX_DMA_Buffer, BUFFER_SIZE);
 800919c:	4b05      	ldr	r3, [pc, #20]	; (80091b4 <Ring_Buffer_Init+0x38>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2280      	movs	r2, #128	; 0x80
 80091a2:	4906      	ldr	r1, [pc, #24]	; (80091bc <Ring_Buffer_Init+0x40>)
 80091a4:	4618      	mov	r0, r3
 80091a6:	f7fb fd1f 	bl	8004be8 <HAL_UART_Receive_DMA>

}
 80091aa:	bf00      	nop
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	20000ad4 	.word	0x20000ad4
 80091b8:	20000ad8 	.word	0x20000ad8
 80091bc:	20000a54 	.word	0x20000a54

080091c0 <Ring_Buffer_Get_Char>:

	return (Read_PTR == WRITE_PTR)?1:0;
}

uint8_t Ring_Buffer_Get_Char(uint8_t* data)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
	if (WRITE_PTR == Read_PTR)
 80091c8:	4b12      	ldr	r3, [pc, #72]	; (8009214 <Ring_Buffer_Get_Char+0x54>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 80091d6:	4b10      	ldr	r3, [pc, #64]	; (8009218 <Ring_Buffer_Get_Char+0x58>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d101      	bne.n	80091e2 <Ring_Buffer_Get_Char+0x22>
	{
		return 0;
 80091de:	2300      	movs	r3, #0
 80091e0:	e012      	b.n	8009208 <Ring_Buffer_Get_Char+0x48>
	}
	else
	{
		*data = RX_DMA_Buffer[Read_PTR];
 80091e2:	4b0d      	ldr	r3, [pc, #52]	; (8009218 <Ring_Buffer_Get_Char+0x58>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a0d      	ldr	r2, [pc, #52]	; (800921c <Ring_Buffer_Get_Char+0x5c>)
 80091e8:	5cd2      	ldrb	r2, [r2, r3]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	701a      	strb	r2, [r3, #0]

		Read_PTR++;
 80091ee:	4b0a      	ldr	r3, [pc, #40]	; (8009218 <Ring_Buffer_Get_Char+0x58>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	3301      	adds	r3, #1
 80091f4:	4a08      	ldr	r2, [pc, #32]	; (8009218 <Ring_Buffer_Get_Char+0x58>)
 80091f6:	6013      	str	r3, [r2, #0]

		if (Read_PTR == BUFFER_SIZE)
 80091f8:	4b07      	ldr	r3, [pc, #28]	; (8009218 <Ring_Buffer_Get_Char+0x58>)
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	2b80      	cmp	r3, #128	; 0x80
 80091fe:	d102      	bne.n	8009206 <Ring_Buffer_Get_Char+0x46>
		{
			Read_PTR = 0;
 8009200:	4b05      	ldr	r3, [pc, #20]	; (8009218 <Ring_Buffer_Get_Char+0x58>)
 8009202:	2200      	movs	r2, #0
 8009204:	601a      	str	r2, [r3, #0]
		}

		return 1;
 8009206:	2301      	movs	r3, #1
	}
}
 8009208:	4618      	mov	r0, r3
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr
 8009214:	20000ad4 	.word	0x20000ad4
 8009218:	20000ad8 	.word	0x20000ad8
 800921c:	20000a54 	.word	0x20000a54

08009220 <Ring_Buffer_Get_Count>:

uint8_t Ring_Buffer_Get_Count(void)
{
 8009220:	b480      	push	{r7}
 8009222:	af00      	add	r7, sp, #0
	if (WRITE_PTR >= Read_PTR)
 8009224:	4b16      	ldr	r3, [pc, #88]	; (8009280 <Ring_Buffer_Get_Count+0x60>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	685b      	ldr	r3, [r3, #4]
 800922e:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 8009232:	4b14      	ldr	r3, [pc, #80]	; (8009284 <Ring_Buffer_Get_Count+0x64>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	429a      	cmp	r2, r3
 8009238:	d30f      	bcc.n	800925a <Ring_Buffer_Get_Count+0x3a>
	{
		return (WRITE_PTR - Read_PTR);
 800923a:	4b11      	ldr	r3, [pc, #68]	; (8009280 <Ring_Buffer_Get_Count+0x60>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	425b      	negs	r3, r3
 8009248:	b2da      	uxtb	r2, r3
 800924a:	4b0e      	ldr	r3, [pc, #56]	; (8009284 <Ring_Buffer_Get_Count+0x64>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	b2db      	uxtb	r3, r3
 8009250:	1ad3      	subs	r3, r2, r3
 8009252:	b2db      	uxtb	r3, r3
 8009254:	3b80      	subs	r3, #128	; 0x80
 8009256:	b2db      	uxtb	r3, r3
 8009258:	e00c      	b.n	8009274 <Ring_Buffer_Get_Count+0x54>
	}
	return (BUFFER_SIZE - (Read_PTR - WRITE_PTR));
 800925a:	4b09      	ldr	r3, [pc, #36]	; (8009280 <Ring_Buffer_Get_Count+0x60>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	685b      	ldr	r3, [r3, #4]
 8009264:	b2da      	uxtb	r2, r3
 8009266:	4b07      	ldr	r3, [pc, #28]	; (8009284 <Ring_Buffer_Get_Count+0x64>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	b2db      	uxtb	r3, r3
 800926c:	4413      	add	r3, r2
 800926e:	b2db      	uxtb	r3, r3
 8009270:	425b      	negs	r3, r3
 8009272:	b2db      	uxtb	r3, r3
}
 8009274:	4618      	mov	r0, r3
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	20000ad4 	.word	0x20000ad4
 8009284:	20000ad8 	.word	0x20000ad8

08009288 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 800928c:	4b17      	ldr	r3, [pc, #92]	; (80092ec <MX_SPI1_Init+0x64>)
 800928e:	4a18      	ldr	r2, [pc, #96]	; (80092f0 <MX_SPI1_Init+0x68>)
 8009290:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8009292:	4b16      	ldr	r3, [pc, #88]	; (80092ec <MX_SPI1_Init+0x64>)
 8009294:	f44f 7282 	mov.w	r2, #260	; 0x104
 8009298:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800929a:	4b14      	ldr	r3, [pc, #80]	; (80092ec <MX_SPI1_Init+0x64>)
 800929c:	2200      	movs	r2, #0
 800929e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80092a0:	4b12      	ldr	r3, [pc, #72]	; (80092ec <MX_SPI1_Init+0x64>)
 80092a2:	2200      	movs	r2, #0
 80092a4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80092a6:	4b11      	ldr	r3, [pc, #68]	; (80092ec <MX_SPI1_Init+0x64>)
 80092a8:	2202      	movs	r2, #2
 80092aa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80092ac:	4b0f      	ldr	r3, [pc, #60]	; (80092ec <MX_SPI1_Init+0x64>)
 80092ae:	2201      	movs	r2, #1
 80092b0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80092b2:	4b0e      	ldr	r3, [pc, #56]	; (80092ec <MX_SPI1_Init+0x64>)
 80092b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80092b8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80092ba:	4b0c      	ldr	r3, [pc, #48]	; (80092ec <MX_SPI1_Init+0x64>)
 80092bc:	2218      	movs	r2, #24
 80092be:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80092c0:	4b0a      	ldr	r3, [pc, #40]	; (80092ec <MX_SPI1_Init+0x64>)
 80092c2:	2200      	movs	r2, #0
 80092c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80092c6:	4b09      	ldr	r3, [pc, #36]	; (80092ec <MX_SPI1_Init+0x64>)
 80092c8:	2200      	movs	r2, #0
 80092ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092cc:	4b07      	ldr	r3, [pc, #28]	; (80092ec <MX_SPI1_Init+0x64>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80092d2:	4b06      	ldr	r3, [pc, #24]	; (80092ec <MX_SPI1_Init+0x64>)
 80092d4:	220a      	movs	r2, #10
 80092d6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80092d8:	4804      	ldr	r0, [pc, #16]	; (80092ec <MX_SPI1_Init+0x64>)
 80092da:	f7fa fcf7 	bl	8003ccc <HAL_SPI_Init>
 80092de:	4603      	mov	r3, r0
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d001      	beq.n	80092e8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80092e4:	f7ff fd38 	bl	8008d58 <Error_Handler>
  }

}
 80092e8:	bf00      	nop
 80092ea:	bd80      	pop	{r7, pc}
 80092ec:	20000e20 	.word	0x20000e20
 80092f0:	40013000 	.word	0x40013000

080092f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b08a      	sub	sp, #40	; 0x28
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092fc:	f107 0314 	add.w	r3, r7, #20
 8009300:	2200      	movs	r2, #0
 8009302:	601a      	str	r2, [r3, #0]
 8009304:	605a      	str	r2, [r3, #4]
 8009306:	609a      	str	r2, [r3, #8]
 8009308:	60da      	str	r2, [r3, #12]
 800930a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	4a28      	ldr	r2, [pc, #160]	; (80093b4 <HAL_SPI_MspInit+0xc0>)
 8009312:	4293      	cmp	r3, r2
 8009314:	d149      	bne.n	80093aa <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8009316:	2300      	movs	r3, #0
 8009318:	613b      	str	r3, [r7, #16]
 800931a:	4a27      	ldr	r2, [pc, #156]	; (80093b8 <HAL_SPI_MspInit+0xc4>)
 800931c:	4b26      	ldr	r3, [pc, #152]	; (80093b8 <HAL_SPI_MspInit+0xc4>)
 800931e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009320:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009324:	6453      	str	r3, [r2, #68]	; 0x44
 8009326:	4b24      	ldr	r3, [pc, #144]	; (80093b8 <HAL_SPI_MspInit+0xc4>)
 8009328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800932a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800932e:	613b      	str	r3, [r7, #16]
 8009330:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009332:	2300      	movs	r3, #0
 8009334:	60fb      	str	r3, [r7, #12]
 8009336:	4a20      	ldr	r2, [pc, #128]	; (80093b8 <HAL_SPI_MspInit+0xc4>)
 8009338:	4b1f      	ldr	r3, [pc, #124]	; (80093b8 <HAL_SPI_MspInit+0xc4>)
 800933a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800933c:	f043 0301 	orr.w	r3, r3, #1
 8009340:	6313      	str	r3, [r2, #48]	; 0x30
 8009342:	4b1d      	ldr	r3, [pc, #116]	; (80093b8 <HAL_SPI_MspInit+0xc4>)
 8009344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009346:	f003 0301 	and.w	r3, r3, #1
 800934a:	60fb      	str	r3, [r7, #12]
 800934c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800934e:	2300      	movs	r3, #0
 8009350:	60bb      	str	r3, [r7, #8]
 8009352:	4a19      	ldr	r2, [pc, #100]	; (80093b8 <HAL_SPI_MspInit+0xc4>)
 8009354:	4b18      	ldr	r3, [pc, #96]	; (80093b8 <HAL_SPI_MspInit+0xc4>)
 8009356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009358:	f043 0302 	orr.w	r3, r3, #2
 800935c:	6313      	str	r3, [r2, #48]	; 0x30
 800935e:	4b16      	ldr	r3, [pc, #88]	; (80093b8 <HAL_SPI_MspInit+0xc4>)
 8009360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	60bb      	str	r3, [r7, #8]
 8009368:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800936a:	23c0      	movs	r3, #192	; 0xc0
 800936c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800936e:	2302      	movs	r3, #2
 8009370:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009372:	2300      	movs	r3, #0
 8009374:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009376:	2303      	movs	r3, #3
 8009378:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800937a:	2305      	movs	r3, #5
 800937c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800937e:	f107 0314 	add.w	r3, r7, #20
 8009382:	4619      	mov	r1, r3
 8009384:	480d      	ldr	r0, [pc, #52]	; (80093bc <HAL_SPI_MspInit+0xc8>)
 8009386:	f7f8 fc5f 	bl	8001c48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800938a:	2308      	movs	r3, #8
 800938c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800938e:	2302      	movs	r3, #2
 8009390:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009392:	2300      	movs	r3, #0
 8009394:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009396:	2303      	movs	r3, #3
 8009398:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800939a:	2305      	movs	r3, #5
 800939c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800939e:	f107 0314 	add.w	r3, r7, #20
 80093a2:	4619      	mov	r1, r3
 80093a4:	4806      	ldr	r0, [pc, #24]	; (80093c0 <HAL_SPI_MspInit+0xcc>)
 80093a6:	f7f8 fc4f 	bl	8001c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80093aa:	bf00      	nop
 80093ac:	3728      	adds	r7, #40	; 0x28
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	40013000 	.word	0x40013000
 80093b8:	40023800 	.word	0x40023800
 80093bc:	40020000 	.word	0x40020000
 80093c0:	40020400 	.word	0x40020400

080093c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80093ca:	2300      	movs	r3, #0
 80093cc:	607b      	str	r3, [r7, #4]
 80093ce:	4a10      	ldr	r2, [pc, #64]	; (8009410 <HAL_MspInit+0x4c>)
 80093d0:	4b0f      	ldr	r3, [pc, #60]	; (8009410 <HAL_MspInit+0x4c>)
 80093d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093d8:	6453      	str	r3, [r2, #68]	; 0x44
 80093da:	4b0d      	ldr	r3, [pc, #52]	; (8009410 <HAL_MspInit+0x4c>)
 80093dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093e2:	607b      	str	r3, [r7, #4]
 80093e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80093e6:	2300      	movs	r3, #0
 80093e8:	603b      	str	r3, [r7, #0]
 80093ea:	4a09      	ldr	r2, [pc, #36]	; (8009410 <HAL_MspInit+0x4c>)
 80093ec:	4b08      	ldr	r3, [pc, #32]	; (8009410 <HAL_MspInit+0x4c>)
 80093ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093f4:	6413      	str	r3, [r2, #64]	; 0x40
 80093f6:	4b06      	ldr	r3, [pc, #24]	; (8009410 <HAL_MspInit+0x4c>)
 80093f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093fe:	603b      	str	r3, [r7, #0]
 8009400:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8009402:	2007      	movs	r0, #7
 8009404:	f7f7 febe 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009408:	bf00      	nop
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}
 8009410:	40023800 	.word	0x40023800

08009414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009414:	b480      	push	{r7}
 8009416:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009418:	bf00      	nop
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009422:	b480      	push	{r7}
 8009424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009426:	e7fe      	b.n	8009426 <HardFault_Handler+0x4>

08009428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009428:	b480      	push	{r7}
 800942a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800942c:	e7fe      	b.n	800942c <MemManage_Handler+0x4>

0800942e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800942e:	b480      	push	{r7}
 8009430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009432:	e7fe      	b.n	8009432 <BusFault_Handler+0x4>

08009434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009434:	b480      	push	{r7}
 8009436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009438:	e7fe      	b.n	8009438 <UsageFault_Handler+0x4>

0800943a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800943a:	b480      	push	{r7}
 800943c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800943e:	bf00      	nop
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009448:	b480      	push	{r7}
 800944a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800944c:	bf00      	nop
 800944e:	46bd      	mov	sp, r7
 8009450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009454:	4770      	bx	lr

08009456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009456:	b480      	push	{r7}
 8009458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800945a:	bf00      	nop
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009468:	f7f7 fd7c 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800946c:	bf00      	nop
 800946e:	bd80      	pop	{r7, pc}

08009470 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8009474:	2001      	movs	r0, #1
 8009476:	f7f8 feab 	bl	80021d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800947a:	bf00      	nop
 800947c:	bd80      	pop	{r7, pc}

0800947e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800947e:	b580      	push	{r7, lr}
 8009480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8009482:	2002      	movs	r0, #2
 8009484:	f7f8 fea4 	bl	80021d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8009488:	bf00      	nop
 800948a:	bd80      	pop	{r7, pc}

0800948c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800948c:	b580      	push	{r7, lr}
 800948e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8009490:	4802      	ldr	r0, [pc, #8]	; (800949c <DMA1_Stream5_IRQHandler+0x10>)
 8009492:	f7f8 f971 	bl	8001778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8009496:	bf00      	nop
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	20000f38 	.word	0x20000f38

080094a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80094a4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80094a8:	f7f8 fe92 	bl	80021d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80094ac:	bf00      	nop
 80094ae:	bd80      	pop	{r7, pc}

080094b0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	b084      	sub	sp, #16
 80094b4:	af00      	add	r7, sp, #0
 80094b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80094b8:	4b11      	ldr	r3, [pc, #68]	; (8009500 <_sbrk+0x50>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d102      	bne.n	80094c6 <_sbrk+0x16>
		heap_end = &end;
 80094c0:	4b0f      	ldr	r3, [pc, #60]	; (8009500 <_sbrk+0x50>)
 80094c2:	4a10      	ldr	r2, [pc, #64]	; (8009504 <_sbrk+0x54>)
 80094c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80094c6:	4b0e      	ldr	r3, [pc, #56]	; (8009500 <_sbrk+0x50>)
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80094cc:	4b0c      	ldr	r3, [pc, #48]	; (8009500 <_sbrk+0x50>)
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4413      	add	r3, r2
 80094d4:	466a      	mov	r2, sp
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d907      	bls.n	80094ea <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80094da:	f000 facf 	bl	8009a7c <__errno>
 80094de:	4602      	mov	r2, r0
 80094e0:	230c      	movs	r3, #12
 80094e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80094e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80094e8:	e006      	b.n	80094f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80094ea:	4b05      	ldr	r3, [pc, #20]	; (8009500 <_sbrk+0x50>)
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	4413      	add	r3, r2
 80094f2:	4a03      	ldr	r2, [pc, #12]	; (8009500 <_sbrk+0x50>)
 80094f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80094f6:	68fb      	ldr	r3, [r7, #12]
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3710      	adds	r7, #16
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}
 8009500:	20000adc 	.word	0x20000adc
 8009504:	20000fe8 	.word	0x20000fe8

08009508 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009508:	b480      	push	{r7}
 800950a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800950c:	4a16      	ldr	r2, [pc, #88]	; (8009568 <SystemInit+0x60>)
 800950e:	4b16      	ldr	r3, [pc, #88]	; (8009568 <SystemInit+0x60>)
 8009510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009514:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009518:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800951c:	4a13      	ldr	r2, [pc, #76]	; (800956c <SystemInit+0x64>)
 800951e:	4b13      	ldr	r3, [pc, #76]	; (800956c <SystemInit+0x64>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f043 0301 	orr.w	r3, r3, #1
 8009526:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009528:	4b10      	ldr	r3, [pc, #64]	; (800956c <SystemInit+0x64>)
 800952a:	2200      	movs	r2, #0
 800952c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800952e:	4a0f      	ldr	r2, [pc, #60]	; (800956c <SystemInit+0x64>)
 8009530:	4b0e      	ldr	r3, [pc, #56]	; (800956c <SystemInit+0x64>)
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009538:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800953c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800953e:	4b0b      	ldr	r3, [pc, #44]	; (800956c <SystemInit+0x64>)
 8009540:	4a0b      	ldr	r2, [pc, #44]	; (8009570 <SystemInit+0x68>)
 8009542:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009544:	4a09      	ldr	r2, [pc, #36]	; (800956c <SystemInit+0x64>)
 8009546:	4b09      	ldr	r3, [pc, #36]	; (800956c <SystemInit+0x64>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800954e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009550:	4b06      	ldr	r3, [pc, #24]	; (800956c <SystemInit+0x64>)
 8009552:	2200      	movs	r2, #0
 8009554:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009556:	4b04      	ldr	r3, [pc, #16]	; (8009568 <SystemInit+0x60>)
 8009558:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800955c:	609a      	str	r2, [r3, #8]
#endif
}
 800955e:	bf00      	nop
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr
 8009568:	e000ed00 	.word	0xe000ed00
 800956c:	40023800 	.word	0x40023800
 8009570:	24003010 	.word	0x24003010

08009574 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b08c      	sub	sp, #48	; 0x30
 8009578:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800957a:	f107 030c 	add.w	r3, r7, #12
 800957e:	2224      	movs	r2, #36	; 0x24
 8009580:	2100      	movs	r1, #0
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fabe 	bl	8009b04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009588:	1d3b      	adds	r3, r7, #4
 800958a:	2200      	movs	r2, #0
 800958c:	601a      	str	r2, [r3, #0]
 800958e:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8009590:	4b22      	ldr	r3, [pc, #136]	; (800961c <MX_TIM1_Init+0xa8>)
 8009592:	4a23      	ldr	r2, [pc, #140]	; (8009620 <MX_TIM1_Init+0xac>)
 8009594:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 8009596:	4b21      	ldr	r3, [pc, #132]	; (800961c <MX_TIM1_Init+0xa8>)
 8009598:	2201      	movs	r2, #1
 800959a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800959c:	4b1f      	ldr	r3, [pc, #124]	; (800961c <MX_TIM1_Init+0xa8>)
 800959e:	2200      	movs	r2, #0
 80095a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF;
 80095a2:	4b1e      	ldr	r3, [pc, #120]	; (800961c <MX_TIM1_Init+0xa8>)
 80095a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80095a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80095aa:	4b1c      	ldr	r3, [pc, #112]	; (800961c <MX_TIM1_Init+0xa8>)
 80095ac:	2200      	movs	r2, #0
 80095ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80095b0:	4b1a      	ldr	r3, [pc, #104]	; (800961c <MX_TIM1_Init+0xa8>)
 80095b2:	2200      	movs	r2, #0
 80095b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80095b6:	4b19      	ldr	r3, [pc, #100]	; (800961c <MX_TIM1_Init+0xa8>)
 80095b8:	2200      	movs	r2, #0
 80095ba:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80095bc:	2303      	movs	r3, #3
 80095be:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80095c0:	2302      	movs	r3, #2
 80095c2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80095c4:	2301      	movs	r3, #1
 80095c6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80095c8:	2300      	movs	r3, #0
 80095ca:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80095cc:	2300      	movs	r3, #0
 80095ce:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80095d0:	2302      	movs	r3, #2
 80095d2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80095d4:	2301      	movs	r3, #1
 80095d6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80095d8:	2300      	movs	r3, #0
 80095da:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80095e0:	f107 030c 	add.w	r3, r7, #12
 80095e4:	4619      	mov	r1, r3
 80095e6:	480d      	ldr	r0, [pc, #52]	; (800961c <MX_TIM1_Init+0xa8>)
 80095e8:	f7fa feca 	bl	8004380 <HAL_TIM_Encoder_Init>
 80095ec:	4603      	mov	r3, r0
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d001      	beq.n	80095f6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80095f2:	f7ff fbb1 	bl	8008d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80095f6:	2300      	movs	r3, #0
 80095f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80095fa:	2300      	movs	r3, #0
 80095fc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80095fe:	1d3b      	adds	r3, r7, #4
 8009600:	4619      	mov	r1, r3
 8009602:	4806      	ldr	r0, [pc, #24]	; (800961c <MX_TIM1_Init+0xa8>)
 8009604:	f7fb f99c 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 8009608:	4603      	mov	r3, r0
 800960a:	2b00      	cmp	r3, #0
 800960c:	d001      	beq.n	8009612 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800960e:	f7ff fba3 	bl	8008d58 <Error_Handler>
  }

}
 8009612:	bf00      	nop
 8009614:	3730      	adds	r7, #48	; 0x30
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}
 800961a:	bf00      	nop
 800961c:	20000eb8 	.word	0x20000eb8
 8009620:	40010000 	.word	0x40010000

08009624 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08c      	sub	sp, #48	; 0x30
 8009628:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800962a:	f107 030c 	add.w	r3, r7, #12
 800962e:	2224      	movs	r2, #36	; 0x24
 8009630:	2100      	movs	r1, #0
 8009632:	4618      	mov	r0, r3
 8009634:	f000 fa66 	bl	8009b04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009638:	1d3b      	adds	r3, r7, #4
 800963a:	2200      	movs	r2, #0
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8009640:	4b21      	ldr	r3, [pc, #132]	; (80096c8 <MX_TIM2_Init+0xa4>)
 8009642:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009646:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8009648:	4b1f      	ldr	r3, [pc, #124]	; (80096c8 <MX_TIM2_Init+0xa4>)
 800964a:	2201      	movs	r2, #1
 800964c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800964e:	4b1e      	ldr	r3, [pc, #120]	; (80096c8 <MX_TIM2_Init+0xa4>)
 8009650:	2200      	movs	r2, #0
 8009652:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8009654:	4b1c      	ldr	r3, [pc, #112]	; (80096c8 <MX_TIM2_Init+0xa4>)
 8009656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800965a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800965c:	4b1a      	ldr	r3, [pc, #104]	; (80096c8 <MX_TIM2_Init+0xa4>)
 800965e:	2200      	movs	r2, #0
 8009660:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009662:	4b19      	ldr	r3, [pc, #100]	; (80096c8 <MX_TIM2_Init+0xa4>)
 8009664:	2200      	movs	r2, #0
 8009666:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8009668:	2303      	movs	r3, #3
 800966a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800966c:	2302      	movs	r3, #2
 800966e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009670:	2301      	movs	r3, #1
 8009672:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8009674:	2300      	movs	r3, #0
 8009676:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8009678:	2300      	movs	r3, #0
 800967a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800967c:	2302      	movs	r3, #2
 800967e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009680:	2301      	movs	r3, #1
 8009682:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8009684:	2300      	movs	r3, #0
 8009686:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8009688:	2300      	movs	r3, #0
 800968a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800968c:	f107 030c 	add.w	r3, r7, #12
 8009690:	4619      	mov	r1, r3
 8009692:	480d      	ldr	r0, [pc, #52]	; (80096c8 <MX_TIM2_Init+0xa4>)
 8009694:	f7fa fe74 	bl	8004380 <HAL_TIM_Encoder_Init>
 8009698:	4603      	mov	r3, r0
 800969a:	2b00      	cmp	r3, #0
 800969c:	d001      	beq.n	80096a2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800969e:	f7ff fb5b 	bl	8008d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80096a2:	2300      	movs	r3, #0
 80096a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80096a6:	2300      	movs	r3, #0
 80096a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80096aa:	1d3b      	adds	r3, r7, #4
 80096ac:	4619      	mov	r1, r3
 80096ae:	4806      	ldr	r0, [pc, #24]	; (80096c8 <MX_TIM2_Init+0xa4>)
 80096b0:	f7fb f946 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 80096b4:	4603      	mov	r3, r0
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d001      	beq.n	80096be <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80096ba:	f7ff fb4d 	bl	8008d58 <Error_Handler>
  }

}
 80096be:	bf00      	nop
 80096c0:	3730      	adds	r7, #48	; 0x30
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	20000ef8 	.word	0x20000ef8

080096cc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	b08c      	sub	sp, #48	; 0x30
 80096d0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80096d2:	f107 030c 	add.w	r3, r7, #12
 80096d6:	2224      	movs	r2, #36	; 0x24
 80096d8:	2100      	movs	r1, #0
 80096da:	4618      	mov	r0, r3
 80096dc:	f000 fa12 	bl	8009b04 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80096e0:	1d3b      	adds	r3, r7, #4
 80096e2:	2200      	movs	r2, #0
 80096e4:	601a      	str	r2, [r3, #0]
 80096e6:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80096e8:	4b20      	ldr	r3, [pc, #128]	; (800976c <MX_TIM3_Init+0xa0>)
 80096ea:	4a21      	ldr	r2, [pc, #132]	; (8009770 <MX_TIM3_Init+0xa4>)
 80096ec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80096ee:	4b1f      	ldr	r3, [pc, #124]	; (800976c <MX_TIM3_Init+0xa0>)
 80096f0:	2201      	movs	r2, #1
 80096f2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80096f4:	4b1d      	ldr	r3, [pc, #116]	; (800976c <MX_TIM3_Init+0xa0>)
 80096f6:	2200      	movs	r2, #0
 80096f8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 80096fa:	4b1c      	ldr	r3, [pc, #112]	; (800976c <MX_TIM3_Init+0xa0>)
 80096fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009700:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009702:	4b1a      	ldr	r3, [pc, #104]	; (800976c <MX_TIM3_Init+0xa0>)
 8009704:	2200      	movs	r2, #0
 8009706:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009708:	4b18      	ldr	r3, [pc, #96]	; (800976c <MX_TIM3_Init+0xa0>)
 800970a:	2200      	movs	r2, #0
 800970c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800970e:	2303      	movs	r3, #3
 8009710:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8009712:	2302      	movs	r3, #2
 8009714:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8009716:	2301      	movs	r3, #1
 8009718:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800971a:	2300      	movs	r3, #0
 800971c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800971e:	2300      	movs	r3, #0
 8009720:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8009722:	2302      	movs	r3, #2
 8009724:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8009726:	2301      	movs	r3, #1
 8009728:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800972a:	2300      	movs	r3, #0
 800972c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800972e:	2300      	movs	r3, #0
 8009730:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8009732:	f107 030c 	add.w	r3, r7, #12
 8009736:	4619      	mov	r1, r3
 8009738:	480c      	ldr	r0, [pc, #48]	; (800976c <MX_TIM3_Init+0xa0>)
 800973a:	f7fa fe21 	bl	8004380 <HAL_TIM_Encoder_Init>
 800973e:	4603      	mov	r3, r0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d001      	beq.n	8009748 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8009744:	f7ff fb08 	bl	8008d58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009748:	2300      	movs	r3, #0
 800974a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800974c:	2300      	movs	r3, #0
 800974e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8009750:	1d3b      	adds	r3, r7, #4
 8009752:	4619      	mov	r1, r3
 8009754:	4805      	ldr	r0, [pc, #20]	; (800976c <MX_TIM3_Init+0xa0>)
 8009756:	f7fb f8f3 	bl	8004940 <HAL_TIMEx_MasterConfigSynchronization>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d001      	beq.n	8009764 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8009760:	f7ff fafa 	bl	8008d58 <Error_Handler>
  }

}
 8009764:	bf00      	nop
 8009766:	3730      	adds	r7, #48	; 0x30
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20000e78 	.word	0x20000e78
 8009770:	40000400 	.word	0x40000400

08009774 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b08e      	sub	sp, #56	; 0x38
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800977c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009780:	2200      	movs	r2, #0
 8009782:	601a      	str	r2, [r3, #0]
 8009784:	605a      	str	r2, [r3, #4]
 8009786:	609a      	str	r2, [r3, #8]
 8009788:	60da      	str	r2, [r3, #12]
 800978a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a4b      	ldr	r2, [pc, #300]	; (80098c0 <HAL_TIM_Encoder_MspInit+0x14c>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d12d      	bne.n	80097f2 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009796:	2300      	movs	r3, #0
 8009798:	623b      	str	r3, [r7, #32]
 800979a:	4a4a      	ldr	r2, [pc, #296]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 800979c:	4b49      	ldr	r3, [pc, #292]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 800979e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a0:	f043 0301 	orr.w	r3, r3, #1
 80097a4:	6453      	str	r3, [r2, #68]	; 0x44
 80097a6:	4b47      	ldr	r3, [pc, #284]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 80097a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097aa:	f003 0301 	and.w	r3, r3, #1
 80097ae:	623b      	str	r3, [r7, #32]
 80097b0:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097b2:	2300      	movs	r3, #0
 80097b4:	61fb      	str	r3, [r7, #28]
 80097b6:	4a43      	ldr	r2, [pc, #268]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 80097b8:	4b42      	ldr	r3, [pc, #264]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 80097ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097bc:	f043 0301 	orr.w	r3, r3, #1
 80097c0:	6313      	str	r3, [r2, #48]	; 0x30
 80097c2:	4b40      	ldr	r3, [pc, #256]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 80097c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097c6:	f003 0301 	and.w	r3, r3, #1
 80097ca:	61fb      	str	r3, [r7, #28]
 80097cc:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80097ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80097d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097d4:	2302      	movs	r3, #2
 80097d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097d8:	2300      	movs	r3, #0
 80097da:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097dc:	2300      	movs	r3, #0
 80097de:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80097e0:	2301      	movs	r3, #1
 80097e2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097e8:	4619      	mov	r1, r3
 80097ea:	4837      	ldr	r0, [pc, #220]	; (80098c8 <HAL_TIM_Encoder_MspInit+0x154>)
 80097ec:	f7f8 fa2c 	bl	8001c48 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80097f0:	e062      	b.n	80098b8 <HAL_TIM_Encoder_MspInit+0x144>
  else if(tim_encoderHandle->Instance==TIM2)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80097fa:	d12c      	bne.n	8009856 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80097fc:	2300      	movs	r3, #0
 80097fe:	61bb      	str	r3, [r7, #24]
 8009800:	4a30      	ldr	r2, [pc, #192]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 8009802:	4b30      	ldr	r3, [pc, #192]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 8009804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009806:	f043 0301 	orr.w	r3, r3, #1
 800980a:	6413      	str	r3, [r2, #64]	; 0x40
 800980c:	4b2d      	ldr	r3, [pc, #180]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 800980e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	61bb      	str	r3, [r7, #24]
 8009816:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009818:	2300      	movs	r3, #0
 800981a:	617b      	str	r3, [r7, #20]
 800981c:	4a29      	ldr	r2, [pc, #164]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 800981e:	4b29      	ldr	r3, [pc, #164]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 8009820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009822:	f043 0301 	orr.w	r3, r3, #1
 8009826:	6313      	str	r3, [r2, #48]	; 0x30
 8009828:	4b26      	ldr	r3, [pc, #152]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 800982a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800982c:	f003 0301 	and.w	r3, r3, #1
 8009830:	617b      	str	r3, [r7, #20]
 8009832:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8009834:	2303      	movs	r3, #3
 8009836:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009838:	2302      	movs	r3, #2
 800983a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800983c:	2300      	movs	r3, #0
 800983e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009840:	2300      	movs	r3, #0
 8009842:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8009844:	2301      	movs	r3, #1
 8009846:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009848:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800984c:	4619      	mov	r1, r3
 800984e:	481e      	ldr	r0, [pc, #120]	; (80098c8 <HAL_TIM_Encoder_MspInit+0x154>)
 8009850:	f7f8 f9fa 	bl	8001c48 <HAL_GPIO_Init>
}
 8009854:	e030      	b.n	80098b8 <HAL_TIM_Encoder_MspInit+0x144>
  else if(tim_encoderHandle->Instance==TIM3)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a1c      	ldr	r2, [pc, #112]	; (80098cc <HAL_TIM_Encoder_MspInit+0x158>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d12b      	bne.n	80098b8 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8009860:	2300      	movs	r3, #0
 8009862:	613b      	str	r3, [r7, #16]
 8009864:	4a17      	ldr	r2, [pc, #92]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 8009866:	4b17      	ldr	r3, [pc, #92]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 8009868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800986a:	f043 0302 	orr.w	r3, r3, #2
 800986e:	6413      	str	r3, [r2, #64]	; 0x40
 8009870:	4b14      	ldr	r3, [pc, #80]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 8009872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009874:	f003 0302 	and.w	r3, r3, #2
 8009878:	613b      	str	r3, [r7, #16]
 800987a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800987c:	2300      	movs	r3, #0
 800987e:	60fb      	str	r3, [r7, #12]
 8009880:	4a10      	ldr	r2, [pc, #64]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 8009882:	4b10      	ldr	r3, [pc, #64]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 8009884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009886:	f043 0304 	orr.w	r3, r3, #4
 800988a:	6313      	str	r3, [r2, #48]	; 0x30
 800988c:	4b0d      	ldr	r3, [pc, #52]	; (80098c4 <HAL_TIM_Encoder_MspInit+0x150>)
 800988e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009890:	f003 0304 	and.w	r3, r3, #4
 8009894:	60fb      	str	r3, [r7, #12]
 8009896:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009898:	23c0      	movs	r3, #192	; 0xc0
 800989a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800989c:	2302      	movs	r3, #2
 800989e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098a0:	2300      	movs	r3, #0
 80098a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098a4:	2300      	movs	r3, #0
 80098a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80098a8:	2302      	movs	r3, #2
 80098aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80098ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098b0:	4619      	mov	r1, r3
 80098b2:	4807      	ldr	r0, [pc, #28]	; (80098d0 <HAL_TIM_Encoder_MspInit+0x15c>)
 80098b4:	f7f8 f9c8 	bl	8001c48 <HAL_GPIO_Init>
}
 80098b8:	bf00      	nop
 80098ba:	3738      	adds	r7, #56	; 0x38
 80098bc:	46bd      	mov	sp, r7
 80098be:	bd80      	pop	{r7, pc}
 80098c0:	40010000 	.word	0x40010000
 80098c4:	40023800 	.word	0x40023800
 80098c8:	40020000 	.word	0x40020000
 80098cc:	40000400 	.word	0x40000400
 80098d0:	40020800 	.word	0x40020800

080098d4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80098d8:	4b11      	ldr	r3, [pc, #68]	; (8009920 <MX_USART2_UART_Init+0x4c>)
 80098da:	4a12      	ldr	r2, [pc, #72]	; (8009924 <MX_USART2_UART_Init+0x50>)
 80098dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80098de:	4b10      	ldr	r3, [pc, #64]	; (8009920 <MX_USART2_UART_Init+0x4c>)
 80098e0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80098e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80098e6:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <MX_USART2_UART_Init+0x4c>)
 80098e8:	2200      	movs	r2, #0
 80098ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80098ec:	4b0c      	ldr	r3, [pc, #48]	; (8009920 <MX_USART2_UART_Init+0x4c>)
 80098ee:	2200      	movs	r2, #0
 80098f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80098f2:	4b0b      	ldr	r3, [pc, #44]	; (8009920 <MX_USART2_UART_Init+0x4c>)
 80098f4:	2200      	movs	r2, #0
 80098f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80098f8:	4b09      	ldr	r3, [pc, #36]	; (8009920 <MX_USART2_UART_Init+0x4c>)
 80098fa:	220c      	movs	r2, #12
 80098fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80098fe:	4b08      	ldr	r3, [pc, #32]	; (8009920 <MX_USART2_UART_Init+0x4c>)
 8009900:	2200      	movs	r2, #0
 8009902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009904:	4b06      	ldr	r3, [pc, #24]	; (8009920 <MX_USART2_UART_Init+0x4c>)
 8009906:	2200      	movs	r2, #0
 8009908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800990a:	4805      	ldr	r0, [pc, #20]	; (8009920 <MX_USART2_UART_Init+0x4c>)
 800990c:	f7fb f8b6 	bl	8004a7c <HAL_UART_Init>
 8009910:	4603      	mov	r3, r0
 8009912:	2b00      	cmp	r3, #0
 8009914:	d001      	beq.n	800991a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8009916:	f7ff fa1f 	bl	8008d58 <Error_Handler>
  }

}
 800991a:	bf00      	nop
 800991c:	bd80      	pop	{r7, pc}
 800991e:	bf00      	nop
 8009920:	20000f98 	.word	0x20000f98
 8009924:	40004400 	.word	0x40004400

08009928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08a      	sub	sp, #40	; 0x28
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009930:	f107 0314 	add.w	r3, r7, #20
 8009934:	2200      	movs	r2, #0
 8009936:	601a      	str	r2, [r3, #0]
 8009938:	605a      	str	r2, [r3, #4]
 800993a:	609a      	str	r2, [r3, #8]
 800993c:	60da      	str	r2, [r3, #12]
 800993e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a31      	ldr	r2, [pc, #196]	; (8009a0c <HAL_UART_MspInit+0xe4>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d15b      	bne.n	8009a02 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800994a:	2300      	movs	r3, #0
 800994c:	613b      	str	r3, [r7, #16]
 800994e:	4a30      	ldr	r2, [pc, #192]	; (8009a10 <HAL_UART_MspInit+0xe8>)
 8009950:	4b2f      	ldr	r3, [pc, #188]	; (8009a10 <HAL_UART_MspInit+0xe8>)
 8009952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009958:	6413      	str	r3, [r2, #64]	; 0x40
 800995a:	4b2d      	ldr	r3, [pc, #180]	; (8009a10 <HAL_UART_MspInit+0xe8>)
 800995c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800995e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009962:	613b      	str	r3, [r7, #16]
 8009964:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009966:	2300      	movs	r3, #0
 8009968:	60fb      	str	r3, [r7, #12]
 800996a:	4a29      	ldr	r2, [pc, #164]	; (8009a10 <HAL_UART_MspInit+0xe8>)
 800996c:	4b28      	ldr	r3, [pc, #160]	; (8009a10 <HAL_UART_MspInit+0xe8>)
 800996e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009970:	f043 0301 	orr.w	r3, r3, #1
 8009974:	6313      	str	r3, [r2, #48]	; 0x30
 8009976:	4b26      	ldr	r3, [pc, #152]	; (8009a10 <HAL_UART_MspInit+0xe8>)
 8009978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997a:	f003 0301 	and.w	r3, r3, #1
 800997e:	60fb      	str	r3, [r7, #12]
 8009980:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8009982:	230c      	movs	r3, #12
 8009984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009986:	2302      	movs	r3, #2
 8009988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800998a:	2300      	movs	r3, #0
 800998c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800998e:	2300      	movs	r3, #0
 8009990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009992:	2307      	movs	r3, #7
 8009994:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009996:	f107 0314 	add.w	r3, r7, #20
 800999a:	4619      	mov	r1, r3
 800999c:	481d      	ldr	r0, [pc, #116]	; (8009a14 <HAL_UART_MspInit+0xec>)
 800999e:	f7f8 f953 	bl	8001c48 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80099a2:	4b1d      	ldr	r3, [pc, #116]	; (8009a18 <HAL_UART_MspInit+0xf0>)
 80099a4:	4a1d      	ldr	r2, [pc, #116]	; (8009a1c <HAL_UART_MspInit+0xf4>)
 80099a6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80099a8:	4b1b      	ldr	r3, [pc, #108]	; (8009a18 <HAL_UART_MspInit+0xf0>)
 80099aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80099ae:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80099b0:	4b19      	ldr	r3, [pc, #100]	; (8009a18 <HAL_UART_MspInit+0xf0>)
 80099b2:	2200      	movs	r2, #0
 80099b4:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80099b6:	4b18      	ldr	r3, [pc, #96]	; (8009a18 <HAL_UART_MspInit+0xf0>)
 80099b8:	2200      	movs	r2, #0
 80099ba:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80099bc:	4b16      	ldr	r3, [pc, #88]	; (8009a18 <HAL_UART_MspInit+0xf0>)
 80099be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80099c2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80099c4:	4b14      	ldr	r3, [pc, #80]	; (8009a18 <HAL_UART_MspInit+0xf0>)
 80099c6:	2200      	movs	r2, #0
 80099c8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80099ca:	4b13      	ldr	r3, [pc, #76]	; (8009a18 <HAL_UART_MspInit+0xf0>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80099d0:	4b11      	ldr	r3, [pc, #68]	; (8009a18 <HAL_UART_MspInit+0xf0>)
 80099d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80099d6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80099d8:	4b0f      	ldr	r3, [pc, #60]	; (8009a18 <HAL_UART_MspInit+0xf0>)
 80099da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80099de:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80099e0:	4b0d      	ldr	r3, [pc, #52]	; (8009a18 <HAL_UART_MspInit+0xf0>)
 80099e2:	2200      	movs	r2, #0
 80099e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80099e6:	480c      	ldr	r0, [pc, #48]	; (8009a18 <HAL_UART_MspInit+0xf0>)
 80099e8:	f7f7 fc3c 	bl	8001264 <HAL_DMA_Init>
 80099ec:	4603      	mov	r3, r0
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d001      	beq.n	80099f6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80099f2:	f7ff f9b1 	bl	8008d58 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	4a07      	ldr	r2, [pc, #28]	; (8009a18 <HAL_UART_MspInit+0xf0>)
 80099fa:	635a      	str	r2, [r3, #52]	; 0x34
 80099fc:	4a06      	ldr	r2, [pc, #24]	; (8009a18 <HAL_UART_MspInit+0xf0>)
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009a02:	bf00      	nop
 8009a04:	3728      	adds	r7, #40	; 0x28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}
 8009a0a:	bf00      	nop
 8009a0c:	40004400 	.word	0x40004400
 8009a10:	40023800 	.word	0x40023800
 8009a14:	40020000 	.word	0x40020000
 8009a18:	20000f38 	.word	0x20000f38
 8009a1c:	40026088 	.word	0x40026088

08009a20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8009a20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009a58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8009a24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8009a26:	e003      	b.n	8009a30 <LoopCopyDataInit>

08009a28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8009a28:	4b0c      	ldr	r3, [pc, #48]	; (8009a5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8009a2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8009a2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8009a2e:	3104      	adds	r1, #4

08009a30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8009a30:	480b      	ldr	r0, [pc, #44]	; (8009a60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8009a32:	4b0c      	ldr	r3, [pc, #48]	; (8009a64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8009a34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8009a36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8009a38:	d3f6      	bcc.n	8009a28 <CopyDataInit>
  ldr  r2, =_sbss
 8009a3a:	4a0b      	ldr	r2, [pc, #44]	; (8009a68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8009a3c:	e002      	b.n	8009a44 <LoopFillZerobss>

08009a3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8009a3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8009a40:	f842 3b04 	str.w	r3, [r2], #4

08009a44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8009a44:	4b09      	ldr	r3, [pc, #36]	; (8009a6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8009a46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8009a48:	d3f9      	bcc.n	8009a3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8009a4a:	f7ff fd5d 	bl	8009508 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8009a4e:	f000 f81b 	bl	8009a88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009a52:	f7ff f8f1 	bl	8008c38 <main>
  bx  lr    
 8009a56:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8009a58:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8009a5c:	0800dab0 	.word	0x0800dab0
  ldr  r0, =_sdata
 8009a60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8009a64:	20000808 	.word	0x20000808
  ldr  r2, =_sbss
 8009a68:	20000808 	.word	0x20000808
  ldr  r3, = _ebss
 8009a6c:	20000fe8 	.word	0x20000fe8

08009a70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009a70:	e7fe      	b.n	8009a70 <ADC_IRQHandler>

08009a72 <atoi>:
 8009a72:	220a      	movs	r2, #10
 8009a74:	2100      	movs	r1, #0
 8009a76:	f000 b92d 	b.w	8009cd4 <strtol>
	...

08009a7c <__errno>:
 8009a7c:	4b01      	ldr	r3, [pc, #4]	; (8009a84 <__errno+0x8>)
 8009a7e:	6818      	ldr	r0, [r3, #0]
 8009a80:	4770      	bx	lr
 8009a82:	bf00      	nop
 8009a84:	20000194 	.word	0x20000194

08009a88 <__libc_init_array>:
 8009a88:	b570      	push	{r4, r5, r6, lr}
 8009a8a:	4e0d      	ldr	r6, [pc, #52]	; (8009ac0 <__libc_init_array+0x38>)
 8009a8c:	4c0d      	ldr	r4, [pc, #52]	; (8009ac4 <__libc_init_array+0x3c>)
 8009a8e:	1ba4      	subs	r4, r4, r6
 8009a90:	10a4      	asrs	r4, r4, #2
 8009a92:	2500      	movs	r5, #0
 8009a94:	42a5      	cmp	r5, r4
 8009a96:	d109      	bne.n	8009aac <__libc_init_array+0x24>
 8009a98:	4e0b      	ldr	r6, [pc, #44]	; (8009ac8 <__libc_init_array+0x40>)
 8009a9a:	4c0c      	ldr	r4, [pc, #48]	; (8009acc <__libc_init_array+0x44>)
 8009a9c:	f003 fa2c 	bl	800cef8 <_init>
 8009aa0:	1ba4      	subs	r4, r4, r6
 8009aa2:	10a4      	asrs	r4, r4, #2
 8009aa4:	2500      	movs	r5, #0
 8009aa6:	42a5      	cmp	r5, r4
 8009aa8:	d105      	bne.n	8009ab6 <__libc_init_array+0x2e>
 8009aaa:	bd70      	pop	{r4, r5, r6, pc}
 8009aac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009ab0:	4798      	blx	r3
 8009ab2:	3501      	adds	r5, #1
 8009ab4:	e7ee      	b.n	8009a94 <__libc_init_array+0xc>
 8009ab6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009aba:	4798      	blx	r3
 8009abc:	3501      	adds	r5, #1
 8009abe:	e7f2      	b.n	8009aa6 <__libc_init_array+0x1e>
 8009ac0:	0800daa8 	.word	0x0800daa8
 8009ac4:	0800daa8 	.word	0x0800daa8
 8009ac8:	0800daa8 	.word	0x0800daa8
 8009acc:	0800daac 	.word	0x0800daac

08009ad0 <__itoa>:
 8009ad0:	1e93      	subs	r3, r2, #2
 8009ad2:	2b22      	cmp	r3, #34	; 0x22
 8009ad4:	b510      	push	{r4, lr}
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	d904      	bls.n	8009ae4 <__itoa+0x14>
 8009ada:	2300      	movs	r3, #0
 8009adc:	700b      	strb	r3, [r1, #0]
 8009ade:	461c      	mov	r4, r3
 8009ae0:	4620      	mov	r0, r4
 8009ae2:	bd10      	pop	{r4, pc}
 8009ae4:	2a0a      	cmp	r2, #10
 8009ae6:	d109      	bne.n	8009afc <__itoa+0x2c>
 8009ae8:	2800      	cmp	r0, #0
 8009aea:	da07      	bge.n	8009afc <__itoa+0x2c>
 8009aec:	232d      	movs	r3, #45	; 0x2d
 8009aee:	700b      	strb	r3, [r1, #0]
 8009af0:	4240      	negs	r0, r0
 8009af2:	2101      	movs	r1, #1
 8009af4:	4421      	add	r1, r4
 8009af6:	f001 f8d7 	bl	800aca8 <__utoa>
 8009afa:	e7f1      	b.n	8009ae0 <__itoa+0x10>
 8009afc:	2100      	movs	r1, #0
 8009afe:	e7f9      	b.n	8009af4 <__itoa+0x24>

08009b00 <itoa>:
 8009b00:	f7ff bfe6 	b.w	8009ad0 <__itoa>

08009b04 <memset>:
 8009b04:	4402      	add	r2, r0
 8009b06:	4603      	mov	r3, r0
 8009b08:	4293      	cmp	r3, r2
 8009b0a:	d100      	bne.n	8009b0e <memset+0xa>
 8009b0c:	4770      	bx	lr
 8009b0e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b12:	e7f9      	b.n	8009b08 <memset+0x4>

08009b14 <sprintf>:
 8009b14:	b40e      	push	{r1, r2, r3}
 8009b16:	b500      	push	{lr}
 8009b18:	b09c      	sub	sp, #112	; 0x70
 8009b1a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8009b1e:	ab1d      	add	r3, sp, #116	; 0x74
 8009b20:	f8ad 1014 	strh.w	r1, [sp, #20]
 8009b24:	9002      	str	r0, [sp, #8]
 8009b26:	9006      	str	r0, [sp, #24]
 8009b28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009b2c:	480a      	ldr	r0, [pc, #40]	; (8009b58 <sprintf+0x44>)
 8009b2e:	9104      	str	r1, [sp, #16]
 8009b30:	9107      	str	r1, [sp, #28]
 8009b32:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8009b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b3a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8009b3e:	6800      	ldr	r0, [r0, #0]
 8009b40:	9301      	str	r3, [sp, #4]
 8009b42:	a902      	add	r1, sp, #8
 8009b44:	f000 f8dc 	bl	8009d00 <_svfprintf_r>
 8009b48:	9b02      	ldr	r3, [sp, #8]
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	701a      	strb	r2, [r3, #0]
 8009b4e:	b01c      	add	sp, #112	; 0x70
 8009b50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b54:	b003      	add	sp, #12
 8009b56:	4770      	bx	lr
 8009b58:	20000194 	.word	0x20000194

08009b5c <strncat>:
 8009b5c:	b530      	push	{r4, r5, lr}
 8009b5e:	4603      	mov	r3, r0
 8009b60:	781c      	ldrb	r4, [r3, #0]
 8009b62:	1c5d      	adds	r5, r3, #1
 8009b64:	b944      	cbnz	r4, 8009b78 <strncat+0x1c>
 8009b66:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8009b6a:	d304      	bcc.n	8009b76 <strncat+0x1a>
 8009b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b70:	f803 4b01 	strb.w	r4, [r3], #1
 8009b74:	b914      	cbnz	r4, 8009b7c <strncat+0x20>
 8009b76:	bd30      	pop	{r4, r5, pc}
 8009b78:	462b      	mov	r3, r5
 8009b7a:	e7f1      	b.n	8009b60 <strncat+0x4>
 8009b7c:	2a00      	cmp	r2, #0
 8009b7e:	d1f2      	bne.n	8009b66 <strncat+0xa>
 8009b80:	701a      	strb	r2, [r3, #0]
 8009b82:	e7f0      	b.n	8009b66 <strncat+0xa>

08009b84 <strncmp>:
 8009b84:	b510      	push	{r4, lr}
 8009b86:	b16a      	cbz	r2, 8009ba4 <strncmp+0x20>
 8009b88:	3901      	subs	r1, #1
 8009b8a:	1884      	adds	r4, r0, r2
 8009b8c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009b90:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d103      	bne.n	8009ba0 <strncmp+0x1c>
 8009b98:	42a0      	cmp	r0, r4
 8009b9a:	d001      	beq.n	8009ba0 <strncmp+0x1c>
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1f5      	bne.n	8009b8c <strncmp+0x8>
 8009ba0:	1a98      	subs	r0, r3, r2
 8009ba2:	bd10      	pop	{r4, pc}
 8009ba4:	4610      	mov	r0, r2
 8009ba6:	bd10      	pop	{r4, pc}

08009ba8 <strncpy>:
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	4604      	mov	r4, r0
 8009bac:	b902      	cbnz	r2, 8009bb0 <strncpy+0x8>
 8009bae:	bd70      	pop	{r4, r5, r6, pc}
 8009bb0:	4623      	mov	r3, r4
 8009bb2:	f811 5b01 	ldrb.w	r5, [r1], #1
 8009bb6:	f803 5b01 	strb.w	r5, [r3], #1
 8009bba:	1e56      	subs	r6, r2, #1
 8009bbc:	b91d      	cbnz	r5, 8009bc6 <strncpy+0x1e>
 8009bbe:	4414      	add	r4, r2
 8009bc0:	42a3      	cmp	r3, r4
 8009bc2:	d103      	bne.n	8009bcc <strncpy+0x24>
 8009bc4:	bd70      	pop	{r4, r5, r6, pc}
 8009bc6:	461c      	mov	r4, r3
 8009bc8:	4632      	mov	r2, r6
 8009bca:	e7ef      	b.n	8009bac <strncpy+0x4>
 8009bcc:	f803 5b01 	strb.w	r5, [r3], #1
 8009bd0:	e7f6      	b.n	8009bc0 <strncpy+0x18>

08009bd2 <_strtol_l.isra.0>:
 8009bd2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bd6:	4680      	mov	r8, r0
 8009bd8:	4689      	mov	r9, r1
 8009bda:	4692      	mov	sl, r2
 8009bdc:	461f      	mov	r7, r3
 8009bde:	468b      	mov	fp, r1
 8009be0:	465d      	mov	r5, fp
 8009be2:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009be4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009be8:	f001 fef8 	bl	800b9dc <__locale_ctype_ptr_l>
 8009bec:	4420      	add	r0, r4
 8009bee:	7846      	ldrb	r6, [r0, #1]
 8009bf0:	f016 0608 	ands.w	r6, r6, #8
 8009bf4:	d10b      	bne.n	8009c0e <_strtol_l.isra.0+0x3c>
 8009bf6:	2c2d      	cmp	r4, #45	; 0x2d
 8009bf8:	d10b      	bne.n	8009c12 <_strtol_l.isra.0+0x40>
 8009bfa:	782c      	ldrb	r4, [r5, #0]
 8009bfc:	2601      	movs	r6, #1
 8009bfe:	f10b 0502 	add.w	r5, fp, #2
 8009c02:	b167      	cbz	r7, 8009c1e <_strtol_l.isra.0+0x4c>
 8009c04:	2f10      	cmp	r7, #16
 8009c06:	d114      	bne.n	8009c32 <_strtol_l.isra.0+0x60>
 8009c08:	2c30      	cmp	r4, #48	; 0x30
 8009c0a:	d00a      	beq.n	8009c22 <_strtol_l.isra.0+0x50>
 8009c0c:	e011      	b.n	8009c32 <_strtol_l.isra.0+0x60>
 8009c0e:	46ab      	mov	fp, r5
 8009c10:	e7e6      	b.n	8009be0 <_strtol_l.isra.0+0xe>
 8009c12:	2c2b      	cmp	r4, #43	; 0x2b
 8009c14:	bf04      	itt	eq
 8009c16:	782c      	ldrbeq	r4, [r5, #0]
 8009c18:	f10b 0502 	addeq.w	r5, fp, #2
 8009c1c:	e7f1      	b.n	8009c02 <_strtol_l.isra.0+0x30>
 8009c1e:	2c30      	cmp	r4, #48	; 0x30
 8009c20:	d127      	bne.n	8009c72 <_strtol_l.isra.0+0xa0>
 8009c22:	782b      	ldrb	r3, [r5, #0]
 8009c24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009c28:	2b58      	cmp	r3, #88	; 0x58
 8009c2a:	d14b      	bne.n	8009cc4 <_strtol_l.isra.0+0xf2>
 8009c2c:	786c      	ldrb	r4, [r5, #1]
 8009c2e:	2710      	movs	r7, #16
 8009c30:	3502      	adds	r5, #2
 8009c32:	2e00      	cmp	r6, #0
 8009c34:	bf0c      	ite	eq
 8009c36:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8009c3a:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8009c3e:	2200      	movs	r2, #0
 8009c40:	fbb1 fef7 	udiv	lr, r1, r7
 8009c44:	4610      	mov	r0, r2
 8009c46:	fb07 1c1e 	mls	ip, r7, lr, r1
 8009c4a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8009c4e:	2b09      	cmp	r3, #9
 8009c50:	d811      	bhi.n	8009c76 <_strtol_l.isra.0+0xa4>
 8009c52:	461c      	mov	r4, r3
 8009c54:	42a7      	cmp	r7, r4
 8009c56:	dd1d      	ble.n	8009c94 <_strtol_l.isra.0+0xc2>
 8009c58:	1c53      	adds	r3, r2, #1
 8009c5a:	d007      	beq.n	8009c6c <_strtol_l.isra.0+0x9a>
 8009c5c:	4586      	cmp	lr, r0
 8009c5e:	d316      	bcc.n	8009c8e <_strtol_l.isra.0+0xbc>
 8009c60:	d101      	bne.n	8009c66 <_strtol_l.isra.0+0x94>
 8009c62:	45a4      	cmp	ip, r4
 8009c64:	db13      	blt.n	8009c8e <_strtol_l.isra.0+0xbc>
 8009c66:	fb00 4007 	mla	r0, r0, r7, r4
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c70:	e7eb      	b.n	8009c4a <_strtol_l.isra.0+0x78>
 8009c72:	270a      	movs	r7, #10
 8009c74:	e7dd      	b.n	8009c32 <_strtol_l.isra.0+0x60>
 8009c76:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8009c7a:	2b19      	cmp	r3, #25
 8009c7c:	d801      	bhi.n	8009c82 <_strtol_l.isra.0+0xb0>
 8009c7e:	3c37      	subs	r4, #55	; 0x37
 8009c80:	e7e8      	b.n	8009c54 <_strtol_l.isra.0+0x82>
 8009c82:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8009c86:	2b19      	cmp	r3, #25
 8009c88:	d804      	bhi.n	8009c94 <_strtol_l.isra.0+0xc2>
 8009c8a:	3c57      	subs	r4, #87	; 0x57
 8009c8c:	e7e2      	b.n	8009c54 <_strtol_l.isra.0+0x82>
 8009c8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c92:	e7eb      	b.n	8009c6c <_strtol_l.isra.0+0x9a>
 8009c94:	1c53      	adds	r3, r2, #1
 8009c96:	d108      	bne.n	8009caa <_strtol_l.isra.0+0xd8>
 8009c98:	2322      	movs	r3, #34	; 0x22
 8009c9a:	f8c8 3000 	str.w	r3, [r8]
 8009c9e:	4608      	mov	r0, r1
 8009ca0:	f1ba 0f00 	cmp.w	sl, #0
 8009ca4:	d107      	bne.n	8009cb6 <_strtol_l.isra.0+0xe4>
 8009ca6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009caa:	b106      	cbz	r6, 8009cae <_strtol_l.isra.0+0xdc>
 8009cac:	4240      	negs	r0, r0
 8009cae:	f1ba 0f00 	cmp.w	sl, #0
 8009cb2:	d00c      	beq.n	8009cce <_strtol_l.isra.0+0xfc>
 8009cb4:	b122      	cbz	r2, 8009cc0 <_strtol_l.isra.0+0xee>
 8009cb6:	3d01      	subs	r5, #1
 8009cb8:	f8ca 5000 	str.w	r5, [sl]
 8009cbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cc0:	464d      	mov	r5, r9
 8009cc2:	e7f9      	b.n	8009cb8 <_strtol_l.isra.0+0xe6>
 8009cc4:	2430      	movs	r4, #48	; 0x30
 8009cc6:	2f00      	cmp	r7, #0
 8009cc8:	d1b3      	bne.n	8009c32 <_strtol_l.isra.0+0x60>
 8009cca:	2708      	movs	r7, #8
 8009ccc:	e7b1      	b.n	8009c32 <_strtol_l.isra.0+0x60>
 8009cce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08009cd4 <strtol>:
 8009cd4:	4b08      	ldr	r3, [pc, #32]	; (8009cf8 <strtol+0x24>)
 8009cd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cd8:	681c      	ldr	r4, [r3, #0]
 8009cda:	4d08      	ldr	r5, [pc, #32]	; (8009cfc <strtol+0x28>)
 8009cdc:	6a23      	ldr	r3, [r4, #32]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	bf08      	it	eq
 8009ce2:	462b      	moveq	r3, r5
 8009ce4:	9300      	str	r3, [sp, #0]
 8009ce6:	4613      	mov	r3, r2
 8009ce8:	460a      	mov	r2, r1
 8009cea:	4601      	mov	r1, r0
 8009cec:	4620      	mov	r0, r4
 8009cee:	f7ff ff70 	bl	8009bd2 <_strtol_l.isra.0>
 8009cf2:	b003      	add	sp, #12
 8009cf4:	bd30      	pop	{r4, r5, pc}
 8009cf6:	bf00      	nop
 8009cf8:	20000194 	.word	0x20000194
 8009cfc:	20000288 	.word	0x20000288

08009d00 <_svfprintf_r>:
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	b0bd      	sub	sp, #244	; 0xf4
 8009d06:	468a      	mov	sl, r1
 8009d08:	4615      	mov	r5, r2
 8009d0a:	461f      	mov	r7, r3
 8009d0c:	4683      	mov	fp, r0
 8009d0e:	f001 fe69 	bl	800b9e4 <_localeconv_r>
 8009d12:	6803      	ldr	r3, [r0, #0]
 8009d14:	930d      	str	r3, [sp, #52]	; 0x34
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7f6 fa62 	bl	80001e0 <strlen>
 8009d1c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8009d20:	9008      	str	r0, [sp, #32]
 8009d22:	061b      	lsls	r3, r3, #24
 8009d24:	d518      	bpl.n	8009d58 <_svfprintf_r+0x58>
 8009d26:	f8da 3010 	ldr.w	r3, [sl, #16]
 8009d2a:	b9ab      	cbnz	r3, 8009d58 <_svfprintf_r+0x58>
 8009d2c:	2140      	movs	r1, #64	; 0x40
 8009d2e:	4658      	mov	r0, fp
 8009d30:	f001 fe6e 	bl	800ba10 <_malloc_r>
 8009d34:	f8ca 0000 	str.w	r0, [sl]
 8009d38:	f8ca 0010 	str.w	r0, [sl, #16]
 8009d3c:	b948      	cbnz	r0, 8009d52 <_svfprintf_r+0x52>
 8009d3e:	230c      	movs	r3, #12
 8009d40:	f8cb 3000 	str.w	r3, [fp]
 8009d44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d48:	9309      	str	r3, [sp, #36]	; 0x24
 8009d4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d4c:	b03d      	add	sp, #244	; 0xf4
 8009d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d52:	2340      	movs	r3, #64	; 0x40
 8009d54:	f8ca 3014 	str.w	r3, [sl, #20]
 8009d58:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8009fc0 <_svfprintf_r+0x2c0>
 8009d5c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009d60:	2300      	movs	r3, #0
 8009d62:	ac2c      	add	r4, sp, #176	; 0xb0
 8009d64:	941f      	str	r4, [sp, #124]	; 0x7c
 8009d66:	9321      	str	r3, [sp, #132]	; 0x84
 8009d68:	9320      	str	r3, [sp, #128]	; 0x80
 8009d6a:	9505      	str	r5, [sp, #20]
 8009d6c:	9303      	str	r3, [sp, #12]
 8009d6e:	9311      	str	r3, [sp, #68]	; 0x44
 8009d70:	9310      	str	r3, [sp, #64]	; 0x40
 8009d72:	9309      	str	r3, [sp, #36]	; 0x24
 8009d74:	9d05      	ldr	r5, [sp, #20]
 8009d76:	462b      	mov	r3, r5
 8009d78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d7c:	b112      	cbz	r2, 8009d84 <_svfprintf_r+0x84>
 8009d7e:	2a25      	cmp	r2, #37	; 0x25
 8009d80:	f040 8083 	bne.w	8009e8a <_svfprintf_r+0x18a>
 8009d84:	9b05      	ldr	r3, [sp, #20]
 8009d86:	1aee      	subs	r6, r5, r3
 8009d88:	d00d      	beq.n	8009da6 <_svfprintf_r+0xa6>
 8009d8a:	e884 0048 	stmia.w	r4, {r3, r6}
 8009d8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d90:	4433      	add	r3, r6
 8009d92:	9321      	str	r3, [sp, #132]	; 0x84
 8009d94:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009d96:	3301      	adds	r3, #1
 8009d98:	2b07      	cmp	r3, #7
 8009d9a:	9320      	str	r3, [sp, #128]	; 0x80
 8009d9c:	dc77      	bgt.n	8009e8e <_svfprintf_r+0x18e>
 8009d9e:	3408      	adds	r4, #8
 8009da0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009da2:	4433      	add	r3, r6
 8009da4:	9309      	str	r3, [sp, #36]	; 0x24
 8009da6:	782b      	ldrb	r3, [r5, #0]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 8729 	beq.w	800ac00 <_svfprintf_r+0xf00>
 8009dae:	2300      	movs	r3, #0
 8009db0:	1c69      	adds	r1, r5, #1
 8009db2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8009db6:	461a      	mov	r2, r3
 8009db8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8009dbc:	930a      	str	r3, [sp, #40]	; 0x28
 8009dbe:	461d      	mov	r5, r3
 8009dc0:	200a      	movs	r0, #10
 8009dc2:	1c4e      	adds	r6, r1, #1
 8009dc4:	7809      	ldrb	r1, [r1, #0]
 8009dc6:	9605      	str	r6, [sp, #20]
 8009dc8:	9102      	str	r1, [sp, #8]
 8009dca:	9902      	ldr	r1, [sp, #8]
 8009dcc:	3920      	subs	r1, #32
 8009dce:	2958      	cmp	r1, #88	; 0x58
 8009dd0:	f200 8418 	bhi.w	800a604 <_svfprintf_r+0x904>
 8009dd4:	e8df f011 	tbh	[pc, r1, lsl #1]
 8009dd8:	041600a6 	.word	0x041600a6
 8009ddc:	00ab0416 	.word	0x00ab0416
 8009de0:	04160416 	.word	0x04160416
 8009de4:	04160416 	.word	0x04160416
 8009de8:	04160416 	.word	0x04160416
 8009dec:	006500ae 	.word	0x006500ae
 8009df0:	00b70416 	.word	0x00b70416
 8009df4:	041600ba 	.word	0x041600ba
 8009df8:	00da00d7 	.word	0x00da00d7
 8009dfc:	00da00da 	.word	0x00da00da
 8009e00:	00da00da 	.word	0x00da00da
 8009e04:	00da00da 	.word	0x00da00da
 8009e08:	00da00da 	.word	0x00da00da
 8009e0c:	04160416 	.word	0x04160416
 8009e10:	04160416 	.word	0x04160416
 8009e14:	04160416 	.word	0x04160416
 8009e18:	04160416 	.word	0x04160416
 8009e1c:	04160416 	.word	0x04160416
 8009e20:	012b0115 	.word	0x012b0115
 8009e24:	012b0416 	.word	0x012b0416
 8009e28:	04160416 	.word	0x04160416
 8009e2c:	04160416 	.word	0x04160416
 8009e30:	041600ed 	.word	0x041600ed
 8009e34:	03400416 	.word	0x03400416
 8009e38:	04160416 	.word	0x04160416
 8009e3c:	04160416 	.word	0x04160416
 8009e40:	03a80416 	.word	0x03a80416
 8009e44:	04160416 	.word	0x04160416
 8009e48:	04160086 	.word	0x04160086
 8009e4c:	04160416 	.word	0x04160416
 8009e50:	04160416 	.word	0x04160416
 8009e54:	04160416 	.word	0x04160416
 8009e58:	04160416 	.word	0x04160416
 8009e5c:	01070416 	.word	0x01070416
 8009e60:	012b006b 	.word	0x012b006b
 8009e64:	012b012b 	.word	0x012b012b
 8009e68:	006b00f0 	.word	0x006b00f0
 8009e6c:	04160416 	.word	0x04160416
 8009e70:	041600fa 	.word	0x041600fa
 8009e74:	03420322 	.word	0x03420322
 8009e78:	01010376 	.word	0x01010376
 8009e7c:	03870416 	.word	0x03870416
 8009e80:	03aa0416 	.word	0x03aa0416
 8009e84:	04160416 	.word	0x04160416
 8009e88:	03c2      	.short	0x03c2
 8009e8a:	461d      	mov	r5, r3
 8009e8c:	e773      	b.n	8009d76 <_svfprintf_r+0x76>
 8009e8e:	aa1f      	add	r2, sp, #124	; 0x7c
 8009e90:	4651      	mov	r1, sl
 8009e92:	4658      	mov	r0, fp
 8009e94:	f002 fad4 	bl	800c440 <__ssprint_r>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	f040 8692 	bne.w	800abc2 <_svfprintf_r+0xec2>
 8009e9e:	ac2c      	add	r4, sp, #176	; 0xb0
 8009ea0:	e77e      	b.n	8009da0 <_svfprintf_r+0xa0>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	222b      	movs	r2, #43	; 0x2b
 8009ea6:	9905      	ldr	r1, [sp, #20]
 8009ea8:	e78b      	b.n	8009dc2 <_svfprintf_r+0xc2>
 8009eaa:	460f      	mov	r7, r1
 8009eac:	e7fb      	b.n	8009ea6 <_svfprintf_r+0x1a6>
 8009eae:	b10b      	cbz	r3, 8009eb4 <_svfprintf_r+0x1b4>
 8009eb0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8009eb4:	06ae      	lsls	r6, r5, #26
 8009eb6:	f140 80aa 	bpl.w	800a00e <_svfprintf_r+0x30e>
 8009eba:	3707      	adds	r7, #7
 8009ebc:	f027 0707 	bic.w	r7, r7, #7
 8009ec0:	f107 0308 	add.w	r3, r7, #8
 8009ec4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8009ec8:	9304      	str	r3, [sp, #16]
 8009eca:	2e00      	cmp	r6, #0
 8009ecc:	f177 0300 	sbcs.w	r3, r7, #0
 8009ed0:	da06      	bge.n	8009ee0 <_svfprintf_r+0x1e0>
 8009ed2:	4276      	negs	r6, r6
 8009ed4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8009ed8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8009edc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	e2ca      	b.n	800a47a <_svfprintf_r+0x77a>
 8009ee4:	b10b      	cbz	r3, 8009eea <_svfprintf_r+0x1ea>
 8009ee6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8009eea:	4b37      	ldr	r3, [pc, #220]	; (8009fc8 <_svfprintf_r+0x2c8>)
 8009eec:	9311      	str	r3, [sp, #68]	; 0x44
 8009eee:	06ab      	lsls	r3, r5, #26
 8009ef0:	f140 8339 	bpl.w	800a566 <_svfprintf_r+0x866>
 8009ef4:	3707      	adds	r7, #7
 8009ef6:	f027 0707 	bic.w	r7, r7, #7
 8009efa:	f107 0308 	add.w	r3, r7, #8
 8009efe:	e9d7 6700 	ldrd	r6, r7, [r7]
 8009f02:	9304      	str	r3, [sp, #16]
 8009f04:	07e8      	lsls	r0, r5, #31
 8009f06:	d50b      	bpl.n	8009f20 <_svfprintf_r+0x220>
 8009f08:	ea56 0307 	orrs.w	r3, r6, r7
 8009f0c:	d008      	beq.n	8009f20 <_svfprintf_r+0x220>
 8009f0e:	2330      	movs	r3, #48	; 0x30
 8009f10:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8009f14:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8009f18:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8009f1c:	f045 0502 	orr.w	r5, r5, #2
 8009f20:	2302      	movs	r3, #2
 8009f22:	e2a7      	b.n	800a474 <_svfprintf_r+0x774>
 8009f24:	2a00      	cmp	r2, #0
 8009f26:	d1be      	bne.n	8009ea6 <_svfprintf_r+0x1a6>
 8009f28:	2301      	movs	r3, #1
 8009f2a:	2220      	movs	r2, #32
 8009f2c:	e7bb      	b.n	8009ea6 <_svfprintf_r+0x1a6>
 8009f2e:	f045 0501 	orr.w	r5, r5, #1
 8009f32:	e7b8      	b.n	8009ea6 <_svfprintf_r+0x1a6>
 8009f34:	683e      	ldr	r6, [r7, #0]
 8009f36:	960a      	str	r6, [sp, #40]	; 0x28
 8009f38:	2e00      	cmp	r6, #0
 8009f3a:	f107 0104 	add.w	r1, r7, #4
 8009f3e:	dab4      	bge.n	8009eaa <_svfprintf_r+0x1aa>
 8009f40:	4276      	negs	r6, r6
 8009f42:	960a      	str	r6, [sp, #40]	; 0x28
 8009f44:	460f      	mov	r7, r1
 8009f46:	f045 0504 	orr.w	r5, r5, #4
 8009f4a:	e7ac      	b.n	8009ea6 <_svfprintf_r+0x1a6>
 8009f4c:	9905      	ldr	r1, [sp, #20]
 8009f4e:	1c4e      	adds	r6, r1, #1
 8009f50:	7809      	ldrb	r1, [r1, #0]
 8009f52:	9102      	str	r1, [sp, #8]
 8009f54:	292a      	cmp	r1, #42	; 0x2a
 8009f56:	d010      	beq.n	8009f7a <_svfprintf_r+0x27a>
 8009f58:	f04f 0900 	mov.w	r9, #0
 8009f5c:	9605      	str	r6, [sp, #20]
 8009f5e:	9902      	ldr	r1, [sp, #8]
 8009f60:	3930      	subs	r1, #48	; 0x30
 8009f62:	2909      	cmp	r1, #9
 8009f64:	f63f af31 	bhi.w	8009dca <_svfprintf_r+0xca>
 8009f68:	fb00 1909 	mla	r9, r0, r9, r1
 8009f6c:	9905      	ldr	r1, [sp, #20]
 8009f6e:	460e      	mov	r6, r1
 8009f70:	f816 1b01 	ldrb.w	r1, [r6], #1
 8009f74:	9102      	str	r1, [sp, #8]
 8009f76:	9605      	str	r6, [sp, #20]
 8009f78:	e7f1      	b.n	8009f5e <_svfprintf_r+0x25e>
 8009f7a:	6839      	ldr	r1, [r7, #0]
 8009f7c:	9605      	str	r6, [sp, #20]
 8009f7e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8009f82:	3704      	adds	r7, #4
 8009f84:	e78f      	b.n	8009ea6 <_svfprintf_r+0x1a6>
 8009f86:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8009f8a:	e78c      	b.n	8009ea6 <_svfprintf_r+0x1a6>
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	910a      	str	r1, [sp, #40]	; 0x28
 8009f90:	9902      	ldr	r1, [sp, #8]
 8009f92:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009f94:	3930      	subs	r1, #48	; 0x30
 8009f96:	fb00 1106 	mla	r1, r0, r6, r1
 8009f9a:	910a      	str	r1, [sp, #40]	; 0x28
 8009f9c:	9905      	ldr	r1, [sp, #20]
 8009f9e:	460e      	mov	r6, r1
 8009fa0:	f816 1b01 	ldrb.w	r1, [r6], #1
 8009fa4:	9102      	str	r1, [sp, #8]
 8009fa6:	9902      	ldr	r1, [sp, #8]
 8009fa8:	9605      	str	r6, [sp, #20]
 8009faa:	3930      	subs	r1, #48	; 0x30
 8009fac:	2909      	cmp	r1, #9
 8009fae:	d9ef      	bls.n	8009f90 <_svfprintf_r+0x290>
 8009fb0:	e70b      	b.n	8009dca <_svfprintf_r+0xca>
 8009fb2:	f045 0508 	orr.w	r5, r5, #8
 8009fb6:	e776      	b.n	8009ea6 <_svfprintf_r+0x1a6>
 8009fb8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8009fbc:	e773      	b.n	8009ea6 <_svfprintf_r+0x1a6>
 8009fbe:	bf00      	nop
	...
 8009fc8:	0800d7e8 	.word	0x0800d7e8
 8009fcc:	9905      	ldr	r1, [sp, #20]
 8009fce:	7809      	ldrb	r1, [r1, #0]
 8009fd0:	296c      	cmp	r1, #108	; 0x6c
 8009fd2:	d105      	bne.n	8009fe0 <_svfprintf_r+0x2e0>
 8009fd4:	9905      	ldr	r1, [sp, #20]
 8009fd6:	3101      	adds	r1, #1
 8009fd8:	9105      	str	r1, [sp, #20]
 8009fda:	f045 0520 	orr.w	r5, r5, #32
 8009fde:	e762      	b.n	8009ea6 <_svfprintf_r+0x1a6>
 8009fe0:	f045 0510 	orr.w	r5, r5, #16
 8009fe4:	e75f      	b.n	8009ea6 <_svfprintf_r+0x1a6>
 8009fe6:	1d3b      	adds	r3, r7, #4
 8009fe8:	9304      	str	r3, [sp, #16]
 8009fea:	2600      	movs	r6, #0
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8009ff2:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8009ff6:	f04f 0901 	mov.w	r9, #1
 8009ffa:	4637      	mov	r7, r6
 8009ffc:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 800a000:	e11b      	b.n	800a23a <_svfprintf_r+0x53a>
 800a002:	b10b      	cbz	r3, 800a008 <_svfprintf_r+0x308>
 800a004:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800a008:	f045 0510 	orr.w	r5, r5, #16
 800a00c:	e752      	b.n	8009eb4 <_svfprintf_r+0x1b4>
 800a00e:	f015 0f10 	tst.w	r5, #16
 800a012:	f107 0304 	add.w	r3, r7, #4
 800a016:	d003      	beq.n	800a020 <_svfprintf_r+0x320>
 800a018:	683e      	ldr	r6, [r7, #0]
 800a01a:	9304      	str	r3, [sp, #16]
 800a01c:	17f7      	asrs	r7, r6, #31
 800a01e:	e754      	b.n	8009eca <_svfprintf_r+0x1ca>
 800a020:	683e      	ldr	r6, [r7, #0]
 800a022:	9304      	str	r3, [sp, #16]
 800a024:	f015 0f40 	tst.w	r5, #64	; 0x40
 800a028:	bf18      	it	ne
 800a02a:	b236      	sxthne	r6, r6
 800a02c:	e7f6      	b.n	800a01c <_svfprintf_r+0x31c>
 800a02e:	b10b      	cbz	r3, 800a034 <_svfprintf_r+0x334>
 800a030:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800a034:	3707      	adds	r7, #7
 800a036:	f027 0707 	bic.w	r7, r7, #7
 800a03a:	f107 0308 	add.w	r3, r7, #8
 800a03e:	9304      	str	r3, [sp, #16]
 800a040:	ed97 7b00 	vldr	d7, [r7]
 800a044:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a048:	9b06      	ldr	r3, [sp, #24]
 800a04a:	9312      	str	r3, [sp, #72]	; 0x48
 800a04c:	9b07      	ldr	r3, [sp, #28]
 800a04e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a052:	9313      	str	r3, [sp, #76]	; 0x4c
 800a054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a058:	4b4a      	ldr	r3, [pc, #296]	; (800a184 <_svfprintf_r+0x484>)
 800a05a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800a05e:	f7f6 fd69 	bl	8000b34 <__aeabi_dcmpun>
 800a062:	2800      	cmp	r0, #0
 800a064:	f040 85d5 	bne.w	800ac12 <_svfprintf_r+0xf12>
 800a068:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a06c:	4b45      	ldr	r3, [pc, #276]	; (800a184 <_svfprintf_r+0x484>)
 800a06e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800a072:	f7f6 fd41 	bl	8000af8 <__aeabi_dcmple>
 800a076:	2800      	cmp	r0, #0
 800a078:	f040 85cb 	bne.w	800ac12 <_svfprintf_r+0xf12>
 800a07c:	2200      	movs	r2, #0
 800a07e:	2300      	movs	r3, #0
 800a080:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a084:	f7f6 fd2e 	bl	8000ae4 <__aeabi_dcmplt>
 800a088:	b110      	cbz	r0, 800a090 <_svfprintf_r+0x390>
 800a08a:	232d      	movs	r3, #45	; 0x2d
 800a08c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800a090:	4b3d      	ldr	r3, [pc, #244]	; (800a188 <_svfprintf_r+0x488>)
 800a092:	4a3e      	ldr	r2, [pc, #248]	; (800a18c <_svfprintf_r+0x48c>)
 800a094:	9902      	ldr	r1, [sp, #8]
 800a096:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800a09a:	2947      	cmp	r1, #71	; 0x47
 800a09c:	bfcc      	ite	gt
 800a09e:	4690      	movgt	r8, r2
 800a0a0:	4698      	movle	r8, r3
 800a0a2:	f04f 0903 	mov.w	r9, #3
 800a0a6:	2600      	movs	r6, #0
 800a0a8:	4637      	mov	r7, r6
 800a0aa:	e0c6      	b.n	800a23a <_svfprintf_r+0x53a>
 800a0ac:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800a0b0:	d022      	beq.n	800a0f8 <_svfprintf_r+0x3f8>
 800a0b2:	9b02      	ldr	r3, [sp, #8]
 800a0b4:	f023 0320 	bic.w	r3, r3, #32
 800a0b8:	2b47      	cmp	r3, #71	; 0x47
 800a0ba:	d104      	bne.n	800a0c6 <_svfprintf_r+0x3c6>
 800a0bc:	f1b9 0f00 	cmp.w	r9, #0
 800a0c0:	bf08      	it	eq
 800a0c2:	f04f 0901 	moveq.w	r9, #1
 800a0c6:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800a0ca:	930c      	str	r3, [sp, #48]	; 0x30
 800a0cc:	9b07      	ldr	r3, [sp, #28]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	da15      	bge.n	800a0fe <_svfprintf_r+0x3fe>
 800a0d2:	9b06      	ldr	r3, [sp, #24]
 800a0d4:	930e      	str	r3, [sp, #56]	; 0x38
 800a0d6:	9b07      	ldr	r3, [sp, #28]
 800a0d8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a0dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0de:	232d      	movs	r3, #45	; 0x2d
 800a0e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0e2:	9b02      	ldr	r3, [sp, #8]
 800a0e4:	f023 0720 	bic.w	r7, r3, #32
 800a0e8:	2f46      	cmp	r7, #70	; 0x46
 800a0ea:	d00e      	beq.n	800a10a <_svfprintf_r+0x40a>
 800a0ec:	2f45      	cmp	r7, #69	; 0x45
 800a0ee:	d146      	bne.n	800a17e <_svfprintf_r+0x47e>
 800a0f0:	f109 0601 	add.w	r6, r9, #1
 800a0f4:	2102      	movs	r1, #2
 800a0f6:	e00a      	b.n	800a10e <_svfprintf_r+0x40e>
 800a0f8:	f04f 0906 	mov.w	r9, #6
 800a0fc:	e7e3      	b.n	800a0c6 <_svfprintf_r+0x3c6>
 800a0fe:	ed9d 7b06 	vldr	d7, [sp, #24]
 800a102:	2300      	movs	r3, #0
 800a104:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800a108:	e7ea      	b.n	800a0e0 <_svfprintf_r+0x3e0>
 800a10a:	464e      	mov	r6, r9
 800a10c:	2103      	movs	r1, #3
 800a10e:	ab1d      	add	r3, sp, #116	; 0x74
 800a110:	9301      	str	r3, [sp, #4]
 800a112:	ab1a      	add	r3, sp, #104	; 0x68
 800a114:	9300      	str	r3, [sp, #0]
 800a116:	4632      	mov	r2, r6
 800a118:	ab19      	add	r3, sp, #100	; 0x64
 800a11a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800a11e:	4658      	mov	r0, fp
 800a120:	f000 fe8e 	bl	800ae40 <_dtoa_r>
 800a124:	2f47      	cmp	r7, #71	; 0x47
 800a126:	4680      	mov	r8, r0
 800a128:	d102      	bne.n	800a130 <_svfprintf_r+0x430>
 800a12a:	07e8      	lsls	r0, r5, #31
 800a12c:	f140 857e 	bpl.w	800ac2c <_svfprintf_r+0xf2c>
 800a130:	eb08 0306 	add.w	r3, r8, r6
 800a134:	2f46      	cmp	r7, #70	; 0x46
 800a136:	9303      	str	r3, [sp, #12]
 800a138:	d111      	bne.n	800a15e <_svfprintf_r+0x45e>
 800a13a:	f898 3000 	ldrb.w	r3, [r8]
 800a13e:	2b30      	cmp	r3, #48	; 0x30
 800a140:	d109      	bne.n	800a156 <_svfprintf_r+0x456>
 800a142:	2200      	movs	r2, #0
 800a144:	2300      	movs	r3, #0
 800a146:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a14a:	f7f6 fcc1 	bl	8000ad0 <__aeabi_dcmpeq>
 800a14e:	b910      	cbnz	r0, 800a156 <_svfprintf_r+0x456>
 800a150:	f1c6 0601 	rsb	r6, r6, #1
 800a154:	9619      	str	r6, [sp, #100]	; 0x64
 800a156:	9a03      	ldr	r2, [sp, #12]
 800a158:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a15a:	441a      	add	r2, r3
 800a15c:	9203      	str	r2, [sp, #12]
 800a15e:	2200      	movs	r2, #0
 800a160:	2300      	movs	r3, #0
 800a162:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a166:	f7f6 fcb3 	bl	8000ad0 <__aeabi_dcmpeq>
 800a16a:	b988      	cbnz	r0, 800a190 <_svfprintf_r+0x490>
 800a16c:	2230      	movs	r2, #48	; 0x30
 800a16e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a170:	9903      	ldr	r1, [sp, #12]
 800a172:	4299      	cmp	r1, r3
 800a174:	d90e      	bls.n	800a194 <_svfprintf_r+0x494>
 800a176:	1c59      	adds	r1, r3, #1
 800a178:	911d      	str	r1, [sp, #116]	; 0x74
 800a17a:	701a      	strb	r2, [r3, #0]
 800a17c:	e7f7      	b.n	800a16e <_svfprintf_r+0x46e>
 800a17e:	464e      	mov	r6, r9
 800a180:	e7b8      	b.n	800a0f4 <_svfprintf_r+0x3f4>
 800a182:	bf00      	nop
 800a184:	7fefffff 	.word	0x7fefffff
 800a188:	0800d7d8 	.word	0x0800d7d8
 800a18c:	0800d7dc 	.word	0x0800d7dc
 800a190:	9b03      	ldr	r3, [sp, #12]
 800a192:	931d      	str	r3, [sp, #116]	; 0x74
 800a194:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a196:	2f47      	cmp	r7, #71	; 0x47
 800a198:	eba3 0308 	sub.w	r3, r3, r8
 800a19c:	9303      	str	r3, [sp, #12]
 800a19e:	f040 80fa 	bne.w	800a396 <_svfprintf_r+0x696>
 800a1a2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a1a4:	1cd9      	adds	r1, r3, #3
 800a1a6:	db02      	blt.n	800a1ae <_svfprintf_r+0x4ae>
 800a1a8:	4599      	cmp	r9, r3
 800a1aa:	f280 8120 	bge.w	800a3ee <_svfprintf_r+0x6ee>
 800a1ae:	9b02      	ldr	r3, [sp, #8]
 800a1b0:	3b02      	subs	r3, #2
 800a1b2:	9302      	str	r3, [sp, #8]
 800a1b4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a1b6:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800a1ba:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800a1be:	1e53      	subs	r3, r2, #1
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	9319      	str	r3, [sp, #100]	; 0x64
 800a1c4:	bfb6      	itet	lt
 800a1c6:	f1c2 0301 	rsblt	r3, r2, #1
 800a1ca:	222b      	movge	r2, #43	; 0x2b
 800a1cc:	222d      	movlt	r2, #45	; 0x2d
 800a1ce:	2b09      	cmp	r3, #9
 800a1d0:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 800a1d4:	f340 80fb 	ble.w	800a3ce <_svfprintf_r+0x6ce>
 800a1d8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800a1dc:	260a      	movs	r6, #10
 800a1de:	fb93 f0f6 	sdiv	r0, r3, r6
 800a1e2:	fb06 3310 	mls	r3, r6, r0, r3
 800a1e6:	3330      	adds	r3, #48	; 0x30
 800a1e8:	2809      	cmp	r0, #9
 800a1ea:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a1ee:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 800a1f2:	4603      	mov	r3, r0
 800a1f4:	f300 80e4 	bgt.w	800a3c0 <_svfprintf_r+0x6c0>
 800a1f8:	3330      	adds	r3, #48	; 0x30
 800a1fa:	f801 3c01 	strb.w	r3, [r1, #-1]
 800a1fe:	3a02      	subs	r2, #2
 800a200:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 800a204:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800a208:	4282      	cmp	r2, r0
 800a20a:	4619      	mov	r1, r3
 800a20c:	f0c0 80da 	bcc.w	800a3c4 <_svfprintf_r+0x6c4>
 800a210:	9a03      	ldr	r2, [sp, #12]
 800a212:	ab1b      	add	r3, sp, #108	; 0x6c
 800a214:	1acb      	subs	r3, r1, r3
 800a216:	2a01      	cmp	r2, #1
 800a218:	9310      	str	r3, [sp, #64]	; 0x40
 800a21a:	eb03 0902 	add.w	r9, r3, r2
 800a21e:	dc02      	bgt.n	800a226 <_svfprintf_r+0x526>
 800a220:	f015 0701 	ands.w	r7, r5, #1
 800a224:	d002      	beq.n	800a22c <_svfprintf_r+0x52c>
 800a226:	9b08      	ldr	r3, [sp, #32]
 800a228:	2700      	movs	r7, #0
 800a22a:	4499      	add	r9, r3
 800a22c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a22e:	b113      	cbz	r3, 800a236 <_svfprintf_r+0x536>
 800a230:	232d      	movs	r3, #45	; 0x2d
 800a232:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 800a236:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a238:	2600      	movs	r6, #0
 800a23a:	454e      	cmp	r6, r9
 800a23c:	4633      	mov	r3, r6
 800a23e:	bfb8      	it	lt
 800a240:	464b      	movlt	r3, r9
 800a242:	930b      	str	r3, [sp, #44]	; 0x2c
 800a244:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800a248:	b113      	cbz	r3, 800a250 <_svfprintf_r+0x550>
 800a24a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a24c:	3301      	adds	r3, #1
 800a24e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a250:	f015 0302 	ands.w	r3, r5, #2
 800a254:	9314      	str	r3, [sp, #80]	; 0x50
 800a256:	bf1e      	ittt	ne
 800a258:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800a25a:	3302      	addne	r3, #2
 800a25c:	930b      	strne	r3, [sp, #44]	; 0x2c
 800a25e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 800a262:	9315      	str	r3, [sp, #84]	; 0x54
 800a264:	d118      	bne.n	800a298 <_svfprintf_r+0x598>
 800a266:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a268:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a26a:	1a9b      	subs	r3, r3, r2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	930c      	str	r3, [sp, #48]	; 0x30
 800a270:	dd12      	ble.n	800a298 <_svfprintf_r+0x598>
 800a272:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a274:	2b10      	cmp	r3, #16
 800a276:	4ba9      	ldr	r3, [pc, #676]	; (800a51c <_svfprintf_r+0x81c>)
 800a278:	6023      	str	r3, [r4, #0]
 800a27a:	f300 81d5 	bgt.w	800a628 <_svfprintf_r+0x928>
 800a27e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a280:	6063      	str	r3, [r4, #4]
 800a282:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a284:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a286:	4413      	add	r3, r2
 800a288:	9321      	str	r3, [sp, #132]	; 0x84
 800a28a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a28c:	3301      	adds	r3, #1
 800a28e:	2b07      	cmp	r3, #7
 800a290:	9320      	str	r3, [sp, #128]	; 0x80
 800a292:	f300 81e2 	bgt.w	800a65a <_svfprintf_r+0x95a>
 800a296:	3408      	adds	r4, #8
 800a298:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800a29c:	b173      	cbz	r3, 800a2bc <_svfprintf_r+0x5bc>
 800a29e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 800a2a2:	6023      	str	r3, [r4, #0]
 800a2a4:	2301      	movs	r3, #1
 800a2a6:	6063      	str	r3, [r4, #4]
 800a2a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2aa:	3301      	adds	r3, #1
 800a2ac:	9321      	str	r3, [sp, #132]	; 0x84
 800a2ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a2b0:	3301      	adds	r3, #1
 800a2b2:	2b07      	cmp	r3, #7
 800a2b4:	9320      	str	r3, [sp, #128]	; 0x80
 800a2b6:	f300 81da 	bgt.w	800a66e <_svfprintf_r+0x96e>
 800a2ba:	3408      	adds	r4, #8
 800a2bc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2be:	b16b      	cbz	r3, 800a2dc <_svfprintf_r+0x5dc>
 800a2c0:	ab18      	add	r3, sp, #96	; 0x60
 800a2c2:	6023      	str	r3, [r4, #0]
 800a2c4:	2302      	movs	r3, #2
 800a2c6:	6063      	str	r3, [r4, #4]
 800a2c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2ca:	3302      	adds	r3, #2
 800a2cc:	9321      	str	r3, [sp, #132]	; 0x84
 800a2ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	2b07      	cmp	r3, #7
 800a2d4:	9320      	str	r3, [sp, #128]	; 0x80
 800a2d6:	f300 81d4 	bgt.w	800a682 <_svfprintf_r+0x982>
 800a2da:	3408      	adds	r4, #8
 800a2dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2de:	2b80      	cmp	r3, #128	; 0x80
 800a2e0:	d114      	bne.n	800a30c <_svfprintf_r+0x60c>
 800a2e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a2e6:	1a9b      	subs	r3, r3, r2
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	dd0f      	ble.n	800a30c <_svfprintf_r+0x60c>
 800a2ec:	4a8c      	ldr	r2, [pc, #560]	; (800a520 <_svfprintf_r+0x820>)
 800a2ee:	6022      	str	r2, [r4, #0]
 800a2f0:	2b10      	cmp	r3, #16
 800a2f2:	f300 81d0 	bgt.w	800a696 <_svfprintf_r+0x996>
 800a2f6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2f8:	6063      	str	r3, [r4, #4]
 800a2fa:	4413      	add	r3, r2
 800a2fc:	9321      	str	r3, [sp, #132]	; 0x84
 800a2fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a300:	3301      	adds	r3, #1
 800a302:	2b07      	cmp	r3, #7
 800a304:	9320      	str	r3, [sp, #128]	; 0x80
 800a306:	f300 81df 	bgt.w	800a6c8 <_svfprintf_r+0x9c8>
 800a30a:	3408      	adds	r4, #8
 800a30c:	eba6 0609 	sub.w	r6, r6, r9
 800a310:	2e00      	cmp	r6, #0
 800a312:	dd0f      	ble.n	800a334 <_svfprintf_r+0x634>
 800a314:	4b82      	ldr	r3, [pc, #520]	; (800a520 <_svfprintf_r+0x820>)
 800a316:	6023      	str	r3, [r4, #0]
 800a318:	2e10      	cmp	r6, #16
 800a31a:	f300 81df 	bgt.w	800a6dc <_svfprintf_r+0x9dc>
 800a31e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a320:	9821      	ldr	r0, [sp, #132]	; 0x84
 800a322:	6066      	str	r6, [r4, #4]
 800a324:	3301      	adds	r3, #1
 800a326:	4406      	add	r6, r0
 800a328:	2b07      	cmp	r3, #7
 800a32a:	9621      	str	r6, [sp, #132]	; 0x84
 800a32c:	9320      	str	r3, [sp, #128]	; 0x80
 800a32e:	f300 81ec 	bgt.w	800a70a <_svfprintf_r+0xa0a>
 800a332:	3408      	adds	r4, #8
 800a334:	05eb      	lsls	r3, r5, #23
 800a336:	f100 81f2 	bmi.w	800a71e <_svfprintf_r+0xa1e>
 800a33a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a33c:	e884 0300 	stmia.w	r4, {r8, r9}
 800a340:	444b      	add	r3, r9
 800a342:	9321      	str	r3, [sp, #132]	; 0x84
 800a344:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a346:	3301      	adds	r3, #1
 800a348:	2b07      	cmp	r3, #7
 800a34a:	9320      	str	r3, [sp, #128]	; 0x80
 800a34c:	f340 8419 	ble.w	800ab82 <_svfprintf_r+0xe82>
 800a350:	aa1f      	add	r2, sp, #124	; 0x7c
 800a352:	4651      	mov	r1, sl
 800a354:	4658      	mov	r0, fp
 800a356:	f002 f873 	bl	800c440 <__ssprint_r>
 800a35a:	2800      	cmp	r0, #0
 800a35c:	f040 8431 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a360:	ac2c      	add	r4, sp, #176	; 0xb0
 800a362:	076b      	lsls	r3, r5, #29
 800a364:	f100 8410 	bmi.w	800ab88 <_svfprintf_r+0xe88>
 800a368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a36c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a36e:	428a      	cmp	r2, r1
 800a370:	bfac      	ite	ge
 800a372:	189b      	addge	r3, r3, r2
 800a374:	185b      	addlt	r3, r3, r1
 800a376:	9309      	str	r3, [sp, #36]	; 0x24
 800a378:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a37a:	b13b      	cbz	r3, 800a38c <_svfprintf_r+0x68c>
 800a37c:	aa1f      	add	r2, sp, #124	; 0x7c
 800a37e:	4651      	mov	r1, sl
 800a380:	4658      	mov	r0, fp
 800a382:	f002 f85d 	bl	800c440 <__ssprint_r>
 800a386:	2800      	cmp	r0, #0
 800a388:	f040 841b 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a38c:	2300      	movs	r3, #0
 800a38e:	9320      	str	r3, [sp, #128]	; 0x80
 800a390:	9f04      	ldr	r7, [sp, #16]
 800a392:	ac2c      	add	r4, sp, #176	; 0xb0
 800a394:	e4ee      	b.n	8009d74 <_svfprintf_r+0x74>
 800a396:	9b02      	ldr	r3, [sp, #8]
 800a398:	2b65      	cmp	r3, #101	; 0x65
 800a39a:	f77f af0b 	ble.w	800a1b4 <_svfprintf_r+0x4b4>
 800a39e:	9b02      	ldr	r3, [sp, #8]
 800a3a0:	2b66      	cmp	r3, #102	; 0x66
 800a3a2:	d124      	bne.n	800a3ee <_svfprintf_r+0x6ee>
 800a3a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	dd19      	ble.n	800a3de <_svfprintf_r+0x6de>
 800a3aa:	f1b9 0f00 	cmp.w	r9, #0
 800a3ae:	d101      	bne.n	800a3b4 <_svfprintf_r+0x6b4>
 800a3b0:	07ea      	lsls	r2, r5, #31
 800a3b2:	d502      	bpl.n	800a3ba <_svfprintf_r+0x6ba>
 800a3b4:	9a08      	ldr	r2, [sp, #32]
 800a3b6:	4413      	add	r3, r2
 800a3b8:	444b      	add	r3, r9
 800a3ba:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800a3bc:	4699      	mov	r9, r3
 800a3be:	e735      	b.n	800a22c <_svfprintf_r+0x52c>
 800a3c0:	460a      	mov	r2, r1
 800a3c2:	e70c      	b.n	800a1de <_svfprintf_r+0x4de>
 800a3c4:	f812 1b01 	ldrb.w	r1, [r2], #1
 800a3c8:	f803 1b01 	strb.w	r1, [r3], #1
 800a3cc:	e71c      	b.n	800a208 <_svfprintf_r+0x508>
 800a3ce:	2230      	movs	r2, #48	; 0x30
 800a3d0:	4413      	add	r3, r2
 800a3d2:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 800a3d6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800a3da:	a91c      	add	r1, sp, #112	; 0x70
 800a3dc:	e718      	b.n	800a210 <_svfprintf_r+0x510>
 800a3de:	f1b9 0f00 	cmp.w	r9, #0
 800a3e2:	d101      	bne.n	800a3e8 <_svfprintf_r+0x6e8>
 800a3e4:	07eb      	lsls	r3, r5, #31
 800a3e6:	d515      	bpl.n	800a414 <_svfprintf_r+0x714>
 800a3e8:	9b08      	ldr	r3, [sp, #32]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	e7e4      	b.n	800a3b8 <_svfprintf_r+0x6b8>
 800a3ee:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a3f0:	9b03      	ldr	r3, [sp, #12]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	db06      	blt.n	800a404 <_svfprintf_r+0x704>
 800a3f6:	07ef      	lsls	r7, r5, #31
 800a3f8:	d50e      	bpl.n	800a418 <_svfprintf_r+0x718>
 800a3fa:	9b08      	ldr	r3, [sp, #32]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	2267      	movs	r2, #103	; 0x67
 800a400:	9202      	str	r2, [sp, #8]
 800a402:	e7da      	b.n	800a3ba <_svfprintf_r+0x6ba>
 800a404:	9b03      	ldr	r3, [sp, #12]
 800a406:	9908      	ldr	r1, [sp, #32]
 800a408:	2a00      	cmp	r2, #0
 800a40a:	440b      	add	r3, r1
 800a40c:	dcf7      	bgt.n	800a3fe <_svfprintf_r+0x6fe>
 800a40e:	f1c2 0201 	rsb	r2, r2, #1
 800a412:	e7f3      	b.n	800a3fc <_svfprintf_r+0x6fc>
 800a414:	2301      	movs	r3, #1
 800a416:	e7d0      	b.n	800a3ba <_svfprintf_r+0x6ba>
 800a418:	4613      	mov	r3, r2
 800a41a:	e7f0      	b.n	800a3fe <_svfprintf_r+0x6fe>
 800a41c:	b10b      	cbz	r3, 800a422 <_svfprintf_r+0x722>
 800a41e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800a422:	f015 0f20 	tst.w	r5, #32
 800a426:	f107 0304 	add.w	r3, r7, #4
 800a42a:	d008      	beq.n	800a43e <_svfprintf_r+0x73e>
 800a42c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	17ce      	asrs	r6, r1, #31
 800a432:	4608      	mov	r0, r1
 800a434:	4631      	mov	r1, r6
 800a436:	e9c2 0100 	strd	r0, r1, [r2]
 800a43a:	461f      	mov	r7, r3
 800a43c:	e49a      	b.n	8009d74 <_svfprintf_r+0x74>
 800a43e:	06ee      	lsls	r6, r5, #27
 800a440:	d503      	bpl.n	800a44a <_svfprintf_r+0x74a>
 800a442:	683a      	ldr	r2, [r7, #0]
 800a444:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a446:	6011      	str	r1, [r2, #0]
 800a448:	e7f7      	b.n	800a43a <_svfprintf_r+0x73a>
 800a44a:	0668      	lsls	r0, r5, #25
 800a44c:	d5f9      	bpl.n	800a442 <_svfprintf_r+0x742>
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 800a454:	8011      	strh	r1, [r2, #0]
 800a456:	e7f0      	b.n	800a43a <_svfprintf_r+0x73a>
 800a458:	f045 0510 	orr.w	r5, r5, #16
 800a45c:	f015 0320 	ands.w	r3, r5, #32
 800a460:	d022      	beq.n	800a4a8 <_svfprintf_r+0x7a8>
 800a462:	3707      	adds	r7, #7
 800a464:	f027 0707 	bic.w	r7, r7, #7
 800a468:	f107 0308 	add.w	r3, r7, #8
 800a46c:	e9d7 6700 	ldrd	r6, r7, [r7]
 800a470:	9304      	str	r3, [sp, #16]
 800a472:	2300      	movs	r3, #0
 800a474:	2200      	movs	r2, #0
 800a476:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800a47a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800a47e:	f000 83db 	beq.w	800ac38 <_svfprintf_r+0xf38>
 800a482:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 800a486:	920b      	str	r2, [sp, #44]	; 0x2c
 800a488:	ea56 0207 	orrs.w	r2, r6, r7
 800a48c:	f040 83d9 	bne.w	800ac42 <_svfprintf_r+0xf42>
 800a490:	f1b9 0f00 	cmp.w	r9, #0
 800a494:	f000 80aa 	beq.w	800a5ec <_svfprintf_r+0x8ec>
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d076      	beq.n	800a58a <_svfprintf_r+0x88a>
 800a49c:	2b02      	cmp	r3, #2
 800a49e:	f000 8091 	beq.w	800a5c4 <_svfprintf_r+0x8c4>
 800a4a2:	2600      	movs	r6, #0
 800a4a4:	2700      	movs	r7, #0
 800a4a6:	e3d2      	b.n	800ac4e <_svfprintf_r+0xf4e>
 800a4a8:	1d3a      	adds	r2, r7, #4
 800a4aa:	f015 0110 	ands.w	r1, r5, #16
 800a4ae:	9204      	str	r2, [sp, #16]
 800a4b0:	d002      	beq.n	800a4b8 <_svfprintf_r+0x7b8>
 800a4b2:	683e      	ldr	r6, [r7, #0]
 800a4b4:	2700      	movs	r7, #0
 800a4b6:	e7dd      	b.n	800a474 <_svfprintf_r+0x774>
 800a4b8:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800a4bc:	d0f9      	beq.n	800a4b2 <_svfprintf_r+0x7b2>
 800a4be:	883e      	ldrh	r6, [r7, #0]
 800a4c0:	2700      	movs	r7, #0
 800a4c2:	e7d6      	b.n	800a472 <_svfprintf_r+0x772>
 800a4c4:	1d3b      	adds	r3, r7, #4
 800a4c6:	9304      	str	r3, [sp, #16]
 800a4c8:	2330      	movs	r3, #48	; 0x30
 800a4ca:	2278      	movs	r2, #120	; 0x78
 800a4cc:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800a4d0:	4b14      	ldr	r3, [pc, #80]	; (800a524 <_svfprintf_r+0x824>)
 800a4d2:	683e      	ldr	r6, [r7, #0]
 800a4d4:	9311      	str	r3, [sp, #68]	; 0x44
 800a4d6:	2700      	movs	r7, #0
 800a4d8:	f045 0502 	orr.w	r5, r5, #2
 800a4dc:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 800a4e0:	2302      	movs	r3, #2
 800a4e2:	9202      	str	r2, [sp, #8]
 800a4e4:	e7c6      	b.n	800a474 <_svfprintf_r+0x774>
 800a4e6:	1d3b      	adds	r3, r7, #4
 800a4e8:	2600      	movs	r6, #0
 800a4ea:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800a4ee:	9304      	str	r3, [sp, #16]
 800a4f0:	f8d7 8000 	ldr.w	r8, [r7]
 800a4f4:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800a4f8:	d00a      	beq.n	800a510 <_svfprintf_r+0x810>
 800a4fa:	464a      	mov	r2, r9
 800a4fc:	4631      	mov	r1, r6
 800a4fe:	4640      	mov	r0, r8
 800a500:	f7f5 fe76 	bl	80001f0 <memchr>
 800a504:	2800      	cmp	r0, #0
 800a506:	f000 808d 	beq.w	800a624 <_svfprintf_r+0x924>
 800a50a:	eba0 0908 	sub.w	r9, r0, r8
 800a50e:	e5cb      	b.n	800a0a8 <_svfprintf_r+0x3a8>
 800a510:	4640      	mov	r0, r8
 800a512:	f7f5 fe65 	bl	80001e0 <strlen>
 800a516:	4681      	mov	r9, r0
 800a518:	e5c6      	b.n	800a0a8 <_svfprintf_r+0x3a8>
 800a51a:	bf00      	nop
 800a51c:	0800d80c 	.word	0x0800d80c
 800a520:	0800d81c 	.word	0x0800d81c
 800a524:	0800d7f9 	.word	0x0800d7f9
 800a528:	f045 0510 	orr.w	r5, r5, #16
 800a52c:	06a9      	lsls	r1, r5, #26
 800a52e:	d509      	bpl.n	800a544 <_svfprintf_r+0x844>
 800a530:	3707      	adds	r7, #7
 800a532:	f027 0707 	bic.w	r7, r7, #7
 800a536:	f107 0308 	add.w	r3, r7, #8
 800a53a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800a53e:	9304      	str	r3, [sp, #16]
 800a540:	2301      	movs	r3, #1
 800a542:	e797      	b.n	800a474 <_svfprintf_r+0x774>
 800a544:	1d3b      	adds	r3, r7, #4
 800a546:	f015 0f10 	tst.w	r5, #16
 800a54a:	9304      	str	r3, [sp, #16]
 800a54c:	d001      	beq.n	800a552 <_svfprintf_r+0x852>
 800a54e:	683e      	ldr	r6, [r7, #0]
 800a550:	e002      	b.n	800a558 <_svfprintf_r+0x858>
 800a552:	066a      	lsls	r2, r5, #25
 800a554:	d5fb      	bpl.n	800a54e <_svfprintf_r+0x84e>
 800a556:	883e      	ldrh	r6, [r7, #0]
 800a558:	2700      	movs	r7, #0
 800a55a:	e7f1      	b.n	800a540 <_svfprintf_r+0x840>
 800a55c:	b10b      	cbz	r3, 800a562 <_svfprintf_r+0x862>
 800a55e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800a562:	4ba3      	ldr	r3, [pc, #652]	; (800a7f0 <_svfprintf_r+0xaf0>)
 800a564:	e4c2      	b.n	8009eec <_svfprintf_r+0x1ec>
 800a566:	1d3b      	adds	r3, r7, #4
 800a568:	f015 0f10 	tst.w	r5, #16
 800a56c:	9304      	str	r3, [sp, #16]
 800a56e:	d001      	beq.n	800a574 <_svfprintf_r+0x874>
 800a570:	683e      	ldr	r6, [r7, #0]
 800a572:	e002      	b.n	800a57a <_svfprintf_r+0x87a>
 800a574:	066e      	lsls	r6, r5, #25
 800a576:	d5fb      	bpl.n	800a570 <_svfprintf_r+0x870>
 800a578:	883e      	ldrh	r6, [r7, #0]
 800a57a:	2700      	movs	r7, #0
 800a57c:	e4c2      	b.n	8009f04 <_svfprintf_r+0x204>
 800a57e:	4643      	mov	r3, r8
 800a580:	e366      	b.n	800ac50 <_svfprintf_r+0xf50>
 800a582:	2f00      	cmp	r7, #0
 800a584:	bf08      	it	eq
 800a586:	2e0a      	cmpeq	r6, #10
 800a588:	d205      	bcs.n	800a596 <_svfprintf_r+0x896>
 800a58a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800a58e:	3630      	adds	r6, #48	; 0x30
 800a590:	f808 6d41 	strb.w	r6, [r8, #-65]!
 800a594:	e377      	b.n	800ac86 <_svfprintf_r+0xf86>
 800a596:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800a59a:	4630      	mov	r0, r6
 800a59c:	4639      	mov	r1, r7
 800a59e:	220a      	movs	r2, #10
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	f7f6 fb05 	bl	8000bb0 <__aeabi_uldivmod>
 800a5a6:	3230      	adds	r2, #48	; 0x30
 800a5a8:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	4639      	mov	r1, r7
 800a5b2:	220a      	movs	r2, #10
 800a5b4:	f7f6 fafc 	bl	8000bb0 <__aeabi_uldivmod>
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	460f      	mov	r7, r1
 800a5bc:	ea56 0307 	orrs.w	r3, r6, r7
 800a5c0:	d1eb      	bne.n	800a59a <_svfprintf_r+0x89a>
 800a5c2:	e360      	b.n	800ac86 <_svfprintf_r+0xf86>
 800a5c4:	2600      	movs	r6, #0
 800a5c6:	2700      	movs	r7, #0
 800a5c8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800a5cc:	f006 030f 	and.w	r3, r6, #15
 800a5d0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a5d2:	5cd3      	ldrb	r3, [r2, r3]
 800a5d4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800a5d8:	0933      	lsrs	r3, r6, #4
 800a5da:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800a5de:	093a      	lsrs	r2, r7, #4
 800a5e0:	461e      	mov	r6, r3
 800a5e2:	4617      	mov	r7, r2
 800a5e4:	ea56 0307 	orrs.w	r3, r6, r7
 800a5e8:	d1f0      	bne.n	800a5cc <_svfprintf_r+0x8cc>
 800a5ea:	e34c      	b.n	800ac86 <_svfprintf_r+0xf86>
 800a5ec:	b93b      	cbnz	r3, 800a5fe <_svfprintf_r+0x8fe>
 800a5ee:	07ea      	lsls	r2, r5, #31
 800a5f0:	d505      	bpl.n	800a5fe <_svfprintf_r+0x8fe>
 800a5f2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800a5f6:	2330      	movs	r3, #48	; 0x30
 800a5f8:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800a5fc:	e343      	b.n	800ac86 <_svfprintf_r+0xf86>
 800a5fe:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800a602:	e340      	b.n	800ac86 <_svfprintf_r+0xf86>
 800a604:	b10b      	cbz	r3, 800a60a <_svfprintf_r+0x90a>
 800a606:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800a60a:	9b02      	ldr	r3, [sp, #8]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f000 82f7 	beq.w	800ac00 <_svfprintf_r+0xf00>
 800a612:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800a616:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800a61a:	2600      	movs	r6, #0
 800a61c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800a620:	9704      	str	r7, [sp, #16]
 800a622:	e4e8      	b.n	8009ff6 <_svfprintf_r+0x2f6>
 800a624:	4606      	mov	r6, r0
 800a626:	e53f      	b.n	800a0a8 <_svfprintf_r+0x3a8>
 800a628:	2310      	movs	r3, #16
 800a62a:	6063      	str	r3, [r4, #4]
 800a62c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a62e:	3310      	adds	r3, #16
 800a630:	9321      	str	r3, [sp, #132]	; 0x84
 800a632:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a634:	3301      	adds	r3, #1
 800a636:	2b07      	cmp	r3, #7
 800a638:	9320      	str	r3, [sp, #128]	; 0x80
 800a63a:	dc04      	bgt.n	800a646 <_svfprintf_r+0x946>
 800a63c:	3408      	adds	r4, #8
 800a63e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a640:	3b10      	subs	r3, #16
 800a642:	930c      	str	r3, [sp, #48]	; 0x30
 800a644:	e615      	b.n	800a272 <_svfprintf_r+0x572>
 800a646:	aa1f      	add	r2, sp, #124	; 0x7c
 800a648:	4651      	mov	r1, sl
 800a64a:	4658      	mov	r0, fp
 800a64c:	f001 fef8 	bl	800c440 <__ssprint_r>
 800a650:	2800      	cmp	r0, #0
 800a652:	f040 82b6 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a656:	ac2c      	add	r4, sp, #176	; 0xb0
 800a658:	e7f1      	b.n	800a63e <_svfprintf_r+0x93e>
 800a65a:	aa1f      	add	r2, sp, #124	; 0x7c
 800a65c:	4651      	mov	r1, sl
 800a65e:	4658      	mov	r0, fp
 800a660:	f001 feee 	bl	800c440 <__ssprint_r>
 800a664:	2800      	cmp	r0, #0
 800a666:	f040 82ac 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a66a:	ac2c      	add	r4, sp, #176	; 0xb0
 800a66c:	e614      	b.n	800a298 <_svfprintf_r+0x598>
 800a66e:	aa1f      	add	r2, sp, #124	; 0x7c
 800a670:	4651      	mov	r1, sl
 800a672:	4658      	mov	r0, fp
 800a674:	f001 fee4 	bl	800c440 <__ssprint_r>
 800a678:	2800      	cmp	r0, #0
 800a67a:	f040 82a2 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a67e:	ac2c      	add	r4, sp, #176	; 0xb0
 800a680:	e61c      	b.n	800a2bc <_svfprintf_r+0x5bc>
 800a682:	aa1f      	add	r2, sp, #124	; 0x7c
 800a684:	4651      	mov	r1, sl
 800a686:	4658      	mov	r0, fp
 800a688:	f001 feda 	bl	800c440 <__ssprint_r>
 800a68c:	2800      	cmp	r0, #0
 800a68e:	f040 8298 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a692:	ac2c      	add	r4, sp, #176	; 0xb0
 800a694:	e622      	b.n	800a2dc <_svfprintf_r+0x5dc>
 800a696:	2210      	movs	r2, #16
 800a698:	6062      	str	r2, [r4, #4]
 800a69a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a69c:	3210      	adds	r2, #16
 800a69e:	9221      	str	r2, [sp, #132]	; 0x84
 800a6a0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a6a2:	3201      	adds	r2, #1
 800a6a4:	2a07      	cmp	r2, #7
 800a6a6:	9220      	str	r2, [sp, #128]	; 0x80
 800a6a8:	dc02      	bgt.n	800a6b0 <_svfprintf_r+0x9b0>
 800a6aa:	3408      	adds	r4, #8
 800a6ac:	3b10      	subs	r3, #16
 800a6ae:	e61d      	b.n	800a2ec <_svfprintf_r+0x5ec>
 800a6b0:	aa1f      	add	r2, sp, #124	; 0x7c
 800a6b2:	4651      	mov	r1, sl
 800a6b4:	4658      	mov	r0, fp
 800a6b6:	930c      	str	r3, [sp, #48]	; 0x30
 800a6b8:	f001 fec2 	bl	800c440 <__ssprint_r>
 800a6bc:	2800      	cmp	r0, #0
 800a6be:	f040 8280 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a6c2:	ac2c      	add	r4, sp, #176	; 0xb0
 800a6c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6c6:	e7f1      	b.n	800a6ac <_svfprintf_r+0x9ac>
 800a6c8:	aa1f      	add	r2, sp, #124	; 0x7c
 800a6ca:	4651      	mov	r1, sl
 800a6cc:	4658      	mov	r0, fp
 800a6ce:	f001 feb7 	bl	800c440 <__ssprint_r>
 800a6d2:	2800      	cmp	r0, #0
 800a6d4:	f040 8275 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a6d8:	ac2c      	add	r4, sp, #176	; 0xb0
 800a6da:	e617      	b.n	800a30c <_svfprintf_r+0x60c>
 800a6dc:	2310      	movs	r3, #16
 800a6de:	6063      	str	r3, [r4, #4]
 800a6e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6e2:	3310      	adds	r3, #16
 800a6e4:	9321      	str	r3, [sp, #132]	; 0x84
 800a6e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a6e8:	3301      	adds	r3, #1
 800a6ea:	2b07      	cmp	r3, #7
 800a6ec:	9320      	str	r3, [sp, #128]	; 0x80
 800a6ee:	dc02      	bgt.n	800a6f6 <_svfprintf_r+0x9f6>
 800a6f0:	3408      	adds	r4, #8
 800a6f2:	3e10      	subs	r6, #16
 800a6f4:	e60e      	b.n	800a314 <_svfprintf_r+0x614>
 800a6f6:	aa1f      	add	r2, sp, #124	; 0x7c
 800a6f8:	4651      	mov	r1, sl
 800a6fa:	4658      	mov	r0, fp
 800a6fc:	f001 fea0 	bl	800c440 <__ssprint_r>
 800a700:	2800      	cmp	r0, #0
 800a702:	f040 825e 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a706:	ac2c      	add	r4, sp, #176	; 0xb0
 800a708:	e7f3      	b.n	800a6f2 <_svfprintf_r+0x9f2>
 800a70a:	aa1f      	add	r2, sp, #124	; 0x7c
 800a70c:	4651      	mov	r1, sl
 800a70e:	4658      	mov	r0, fp
 800a710:	f001 fe96 	bl	800c440 <__ssprint_r>
 800a714:	2800      	cmp	r0, #0
 800a716:	f040 8254 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a71a:	ac2c      	add	r4, sp, #176	; 0xb0
 800a71c:	e60a      	b.n	800a334 <_svfprintf_r+0x634>
 800a71e:	9b02      	ldr	r3, [sp, #8]
 800a720:	2b65      	cmp	r3, #101	; 0x65
 800a722:	f340 81a9 	ble.w	800aa78 <_svfprintf_r+0xd78>
 800a726:	2200      	movs	r2, #0
 800a728:	2300      	movs	r3, #0
 800a72a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a72e:	f7f6 f9cf 	bl	8000ad0 <__aeabi_dcmpeq>
 800a732:	2800      	cmp	r0, #0
 800a734:	d062      	beq.n	800a7fc <_svfprintf_r+0xafc>
 800a736:	4b2f      	ldr	r3, [pc, #188]	; (800a7f4 <_svfprintf_r+0xaf4>)
 800a738:	6023      	str	r3, [r4, #0]
 800a73a:	2301      	movs	r3, #1
 800a73c:	6063      	str	r3, [r4, #4]
 800a73e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a740:	3301      	adds	r3, #1
 800a742:	9321      	str	r3, [sp, #132]	; 0x84
 800a744:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a746:	3301      	adds	r3, #1
 800a748:	2b07      	cmp	r3, #7
 800a74a:	9320      	str	r3, [sp, #128]	; 0x80
 800a74c:	dc25      	bgt.n	800a79a <_svfprintf_r+0xa9a>
 800a74e:	3408      	adds	r4, #8
 800a750:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a752:	9a03      	ldr	r2, [sp, #12]
 800a754:	4293      	cmp	r3, r2
 800a756:	db02      	blt.n	800a75e <_svfprintf_r+0xa5e>
 800a758:	07ee      	lsls	r6, r5, #31
 800a75a:	f57f ae02 	bpl.w	800a362 <_svfprintf_r+0x662>
 800a75e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	9b08      	ldr	r3, [sp, #32]
 800a764:	6063      	str	r3, [r4, #4]
 800a766:	9a08      	ldr	r2, [sp, #32]
 800a768:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a76a:	4413      	add	r3, r2
 800a76c:	9321      	str	r3, [sp, #132]	; 0x84
 800a76e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a770:	3301      	adds	r3, #1
 800a772:	2b07      	cmp	r3, #7
 800a774:	9320      	str	r3, [sp, #128]	; 0x80
 800a776:	dc1a      	bgt.n	800a7ae <_svfprintf_r+0xaae>
 800a778:	3408      	adds	r4, #8
 800a77a:	9b03      	ldr	r3, [sp, #12]
 800a77c:	1e5e      	subs	r6, r3, #1
 800a77e:	2e00      	cmp	r6, #0
 800a780:	f77f adef 	ble.w	800a362 <_svfprintf_r+0x662>
 800a784:	4f1c      	ldr	r7, [pc, #112]	; (800a7f8 <_svfprintf_r+0xaf8>)
 800a786:	f04f 0810 	mov.w	r8, #16
 800a78a:	2e10      	cmp	r6, #16
 800a78c:	6027      	str	r7, [r4, #0]
 800a78e:	dc18      	bgt.n	800a7c2 <_svfprintf_r+0xac2>
 800a790:	6066      	str	r6, [r4, #4]
 800a792:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a794:	441e      	add	r6, r3
 800a796:	9621      	str	r6, [sp, #132]	; 0x84
 800a798:	e5d4      	b.n	800a344 <_svfprintf_r+0x644>
 800a79a:	aa1f      	add	r2, sp, #124	; 0x7c
 800a79c:	4651      	mov	r1, sl
 800a79e:	4658      	mov	r0, fp
 800a7a0:	f001 fe4e 	bl	800c440 <__ssprint_r>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	f040 820c 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a7aa:	ac2c      	add	r4, sp, #176	; 0xb0
 800a7ac:	e7d0      	b.n	800a750 <_svfprintf_r+0xa50>
 800a7ae:	aa1f      	add	r2, sp, #124	; 0x7c
 800a7b0:	4651      	mov	r1, sl
 800a7b2:	4658      	mov	r0, fp
 800a7b4:	f001 fe44 	bl	800c440 <__ssprint_r>
 800a7b8:	2800      	cmp	r0, #0
 800a7ba:	f040 8202 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a7be:	ac2c      	add	r4, sp, #176	; 0xb0
 800a7c0:	e7db      	b.n	800a77a <_svfprintf_r+0xa7a>
 800a7c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7c4:	f8c4 8004 	str.w	r8, [r4, #4]
 800a7c8:	3310      	adds	r3, #16
 800a7ca:	9321      	str	r3, [sp, #132]	; 0x84
 800a7cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	2b07      	cmp	r3, #7
 800a7d2:	9320      	str	r3, [sp, #128]	; 0x80
 800a7d4:	dc02      	bgt.n	800a7dc <_svfprintf_r+0xadc>
 800a7d6:	3408      	adds	r4, #8
 800a7d8:	3e10      	subs	r6, #16
 800a7da:	e7d6      	b.n	800a78a <_svfprintf_r+0xa8a>
 800a7dc:	aa1f      	add	r2, sp, #124	; 0x7c
 800a7de:	4651      	mov	r1, sl
 800a7e0:	4658      	mov	r0, fp
 800a7e2:	f001 fe2d 	bl	800c440 <__ssprint_r>
 800a7e6:	2800      	cmp	r0, #0
 800a7e8:	f040 81eb 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a7ec:	ac2c      	add	r4, sp, #176	; 0xb0
 800a7ee:	e7f3      	b.n	800a7d8 <_svfprintf_r+0xad8>
 800a7f0:	0800d7f9 	.word	0x0800d7f9
 800a7f4:	0800d80a 	.word	0x0800d80a
 800a7f8:	0800d81c 	.word	0x0800d81c
 800a7fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	dc7a      	bgt.n	800a8f8 <_svfprintf_r+0xbf8>
 800a802:	4b9b      	ldr	r3, [pc, #620]	; (800aa70 <_svfprintf_r+0xd70>)
 800a804:	6023      	str	r3, [r4, #0]
 800a806:	2301      	movs	r3, #1
 800a808:	6063      	str	r3, [r4, #4]
 800a80a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a80c:	3301      	adds	r3, #1
 800a80e:	9321      	str	r3, [sp, #132]	; 0x84
 800a810:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a812:	3301      	adds	r3, #1
 800a814:	2b07      	cmp	r3, #7
 800a816:	9320      	str	r3, [sp, #128]	; 0x80
 800a818:	dc44      	bgt.n	800a8a4 <_svfprintf_r+0xba4>
 800a81a:	3408      	adds	r4, #8
 800a81c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a81e:	b923      	cbnz	r3, 800a82a <_svfprintf_r+0xb2a>
 800a820:	9b03      	ldr	r3, [sp, #12]
 800a822:	b913      	cbnz	r3, 800a82a <_svfprintf_r+0xb2a>
 800a824:	07e8      	lsls	r0, r5, #31
 800a826:	f57f ad9c 	bpl.w	800a362 <_svfprintf_r+0x662>
 800a82a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	9b08      	ldr	r3, [sp, #32]
 800a830:	6063      	str	r3, [r4, #4]
 800a832:	9a08      	ldr	r2, [sp, #32]
 800a834:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a836:	4413      	add	r3, r2
 800a838:	9321      	str	r3, [sp, #132]	; 0x84
 800a83a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a83c:	3301      	adds	r3, #1
 800a83e:	2b07      	cmp	r3, #7
 800a840:	9320      	str	r3, [sp, #128]	; 0x80
 800a842:	dc39      	bgt.n	800a8b8 <_svfprintf_r+0xbb8>
 800a844:	f104 0308 	add.w	r3, r4, #8
 800a848:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a84a:	2e00      	cmp	r6, #0
 800a84c:	da19      	bge.n	800a882 <_svfprintf_r+0xb82>
 800a84e:	4f89      	ldr	r7, [pc, #548]	; (800aa74 <_svfprintf_r+0xd74>)
 800a850:	4276      	negs	r6, r6
 800a852:	2410      	movs	r4, #16
 800a854:	2e10      	cmp	r6, #16
 800a856:	601f      	str	r7, [r3, #0]
 800a858:	dc38      	bgt.n	800a8cc <_svfprintf_r+0xbcc>
 800a85a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a85c:	605e      	str	r6, [r3, #4]
 800a85e:	4416      	add	r6, r2
 800a860:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a862:	9621      	str	r6, [sp, #132]	; 0x84
 800a864:	3201      	adds	r2, #1
 800a866:	2a07      	cmp	r2, #7
 800a868:	f103 0308 	add.w	r3, r3, #8
 800a86c:	9220      	str	r2, [sp, #128]	; 0x80
 800a86e:	dd08      	ble.n	800a882 <_svfprintf_r+0xb82>
 800a870:	aa1f      	add	r2, sp, #124	; 0x7c
 800a872:	4651      	mov	r1, sl
 800a874:	4658      	mov	r0, fp
 800a876:	f001 fde3 	bl	800c440 <__ssprint_r>
 800a87a:	2800      	cmp	r0, #0
 800a87c:	f040 81a1 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a880:	ab2c      	add	r3, sp, #176	; 0xb0
 800a882:	9a03      	ldr	r2, [sp, #12]
 800a884:	605a      	str	r2, [r3, #4]
 800a886:	9903      	ldr	r1, [sp, #12]
 800a888:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a88a:	f8c3 8000 	str.w	r8, [r3]
 800a88e:	440a      	add	r2, r1
 800a890:	9221      	str	r2, [sp, #132]	; 0x84
 800a892:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a894:	3201      	adds	r2, #1
 800a896:	2a07      	cmp	r2, #7
 800a898:	9220      	str	r2, [sp, #128]	; 0x80
 800a89a:	f73f ad59 	bgt.w	800a350 <_svfprintf_r+0x650>
 800a89e:	f103 0408 	add.w	r4, r3, #8
 800a8a2:	e55e      	b.n	800a362 <_svfprintf_r+0x662>
 800a8a4:	aa1f      	add	r2, sp, #124	; 0x7c
 800a8a6:	4651      	mov	r1, sl
 800a8a8:	4658      	mov	r0, fp
 800a8aa:	f001 fdc9 	bl	800c440 <__ssprint_r>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	f040 8187 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a8b4:	ac2c      	add	r4, sp, #176	; 0xb0
 800a8b6:	e7b1      	b.n	800a81c <_svfprintf_r+0xb1c>
 800a8b8:	aa1f      	add	r2, sp, #124	; 0x7c
 800a8ba:	4651      	mov	r1, sl
 800a8bc:	4658      	mov	r0, fp
 800a8be:	f001 fdbf 	bl	800c440 <__ssprint_r>
 800a8c2:	2800      	cmp	r0, #0
 800a8c4:	f040 817d 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a8c8:	ab2c      	add	r3, sp, #176	; 0xb0
 800a8ca:	e7bd      	b.n	800a848 <_svfprintf_r+0xb48>
 800a8cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a8ce:	605c      	str	r4, [r3, #4]
 800a8d0:	3210      	adds	r2, #16
 800a8d2:	9221      	str	r2, [sp, #132]	; 0x84
 800a8d4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a8d6:	3201      	adds	r2, #1
 800a8d8:	2a07      	cmp	r2, #7
 800a8da:	9220      	str	r2, [sp, #128]	; 0x80
 800a8dc:	dc02      	bgt.n	800a8e4 <_svfprintf_r+0xbe4>
 800a8de:	3308      	adds	r3, #8
 800a8e0:	3e10      	subs	r6, #16
 800a8e2:	e7b7      	b.n	800a854 <_svfprintf_r+0xb54>
 800a8e4:	aa1f      	add	r2, sp, #124	; 0x7c
 800a8e6:	4651      	mov	r1, sl
 800a8e8:	4658      	mov	r0, fp
 800a8ea:	f001 fda9 	bl	800c440 <__ssprint_r>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	f040 8167 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a8f4:	ab2c      	add	r3, sp, #176	; 0xb0
 800a8f6:	e7f3      	b.n	800a8e0 <_svfprintf_r+0xbe0>
 800a8f8:	9b03      	ldr	r3, [sp, #12]
 800a8fa:	42bb      	cmp	r3, r7
 800a8fc:	bfa8      	it	ge
 800a8fe:	463b      	movge	r3, r7
 800a900:	2b00      	cmp	r3, #0
 800a902:	461e      	mov	r6, r3
 800a904:	dd0b      	ble.n	800a91e <_svfprintf_r+0xc1e>
 800a906:	6063      	str	r3, [r4, #4]
 800a908:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a90a:	f8c4 8000 	str.w	r8, [r4]
 800a90e:	4433      	add	r3, r6
 800a910:	9321      	str	r3, [sp, #132]	; 0x84
 800a912:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a914:	3301      	adds	r3, #1
 800a916:	2b07      	cmp	r3, #7
 800a918:	9320      	str	r3, [sp, #128]	; 0x80
 800a91a:	dc5f      	bgt.n	800a9dc <_svfprintf_r+0xcdc>
 800a91c:	3408      	adds	r4, #8
 800a91e:	2e00      	cmp	r6, #0
 800a920:	bfac      	ite	ge
 800a922:	1bbe      	subge	r6, r7, r6
 800a924:	463e      	movlt	r6, r7
 800a926:	2e00      	cmp	r6, #0
 800a928:	dd0f      	ble.n	800a94a <_svfprintf_r+0xc4a>
 800a92a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 800aa74 <_svfprintf_r+0xd74>
 800a92e:	f8c4 9000 	str.w	r9, [r4]
 800a932:	2e10      	cmp	r6, #16
 800a934:	dc5c      	bgt.n	800a9f0 <_svfprintf_r+0xcf0>
 800a936:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a938:	6066      	str	r6, [r4, #4]
 800a93a:	441e      	add	r6, r3
 800a93c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a93e:	9621      	str	r6, [sp, #132]	; 0x84
 800a940:	3301      	adds	r3, #1
 800a942:	2b07      	cmp	r3, #7
 800a944:	9320      	str	r3, [sp, #128]	; 0x80
 800a946:	dc6a      	bgt.n	800aa1e <_svfprintf_r+0xd1e>
 800a948:	3408      	adds	r4, #8
 800a94a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a94c:	9a03      	ldr	r2, [sp, #12]
 800a94e:	4293      	cmp	r3, r2
 800a950:	db01      	blt.n	800a956 <_svfprintf_r+0xc56>
 800a952:	07e9      	lsls	r1, r5, #31
 800a954:	d50d      	bpl.n	800a972 <_svfprintf_r+0xc72>
 800a956:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a958:	6023      	str	r3, [r4, #0]
 800a95a:	9b08      	ldr	r3, [sp, #32]
 800a95c:	6063      	str	r3, [r4, #4]
 800a95e:	9a08      	ldr	r2, [sp, #32]
 800a960:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a962:	4413      	add	r3, r2
 800a964:	9321      	str	r3, [sp, #132]	; 0x84
 800a966:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a968:	3301      	adds	r3, #1
 800a96a:	2b07      	cmp	r3, #7
 800a96c:	9320      	str	r3, [sp, #128]	; 0x80
 800a96e:	dc60      	bgt.n	800aa32 <_svfprintf_r+0xd32>
 800a970:	3408      	adds	r4, #8
 800a972:	9b03      	ldr	r3, [sp, #12]
 800a974:	9a03      	ldr	r2, [sp, #12]
 800a976:	1bde      	subs	r6, r3, r7
 800a978:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a97a:	1ad3      	subs	r3, r2, r3
 800a97c:	429e      	cmp	r6, r3
 800a97e:	bfa8      	it	ge
 800a980:	461e      	movge	r6, r3
 800a982:	2e00      	cmp	r6, #0
 800a984:	dd0b      	ble.n	800a99e <_svfprintf_r+0xc9e>
 800a986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a988:	6066      	str	r6, [r4, #4]
 800a98a:	4433      	add	r3, r6
 800a98c:	9321      	str	r3, [sp, #132]	; 0x84
 800a98e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a990:	3301      	adds	r3, #1
 800a992:	4447      	add	r7, r8
 800a994:	2b07      	cmp	r3, #7
 800a996:	6027      	str	r7, [r4, #0]
 800a998:	9320      	str	r3, [sp, #128]	; 0x80
 800a99a:	dc54      	bgt.n	800aa46 <_svfprintf_r+0xd46>
 800a99c:	3408      	adds	r4, #8
 800a99e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a9a0:	9a03      	ldr	r2, [sp, #12]
 800a9a2:	2e00      	cmp	r6, #0
 800a9a4:	eba2 0303 	sub.w	r3, r2, r3
 800a9a8:	bfac      	ite	ge
 800a9aa:	1b9e      	subge	r6, r3, r6
 800a9ac:	461e      	movlt	r6, r3
 800a9ae:	2e00      	cmp	r6, #0
 800a9b0:	f77f acd7 	ble.w	800a362 <_svfprintf_r+0x662>
 800a9b4:	4f2f      	ldr	r7, [pc, #188]	; (800aa74 <_svfprintf_r+0xd74>)
 800a9b6:	f04f 0810 	mov.w	r8, #16
 800a9ba:	2e10      	cmp	r6, #16
 800a9bc:	6027      	str	r7, [r4, #0]
 800a9be:	f77f aee7 	ble.w	800a790 <_svfprintf_r+0xa90>
 800a9c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9c4:	f8c4 8004 	str.w	r8, [r4, #4]
 800a9c8:	3310      	adds	r3, #16
 800a9ca:	9321      	str	r3, [sp, #132]	; 0x84
 800a9cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a9ce:	3301      	adds	r3, #1
 800a9d0:	2b07      	cmp	r3, #7
 800a9d2:	9320      	str	r3, [sp, #128]	; 0x80
 800a9d4:	dc41      	bgt.n	800aa5a <_svfprintf_r+0xd5a>
 800a9d6:	3408      	adds	r4, #8
 800a9d8:	3e10      	subs	r6, #16
 800a9da:	e7ee      	b.n	800a9ba <_svfprintf_r+0xcba>
 800a9dc:	aa1f      	add	r2, sp, #124	; 0x7c
 800a9de:	4651      	mov	r1, sl
 800a9e0:	4658      	mov	r0, fp
 800a9e2:	f001 fd2d 	bl	800c440 <__ssprint_r>
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	f040 80eb 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800a9ec:	ac2c      	add	r4, sp, #176	; 0xb0
 800a9ee:	e796      	b.n	800a91e <_svfprintf_r+0xc1e>
 800a9f0:	2310      	movs	r3, #16
 800a9f2:	6063      	str	r3, [r4, #4]
 800a9f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a9f6:	3310      	adds	r3, #16
 800a9f8:	9321      	str	r3, [sp, #132]	; 0x84
 800a9fa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800a9fc:	3301      	adds	r3, #1
 800a9fe:	2b07      	cmp	r3, #7
 800aa00:	9320      	str	r3, [sp, #128]	; 0x80
 800aa02:	dc02      	bgt.n	800aa0a <_svfprintf_r+0xd0a>
 800aa04:	3408      	adds	r4, #8
 800aa06:	3e10      	subs	r6, #16
 800aa08:	e791      	b.n	800a92e <_svfprintf_r+0xc2e>
 800aa0a:	aa1f      	add	r2, sp, #124	; 0x7c
 800aa0c:	4651      	mov	r1, sl
 800aa0e:	4658      	mov	r0, fp
 800aa10:	f001 fd16 	bl	800c440 <__ssprint_r>
 800aa14:	2800      	cmp	r0, #0
 800aa16:	f040 80d4 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800aa1a:	ac2c      	add	r4, sp, #176	; 0xb0
 800aa1c:	e7f3      	b.n	800aa06 <_svfprintf_r+0xd06>
 800aa1e:	aa1f      	add	r2, sp, #124	; 0x7c
 800aa20:	4651      	mov	r1, sl
 800aa22:	4658      	mov	r0, fp
 800aa24:	f001 fd0c 	bl	800c440 <__ssprint_r>
 800aa28:	2800      	cmp	r0, #0
 800aa2a:	f040 80ca 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800aa2e:	ac2c      	add	r4, sp, #176	; 0xb0
 800aa30:	e78b      	b.n	800a94a <_svfprintf_r+0xc4a>
 800aa32:	aa1f      	add	r2, sp, #124	; 0x7c
 800aa34:	4651      	mov	r1, sl
 800aa36:	4658      	mov	r0, fp
 800aa38:	f001 fd02 	bl	800c440 <__ssprint_r>
 800aa3c:	2800      	cmp	r0, #0
 800aa3e:	f040 80c0 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800aa42:	ac2c      	add	r4, sp, #176	; 0xb0
 800aa44:	e795      	b.n	800a972 <_svfprintf_r+0xc72>
 800aa46:	aa1f      	add	r2, sp, #124	; 0x7c
 800aa48:	4651      	mov	r1, sl
 800aa4a:	4658      	mov	r0, fp
 800aa4c:	f001 fcf8 	bl	800c440 <__ssprint_r>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f040 80b6 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800aa56:	ac2c      	add	r4, sp, #176	; 0xb0
 800aa58:	e7a1      	b.n	800a99e <_svfprintf_r+0xc9e>
 800aa5a:	aa1f      	add	r2, sp, #124	; 0x7c
 800aa5c:	4651      	mov	r1, sl
 800aa5e:	4658      	mov	r0, fp
 800aa60:	f001 fcee 	bl	800c440 <__ssprint_r>
 800aa64:	2800      	cmp	r0, #0
 800aa66:	f040 80ac 	bne.w	800abc2 <_svfprintf_r+0xec2>
 800aa6a:	ac2c      	add	r4, sp, #176	; 0xb0
 800aa6c:	e7b4      	b.n	800a9d8 <_svfprintf_r+0xcd8>
 800aa6e:	bf00      	nop
 800aa70:	0800d80a 	.word	0x0800d80a
 800aa74:	0800d81c 	.word	0x0800d81c
 800aa78:	9b03      	ldr	r3, [sp, #12]
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	dc01      	bgt.n	800aa82 <_svfprintf_r+0xd82>
 800aa7e:	07ea      	lsls	r2, r5, #31
 800aa80:	d576      	bpl.n	800ab70 <_svfprintf_r+0xe70>
 800aa82:	2301      	movs	r3, #1
 800aa84:	6063      	str	r3, [r4, #4]
 800aa86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa88:	f8c4 8000 	str.w	r8, [r4]
 800aa8c:	3301      	adds	r3, #1
 800aa8e:	9321      	str	r3, [sp, #132]	; 0x84
 800aa90:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aa92:	3301      	adds	r3, #1
 800aa94:	2b07      	cmp	r3, #7
 800aa96:	9320      	str	r3, [sp, #128]	; 0x80
 800aa98:	dc36      	bgt.n	800ab08 <_svfprintf_r+0xe08>
 800aa9a:	3408      	adds	r4, #8
 800aa9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa9e:	6023      	str	r3, [r4, #0]
 800aaa0:	9b08      	ldr	r3, [sp, #32]
 800aaa2:	6063      	str	r3, [r4, #4]
 800aaa4:	9a08      	ldr	r2, [sp, #32]
 800aaa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aaa8:	4413      	add	r3, r2
 800aaaa:	9321      	str	r3, [sp, #132]	; 0x84
 800aaac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aaae:	3301      	adds	r3, #1
 800aab0:	2b07      	cmp	r3, #7
 800aab2:	9320      	str	r3, [sp, #128]	; 0x80
 800aab4:	dc31      	bgt.n	800ab1a <_svfprintf_r+0xe1a>
 800aab6:	3408      	adds	r4, #8
 800aab8:	2300      	movs	r3, #0
 800aaba:	2200      	movs	r2, #0
 800aabc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aac0:	f7f6 f806 	bl	8000ad0 <__aeabi_dcmpeq>
 800aac4:	9b03      	ldr	r3, [sp, #12]
 800aac6:	1e5e      	subs	r6, r3, #1
 800aac8:	2800      	cmp	r0, #0
 800aaca:	d12f      	bne.n	800ab2c <_svfprintf_r+0xe2c>
 800aacc:	f108 0301 	add.w	r3, r8, #1
 800aad0:	e884 0048 	stmia.w	r4, {r3, r6}
 800aad4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aad6:	9a03      	ldr	r2, [sp, #12]
 800aad8:	3b01      	subs	r3, #1
 800aada:	4413      	add	r3, r2
 800aadc:	9321      	str	r3, [sp, #132]	; 0x84
 800aade:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aae0:	3301      	adds	r3, #1
 800aae2:	2b07      	cmp	r3, #7
 800aae4:	9320      	str	r3, [sp, #128]	; 0x80
 800aae6:	dd4a      	ble.n	800ab7e <_svfprintf_r+0xe7e>
 800aae8:	aa1f      	add	r2, sp, #124	; 0x7c
 800aaea:	4651      	mov	r1, sl
 800aaec:	4658      	mov	r0, fp
 800aaee:	f001 fca7 	bl	800c440 <__ssprint_r>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d165      	bne.n	800abc2 <_svfprintf_r+0xec2>
 800aaf6:	ac2c      	add	r4, sp, #176	; 0xb0
 800aaf8:	ab1b      	add	r3, sp, #108	; 0x6c
 800aafa:	6023      	str	r3, [r4, #0]
 800aafc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aafe:	6063      	str	r3, [r4, #4]
 800ab00:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab04:	4413      	add	r3, r2
 800ab06:	e41c      	b.n	800a342 <_svfprintf_r+0x642>
 800ab08:	aa1f      	add	r2, sp, #124	; 0x7c
 800ab0a:	4651      	mov	r1, sl
 800ab0c:	4658      	mov	r0, fp
 800ab0e:	f001 fc97 	bl	800c440 <__ssprint_r>
 800ab12:	2800      	cmp	r0, #0
 800ab14:	d155      	bne.n	800abc2 <_svfprintf_r+0xec2>
 800ab16:	ac2c      	add	r4, sp, #176	; 0xb0
 800ab18:	e7c0      	b.n	800aa9c <_svfprintf_r+0xd9c>
 800ab1a:	aa1f      	add	r2, sp, #124	; 0x7c
 800ab1c:	4651      	mov	r1, sl
 800ab1e:	4658      	mov	r0, fp
 800ab20:	f001 fc8e 	bl	800c440 <__ssprint_r>
 800ab24:	2800      	cmp	r0, #0
 800ab26:	d14c      	bne.n	800abc2 <_svfprintf_r+0xec2>
 800ab28:	ac2c      	add	r4, sp, #176	; 0xb0
 800ab2a:	e7c5      	b.n	800aab8 <_svfprintf_r+0xdb8>
 800ab2c:	2e00      	cmp	r6, #0
 800ab2e:	dde3      	ble.n	800aaf8 <_svfprintf_r+0xdf8>
 800ab30:	4f59      	ldr	r7, [pc, #356]	; (800ac98 <_svfprintf_r+0xf98>)
 800ab32:	f04f 0810 	mov.w	r8, #16
 800ab36:	2e10      	cmp	r6, #16
 800ab38:	6027      	str	r7, [r4, #0]
 800ab3a:	dc04      	bgt.n	800ab46 <_svfprintf_r+0xe46>
 800ab3c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab3e:	6066      	str	r6, [r4, #4]
 800ab40:	441e      	add	r6, r3
 800ab42:	9621      	str	r6, [sp, #132]	; 0x84
 800ab44:	e7cb      	b.n	800aade <_svfprintf_r+0xdde>
 800ab46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab48:	f8c4 8004 	str.w	r8, [r4, #4]
 800ab4c:	3310      	adds	r3, #16
 800ab4e:	9321      	str	r3, [sp, #132]	; 0x84
 800ab50:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800ab52:	3301      	adds	r3, #1
 800ab54:	2b07      	cmp	r3, #7
 800ab56:	9320      	str	r3, [sp, #128]	; 0x80
 800ab58:	dc02      	bgt.n	800ab60 <_svfprintf_r+0xe60>
 800ab5a:	3408      	adds	r4, #8
 800ab5c:	3e10      	subs	r6, #16
 800ab5e:	e7ea      	b.n	800ab36 <_svfprintf_r+0xe36>
 800ab60:	aa1f      	add	r2, sp, #124	; 0x7c
 800ab62:	4651      	mov	r1, sl
 800ab64:	4658      	mov	r0, fp
 800ab66:	f001 fc6b 	bl	800c440 <__ssprint_r>
 800ab6a:	bb50      	cbnz	r0, 800abc2 <_svfprintf_r+0xec2>
 800ab6c:	ac2c      	add	r4, sp, #176	; 0xb0
 800ab6e:	e7f5      	b.n	800ab5c <_svfprintf_r+0xe5c>
 800ab70:	2301      	movs	r3, #1
 800ab72:	6063      	str	r3, [r4, #4]
 800ab74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab76:	f8c4 8000 	str.w	r8, [r4]
 800ab7a:	3301      	adds	r3, #1
 800ab7c:	e7ae      	b.n	800aadc <_svfprintf_r+0xddc>
 800ab7e:	3408      	adds	r4, #8
 800ab80:	e7ba      	b.n	800aaf8 <_svfprintf_r+0xdf8>
 800ab82:	3408      	adds	r4, #8
 800ab84:	f7ff bbed 	b.w	800a362 <_svfprintf_r+0x662>
 800ab88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab8c:	1a9d      	subs	r5, r3, r2
 800ab8e:	2d00      	cmp	r5, #0
 800ab90:	f77f abea 	ble.w	800a368 <_svfprintf_r+0x668>
 800ab94:	2610      	movs	r6, #16
 800ab96:	4b41      	ldr	r3, [pc, #260]	; (800ac9c <_svfprintf_r+0xf9c>)
 800ab98:	6023      	str	r3, [r4, #0]
 800ab9a:	2d10      	cmp	r5, #16
 800ab9c:	dc1b      	bgt.n	800abd6 <_svfprintf_r+0xed6>
 800ab9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aba0:	6065      	str	r5, [r4, #4]
 800aba2:	441d      	add	r5, r3
 800aba4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800aba6:	9521      	str	r5, [sp, #132]	; 0x84
 800aba8:	3301      	adds	r3, #1
 800abaa:	2b07      	cmp	r3, #7
 800abac:	9320      	str	r3, [sp, #128]	; 0x80
 800abae:	f77f abdb 	ble.w	800a368 <_svfprintf_r+0x668>
 800abb2:	aa1f      	add	r2, sp, #124	; 0x7c
 800abb4:	4651      	mov	r1, sl
 800abb6:	4658      	mov	r0, fp
 800abb8:	f001 fc42 	bl	800c440 <__ssprint_r>
 800abbc:	2800      	cmp	r0, #0
 800abbe:	f43f abd3 	beq.w	800a368 <_svfprintf_r+0x668>
 800abc2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800abc6:	f013 0f40 	tst.w	r3, #64	; 0x40
 800abca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800abcc:	bf18      	it	ne
 800abce:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800abd2:	f7ff b8b9 	b.w	8009d48 <_svfprintf_r+0x48>
 800abd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800abd8:	6066      	str	r6, [r4, #4]
 800abda:	3310      	adds	r3, #16
 800abdc:	9321      	str	r3, [sp, #132]	; 0x84
 800abde:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800abe0:	3301      	adds	r3, #1
 800abe2:	2b07      	cmp	r3, #7
 800abe4:	9320      	str	r3, [sp, #128]	; 0x80
 800abe6:	dc02      	bgt.n	800abee <_svfprintf_r+0xeee>
 800abe8:	3408      	adds	r4, #8
 800abea:	3d10      	subs	r5, #16
 800abec:	e7d3      	b.n	800ab96 <_svfprintf_r+0xe96>
 800abee:	aa1f      	add	r2, sp, #124	; 0x7c
 800abf0:	4651      	mov	r1, sl
 800abf2:	4658      	mov	r0, fp
 800abf4:	f001 fc24 	bl	800c440 <__ssprint_r>
 800abf8:	2800      	cmp	r0, #0
 800abfa:	d1e2      	bne.n	800abc2 <_svfprintf_r+0xec2>
 800abfc:	ac2c      	add	r4, sp, #176	; 0xb0
 800abfe:	e7f4      	b.n	800abea <_svfprintf_r+0xeea>
 800ac00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d0dd      	beq.n	800abc2 <_svfprintf_r+0xec2>
 800ac06:	aa1f      	add	r2, sp, #124	; 0x7c
 800ac08:	4651      	mov	r1, sl
 800ac0a:	4658      	mov	r0, fp
 800ac0c:	f001 fc18 	bl	800c440 <__ssprint_r>
 800ac10:	e7d7      	b.n	800abc2 <_svfprintf_r+0xec2>
 800ac12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ac16:	4610      	mov	r0, r2
 800ac18:	4619      	mov	r1, r3
 800ac1a:	f7f5 ff8b 	bl	8000b34 <__aeabi_dcmpun>
 800ac1e:	2800      	cmp	r0, #0
 800ac20:	f43f aa44 	beq.w	800a0ac <_svfprintf_r+0x3ac>
 800ac24:	4b1e      	ldr	r3, [pc, #120]	; (800aca0 <_svfprintf_r+0xfa0>)
 800ac26:	4a1f      	ldr	r2, [pc, #124]	; (800aca4 <_svfprintf_r+0xfa4>)
 800ac28:	f7ff ba34 	b.w	800a094 <_svfprintf_r+0x394>
 800ac2c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ac2e:	eba3 0308 	sub.w	r3, r3, r8
 800ac32:	9303      	str	r3, [sp, #12]
 800ac34:	f7ff bab5 	b.w	800a1a2 <_svfprintf_r+0x4a2>
 800ac38:	ea56 0207 	orrs.w	r2, r6, r7
 800ac3c:	950b      	str	r5, [sp, #44]	; 0x2c
 800ac3e:	f43f ac2b 	beq.w	800a498 <_svfprintf_r+0x798>
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	f43f ac9d 	beq.w	800a582 <_svfprintf_r+0x882>
 800ac48:	2b02      	cmp	r3, #2
 800ac4a:	f43f acbd 	beq.w	800a5c8 <_svfprintf_r+0x8c8>
 800ac4e:	ab2c      	add	r3, sp, #176	; 0xb0
 800ac50:	08f1      	lsrs	r1, r6, #3
 800ac52:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800ac56:	08f8      	lsrs	r0, r7, #3
 800ac58:	f006 0207 	and.w	r2, r6, #7
 800ac5c:	4607      	mov	r7, r0
 800ac5e:	460e      	mov	r6, r1
 800ac60:	3230      	adds	r2, #48	; 0x30
 800ac62:	ea56 0107 	orrs.w	r1, r6, r7
 800ac66:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800ac6a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800ac6e:	f47f ac86 	bne.w	800a57e <_svfprintf_r+0x87e>
 800ac72:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ac74:	07c9      	lsls	r1, r1, #31
 800ac76:	d506      	bpl.n	800ac86 <_svfprintf_r+0xf86>
 800ac78:	2a30      	cmp	r2, #48	; 0x30
 800ac7a:	d004      	beq.n	800ac86 <_svfprintf_r+0xf86>
 800ac7c:	2230      	movs	r2, #48	; 0x30
 800ac7e:	f808 2c01 	strb.w	r2, [r8, #-1]
 800ac82:	f1a3 0802 	sub.w	r8, r3, #2
 800ac86:	464e      	mov	r6, r9
 800ac88:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 800ac8c:	eba9 0908 	sub.w	r9, r9, r8
 800ac90:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800ac92:	2700      	movs	r7, #0
 800ac94:	f7ff bad1 	b.w	800a23a <_svfprintf_r+0x53a>
 800ac98:	0800d81c 	.word	0x0800d81c
 800ac9c:	0800d80c 	.word	0x0800d80c
 800aca0:	0800d7e0 	.word	0x0800d7e0
 800aca4:	0800d7e4 	.word	0x0800d7e4

0800aca8 <__utoa>:
 800aca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800acaa:	4c1e      	ldr	r4, [pc, #120]	; (800ad24 <__utoa+0x7c>)
 800acac:	b08b      	sub	sp, #44	; 0x2c
 800acae:	4603      	mov	r3, r0
 800acb0:	460f      	mov	r7, r1
 800acb2:	466d      	mov	r5, sp
 800acb4:	f104 0e20 	add.w	lr, r4, #32
 800acb8:	6820      	ldr	r0, [r4, #0]
 800acba:	6861      	ldr	r1, [r4, #4]
 800acbc:	462e      	mov	r6, r5
 800acbe:	c603      	stmia	r6!, {r0, r1}
 800acc0:	3408      	adds	r4, #8
 800acc2:	4574      	cmp	r4, lr
 800acc4:	4635      	mov	r5, r6
 800acc6:	d1f7      	bne.n	800acb8 <__utoa+0x10>
 800acc8:	7921      	ldrb	r1, [r4, #4]
 800acca:	7131      	strb	r1, [r6, #4]
 800accc:	1e91      	subs	r1, r2, #2
 800acce:	6820      	ldr	r0, [r4, #0]
 800acd0:	6030      	str	r0, [r6, #0]
 800acd2:	2922      	cmp	r1, #34	; 0x22
 800acd4:	f04f 0100 	mov.w	r1, #0
 800acd8:	d904      	bls.n	800ace4 <__utoa+0x3c>
 800acda:	7039      	strb	r1, [r7, #0]
 800acdc:	460f      	mov	r7, r1
 800acde:	4638      	mov	r0, r7
 800ace0:	b00b      	add	sp, #44	; 0x2c
 800ace2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ace4:	1e78      	subs	r0, r7, #1
 800ace6:	4606      	mov	r6, r0
 800ace8:	fbb3 f5f2 	udiv	r5, r3, r2
 800acec:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 800acf0:	fb02 3315 	mls	r3, r2, r5, r3
 800acf4:	4473      	add	r3, lr
 800acf6:	1c4c      	adds	r4, r1, #1
 800acf8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800acfc:	f806 3f01 	strb.w	r3, [r6, #1]!
 800ad00:	462b      	mov	r3, r5
 800ad02:	b965      	cbnz	r5, 800ad1e <__utoa+0x76>
 800ad04:	553d      	strb	r5, [r7, r4]
 800ad06:	187a      	adds	r2, r7, r1
 800ad08:	1acc      	subs	r4, r1, r3
 800ad0a:	42a3      	cmp	r3, r4
 800ad0c:	dae7      	bge.n	800acde <__utoa+0x36>
 800ad0e:	7844      	ldrb	r4, [r0, #1]
 800ad10:	7815      	ldrb	r5, [r2, #0]
 800ad12:	f800 5f01 	strb.w	r5, [r0, #1]!
 800ad16:	3301      	adds	r3, #1
 800ad18:	f802 4901 	strb.w	r4, [r2], #-1
 800ad1c:	e7f4      	b.n	800ad08 <__utoa+0x60>
 800ad1e:	4621      	mov	r1, r4
 800ad20:	e7e2      	b.n	800ace8 <__utoa+0x40>
 800ad22:	bf00      	nop
 800ad24:	0800d82c 	.word	0x0800d82c

0800ad28 <quorem>:
 800ad28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2c:	6903      	ldr	r3, [r0, #16]
 800ad2e:	690c      	ldr	r4, [r1, #16]
 800ad30:	429c      	cmp	r4, r3
 800ad32:	4680      	mov	r8, r0
 800ad34:	f300 8082 	bgt.w	800ae3c <quorem+0x114>
 800ad38:	3c01      	subs	r4, #1
 800ad3a:	f101 0714 	add.w	r7, r1, #20
 800ad3e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800ad42:	f100 0614 	add.w	r6, r0, #20
 800ad46:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ad4a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ad4e:	eb06 030e 	add.w	r3, r6, lr
 800ad52:	3501      	adds	r5, #1
 800ad54:	eb07 090e 	add.w	r9, r7, lr
 800ad58:	9301      	str	r3, [sp, #4]
 800ad5a:	fbb0 f5f5 	udiv	r5, r0, r5
 800ad5e:	b395      	cbz	r5, 800adc6 <quorem+0x9e>
 800ad60:	f04f 0a00 	mov.w	sl, #0
 800ad64:	4638      	mov	r0, r7
 800ad66:	46b4      	mov	ip, r6
 800ad68:	46d3      	mov	fp, sl
 800ad6a:	f850 2b04 	ldr.w	r2, [r0], #4
 800ad6e:	b293      	uxth	r3, r2
 800ad70:	fb05 a303 	mla	r3, r5, r3, sl
 800ad74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	ebab 0303 	sub.w	r3, fp, r3
 800ad7e:	0c12      	lsrs	r2, r2, #16
 800ad80:	f8bc b000 	ldrh.w	fp, [ip]
 800ad84:	fb05 a202 	mla	r2, r5, r2, sl
 800ad88:	fa13 f38b 	uxtah	r3, r3, fp
 800ad8c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ad90:	fa1f fb82 	uxth.w	fp, r2
 800ad94:	f8dc 2000 	ldr.w	r2, [ip]
 800ad98:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800ad9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ada6:	4581      	cmp	r9, r0
 800ada8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800adac:	f84c 3b04 	str.w	r3, [ip], #4
 800adb0:	d2db      	bcs.n	800ad6a <quorem+0x42>
 800adb2:	f856 300e 	ldr.w	r3, [r6, lr]
 800adb6:	b933      	cbnz	r3, 800adc6 <quorem+0x9e>
 800adb8:	9b01      	ldr	r3, [sp, #4]
 800adba:	3b04      	subs	r3, #4
 800adbc:	429e      	cmp	r6, r3
 800adbe:	461a      	mov	r2, r3
 800adc0:	d330      	bcc.n	800ae24 <quorem+0xfc>
 800adc2:	f8c8 4010 	str.w	r4, [r8, #16]
 800adc6:	4640      	mov	r0, r8
 800adc8:	f001 fa63 	bl	800c292 <__mcmp>
 800adcc:	2800      	cmp	r0, #0
 800adce:	db25      	blt.n	800ae1c <quorem+0xf4>
 800add0:	3501      	adds	r5, #1
 800add2:	4630      	mov	r0, r6
 800add4:	f04f 0e00 	mov.w	lr, #0
 800add8:	f857 2b04 	ldr.w	r2, [r7], #4
 800addc:	f8d0 c000 	ldr.w	ip, [r0]
 800ade0:	b293      	uxth	r3, r2
 800ade2:	ebae 0303 	sub.w	r3, lr, r3
 800ade6:	0c12      	lsrs	r2, r2, #16
 800ade8:	fa13 f38c 	uxtah	r3, r3, ip
 800adec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800adf0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800adfa:	45b9      	cmp	r9, r7
 800adfc:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ae00:	f840 3b04 	str.w	r3, [r0], #4
 800ae04:	d2e8      	bcs.n	800add8 <quorem+0xb0>
 800ae06:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800ae0a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800ae0e:	b92a      	cbnz	r2, 800ae1c <quorem+0xf4>
 800ae10:	3b04      	subs	r3, #4
 800ae12:	429e      	cmp	r6, r3
 800ae14:	461a      	mov	r2, r3
 800ae16:	d30b      	bcc.n	800ae30 <quorem+0x108>
 800ae18:	f8c8 4010 	str.w	r4, [r8, #16]
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	b003      	add	sp, #12
 800ae20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae24:	6812      	ldr	r2, [r2, #0]
 800ae26:	3b04      	subs	r3, #4
 800ae28:	2a00      	cmp	r2, #0
 800ae2a:	d1ca      	bne.n	800adc2 <quorem+0x9a>
 800ae2c:	3c01      	subs	r4, #1
 800ae2e:	e7c5      	b.n	800adbc <quorem+0x94>
 800ae30:	6812      	ldr	r2, [r2, #0]
 800ae32:	3b04      	subs	r3, #4
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	d1ef      	bne.n	800ae18 <quorem+0xf0>
 800ae38:	3c01      	subs	r4, #1
 800ae3a:	e7ea      	b.n	800ae12 <quorem+0xea>
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	e7ee      	b.n	800ae1e <quorem+0xf6>

0800ae40 <_dtoa_r>:
 800ae40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae44:	ec57 6b10 	vmov	r6, r7, d0
 800ae48:	b097      	sub	sp, #92	; 0x5c
 800ae4a:	e9cd 6700 	strd	r6, r7, [sp]
 800ae4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ae50:	9107      	str	r1, [sp, #28]
 800ae52:	4604      	mov	r4, r0
 800ae54:	920a      	str	r2, [sp, #40]	; 0x28
 800ae56:	930f      	str	r3, [sp, #60]	; 0x3c
 800ae58:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800ae5a:	b93e      	cbnz	r6, 800ae6c <_dtoa_r+0x2c>
 800ae5c:	2010      	movs	r0, #16
 800ae5e:	f000 fdcf 	bl	800ba00 <malloc>
 800ae62:	6260      	str	r0, [r4, #36]	; 0x24
 800ae64:	6046      	str	r6, [r0, #4]
 800ae66:	6086      	str	r6, [r0, #8]
 800ae68:	6006      	str	r6, [r0, #0]
 800ae6a:	60c6      	str	r6, [r0, #12]
 800ae6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae6e:	6819      	ldr	r1, [r3, #0]
 800ae70:	b151      	cbz	r1, 800ae88 <_dtoa_r+0x48>
 800ae72:	685a      	ldr	r2, [r3, #4]
 800ae74:	604a      	str	r2, [r1, #4]
 800ae76:	2301      	movs	r3, #1
 800ae78:	4093      	lsls	r3, r2
 800ae7a:	608b      	str	r3, [r1, #8]
 800ae7c:	4620      	mov	r0, r4
 800ae7e:	f001 f833 	bl	800bee8 <_Bfree>
 800ae82:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae84:	2200      	movs	r2, #0
 800ae86:	601a      	str	r2, [r3, #0]
 800ae88:	9b01      	ldr	r3, [sp, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	bfbf      	itttt	lt
 800ae8e:	2301      	movlt	r3, #1
 800ae90:	602b      	strlt	r3, [r5, #0]
 800ae92:	9b01      	ldrlt	r3, [sp, #4]
 800ae94:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ae98:	bfb2      	itee	lt
 800ae9a:	9301      	strlt	r3, [sp, #4]
 800ae9c:	2300      	movge	r3, #0
 800ae9e:	602b      	strge	r3, [r5, #0]
 800aea0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800aea4:	4ba8      	ldr	r3, [pc, #672]	; (800b148 <_dtoa_r+0x308>)
 800aea6:	ea33 0308 	bics.w	r3, r3, r8
 800aeaa:	d11b      	bne.n	800aee4 <_dtoa_r+0xa4>
 800aeac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aeae:	f242 730f 	movw	r3, #9999	; 0x270f
 800aeb2:	6013      	str	r3, [r2, #0]
 800aeb4:	9b00      	ldr	r3, [sp, #0]
 800aeb6:	b923      	cbnz	r3, 800aec2 <_dtoa_r+0x82>
 800aeb8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800aebc:	2800      	cmp	r0, #0
 800aebe:	f000 8578 	beq.w	800b9b2 <_dtoa_r+0xb72>
 800aec2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aec4:	b953      	cbnz	r3, 800aedc <_dtoa_r+0x9c>
 800aec6:	4ba1      	ldr	r3, [pc, #644]	; (800b14c <_dtoa_r+0x30c>)
 800aec8:	e021      	b.n	800af0e <_dtoa_r+0xce>
 800aeca:	4ba1      	ldr	r3, [pc, #644]	; (800b150 <_dtoa_r+0x310>)
 800aecc:	9302      	str	r3, [sp, #8]
 800aece:	3308      	adds	r3, #8
 800aed0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	9802      	ldr	r0, [sp, #8]
 800aed6:	b017      	add	sp, #92	; 0x5c
 800aed8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aedc:	4b9b      	ldr	r3, [pc, #620]	; (800b14c <_dtoa_r+0x30c>)
 800aede:	9302      	str	r3, [sp, #8]
 800aee0:	3303      	adds	r3, #3
 800aee2:	e7f5      	b.n	800aed0 <_dtoa_r+0x90>
 800aee4:	e9dd 6700 	ldrd	r6, r7, [sp]
 800aee8:	2200      	movs	r2, #0
 800aeea:	2300      	movs	r3, #0
 800aeec:	4630      	mov	r0, r6
 800aeee:	4639      	mov	r1, r7
 800aef0:	f7f5 fdee 	bl	8000ad0 <__aeabi_dcmpeq>
 800aef4:	4681      	mov	r9, r0
 800aef6:	b160      	cbz	r0, 800af12 <_dtoa_r+0xd2>
 800aef8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aefa:	2301      	movs	r3, #1
 800aefc:	6013      	str	r3, [r2, #0]
 800aefe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 8553 	beq.w	800b9ac <_dtoa_r+0xb6c>
 800af06:	4b93      	ldr	r3, [pc, #588]	; (800b154 <_dtoa_r+0x314>)
 800af08:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800af0a:	6013      	str	r3, [r2, #0]
 800af0c:	3b01      	subs	r3, #1
 800af0e:	9302      	str	r3, [sp, #8]
 800af10:	e7e0      	b.n	800aed4 <_dtoa_r+0x94>
 800af12:	aa14      	add	r2, sp, #80	; 0x50
 800af14:	a915      	add	r1, sp, #84	; 0x54
 800af16:	ec47 6b10 	vmov	d0, r6, r7
 800af1a:	4620      	mov	r0, r4
 800af1c:	f001 fa31 	bl	800c382 <__d2b>
 800af20:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800af24:	4682      	mov	sl, r0
 800af26:	2d00      	cmp	r5, #0
 800af28:	d07e      	beq.n	800b028 <_dtoa_r+0x1e8>
 800af2a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800af2e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800af32:	4630      	mov	r0, r6
 800af34:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800af38:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800af3c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 800af40:	2200      	movs	r2, #0
 800af42:	4b85      	ldr	r3, [pc, #532]	; (800b158 <_dtoa_r+0x318>)
 800af44:	f7f5 f9a8 	bl	8000298 <__aeabi_dsub>
 800af48:	a379      	add	r3, pc, #484	; (adr r3, 800b130 <_dtoa_r+0x2f0>)
 800af4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4e:	f7f5 fb57 	bl	8000600 <__aeabi_dmul>
 800af52:	a379      	add	r3, pc, #484	; (adr r3, 800b138 <_dtoa_r+0x2f8>)
 800af54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af58:	f7f5 f9a0 	bl	800029c <__adddf3>
 800af5c:	4606      	mov	r6, r0
 800af5e:	4628      	mov	r0, r5
 800af60:	460f      	mov	r7, r1
 800af62:	f7f5 fae7 	bl	8000534 <__aeabi_i2d>
 800af66:	a376      	add	r3, pc, #472	; (adr r3, 800b140 <_dtoa_r+0x300>)
 800af68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6c:	f7f5 fb48 	bl	8000600 <__aeabi_dmul>
 800af70:	4602      	mov	r2, r0
 800af72:	460b      	mov	r3, r1
 800af74:	4630      	mov	r0, r6
 800af76:	4639      	mov	r1, r7
 800af78:	f7f5 f990 	bl	800029c <__adddf3>
 800af7c:	4606      	mov	r6, r0
 800af7e:	460f      	mov	r7, r1
 800af80:	f7f5 fdee 	bl	8000b60 <__aeabi_d2iz>
 800af84:	2200      	movs	r2, #0
 800af86:	4683      	mov	fp, r0
 800af88:	2300      	movs	r3, #0
 800af8a:	4630      	mov	r0, r6
 800af8c:	4639      	mov	r1, r7
 800af8e:	f7f5 fda9 	bl	8000ae4 <__aeabi_dcmplt>
 800af92:	b158      	cbz	r0, 800afac <_dtoa_r+0x16c>
 800af94:	4658      	mov	r0, fp
 800af96:	f7f5 facd 	bl	8000534 <__aeabi_i2d>
 800af9a:	4602      	mov	r2, r0
 800af9c:	460b      	mov	r3, r1
 800af9e:	4630      	mov	r0, r6
 800afa0:	4639      	mov	r1, r7
 800afa2:	f7f5 fd95 	bl	8000ad0 <__aeabi_dcmpeq>
 800afa6:	b908      	cbnz	r0, 800afac <_dtoa_r+0x16c>
 800afa8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800afac:	f1bb 0f16 	cmp.w	fp, #22
 800afb0:	d859      	bhi.n	800b066 <_dtoa_r+0x226>
 800afb2:	496a      	ldr	r1, [pc, #424]	; (800b15c <_dtoa_r+0x31c>)
 800afb4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800afb8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800afbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afc0:	f7f5 fdae 	bl	8000b20 <__aeabi_dcmpgt>
 800afc4:	2800      	cmp	r0, #0
 800afc6:	d050      	beq.n	800b06a <_dtoa_r+0x22a>
 800afc8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800afcc:	2300      	movs	r3, #0
 800afce:	930e      	str	r3, [sp, #56]	; 0x38
 800afd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800afd2:	1b5d      	subs	r5, r3, r5
 800afd4:	1e6b      	subs	r3, r5, #1
 800afd6:	9306      	str	r3, [sp, #24]
 800afd8:	bf45      	ittet	mi
 800afda:	f1c5 0301 	rsbmi	r3, r5, #1
 800afde:	9305      	strmi	r3, [sp, #20]
 800afe0:	2300      	movpl	r3, #0
 800afe2:	2300      	movmi	r3, #0
 800afe4:	bf4c      	ite	mi
 800afe6:	9306      	strmi	r3, [sp, #24]
 800afe8:	9305      	strpl	r3, [sp, #20]
 800afea:	f1bb 0f00 	cmp.w	fp, #0
 800afee:	db3e      	blt.n	800b06e <_dtoa_r+0x22e>
 800aff0:	9b06      	ldr	r3, [sp, #24]
 800aff2:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800aff6:	445b      	add	r3, fp
 800aff8:	9306      	str	r3, [sp, #24]
 800affa:	2300      	movs	r3, #0
 800affc:	9308      	str	r3, [sp, #32]
 800affe:	9b07      	ldr	r3, [sp, #28]
 800b000:	2b09      	cmp	r3, #9
 800b002:	f200 80af 	bhi.w	800b164 <_dtoa_r+0x324>
 800b006:	2b05      	cmp	r3, #5
 800b008:	bfc4      	itt	gt
 800b00a:	3b04      	subgt	r3, #4
 800b00c:	9307      	strgt	r3, [sp, #28]
 800b00e:	9b07      	ldr	r3, [sp, #28]
 800b010:	f1a3 0302 	sub.w	r3, r3, #2
 800b014:	bfcc      	ite	gt
 800b016:	2600      	movgt	r6, #0
 800b018:	2601      	movle	r6, #1
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	f200 80ae 	bhi.w	800b17c <_dtoa_r+0x33c>
 800b020:	e8df f003 	tbb	[pc, r3]
 800b024:	772f8482 	.word	0x772f8482
 800b028:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b02a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800b02c:	441d      	add	r5, r3
 800b02e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b032:	2b20      	cmp	r3, #32
 800b034:	dd11      	ble.n	800b05a <_dtoa_r+0x21a>
 800b036:	9a00      	ldr	r2, [sp, #0]
 800b038:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800b03c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 800b040:	fa22 f000 	lsr.w	r0, r2, r0
 800b044:	fa08 f303 	lsl.w	r3, r8, r3
 800b048:	4318      	orrs	r0, r3
 800b04a:	f7f5 fa63 	bl	8000514 <__aeabi_ui2d>
 800b04e:	2301      	movs	r3, #1
 800b050:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b054:	3d01      	subs	r5, #1
 800b056:	9312      	str	r3, [sp, #72]	; 0x48
 800b058:	e772      	b.n	800af40 <_dtoa_r+0x100>
 800b05a:	f1c3 0020 	rsb	r0, r3, #32
 800b05e:	9b00      	ldr	r3, [sp, #0]
 800b060:	fa03 f000 	lsl.w	r0, r3, r0
 800b064:	e7f1      	b.n	800b04a <_dtoa_r+0x20a>
 800b066:	2301      	movs	r3, #1
 800b068:	e7b1      	b.n	800afce <_dtoa_r+0x18e>
 800b06a:	900e      	str	r0, [sp, #56]	; 0x38
 800b06c:	e7b0      	b.n	800afd0 <_dtoa_r+0x190>
 800b06e:	9b05      	ldr	r3, [sp, #20]
 800b070:	eba3 030b 	sub.w	r3, r3, fp
 800b074:	9305      	str	r3, [sp, #20]
 800b076:	f1cb 0300 	rsb	r3, fp, #0
 800b07a:	9308      	str	r3, [sp, #32]
 800b07c:	2300      	movs	r3, #0
 800b07e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b080:	e7bd      	b.n	800affe <_dtoa_r+0x1be>
 800b082:	2301      	movs	r3, #1
 800b084:	9309      	str	r3, [sp, #36]	; 0x24
 800b086:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b088:	2b00      	cmp	r3, #0
 800b08a:	dd7a      	ble.n	800b182 <_dtoa_r+0x342>
 800b08c:	9304      	str	r3, [sp, #16]
 800b08e:	9303      	str	r3, [sp, #12]
 800b090:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b092:	2200      	movs	r2, #0
 800b094:	606a      	str	r2, [r5, #4]
 800b096:	2104      	movs	r1, #4
 800b098:	f101 0214 	add.w	r2, r1, #20
 800b09c:	429a      	cmp	r2, r3
 800b09e:	d975      	bls.n	800b18c <_dtoa_r+0x34c>
 800b0a0:	6869      	ldr	r1, [r5, #4]
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 feec 	bl	800be80 <_Balloc>
 800b0a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0aa:	6028      	str	r0, [r5, #0]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	9302      	str	r3, [sp, #8]
 800b0b0:	9b03      	ldr	r3, [sp, #12]
 800b0b2:	2b0e      	cmp	r3, #14
 800b0b4:	f200 80e5 	bhi.w	800b282 <_dtoa_r+0x442>
 800b0b8:	2e00      	cmp	r6, #0
 800b0ba:	f000 80e2 	beq.w	800b282 <_dtoa_r+0x442>
 800b0be:	ed9d 7b00 	vldr	d7, [sp]
 800b0c2:	f1bb 0f00 	cmp.w	fp, #0
 800b0c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b0ca:	dd74      	ble.n	800b1b6 <_dtoa_r+0x376>
 800b0cc:	4a23      	ldr	r2, [pc, #140]	; (800b15c <_dtoa_r+0x31c>)
 800b0ce:	f00b 030f 	and.w	r3, fp, #15
 800b0d2:	ea4f 162b 	mov.w	r6, fp, asr #4
 800b0d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b0da:	06f0      	lsls	r0, r6, #27
 800b0dc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b0e0:	d559      	bpl.n	800b196 <_dtoa_r+0x356>
 800b0e2:	4b1f      	ldr	r3, [pc, #124]	; (800b160 <_dtoa_r+0x320>)
 800b0e4:	ec51 0b17 	vmov	r0, r1, d7
 800b0e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b0ec:	f7f5 fbb2 	bl	8000854 <__aeabi_ddiv>
 800b0f0:	e9cd 0100 	strd	r0, r1, [sp]
 800b0f4:	f006 060f 	and.w	r6, r6, #15
 800b0f8:	2503      	movs	r5, #3
 800b0fa:	4f19      	ldr	r7, [pc, #100]	; (800b160 <_dtoa_r+0x320>)
 800b0fc:	2e00      	cmp	r6, #0
 800b0fe:	d14c      	bne.n	800b19a <_dtoa_r+0x35a>
 800b100:	4642      	mov	r2, r8
 800b102:	464b      	mov	r3, r9
 800b104:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b108:	f7f5 fba4 	bl	8000854 <__aeabi_ddiv>
 800b10c:	e9cd 0100 	strd	r0, r1, [sp]
 800b110:	e06a      	b.n	800b1e8 <_dtoa_r+0x3a8>
 800b112:	2301      	movs	r3, #1
 800b114:	9309      	str	r3, [sp, #36]	; 0x24
 800b116:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b118:	445b      	add	r3, fp
 800b11a:	9304      	str	r3, [sp, #16]
 800b11c:	3301      	adds	r3, #1
 800b11e:	2b01      	cmp	r3, #1
 800b120:	9303      	str	r3, [sp, #12]
 800b122:	bfb8      	it	lt
 800b124:	2301      	movlt	r3, #1
 800b126:	e7b3      	b.n	800b090 <_dtoa_r+0x250>
 800b128:	2300      	movs	r3, #0
 800b12a:	e7ab      	b.n	800b084 <_dtoa_r+0x244>
 800b12c:	2300      	movs	r3, #0
 800b12e:	e7f1      	b.n	800b114 <_dtoa_r+0x2d4>
 800b130:	636f4361 	.word	0x636f4361
 800b134:	3fd287a7 	.word	0x3fd287a7
 800b138:	8b60c8b3 	.word	0x8b60c8b3
 800b13c:	3fc68a28 	.word	0x3fc68a28
 800b140:	509f79fb 	.word	0x509f79fb
 800b144:	3fd34413 	.word	0x3fd34413
 800b148:	7ff00000 	.word	0x7ff00000
 800b14c:	0800d85a 	.word	0x0800d85a
 800b150:	0800d851 	.word	0x0800d851
 800b154:	0800d80b 	.word	0x0800d80b
 800b158:	3ff80000 	.word	0x3ff80000
 800b15c:	0800d890 	.word	0x0800d890
 800b160:	0800d868 	.word	0x0800d868
 800b164:	2601      	movs	r6, #1
 800b166:	2300      	movs	r3, #0
 800b168:	9307      	str	r3, [sp, #28]
 800b16a:	9609      	str	r6, [sp, #36]	; 0x24
 800b16c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b170:	9304      	str	r3, [sp, #16]
 800b172:	9303      	str	r3, [sp, #12]
 800b174:	2200      	movs	r2, #0
 800b176:	2312      	movs	r3, #18
 800b178:	920a      	str	r2, [sp, #40]	; 0x28
 800b17a:	e789      	b.n	800b090 <_dtoa_r+0x250>
 800b17c:	2301      	movs	r3, #1
 800b17e:	9309      	str	r3, [sp, #36]	; 0x24
 800b180:	e7f4      	b.n	800b16c <_dtoa_r+0x32c>
 800b182:	2301      	movs	r3, #1
 800b184:	9304      	str	r3, [sp, #16]
 800b186:	9303      	str	r3, [sp, #12]
 800b188:	461a      	mov	r2, r3
 800b18a:	e7f5      	b.n	800b178 <_dtoa_r+0x338>
 800b18c:	686a      	ldr	r2, [r5, #4]
 800b18e:	3201      	adds	r2, #1
 800b190:	606a      	str	r2, [r5, #4]
 800b192:	0049      	lsls	r1, r1, #1
 800b194:	e780      	b.n	800b098 <_dtoa_r+0x258>
 800b196:	2502      	movs	r5, #2
 800b198:	e7af      	b.n	800b0fa <_dtoa_r+0x2ba>
 800b19a:	07f1      	lsls	r1, r6, #31
 800b19c:	d508      	bpl.n	800b1b0 <_dtoa_r+0x370>
 800b19e:	4640      	mov	r0, r8
 800b1a0:	4649      	mov	r1, r9
 800b1a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1a6:	f7f5 fa2b 	bl	8000600 <__aeabi_dmul>
 800b1aa:	3501      	adds	r5, #1
 800b1ac:	4680      	mov	r8, r0
 800b1ae:	4689      	mov	r9, r1
 800b1b0:	1076      	asrs	r6, r6, #1
 800b1b2:	3708      	adds	r7, #8
 800b1b4:	e7a2      	b.n	800b0fc <_dtoa_r+0x2bc>
 800b1b6:	f000 809d 	beq.w	800b2f4 <_dtoa_r+0x4b4>
 800b1ba:	f1cb 0600 	rsb	r6, fp, #0
 800b1be:	4b9f      	ldr	r3, [pc, #636]	; (800b43c <_dtoa_r+0x5fc>)
 800b1c0:	4f9f      	ldr	r7, [pc, #636]	; (800b440 <_dtoa_r+0x600>)
 800b1c2:	f006 020f 	and.w	r2, r6, #15
 800b1c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b1d2:	f7f5 fa15 	bl	8000600 <__aeabi_dmul>
 800b1d6:	e9cd 0100 	strd	r0, r1, [sp]
 800b1da:	1136      	asrs	r6, r6, #4
 800b1dc:	2300      	movs	r3, #0
 800b1de:	2502      	movs	r5, #2
 800b1e0:	2e00      	cmp	r6, #0
 800b1e2:	d17c      	bne.n	800b2de <_dtoa_r+0x49e>
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d191      	bne.n	800b10c <_dtoa_r+0x2cc>
 800b1e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	f000 8084 	beq.w	800b2f8 <_dtoa_r+0x4b8>
 800b1f0:	e9dd 8900 	ldrd	r8, r9, [sp]
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	4b93      	ldr	r3, [pc, #588]	; (800b444 <_dtoa_r+0x604>)
 800b1f8:	4640      	mov	r0, r8
 800b1fa:	4649      	mov	r1, r9
 800b1fc:	f7f5 fc72 	bl	8000ae4 <__aeabi_dcmplt>
 800b200:	2800      	cmp	r0, #0
 800b202:	d079      	beq.n	800b2f8 <_dtoa_r+0x4b8>
 800b204:	9b03      	ldr	r3, [sp, #12]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d076      	beq.n	800b2f8 <_dtoa_r+0x4b8>
 800b20a:	9b04      	ldr	r3, [sp, #16]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	dd34      	ble.n	800b27a <_dtoa_r+0x43a>
 800b210:	2200      	movs	r2, #0
 800b212:	4b8d      	ldr	r3, [pc, #564]	; (800b448 <_dtoa_r+0x608>)
 800b214:	4640      	mov	r0, r8
 800b216:	4649      	mov	r1, r9
 800b218:	f7f5 f9f2 	bl	8000600 <__aeabi_dmul>
 800b21c:	e9cd 0100 	strd	r0, r1, [sp]
 800b220:	9e04      	ldr	r6, [sp, #16]
 800b222:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800b226:	3501      	adds	r5, #1
 800b228:	4628      	mov	r0, r5
 800b22a:	f7f5 f983 	bl	8000534 <__aeabi_i2d>
 800b22e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b232:	f7f5 f9e5 	bl	8000600 <__aeabi_dmul>
 800b236:	2200      	movs	r2, #0
 800b238:	4b84      	ldr	r3, [pc, #528]	; (800b44c <_dtoa_r+0x60c>)
 800b23a:	f7f5 f82f 	bl	800029c <__adddf3>
 800b23e:	4680      	mov	r8, r0
 800b240:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 800b244:	2e00      	cmp	r6, #0
 800b246:	d15a      	bne.n	800b2fe <_dtoa_r+0x4be>
 800b248:	2200      	movs	r2, #0
 800b24a:	4b81      	ldr	r3, [pc, #516]	; (800b450 <_dtoa_r+0x610>)
 800b24c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b250:	f7f5 f822 	bl	8000298 <__aeabi_dsub>
 800b254:	4642      	mov	r2, r8
 800b256:	464b      	mov	r3, r9
 800b258:	e9cd 0100 	strd	r0, r1, [sp]
 800b25c:	f7f5 fc60 	bl	8000b20 <__aeabi_dcmpgt>
 800b260:	2800      	cmp	r0, #0
 800b262:	f040 829b 	bne.w	800b79c <_dtoa_r+0x95c>
 800b266:	4642      	mov	r2, r8
 800b268:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b26c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b270:	f7f5 fc38 	bl	8000ae4 <__aeabi_dcmplt>
 800b274:	2800      	cmp	r0, #0
 800b276:	f040 828f 	bne.w	800b798 <_dtoa_r+0x958>
 800b27a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b27e:	e9cd 2300 	strd	r2, r3, [sp]
 800b282:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b284:	2b00      	cmp	r3, #0
 800b286:	f2c0 8150 	blt.w	800b52a <_dtoa_r+0x6ea>
 800b28a:	f1bb 0f0e 	cmp.w	fp, #14
 800b28e:	f300 814c 	bgt.w	800b52a <_dtoa_r+0x6ea>
 800b292:	4b6a      	ldr	r3, [pc, #424]	; (800b43c <_dtoa_r+0x5fc>)
 800b294:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b298:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	f280 80da 	bge.w	800b458 <_dtoa_r+0x618>
 800b2a4:	9b03      	ldr	r3, [sp, #12]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	f300 80d6 	bgt.w	800b458 <_dtoa_r+0x618>
 800b2ac:	f040 8273 	bne.w	800b796 <_dtoa_r+0x956>
 800b2b0:	2200      	movs	r2, #0
 800b2b2:	4b67      	ldr	r3, [pc, #412]	; (800b450 <_dtoa_r+0x610>)
 800b2b4:	4640      	mov	r0, r8
 800b2b6:	4649      	mov	r1, r9
 800b2b8:	f7f5 f9a2 	bl	8000600 <__aeabi_dmul>
 800b2bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2c0:	f7f5 fc24 	bl	8000b0c <__aeabi_dcmpge>
 800b2c4:	9e03      	ldr	r6, [sp, #12]
 800b2c6:	4637      	mov	r7, r6
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	f040 824a 	bne.w	800b762 <_dtoa_r+0x922>
 800b2ce:	9b02      	ldr	r3, [sp, #8]
 800b2d0:	9a02      	ldr	r2, [sp, #8]
 800b2d2:	1c5d      	adds	r5, r3, #1
 800b2d4:	2331      	movs	r3, #49	; 0x31
 800b2d6:	7013      	strb	r3, [r2, #0]
 800b2d8:	f10b 0b01 	add.w	fp, fp, #1
 800b2dc:	e245      	b.n	800b76a <_dtoa_r+0x92a>
 800b2de:	07f2      	lsls	r2, r6, #31
 800b2e0:	d505      	bpl.n	800b2ee <_dtoa_r+0x4ae>
 800b2e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2e6:	f7f5 f98b 	bl	8000600 <__aeabi_dmul>
 800b2ea:	3501      	adds	r5, #1
 800b2ec:	2301      	movs	r3, #1
 800b2ee:	1076      	asrs	r6, r6, #1
 800b2f0:	3708      	adds	r7, #8
 800b2f2:	e775      	b.n	800b1e0 <_dtoa_r+0x3a0>
 800b2f4:	2502      	movs	r5, #2
 800b2f6:	e777      	b.n	800b1e8 <_dtoa_r+0x3a8>
 800b2f8:	465f      	mov	r7, fp
 800b2fa:	9e03      	ldr	r6, [sp, #12]
 800b2fc:	e794      	b.n	800b228 <_dtoa_r+0x3e8>
 800b2fe:	9a02      	ldr	r2, [sp, #8]
 800b300:	4b4e      	ldr	r3, [pc, #312]	; (800b43c <_dtoa_r+0x5fc>)
 800b302:	4432      	add	r2, r6
 800b304:	9213      	str	r2, [sp, #76]	; 0x4c
 800b306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b308:	1e71      	subs	r1, r6, #1
 800b30a:	2a00      	cmp	r2, #0
 800b30c:	d048      	beq.n	800b3a0 <_dtoa_r+0x560>
 800b30e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 800b312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b316:	2000      	movs	r0, #0
 800b318:	494e      	ldr	r1, [pc, #312]	; (800b454 <_dtoa_r+0x614>)
 800b31a:	f7f5 fa9b 	bl	8000854 <__aeabi_ddiv>
 800b31e:	4642      	mov	r2, r8
 800b320:	464b      	mov	r3, r9
 800b322:	f7f4 ffb9 	bl	8000298 <__aeabi_dsub>
 800b326:	9d02      	ldr	r5, [sp, #8]
 800b328:	4680      	mov	r8, r0
 800b32a:	4689      	mov	r9, r1
 800b32c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b330:	f7f5 fc16 	bl	8000b60 <__aeabi_d2iz>
 800b334:	4606      	mov	r6, r0
 800b336:	f7f5 f8fd 	bl	8000534 <__aeabi_i2d>
 800b33a:	4602      	mov	r2, r0
 800b33c:	460b      	mov	r3, r1
 800b33e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b342:	f7f4 ffa9 	bl	8000298 <__aeabi_dsub>
 800b346:	3630      	adds	r6, #48	; 0x30
 800b348:	f805 6b01 	strb.w	r6, [r5], #1
 800b34c:	4642      	mov	r2, r8
 800b34e:	464b      	mov	r3, r9
 800b350:	e9cd 0100 	strd	r0, r1, [sp]
 800b354:	f7f5 fbc6 	bl	8000ae4 <__aeabi_dcmplt>
 800b358:	2800      	cmp	r0, #0
 800b35a:	d165      	bne.n	800b428 <_dtoa_r+0x5e8>
 800b35c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b360:	2000      	movs	r0, #0
 800b362:	4938      	ldr	r1, [pc, #224]	; (800b444 <_dtoa_r+0x604>)
 800b364:	f7f4 ff98 	bl	8000298 <__aeabi_dsub>
 800b368:	4642      	mov	r2, r8
 800b36a:	464b      	mov	r3, r9
 800b36c:	f7f5 fbba 	bl	8000ae4 <__aeabi_dcmplt>
 800b370:	2800      	cmp	r0, #0
 800b372:	f040 80ba 	bne.w	800b4ea <_dtoa_r+0x6aa>
 800b376:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b378:	429d      	cmp	r5, r3
 800b37a:	f43f af7e 	beq.w	800b27a <_dtoa_r+0x43a>
 800b37e:	2200      	movs	r2, #0
 800b380:	4b31      	ldr	r3, [pc, #196]	; (800b448 <_dtoa_r+0x608>)
 800b382:	4640      	mov	r0, r8
 800b384:	4649      	mov	r1, r9
 800b386:	f7f5 f93b 	bl	8000600 <__aeabi_dmul>
 800b38a:	2200      	movs	r2, #0
 800b38c:	4680      	mov	r8, r0
 800b38e:	4689      	mov	r9, r1
 800b390:	4b2d      	ldr	r3, [pc, #180]	; (800b448 <_dtoa_r+0x608>)
 800b392:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b396:	f7f5 f933 	bl	8000600 <__aeabi_dmul>
 800b39a:	e9cd 0100 	strd	r0, r1, [sp]
 800b39e:	e7c5      	b.n	800b32c <_dtoa_r+0x4ec>
 800b3a0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800b3a4:	4642      	mov	r2, r8
 800b3a6:	464b      	mov	r3, r9
 800b3a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b3ac:	f7f5 f928 	bl	8000600 <__aeabi_dmul>
 800b3b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b3b4:	9d02      	ldr	r5, [sp, #8]
 800b3b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3ba:	f7f5 fbd1 	bl	8000b60 <__aeabi_d2iz>
 800b3be:	4606      	mov	r6, r0
 800b3c0:	f7f5 f8b8 	bl	8000534 <__aeabi_i2d>
 800b3c4:	3630      	adds	r6, #48	; 0x30
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	460b      	mov	r3, r1
 800b3ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b3ce:	f7f4 ff63 	bl	8000298 <__aeabi_dsub>
 800b3d2:	f805 6b01 	strb.w	r6, [r5], #1
 800b3d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b3d8:	42ab      	cmp	r3, r5
 800b3da:	4680      	mov	r8, r0
 800b3dc:	4689      	mov	r9, r1
 800b3de:	f04f 0200 	mov.w	r2, #0
 800b3e2:	d125      	bne.n	800b430 <_dtoa_r+0x5f0>
 800b3e4:	4b1b      	ldr	r3, [pc, #108]	; (800b454 <_dtoa_r+0x614>)
 800b3e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b3ea:	f7f4 ff57 	bl	800029c <__adddf3>
 800b3ee:	4602      	mov	r2, r0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4640      	mov	r0, r8
 800b3f4:	4649      	mov	r1, r9
 800b3f6:	f7f5 fb93 	bl	8000b20 <__aeabi_dcmpgt>
 800b3fa:	2800      	cmp	r0, #0
 800b3fc:	d175      	bne.n	800b4ea <_dtoa_r+0x6aa>
 800b3fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b402:	2000      	movs	r0, #0
 800b404:	4913      	ldr	r1, [pc, #76]	; (800b454 <_dtoa_r+0x614>)
 800b406:	f7f4 ff47 	bl	8000298 <__aeabi_dsub>
 800b40a:	4602      	mov	r2, r0
 800b40c:	460b      	mov	r3, r1
 800b40e:	4640      	mov	r0, r8
 800b410:	4649      	mov	r1, r9
 800b412:	f7f5 fb67 	bl	8000ae4 <__aeabi_dcmplt>
 800b416:	2800      	cmp	r0, #0
 800b418:	f43f af2f 	beq.w	800b27a <_dtoa_r+0x43a>
 800b41c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b420:	2b30      	cmp	r3, #48	; 0x30
 800b422:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800b426:	d001      	beq.n	800b42c <_dtoa_r+0x5ec>
 800b428:	46bb      	mov	fp, r7
 800b42a:	e04d      	b.n	800b4c8 <_dtoa_r+0x688>
 800b42c:	4615      	mov	r5, r2
 800b42e:	e7f5      	b.n	800b41c <_dtoa_r+0x5dc>
 800b430:	4b05      	ldr	r3, [pc, #20]	; (800b448 <_dtoa_r+0x608>)
 800b432:	f7f5 f8e5 	bl	8000600 <__aeabi_dmul>
 800b436:	e9cd 0100 	strd	r0, r1, [sp]
 800b43a:	e7bc      	b.n	800b3b6 <_dtoa_r+0x576>
 800b43c:	0800d890 	.word	0x0800d890
 800b440:	0800d868 	.word	0x0800d868
 800b444:	3ff00000 	.word	0x3ff00000
 800b448:	40240000 	.word	0x40240000
 800b44c:	401c0000 	.word	0x401c0000
 800b450:	40140000 	.word	0x40140000
 800b454:	3fe00000 	.word	0x3fe00000
 800b458:	e9dd 6700 	ldrd	r6, r7, [sp]
 800b45c:	9d02      	ldr	r5, [sp, #8]
 800b45e:	4642      	mov	r2, r8
 800b460:	464b      	mov	r3, r9
 800b462:	4630      	mov	r0, r6
 800b464:	4639      	mov	r1, r7
 800b466:	f7f5 f9f5 	bl	8000854 <__aeabi_ddiv>
 800b46a:	f7f5 fb79 	bl	8000b60 <__aeabi_d2iz>
 800b46e:	9000      	str	r0, [sp, #0]
 800b470:	f7f5 f860 	bl	8000534 <__aeabi_i2d>
 800b474:	4642      	mov	r2, r8
 800b476:	464b      	mov	r3, r9
 800b478:	f7f5 f8c2 	bl	8000600 <__aeabi_dmul>
 800b47c:	4602      	mov	r2, r0
 800b47e:	460b      	mov	r3, r1
 800b480:	4630      	mov	r0, r6
 800b482:	4639      	mov	r1, r7
 800b484:	f7f4 ff08 	bl	8000298 <__aeabi_dsub>
 800b488:	9e00      	ldr	r6, [sp, #0]
 800b48a:	9f03      	ldr	r7, [sp, #12]
 800b48c:	3630      	adds	r6, #48	; 0x30
 800b48e:	f805 6b01 	strb.w	r6, [r5], #1
 800b492:	9e02      	ldr	r6, [sp, #8]
 800b494:	1bae      	subs	r6, r5, r6
 800b496:	42b7      	cmp	r7, r6
 800b498:	4602      	mov	r2, r0
 800b49a:	460b      	mov	r3, r1
 800b49c:	d138      	bne.n	800b510 <_dtoa_r+0x6d0>
 800b49e:	f7f4 fefd 	bl	800029c <__adddf3>
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	460f      	mov	r7, r1
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	4649      	mov	r1, r9
 800b4ae:	f7f5 fb19 	bl	8000ae4 <__aeabi_dcmplt>
 800b4b2:	b9c8      	cbnz	r0, 800b4e8 <_dtoa_r+0x6a8>
 800b4b4:	4632      	mov	r2, r6
 800b4b6:	463b      	mov	r3, r7
 800b4b8:	4640      	mov	r0, r8
 800b4ba:	4649      	mov	r1, r9
 800b4bc:	f7f5 fb08 	bl	8000ad0 <__aeabi_dcmpeq>
 800b4c0:	b110      	cbz	r0, 800b4c8 <_dtoa_r+0x688>
 800b4c2:	9b00      	ldr	r3, [sp, #0]
 800b4c4:	07db      	lsls	r3, r3, #31
 800b4c6:	d40f      	bmi.n	800b4e8 <_dtoa_r+0x6a8>
 800b4c8:	4651      	mov	r1, sl
 800b4ca:	4620      	mov	r0, r4
 800b4cc:	f000 fd0c 	bl	800bee8 <_Bfree>
 800b4d0:	2300      	movs	r3, #0
 800b4d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b4d4:	702b      	strb	r3, [r5, #0]
 800b4d6:	f10b 0301 	add.w	r3, fp, #1
 800b4da:	6013      	str	r3, [r2, #0]
 800b4dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	f43f acf8 	beq.w	800aed4 <_dtoa_r+0x94>
 800b4e4:	601d      	str	r5, [r3, #0]
 800b4e6:	e4f5      	b.n	800aed4 <_dtoa_r+0x94>
 800b4e8:	465f      	mov	r7, fp
 800b4ea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b4ee:	2a39      	cmp	r2, #57	; 0x39
 800b4f0:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800b4f4:	d106      	bne.n	800b504 <_dtoa_r+0x6c4>
 800b4f6:	9a02      	ldr	r2, [sp, #8]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d107      	bne.n	800b50c <_dtoa_r+0x6cc>
 800b4fc:	2330      	movs	r3, #48	; 0x30
 800b4fe:	7013      	strb	r3, [r2, #0]
 800b500:	3701      	adds	r7, #1
 800b502:	4613      	mov	r3, r2
 800b504:	781a      	ldrb	r2, [r3, #0]
 800b506:	3201      	adds	r2, #1
 800b508:	701a      	strb	r2, [r3, #0]
 800b50a:	e78d      	b.n	800b428 <_dtoa_r+0x5e8>
 800b50c:	461d      	mov	r5, r3
 800b50e:	e7ec      	b.n	800b4ea <_dtoa_r+0x6aa>
 800b510:	2200      	movs	r2, #0
 800b512:	4ba4      	ldr	r3, [pc, #656]	; (800b7a4 <_dtoa_r+0x964>)
 800b514:	f7f5 f874 	bl	8000600 <__aeabi_dmul>
 800b518:	2200      	movs	r2, #0
 800b51a:	2300      	movs	r3, #0
 800b51c:	4606      	mov	r6, r0
 800b51e:	460f      	mov	r7, r1
 800b520:	f7f5 fad6 	bl	8000ad0 <__aeabi_dcmpeq>
 800b524:	2800      	cmp	r0, #0
 800b526:	d09a      	beq.n	800b45e <_dtoa_r+0x61e>
 800b528:	e7ce      	b.n	800b4c8 <_dtoa_r+0x688>
 800b52a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b52c:	2a00      	cmp	r2, #0
 800b52e:	f000 80cd 	beq.w	800b6cc <_dtoa_r+0x88c>
 800b532:	9a07      	ldr	r2, [sp, #28]
 800b534:	2a01      	cmp	r2, #1
 800b536:	f300 80af 	bgt.w	800b698 <_dtoa_r+0x858>
 800b53a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b53c:	2a00      	cmp	r2, #0
 800b53e:	f000 80a7 	beq.w	800b690 <_dtoa_r+0x850>
 800b542:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b546:	9e08      	ldr	r6, [sp, #32]
 800b548:	9d05      	ldr	r5, [sp, #20]
 800b54a:	9a05      	ldr	r2, [sp, #20]
 800b54c:	441a      	add	r2, r3
 800b54e:	9205      	str	r2, [sp, #20]
 800b550:	9a06      	ldr	r2, [sp, #24]
 800b552:	2101      	movs	r1, #1
 800b554:	441a      	add	r2, r3
 800b556:	4620      	mov	r0, r4
 800b558:	9206      	str	r2, [sp, #24]
 800b55a:	f000 fd65 	bl	800c028 <__i2b>
 800b55e:	4607      	mov	r7, r0
 800b560:	2d00      	cmp	r5, #0
 800b562:	dd0c      	ble.n	800b57e <_dtoa_r+0x73e>
 800b564:	9b06      	ldr	r3, [sp, #24]
 800b566:	2b00      	cmp	r3, #0
 800b568:	dd09      	ble.n	800b57e <_dtoa_r+0x73e>
 800b56a:	42ab      	cmp	r3, r5
 800b56c:	9a05      	ldr	r2, [sp, #20]
 800b56e:	bfa8      	it	ge
 800b570:	462b      	movge	r3, r5
 800b572:	1ad2      	subs	r2, r2, r3
 800b574:	9205      	str	r2, [sp, #20]
 800b576:	9a06      	ldr	r2, [sp, #24]
 800b578:	1aed      	subs	r5, r5, r3
 800b57a:	1ad3      	subs	r3, r2, r3
 800b57c:	9306      	str	r3, [sp, #24]
 800b57e:	9b08      	ldr	r3, [sp, #32]
 800b580:	b1f3      	cbz	r3, 800b5c0 <_dtoa_r+0x780>
 800b582:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b584:	2b00      	cmp	r3, #0
 800b586:	f000 80a5 	beq.w	800b6d4 <_dtoa_r+0x894>
 800b58a:	2e00      	cmp	r6, #0
 800b58c:	dd10      	ble.n	800b5b0 <_dtoa_r+0x770>
 800b58e:	4639      	mov	r1, r7
 800b590:	4632      	mov	r2, r6
 800b592:	4620      	mov	r0, r4
 800b594:	f000 fdde 	bl	800c154 <__pow5mult>
 800b598:	4652      	mov	r2, sl
 800b59a:	4601      	mov	r1, r0
 800b59c:	4607      	mov	r7, r0
 800b59e:	4620      	mov	r0, r4
 800b5a0:	f000 fd4b 	bl	800c03a <__multiply>
 800b5a4:	4651      	mov	r1, sl
 800b5a6:	4680      	mov	r8, r0
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 fc9d 	bl	800bee8 <_Bfree>
 800b5ae:	46c2      	mov	sl, r8
 800b5b0:	9b08      	ldr	r3, [sp, #32]
 800b5b2:	1b9a      	subs	r2, r3, r6
 800b5b4:	d004      	beq.n	800b5c0 <_dtoa_r+0x780>
 800b5b6:	4651      	mov	r1, sl
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	f000 fdcb 	bl	800c154 <__pow5mult>
 800b5be:	4682      	mov	sl, r0
 800b5c0:	2101      	movs	r1, #1
 800b5c2:	4620      	mov	r0, r4
 800b5c4:	f000 fd30 	bl	800c028 <__i2b>
 800b5c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	4606      	mov	r6, r0
 800b5ce:	f340 8083 	ble.w	800b6d8 <_dtoa_r+0x898>
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	4601      	mov	r1, r0
 800b5d6:	4620      	mov	r0, r4
 800b5d8:	f000 fdbc 	bl	800c154 <__pow5mult>
 800b5dc:	9b07      	ldr	r3, [sp, #28]
 800b5de:	2b01      	cmp	r3, #1
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	dd7c      	ble.n	800b6de <_dtoa_r+0x89e>
 800b5e4:	f04f 0800 	mov.w	r8, #0
 800b5e8:	6933      	ldr	r3, [r6, #16]
 800b5ea:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b5ee:	6918      	ldr	r0, [r3, #16]
 800b5f0:	f000 fccc 	bl	800bf8c <__hi0bits>
 800b5f4:	f1c0 0020 	rsb	r0, r0, #32
 800b5f8:	9b06      	ldr	r3, [sp, #24]
 800b5fa:	4418      	add	r0, r3
 800b5fc:	f010 001f 	ands.w	r0, r0, #31
 800b600:	f000 8096 	beq.w	800b730 <_dtoa_r+0x8f0>
 800b604:	f1c0 0320 	rsb	r3, r0, #32
 800b608:	2b04      	cmp	r3, #4
 800b60a:	f340 8087 	ble.w	800b71c <_dtoa_r+0x8dc>
 800b60e:	9b05      	ldr	r3, [sp, #20]
 800b610:	f1c0 001c 	rsb	r0, r0, #28
 800b614:	4403      	add	r3, r0
 800b616:	9305      	str	r3, [sp, #20]
 800b618:	9b06      	ldr	r3, [sp, #24]
 800b61a:	4405      	add	r5, r0
 800b61c:	4403      	add	r3, r0
 800b61e:	9306      	str	r3, [sp, #24]
 800b620:	9b05      	ldr	r3, [sp, #20]
 800b622:	2b00      	cmp	r3, #0
 800b624:	dd05      	ble.n	800b632 <_dtoa_r+0x7f2>
 800b626:	4651      	mov	r1, sl
 800b628:	461a      	mov	r2, r3
 800b62a:	4620      	mov	r0, r4
 800b62c:	f000 fde0 	bl	800c1f0 <__lshift>
 800b630:	4682      	mov	sl, r0
 800b632:	9b06      	ldr	r3, [sp, #24]
 800b634:	2b00      	cmp	r3, #0
 800b636:	dd05      	ble.n	800b644 <_dtoa_r+0x804>
 800b638:	4631      	mov	r1, r6
 800b63a:	461a      	mov	r2, r3
 800b63c:	4620      	mov	r0, r4
 800b63e:	f000 fdd7 	bl	800c1f0 <__lshift>
 800b642:	4606      	mov	r6, r0
 800b644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b646:	2b00      	cmp	r3, #0
 800b648:	d074      	beq.n	800b734 <_dtoa_r+0x8f4>
 800b64a:	4631      	mov	r1, r6
 800b64c:	4650      	mov	r0, sl
 800b64e:	f000 fe20 	bl	800c292 <__mcmp>
 800b652:	2800      	cmp	r0, #0
 800b654:	da6e      	bge.n	800b734 <_dtoa_r+0x8f4>
 800b656:	2300      	movs	r3, #0
 800b658:	4651      	mov	r1, sl
 800b65a:	220a      	movs	r2, #10
 800b65c:	4620      	mov	r0, r4
 800b65e:	f000 fc5a 	bl	800bf16 <__multadd>
 800b662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b664:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800b668:	4682      	mov	sl, r0
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	f000 81a8 	beq.w	800b9c0 <_dtoa_r+0xb80>
 800b670:	2300      	movs	r3, #0
 800b672:	4639      	mov	r1, r7
 800b674:	220a      	movs	r2, #10
 800b676:	4620      	mov	r0, r4
 800b678:	f000 fc4d 	bl	800bf16 <__multadd>
 800b67c:	9b04      	ldr	r3, [sp, #16]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	4607      	mov	r7, r0
 800b682:	f300 80c8 	bgt.w	800b816 <_dtoa_r+0x9d6>
 800b686:	9b07      	ldr	r3, [sp, #28]
 800b688:	2b02      	cmp	r3, #2
 800b68a:	f340 80c4 	ble.w	800b816 <_dtoa_r+0x9d6>
 800b68e:	e059      	b.n	800b744 <_dtoa_r+0x904>
 800b690:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b692:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b696:	e756      	b.n	800b546 <_dtoa_r+0x706>
 800b698:	9b03      	ldr	r3, [sp, #12]
 800b69a:	1e5e      	subs	r6, r3, #1
 800b69c:	9b08      	ldr	r3, [sp, #32]
 800b69e:	42b3      	cmp	r3, r6
 800b6a0:	bfbf      	itttt	lt
 800b6a2:	9b08      	ldrlt	r3, [sp, #32]
 800b6a4:	9608      	strlt	r6, [sp, #32]
 800b6a6:	1af2      	sublt	r2, r6, r3
 800b6a8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 800b6aa:	bfb6      	itet	lt
 800b6ac:	189b      	addlt	r3, r3, r2
 800b6ae:	1b9e      	subge	r6, r3, r6
 800b6b0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 800b6b2:	9b03      	ldr	r3, [sp, #12]
 800b6b4:	bfb8      	it	lt
 800b6b6:	2600      	movlt	r6, #0
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	bfb9      	ittee	lt
 800b6bc:	9b05      	ldrlt	r3, [sp, #20]
 800b6be:	9a03      	ldrlt	r2, [sp, #12]
 800b6c0:	9d05      	ldrge	r5, [sp, #20]
 800b6c2:	9b03      	ldrge	r3, [sp, #12]
 800b6c4:	bfbc      	itt	lt
 800b6c6:	1a9d      	sublt	r5, r3, r2
 800b6c8:	2300      	movlt	r3, #0
 800b6ca:	e73e      	b.n	800b54a <_dtoa_r+0x70a>
 800b6cc:	9e08      	ldr	r6, [sp, #32]
 800b6ce:	9d05      	ldr	r5, [sp, #20]
 800b6d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b6d2:	e745      	b.n	800b560 <_dtoa_r+0x720>
 800b6d4:	9a08      	ldr	r2, [sp, #32]
 800b6d6:	e76e      	b.n	800b5b6 <_dtoa_r+0x776>
 800b6d8:	9b07      	ldr	r3, [sp, #28]
 800b6da:	2b01      	cmp	r3, #1
 800b6dc:	dc19      	bgt.n	800b712 <_dtoa_r+0x8d2>
 800b6de:	9b00      	ldr	r3, [sp, #0]
 800b6e0:	b9bb      	cbnz	r3, 800b712 <_dtoa_r+0x8d2>
 800b6e2:	9b01      	ldr	r3, [sp, #4]
 800b6e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6e8:	b99b      	cbnz	r3, 800b712 <_dtoa_r+0x8d2>
 800b6ea:	9b01      	ldr	r3, [sp, #4]
 800b6ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b6f0:	0d1b      	lsrs	r3, r3, #20
 800b6f2:	051b      	lsls	r3, r3, #20
 800b6f4:	b183      	cbz	r3, 800b718 <_dtoa_r+0x8d8>
 800b6f6:	9b05      	ldr	r3, [sp, #20]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	9305      	str	r3, [sp, #20]
 800b6fc:	9b06      	ldr	r3, [sp, #24]
 800b6fe:	3301      	adds	r3, #1
 800b700:	9306      	str	r3, [sp, #24]
 800b702:	f04f 0801 	mov.w	r8, #1
 800b706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b708:	2b00      	cmp	r3, #0
 800b70a:	f47f af6d 	bne.w	800b5e8 <_dtoa_r+0x7a8>
 800b70e:	2001      	movs	r0, #1
 800b710:	e772      	b.n	800b5f8 <_dtoa_r+0x7b8>
 800b712:	f04f 0800 	mov.w	r8, #0
 800b716:	e7f6      	b.n	800b706 <_dtoa_r+0x8c6>
 800b718:	4698      	mov	r8, r3
 800b71a:	e7f4      	b.n	800b706 <_dtoa_r+0x8c6>
 800b71c:	d080      	beq.n	800b620 <_dtoa_r+0x7e0>
 800b71e:	9a05      	ldr	r2, [sp, #20]
 800b720:	331c      	adds	r3, #28
 800b722:	441a      	add	r2, r3
 800b724:	9205      	str	r2, [sp, #20]
 800b726:	9a06      	ldr	r2, [sp, #24]
 800b728:	441a      	add	r2, r3
 800b72a:	441d      	add	r5, r3
 800b72c:	4613      	mov	r3, r2
 800b72e:	e776      	b.n	800b61e <_dtoa_r+0x7de>
 800b730:	4603      	mov	r3, r0
 800b732:	e7f4      	b.n	800b71e <_dtoa_r+0x8de>
 800b734:	9b03      	ldr	r3, [sp, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	dc36      	bgt.n	800b7a8 <_dtoa_r+0x968>
 800b73a:	9b07      	ldr	r3, [sp, #28]
 800b73c:	2b02      	cmp	r3, #2
 800b73e:	dd33      	ble.n	800b7a8 <_dtoa_r+0x968>
 800b740:	9b03      	ldr	r3, [sp, #12]
 800b742:	9304      	str	r3, [sp, #16]
 800b744:	9b04      	ldr	r3, [sp, #16]
 800b746:	b963      	cbnz	r3, 800b762 <_dtoa_r+0x922>
 800b748:	4631      	mov	r1, r6
 800b74a:	2205      	movs	r2, #5
 800b74c:	4620      	mov	r0, r4
 800b74e:	f000 fbe2 	bl	800bf16 <__multadd>
 800b752:	4601      	mov	r1, r0
 800b754:	4606      	mov	r6, r0
 800b756:	4650      	mov	r0, sl
 800b758:	f000 fd9b 	bl	800c292 <__mcmp>
 800b75c:	2800      	cmp	r0, #0
 800b75e:	f73f adb6 	bgt.w	800b2ce <_dtoa_r+0x48e>
 800b762:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b764:	9d02      	ldr	r5, [sp, #8]
 800b766:	ea6f 0b03 	mvn.w	fp, r3
 800b76a:	2300      	movs	r3, #0
 800b76c:	9303      	str	r3, [sp, #12]
 800b76e:	4631      	mov	r1, r6
 800b770:	4620      	mov	r0, r4
 800b772:	f000 fbb9 	bl	800bee8 <_Bfree>
 800b776:	2f00      	cmp	r7, #0
 800b778:	f43f aea6 	beq.w	800b4c8 <_dtoa_r+0x688>
 800b77c:	9b03      	ldr	r3, [sp, #12]
 800b77e:	b12b      	cbz	r3, 800b78c <_dtoa_r+0x94c>
 800b780:	42bb      	cmp	r3, r7
 800b782:	d003      	beq.n	800b78c <_dtoa_r+0x94c>
 800b784:	4619      	mov	r1, r3
 800b786:	4620      	mov	r0, r4
 800b788:	f000 fbae 	bl	800bee8 <_Bfree>
 800b78c:	4639      	mov	r1, r7
 800b78e:	4620      	mov	r0, r4
 800b790:	f000 fbaa 	bl	800bee8 <_Bfree>
 800b794:	e698      	b.n	800b4c8 <_dtoa_r+0x688>
 800b796:	2600      	movs	r6, #0
 800b798:	4637      	mov	r7, r6
 800b79a:	e7e2      	b.n	800b762 <_dtoa_r+0x922>
 800b79c:	46bb      	mov	fp, r7
 800b79e:	4637      	mov	r7, r6
 800b7a0:	e595      	b.n	800b2ce <_dtoa_r+0x48e>
 800b7a2:	bf00      	nop
 800b7a4:	40240000 	.word	0x40240000
 800b7a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7aa:	bb93      	cbnz	r3, 800b812 <_dtoa_r+0x9d2>
 800b7ac:	9b03      	ldr	r3, [sp, #12]
 800b7ae:	9304      	str	r3, [sp, #16]
 800b7b0:	9d02      	ldr	r5, [sp, #8]
 800b7b2:	4631      	mov	r1, r6
 800b7b4:	4650      	mov	r0, sl
 800b7b6:	f7ff fab7 	bl	800ad28 <quorem>
 800b7ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b7be:	f805 9b01 	strb.w	r9, [r5], #1
 800b7c2:	9b02      	ldr	r3, [sp, #8]
 800b7c4:	9a04      	ldr	r2, [sp, #16]
 800b7c6:	1aeb      	subs	r3, r5, r3
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	f300 80dc 	bgt.w	800b986 <_dtoa_r+0xb46>
 800b7ce:	9b02      	ldr	r3, [sp, #8]
 800b7d0:	2a01      	cmp	r2, #1
 800b7d2:	bfac      	ite	ge
 800b7d4:	189b      	addge	r3, r3, r2
 800b7d6:	3301      	addlt	r3, #1
 800b7d8:	4698      	mov	r8, r3
 800b7da:	2300      	movs	r3, #0
 800b7dc:	9303      	str	r3, [sp, #12]
 800b7de:	4651      	mov	r1, sl
 800b7e0:	2201      	movs	r2, #1
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f000 fd04 	bl	800c1f0 <__lshift>
 800b7e8:	4631      	mov	r1, r6
 800b7ea:	4682      	mov	sl, r0
 800b7ec:	f000 fd51 	bl	800c292 <__mcmp>
 800b7f0:	2800      	cmp	r0, #0
 800b7f2:	f300 808d 	bgt.w	800b910 <_dtoa_r+0xad0>
 800b7f6:	d103      	bne.n	800b800 <_dtoa_r+0x9c0>
 800b7f8:	f019 0f01 	tst.w	r9, #1
 800b7fc:	f040 8088 	bne.w	800b910 <_dtoa_r+0xad0>
 800b800:	4645      	mov	r5, r8
 800b802:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b806:	2b30      	cmp	r3, #48	; 0x30
 800b808:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800b80c:	d1af      	bne.n	800b76e <_dtoa_r+0x92e>
 800b80e:	4615      	mov	r5, r2
 800b810:	e7f7      	b.n	800b802 <_dtoa_r+0x9c2>
 800b812:	9b03      	ldr	r3, [sp, #12]
 800b814:	9304      	str	r3, [sp, #16]
 800b816:	2d00      	cmp	r5, #0
 800b818:	dd05      	ble.n	800b826 <_dtoa_r+0x9e6>
 800b81a:	4639      	mov	r1, r7
 800b81c:	462a      	mov	r2, r5
 800b81e:	4620      	mov	r0, r4
 800b820:	f000 fce6 	bl	800c1f0 <__lshift>
 800b824:	4607      	mov	r7, r0
 800b826:	f1b8 0f00 	cmp.w	r8, #0
 800b82a:	d04c      	beq.n	800b8c6 <_dtoa_r+0xa86>
 800b82c:	6879      	ldr	r1, [r7, #4]
 800b82e:	4620      	mov	r0, r4
 800b830:	f000 fb26 	bl	800be80 <_Balloc>
 800b834:	693a      	ldr	r2, [r7, #16]
 800b836:	3202      	adds	r2, #2
 800b838:	4605      	mov	r5, r0
 800b83a:	0092      	lsls	r2, r2, #2
 800b83c:	f107 010c 	add.w	r1, r7, #12
 800b840:	300c      	adds	r0, #12
 800b842:	f000 fb05 	bl	800be50 <memcpy>
 800b846:	2201      	movs	r2, #1
 800b848:	4629      	mov	r1, r5
 800b84a:	4620      	mov	r0, r4
 800b84c:	f000 fcd0 	bl	800c1f0 <__lshift>
 800b850:	9b00      	ldr	r3, [sp, #0]
 800b852:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800b856:	9703      	str	r7, [sp, #12]
 800b858:	f003 0301 	and.w	r3, r3, #1
 800b85c:	4607      	mov	r7, r0
 800b85e:	9305      	str	r3, [sp, #20]
 800b860:	4631      	mov	r1, r6
 800b862:	4650      	mov	r0, sl
 800b864:	f7ff fa60 	bl	800ad28 <quorem>
 800b868:	9903      	ldr	r1, [sp, #12]
 800b86a:	4605      	mov	r5, r0
 800b86c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b870:	4650      	mov	r0, sl
 800b872:	f000 fd0e 	bl	800c292 <__mcmp>
 800b876:	463a      	mov	r2, r7
 800b878:	9000      	str	r0, [sp, #0]
 800b87a:	4631      	mov	r1, r6
 800b87c:	4620      	mov	r0, r4
 800b87e:	f000 fd22 	bl	800c2c6 <__mdiff>
 800b882:	68c3      	ldr	r3, [r0, #12]
 800b884:	4602      	mov	r2, r0
 800b886:	bb03      	cbnz	r3, 800b8ca <_dtoa_r+0xa8a>
 800b888:	4601      	mov	r1, r0
 800b88a:	9006      	str	r0, [sp, #24]
 800b88c:	4650      	mov	r0, sl
 800b88e:	f000 fd00 	bl	800c292 <__mcmp>
 800b892:	9a06      	ldr	r2, [sp, #24]
 800b894:	4603      	mov	r3, r0
 800b896:	4611      	mov	r1, r2
 800b898:	4620      	mov	r0, r4
 800b89a:	9306      	str	r3, [sp, #24]
 800b89c:	f000 fb24 	bl	800bee8 <_Bfree>
 800b8a0:	9b06      	ldr	r3, [sp, #24]
 800b8a2:	b9a3      	cbnz	r3, 800b8ce <_dtoa_r+0xa8e>
 800b8a4:	9a07      	ldr	r2, [sp, #28]
 800b8a6:	b992      	cbnz	r2, 800b8ce <_dtoa_r+0xa8e>
 800b8a8:	9a05      	ldr	r2, [sp, #20]
 800b8aa:	b982      	cbnz	r2, 800b8ce <_dtoa_r+0xa8e>
 800b8ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b8b0:	d029      	beq.n	800b906 <_dtoa_r+0xac6>
 800b8b2:	9b00      	ldr	r3, [sp, #0]
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	dd01      	ble.n	800b8bc <_dtoa_r+0xa7c>
 800b8b8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 800b8bc:	f108 0501 	add.w	r5, r8, #1
 800b8c0:	f888 9000 	strb.w	r9, [r8]
 800b8c4:	e753      	b.n	800b76e <_dtoa_r+0x92e>
 800b8c6:	4638      	mov	r0, r7
 800b8c8:	e7c2      	b.n	800b850 <_dtoa_r+0xa10>
 800b8ca:	2301      	movs	r3, #1
 800b8cc:	e7e3      	b.n	800b896 <_dtoa_r+0xa56>
 800b8ce:	9a00      	ldr	r2, [sp, #0]
 800b8d0:	2a00      	cmp	r2, #0
 800b8d2:	db04      	blt.n	800b8de <_dtoa_r+0xa9e>
 800b8d4:	d125      	bne.n	800b922 <_dtoa_r+0xae2>
 800b8d6:	9a07      	ldr	r2, [sp, #28]
 800b8d8:	bb1a      	cbnz	r2, 800b922 <_dtoa_r+0xae2>
 800b8da:	9a05      	ldr	r2, [sp, #20]
 800b8dc:	bb0a      	cbnz	r2, 800b922 <_dtoa_r+0xae2>
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	ddec      	ble.n	800b8bc <_dtoa_r+0xa7c>
 800b8e2:	4651      	mov	r1, sl
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f000 fc82 	bl	800c1f0 <__lshift>
 800b8ec:	4631      	mov	r1, r6
 800b8ee:	4682      	mov	sl, r0
 800b8f0:	f000 fccf 	bl	800c292 <__mcmp>
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	dc03      	bgt.n	800b900 <_dtoa_r+0xac0>
 800b8f8:	d1e0      	bne.n	800b8bc <_dtoa_r+0xa7c>
 800b8fa:	f019 0f01 	tst.w	r9, #1
 800b8fe:	d0dd      	beq.n	800b8bc <_dtoa_r+0xa7c>
 800b900:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b904:	d1d8      	bne.n	800b8b8 <_dtoa_r+0xa78>
 800b906:	2339      	movs	r3, #57	; 0x39
 800b908:	f888 3000 	strb.w	r3, [r8]
 800b90c:	f108 0801 	add.w	r8, r8, #1
 800b910:	4645      	mov	r5, r8
 800b912:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b916:	2b39      	cmp	r3, #57	; 0x39
 800b918:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800b91c:	d03b      	beq.n	800b996 <_dtoa_r+0xb56>
 800b91e:	3301      	adds	r3, #1
 800b920:	e040      	b.n	800b9a4 <_dtoa_r+0xb64>
 800b922:	2b00      	cmp	r3, #0
 800b924:	f108 0501 	add.w	r5, r8, #1
 800b928:	dd05      	ble.n	800b936 <_dtoa_r+0xaf6>
 800b92a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b92e:	d0ea      	beq.n	800b906 <_dtoa_r+0xac6>
 800b930:	f109 0901 	add.w	r9, r9, #1
 800b934:	e7c4      	b.n	800b8c0 <_dtoa_r+0xa80>
 800b936:	9b02      	ldr	r3, [sp, #8]
 800b938:	9a04      	ldr	r2, [sp, #16]
 800b93a:	f805 9c01 	strb.w	r9, [r5, #-1]
 800b93e:	1aeb      	subs	r3, r5, r3
 800b940:	4293      	cmp	r3, r2
 800b942:	46a8      	mov	r8, r5
 800b944:	f43f af4b 	beq.w	800b7de <_dtoa_r+0x99e>
 800b948:	4651      	mov	r1, sl
 800b94a:	2300      	movs	r3, #0
 800b94c:	220a      	movs	r2, #10
 800b94e:	4620      	mov	r0, r4
 800b950:	f000 fae1 	bl	800bf16 <__multadd>
 800b954:	9b03      	ldr	r3, [sp, #12]
 800b956:	9903      	ldr	r1, [sp, #12]
 800b958:	42bb      	cmp	r3, r7
 800b95a:	4682      	mov	sl, r0
 800b95c:	f04f 0300 	mov.w	r3, #0
 800b960:	f04f 020a 	mov.w	r2, #10
 800b964:	4620      	mov	r0, r4
 800b966:	d104      	bne.n	800b972 <_dtoa_r+0xb32>
 800b968:	f000 fad5 	bl	800bf16 <__multadd>
 800b96c:	9003      	str	r0, [sp, #12]
 800b96e:	4607      	mov	r7, r0
 800b970:	e776      	b.n	800b860 <_dtoa_r+0xa20>
 800b972:	f000 fad0 	bl	800bf16 <__multadd>
 800b976:	2300      	movs	r3, #0
 800b978:	9003      	str	r0, [sp, #12]
 800b97a:	220a      	movs	r2, #10
 800b97c:	4639      	mov	r1, r7
 800b97e:	4620      	mov	r0, r4
 800b980:	f000 fac9 	bl	800bf16 <__multadd>
 800b984:	e7f3      	b.n	800b96e <_dtoa_r+0xb2e>
 800b986:	4651      	mov	r1, sl
 800b988:	2300      	movs	r3, #0
 800b98a:	220a      	movs	r2, #10
 800b98c:	4620      	mov	r0, r4
 800b98e:	f000 fac2 	bl	800bf16 <__multadd>
 800b992:	4682      	mov	sl, r0
 800b994:	e70d      	b.n	800b7b2 <_dtoa_r+0x972>
 800b996:	9b02      	ldr	r3, [sp, #8]
 800b998:	4293      	cmp	r3, r2
 800b99a:	d105      	bne.n	800b9a8 <_dtoa_r+0xb68>
 800b99c:	9a02      	ldr	r2, [sp, #8]
 800b99e:	f10b 0b01 	add.w	fp, fp, #1
 800b9a2:	2331      	movs	r3, #49	; 0x31
 800b9a4:	7013      	strb	r3, [r2, #0]
 800b9a6:	e6e2      	b.n	800b76e <_dtoa_r+0x92e>
 800b9a8:	4615      	mov	r5, r2
 800b9aa:	e7b2      	b.n	800b912 <_dtoa_r+0xad2>
 800b9ac:	4b09      	ldr	r3, [pc, #36]	; (800b9d4 <_dtoa_r+0xb94>)
 800b9ae:	f7ff baae 	b.w	800af0e <_dtoa_r+0xce>
 800b9b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f47f aa88 	bne.w	800aeca <_dtoa_r+0x8a>
 800b9ba:	4b07      	ldr	r3, [pc, #28]	; (800b9d8 <_dtoa_r+0xb98>)
 800b9bc:	f7ff baa7 	b.w	800af0e <_dtoa_r+0xce>
 800b9c0:	9b04      	ldr	r3, [sp, #16]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f73f aef4 	bgt.w	800b7b0 <_dtoa_r+0x970>
 800b9c8:	9b07      	ldr	r3, [sp, #28]
 800b9ca:	2b02      	cmp	r3, #2
 800b9cc:	f77f aef0 	ble.w	800b7b0 <_dtoa_r+0x970>
 800b9d0:	e6b8      	b.n	800b744 <_dtoa_r+0x904>
 800b9d2:	bf00      	nop
 800b9d4:	0800d80a 	.word	0x0800d80a
 800b9d8:	0800d851 	.word	0x0800d851

0800b9dc <__locale_ctype_ptr_l>:
 800b9dc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b9e0:	4770      	bx	lr
	...

0800b9e4 <_localeconv_r>:
 800b9e4:	4b04      	ldr	r3, [pc, #16]	; (800b9f8 <_localeconv_r+0x14>)
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	6a18      	ldr	r0, [r3, #32]
 800b9ea:	4b04      	ldr	r3, [pc, #16]	; (800b9fc <_localeconv_r+0x18>)
 800b9ec:	2800      	cmp	r0, #0
 800b9ee:	bf08      	it	eq
 800b9f0:	4618      	moveq	r0, r3
 800b9f2:	30f0      	adds	r0, #240	; 0xf0
 800b9f4:	4770      	bx	lr
 800b9f6:	bf00      	nop
 800b9f8:	20000194 	.word	0x20000194
 800b9fc:	20000288 	.word	0x20000288

0800ba00 <malloc>:
 800ba00:	4b02      	ldr	r3, [pc, #8]	; (800ba0c <malloc+0xc>)
 800ba02:	4601      	mov	r1, r0
 800ba04:	6818      	ldr	r0, [r3, #0]
 800ba06:	f000 b803 	b.w	800ba10 <_malloc_r>
 800ba0a:	bf00      	nop
 800ba0c:	20000194 	.word	0x20000194

0800ba10 <_malloc_r>:
 800ba10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba14:	f101 040b 	add.w	r4, r1, #11
 800ba18:	2c16      	cmp	r4, #22
 800ba1a:	4681      	mov	r9, r0
 800ba1c:	d907      	bls.n	800ba2e <_malloc_r+0x1e>
 800ba1e:	f034 0407 	bics.w	r4, r4, #7
 800ba22:	d505      	bpl.n	800ba30 <_malloc_r+0x20>
 800ba24:	230c      	movs	r3, #12
 800ba26:	f8c9 3000 	str.w	r3, [r9]
 800ba2a:	2600      	movs	r6, #0
 800ba2c:	e131      	b.n	800bc92 <_malloc_r+0x282>
 800ba2e:	2410      	movs	r4, #16
 800ba30:	428c      	cmp	r4, r1
 800ba32:	d3f7      	bcc.n	800ba24 <_malloc_r+0x14>
 800ba34:	4648      	mov	r0, r9
 800ba36:	f000 fa17 	bl	800be68 <__malloc_lock>
 800ba3a:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 800ba3e:	4d9c      	ldr	r5, [pc, #624]	; (800bcb0 <_malloc_r+0x2a0>)
 800ba40:	d236      	bcs.n	800bab0 <_malloc_r+0xa0>
 800ba42:	f104 0208 	add.w	r2, r4, #8
 800ba46:	442a      	add	r2, r5
 800ba48:	f1a2 0108 	sub.w	r1, r2, #8
 800ba4c:	6856      	ldr	r6, [r2, #4]
 800ba4e:	428e      	cmp	r6, r1
 800ba50:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 800ba54:	d102      	bne.n	800ba5c <_malloc_r+0x4c>
 800ba56:	68d6      	ldr	r6, [r2, #12]
 800ba58:	42b2      	cmp	r2, r6
 800ba5a:	d010      	beq.n	800ba7e <_malloc_r+0x6e>
 800ba5c:	6873      	ldr	r3, [r6, #4]
 800ba5e:	68f2      	ldr	r2, [r6, #12]
 800ba60:	68b1      	ldr	r1, [r6, #8]
 800ba62:	f023 0303 	bic.w	r3, r3, #3
 800ba66:	60ca      	str	r2, [r1, #12]
 800ba68:	4433      	add	r3, r6
 800ba6a:	6091      	str	r1, [r2, #8]
 800ba6c:	685a      	ldr	r2, [r3, #4]
 800ba6e:	f042 0201 	orr.w	r2, r2, #1
 800ba72:	605a      	str	r2, [r3, #4]
 800ba74:	4648      	mov	r0, r9
 800ba76:	f000 f9fd 	bl	800be74 <__malloc_unlock>
 800ba7a:	3608      	adds	r6, #8
 800ba7c:	e109      	b.n	800bc92 <_malloc_r+0x282>
 800ba7e:	3302      	adds	r3, #2
 800ba80:	4a8c      	ldr	r2, [pc, #560]	; (800bcb4 <_malloc_r+0x2a4>)
 800ba82:	692e      	ldr	r6, [r5, #16]
 800ba84:	4296      	cmp	r6, r2
 800ba86:	4611      	mov	r1, r2
 800ba88:	d06d      	beq.n	800bb66 <_malloc_r+0x156>
 800ba8a:	6870      	ldr	r0, [r6, #4]
 800ba8c:	f020 0003 	bic.w	r0, r0, #3
 800ba90:	1b07      	subs	r7, r0, r4
 800ba92:	2f0f      	cmp	r7, #15
 800ba94:	dd47      	ble.n	800bb26 <_malloc_r+0x116>
 800ba96:	1933      	adds	r3, r6, r4
 800ba98:	f044 0401 	orr.w	r4, r4, #1
 800ba9c:	6074      	str	r4, [r6, #4]
 800ba9e:	616b      	str	r3, [r5, #20]
 800baa0:	612b      	str	r3, [r5, #16]
 800baa2:	60da      	str	r2, [r3, #12]
 800baa4:	609a      	str	r2, [r3, #8]
 800baa6:	f047 0201 	orr.w	r2, r7, #1
 800baaa:	605a      	str	r2, [r3, #4]
 800baac:	5037      	str	r7, [r6, r0]
 800baae:	e7e1      	b.n	800ba74 <_malloc_r+0x64>
 800bab0:	0a63      	lsrs	r3, r4, #9
 800bab2:	d02a      	beq.n	800bb0a <_malloc_r+0xfa>
 800bab4:	2b04      	cmp	r3, #4
 800bab6:	d812      	bhi.n	800bade <_malloc_r+0xce>
 800bab8:	09a3      	lsrs	r3, r4, #6
 800baba:	3338      	adds	r3, #56	; 0x38
 800babc:	1c5a      	adds	r2, r3, #1
 800babe:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 800bac2:	f1a2 0008 	sub.w	r0, r2, #8
 800bac6:	6856      	ldr	r6, [r2, #4]
 800bac8:	4286      	cmp	r6, r0
 800baca:	d006      	beq.n	800bada <_malloc_r+0xca>
 800bacc:	6872      	ldr	r2, [r6, #4]
 800bace:	f022 0203 	bic.w	r2, r2, #3
 800bad2:	1b11      	subs	r1, r2, r4
 800bad4:	290f      	cmp	r1, #15
 800bad6:	dd1c      	ble.n	800bb12 <_malloc_r+0x102>
 800bad8:	3b01      	subs	r3, #1
 800bada:	3301      	adds	r3, #1
 800badc:	e7d0      	b.n	800ba80 <_malloc_r+0x70>
 800bade:	2b14      	cmp	r3, #20
 800bae0:	d801      	bhi.n	800bae6 <_malloc_r+0xd6>
 800bae2:	335b      	adds	r3, #91	; 0x5b
 800bae4:	e7ea      	b.n	800babc <_malloc_r+0xac>
 800bae6:	2b54      	cmp	r3, #84	; 0x54
 800bae8:	d802      	bhi.n	800baf0 <_malloc_r+0xe0>
 800baea:	0b23      	lsrs	r3, r4, #12
 800baec:	336e      	adds	r3, #110	; 0x6e
 800baee:	e7e5      	b.n	800babc <_malloc_r+0xac>
 800baf0:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 800baf4:	d802      	bhi.n	800bafc <_malloc_r+0xec>
 800baf6:	0be3      	lsrs	r3, r4, #15
 800baf8:	3377      	adds	r3, #119	; 0x77
 800bafa:	e7df      	b.n	800babc <_malloc_r+0xac>
 800bafc:	f240 5254 	movw	r2, #1364	; 0x554
 800bb00:	4293      	cmp	r3, r2
 800bb02:	d804      	bhi.n	800bb0e <_malloc_r+0xfe>
 800bb04:	0ca3      	lsrs	r3, r4, #18
 800bb06:	337c      	adds	r3, #124	; 0x7c
 800bb08:	e7d8      	b.n	800babc <_malloc_r+0xac>
 800bb0a:	233f      	movs	r3, #63	; 0x3f
 800bb0c:	e7d6      	b.n	800babc <_malloc_r+0xac>
 800bb0e:	237e      	movs	r3, #126	; 0x7e
 800bb10:	e7d4      	b.n	800babc <_malloc_r+0xac>
 800bb12:	2900      	cmp	r1, #0
 800bb14:	68f1      	ldr	r1, [r6, #12]
 800bb16:	db04      	blt.n	800bb22 <_malloc_r+0x112>
 800bb18:	68b3      	ldr	r3, [r6, #8]
 800bb1a:	60d9      	str	r1, [r3, #12]
 800bb1c:	608b      	str	r3, [r1, #8]
 800bb1e:	18b3      	adds	r3, r6, r2
 800bb20:	e7a4      	b.n	800ba6c <_malloc_r+0x5c>
 800bb22:	460e      	mov	r6, r1
 800bb24:	e7d0      	b.n	800bac8 <_malloc_r+0xb8>
 800bb26:	2f00      	cmp	r7, #0
 800bb28:	616a      	str	r2, [r5, #20]
 800bb2a:	612a      	str	r2, [r5, #16]
 800bb2c:	db05      	blt.n	800bb3a <_malloc_r+0x12a>
 800bb2e:	4430      	add	r0, r6
 800bb30:	6843      	ldr	r3, [r0, #4]
 800bb32:	f043 0301 	orr.w	r3, r3, #1
 800bb36:	6043      	str	r3, [r0, #4]
 800bb38:	e79c      	b.n	800ba74 <_malloc_r+0x64>
 800bb3a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800bb3e:	d244      	bcs.n	800bbca <_malloc_r+0x1ba>
 800bb40:	08c0      	lsrs	r0, r0, #3
 800bb42:	1087      	asrs	r7, r0, #2
 800bb44:	2201      	movs	r2, #1
 800bb46:	fa02 f707 	lsl.w	r7, r2, r7
 800bb4a:	686a      	ldr	r2, [r5, #4]
 800bb4c:	3001      	adds	r0, #1
 800bb4e:	433a      	orrs	r2, r7
 800bb50:	606a      	str	r2, [r5, #4]
 800bb52:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800bb56:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800bb5a:	60b7      	str	r7, [r6, #8]
 800bb5c:	3a08      	subs	r2, #8
 800bb5e:	60f2      	str	r2, [r6, #12]
 800bb60:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 800bb64:	60fe      	str	r6, [r7, #12]
 800bb66:	2001      	movs	r0, #1
 800bb68:	109a      	asrs	r2, r3, #2
 800bb6a:	fa00 f202 	lsl.w	r2, r0, r2
 800bb6e:	6868      	ldr	r0, [r5, #4]
 800bb70:	4282      	cmp	r2, r0
 800bb72:	f200 80a1 	bhi.w	800bcb8 <_malloc_r+0x2a8>
 800bb76:	4202      	tst	r2, r0
 800bb78:	d106      	bne.n	800bb88 <_malloc_r+0x178>
 800bb7a:	f023 0303 	bic.w	r3, r3, #3
 800bb7e:	0052      	lsls	r2, r2, #1
 800bb80:	4202      	tst	r2, r0
 800bb82:	f103 0304 	add.w	r3, r3, #4
 800bb86:	d0fa      	beq.n	800bb7e <_malloc_r+0x16e>
 800bb88:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 800bb8c:	46e0      	mov	r8, ip
 800bb8e:	469e      	mov	lr, r3
 800bb90:	f8d8 600c 	ldr.w	r6, [r8, #12]
 800bb94:	4546      	cmp	r6, r8
 800bb96:	d153      	bne.n	800bc40 <_malloc_r+0x230>
 800bb98:	f10e 0e01 	add.w	lr, lr, #1
 800bb9c:	f01e 0f03 	tst.w	lr, #3
 800bba0:	f108 0808 	add.w	r8, r8, #8
 800bba4:	d1f4      	bne.n	800bb90 <_malloc_r+0x180>
 800bba6:	0798      	lsls	r0, r3, #30
 800bba8:	d179      	bne.n	800bc9e <_malloc_r+0x28e>
 800bbaa:	686b      	ldr	r3, [r5, #4]
 800bbac:	ea23 0302 	bic.w	r3, r3, r2
 800bbb0:	606b      	str	r3, [r5, #4]
 800bbb2:	6868      	ldr	r0, [r5, #4]
 800bbb4:	0052      	lsls	r2, r2, #1
 800bbb6:	4282      	cmp	r2, r0
 800bbb8:	d87e      	bhi.n	800bcb8 <_malloc_r+0x2a8>
 800bbba:	2a00      	cmp	r2, #0
 800bbbc:	d07c      	beq.n	800bcb8 <_malloc_r+0x2a8>
 800bbbe:	4673      	mov	r3, lr
 800bbc0:	4202      	tst	r2, r0
 800bbc2:	d1e1      	bne.n	800bb88 <_malloc_r+0x178>
 800bbc4:	3304      	adds	r3, #4
 800bbc6:	0052      	lsls	r2, r2, #1
 800bbc8:	e7fa      	b.n	800bbc0 <_malloc_r+0x1b0>
 800bbca:	0a42      	lsrs	r2, r0, #9
 800bbcc:	2a04      	cmp	r2, #4
 800bbce:	d815      	bhi.n	800bbfc <_malloc_r+0x1ec>
 800bbd0:	0982      	lsrs	r2, r0, #6
 800bbd2:	3238      	adds	r2, #56	; 0x38
 800bbd4:	1c57      	adds	r7, r2, #1
 800bbd6:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 800bbda:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 800bbde:	45be      	cmp	lr, r7
 800bbe0:	d126      	bne.n	800bc30 <_malloc_r+0x220>
 800bbe2:	2001      	movs	r0, #1
 800bbe4:	1092      	asrs	r2, r2, #2
 800bbe6:	fa00 f202 	lsl.w	r2, r0, r2
 800bbea:	6868      	ldr	r0, [r5, #4]
 800bbec:	4310      	orrs	r0, r2
 800bbee:	6068      	str	r0, [r5, #4]
 800bbf0:	f8c6 e00c 	str.w	lr, [r6, #12]
 800bbf4:	60b7      	str	r7, [r6, #8]
 800bbf6:	f8ce 6008 	str.w	r6, [lr, #8]
 800bbfa:	e7b3      	b.n	800bb64 <_malloc_r+0x154>
 800bbfc:	2a14      	cmp	r2, #20
 800bbfe:	d801      	bhi.n	800bc04 <_malloc_r+0x1f4>
 800bc00:	325b      	adds	r2, #91	; 0x5b
 800bc02:	e7e7      	b.n	800bbd4 <_malloc_r+0x1c4>
 800bc04:	2a54      	cmp	r2, #84	; 0x54
 800bc06:	d802      	bhi.n	800bc0e <_malloc_r+0x1fe>
 800bc08:	0b02      	lsrs	r2, r0, #12
 800bc0a:	326e      	adds	r2, #110	; 0x6e
 800bc0c:	e7e2      	b.n	800bbd4 <_malloc_r+0x1c4>
 800bc0e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800bc12:	d802      	bhi.n	800bc1a <_malloc_r+0x20a>
 800bc14:	0bc2      	lsrs	r2, r0, #15
 800bc16:	3277      	adds	r2, #119	; 0x77
 800bc18:	e7dc      	b.n	800bbd4 <_malloc_r+0x1c4>
 800bc1a:	f240 5754 	movw	r7, #1364	; 0x554
 800bc1e:	42ba      	cmp	r2, r7
 800bc20:	bf9a      	itte	ls
 800bc22:	0c82      	lsrls	r2, r0, #18
 800bc24:	327c      	addls	r2, #124	; 0x7c
 800bc26:	227e      	movhi	r2, #126	; 0x7e
 800bc28:	e7d4      	b.n	800bbd4 <_malloc_r+0x1c4>
 800bc2a:	68bf      	ldr	r7, [r7, #8]
 800bc2c:	45be      	cmp	lr, r7
 800bc2e:	d004      	beq.n	800bc3a <_malloc_r+0x22a>
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	f022 0203 	bic.w	r2, r2, #3
 800bc36:	4290      	cmp	r0, r2
 800bc38:	d3f7      	bcc.n	800bc2a <_malloc_r+0x21a>
 800bc3a:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 800bc3e:	e7d7      	b.n	800bbf0 <_malloc_r+0x1e0>
 800bc40:	6870      	ldr	r0, [r6, #4]
 800bc42:	68f7      	ldr	r7, [r6, #12]
 800bc44:	f020 0003 	bic.w	r0, r0, #3
 800bc48:	eba0 0a04 	sub.w	sl, r0, r4
 800bc4c:	f1ba 0f0f 	cmp.w	sl, #15
 800bc50:	dd10      	ble.n	800bc74 <_malloc_r+0x264>
 800bc52:	68b2      	ldr	r2, [r6, #8]
 800bc54:	1933      	adds	r3, r6, r4
 800bc56:	f044 0401 	orr.w	r4, r4, #1
 800bc5a:	6074      	str	r4, [r6, #4]
 800bc5c:	60d7      	str	r7, [r2, #12]
 800bc5e:	60ba      	str	r2, [r7, #8]
 800bc60:	f04a 0201 	orr.w	r2, sl, #1
 800bc64:	616b      	str	r3, [r5, #20]
 800bc66:	612b      	str	r3, [r5, #16]
 800bc68:	60d9      	str	r1, [r3, #12]
 800bc6a:	6099      	str	r1, [r3, #8]
 800bc6c:	605a      	str	r2, [r3, #4]
 800bc6e:	f846 a000 	str.w	sl, [r6, r0]
 800bc72:	e6ff      	b.n	800ba74 <_malloc_r+0x64>
 800bc74:	f1ba 0f00 	cmp.w	sl, #0
 800bc78:	db0f      	blt.n	800bc9a <_malloc_r+0x28a>
 800bc7a:	4430      	add	r0, r6
 800bc7c:	6843      	ldr	r3, [r0, #4]
 800bc7e:	f043 0301 	orr.w	r3, r3, #1
 800bc82:	6043      	str	r3, [r0, #4]
 800bc84:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800bc88:	4648      	mov	r0, r9
 800bc8a:	60df      	str	r7, [r3, #12]
 800bc8c:	60bb      	str	r3, [r7, #8]
 800bc8e:	f000 f8f1 	bl	800be74 <__malloc_unlock>
 800bc92:	4630      	mov	r0, r6
 800bc94:	b003      	add	sp, #12
 800bc96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc9a:	463e      	mov	r6, r7
 800bc9c:	e77a      	b.n	800bb94 <_malloc_r+0x184>
 800bc9e:	f85c 0908 	ldr.w	r0, [ip], #-8
 800bca2:	4584      	cmp	ip, r0
 800bca4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800bca8:	f43f af7d 	beq.w	800bba6 <_malloc_r+0x196>
 800bcac:	e781      	b.n	800bbb2 <_malloc_r+0x1a2>
 800bcae:	bf00      	nop
 800bcb0:	200003f4 	.word	0x200003f4
 800bcb4:	200003fc 	.word	0x200003fc
 800bcb8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800bcbc:	f8db 6004 	ldr.w	r6, [fp, #4]
 800bcc0:	f026 0603 	bic.w	r6, r6, #3
 800bcc4:	42b4      	cmp	r4, r6
 800bcc6:	d803      	bhi.n	800bcd0 <_malloc_r+0x2c0>
 800bcc8:	1b33      	subs	r3, r6, r4
 800bcca:	2b0f      	cmp	r3, #15
 800bccc:	f300 8096 	bgt.w	800bdfc <_malloc_r+0x3ec>
 800bcd0:	4a4f      	ldr	r2, [pc, #316]	; (800be10 <_malloc_r+0x400>)
 800bcd2:	6817      	ldr	r7, [r2, #0]
 800bcd4:	4a4f      	ldr	r2, [pc, #316]	; (800be14 <_malloc_r+0x404>)
 800bcd6:	6811      	ldr	r1, [r2, #0]
 800bcd8:	3710      	adds	r7, #16
 800bcda:	3101      	adds	r1, #1
 800bcdc:	eb0b 0306 	add.w	r3, fp, r6
 800bce0:	4427      	add	r7, r4
 800bce2:	d005      	beq.n	800bcf0 <_malloc_r+0x2e0>
 800bce4:	494c      	ldr	r1, [pc, #304]	; (800be18 <_malloc_r+0x408>)
 800bce6:	3901      	subs	r1, #1
 800bce8:	440f      	add	r7, r1
 800bcea:	3101      	adds	r1, #1
 800bcec:	4249      	negs	r1, r1
 800bcee:	400f      	ands	r7, r1
 800bcf0:	4639      	mov	r1, r7
 800bcf2:	4648      	mov	r0, r9
 800bcf4:	9201      	str	r2, [sp, #4]
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	f000 fb92 	bl	800c420 <_sbrk_r>
 800bcfc:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800bd00:	4680      	mov	r8, r0
 800bd02:	d056      	beq.n	800bdb2 <_malloc_r+0x3a2>
 800bd04:	9b00      	ldr	r3, [sp, #0]
 800bd06:	9a01      	ldr	r2, [sp, #4]
 800bd08:	4283      	cmp	r3, r0
 800bd0a:	d901      	bls.n	800bd10 <_malloc_r+0x300>
 800bd0c:	45ab      	cmp	fp, r5
 800bd0e:	d150      	bne.n	800bdb2 <_malloc_r+0x3a2>
 800bd10:	4842      	ldr	r0, [pc, #264]	; (800be1c <_malloc_r+0x40c>)
 800bd12:	6801      	ldr	r1, [r0, #0]
 800bd14:	4543      	cmp	r3, r8
 800bd16:	eb07 0e01 	add.w	lr, r7, r1
 800bd1a:	f8c0 e000 	str.w	lr, [r0]
 800bd1e:	4940      	ldr	r1, [pc, #256]	; (800be20 <_malloc_r+0x410>)
 800bd20:	4682      	mov	sl, r0
 800bd22:	d113      	bne.n	800bd4c <_malloc_r+0x33c>
 800bd24:	420b      	tst	r3, r1
 800bd26:	d111      	bne.n	800bd4c <_malloc_r+0x33c>
 800bd28:	68ab      	ldr	r3, [r5, #8]
 800bd2a:	443e      	add	r6, r7
 800bd2c:	f046 0601 	orr.w	r6, r6, #1
 800bd30:	605e      	str	r6, [r3, #4]
 800bd32:	4a3c      	ldr	r2, [pc, #240]	; (800be24 <_malloc_r+0x414>)
 800bd34:	f8da 3000 	ldr.w	r3, [sl]
 800bd38:	6811      	ldr	r1, [r2, #0]
 800bd3a:	428b      	cmp	r3, r1
 800bd3c:	bf88      	it	hi
 800bd3e:	6013      	strhi	r3, [r2, #0]
 800bd40:	4a39      	ldr	r2, [pc, #228]	; (800be28 <_malloc_r+0x418>)
 800bd42:	6811      	ldr	r1, [r2, #0]
 800bd44:	428b      	cmp	r3, r1
 800bd46:	bf88      	it	hi
 800bd48:	6013      	strhi	r3, [r2, #0]
 800bd4a:	e032      	b.n	800bdb2 <_malloc_r+0x3a2>
 800bd4c:	6810      	ldr	r0, [r2, #0]
 800bd4e:	3001      	adds	r0, #1
 800bd50:	bf1b      	ittet	ne
 800bd52:	eba8 0303 	subne.w	r3, r8, r3
 800bd56:	4473      	addne	r3, lr
 800bd58:	f8c2 8000 	streq.w	r8, [r2]
 800bd5c:	f8ca 3000 	strne.w	r3, [sl]
 800bd60:	f018 0007 	ands.w	r0, r8, #7
 800bd64:	bf1c      	itt	ne
 800bd66:	f1c0 0008 	rsbne	r0, r0, #8
 800bd6a:	4480      	addne	r8, r0
 800bd6c:	4b2a      	ldr	r3, [pc, #168]	; (800be18 <_malloc_r+0x408>)
 800bd6e:	4447      	add	r7, r8
 800bd70:	4418      	add	r0, r3
 800bd72:	400f      	ands	r7, r1
 800bd74:	1bc7      	subs	r7, r0, r7
 800bd76:	4639      	mov	r1, r7
 800bd78:	4648      	mov	r0, r9
 800bd7a:	f000 fb51 	bl	800c420 <_sbrk_r>
 800bd7e:	1c43      	adds	r3, r0, #1
 800bd80:	bf08      	it	eq
 800bd82:	4640      	moveq	r0, r8
 800bd84:	f8da 3000 	ldr.w	r3, [sl]
 800bd88:	f8c5 8008 	str.w	r8, [r5, #8]
 800bd8c:	bf08      	it	eq
 800bd8e:	2700      	moveq	r7, #0
 800bd90:	eba0 0008 	sub.w	r0, r0, r8
 800bd94:	443b      	add	r3, r7
 800bd96:	4407      	add	r7, r0
 800bd98:	f047 0701 	orr.w	r7, r7, #1
 800bd9c:	45ab      	cmp	fp, r5
 800bd9e:	f8ca 3000 	str.w	r3, [sl]
 800bda2:	f8c8 7004 	str.w	r7, [r8, #4]
 800bda6:	d0c4      	beq.n	800bd32 <_malloc_r+0x322>
 800bda8:	2e0f      	cmp	r6, #15
 800bdaa:	d810      	bhi.n	800bdce <_malloc_r+0x3be>
 800bdac:	2301      	movs	r3, #1
 800bdae:	f8c8 3004 	str.w	r3, [r8, #4]
 800bdb2:	68ab      	ldr	r3, [r5, #8]
 800bdb4:	685a      	ldr	r2, [r3, #4]
 800bdb6:	f022 0203 	bic.w	r2, r2, #3
 800bdba:	4294      	cmp	r4, r2
 800bdbc:	eba2 0304 	sub.w	r3, r2, r4
 800bdc0:	d801      	bhi.n	800bdc6 <_malloc_r+0x3b6>
 800bdc2:	2b0f      	cmp	r3, #15
 800bdc4:	dc1a      	bgt.n	800bdfc <_malloc_r+0x3ec>
 800bdc6:	4648      	mov	r0, r9
 800bdc8:	f000 f854 	bl	800be74 <__malloc_unlock>
 800bdcc:	e62d      	b.n	800ba2a <_malloc_r+0x1a>
 800bdce:	f8db 3004 	ldr.w	r3, [fp, #4]
 800bdd2:	3e0c      	subs	r6, #12
 800bdd4:	f026 0607 	bic.w	r6, r6, #7
 800bdd8:	f003 0301 	and.w	r3, r3, #1
 800bddc:	4333      	orrs	r3, r6
 800bdde:	f8cb 3004 	str.w	r3, [fp, #4]
 800bde2:	eb0b 0306 	add.w	r3, fp, r6
 800bde6:	2205      	movs	r2, #5
 800bde8:	2e0f      	cmp	r6, #15
 800bdea:	605a      	str	r2, [r3, #4]
 800bdec:	609a      	str	r2, [r3, #8]
 800bdee:	d9a0      	bls.n	800bd32 <_malloc_r+0x322>
 800bdf0:	f10b 0108 	add.w	r1, fp, #8
 800bdf4:	4648      	mov	r0, r9
 800bdf6:	f000 fc2d 	bl	800c654 <_free_r>
 800bdfa:	e79a      	b.n	800bd32 <_malloc_r+0x322>
 800bdfc:	68ae      	ldr	r6, [r5, #8]
 800bdfe:	f044 0201 	orr.w	r2, r4, #1
 800be02:	4434      	add	r4, r6
 800be04:	f043 0301 	orr.w	r3, r3, #1
 800be08:	6072      	str	r2, [r6, #4]
 800be0a:	60ac      	str	r4, [r5, #8]
 800be0c:	6063      	str	r3, [r4, #4]
 800be0e:	e631      	b.n	800ba74 <_malloc_r+0x64>
 800be10:	20000b10 	.word	0x20000b10
 800be14:	200007fc 	.word	0x200007fc
 800be18:	00000080 	.word	0x00000080
 800be1c:	20000ae0 	.word	0x20000ae0
 800be20:	0000007f 	.word	0x0000007f
 800be24:	20000b08 	.word	0x20000b08
 800be28:	20000b0c 	.word	0x20000b0c

0800be2c <__ascii_mbtowc>:
 800be2c:	b082      	sub	sp, #8
 800be2e:	b901      	cbnz	r1, 800be32 <__ascii_mbtowc+0x6>
 800be30:	a901      	add	r1, sp, #4
 800be32:	b142      	cbz	r2, 800be46 <__ascii_mbtowc+0x1a>
 800be34:	b14b      	cbz	r3, 800be4a <__ascii_mbtowc+0x1e>
 800be36:	7813      	ldrb	r3, [r2, #0]
 800be38:	600b      	str	r3, [r1, #0]
 800be3a:	7812      	ldrb	r2, [r2, #0]
 800be3c:	1c10      	adds	r0, r2, #0
 800be3e:	bf18      	it	ne
 800be40:	2001      	movne	r0, #1
 800be42:	b002      	add	sp, #8
 800be44:	4770      	bx	lr
 800be46:	4610      	mov	r0, r2
 800be48:	e7fb      	b.n	800be42 <__ascii_mbtowc+0x16>
 800be4a:	f06f 0001 	mvn.w	r0, #1
 800be4e:	e7f8      	b.n	800be42 <__ascii_mbtowc+0x16>

0800be50 <memcpy>:
 800be50:	b510      	push	{r4, lr}
 800be52:	1e43      	subs	r3, r0, #1
 800be54:	440a      	add	r2, r1
 800be56:	4291      	cmp	r1, r2
 800be58:	d100      	bne.n	800be5c <memcpy+0xc>
 800be5a:	bd10      	pop	{r4, pc}
 800be5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be60:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be64:	e7f7      	b.n	800be56 <memcpy+0x6>
	...

0800be68 <__malloc_lock>:
 800be68:	4801      	ldr	r0, [pc, #4]	; (800be70 <__malloc_lock+0x8>)
 800be6a:	f000 bcaf 	b.w	800c7cc <__retarget_lock_acquire_recursive>
 800be6e:	bf00      	nop
 800be70:	20000fdc 	.word	0x20000fdc

0800be74 <__malloc_unlock>:
 800be74:	4801      	ldr	r0, [pc, #4]	; (800be7c <__malloc_unlock+0x8>)
 800be76:	f000 bcaa 	b.w	800c7ce <__retarget_lock_release_recursive>
 800be7a:	bf00      	nop
 800be7c:	20000fdc 	.word	0x20000fdc

0800be80 <_Balloc>:
 800be80:	b570      	push	{r4, r5, r6, lr}
 800be82:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800be84:	4604      	mov	r4, r0
 800be86:	460e      	mov	r6, r1
 800be88:	b93d      	cbnz	r5, 800be9a <_Balloc+0x1a>
 800be8a:	2010      	movs	r0, #16
 800be8c:	f7ff fdb8 	bl	800ba00 <malloc>
 800be90:	6260      	str	r0, [r4, #36]	; 0x24
 800be92:	6045      	str	r5, [r0, #4]
 800be94:	6085      	str	r5, [r0, #8]
 800be96:	6005      	str	r5, [r0, #0]
 800be98:	60c5      	str	r5, [r0, #12]
 800be9a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800be9c:	68eb      	ldr	r3, [r5, #12]
 800be9e:	b183      	cbz	r3, 800bec2 <_Balloc+0x42>
 800bea0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bea2:	68db      	ldr	r3, [r3, #12]
 800bea4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bea8:	b9b8      	cbnz	r0, 800beda <_Balloc+0x5a>
 800beaa:	2101      	movs	r1, #1
 800beac:	fa01 f506 	lsl.w	r5, r1, r6
 800beb0:	1d6a      	adds	r2, r5, #5
 800beb2:	0092      	lsls	r2, r2, #2
 800beb4:	4620      	mov	r0, r4
 800beb6:	f000 fb4a 	bl	800c54e <_calloc_r>
 800beba:	b160      	cbz	r0, 800bed6 <_Balloc+0x56>
 800bebc:	6046      	str	r6, [r0, #4]
 800bebe:	6085      	str	r5, [r0, #8]
 800bec0:	e00e      	b.n	800bee0 <_Balloc+0x60>
 800bec2:	2221      	movs	r2, #33	; 0x21
 800bec4:	2104      	movs	r1, #4
 800bec6:	4620      	mov	r0, r4
 800bec8:	f000 fb41 	bl	800c54e <_calloc_r>
 800becc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bece:	60e8      	str	r0, [r5, #12]
 800bed0:	68db      	ldr	r3, [r3, #12]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1e4      	bne.n	800bea0 <_Balloc+0x20>
 800bed6:	2000      	movs	r0, #0
 800bed8:	bd70      	pop	{r4, r5, r6, pc}
 800beda:	6802      	ldr	r2, [r0, #0]
 800bedc:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800bee0:	2300      	movs	r3, #0
 800bee2:	6103      	str	r3, [r0, #16]
 800bee4:	60c3      	str	r3, [r0, #12]
 800bee6:	bd70      	pop	{r4, r5, r6, pc}

0800bee8 <_Bfree>:
 800bee8:	b570      	push	{r4, r5, r6, lr}
 800beea:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800beec:	4606      	mov	r6, r0
 800beee:	460d      	mov	r5, r1
 800bef0:	b93c      	cbnz	r4, 800bf02 <_Bfree+0x1a>
 800bef2:	2010      	movs	r0, #16
 800bef4:	f7ff fd84 	bl	800ba00 <malloc>
 800bef8:	6270      	str	r0, [r6, #36]	; 0x24
 800befa:	6044      	str	r4, [r0, #4]
 800befc:	6084      	str	r4, [r0, #8]
 800befe:	6004      	str	r4, [r0, #0]
 800bf00:	60c4      	str	r4, [r0, #12]
 800bf02:	b13d      	cbz	r5, 800bf14 <_Bfree+0x2c>
 800bf04:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bf06:	686a      	ldr	r2, [r5, #4]
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf0e:	6029      	str	r1, [r5, #0]
 800bf10:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800bf14:	bd70      	pop	{r4, r5, r6, pc}

0800bf16 <__multadd>:
 800bf16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1a:	690d      	ldr	r5, [r1, #16]
 800bf1c:	461f      	mov	r7, r3
 800bf1e:	4606      	mov	r6, r0
 800bf20:	460c      	mov	r4, r1
 800bf22:	f101 0e14 	add.w	lr, r1, #20
 800bf26:	2300      	movs	r3, #0
 800bf28:	f8de 0000 	ldr.w	r0, [lr]
 800bf2c:	b281      	uxth	r1, r0
 800bf2e:	fb02 7101 	mla	r1, r2, r1, r7
 800bf32:	0c0f      	lsrs	r7, r1, #16
 800bf34:	0c00      	lsrs	r0, r0, #16
 800bf36:	fb02 7000 	mla	r0, r2, r0, r7
 800bf3a:	b289      	uxth	r1, r1
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800bf42:	429d      	cmp	r5, r3
 800bf44:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800bf48:	f84e 1b04 	str.w	r1, [lr], #4
 800bf4c:	dcec      	bgt.n	800bf28 <__multadd+0x12>
 800bf4e:	b1d7      	cbz	r7, 800bf86 <__multadd+0x70>
 800bf50:	68a3      	ldr	r3, [r4, #8]
 800bf52:	429d      	cmp	r5, r3
 800bf54:	db12      	blt.n	800bf7c <__multadd+0x66>
 800bf56:	6861      	ldr	r1, [r4, #4]
 800bf58:	4630      	mov	r0, r6
 800bf5a:	3101      	adds	r1, #1
 800bf5c:	f7ff ff90 	bl	800be80 <_Balloc>
 800bf60:	6922      	ldr	r2, [r4, #16]
 800bf62:	3202      	adds	r2, #2
 800bf64:	f104 010c 	add.w	r1, r4, #12
 800bf68:	4680      	mov	r8, r0
 800bf6a:	0092      	lsls	r2, r2, #2
 800bf6c:	300c      	adds	r0, #12
 800bf6e:	f7ff ff6f 	bl	800be50 <memcpy>
 800bf72:	4621      	mov	r1, r4
 800bf74:	4630      	mov	r0, r6
 800bf76:	f7ff ffb7 	bl	800bee8 <_Bfree>
 800bf7a:	4644      	mov	r4, r8
 800bf7c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bf80:	3501      	adds	r5, #1
 800bf82:	615f      	str	r7, [r3, #20]
 800bf84:	6125      	str	r5, [r4, #16]
 800bf86:	4620      	mov	r0, r4
 800bf88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800bf8c <__hi0bits>:
 800bf8c:	0c02      	lsrs	r2, r0, #16
 800bf8e:	0412      	lsls	r2, r2, #16
 800bf90:	4603      	mov	r3, r0
 800bf92:	b9b2      	cbnz	r2, 800bfc2 <__hi0bits+0x36>
 800bf94:	0403      	lsls	r3, r0, #16
 800bf96:	2010      	movs	r0, #16
 800bf98:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800bf9c:	bf04      	itt	eq
 800bf9e:	021b      	lsleq	r3, r3, #8
 800bfa0:	3008      	addeq	r0, #8
 800bfa2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800bfa6:	bf04      	itt	eq
 800bfa8:	011b      	lsleq	r3, r3, #4
 800bfaa:	3004      	addeq	r0, #4
 800bfac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800bfb0:	bf04      	itt	eq
 800bfb2:	009b      	lsleq	r3, r3, #2
 800bfb4:	3002      	addeq	r0, #2
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	db06      	blt.n	800bfc8 <__hi0bits+0x3c>
 800bfba:	005b      	lsls	r3, r3, #1
 800bfbc:	d503      	bpl.n	800bfc6 <__hi0bits+0x3a>
 800bfbe:	3001      	adds	r0, #1
 800bfc0:	4770      	bx	lr
 800bfc2:	2000      	movs	r0, #0
 800bfc4:	e7e8      	b.n	800bf98 <__hi0bits+0xc>
 800bfc6:	2020      	movs	r0, #32
 800bfc8:	4770      	bx	lr

0800bfca <__lo0bits>:
 800bfca:	6803      	ldr	r3, [r0, #0]
 800bfcc:	f013 0207 	ands.w	r2, r3, #7
 800bfd0:	4601      	mov	r1, r0
 800bfd2:	d00b      	beq.n	800bfec <__lo0bits+0x22>
 800bfd4:	07da      	lsls	r2, r3, #31
 800bfd6:	d423      	bmi.n	800c020 <__lo0bits+0x56>
 800bfd8:	0798      	lsls	r0, r3, #30
 800bfda:	bf49      	itett	mi
 800bfdc:	085b      	lsrmi	r3, r3, #1
 800bfde:	089b      	lsrpl	r3, r3, #2
 800bfe0:	2001      	movmi	r0, #1
 800bfe2:	600b      	strmi	r3, [r1, #0]
 800bfe4:	bf5c      	itt	pl
 800bfe6:	600b      	strpl	r3, [r1, #0]
 800bfe8:	2002      	movpl	r0, #2
 800bfea:	4770      	bx	lr
 800bfec:	b298      	uxth	r0, r3
 800bfee:	b9a8      	cbnz	r0, 800c01c <__lo0bits+0x52>
 800bff0:	0c1b      	lsrs	r3, r3, #16
 800bff2:	2010      	movs	r0, #16
 800bff4:	f013 0fff 	tst.w	r3, #255	; 0xff
 800bff8:	bf04      	itt	eq
 800bffa:	0a1b      	lsreq	r3, r3, #8
 800bffc:	3008      	addeq	r0, #8
 800bffe:	071a      	lsls	r2, r3, #28
 800c000:	bf04      	itt	eq
 800c002:	091b      	lsreq	r3, r3, #4
 800c004:	3004      	addeq	r0, #4
 800c006:	079a      	lsls	r2, r3, #30
 800c008:	bf04      	itt	eq
 800c00a:	089b      	lsreq	r3, r3, #2
 800c00c:	3002      	addeq	r0, #2
 800c00e:	07da      	lsls	r2, r3, #31
 800c010:	d402      	bmi.n	800c018 <__lo0bits+0x4e>
 800c012:	085b      	lsrs	r3, r3, #1
 800c014:	d006      	beq.n	800c024 <__lo0bits+0x5a>
 800c016:	3001      	adds	r0, #1
 800c018:	600b      	str	r3, [r1, #0]
 800c01a:	4770      	bx	lr
 800c01c:	4610      	mov	r0, r2
 800c01e:	e7e9      	b.n	800bff4 <__lo0bits+0x2a>
 800c020:	2000      	movs	r0, #0
 800c022:	4770      	bx	lr
 800c024:	2020      	movs	r0, #32
 800c026:	4770      	bx	lr

0800c028 <__i2b>:
 800c028:	b510      	push	{r4, lr}
 800c02a:	460c      	mov	r4, r1
 800c02c:	2101      	movs	r1, #1
 800c02e:	f7ff ff27 	bl	800be80 <_Balloc>
 800c032:	2201      	movs	r2, #1
 800c034:	6144      	str	r4, [r0, #20]
 800c036:	6102      	str	r2, [r0, #16]
 800c038:	bd10      	pop	{r4, pc}

0800c03a <__multiply>:
 800c03a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c03e:	4614      	mov	r4, r2
 800c040:	690a      	ldr	r2, [r1, #16]
 800c042:	6923      	ldr	r3, [r4, #16]
 800c044:	429a      	cmp	r2, r3
 800c046:	bfb8      	it	lt
 800c048:	460b      	movlt	r3, r1
 800c04a:	4689      	mov	r9, r1
 800c04c:	bfbc      	itt	lt
 800c04e:	46a1      	movlt	r9, r4
 800c050:	461c      	movlt	r4, r3
 800c052:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800c056:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c05a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800c05e:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800c062:	eb07 060a 	add.w	r6, r7, sl
 800c066:	429e      	cmp	r6, r3
 800c068:	bfc8      	it	gt
 800c06a:	3101      	addgt	r1, #1
 800c06c:	f7ff ff08 	bl	800be80 <_Balloc>
 800c070:	f100 0514 	add.w	r5, r0, #20
 800c074:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c078:	462b      	mov	r3, r5
 800c07a:	2200      	movs	r2, #0
 800c07c:	4543      	cmp	r3, r8
 800c07e:	d316      	bcc.n	800c0ae <__multiply+0x74>
 800c080:	f104 0214 	add.w	r2, r4, #20
 800c084:	f109 0114 	add.w	r1, r9, #20
 800c088:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800c08c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800c090:	9301      	str	r3, [sp, #4]
 800c092:	9c01      	ldr	r4, [sp, #4]
 800c094:	4294      	cmp	r4, r2
 800c096:	4613      	mov	r3, r2
 800c098:	d80c      	bhi.n	800c0b4 <__multiply+0x7a>
 800c09a:	2e00      	cmp	r6, #0
 800c09c:	dd03      	ble.n	800c0a6 <__multiply+0x6c>
 800c09e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d054      	beq.n	800c150 <__multiply+0x116>
 800c0a6:	6106      	str	r6, [r0, #16]
 800c0a8:	b003      	add	sp, #12
 800c0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ae:	f843 2b04 	str.w	r2, [r3], #4
 800c0b2:	e7e3      	b.n	800c07c <__multiply+0x42>
 800c0b4:	f8b3 a000 	ldrh.w	sl, [r3]
 800c0b8:	3204      	adds	r2, #4
 800c0ba:	f1ba 0f00 	cmp.w	sl, #0
 800c0be:	d020      	beq.n	800c102 <__multiply+0xc8>
 800c0c0:	46ae      	mov	lr, r5
 800c0c2:	4689      	mov	r9, r1
 800c0c4:	f04f 0c00 	mov.w	ip, #0
 800c0c8:	f859 4b04 	ldr.w	r4, [r9], #4
 800c0cc:	f8be b000 	ldrh.w	fp, [lr]
 800c0d0:	b2a3      	uxth	r3, r4
 800c0d2:	fb0a b303 	mla	r3, sl, r3, fp
 800c0d6:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800c0da:	f8de 4000 	ldr.w	r4, [lr]
 800c0de:	4463      	add	r3, ip
 800c0e0:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800c0e4:	fb0a c40b 	mla	r4, sl, fp, ip
 800c0e8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800c0ec:	b29b      	uxth	r3, r3
 800c0ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800c0f2:	454f      	cmp	r7, r9
 800c0f4:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800c0f8:	f84e 3b04 	str.w	r3, [lr], #4
 800c0fc:	d8e4      	bhi.n	800c0c8 <__multiply+0x8e>
 800c0fe:	f8ce c000 	str.w	ip, [lr]
 800c102:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800c106:	f1b9 0f00 	cmp.w	r9, #0
 800c10a:	d01f      	beq.n	800c14c <__multiply+0x112>
 800c10c:	682b      	ldr	r3, [r5, #0]
 800c10e:	46ae      	mov	lr, r5
 800c110:	468c      	mov	ip, r1
 800c112:	f04f 0a00 	mov.w	sl, #0
 800c116:	f8bc 4000 	ldrh.w	r4, [ip]
 800c11a:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c11e:	fb09 b404 	mla	r4, r9, r4, fp
 800c122:	44a2      	add	sl, r4
 800c124:	b29b      	uxth	r3, r3
 800c126:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800c12a:	f84e 3b04 	str.w	r3, [lr], #4
 800c12e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c132:	f8be 4000 	ldrh.w	r4, [lr]
 800c136:	0c1b      	lsrs	r3, r3, #16
 800c138:	fb09 4303 	mla	r3, r9, r3, r4
 800c13c:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800c140:	4567      	cmp	r7, ip
 800c142:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c146:	d8e6      	bhi.n	800c116 <__multiply+0xdc>
 800c148:	f8ce 3000 	str.w	r3, [lr]
 800c14c:	3504      	adds	r5, #4
 800c14e:	e7a0      	b.n	800c092 <__multiply+0x58>
 800c150:	3e01      	subs	r6, #1
 800c152:	e7a2      	b.n	800c09a <__multiply+0x60>

0800c154 <__pow5mult>:
 800c154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c158:	4615      	mov	r5, r2
 800c15a:	f012 0203 	ands.w	r2, r2, #3
 800c15e:	4606      	mov	r6, r0
 800c160:	460f      	mov	r7, r1
 800c162:	d007      	beq.n	800c174 <__pow5mult+0x20>
 800c164:	3a01      	subs	r2, #1
 800c166:	4c21      	ldr	r4, [pc, #132]	; (800c1ec <__pow5mult+0x98>)
 800c168:	2300      	movs	r3, #0
 800c16a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c16e:	f7ff fed2 	bl	800bf16 <__multadd>
 800c172:	4607      	mov	r7, r0
 800c174:	10ad      	asrs	r5, r5, #2
 800c176:	d035      	beq.n	800c1e4 <__pow5mult+0x90>
 800c178:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c17a:	b93c      	cbnz	r4, 800c18c <__pow5mult+0x38>
 800c17c:	2010      	movs	r0, #16
 800c17e:	f7ff fc3f 	bl	800ba00 <malloc>
 800c182:	6270      	str	r0, [r6, #36]	; 0x24
 800c184:	6044      	str	r4, [r0, #4]
 800c186:	6084      	str	r4, [r0, #8]
 800c188:	6004      	str	r4, [r0, #0]
 800c18a:	60c4      	str	r4, [r0, #12]
 800c18c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c190:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c194:	b94c      	cbnz	r4, 800c1aa <__pow5mult+0x56>
 800c196:	f240 2171 	movw	r1, #625	; 0x271
 800c19a:	4630      	mov	r0, r6
 800c19c:	f7ff ff44 	bl	800c028 <__i2b>
 800c1a0:	2300      	movs	r3, #0
 800c1a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	6003      	str	r3, [r0, #0]
 800c1aa:	f04f 0800 	mov.w	r8, #0
 800c1ae:	07eb      	lsls	r3, r5, #31
 800c1b0:	d50a      	bpl.n	800c1c8 <__pow5mult+0x74>
 800c1b2:	4639      	mov	r1, r7
 800c1b4:	4622      	mov	r2, r4
 800c1b6:	4630      	mov	r0, r6
 800c1b8:	f7ff ff3f 	bl	800c03a <__multiply>
 800c1bc:	4639      	mov	r1, r7
 800c1be:	4681      	mov	r9, r0
 800c1c0:	4630      	mov	r0, r6
 800c1c2:	f7ff fe91 	bl	800bee8 <_Bfree>
 800c1c6:	464f      	mov	r7, r9
 800c1c8:	106d      	asrs	r5, r5, #1
 800c1ca:	d00b      	beq.n	800c1e4 <__pow5mult+0x90>
 800c1cc:	6820      	ldr	r0, [r4, #0]
 800c1ce:	b938      	cbnz	r0, 800c1e0 <__pow5mult+0x8c>
 800c1d0:	4622      	mov	r2, r4
 800c1d2:	4621      	mov	r1, r4
 800c1d4:	4630      	mov	r0, r6
 800c1d6:	f7ff ff30 	bl	800c03a <__multiply>
 800c1da:	6020      	str	r0, [r4, #0]
 800c1dc:	f8c0 8000 	str.w	r8, [r0]
 800c1e0:	4604      	mov	r4, r0
 800c1e2:	e7e4      	b.n	800c1ae <__pow5mult+0x5a>
 800c1e4:	4638      	mov	r0, r7
 800c1e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ea:	bf00      	nop
 800c1ec:	0800d958 	.word	0x0800d958

0800c1f0 <__lshift>:
 800c1f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1f4:	460c      	mov	r4, r1
 800c1f6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c1fa:	6923      	ldr	r3, [r4, #16]
 800c1fc:	6849      	ldr	r1, [r1, #4]
 800c1fe:	eb0a 0903 	add.w	r9, sl, r3
 800c202:	68a3      	ldr	r3, [r4, #8]
 800c204:	4607      	mov	r7, r0
 800c206:	4616      	mov	r6, r2
 800c208:	f109 0501 	add.w	r5, r9, #1
 800c20c:	42ab      	cmp	r3, r5
 800c20e:	db31      	blt.n	800c274 <__lshift+0x84>
 800c210:	4638      	mov	r0, r7
 800c212:	f7ff fe35 	bl	800be80 <_Balloc>
 800c216:	2200      	movs	r2, #0
 800c218:	4680      	mov	r8, r0
 800c21a:	f100 0314 	add.w	r3, r0, #20
 800c21e:	4611      	mov	r1, r2
 800c220:	4552      	cmp	r2, sl
 800c222:	db2a      	blt.n	800c27a <__lshift+0x8a>
 800c224:	6920      	ldr	r0, [r4, #16]
 800c226:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c22a:	f104 0114 	add.w	r1, r4, #20
 800c22e:	f016 021f 	ands.w	r2, r6, #31
 800c232:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800c236:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800c23a:	d022      	beq.n	800c282 <__lshift+0x92>
 800c23c:	f1c2 0c20 	rsb	ip, r2, #32
 800c240:	2000      	movs	r0, #0
 800c242:	680e      	ldr	r6, [r1, #0]
 800c244:	4096      	lsls	r6, r2
 800c246:	4330      	orrs	r0, r6
 800c248:	f843 0b04 	str.w	r0, [r3], #4
 800c24c:	f851 0b04 	ldr.w	r0, [r1], #4
 800c250:	458e      	cmp	lr, r1
 800c252:	fa20 f00c 	lsr.w	r0, r0, ip
 800c256:	d8f4      	bhi.n	800c242 <__lshift+0x52>
 800c258:	6018      	str	r0, [r3, #0]
 800c25a:	b108      	cbz	r0, 800c260 <__lshift+0x70>
 800c25c:	f109 0502 	add.w	r5, r9, #2
 800c260:	3d01      	subs	r5, #1
 800c262:	4638      	mov	r0, r7
 800c264:	f8c8 5010 	str.w	r5, [r8, #16]
 800c268:	4621      	mov	r1, r4
 800c26a:	f7ff fe3d 	bl	800bee8 <_Bfree>
 800c26e:	4640      	mov	r0, r8
 800c270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c274:	3101      	adds	r1, #1
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	e7c8      	b.n	800c20c <__lshift+0x1c>
 800c27a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800c27e:	3201      	adds	r2, #1
 800c280:	e7ce      	b.n	800c220 <__lshift+0x30>
 800c282:	3b04      	subs	r3, #4
 800c284:	f851 2b04 	ldr.w	r2, [r1], #4
 800c288:	f843 2f04 	str.w	r2, [r3, #4]!
 800c28c:	458e      	cmp	lr, r1
 800c28e:	d8f9      	bhi.n	800c284 <__lshift+0x94>
 800c290:	e7e6      	b.n	800c260 <__lshift+0x70>

0800c292 <__mcmp>:
 800c292:	6903      	ldr	r3, [r0, #16]
 800c294:	690a      	ldr	r2, [r1, #16]
 800c296:	1a9b      	subs	r3, r3, r2
 800c298:	b530      	push	{r4, r5, lr}
 800c29a:	d10c      	bne.n	800c2b6 <__mcmp+0x24>
 800c29c:	0092      	lsls	r2, r2, #2
 800c29e:	3014      	adds	r0, #20
 800c2a0:	3114      	adds	r1, #20
 800c2a2:	1884      	adds	r4, r0, r2
 800c2a4:	4411      	add	r1, r2
 800c2a6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800c2aa:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800c2ae:	4295      	cmp	r5, r2
 800c2b0:	d003      	beq.n	800c2ba <__mcmp+0x28>
 800c2b2:	d305      	bcc.n	800c2c0 <__mcmp+0x2e>
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	bd30      	pop	{r4, r5, pc}
 800c2ba:	42a0      	cmp	r0, r4
 800c2bc:	d3f3      	bcc.n	800c2a6 <__mcmp+0x14>
 800c2be:	e7fa      	b.n	800c2b6 <__mcmp+0x24>
 800c2c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2c4:	e7f7      	b.n	800c2b6 <__mcmp+0x24>

0800c2c6 <__mdiff>:
 800c2c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2ca:	460d      	mov	r5, r1
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	4611      	mov	r1, r2
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	4614      	mov	r4, r2
 800c2d4:	f7ff ffdd 	bl	800c292 <__mcmp>
 800c2d8:	1e06      	subs	r6, r0, #0
 800c2da:	d108      	bne.n	800c2ee <__mdiff+0x28>
 800c2dc:	4631      	mov	r1, r6
 800c2de:	4638      	mov	r0, r7
 800c2e0:	f7ff fdce 	bl	800be80 <_Balloc>
 800c2e4:	2301      	movs	r3, #1
 800c2e6:	6103      	str	r3, [r0, #16]
 800c2e8:	6146      	str	r6, [r0, #20]
 800c2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2ee:	bfa4      	itt	ge
 800c2f0:	4623      	movge	r3, r4
 800c2f2:	462c      	movge	r4, r5
 800c2f4:	4638      	mov	r0, r7
 800c2f6:	6861      	ldr	r1, [r4, #4]
 800c2f8:	bfa6      	itte	ge
 800c2fa:	461d      	movge	r5, r3
 800c2fc:	2600      	movge	r6, #0
 800c2fe:	2601      	movlt	r6, #1
 800c300:	f7ff fdbe 	bl	800be80 <_Balloc>
 800c304:	692b      	ldr	r3, [r5, #16]
 800c306:	60c6      	str	r6, [r0, #12]
 800c308:	6926      	ldr	r6, [r4, #16]
 800c30a:	f105 0914 	add.w	r9, r5, #20
 800c30e:	f104 0214 	add.w	r2, r4, #20
 800c312:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800c316:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800c31a:	f100 0514 	add.w	r5, r0, #20
 800c31e:	f04f 0c00 	mov.w	ip, #0
 800c322:	f852 ab04 	ldr.w	sl, [r2], #4
 800c326:	f859 4b04 	ldr.w	r4, [r9], #4
 800c32a:	fa1c f18a 	uxtah	r1, ip, sl
 800c32e:	b2a3      	uxth	r3, r4
 800c330:	1ac9      	subs	r1, r1, r3
 800c332:	0c23      	lsrs	r3, r4, #16
 800c334:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800c338:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800c33c:	b289      	uxth	r1, r1
 800c33e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800c342:	45c8      	cmp	r8, r9
 800c344:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800c348:	4696      	mov	lr, r2
 800c34a:	f845 3b04 	str.w	r3, [r5], #4
 800c34e:	d8e8      	bhi.n	800c322 <__mdiff+0x5c>
 800c350:	45be      	cmp	lr, r7
 800c352:	d305      	bcc.n	800c360 <__mdiff+0x9a>
 800c354:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800c358:	b18b      	cbz	r3, 800c37e <__mdiff+0xb8>
 800c35a:	6106      	str	r6, [r0, #16]
 800c35c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c360:	f85e 1b04 	ldr.w	r1, [lr], #4
 800c364:	fa1c f381 	uxtah	r3, ip, r1
 800c368:	141a      	asrs	r2, r3, #16
 800c36a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c36e:	b29b      	uxth	r3, r3
 800c370:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c374:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c378:	f845 3b04 	str.w	r3, [r5], #4
 800c37c:	e7e8      	b.n	800c350 <__mdiff+0x8a>
 800c37e:	3e01      	subs	r6, #1
 800c380:	e7e8      	b.n	800c354 <__mdiff+0x8e>

0800c382 <__d2b>:
 800c382:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c386:	460e      	mov	r6, r1
 800c388:	2101      	movs	r1, #1
 800c38a:	ec59 8b10 	vmov	r8, r9, d0
 800c38e:	4615      	mov	r5, r2
 800c390:	f7ff fd76 	bl	800be80 <_Balloc>
 800c394:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800c398:	4607      	mov	r7, r0
 800c39a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c39e:	bb34      	cbnz	r4, 800c3ee <__d2b+0x6c>
 800c3a0:	9301      	str	r3, [sp, #4]
 800c3a2:	f1b8 0f00 	cmp.w	r8, #0
 800c3a6:	d027      	beq.n	800c3f8 <__d2b+0x76>
 800c3a8:	a802      	add	r0, sp, #8
 800c3aa:	f840 8d08 	str.w	r8, [r0, #-8]!
 800c3ae:	f7ff fe0c 	bl	800bfca <__lo0bits>
 800c3b2:	9900      	ldr	r1, [sp, #0]
 800c3b4:	b1f0      	cbz	r0, 800c3f4 <__d2b+0x72>
 800c3b6:	9a01      	ldr	r2, [sp, #4]
 800c3b8:	f1c0 0320 	rsb	r3, r0, #32
 800c3bc:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c0:	430b      	orrs	r3, r1
 800c3c2:	40c2      	lsrs	r2, r0
 800c3c4:	617b      	str	r3, [r7, #20]
 800c3c6:	9201      	str	r2, [sp, #4]
 800c3c8:	9b01      	ldr	r3, [sp, #4]
 800c3ca:	61bb      	str	r3, [r7, #24]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	bf14      	ite	ne
 800c3d0:	2102      	movne	r1, #2
 800c3d2:	2101      	moveq	r1, #1
 800c3d4:	6139      	str	r1, [r7, #16]
 800c3d6:	b1c4      	cbz	r4, 800c40a <__d2b+0x88>
 800c3d8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800c3dc:	4404      	add	r4, r0
 800c3de:	6034      	str	r4, [r6, #0]
 800c3e0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c3e4:	6028      	str	r0, [r5, #0]
 800c3e6:	4638      	mov	r0, r7
 800c3e8:	b003      	add	sp, #12
 800c3ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c3ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c3f2:	e7d5      	b.n	800c3a0 <__d2b+0x1e>
 800c3f4:	6179      	str	r1, [r7, #20]
 800c3f6:	e7e7      	b.n	800c3c8 <__d2b+0x46>
 800c3f8:	a801      	add	r0, sp, #4
 800c3fa:	f7ff fde6 	bl	800bfca <__lo0bits>
 800c3fe:	9b01      	ldr	r3, [sp, #4]
 800c400:	617b      	str	r3, [r7, #20]
 800c402:	2101      	movs	r1, #1
 800c404:	6139      	str	r1, [r7, #16]
 800c406:	3020      	adds	r0, #32
 800c408:	e7e5      	b.n	800c3d6 <__d2b+0x54>
 800c40a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800c40e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c412:	6030      	str	r0, [r6, #0]
 800c414:	6918      	ldr	r0, [r3, #16]
 800c416:	f7ff fdb9 	bl	800bf8c <__hi0bits>
 800c41a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800c41e:	e7e1      	b.n	800c3e4 <__d2b+0x62>

0800c420 <_sbrk_r>:
 800c420:	b538      	push	{r3, r4, r5, lr}
 800c422:	4c06      	ldr	r4, [pc, #24]	; (800c43c <_sbrk_r+0x1c>)
 800c424:	2300      	movs	r3, #0
 800c426:	4605      	mov	r5, r0
 800c428:	4608      	mov	r0, r1
 800c42a:	6023      	str	r3, [r4, #0]
 800c42c:	f7fd f840 	bl	80094b0 <_sbrk>
 800c430:	1c43      	adds	r3, r0, #1
 800c432:	d102      	bne.n	800c43a <_sbrk_r+0x1a>
 800c434:	6823      	ldr	r3, [r4, #0]
 800c436:	b103      	cbz	r3, 800c43a <_sbrk_r+0x1a>
 800c438:	602b      	str	r3, [r5, #0]
 800c43a:	bd38      	pop	{r3, r4, r5, pc}
 800c43c:	20000fe4 	.word	0x20000fe4

0800c440 <__ssprint_r>:
 800c440:	6893      	ldr	r3, [r2, #8]
 800c442:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c446:	4681      	mov	r9, r0
 800c448:	460c      	mov	r4, r1
 800c44a:	4617      	mov	r7, r2
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d060      	beq.n	800c512 <__ssprint_r+0xd2>
 800c450:	f04f 0b00 	mov.w	fp, #0
 800c454:	f8d2 a000 	ldr.w	sl, [r2]
 800c458:	465e      	mov	r6, fp
 800c45a:	b356      	cbz	r6, 800c4b2 <__ssprint_r+0x72>
 800c45c:	68a3      	ldr	r3, [r4, #8]
 800c45e:	429e      	cmp	r6, r3
 800c460:	d344      	bcc.n	800c4ec <__ssprint_r+0xac>
 800c462:	89a2      	ldrh	r2, [r4, #12]
 800c464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c468:	d03e      	beq.n	800c4e8 <__ssprint_r+0xa8>
 800c46a:	6825      	ldr	r5, [r4, #0]
 800c46c:	6921      	ldr	r1, [r4, #16]
 800c46e:	eba5 0801 	sub.w	r8, r5, r1
 800c472:	6965      	ldr	r5, [r4, #20]
 800c474:	2302      	movs	r3, #2
 800c476:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c47a:	fb95 f5f3 	sdiv	r5, r5, r3
 800c47e:	f108 0301 	add.w	r3, r8, #1
 800c482:	4433      	add	r3, r6
 800c484:	429d      	cmp	r5, r3
 800c486:	bf38      	it	cc
 800c488:	461d      	movcc	r5, r3
 800c48a:	0553      	lsls	r3, r2, #21
 800c48c:	d546      	bpl.n	800c51c <__ssprint_r+0xdc>
 800c48e:	4629      	mov	r1, r5
 800c490:	4648      	mov	r0, r9
 800c492:	f7ff fabd 	bl	800ba10 <_malloc_r>
 800c496:	b998      	cbnz	r0, 800c4c0 <__ssprint_r+0x80>
 800c498:	230c      	movs	r3, #12
 800c49a:	f8c9 3000 	str.w	r3, [r9]
 800c49e:	89a3      	ldrh	r3, [r4, #12]
 800c4a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c4a4:	81a3      	strh	r3, [r4, #12]
 800c4a6:	2300      	movs	r3, #0
 800c4a8:	60bb      	str	r3, [r7, #8]
 800c4aa:	607b      	str	r3, [r7, #4]
 800c4ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c4b0:	e031      	b.n	800c516 <__ssprint_r+0xd6>
 800c4b2:	f8da b000 	ldr.w	fp, [sl]
 800c4b6:	f8da 6004 	ldr.w	r6, [sl, #4]
 800c4ba:	f10a 0a08 	add.w	sl, sl, #8
 800c4be:	e7cc      	b.n	800c45a <__ssprint_r+0x1a>
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	6921      	ldr	r1, [r4, #16]
 800c4c4:	9001      	str	r0, [sp, #4]
 800c4c6:	f7ff fcc3 	bl	800be50 <memcpy>
 800c4ca:	89a2      	ldrh	r2, [r4, #12]
 800c4cc:	9b01      	ldr	r3, [sp, #4]
 800c4ce:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800c4d2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c4d6:	81a2      	strh	r2, [r4, #12]
 800c4d8:	6123      	str	r3, [r4, #16]
 800c4da:	6165      	str	r5, [r4, #20]
 800c4dc:	4443      	add	r3, r8
 800c4de:	eba5 0508 	sub.w	r5, r5, r8
 800c4e2:	6023      	str	r3, [r4, #0]
 800c4e4:	60a5      	str	r5, [r4, #8]
 800c4e6:	4633      	mov	r3, r6
 800c4e8:	429e      	cmp	r6, r3
 800c4ea:	d200      	bcs.n	800c4ee <__ssprint_r+0xae>
 800c4ec:	4633      	mov	r3, r6
 800c4ee:	461a      	mov	r2, r3
 800c4f0:	4659      	mov	r1, fp
 800c4f2:	6820      	ldr	r0, [r4, #0]
 800c4f4:	9301      	str	r3, [sp, #4]
 800c4f6:	f000 f96b 	bl	800c7d0 <memmove>
 800c4fa:	68a2      	ldr	r2, [r4, #8]
 800c4fc:	9b01      	ldr	r3, [sp, #4]
 800c4fe:	1ad2      	subs	r2, r2, r3
 800c500:	60a2      	str	r2, [r4, #8]
 800c502:	6822      	ldr	r2, [r4, #0]
 800c504:	4413      	add	r3, r2
 800c506:	6023      	str	r3, [r4, #0]
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	1b9e      	subs	r6, r3, r6
 800c50c:	60be      	str	r6, [r7, #8]
 800c50e:	2e00      	cmp	r6, #0
 800c510:	d1cf      	bne.n	800c4b2 <__ssprint_r+0x72>
 800c512:	2000      	movs	r0, #0
 800c514:	6078      	str	r0, [r7, #4]
 800c516:	b003      	add	sp, #12
 800c518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c51c:	462a      	mov	r2, r5
 800c51e:	4648      	mov	r0, r9
 800c520:	f000 f970 	bl	800c804 <_realloc_r>
 800c524:	4603      	mov	r3, r0
 800c526:	2800      	cmp	r0, #0
 800c528:	d1d6      	bne.n	800c4d8 <__ssprint_r+0x98>
 800c52a:	6921      	ldr	r1, [r4, #16]
 800c52c:	4648      	mov	r0, r9
 800c52e:	f000 f891 	bl	800c654 <_free_r>
 800c532:	e7b1      	b.n	800c498 <__ssprint_r+0x58>

0800c534 <__ascii_wctomb>:
 800c534:	b149      	cbz	r1, 800c54a <__ascii_wctomb+0x16>
 800c536:	2aff      	cmp	r2, #255	; 0xff
 800c538:	bf85      	ittet	hi
 800c53a:	238a      	movhi	r3, #138	; 0x8a
 800c53c:	6003      	strhi	r3, [r0, #0]
 800c53e:	700a      	strbls	r2, [r1, #0]
 800c540:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800c544:	bf98      	it	ls
 800c546:	2001      	movls	r0, #1
 800c548:	4770      	bx	lr
 800c54a:	4608      	mov	r0, r1
 800c54c:	4770      	bx	lr

0800c54e <_calloc_r>:
 800c54e:	b510      	push	{r4, lr}
 800c550:	4351      	muls	r1, r2
 800c552:	f7ff fa5d 	bl	800ba10 <_malloc_r>
 800c556:	4604      	mov	r4, r0
 800c558:	b198      	cbz	r0, 800c582 <_calloc_r+0x34>
 800c55a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800c55e:	f022 0203 	bic.w	r2, r2, #3
 800c562:	3a04      	subs	r2, #4
 800c564:	2a24      	cmp	r2, #36	; 0x24
 800c566:	d81b      	bhi.n	800c5a0 <_calloc_r+0x52>
 800c568:	2a13      	cmp	r2, #19
 800c56a:	d917      	bls.n	800c59c <_calloc_r+0x4e>
 800c56c:	2100      	movs	r1, #0
 800c56e:	2a1b      	cmp	r2, #27
 800c570:	6001      	str	r1, [r0, #0]
 800c572:	6041      	str	r1, [r0, #4]
 800c574:	d807      	bhi.n	800c586 <_calloc_r+0x38>
 800c576:	f100 0308 	add.w	r3, r0, #8
 800c57a:	2200      	movs	r2, #0
 800c57c:	601a      	str	r2, [r3, #0]
 800c57e:	605a      	str	r2, [r3, #4]
 800c580:	609a      	str	r2, [r3, #8]
 800c582:	4620      	mov	r0, r4
 800c584:	bd10      	pop	{r4, pc}
 800c586:	2a24      	cmp	r2, #36	; 0x24
 800c588:	6081      	str	r1, [r0, #8]
 800c58a:	60c1      	str	r1, [r0, #12]
 800c58c:	bf11      	iteee	ne
 800c58e:	f100 0310 	addne.w	r3, r0, #16
 800c592:	6101      	streq	r1, [r0, #16]
 800c594:	f100 0318 	addeq.w	r3, r0, #24
 800c598:	6141      	streq	r1, [r0, #20]
 800c59a:	e7ee      	b.n	800c57a <_calloc_r+0x2c>
 800c59c:	4603      	mov	r3, r0
 800c59e:	e7ec      	b.n	800c57a <_calloc_r+0x2c>
 800c5a0:	2100      	movs	r1, #0
 800c5a2:	f7fd faaf 	bl	8009b04 <memset>
 800c5a6:	e7ec      	b.n	800c582 <_calloc_r+0x34>

0800c5a8 <_malloc_trim_r>:
 800c5a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c5ac:	4f25      	ldr	r7, [pc, #148]	; (800c644 <_malloc_trim_r+0x9c>)
 800c5ae:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800c650 <_malloc_trim_r+0xa8>
 800c5b2:	4689      	mov	r9, r1
 800c5b4:	4606      	mov	r6, r0
 800c5b6:	f7ff fc57 	bl	800be68 <__malloc_lock>
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	685d      	ldr	r5, [r3, #4]
 800c5be:	f1a8 0411 	sub.w	r4, r8, #17
 800c5c2:	f025 0503 	bic.w	r5, r5, #3
 800c5c6:	eba4 0409 	sub.w	r4, r4, r9
 800c5ca:	442c      	add	r4, r5
 800c5cc:	fbb4 f4f8 	udiv	r4, r4, r8
 800c5d0:	3c01      	subs	r4, #1
 800c5d2:	fb08 f404 	mul.w	r4, r8, r4
 800c5d6:	4544      	cmp	r4, r8
 800c5d8:	da05      	bge.n	800c5e6 <_malloc_trim_r+0x3e>
 800c5da:	4630      	mov	r0, r6
 800c5dc:	f7ff fc4a 	bl	800be74 <__malloc_unlock>
 800c5e0:	2000      	movs	r0, #0
 800c5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c5e6:	2100      	movs	r1, #0
 800c5e8:	4630      	mov	r0, r6
 800c5ea:	f7ff ff19 	bl	800c420 <_sbrk_r>
 800c5ee:	68bb      	ldr	r3, [r7, #8]
 800c5f0:	442b      	add	r3, r5
 800c5f2:	4298      	cmp	r0, r3
 800c5f4:	d1f1      	bne.n	800c5da <_malloc_trim_r+0x32>
 800c5f6:	4261      	negs	r1, r4
 800c5f8:	4630      	mov	r0, r6
 800c5fa:	f7ff ff11 	bl	800c420 <_sbrk_r>
 800c5fe:	3001      	adds	r0, #1
 800c600:	d110      	bne.n	800c624 <_malloc_trim_r+0x7c>
 800c602:	2100      	movs	r1, #0
 800c604:	4630      	mov	r0, r6
 800c606:	f7ff ff0b 	bl	800c420 <_sbrk_r>
 800c60a:	68ba      	ldr	r2, [r7, #8]
 800c60c:	1a83      	subs	r3, r0, r2
 800c60e:	2b0f      	cmp	r3, #15
 800c610:	dde3      	ble.n	800c5da <_malloc_trim_r+0x32>
 800c612:	490d      	ldr	r1, [pc, #52]	; (800c648 <_malloc_trim_r+0xa0>)
 800c614:	6809      	ldr	r1, [r1, #0]
 800c616:	1a40      	subs	r0, r0, r1
 800c618:	490c      	ldr	r1, [pc, #48]	; (800c64c <_malloc_trim_r+0xa4>)
 800c61a:	f043 0301 	orr.w	r3, r3, #1
 800c61e:	6008      	str	r0, [r1, #0]
 800c620:	6053      	str	r3, [r2, #4]
 800c622:	e7da      	b.n	800c5da <_malloc_trim_r+0x32>
 800c624:	68bb      	ldr	r3, [r7, #8]
 800c626:	4a09      	ldr	r2, [pc, #36]	; (800c64c <_malloc_trim_r+0xa4>)
 800c628:	1b2d      	subs	r5, r5, r4
 800c62a:	f045 0501 	orr.w	r5, r5, #1
 800c62e:	605d      	str	r5, [r3, #4]
 800c630:	6813      	ldr	r3, [r2, #0]
 800c632:	4630      	mov	r0, r6
 800c634:	1b1c      	subs	r4, r3, r4
 800c636:	6014      	str	r4, [r2, #0]
 800c638:	f7ff fc1c 	bl	800be74 <__malloc_unlock>
 800c63c:	2001      	movs	r0, #1
 800c63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c642:	bf00      	nop
 800c644:	200003f4 	.word	0x200003f4
 800c648:	200007fc 	.word	0x200007fc
 800c64c:	20000ae0 	.word	0x20000ae0
 800c650:	00000080 	.word	0x00000080

0800c654 <_free_r>:
 800c654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c658:	4604      	mov	r4, r0
 800c65a:	4688      	mov	r8, r1
 800c65c:	2900      	cmp	r1, #0
 800c65e:	f000 80ab 	beq.w	800c7b8 <_free_r+0x164>
 800c662:	f7ff fc01 	bl	800be68 <__malloc_lock>
 800c666:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800c66a:	4d54      	ldr	r5, [pc, #336]	; (800c7bc <_free_r+0x168>)
 800c66c:	f022 0001 	bic.w	r0, r2, #1
 800c670:	f1a8 0308 	sub.w	r3, r8, #8
 800c674:	181f      	adds	r7, r3, r0
 800c676:	68a9      	ldr	r1, [r5, #8]
 800c678:	687e      	ldr	r6, [r7, #4]
 800c67a:	428f      	cmp	r7, r1
 800c67c:	f026 0603 	bic.w	r6, r6, #3
 800c680:	f002 0201 	and.w	r2, r2, #1
 800c684:	d11b      	bne.n	800c6be <_free_r+0x6a>
 800c686:	4430      	add	r0, r6
 800c688:	b93a      	cbnz	r2, 800c69a <_free_r+0x46>
 800c68a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800c68e:	1a9b      	subs	r3, r3, r2
 800c690:	4410      	add	r0, r2
 800c692:	6899      	ldr	r1, [r3, #8]
 800c694:	68da      	ldr	r2, [r3, #12]
 800c696:	60ca      	str	r2, [r1, #12]
 800c698:	6091      	str	r1, [r2, #8]
 800c69a:	f040 0201 	orr.w	r2, r0, #1
 800c69e:	605a      	str	r2, [r3, #4]
 800c6a0:	60ab      	str	r3, [r5, #8]
 800c6a2:	4b47      	ldr	r3, [pc, #284]	; (800c7c0 <_free_r+0x16c>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	4298      	cmp	r0, r3
 800c6a8:	d304      	bcc.n	800c6b4 <_free_r+0x60>
 800c6aa:	4b46      	ldr	r3, [pc, #280]	; (800c7c4 <_free_r+0x170>)
 800c6ac:	4620      	mov	r0, r4
 800c6ae:	6819      	ldr	r1, [r3, #0]
 800c6b0:	f7ff ff7a 	bl	800c5a8 <_malloc_trim_r>
 800c6b4:	4620      	mov	r0, r4
 800c6b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ba:	f7ff bbdb 	b.w	800be74 <__malloc_unlock>
 800c6be:	607e      	str	r6, [r7, #4]
 800c6c0:	2a00      	cmp	r2, #0
 800c6c2:	d139      	bne.n	800c738 <_free_r+0xe4>
 800c6c4:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800c6c8:	1a5b      	subs	r3, r3, r1
 800c6ca:	4408      	add	r0, r1
 800c6cc:	6899      	ldr	r1, [r3, #8]
 800c6ce:	f105 0e08 	add.w	lr, r5, #8
 800c6d2:	4571      	cmp	r1, lr
 800c6d4:	d032      	beq.n	800c73c <_free_r+0xe8>
 800c6d6:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800c6da:	f8c1 e00c 	str.w	lr, [r1, #12]
 800c6de:	f8ce 1008 	str.w	r1, [lr, #8]
 800c6e2:	19b9      	adds	r1, r7, r6
 800c6e4:	6849      	ldr	r1, [r1, #4]
 800c6e6:	07c9      	lsls	r1, r1, #31
 800c6e8:	d40a      	bmi.n	800c700 <_free_r+0xac>
 800c6ea:	4430      	add	r0, r6
 800c6ec:	68b9      	ldr	r1, [r7, #8]
 800c6ee:	bb3a      	cbnz	r2, 800c740 <_free_r+0xec>
 800c6f0:	4e35      	ldr	r6, [pc, #212]	; (800c7c8 <_free_r+0x174>)
 800c6f2:	42b1      	cmp	r1, r6
 800c6f4:	d124      	bne.n	800c740 <_free_r+0xec>
 800c6f6:	616b      	str	r3, [r5, #20]
 800c6f8:	612b      	str	r3, [r5, #16]
 800c6fa:	2201      	movs	r2, #1
 800c6fc:	60d9      	str	r1, [r3, #12]
 800c6fe:	6099      	str	r1, [r3, #8]
 800c700:	f040 0101 	orr.w	r1, r0, #1
 800c704:	6059      	str	r1, [r3, #4]
 800c706:	5018      	str	r0, [r3, r0]
 800c708:	2a00      	cmp	r2, #0
 800c70a:	d1d3      	bne.n	800c6b4 <_free_r+0x60>
 800c70c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800c710:	d21a      	bcs.n	800c748 <_free_r+0xf4>
 800c712:	08c0      	lsrs	r0, r0, #3
 800c714:	1081      	asrs	r1, r0, #2
 800c716:	2201      	movs	r2, #1
 800c718:	408a      	lsls	r2, r1
 800c71a:	6869      	ldr	r1, [r5, #4]
 800c71c:	3001      	adds	r0, #1
 800c71e:	430a      	orrs	r2, r1
 800c720:	606a      	str	r2, [r5, #4]
 800c722:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800c726:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800c72a:	6099      	str	r1, [r3, #8]
 800c72c:	3a08      	subs	r2, #8
 800c72e:	60da      	str	r2, [r3, #12]
 800c730:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800c734:	60cb      	str	r3, [r1, #12]
 800c736:	e7bd      	b.n	800c6b4 <_free_r+0x60>
 800c738:	2200      	movs	r2, #0
 800c73a:	e7d2      	b.n	800c6e2 <_free_r+0x8e>
 800c73c:	2201      	movs	r2, #1
 800c73e:	e7d0      	b.n	800c6e2 <_free_r+0x8e>
 800c740:	68fe      	ldr	r6, [r7, #12]
 800c742:	60ce      	str	r6, [r1, #12]
 800c744:	60b1      	str	r1, [r6, #8]
 800c746:	e7db      	b.n	800c700 <_free_r+0xac>
 800c748:	0a42      	lsrs	r2, r0, #9
 800c74a:	2a04      	cmp	r2, #4
 800c74c:	d813      	bhi.n	800c776 <_free_r+0x122>
 800c74e:	0982      	lsrs	r2, r0, #6
 800c750:	3238      	adds	r2, #56	; 0x38
 800c752:	1c51      	adds	r1, r2, #1
 800c754:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800c758:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800c75c:	428e      	cmp	r6, r1
 800c75e:	d124      	bne.n	800c7aa <_free_r+0x156>
 800c760:	2001      	movs	r0, #1
 800c762:	1092      	asrs	r2, r2, #2
 800c764:	fa00 f202 	lsl.w	r2, r0, r2
 800c768:	6868      	ldr	r0, [r5, #4]
 800c76a:	4302      	orrs	r2, r0
 800c76c:	606a      	str	r2, [r5, #4]
 800c76e:	60de      	str	r6, [r3, #12]
 800c770:	6099      	str	r1, [r3, #8]
 800c772:	60b3      	str	r3, [r6, #8]
 800c774:	e7de      	b.n	800c734 <_free_r+0xe0>
 800c776:	2a14      	cmp	r2, #20
 800c778:	d801      	bhi.n	800c77e <_free_r+0x12a>
 800c77a:	325b      	adds	r2, #91	; 0x5b
 800c77c:	e7e9      	b.n	800c752 <_free_r+0xfe>
 800c77e:	2a54      	cmp	r2, #84	; 0x54
 800c780:	d802      	bhi.n	800c788 <_free_r+0x134>
 800c782:	0b02      	lsrs	r2, r0, #12
 800c784:	326e      	adds	r2, #110	; 0x6e
 800c786:	e7e4      	b.n	800c752 <_free_r+0xfe>
 800c788:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800c78c:	d802      	bhi.n	800c794 <_free_r+0x140>
 800c78e:	0bc2      	lsrs	r2, r0, #15
 800c790:	3277      	adds	r2, #119	; 0x77
 800c792:	e7de      	b.n	800c752 <_free_r+0xfe>
 800c794:	f240 5154 	movw	r1, #1364	; 0x554
 800c798:	428a      	cmp	r2, r1
 800c79a:	bf9a      	itte	ls
 800c79c:	0c82      	lsrls	r2, r0, #18
 800c79e:	327c      	addls	r2, #124	; 0x7c
 800c7a0:	227e      	movhi	r2, #126	; 0x7e
 800c7a2:	e7d6      	b.n	800c752 <_free_r+0xfe>
 800c7a4:	6889      	ldr	r1, [r1, #8]
 800c7a6:	428e      	cmp	r6, r1
 800c7a8:	d004      	beq.n	800c7b4 <_free_r+0x160>
 800c7aa:	684a      	ldr	r2, [r1, #4]
 800c7ac:	f022 0203 	bic.w	r2, r2, #3
 800c7b0:	4290      	cmp	r0, r2
 800c7b2:	d3f7      	bcc.n	800c7a4 <_free_r+0x150>
 800c7b4:	68ce      	ldr	r6, [r1, #12]
 800c7b6:	e7da      	b.n	800c76e <_free_r+0x11a>
 800c7b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7bc:	200003f4 	.word	0x200003f4
 800c7c0:	20000800 	.word	0x20000800
 800c7c4:	20000b10 	.word	0x20000b10
 800c7c8:	200003fc 	.word	0x200003fc

0800c7cc <__retarget_lock_acquire_recursive>:
 800c7cc:	4770      	bx	lr

0800c7ce <__retarget_lock_release_recursive>:
 800c7ce:	4770      	bx	lr

0800c7d0 <memmove>:
 800c7d0:	4288      	cmp	r0, r1
 800c7d2:	b510      	push	{r4, lr}
 800c7d4:	eb01 0302 	add.w	r3, r1, r2
 800c7d8:	d803      	bhi.n	800c7e2 <memmove+0x12>
 800c7da:	1e42      	subs	r2, r0, #1
 800c7dc:	4299      	cmp	r1, r3
 800c7de:	d10c      	bne.n	800c7fa <memmove+0x2a>
 800c7e0:	bd10      	pop	{r4, pc}
 800c7e2:	4298      	cmp	r0, r3
 800c7e4:	d2f9      	bcs.n	800c7da <memmove+0xa>
 800c7e6:	1881      	adds	r1, r0, r2
 800c7e8:	1ad2      	subs	r2, r2, r3
 800c7ea:	42d3      	cmn	r3, r2
 800c7ec:	d100      	bne.n	800c7f0 <memmove+0x20>
 800c7ee:	bd10      	pop	{r4, pc}
 800c7f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c7f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c7f8:	e7f7      	b.n	800c7ea <memmove+0x1a>
 800c7fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7fe:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c802:	e7eb      	b.n	800c7dc <memmove+0xc>

0800c804 <_realloc_r>:
 800c804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c808:	4682      	mov	sl, r0
 800c80a:	460c      	mov	r4, r1
 800c80c:	b929      	cbnz	r1, 800c81a <_realloc_r+0x16>
 800c80e:	4611      	mov	r1, r2
 800c810:	b003      	add	sp, #12
 800c812:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c816:	f7ff b8fb 	b.w	800ba10 <_malloc_r>
 800c81a:	9201      	str	r2, [sp, #4]
 800c81c:	f7ff fb24 	bl	800be68 <__malloc_lock>
 800c820:	9a01      	ldr	r2, [sp, #4]
 800c822:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800c826:	f102 080b 	add.w	r8, r2, #11
 800c82a:	f1b8 0f16 	cmp.w	r8, #22
 800c82e:	f1a4 0908 	sub.w	r9, r4, #8
 800c832:	f025 0603 	bic.w	r6, r5, #3
 800c836:	d90a      	bls.n	800c84e <_realloc_r+0x4a>
 800c838:	f038 0807 	bics.w	r8, r8, #7
 800c83c:	d509      	bpl.n	800c852 <_realloc_r+0x4e>
 800c83e:	230c      	movs	r3, #12
 800c840:	f8ca 3000 	str.w	r3, [sl]
 800c844:	2700      	movs	r7, #0
 800c846:	4638      	mov	r0, r7
 800c848:	b003      	add	sp, #12
 800c84a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c84e:	f04f 0810 	mov.w	r8, #16
 800c852:	4590      	cmp	r8, r2
 800c854:	d3f3      	bcc.n	800c83e <_realloc_r+0x3a>
 800c856:	45b0      	cmp	r8, r6
 800c858:	f340 8145 	ble.w	800cae6 <_realloc_r+0x2e2>
 800c85c:	4ba8      	ldr	r3, [pc, #672]	; (800cb00 <_realloc_r+0x2fc>)
 800c85e:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800c862:	eb09 0106 	add.w	r1, r9, r6
 800c866:	4571      	cmp	r1, lr
 800c868:	469b      	mov	fp, r3
 800c86a:	684b      	ldr	r3, [r1, #4]
 800c86c:	d005      	beq.n	800c87a <_realloc_r+0x76>
 800c86e:	f023 0001 	bic.w	r0, r3, #1
 800c872:	4408      	add	r0, r1
 800c874:	6840      	ldr	r0, [r0, #4]
 800c876:	07c7      	lsls	r7, r0, #31
 800c878:	d447      	bmi.n	800c90a <_realloc_r+0x106>
 800c87a:	f023 0303 	bic.w	r3, r3, #3
 800c87e:	4571      	cmp	r1, lr
 800c880:	eb06 0703 	add.w	r7, r6, r3
 800c884:	d119      	bne.n	800c8ba <_realloc_r+0xb6>
 800c886:	f108 0010 	add.w	r0, r8, #16
 800c88a:	4287      	cmp	r7, r0
 800c88c:	db3f      	blt.n	800c90e <_realloc_r+0x10a>
 800c88e:	eb09 0308 	add.w	r3, r9, r8
 800c892:	eba7 0708 	sub.w	r7, r7, r8
 800c896:	f047 0701 	orr.w	r7, r7, #1
 800c89a:	f8cb 3008 	str.w	r3, [fp, #8]
 800c89e:	605f      	str	r7, [r3, #4]
 800c8a0:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800c8a4:	f003 0301 	and.w	r3, r3, #1
 800c8a8:	ea43 0308 	orr.w	r3, r3, r8
 800c8ac:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8b0:	4650      	mov	r0, sl
 800c8b2:	f7ff fadf 	bl	800be74 <__malloc_unlock>
 800c8b6:	4627      	mov	r7, r4
 800c8b8:	e7c5      	b.n	800c846 <_realloc_r+0x42>
 800c8ba:	45b8      	cmp	r8, r7
 800c8bc:	dc27      	bgt.n	800c90e <_realloc_r+0x10a>
 800c8be:	68cb      	ldr	r3, [r1, #12]
 800c8c0:	688a      	ldr	r2, [r1, #8]
 800c8c2:	60d3      	str	r3, [r2, #12]
 800c8c4:	609a      	str	r2, [r3, #8]
 800c8c6:	eba7 0008 	sub.w	r0, r7, r8
 800c8ca:	280f      	cmp	r0, #15
 800c8cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800c8d0:	eb09 0207 	add.w	r2, r9, r7
 800c8d4:	f240 8109 	bls.w	800caea <_realloc_r+0x2e6>
 800c8d8:	eb09 0108 	add.w	r1, r9, r8
 800c8dc:	f003 0301 	and.w	r3, r3, #1
 800c8e0:	ea43 0308 	orr.w	r3, r3, r8
 800c8e4:	f040 0001 	orr.w	r0, r0, #1
 800c8e8:	f8c9 3004 	str.w	r3, [r9, #4]
 800c8ec:	6048      	str	r0, [r1, #4]
 800c8ee:	6853      	ldr	r3, [r2, #4]
 800c8f0:	f043 0301 	orr.w	r3, r3, #1
 800c8f4:	6053      	str	r3, [r2, #4]
 800c8f6:	3108      	adds	r1, #8
 800c8f8:	4650      	mov	r0, sl
 800c8fa:	f7ff feab 	bl	800c654 <_free_r>
 800c8fe:	4650      	mov	r0, sl
 800c900:	f7ff fab8 	bl	800be74 <__malloc_unlock>
 800c904:	f109 0708 	add.w	r7, r9, #8
 800c908:	e79d      	b.n	800c846 <_realloc_r+0x42>
 800c90a:	2300      	movs	r3, #0
 800c90c:	4619      	mov	r1, r3
 800c90e:	07e8      	lsls	r0, r5, #31
 800c910:	f100 8084 	bmi.w	800ca1c <_realloc_r+0x218>
 800c914:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800c918:	eba9 0505 	sub.w	r5, r9, r5
 800c91c:	6868      	ldr	r0, [r5, #4]
 800c91e:	f020 0003 	bic.w	r0, r0, #3
 800c922:	4430      	add	r0, r6
 800c924:	2900      	cmp	r1, #0
 800c926:	d076      	beq.n	800ca16 <_realloc_r+0x212>
 800c928:	4571      	cmp	r1, lr
 800c92a:	d150      	bne.n	800c9ce <_realloc_r+0x1ca>
 800c92c:	4403      	add	r3, r0
 800c92e:	f108 0110 	add.w	r1, r8, #16
 800c932:	428b      	cmp	r3, r1
 800c934:	db6f      	blt.n	800ca16 <_realloc_r+0x212>
 800c936:	462f      	mov	r7, r5
 800c938:	68ea      	ldr	r2, [r5, #12]
 800c93a:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800c93e:	60ca      	str	r2, [r1, #12]
 800c940:	6091      	str	r1, [r2, #8]
 800c942:	1f32      	subs	r2, r6, #4
 800c944:	2a24      	cmp	r2, #36	; 0x24
 800c946:	d83b      	bhi.n	800c9c0 <_realloc_r+0x1bc>
 800c948:	2a13      	cmp	r2, #19
 800c94a:	d936      	bls.n	800c9ba <_realloc_r+0x1b6>
 800c94c:	6821      	ldr	r1, [r4, #0]
 800c94e:	60a9      	str	r1, [r5, #8]
 800c950:	6861      	ldr	r1, [r4, #4]
 800c952:	60e9      	str	r1, [r5, #12]
 800c954:	2a1b      	cmp	r2, #27
 800c956:	d81c      	bhi.n	800c992 <_realloc_r+0x18e>
 800c958:	f105 0210 	add.w	r2, r5, #16
 800c95c:	f104 0108 	add.w	r1, r4, #8
 800c960:	6808      	ldr	r0, [r1, #0]
 800c962:	6010      	str	r0, [r2, #0]
 800c964:	6848      	ldr	r0, [r1, #4]
 800c966:	6050      	str	r0, [r2, #4]
 800c968:	6889      	ldr	r1, [r1, #8]
 800c96a:	6091      	str	r1, [r2, #8]
 800c96c:	eb05 0208 	add.w	r2, r5, r8
 800c970:	eba3 0308 	sub.w	r3, r3, r8
 800c974:	f043 0301 	orr.w	r3, r3, #1
 800c978:	f8cb 2008 	str.w	r2, [fp, #8]
 800c97c:	6053      	str	r3, [r2, #4]
 800c97e:	686b      	ldr	r3, [r5, #4]
 800c980:	f003 0301 	and.w	r3, r3, #1
 800c984:	ea43 0308 	orr.w	r3, r3, r8
 800c988:	606b      	str	r3, [r5, #4]
 800c98a:	4650      	mov	r0, sl
 800c98c:	f7ff fa72 	bl	800be74 <__malloc_unlock>
 800c990:	e759      	b.n	800c846 <_realloc_r+0x42>
 800c992:	68a1      	ldr	r1, [r4, #8]
 800c994:	6129      	str	r1, [r5, #16]
 800c996:	68e1      	ldr	r1, [r4, #12]
 800c998:	6169      	str	r1, [r5, #20]
 800c99a:	2a24      	cmp	r2, #36	; 0x24
 800c99c:	bf01      	itttt	eq
 800c99e:	6922      	ldreq	r2, [r4, #16]
 800c9a0:	61aa      	streq	r2, [r5, #24]
 800c9a2:	6960      	ldreq	r0, [r4, #20]
 800c9a4:	61e8      	streq	r0, [r5, #28]
 800c9a6:	bf19      	ittee	ne
 800c9a8:	f105 0218 	addne.w	r2, r5, #24
 800c9ac:	f104 0110 	addne.w	r1, r4, #16
 800c9b0:	f105 0220 	addeq.w	r2, r5, #32
 800c9b4:	f104 0118 	addeq.w	r1, r4, #24
 800c9b8:	e7d2      	b.n	800c960 <_realloc_r+0x15c>
 800c9ba:	463a      	mov	r2, r7
 800c9bc:	4621      	mov	r1, r4
 800c9be:	e7cf      	b.n	800c960 <_realloc_r+0x15c>
 800c9c0:	4621      	mov	r1, r4
 800c9c2:	4638      	mov	r0, r7
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	f7ff ff03 	bl	800c7d0 <memmove>
 800c9ca:	9b01      	ldr	r3, [sp, #4]
 800c9cc:	e7ce      	b.n	800c96c <_realloc_r+0x168>
 800c9ce:	18c7      	adds	r7, r0, r3
 800c9d0:	45b8      	cmp	r8, r7
 800c9d2:	dc20      	bgt.n	800ca16 <_realloc_r+0x212>
 800c9d4:	68cb      	ldr	r3, [r1, #12]
 800c9d6:	688a      	ldr	r2, [r1, #8]
 800c9d8:	60d3      	str	r3, [r2, #12]
 800c9da:	609a      	str	r2, [r3, #8]
 800c9dc:	4628      	mov	r0, r5
 800c9de:	68eb      	ldr	r3, [r5, #12]
 800c9e0:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800c9e4:	60d3      	str	r3, [r2, #12]
 800c9e6:	609a      	str	r2, [r3, #8]
 800c9e8:	1f32      	subs	r2, r6, #4
 800c9ea:	2a24      	cmp	r2, #36	; 0x24
 800c9ec:	d842      	bhi.n	800ca74 <_realloc_r+0x270>
 800c9ee:	2a13      	cmp	r2, #19
 800c9f0:	d93e      	bls.n	800ca70 <_realloc_r+0x26c>
 800c9f2:	6823      	ldr	r3, [r4, #0]
 800c9f4:	60ab      	str	r3, [r5, #8]
 800c9f6:	6863      	ldr	r3, [r4, #4]
 800c9f8:	60eb      	str	r3, [r5, #12]
 800c9fa:	2a1b      	cmp	r2, #27
 800c9fc:	d824      	bhi.n	800ca48 <_realloc_r+0x244>
 800c9fe:	f105 0010 	add.w	r0, r5, #16
 800ca02:	f104 0308 	add.w	r3, r4, #8
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	6002      	str	r2, [r0, #0]
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	6042      	str	r2, [r0, #4]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	6083      	str	r3, [r0, #8]
 800ca12:	46a9      	mov	r9, r5
 800ca14:	e757      	b.n	800c8c6 <_realloc_r+0xc2>
 800ca16:	4580      	cmp	r8, r0
 800ca18:	4607      	mov	r7, r0
 800ca1a:	dddf      	ble.n	800c9dc <_realloc_r+0x1d8>
 800ca1c:	4611      	mov	r1, r2
 800ca1e:	4650      	mov	r0, sl
 800ca20:	f7fe fff6 	bl	800ba10 <_malloc_r>
 800ca24:	4607      	mov	r7, r0
 800ca26:	2800      	cmp	r0, #0
 800ca28:	d0af      	beq.n	800c98a <_realloc_r+0x186>
 800ca2a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ca2e:	f023 0301 	bic.w	r3, r3, #1
 800ca32:	f1a0 0208 	sub.w	r2, r0, #8
 800ca36:	444b      	add	r3, r9
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d11f      	bne.n	800ca7c <_realloc_r+0x278>
 800ca3c:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800ca40:	f027 0703 	bic.w	r7, r7, #3
 800ca44:	4437      	add	r7, r6
 800ca46:	e73e      	b.n	800c8c6 <_realloc_r+0xc2>
 800ca48:	68a3      	ldr	r3, [r4, #8]
 800ca4a:	612b      	str	r3, [r5, #16]
 800ca4c:	68e3      	ldr	r3, [r4, #12]
 800ca4e:	616b      	str	r3, [r5, #20]
 800ca50:	2a24      	cmp	r2, #36	; 0x24
 800ca52:	bf01      	itttt	eq
 800ca54:	6923      	ldreq	r3, [r4, #16]
 800ca56:	61ab      	streq	r3, [r5, #24]
 800ca58:	6962      	ldreq	r2, [r4, #20]
 800ca5a:	61ea      	streq	r2, [r5, #28]
 800ca5c:	bf19      	ittee	ne
 800ca5e:	f105 0018 	addne.w	r0, r5, #24
 800ca62:	f104 0310 	addne.w	r3, r4, #16
 800ca66:	f105 0020 	addeq.w	r0, r5, #32
 800ca6a:	f104 0318 	addeq.w	r3, r4, #24
 800ca6e:	e7ca      	b.n	800ca06 <_realloc_r+0x202>
 800ca70:	4623      	mov	r3, r4
 800ca72:	e7c8      	b.n	800ca06 <_realloc_r+0x202>
 800ca74:	4621      	mov	r1, r4
 800ca76:	f7ff feab 	bl	800c7d0 <memmove>
 800ca7a:	e7ca      	b.n	800ca12 <_realloc_r+0x20e>
 800ca7c:	1f32      	subs	r2, r6, #4
 800ca7e:	2a24      	cmp	r2, #36	; 0x24
 800ca80:	d82d      	bhi.n	800cade <_realloc_r+0x2da>
 800ca82:	2a13      	cmp	r2, #19
 800ca84:	d928      	bls.n	800cad8 <_realloc_r+0x2d4>
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	6003      	str	r3, [r0, #0]
 800ca8a:	6863      	ldr	r3, [r4, #4]
 800ca8c:	6043      	str	r3, [r0, #4]
 800ca8e:	2a1b      	cmp	r2, #27
 800ca90:	d80e      	bhi.n	800cab0 <_realloc_r+0x2ac>
 800ca92:	f100 0308 	add.w	r3, r0, #8
 800ca96:	f104 0208 	add.w	r2, r4, #8
 800ca9a:	6811      	ldr	r1, [r2, #0]
 800ca9c:	6019      	str	r1, [r3, #0]
 800ca9e:	6851      	ldr	r1, [r2, #4]
 800caa0:	6059      	str	r1, [r3, #4]
 800caa2:	6892      	ldr	r2, [r2, #8]
 800caa4:	609a      	str	r2, [r3, #8]
 800caa6:	4621      	mov	r1, r4
 800caa8:	4650      	mov	r0, sl
 800caaa:	f7ff fdd3 	bl	800c654 <_free_r>
 800caae:	e76c      	b.n	800c98a <_realloc_r+0x186>
 800cab0:	68a3      	ldr	r3, [r4, #8]
 800cab2:	6083      	str	r3, [r0, #8]
 800cab4:	68e3      	ldr	r3, [r4, #12]
 800cab6:	60c3      	str	r3, [r0, #12]
 800cab8:	2a24      	cmp	r2, #36	; 0x24
 800caba:	bf01      	itttt	eq
 800cabc:	6923      	ldreq	r3, [r4, #16]
 800cabe:	6103      	streq	r3, [r0, #16]
 800cac0:	6961      	ldreq	r1, [r4, #20]
 800cac2:	6141      	streq	r1, [r0, #20]
 800cac4:	bf19      	ittee	ne
 800cac6:	f100 0310 	addne.w	r3, r0, #16
 800caca:	f104 0210 	addne.w	r2, r4, #16
 800cace:	f100 0318 	addeq.w	r3, r0, #24
 800cad2:	f104 0218 	addeq.w	r2, r4, #24
 800cad6:	e7e0      	b.n	800ca9a <_realloc_r+0x296>
 800cad8:	4603      	mov	r3, r0
 800cada:	4622      	mov	r2, r4
 800cadc:	e7dd      	b.n	800ca9a <_realloc_r+0x296>
 800cade:	4621      	mov	r1, r4
 800cae0:	f7ff fe76 	bl	800c7d0 <memmove>
 800cae4:	e7df      	b.n	800caa6 <_realloc_r+0x2a2>
 800cae6:	4637      	mov	r7, r6
 800cae8:	e6ed      	b.n	800c8c6 <_realloc_r+0xc2>
 800caea:	f003 0301 	and.w	r3, r3, #1
 800caee:	431f      	orrs	r7, r3
 800caf0:	f8c9 7004 	str.w	r7, [r9, #4]
 800caf4:	6853      	ldr	r3, [r2, #4]
 800caf6:	f043 0301 	orr.w	r3, r3, #1
 800cafa:	6053      	str	r3, [r2, #4]
 800cafc:	e6ff      	b.n	800c8fe <_realloc_r+0xfa>
 800cafe:	bf00      	nop
 800cb00:	200003f4 	.word	0x200003f4
 800cb04:	00000000 	.word	0x00000000

0800cb08 <exp>:
 800cb08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb0a:	ed2d 8b02 	vpush	{d8}
 800cb0e:	4e38      	ldr	r6, [pc, #224]	; (800cbf0 <exp+0xe8>)
 800cb10:	b08b      	sub	sp, #44	; 0x2c
 800cb12:	ec55 4b10 	vmov	r4, r5, d0
 800cb16:	f000 f873 	bl	800cc00 <__ieee754_exp>
 800cb1a:	f996 3000 	ldrsb.w	r3, [r6]
 800cb1e:	eeb0 8a40 	vmov.f32	s16, s0
 800cb22:	eef0 8a60 	vmov.f32	s17, s1
 800cb26:	3301      	adds	r3, #1
 800cb28:	d02c      	beq.n	800cb84 <exp+0x7c>
 800cb2a:	ec45 4b10 	vmov	d0, r4, r5
 800cb2e:	f000 f9d9 	bl	800cee4 <finite>
 800cb32:	b338      	cbz	r0, 800cb84 <exp+0x7c>
 800cb34:	a32a      	add	r3, pc, #168	; (adr r3, 800cbe0 <exp+0xd8>)
 800cb36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb3a:	4620      	mov	r0, r4
 800cb3c:	4629      	mov	r1, r5
 800cb3e:	f7f3 ffef 	bl	8000b20 <__aeabi_dcmpgt>
 800cb42:	4607      	mov	r7, r0
 800cb44:	2800      	cmp	r0, #0
 800cb46:	d030      	beq.n	800cbaa <exp+0xa2>
 800cb48:	2303      	movs	r3, #3
 800cb4a:	9300      	str	r3, [sp, #0]
 800cb4c:	4b29      	ldr	r3, [pc, #164]	; (800cbf4 <exp+0xec>)
 800cb4e:	9301      	str	r3, [sp, #4]
 800cb50:	2300      	movs	r3, #0
 800cb52:	9308      	str	r3, [sp, #32]
 800cb54:	f996 3000 	ldrsb.w	r3, [r6]
 800cb58:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800cb5c:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cb60:	b9c3      	cbnz	r3, 800cb94 <exp+0x8c>
 800cb62:	4b25      	ldr	r3, [pc, #148]	; (800cbf8 <exp+0xf0>)
 800cb64:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800cb68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cb6c:	4668      	mov	r0, sp
 800cb6e:	f000 f9c1 	bl	800cef4 <matherr>
 800cb72:	b1a8      	cbz	r0, 800cba0 <exp+0x98>
 800cb74:	9b08      	ldr	r3, [sp, #32]
 800cb76:	b11b      	cbz	r3, 800cb80 <exp+0x78>
 800cb78:	f7fc ff80 	bl	8009a7c <__errno>
 800cb7c:	9b08      	ldr	r3, [sp, #32]
 800cb7e:	6003      	str	r3, [r0, #0]
 800cb80:	ed9d 8b06 	vldr	d8, [sp, #24]
 800cb84:	eeb0 0a48 	vmov.f32	s0, s16
 800cb88:	eef0 0a68 	vmov.f32	s1, s17
 800cb8c:	b00b      	add	sp, #44	; 0x2c
 800cb8e:	ecbd 8b02 	vpop	{d8}
 800cb92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb94:	4919      	ldr	r1, [pc, #100]	; (800cbfc <exp+0xf4>)
 800cb96:	2000      	movs	r0, #0
 800cb98:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d1e5      	bne.n	800cb6c <exp+0x64>
 800cba0:	f7fc ff6c 	bl	8009a7c <__errno>
 800cba4:	2322      	movs	r3, #34	; 0x22
 800cba6:	6003      	str	r3, [r0, #0]
 800cba8:	e7e4      	b.n	800cb74 <exp+0x6c>
 800cbaa:	a30f      	add	r3, pc, #60	; (adr r3, 800cbe8 <exp+0xe0>)
 800cbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbb0:	4620      	mov	r0, r4
 800cbb2:	4629      	mov	r1, r5
 800cbb4:	f7f3 ff96 	bl	8000ae4 <__aeabi_dcmplt>
 800cbb8:	2800      	cmp	r0, #0
 800cbba:	d0e3      	beq.n	800cb84 <exp+0x7c>
 800cbbc:	2304      	movs	r3, #4
 800cbbe:	9300      	str	r3, [sp, #0]
 800cbc0:	4b0c      	ldr	r3, [pc, #48]	; (800cbf4 <exp+0xec>)
 800cbc2:	9301      	str	r3, [sp, #4]
 800cbc4:	2200      	movs	r2, #0
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800cbcc:	9708      	str	r7, [sp, #32]
 800cbce:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800cbd2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800cbd6:	f996 3000 	ldrsb.w	r3, [r6]
 800cbda:	e7df      	b.n	800cb9c <exp+0x94>
 800cbdc:	f3af 8000 	nop.w
 800cbe0:	fefa39ef 	.word	0xfefa39ef
 800cbe4:	40862e42 	.word	0x40862e42
 800cbe8:	d52d3051 	.word	0xd52d3051
 800cbec:	c0874910 	.word	0xc0874910
 800cbf0:	20000804 	.word	0x20000804
 800cbf4:	0800da65 	.word	0x0800da65
 800cbf8:	47efffff 	.word	0x47efffff
 800cbfc:	7ff00000 	.word	0x7ff00000

0800cc00 <__ieee754_exp>:
 800cc00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc04:	ec55 4b10 	vmov	r4, r5, d0
 800cc08:	4aad      	ldr	r2, [pc, #692]	; (800cec0 <__ieee754_exp+0x2c0>)
 800cc0a:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800cc0e:	4297      	cmp	r7, r2
 800cc10:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800cc14:	f240 80af 	bls.w	800cd76 <__ieee754_exp+0x176>
 800cc18:	4aaa      	ldr	r2, [pc, #680]	; (800cec4 <__ieee754_exp+0x2c4>)
 800cc1a:	4297      	cmp	r7, r2
 800cc1c:	d915      	bls.n	800cc4a <__ieee754_exp+0x4a>
 800cc1e:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800cc22:	4323      	orrs	r3, r4
 800cc24:	d009      	beq.n	800cc3a <__ieee754_exp+0x3a>
 800cc26:	ee10 2a10 	vmov	r2, s0
 800cc2a:	462b      	mov	r3, r5
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	4629      	mov	r1, r5
 800cc30:	f7f3 fb34 	bl	800029c <__adddf3>
 800cc34:	4604      	mov	r4, r0
 800cc36:	460d      	mov	r5, r1
 800cc38:	e002      	b.n	800cc40 <__ieee754_exp+0x40>
 800cc3a:	b10e      	cbz	r6, 800cc40 <__ieee754_exp+0x40>
 800cc3c:	2400      	movs	r4, #0
 800cc3e:	2500      	movs	r5, #0
 800cc40:	ec45 4b10 	vmov	d0, r4, r5
 800cc44:	b003      	add	sp, #12
 800cc46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc4a:	a387      	add	r3, pc, #540	; (adr r3, 800ce68 <__ieee754_exp+0x268>)
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	ee10 0a10 	vmov	r0, s0
 800cc54:	4629      	mov	r1, r5
 800cc56:	f7f3 ff63 	bl	8000b20 <__aeabi_dcmpgt>
 800cc5a:	b138      	cbz	r0, 800cc6c <__ieee754_exp+0x6c>
 800cc5c:	a384      	add	r3, pc, #528	; (adr r3, 800ce70 <__ieee754_exp+0x270>)
 800cc5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc62:	4610      	mov	r0, r2
 800cc64:	4619      	mov	r1, r3
 800cc66:	f7f3 fccb 	bl	8000600 <__aeabi_dmul>
 800cc6a:	e7e3      	b.n	800cc34 <__ieee754_exp+0x34>
 800cc6c:	a382      	add	r3, pc, #520	; (adr r3, 800ce78 <__ieee754_exp+0x278>)
 800cc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc72:	4620      	mov	r0, r4
 800cc74:	4629      	mov	r1, r5
 800cc76:	f7f3 ff35 	bl	8000ae4 <__aeabi_dcmplt>
 800cc7a:	2800      	cmp	r0, #0
 800cc7c:	d1de      	bne.n	800cc3c <__ieee754_exp+0x3c>
 800cc7e:	4b92      	ldr	r3, [pc, #584]	; (800cec8 <__ieee754_exp+0x2c8>)
 800cc80:	429f      	cmp	r7, r3
 800cc82:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 800cc86:	f200 808e 	bhi.w	800cda6 <__ieee754_exp+0x1a6>
 800cc8a:	4b90      	ldr	r3, [pc, #576]	; (800cecc <__ieee754_exp+0x2cc>)
 800cc8c:	443b      	add	r3, r7
 800cc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc92:	4620      	mov	r0, r4
 800cc94:	4629      	mov	r1, r5
 800cc96:	f7f3 faff 	bl	8000298 <__aeabi_dsub>
 800cc9a:	4b8d      	ldr	r3, [pc, #564]	; (800ced0 <__ieee754_exp+0x2d0>)
 800cc9c:	441f      	add	r7, r3
 800cc9e:	ed97 7b00 	vldr	d7, [r7]
 800cca2:	ed8d 7b00 	vstr	d7, [sp]
 800cca6:	4682      	mov	sl, r0
 800cca8:	f1c6 0001 	rsb	r0, r6, #1
 800ccac:	468b      	mov	fp, r1
 800ccae:	1b86      	subs	r6, r0, r6
 800ccb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccb4:	4650      	mov	r0, sl
 800ccb6:	4659      	mov	r1, fp
 800ccb8:	f7f3 faee 	bl	8000298 <__aeabi_dsub>
 800ccbc:	4604      	mov	r4, r0
 800ccbe:	460d      	mov	r5, r1
 800ccc0:	4622      	mov	r2, r4
 800ccc2:	462b      	mov	r3, r5
 800ccc4:	4620      	mov	r0, r4
 800ccc6:	4629      	mov	r1, r5
 800ccc8:	f7f3 fc9a 	bl	8000600 <__aeabi_dmul>
 800cccc:	a36c      	add	r3, pc, #432	; (adr r3, 800ce80 <__ieee754_exp+0x280>)
 800ccce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccd2:	4680      	mov	r8, r0
 800ccd4:	4689      	mov	r9, r1
 800ccd6:	f7f3 fc93 	bl	8000600 <__aeabi_dmul>
 800ccda:	a36b      	add	r3, pc, #428	; (adr r3, 800ce88 <__ieee754_exp+0x288>)
 800ccdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce0:	f7f3 fada 	bl	8000298 <__aeabi_dsub>
 800cce4:	4642      	mov	r2, r8
 800cce6:	464b      	mov	r3, r9
 800cce8:	f7f3 fc8a 	bl	8000600 <__aeabi_dmul>
 800ccec:	a368      	add	r3, pc, #416	; (adr r3, 800ce90 <__ieee754_exp+0x290>)
 800ccee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccf2:	f7f3 fad3 	bl	800029c <__adddf3>
 800ccf6:	4642      	mov	r2, r8
 800ccf8:	464b      	mov	r3, r9
 800ccfa:	f7f3 fc81 	bl	8000600 <__aeabi_dmul>
 800ccfe:	a366      	add	r3, pc, #408	; (adr r3, 800ce98 <__ieee754_exp+0x298>)
 800cd00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd04:	f7f3 fac8 	bl	8000298 <__aeabi_dsub>
 800cd08:	4642      	mov	r2, r8
 800cd0a:	464b      	mov	r3, r9
 800cd0c:	f7f3 fc78 	bl	8000600 <__aeabi_dmul>
 800cd10:	a363      	add	r3, pc, #396	; (adr r3, 800cea0 <__ieee754_exp+0x2a0>)
 800cd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd16:	f7f3 fac1 	bl	800029c <__adddf3>
 800cd1a:	4642      	mov	r2, r8
 800cd1c:	464b      	mov	r3, r9
 800cd1e:	f7f3 fc6f 	bl	8000600 <__aeabi_dmul>
 800cd22:	4602      	mov	r2, r0
 800cd24:	460b      	mov	r3, r1
 800cd26:	4620      	mov	r0, r4
 800cd28:	4629      	mov	r1, r5
 800cd2a:	f7f3 fab5 	bl	8000298 <__aeabi_dsub>
 800cd2e:	4680      	mov	r8, r0
 800cd30:	4689      	mov	r9, r1
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	4620      	mov	r0, r4
 800cd38:	4629      	mov	r1, r5
 800cd3a:	2e00      	cmp	r6, #0
 800cd3c:	d162      	bne.n	800ce04 <__ieee754_exp+0x204>
 800cd3e:	f7f3 fc5f 	bl	8000600 <__aeabi_dmul>
 800cd42:	2200      	movs	r2, #0
 800cd44:	4606      	mov	r6, r0
 800cd46:	460f      	mov	r7, r1
 800cd48:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cd4c:	4640      	mov	r0, r8
 800cd4e:	4649      	mov	r1, r9
 800cd50:	f7f3 faa2 	bl	8000298 <__aeabi_dsub>
 800cd54:	4602      	mov	r2, r0
 800cd56:	460b      	mov	r3, r1
 800cd58:	4630      	mov	r0, r6
 800cd5a:	4639      	mov	r1, r7
 800cd5c:	f7f3 fd7a 	bl	8000854 <__aeabi_ddiv>
 800cd60:	4622      	mov	r2, r4
 800cd62:	462b      	mov	r3, r5
 800cd64:	f7f3 fa98 	bl	8000298 <__aeabi_dsub>
 800cd68:	4602      	mov	r2, r0
 800cd6a:	460b      	mov	r3, r1
 800cd6c:	2000      	movs	r0, #0
 800cd6e:	4959      	ldr	r1, [pc, #356]	; (800ced4 <__ieee754_exp+0x2d4>)
 800cd70:	f7f3 fa92 	bl	8000298 <__aeabi_dsub>
 800cd74:	e75e      	b.n	800cc34 <__ieee754_exp+0x34>
 800cd76:	4b58      	ldr	r3, [pc, #352]	; (800ced8 <__ieee754_exp+0x2d8>)
 800cd78:	429f      	cmp	r7, r3
 800cd7a:	d880      	bhi.n	800cc7e <__ieee754_exp+0x7e>
 800cd7c:	4b57      	ldr	r3, [pc, #348]	; (800cedc <__ieee754_exp+0x2dc>)
 800cd7e:	429f      	cmp	r7, r3
 800cd80:	d83c      	bhi.n	800cdfc <__ieee754_exp+0x1fc>
 800cd82:	a33b      	add	r3, pc, #236	; (adr r3, 800ce70 <__ieee754_exp+0x270>)
 800cd84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd88:	ee10 0a10 	vmov	r0, s0
 800cd8c:	4629      	mov	r1, r5
 800cd8e:	f7f3 fa85 	bl	800029c <__adddf3>
 800cd92:	2200      	movs	r2, #0
 800cd94:	4b4f      	ldr	r3, [pc, #316]	; (800ced4 <__ieee754_exp+0x2d4>)
 800cd96:	f7f3 fec3 	bl	8000b20 <__aeabi_dcmpgt>
 800cd9a:	b388      	cbz	r0, 800ce00 <__ieee754_exp+0x200>
 800cd9c:	2200      	movs	r2, #0
 800cd9e:	4b4d      	ldr	r3, [pc, #308]	; (800ced4 <__ieee754_exp+0x2d4>)
 800cda0:	4620      	mov	r0, r4
 800cda2:	4629      	mov	r1, r5
 800cda4:	e744      	b.n	800cc30 <__ieee754_exp+0x30>
 800cda6:	4e4e      	ldr	r6, [pc, #312]	; (800cee0 <__ieee754_exp+0x2e0>)
 800cda8:	a33f      	add	r3, pc, #252	; (adr r3, 800cea8 <__ieee754_exp+0x2a8>)
 800cdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdae:	443e      	add	r6, r7
 800cdb0:	4620      	mov	r0, r4
 800cdb2:	4629      	mov	r1, r5
 800cdb4:	f7f3 fc24 	bl	8000600 <__aeabi_dmul>
 800cdb8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cdbc:	f7f3 fa6e 	bl	800029c <__adddf3>
 800cdc0:	f7f3 fece 	bl	8000b60 <__aeabi_d2iz>
 800cdc4:	4606      	mov	r6, r0
 800cdc6:	f7f3 fbb5 	bl	8000534 <__aeabi_i2d>
 800cdca:	a339      	add	r3, pc, #228	; (adr r3, 800ceb0 <__ieee754_exp+0x2b0>)
 800cdcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdd0:	4680      	mov	r8, r0
 800cdd2:	4689      	mov	r9, r1
 800cdd4:	f7f3 fc14 	bl	8000600 <__aeabi_dmul>
 800cdd8:	4602      	mov	r2, r0
 800cdda:	460b      	mov	r3, r1
 800cddc:	4620      	mov	r0, r4
 800cdde:	4629      	mov	r1, r5
 800cde0:	f7f3 fa5a 	bl	8000298 <__aeabi_dsub>
 800cde4:	a334      	add	r3, pc, #208	; (adr r3, 800ceb8 <__ieee754_exp+0x2b8>)
 800cde6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdea:	4682      	mov	sl, r0
 800cdec:	468b      	mov	fp, r1
 800cdee:	4640      	mov	r0, r8
 800cdf0:	4649      	mov	r1, r9
 800cdf2:	f7f3 fc05 	bl	8000600 <__aeabi_dmul>
 800cdf6:	e9cd 0100 	strd	r0, r1, [sp]
 800cdfa:	e759      	b.n	800ccb0 <__ieee754_exp+0xb0>
 800cdfc:	2600      	movs	r6, #0
 800cdfe:	e75f      	b.n	800ccc0 <__ieee754_exp+0xc0>
 800ce00:	4606      	mov	r6, r0
 800ce02:	e75d      	b.n	800ccc0 <__ieee754_exp+0xc0>
 800ce04:	f7f3 fbfc 	bl	8000600 <__aeabi_dmul>
 800ce08:	4642      	mov	r2, r8
 800ce0a:	4604      	mov	r4, r0
 800ce0c:	460d      	mov	r5, r1
 800ce0e:	464b      	mov	r3, r9
 800ce10:	2000      	movs	r0, #0
 800ce12:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800ce16:	f7f3 fa3f 	bl	8000298 <__aeabi_dsub>
 800ce1a:	4602      	mov	r2, r0
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	4620      	mov	r0, r4
 800ce20:	4629      	mov	r1, r5
 800ce22:	f7f3 fd17 	bl	8000854 <__aeabi_ddiv>
 800ce26:	4602      	mov	r2, r0
 800ce28:	460b      	mov	r3, r1
 800ce2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ce2e:	f7f3 fa33 	bl	8000298 <__aeabi_dsub>
 800ce32:	4652      	mov	r2, sl
 800ce34:	465b      	mov	r3, fp
 800ce36:	f7f3 fa2f 	bl	8000298 <__aeabi_dsub>
 800ce3a:	460b      	mov	r3, r1
 800ce3c:	4602      	mov	r2, r0
 800ce3e:	4925      	ldr	r1, [pc, #148]	; (800ced4 <__ieee754_exp+0x2d4>)
 800ce40:	2000      	movs	r0, #0
 800ce42:	f7f3 fa29 	bl	8000298 <__aeabi_dsub>
 800ce46:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 800ce4a:	429e      	cmp	r6, r3
 800ce4c:	db02      	blt.n	800ce54 <__ieee754_exp+0x254>
 800ce4e:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 800ce52:	e6ef      	b.n	800cc34 <__ieee754_exp+0x34>
 800ce54:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 800ce58:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 800ce5c:	2200      	movs	r2, #0
 800ce5e:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800ce62:	e700      	b.n	800cc66 <__ieee754_exp+0x66>
 800ce64:	f3af 8000 	nop.w
 800ce68:	fefa39ef 	.word	0xfefa39ef
 800ce6c:	40862e42 	.word	0x40862e42
 800ce70:	8800759c 	.word	0x8800759c
 800ce74:	7e37e43c 	.word	0x7e37e43c
 800ce78:	d52d3051 	.word	0xd52d3051
 800ce7c:	c0874910 	.word	0xc0874910
 800ce80:	72bea4d0 	.word	0x72bea4d0
 800ce84:	3e663769 	.word	0x3e663769
 800ce88:	c5d26bf1 	.word	0xc5d26bf1
 800ce8c:	3ebbbd41 	.word	0x3ebbbd41
 800ce90:	af25de2c 	.word	0xaf25de2c
 800ce94:	3f11566a 	.word	0x3f11566a
 800ce98:	16bebd93 	.word	0x16bebd93
 800ce9c:	3f66c16c 	.word	0x3f66c16c
 800cea0:	5555553e 	.word	0x5555553e
 800cea4:	3fc55555 	.word	0x3fc55555
 800cea8:	652b82fe 	.word	0x652b82fe
 800ceac:	3ff71547 	.word	0x3ff71547
 800ceb0:	fee00000 	.word	0xfee00000
 800ceb4:	3fe62e42 	.word	0x3fe62e42
 800ceb8:	35793c76 	.word	0x35793c76
 800cebc:	3dea39ef 	.word	0x3dea39ef
 800cec0:	40862e41 	.word	0x40862e41
 800cec4:	7fefffff 	.word	0x7fefffff
 800cec8:	3ff0a2b1 	.word	0x3ff0a2b1
 800cecc:	0800da80 	.word	0x0800da80
 800ced0:	0800da90 	.word	0x0800da90
 800ced4:	3ff00000 	.word	0x3ff00000
 800ced8:	3fd62e42 	.word	0x3fd62e42
 800cedc:	3e2fffff 	.word	0x3e2fffff
 800cee0:	0800da70 	.word	0x0800da70

0800cee4 <finite>:
 800cee4:	ee10 3a90 	vmov	r3, s1
 800cee8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800ceec:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800cef0:	0fc0      	lsrs	r0, r0, #31
 800cef2:	4770      	bx	lr

0800cef4 <matherr>:
 800cef4:	2000      	movs	r0, #0
 800cef6:	4770      	bx	lr

0800cef8 <_init>:
 800cef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cefa:	bf00      	nop
 800cefc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cefe:	bc08      	pop	{r3}
 800cf00:	469e      	mov	lr, r3
 800cf02:	4770      	bx	lr

0800cf04 <_fini>:
 800cf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf06:	bf00      	nop
 800cf08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf0a:	bc08      	pop	{r3}
 800cf0c:	469e      	mov	lr, r3
 800cf0e:	4770      	bx	lr
