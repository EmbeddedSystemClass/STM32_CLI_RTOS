
STM32_CLI_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b110  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  0800b2b0  0800b2b0  0001b2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800bc80  0800bc80  0001bc80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800bc88  0800bc88  0001bc88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800bc8c  0800bc8c  0001bc8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000007ac  20000000  0800bc90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000918  200007ac  0800c43c  000207ac  2**2
                  ALLOC
  8 ._user_heap_stack 00003000  200010c4  0800c43c  000210c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000207ac  2**0
                  CONTENTS, READONLY
 10 .debug_info   00016acb  00000000  00000000  000207dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002f89  00000000  00000000  000372a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000012a0  00000000  00000000  0003a230  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001120  00000000  00000000  0003b4d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000a620  00000000  00000000  0003c5f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000059ac  00000000  00000000  00046c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0004c5bc  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00005874  00000000  00000000  0004c638  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200007ac 	.word	0x200007ac
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b298 	.word	0x0800b298

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200007b0 	.word	0x200007b0
 80001dc:	0800b298 	.word	0x0800b298

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b97a 	b.w	8000ebc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	468c      	mov	ip, r1
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	9e08      	ldr	r6, [sp, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d151      	bne.n	8000c94 <__udivmoddi4+0xb4>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d96d      	bls.n	8000cd2 <__udivmoddi4+0xf2>
 8000bf6:	fab2 fe82 	clz	lr, r2
 8000bfa:	f1be 0f00 	cmp.w	lr, #0
 8000bfe:	d00b      	beq.n	8000c18 <__udivmoddi4+0x38>
 8000c00:	f1ce 0c20 	rsb	ip, lr, #32
 8000c04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c1c:	0c25      	lsrs	r5, r4, #16
 8000c1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c22:	fa1f f987 	uxth.w	r9, r7
 8000c26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c2e:	fb08 f309 	mul.w	r3, r8, r9
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x6c>
 8000c36:	19ed      	adds	r5, r5, r7
 8000c38:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8123 	bcs.w	8000e86 <__udivmoddi4+0x2a6>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	f240 8120 	bls.w	8000e86 <__udivmoddi4+0x2a6>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	443d      	add	r5, r7
 8000c4c:	1aed      	subs	r5, r5, r3
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb00 f909 	mul.w	r9, r0, r9
 8000c60:	45a1      	cmp	r9, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x98>
 8000c64:	19e4      	adds	r4, r4, r7
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 810a 	bcs.w	8000e82 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8107 	bls.w	8000e82 <__udivmoddi4+0x2a2>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	eba4 0409 	sub.w	r4, r4, r9
 8000c7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c80:	2100      	movs	r1, #0
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d061      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000c86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6034      	str	r4, [r6, #0]
 8000c8e:	6073      	str	r3, [r6, #4]
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xc8>
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d054      	beq.n	8000d46 <__udivmoddi4+0x166>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	f040 808e 	bne.w	8000dce <__udivmoddi4+0x1ee>
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xdc>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2d0>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	46ac      	mov	ip, r5
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d03f      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000cca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b912      	cbnz	r2, 8000cda <__udivmoddi4+0xfa>
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cda:	fab7 fe87 	clz	lr, r7
 8000cde:	f1be 0f00 	cmp.w	lr, #0
 8000ce2:	d134      	bne.n	8000d4e <__udivmoddi4+0x16e>
 8000ce4:	1beb      	subs	r3, r5, r7
 8000ce6:	0c3a      	lsrs	r2, r7, #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cf2:	0c25      	lsrs	r5, r4, #16
 8000cf4:	fb02 3318 	mls	r3, r2, r8, r3
 8000cf8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfc:	fb0c f308 	mul.w	r3, ip, r8
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x134>
 8000d04:	19ed      	adds	r5, r5, r7
 8000d06:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x132>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	f200 80d1 	bhi.w	8000eb4 <__udivmoddi4+0x2d4>
 8000d12:	4680      	mov	r8, r0
 8000d14:	1aed      	subs	r5, r5, r3
 8000d16:	b2a3      	uxth	r3, r4
 8000d18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d24:	fb0c fc00 	mul.w	ip, ip, r0
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x15c>
 8000d2c:	19e4      	adds	r4, r4, r7
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x15a>
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	f200 80b8 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d44:	e79d      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1ce 0420 	rsb	r4, lr, #32
 8000d52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d5e:	0c3a      	lsrs	r2, r7, #16
 8000d60:	fa25 f404 	lsr.w	r4, r5, r4
 8000d64:	ea48 0803 	orr.w	r8, r8, r3
 8000d68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d70:	fb02 4411 	mls	r4, r2, r1, r4
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x1bc>
 8000d88:	19ed      	adds	r5, r5, r7
 8000d8a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d8e:	f080 808a 	bcs.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	f240 8087 	bls.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d98:	3902      	subs	r1, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aeb      	subs	r3, r5, r3
 8000d9e:	fa1f f588 	uxth.w	r5, r8
 8000da2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000da6:	fb02 3310 	mls	r3, r2, r0, r3
 8000daa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dae:	fb00 f30c 	mul.w	r3, r0, ip
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1e6>
 8000db6:	19ed      	adds	r5, r5, r7
 8000db8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dbc:	d26f      	bcs.n	8000e9e <__udivmoddi4+0x2be>
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d96d      	bls.n	8000e9e <__udivmoddi4+0x2be>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	1aeb      	subs	r3, r5, r3
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	e78f      	b.n	8000cee <__udivmoddi4+0x10e>
 8000dce:	f1c1 0720 	rsb	r7, r1, #32
 8000dd2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dd6:	408b      	lsls	r3, r1
 8000dd8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ddc:	ea48 0303 	orr.w	r3, r8, r3
 8000de0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000de4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000df2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000df6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dfa:	fa1f f883 	uxth.w	r8, r3
 8000dfe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e02:	fb09 f408 	mul.w	r4, r9, r8
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x244>
 8000e12:	18ed      	adds	r5, r5, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	d243      	bcs.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	d941      	bls.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e22:	441d      	add	r5, r3
 8000e24:	1b2d      	subs	r5, r5, r4
 8000e26:	fa1f fe8e 	uxth.w	lr, lr
 8000e2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e36:	fb00 f808 	mul.w	r8, r0, r8
 8000e3a:	45a0      	cmp	r8, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x26e>
 8000e3e:	18e4      	adds	r4, r4, r3
 8000e40:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e44:	d229      	bcs.n	8000e9a <__udivmoddi4+0x2ba>
 8000e46:	45a0      	cmp	r8, r4
 8000e48:	d927      	bls.n	8000e9a <__udivmoddi4+0x2ba>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	441c      	add	r4, r3
 8000e4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e52:	eba4 0408 	sub.w	r4, r4, r8
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	454c      	cmp	r4, r9
 8000e5c:	46c6      	mov	lr, r8
 8000e5e:	464d      	mov	r5, r9
 8000e60:	d315      	bcc.n	8000e8e <__udivmoddi4+0x2ae>
 8000e62:	d012      	beq.n	8000e8a <__udivmoddi4+0x2aa>
 8000e64:	b156      	cbz	r6, 8000e7c <__udivmoddi4+0x29c>
 8000e66:	ebba 030e 	subs.w	r3, sl, lr
 8000e6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431f      	orrs	r7, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	6037      	str	r7, [r6, #0]
 8000e7a:	6074      	str	r4, [r6, #4]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	4618      	mov	r0, r3
 8000e84:	e6f8      	b.n	8000c78 <__udivmoddi4+0x98>
 8000e86:	4690      	mov	r8, r2
 8000e88:	e6e0      	b.n	8000c4c <__udivmoddi4+0x6c>
 8000e8a:	45c2      	cmp	sl, r8
 8000e8c:	d2ea      	bcs.n	8000e64 <__udivmoddi4+0x284>
 8000e8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e92:	eb69 0503 	sbc.w	r5, r9, r3
 8000e96:	3801      	subs	r0, #1
 8000e98:	e7e4      	b.n	8000e64 <__udivmoddi4+0x284>
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	e7d7      	b.n	8000e4e <__udivmoddi4+0x26e>
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	e791      	b.n	8000dc6 <__udivmoddi4+0x1e6>
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	e7be      	b.n	8000e24 <__udivmoddi4+0x244>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	e778      	b.n	8000d9c <__udivmoddi4+0x1bc>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	e745      	b.n	8000d3c <__udivmoddi4+0x15c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xe6>
 8000eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb8:	443d      	add	r5, r7
 8000eba:	e72b      	b.n	8000d14 <__udivmoddi4+0x134>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_Init+0x40>)
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_Init+0x40>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_Init+0x40>)
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_Init+0x40>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <HAL_Init+0x40>)
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x40>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f929 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f006 fc8e 	bl	8007814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f970 	bl	8001208 <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f40:	f000 f91e 	bl	8001180 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000134 	.word	0x20000134
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	20000000 	.word	0x20000000

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000004 	.word	0x20000004
 8000f88:	20000b7c 	.word	0x20000b7c

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000b7c 	.word	0x20000b7c

08000fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	2b00      	cmp	r3, #0
 8001018:	db0b      	blt.n	8001032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101a:	4909      	ldr	r1, [pc, #36]	; (8001040 <__NVIC_EnableIRQ+0x38>)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	095b      	lsrs	r3, r3, #5
 8001022:	79fa      	ldrb	r2, [r7, #7]
 8001024:	f002 021f 	and.w	r2, r2, #31
 8001028:	2001      	movs	r0, #1
 800102a:	fa00 f202 	lsl.w	r2, r0, r2
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	e000e100 	.word	0xe000e100

08001044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	2b00      	cmp	r3, #0
 8001056:	db0a      	blt.n	800106e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001058:	490d      	ldr	r1, [pc, #52]	; (8001090 <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	683a      	ldr	r2, [r7, #0]
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	0112      	lsls	r2, r2, #4
 8001064:	b2d2      	uxtb	r2, r2
 8001066:	440b      	add	r3, r1
 8001068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800106c:	e00a      	b.n	8001084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106e:	4909      	ldr	r1, [pc, #36]	; (8001094 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	0112      	lsls	r2, r2, #4
 800107e:	b2d2      	uxtb	r2, r2
 8001080:	440b      	add	r3, r1
 8001082:	761a      	strb	r2, [r3, #24]
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr
 8001090:	e000e100 	.word	0xe000e100
 8001094:	e000ed00 	.word	0xe000ed00

08001098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001098:	b480      	push	{r7}
 800109a:	b089      	sub	sp, #36	; 0x24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	f1c3 0307 	rsb	r3, r3, #7
 80010b2:	2b04      	cmp	r3, #4
 80010b4:	bf28      	it	cs
 80010b6:	2304      	movcs	r3, #4
 80010b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3304      	adds	r3, #4
 80010be:	2b06      	cmp	r3, #6
 80010c0:	d902      	bls.n	80010c8 <NVIC_EncodePriority+0x30>
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3b03      	subs	r3, #3
 80010c6:	e000      	b.n	80010ca <NVIC_EncodePriority+0x32>
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010cc:	2201      	movs	r2, #1
 80010ce:	69bb      	ldr	r3, [r7, #24]
 80010d0:	fa02 f303 	lsl.w	r3, r2, r3
 80010d4:	1e5a      	subs	r2, r3, #1
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	401a      	ands	r2, r3
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010de:	2101      	movs	r1, #1
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	1e59      	subs	r1, r3, #1
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
	...

080010fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	3b01      	subs	r3, #1
 8001108:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800110c:	d301      	bcc.n	8001112 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800110e:	2301      	movs	r3, #1
 8001110:	e00f      	b.n	8001132 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001112:	4a0a      	ldr	r2, [pc, #40]	; (800113c <SysTick_Config+0x40>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3b01      	subs	r3, #1
 8001118:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800111a:	210f      	movs	r1, #15
 800111c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001120:	f7ff ff90 	bl	8001044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <SysTick_Config+0x40>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <SysTick_Config+0x40>)
 800112c:	2207      	movs	r2, #7
 800112e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	e000e010 	.word	0xe000e010

08001140 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	2b07      	cmp	r3, #7
 800114c:	d00f      	beq.n	800116e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2b06      	cmp	r3, #6
 8001152:	d00c      	beq.n	800116e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b05      	cmp	r3, #5
 8001158:	d009      	beq.n	800116e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d006      	beq.n	800116e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	2b03      	cmp	r3, #3
 8001164:	d003      	beq.n	800116e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8001166:	2192      	movs	r1, #146	; 0x92
 8001168:	4804      	ldr	r0, [pc, #16]	; (800117c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800116a:	f006 f828 	bl	80071be <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff ff18 	bl	8000fa4 <__NVIC_SetPriorityGrouping>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	0800b2b0 	.word	0x0800b2b0

08001180 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
 800118c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800118e:	2300      	movs	r3, #0
 8001190:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2b0f      	cmp	r3, #15
 8001196:	d903      	bls.n	80011a0 <HAL_NVIC_SetPriority+0x20>
 8001198:	21aa      	movs	r1, #170	; 0xaa
 800119a:	480e      	ldr	r0, [pc, #56]	; (80011d4 <HAL_NVIC_SetPriority+0x54>)
 800119c:	f006 f80f 	bl	80071be <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b0f      	cmp	r3, #15
 80011a4:	d903      	bls.n	80011ae <HAL_NVIC_SetPriority+0x2e>
 80011a6:	21ab      	movs	r1, #171	; 0xab
 80011a8:	480a      	ldr	r0, [pc, #40]	; (80011d4 <HAL_NVIC_SetPriority+0x54>)
 80011aa:	f006 f808 	bl	80071be <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ae:	f7ff ff1d 	bl	8000fec <__NVIC_GetPriorityGrouping>
 80011b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b4:	687a      	ldr	r2, [r7, #4]
 80011b6:	68b9      	ldr	r1, [r7, #8]
 80011b8:	6978      	ldr	r0, [r7, #20]
 80011ba:	f7ff ff6d 	bl	8001098 <NVIC_EncodePriority>
 80011be:	4602      	mov	r2, r0
 80011c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff ff3c 	bl	8001044 <__NVIC_SetPriority>
}
 80011cc:	bf00      	nop
 80011ce:	3718      	adds	r7, #24
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	0800b2b0 	.word	0x0800b2b0

080011d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 80011e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da03      	bge.n	80011f2 <HAL_NVIC_EnableIRQ+0x1a>
 80011ea:	21be      	movs	r1, #190	; 0xbe
 80011ec:	4805      	ldr	r0, [pc, #20]	; (8001204 <HAL_NVIC_EnableIRQ+0x2c>)
 80011ee:	f005 ffe6 	bl	80071be <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff ff06 	bl	8001008 <__NVIC_EnableIRQ>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	0800b2b0 	.word	0x0800b2b0

08001208 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001210:	6878      	ldr	r0, [r7, #4]
 8001212:	f7ff ff73 	bl	80010fc <SysTick_Config>
 8001216:	4603      	mov	r3, r0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800122c:	f7ff feae 	bl	8000f8c <HAL_GetTick>
 8001230:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d101      	bne.n	800123c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	e204      	b.n	8001646 <HAL_DMA_Init+0x426>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a97      	ldr	r2, [pc, #604]	; (80014a0 <HAL_DMA_Init+0x280>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d04e      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a96      	ldr	r2, [pc, #600]	; (80014a4 <HAL_DMA_Init+0x284>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d049      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a94      	ldr	r2, [pc, #592]	; (80014a8 <HAL_DMA_Init+0x288>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d044      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a93      	ldr	r2, [pc, #588]	; (80014ac <HAL_DMA_Init+0x28c>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d03f      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a91      	ldr	r2, [pc, #580]	; (80014b0 <HAL_DMA_Init+0x290>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d03a      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a90      	ldr	r2, [pc, #576]	; (80014b4 <HAL_DMA_Init+0x294>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d035      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a8e      	ldr	r2, [pc, #568]	; (80014b8 <HAL_DMA_Init+0x298>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d030      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a8d      	ldr	r2, [pc, #564]	; (80014bc <HAL_DMA_Init+0x29c>)
 8001288:	4293      	cmp	r3, r2
 800128a:	d02b      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a8b      	ldr	r2, [pc, #556]	; (80014c0 <HAL_DMA_Init+0x2a0>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d026      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a8a      	ldr	r2, [pc, #552]	; (80014c4 <HAL_DMA_Init+0x2a4>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d021      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a88      	ldr	r2, [pc, #544]	; (80014c8 <HAL_DMA_Init+0x2a8>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d01c      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a87      	ldr	r2, [pc, #540]	; (80014cc <HAL_DMA_Init+0x2ac>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d017      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a85      	ldr	r2, [pc, #532]	; (80014d0 <HAL_DMA_Init+0x2b0>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d012      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a84      	ldr	r2, [pc, #528]	; (80014d4 <HAL_DMA_Init+0x2b4>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d00d      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a82      	ldr	r2, [pc, #520]	; (80014d8 <HAL_DMA_Init+0x2b8>)
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d008      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a81      	ldr	r2, [pc, #516]	; (80014dc <HAL_DMA_Init+0x2bc>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d003      	beq.n	80012e4 <HAL_DMA_Init+0xc4>
 80012dc:	21b8      	movs	r1, #184	; 0xb8
 80012de:	4880      	ldr	r0, [pc, #512]	; (80014e0 <HAL_DMA_Init+0x2c0>)
 80012e0:	f005 ff6d 	bl	80071be <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d026      	beq.n	800133a <HAL_DMA_Init+0x11a>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80012f4:	d021      	beq.n	800133a <HAL_DMA_Init+0x11a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80012fe:	d01c      	beq.n	800133a <HAL_DMA_Init+0x11a>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8001308:	d017      	beq.n	800133a <HAL_DMA_Init+0x11a>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001312:	d012      	beq.n	800133a <HAL_DMA_Init+0x11a>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f1b3 6f20 	cmp.w	r3, #167772160	; 0xa000000
 800131c:	d00d      	beq.n	800133a <HAL_DMA_Init+0x11a>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8001326:	d008      	beq.n	800133a <HAL_DMA_Init+0x11a>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f1b3 6f60 	cmp.w	r3, #234881024	; 0xe000000
 8001330:	d003      	beq.n	800133a <HAL_DMA_Init+0x11a>
 8001332:	21b9      	movs	r1, #185	; 0xb9
 8001334:	486a      	ldr	r0, [pc, #424]	; (80014e0 <HAL_DMA_Init+0x2c0>)
 8001336:	f005 ff42 	bl	80071be <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00b      	beq.n	800135a <HAL_DMA_Init+0x13a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	2b40      	cmp	r3, #64	; 0x40
 8001348:	d007      	beq.n	800135a <HAL_DMA_Init+0x13a>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2b80      	cmp	r3, #128	; 0x80
 8001350:	d003      	beq.n	800135a <HAL_DMA_Init+0x13a>
 8001352:	21ba      	movs	r1, #186	; 0xba
 8001354:	4862      	ldr	r0, [pc, #392]	; (80014e0 <HAL_DMA_Init+0x2c0>)
 8001356:	f005 ff32 	bl	80071be <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001362:	d007      	beq.n	8001374 <HAL_DMA_Init+0x154>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d003      	beq.n	8001374 <HAL_DMA_Init+0x154>
 800136c:	21bb      	movs	r1, #187	; 0xbb
 800136e:	485c      	ldr	r0, [pc, #368]	; (80014e0 <HAL_DMA_Init+0x2c0>)
 8001370:	f005 ff25 	bl	80071be <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	691b      	ldr	r3, [r3, #16]
 8001378:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800137c:	d007      	beq.n	800138e <HAL_DMA_Init+0x16e>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_DMA_Init+0x16e>
 8001386:	21bc      	movs	r1, #188	; 0xbc
 8001388:	4855      	ldr	r0, [pc, #340]	; (80014e0 <HAL_DMA_Init+0x2c0>)
 800138a:	f005 ff18 	bl	80071be <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d00d      	beq.n	80013b2 <HAL_DMA_Init+0x192>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	695b      	ldr	r3, [r3, #20]
 800139a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800139e:	d008      	beq.n	80013b2 <HAL_DMA_Init+0x192>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	695b      	ldr	r3, [r3, #20]
 80013a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013a8:	d003      	beq.n	80013b2 <HAL_DMA_Init+0x192>
 80013aa:	21bd      	movs	r1, #189	; 0xbd
 80013ac:	484c      	ldr	r0, [pc, #304]	; (80014e0 <HAL_DMA_Init+0x2c0>)
 80013ae:	f005 ff06 	bl	80071be <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00d      	beq.n	80013d6 <HAL_DMA_Init+0x1b6>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80013c2:	d008      	beq.n	80013d6 <HAL_DMA_Init+0x1b6>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80013cc:	d003      	beq.n	80013d6 <HAL_DMA_Init+0x1b6>
 80013ce:	21be      	movs	r1, #190	; 0xbe
 80013d0:	4843      	ldr	r0, [pc, #268]	; (80014e0 <HAL_DMA_Init+0x2c0>)
 80013d2:	f005 fef4 	bl	80071be <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	69db      	ldr	r3, [r3, #28]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00c      	beq.n	80013f8 <HAL_DMA_Init+0x1d8>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80013e6:	d007      	beq.n	80013f8 <HAL_DMA_Init+0x1d8>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	2b20      	cmp	r3, #32
 80013ee:	d003      	beq.n	80013f8 <HAL_DMA_Init+0x1d8>
 80013f0:	21bf      	movs	r1, #191	; 0xbf
 80013f2:	483b      	ldr	r0, [pc, #236]	; (80014e0 <HAL_DMA_Init+0x2c0>)
 80013f4:	f005 fee3 	bl	80071be <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6a1b      	ldr	r3, [r3, #32]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d012      	beq.n	8001426 <HAL_DMA_Init+0x206>
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001408:	d00d      	beq.n	8001426 <HAL_DMA_Init+0x206>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6a1b      	ldr	r3, [r3, #32]
 800140e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001412:	d008      	beq.n	8001426 <HAL_DMA_Init+0x206>
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a1b      	ldr	r3, [r3, #32]
 8001418:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800141c:	d003      	beq.n	8001426 <HAL_DMA_Init+0x206>
 800141e:	21c0      	movs	r1, #192	; 0xc0
 8001420:	482f      	ldr	r0, [pc, #188]	; (80014e0 <HAL_DMA_Init+0x2c0>)
 8001422:	f005 fecc 	bl	80071be <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	2b00      	cmp	r3, #0
 800142c:	d007      	beq.n	800143e <HAL_DMA_Init+0x21e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001432:	2b04      	cmp	r3, #4
 8001434:	d003      	beq.n	800143e <HAL_DMA_Init+0x21e>
 8001436:	21c1      	movs	r1, #193	; 0xc1
 8001438:	4829      	ldr	r0, [pc, #164]	; (80014e0 <HAL_DMA_Init+0x2c0>)
 800143a:	f005 fec0 	bl	80071be <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	2b00      	cmp	r3, #0
 8001444:	d065      	beq.n	8001512 <HAL_DMA_Init+0x2f2>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00f      	beq.n	800146e <HAL_DMA_Init+0x24e>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001452:	2b01      	cmp	r3, #1
 8001454:	d00b      	beq.n	800146e <HAL_DMA_Init+0x24e>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800145a:	2b02      	cmp	r3, #2
 800145c:	d007      	beq.n	800146e <HAL_DMA_Init+0x24e>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001462:	2b03      	cmp	r3, #3
 8001464:	d003      	beq.n	800146e <HAL_DMA_Init+0x24e>
 8001466:	21c6      	movs	r1, #198	; 0xc6
 8001468:	481d      	ldr	r0, [pc, #116]	; (80014e0 <HAL_DMA_Init+0x2c0>)
 800146a:	f005 fea8 	bl	80071be <assert_failed>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001472:	2b00      	cmp	r3, #0
 8001474:	d036      	beq.n	80014e4 <HAL_DMA_Init+0x2c4>
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800147a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800147e:	d031      	beq.n	80014e4 <HAL_DMA_Init+0x2c4>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001484:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001488:	d02c      	beq.n	80014e4 <HAL_DMA_Init+0x2c4>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001492:	d027      	beq.n	80014e4 <HAL_DMA_Init+0x2c4>
 8001494:	21c7      	movs	r1, #199	; 0xc7
 8001496:	4812      	ldr	r0, [pc, #72]	; (80014e0 <HAL_DMA_Init+0x2c0>)
 8001498:	f005 fe91 	bl	80071be <assert_failed>
 800149c:	e022      	b.n	80014e4 <HAL_DMA_Init+0x2c4>
 800149e:	bf00      	nop
 80014a0:	40026010 	.word	0x40026010
 80014a4:	40026028 	.word	0x40026028
 80014a8:	40026040 	.word	0x40026040
 80014ac:	40026058 	.word	0x40026058
 80014b0:	40026070 	.word	0x40026070
 80014b4:	40026088 	.word	0x40026088
 80014b8:	400260a0 	.word	0x400260a0
 80014bc:	400260b8 	.word	0x400260b8
 80014c0:	40026410 	.word	0x40026410
 80014c4:	40026428 	.word	0x40026428
 80014c8:	40026440 	.word	0x40026440
 80014cc:	40026458 	.word	0x40026458
 80014d0:	40026470 	.word	0x40026470
 80014d4:	40026488 	.word	0x40026488
 80014d8:	400264a0 	.word	0x400264a0
 80014dc:	400264b8 	.word	0x400264b8
 80014e0:	0800b2ec 	.word	0x0800b2ec
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d012      	beq.n	8001512 <HAL_DMA_Init+0x2f2>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014f4:	d00d      	beq.n	8001512 <HAL_DMA_Init+0x2f2>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80014fe:	d008      	beq.n	8001512 <HAL_DMA_Init+0x2f2>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8001508:	d003      	beq.n	8001512 <HAL_DMA_Init+0x2f2>
 800150a:	21c8      	movs	r1, #200	; 0xc8
 800150c:	4850      	ldr	r0, [pc, #320]	; (8001650 <HAL_DMA_Init+0x430>)
 800150e:	f005 fe56 	bl	80071be <assert_failed>
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2200      	movs	r2, #0
 8001516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2202      	movs	r2, #2
 800151e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	6812      	ldr	r2, [r2, #0]
 800152a:	6812      	ldr	r2, [r2, #0]
 800152c:	f022 0201 	bic.w	r2, r2, #1
 8001530:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001532:	e00f      	b.n	8001554 <HAL_DMA_Init+0x334>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001534:	f7ff fd2a 	bl	8000f8c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b05      	cmp	r3, #5
 8001540:	d908      	bls.n	8001554 <HAL_DMA_Init+0x334>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2220      	movs	r2, #32
 8001546:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2203      	movs	r2, #3
 800154c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e078      	b.n	8001646 <HAL_DMA_Init+0x426>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b00      	cmp	r3, #0
 8001560:	d1e8      	bne.n	8001534 <HAL_DMA_Init+0x314>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800156a:	697a      	ldr	r2, [r7, #20]
 800156c:	4b39      	ldr	r3, [pc, #228]	; (8001654 <HAL_DMA_Init+0x434>)
 800156e:	4013      	ands	r3, r2
 8001570:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685a      	ldr	r2, [r3, #4]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001580:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	691b      	ldr	r3, [r3, #16]
 8001586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800158c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001598:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d107      	bne.n	80015be <HAL_DMA_Init+0x39e>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4313      	orrs	r3, r2
 80015b8:	697a      	ldr	r2, [r7, #20]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	697a      	ldr	r2, [r7, #20]
 80015c4:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	f023 0307 	bic.w	r3, r3, #7
 80015d4:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4313      	orrs	r3, r2
 80015de:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	2b04      	cmp	r3, #4
 80015e6:	d117      	bne.n	8001618 <HAL_DMA_Init+0x3f8>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ec:	697a      	ldr	r2, [r7, #20]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d00e      	beq.n	8001618 <HAL_DMA_Init+0x3f8>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f000 fa88 	bl	8001b10 <DMA_CheckFifoParam>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d008      	beq.n	8001618 <HAL_DMA_Init+0x3f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2240      	movs	r2, #64	; 0x40
 800160a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001614:	2301      	movs	r3, #1
 8001616:	e016      	b.n	8001646 <HAL_DMA_Init+0x426>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	697a      	ldr	r2, [r7, #20]
 800161e:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f000 fa3f 	bl	8001aa4 <DMA_CalcBaseAndBitshift>
 8001626:	4603      	mov	r3, r0
 8001628:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162e:	223f      	movs	r2, #63	; 0x3f
 8001630:	409a      	lsls	r2, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	0800b2ec 	.word	0x0800b2ec
 8001654:	f010803f 	.word	0xf010803f

08001658 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001666:	2300      	movs	r3, #0
 8001668:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_DMA_Start_IT+0x26>
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167c:	d304      	bcc.n	8001688 <HAL_DMA_Start_IT+0x30>
 800167e:	f44f 71e6 	mov.w	r1, #460	; 0x1cc
 8001682:	482b      	ldr	r0, [pc, #172]	; (8001730 <HAL_DMA_Start_IT+0xd8>)
 8001684:	f005 fd9b 	bl	80071be <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800168e:	2b01      	cmp	r3, #1
 8001690:	d101      	bne.n	8001696 <HAL_DMA_Start_IT+0x3e>
 8001692:	2302      	movs	r3, #2
 8001694:	e048      	b.n	8001728 <HAL_DMA_Start_IT+0xd0>
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d137      	bne.n	800171a <HAL_DMA_Start_IT+0xc2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	2202      	movs	r2, #2
 80016ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	2200      	movs	r2, #0
 80016b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	68b9      	ldr	r1, [r7, #8]
 80016be:	68f8      	ldr	r0, [r7, #12]
 80016c0:	f000 f9c2 	bl	8001a48 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016c8:	223f      	movs	r2, #63	; 0x3f
 80016ca:	409a      	lsls	r2, r3
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68fa      	ldr	r2, [r7, #12]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	f042 0216 	orr.w	r2, r2, #22
 80016de:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	6812      	ldr	r2, [r2, #0]
 80016e8:	6952      	ldr	r2, [r2, #20]
 80016ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016ee:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d007      	beq.n	8001708 <HAL_DMA_Start_IT+0xb0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	68fa      	ldr	r2, [r7, #12]
 80016fe:	6812      	ldr	r2, [r2, #0]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	f042 0208 	orr.w	r2, r2, #8
 8001706:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	68fa      	ldr	r2, [r7, #12]
 800170e:	6812      	ldr	r2, [r2, #0]
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	e005      	b.n	8001726 <HAL_DMA_Start_IT+0xce>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	2200      	movs	r2, #0
 800171e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001722:	2302      	movs	r3, #2
 8001724:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001726:	7dfb      	ldrb	r3, [r7, #23]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	0800b2ec 	.word	0x0800b2ec

08001734 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001740:	4b92      	ldr	r3, [pc, #584]	; (800198c <HAL_DMA_IRQHandler+0x258>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a92      	ldr	r2, [pc, #584]	; (8001990 <HAL_DMA_IRQHandler+0x25c>)
 8001746:	fba2 2303 	umull	r2, r3, r2, r3
 800174a:	0a9b      	lsrs	r3, r3, #10
 800174c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800175e:	2208      	movs	r2, #8
 8001760:	409a      	lsls	r2, r3
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	4013      	ands	r3, r2
 8001766:	2b00      	cmp	r3, #0
 8001768:	d01a      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0304 	and.w	r3, r3, #4
 8001774:	2b00      	cmp	r3, #0
 8001776:	d013      	beq.n	80017a0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	6812      	ldr	r2, [r2, #0]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	f022 0204 	bic.w	r2, r2, #4
 8001786:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178c:	2208      	movs	r2, #8
 800178e:	409a      	lsls	r2, r3
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017a4:	2201      	movs	r2, #1
 80017a6:	409a      	lsls	r2, r3
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4013      	ands	r3, r2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d012      	beq.n	80017d6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00b      	beq.n	80017d6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017c2:	2201      	movs	r2, #1
 80017c4:	409a      	lsls	r2, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ce:	f043 0202 	orr.w	r2, r3, #2
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017da:	2204      	movs	r2, #4
 80017dc:	409a      	lsls	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d012      	beq.n	800180c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d00b      	beq.n	800180c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f8:	2204      	movs	r2, #4
 80017fa:	409a      	lsls	r2, r3
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001804:	f043 0204 	orr.w	r2, r3, #4
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001810:	2210      	movs	r2, #16
 8001812:	409a      	lsls	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4013      	ands	r3, r2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d043      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d03c      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182e:	2210      	movs	r2, #16
 8001830:	409a      	lsls	r2, r3
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d018      	beq.n	8001876 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d108      	bne.n	8001864 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001856:	2b00      	cmp	r3, #0
 8001858:	d024      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	4798      	blx	r3
 8001862:	e01f      	b.n	80018a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001868:	2b00      	cmp	r3, #0
 800186a:	d01b      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	4798      	blx	r3
 8001874:	e016      	b.n	80018a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001880:	2b00      	cmp	r3, #0
 8001882:	d107      	bne.n	8001894 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	6812      	ldr	r2, [r2, #0]
 800188e:	f022 0208 	bic.w	r2, r2, #8
 8001892:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a8:	2220      	movs	r2, #32
 80018aa:	409a      	lsls	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 808e 	beq.w	80019d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 0310 	and.w	r3, r3, #16
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 8086 	beq.w	80019d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ca:	2220      	movs	r2, #32
 80018cc:	409a      	lsls	r2, r3
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d136      	bne.n	800194c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	6812      	ldr	r2, [r2, #0]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	f022 0216 	bic.w	r2, r2, #22
 80018ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	6812      	ldr	r2, [r2, #0]
 80018f6:	6952      	ldr	r2, [r2, #20]
 80018f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	2b00      	cmp	r3, #0
 8001904:	d103      	bne.n	800190e <HAL_DMA_IRQHandler+0x1da>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190a:	2b00      	cmp	r3, #0
 800190c:	d007      	beq.n	800191e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	6812      	ldr	r2, [r2, #0]
 8001918:	f022 0208 	bic.w	r2, r2, #8
 800191c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001922:	223f      	movs	r2, #63	; 0x3f
 8001924:	409a      	lsls	r2, r3
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2200      	movs	r2, #0
 800192e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2201      	movs	r2, #1
 8001936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800193e:	2b00      	cmp	r3, #0
 8001940:	d07d      	beq.n	8001a3e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	4798      	blx	r3
        }
        return;
 800194a:	e078      	b.n	8001a3e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d01c      	beq.n	8001994 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d108      	bne.n	800197a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196c:	2b00      	cmp	r3, #0
 800196e:	d030      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	4798      	blx	r3
 8001978:	e02b      	b.n	80019d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800197e:	2b00      	cmp	r3, #0
 8001980:	d027      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001986:	6878      	ldr	r0, [r7, #4]
 8001988:	4798      	blx	r3
 800198a:	e022      	b.n	80019d2 <HAL_DMA_IRQHandler+0x29e>
 800198c:	20000134 	.word	0x20000134
 8001990:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d10f      	bne.n	80019c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	6812      	ldr	r2, [r2, #0]
 80019aa:	6812      	ldr	r2, [r2, #0]
 80019ac:	f022 0210 	bic.w	r2, r2, #16
 80019b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2201      	movs	r2, #1
 80019be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d032      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d022      	beq.n	8001a2c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2205      	movs	r2, #5
 80019ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	6812      	ldr	r2, [r2, #0]
 80019f6:	6812      	ldr	r2, [r2, #0]
 80019f8:	f022 0201 	bic.w	r2, r2, #1
 80019fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	3301      	adds	r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d807      	bhi.n	8001a1a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f2      	bne.n	80019fe <HAL_DMA_IRQHandler+0x2ca>
 8001a18:	e000      	b.n	8001a1c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a1a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d005      	beq.n	8001a40 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	4798      	blx	r3
 8001a3c:	e000      	b.n	8001a40 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001a3e:	bf00      	nop
    }
  }
}
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop

08001a48 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	68fa      	ldr	r2, [r7, #12]
 8001a5c:	6812      	ldr	r2, [r2, #0]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a64:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	683a      	ldr	r2, [r7, #0]
 8001a6c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b40      	cmp	r3, #64	; 0x40
 8001a74:	d108      	bne.n	8001a88 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001a86:	e007      	b.n	8001a98 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	68ba      	ldr	r2, [r7, #8]
 8001a8e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	60da      	str	r2, [r3, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr

08001aa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	3b10      	subs	r3, #16
 8001ab4:	4a14      	ldr	r2, [pc, #80]	; (8001b08 <DMA_CalcBaseAndBitshift+0x64>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	091b      	lsrs	r3, r3, #4
 8001abc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001abe:	4a13      	ldr	r2, [pc, #76]	; (8001b0c <DMA_CalcBaseAndBitshift+0x68>)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	4413      	add	r3, r2
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d909      	bls.n	8001ae6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ada:	f023 0303 	bic.w	r3, r3, #3
 8001ade:	1d1a      	adds	r2, r3, #4
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	659a      	str	r2, [r3, #88]	; 0x58
 8001ae4:	e007      	b.n	8001af6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001aee:	f023 0303 	bic.w	r3, r3, #3
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	aaaaaaab 	.word	0xaaaaaaab
 8001b0c:	0800b698 	.word	0x0800b698

08001b10 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b20:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d11f      	bne.n	8001b6a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	2b03      	cmp	r3, #3
 8001b2e:	d855      	bhi.n	8001bdc <DMA_CheckFifoParam+0xcc>
 8001b30:	a201      	add	r2, pc, #4	; (adr r2, 8001b38 <DMA_CheckFifoParam+0x28>)
 8001b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b36:	bf00      	nop
 8001b38:	08001b49 	.word	0x08001b49
 8001b3c:	08001b5b 	.word	0x08001b5b
 8001b40:	08001b49 	.word	0x08001b49
 8001b44:	08001bdd 	.word	0x08001bdd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d045      	beq.n	8001be0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b58:	e042      	b.n	8001be0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b62:	d13f      	bne.n	8001be4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b68:	e03c      	b.n	8001be4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	699b      	ldr	r3, [r3, #24]
 8001b6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b72:	d121      	bne.n	8001bb8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	2b03      	cmp	r3, #3
 8001b78:	d836      	bhi.n	8001be8 <DMA_CheckFifoParam+0xd8>
 8001b7a:	a201      	add	r2, pc, #4	; (adr r2, 8001b80 <DMA_CheckFifoParam+0x70>)
 8001b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b80:	08001b91 	.word	0x08001b91
 8001b84:	08001b97 	.word	0x08001b97
 8001b88:	08001b91 	.word	0x08001b91
 8001b8c:	08001ba9 	.word	0x08001ba9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
      break;
 8001b94:	e02f      	b.n	8001bf6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d024      	beq.n	8001bec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ba6:	e021      	b.n	8001bec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bb0:	d11e      	bne.n	8001bf0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bb6:	e01b      	b.n	8001bf0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	2b02      	cmp	r3, #2
 8001bbc:	d902      	bls.n	8001bc4 <DMA_CheckFifoParam+0xb4>
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d003      	beq.n	8001bca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001bc2:	e018      	b.n	8001bf6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bc8:	e015      	b.n	8001bf6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00e      	beq.n	8001bf4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8001bda:	e00b      	b.n	8001bf4 <DMA_CheckFifoParam+0xe4>
      break;
 8001bdc:	bf00      	nop
 8001bde:	e00a      	b.n	8001bf6 <DMA_CheckFifoParam+0xe6>
      break;
 8001be0:	bf00      	nop
 8001be2:	e008      	b.n	8001bf6 <DMA_CheckFifoParam+0xe6>
      break;
 8001be4:	bf00      	nop
 8001be6:	e006      	b.n	8001bf6 <DMA_CheckFifoParam+0xe6>
      break;
 8001be8:	bf00      	nop
 8001bea:	e004      	b.n	8001bf6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bec:	bf00      	nop
 8001bee:	e002      	b.n	8001bf6 <DMA_CheckFifoParam+0xe6>
      break;   
 8001bf0:	bf00      	nop
 8001bf2:	e000      	b.n	8001bf6 <DMA_CheckFifoParam+0xe6>
      break;
 8001bf4:	bf00      	nop
    }
  } 
  
  return status; 
 8001bf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c16:	2300      	movs	r3, #0
 8001c18:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a3b      	ldr	r2, [pc, #236]	; (8001d0c <HAL_GPIO_Init+0x108>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d017      	beq.n	8001c52 <HAL_GPIO_Init+0x4e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a3a      	ldr	r2, [pc, #232]	; (8001d10 <HAL_GPIO_Init+0x10c>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d013      	beq.n	8001c52 <HAL_GPIO_Init+0x4e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a39      	ldr	r2, [pc, #228]	; (8001d14 <HAL_GPIO_Init+0x110>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d00f      	beq.n	8001c52 <HAL_GPIO_Init+0x4e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a38      	ldr	r2, [pc, #224]	; (8001d18 <HAL_GPIO_Init+0x114>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d00b      	beq.n	8001c52 <HAL_GPIO_Init+0x4e>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	4a37      	ldr	r2, [pc, #220]	; (8001d1c <HAL_GPIO_Init+0x118>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d007      	beq.n	8001c52 <HAL_GPIO_Init+0x4e>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	4a36      	ldr	r2, [pc, #216]	; (8001d20 <HAL_GPIO_Init+0x11c>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x4e>
 8001c4a:	21b3      	movs	r1, #179	; 0xb3
 8001c4c:	4835      	ldr	r0, [pc, #212]	; (8001d24 <HAL_GPIO_Init+0x120>)
 8001c4e:	f005 fab6 	bl	80071be <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d005      	beq.n	8001c68 <HAL_GPIO_Init+0x64>
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	0c1b      	lsrs	r3, r3, #16
 8001c62:	041b      	lsls	r3, r3, #16
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d003      	beq.n	8001c70 <HAL_GPIO_Init+0x6c>
 8001c68:	21b4      	movs	r1, #180	; 0xb4
 8001c6a:	482e      	ldr	r0, [pc, #184]	; (8001d24 <HAL_GPIO_Init+0x120>)
 8001c6c:	f005 faa7 	bl	80071be <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d035      	beq.n	8001ce4 <HAL_GPIO_Init+0xe0>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d031      	beq.n	8001ce4 <HAL_GPIO_Init+0xe0>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	2b11      	cmp	r3, #17
 8001c86:	d02d      	beq.n	8001ce4 <HAL_GPIO_Init+0xe0>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d029      	beq.n	8001ce4 <HAL_GPIO_Init+0xe0>
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b12      	cmp	r3, #18
 8001c96:	d025      	beq.n	8001ce4 <HAL_GPIO_Init+0xe0>
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	4a22      	ldr	r2, [pc, #136]	; (8001d28 <HAL_GPIO_Init+0x124>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d020      	beq.n	8001ce4 <HAL_GPIO_Init+0xe0>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	4a21      	ldr	r2, [pc, #132]	; (8001d2c <HAL_GPIO_Init+0x128>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d01b      	beq.n	8001ce4 <HAL_GPIO_Init+0xe0>
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_GPIO_Init+0x12c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d016      	beq.n	8001ce4 <HAL_GPIO_Init+0xe0>
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <HAL_GPIO_Init+0x130>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d011      	beq.n	8001ce4 <HAL_GPIO_Init+0xe0>
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <HAL_GPIO_Init+0x134>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d00c      	beq.n	8001ce4 <HAL_GPIO_Init+0xe0>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <HAL_GPIO_Init+0x138>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d007      	beq.n	8001ce4 <HAL_GPIO_Init+0xe0>
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b03      	cmp	r3, #3
 8001cda:	d003      	beq.n	8001ce4 <HAL_GPIO_Init+0xe0>
 8001cdc:	21b5      	movs	r1, #181	; 0xb5
 8001cde:	4811      	ldr	r0, [pc, #68]	; (8001d24 <HAL_GPIO_Init+0x120>)
 8001ce0:	f005 fa6d 	bl	80071be <assert_failed>
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d00b      	beq.n	8001d04 <HAL_GPIO_Init+0x100>
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d007      	beq.n	8001d04 <HAL_GPIO_Init+0x100>
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x100>
 8001cfc:	21b6      	movs	r1, #182	; 0xb6
 8001cfe:	4809      	ldr	r0, [pc, #36]	; (8001d24 <HAL_GPIO_Init+0x120>)
 8001d00:	f005 fa5d 	bl	80071be <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
 8001d08:	e201      	b.n	800210e <HAL_GPIO_Init+0x50a>
 8001d0a:	bf00      	nop
 8001d0c:	40020000 	.word	0x40020000
 8001d10:	40020400 	.word	0x40020400
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020c00 	.word	0x40020c00
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	40021c00 	.word	0x40021c00
 8001d24:	0800b324 	.word	0x0800b324
 8001d28:	10110000 	.word	0x10110000
 8001d2c:	10210000 	.word	0x10210000
 8001d30:	10310000 	.word	0x10310000
 8001d34:	10120000 	.word	0x10120000
 8001d38:	10220000 	.word	0x10220000
 8001d3c:	10320000 	.word	0x10320000
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d40:	2201      	movs	r2, #1
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	fa02 f303 	lsl.w	r3, r2, r3
 8001d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	4013      	ands	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	f040 81d5 	bne.w	8002108 <HAL_GPIO_Init+0x504>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d004      	beq.n	8001d70 <HAL_GPIO_Init+0x16c>
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b12      	cmp	r3, #18
 8001d6c:	f040 808c 	bne.w	8001e88 <HAL_GPIO_Init+0x284>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d063      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	2b0c      	cmp	r3, #12
 8001d7e:	d05f      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d05b      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d057      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d053      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d04f      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d04b      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	691b      	ldr	r3, [r3, #16]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d047      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	2b02      	cmp	r3, #2
 8001db6:	d043      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	691b      	ldr	r3, [r3, #16]
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d03f      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	691b      	ldr	r3, [r3, #16]
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d03b      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	2b04      	cmp	r3, #4
 8001dce:	d037      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d033      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	691b      	ldr	r3, [r3, #16]
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d02f      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d02b      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	2b05      	cmp	r3, #5
 8001dee:	d027      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	2b06      	cmp	r3, #6
 8001df6:	d023      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d01f      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	2b07      	cmp	r3, #7
 8001e06:	d01b      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2b07      	cmp	r3, #7
 8001e0e:	d017      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d013      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	691b      	ldr	r3, [r3, #16]
 8001e1c:	2b0a      	cmp	r3, #10
 8001e1e:	d00f      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b09      	cmp	r3, #9
 8001e26:	d00b      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	2b09      	cmp	r3, #9
 8001e2e:	d007      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	2b0f      	cmp	r3, #15
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x23c>
 8001e38:	21c7      	movs	r1, #199	; 0xc7
 8001e3a:	4879      	ldr	r0, [pc, #484]	; (8002020 <HAL_GPIO_Init+0x41c>)
 8001e3c:	f005 f9bf 	bl	80071be <assert_failed>
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	08da      	lsrs	r2, r3, #3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3208      	adds	r2, #8
 8001e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	220f      	movs	r2, #15
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43db      	mvns	r3, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4013      	ands	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	691a      	ldr	r2, [r3, #16]
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	08da      	lsrs	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3208      	adds	r2, #8
 8001e82:	69b9      	ldr	r1, [r7, #24]
 8001e84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	2203      	movs	r2, #3
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0203 	and.w	r2, r3, #3
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	69ba      	ldr	r2, [r7, #24]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	2b01      	cmp	r3, #1
 8001ec2:	d00b      	beq.n	8001edc <HAL_GPIO_Init+0x2d8>
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d007      	beq.n	8001edc <HAL_GPIO_Init+0x2d8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ed0:	2b11      	cmp	r3, #17
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x2d8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b12      	cmp	r3, #18
 8001eda:	d144      	bne.n	8001f66 <HAL_GPIO_Init+0x362>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00f      	beq.n	8001f04 <HAL_GPIO_Init+0x300>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	2b01      	cmp	r3, #1
 8001eea:	d00b      	beq.n	8001f04 <HAL_GPIO_Init+0x300>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d007      	beq.n	8001f04 <HAL_GPIO_Init+0x300>
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	68db      	ldr	r3, [r3, #12]
 8001ef8:	2b03      	cmp	r3, #3
 8001efa:	d003      	beq.n	8001f04 <HAL_GPIO_Init+0x300>
 8001efc:	21da      	movs	r1, #218	; 0xda
 8001efe:	4848      	ldr	r0, [pc, #288]	; (8002020 <HAL_GPIO_Init+0x41c>)
 8001f00:	f005 f95d 	bl	80071be <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	2203      	movs	r2, #3
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	43db      	mvns	r3, r3
 8001f16:	69ba      	ldr	r2, [r7, #24]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	69fb      	ldr	r3, [r7, #28]
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	091b      	lsrs	r3, r3, #4
 8001f50:	f003 0201 	and.w	r2, r3, #1
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	69ba      	ldr	r2, [r7, #24]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	2203      	movs	r2, #3
 8001f72:	fa02 f303 	lsl.w	r3, r2, r3
 8001f76:	43db      	mvns	r3, r3
 8001f78:	69ba      	ldr	r2, [r7, #24]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69ba      	ldr	r2, [r7, #24]
 8001f94:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 80b2 	beq.w	8002108 <HAL_GPIO_Init+0x504>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	60fb      	str	r3, [r7, #12]
 8001fa8:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <HAL_GPIO_Init+0x420>)
 8001faa:	4b1e      	ldr	r3, [pc, #120]	; (8002024 <HAL_GPIO_Init+0x420>)
 8001fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fb2:	6453      	str	r3, [r2, #68]	; 0x44
 8001fb4:	4b1b      	ldr	r3, [pc, #108]	; (8002024 <HAL_GPIO_Init+0x420>)
 8001fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fc0:	4a19      	ldr	r2, [pc, #100]	; (8002028 <HAL_GPIO_Init+0x424>)
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	089b      	lsrs	r3, r3, #2
 8001fc6:	3302      	adds	r3, #2
 8001fc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	220f      	movs	r2, #15
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a11      	ldr	r2, [pc, #68]	; (800202c <HAL_GPIO_Init+0x428>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d029      	beq.n	8002040 <HAL_GPIO_Init+0x43c>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a10      	ldr	r2, [pc, #64]	; (8002030 <HAL_GPIO_Init+0x42c>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d013      	beq.n	800201c <HAL_GPIO_Init+0x418>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_GPIO_Init+0x430>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00d      	beq.n	8002018 <HAL_GPIO_Init+0x414>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <HAL_GPIO_Init+0x434>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d007      	beq.n	8002014 <HAL_GPIO_Init+0x410>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a0d      	ldr	r2, [pc, #52]	; (800203c <HAL_GPIO_Init+0x438>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d101      	bne.n	8002010 <HAL_GPIO_Init+0x40c>
 800200c:	2304      	movs	r3, #4
 800200e:	e018      	b.n	8002042 <HAL_GPIO_Init+0x43e>
 8002010:	2307      	movs	r3, #7
 8002012:	e016      	b.n	8002042 <HAL_GPIO_Init+0x43e>
 8002014:	2303      	movs	r3, #3
 8002016:	e014      	b.n	8002042 <HAL_GPIO_Init+0x43e>
 8002018:	2302      	movs	r3, #2
 800201a:	e012      	b.n	8002042 <HAL_GPIO_Init+0x43e>
 800201c:	2301      	movs	r3, #1
 800201e:	e010      	b.n	8002042 <HAL_GPIO_Init+0x43e>
 8002020:	0800b324 	.word	0x0800b324
 8002024:	40023800 	.word	0x40023800
 8002028:	40013800 	.word	0x40013800
 800202c:	40020000 	.word	0x40020000
 8002030:	40020400 	.word	0x40020400
 8002034:	40020800 	.word	0x40020800
 8002038:	40020c00 	.word	0x40020c00
 800203c:	40021000 	.word	0x40021000
 8002040:	2300      	movs	r3, #0
 8002042:	69fa      	ldr	r2, [r7, #28]
 8002044:	f002 0203 	and.w	r2, r2, #3
 8002048:	0092      	lsls	r2, r2, #2
 800204a:	4093      	lsls	r3, r2
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002052:	4933      	ldr	r1, [pc, #204]	; (8002120 <HAL_GPIO_Init+0x51c>)
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	089b      	lsrs	r3, r3, #2
 8002058:	3302      	adds	r3, #2
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002060:	4b30      	ldr	r3, [pc, #192]	; (8002124 <HAL_GPIO_Init+0x520>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	43db      	mvns	r3, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4013      	ands	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002078:	2b00      	cmp	r3, #0
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0x480>
        {
          temp |= iocurrent;
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	4313      	orrs	r3, r2
 8002082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002084:	4a27      	ldr	r2, [pc, #156]	; (8002124 <HAL_GPIO_Init+0x520>)
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800208a:	4b26      	ldr	r3, [pc, #152]	; (8002124 <HAL_GPIO_Init+0x520>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	43db      	mvns	r3, r3
 8002094:	69ba      	ldr	r2, [r7, #24]
 8002096:	4013      	ands	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d003      	beq.n	80020ae <HAL_GPIO_Init+0x4aa>
        {
          temp |= iocurrent;
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ae:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_GPIO_Init+0x520>)
 80020b0:	69bb      	ldr	r3, [r7, #24]
 80020b2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020b4:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <HAL_GPIO_Init+0x520>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_GPIO_Init+0x4d4>
        {
          temp |= iocurrent;
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	4313      	orrs	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020d8:	4a12      	ldr	r2, [pc, #72]	; (8002124 <HAL_GPIO_Init+0x520>)
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020de:	4b11      	ldr	r3, [pc, #68]	; (8002124 <HAL_GPIO_Init+0x520>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d003      	beq.n	8002102 <HAL_GPIO_Init+0x4fe>
        {
          temp |= iocurrent;
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002102:	4a08      	ldr	r2, [pc, #32]	; (8002124 <HAL_GPIO_Init+0x520>)
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	3301      	adds	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	2b0f      	cmp	r3, #15
 8002112:	f67f ae15 	bls.w	8001d40 <HAL_GPIO_Init+0x13c>
      }
    }
  }
}
 8002116:	bf00      	nop
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	40013800 	.word	0x40013800
 8002124:	40013c00 	.word	0x40013c00

08002128 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	460b      	mov	r3, r1
 8002132:	807b      	strh	r3, [r7, #2]
 8002134:	4613      	mov	r3, r2
 8002136:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d004      	beq.n	8002148 <HAL_GPIO_WritePin+0x20>
 800213e:	887b      	ldrh	r3, [r7, #2]
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	041b      	lsls	r3, r3, #16
 8002144:	2b00      	cmp	r3, #0
 8002146:	d004      	beq.n	8002152 <HAL_GPIO_WritePin+0x2a>
 8002148:	f240 119f 	movw	r1, #415	; 0x19f
 800214c:	480e      	ldr	r0, [pc, #56]	; (8002188 <HAL_GPIO_WritePin+0x60>)
 800214e:	f005 f836 	bl	80071be <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8002152:	787b      	ldrb	r3, [r7, #1]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d007      	beq.n	8002168 <HAL_GPIO_WritePin+0x40>
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d004      	beq.n	8002168 <HAL_GPIO_WritePin+0x40>
 800215e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 8002162:	4809      	ldr	r0, [pc, #36]	; (8002188 <HAL_GPIO_WritePin+0x60>)
 8002164:	f005 f82b 	bl	80071be <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8002168:	787b      	ldrb	r3, [r7, #1]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800216e:	887a      	ldrh	r2, [r7, #2]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002174:	e003      	b.n	800217e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002176:	887b      	ldrh	r3, [r7, #2]
 8002178:	041a      	lsls	r2, r3, #16
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	619a      	str	r2, [r3, #24]
}
 800217e:	bf00      	nop
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	0800b324 	.word	0x0800b324

0800218c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002196:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002198:	695a      	ldr	r2, [r3, #20]
 800219a:	88fb      	ldrh	r3, [r7, #6]
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d006      	beq.n	80021b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021a2:	4a05      	ldr	r2, [pc, #20]	; (80021b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021a8:	88fb      	ldrh	r3, [r7, #6]
 80021aa:	4618      	mov	r0, r3
 80021ac:	f004 fa8c 	bl	80066c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40013c00 	.word	0x40013c00

080021bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e2e0      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	2b0f      	cmp	r3, #15
 80021d4:	d903      	bls.n	80021de <HAL_RCC_OscConfig+0x22>
 80021d6:	21e8      	movs	r1, #232	; 0xe8
 80021d8:	48a3      	ldr	r0, [pc, #652]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 80021da:	f004 fff0 	bl	80071be <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	f000 8088 	beq.w	80022fc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00d      	beq.n	8002210 <HAL_RCC_OscConfig+0x54>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d008      	beq.n	8002210 <HAL_RCC_OscConfig+0x54>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002206:	d003      	beq.n	8002210 <HAL_RCC_OscConfig+0x54>
 8002208:	21ed      	movs	r1, #237	; 0xed
 800220a:	4897      	ldr	r0, [pc, #604]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 800220c:	f004 ffd7 	bl	80071be <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002210:	4b96      	ldr	r3, [pc, #600]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f003 030c 	and.w	r3, r3, #12
 8002218:	2b04      	cmp	r3, #4
 800221a:	d00c      	beq.n	8002236 <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800221c:	4b93      	ldr	r3, [pc, #588]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002224:	2b08      	cmp	r3, #8
 8002226:	d112      	bne.n	800224e <HAL_RCC_OscConfig+0x92>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002228:	4b90      	ldr	r3, [pc, #576]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002234:	d10b      	bne.n	800224e <HAL_RCC_OscConfig+0x92>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002236:	4b8d      	ldr	r3, [pc, #564]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d05b      	beq.n	80022fa <HAL_RCC_OscConfig+0x13e>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d157      	bne.n	80022fa <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e2a0      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002256:	d106      	bne.n	8002266 <HAL_RCC_OscConfig+0xaa>
 8002258:	4a84      	ldr	r2, [pc, #528]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 800225a:	4b84      	ldr	r3, [pc, #528]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002262:	6013      	str	r3, [r2, #0]
 8002264:	e01d      	b.n	80022a2 <HAL_RCC_OscConfig+0xe6>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800226e:	d10c      	bne.n	800228a <HAL_RCC_OscConfig+0xce>
 8002270:	4a7e      	ldr	r2, [pc, #504]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 8002272:	4b7e      	ldr	r3, [pc, #504]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4a7b      	ldr	r2, [pc, #492]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 800227e:	4b7b      	ldr	r3, [pc, #492]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	e00b      	b.n	80022a2 <HAL_RCC_OscConfig+0xe6>
 800228a:	4a78      	ldr	r2, [pc, #480]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 800228c:	4b77      	ldr	r3, [pc, #476]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002294:	6013      	str	r3, [r2, #0]
 8002296:	4a75      	ldr	r2, [pc, #468]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 8002298:	4b74      	ldr	r3, [pc, #464]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d013      	beq.n	80022d2 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7fe fe6f 	bl	8000f8c <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022b2:	f7fe fe6b 	bl	8000f8c <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b64      	cmp	r3, #100	; 0x64
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e265      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022c4:	4b69      	ldr	r3, [pc, #420]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0xf6>
 80022d0:	e014      	b.n	80022fc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d2:	f7fe fe5b 	bl	8000f8c <HAL_GetTick>
 80022d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d8:	e008      	b.n	80022ec <HAL_RCC_OscConfig+0x130>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022da:	f7fe fe57 	bl	8000f8c <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b64      	cmp	r3, #100	; 0x64
 80022e6:	d901      	bls.n	80022ec <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80022e8:	2303      	movs	r3, #3
 80022ea:	e251      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ec:	4b5f      	ldr	r3, [pc, #380]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f0      	bne.n	80022da <HAL_RCC_OscConfig+0x11e>
 80022f8:	e000      	b.n	80022fc <HAL_RCC_OscConfig+0x140>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d079      	beq.n	80023fc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCC_OscConfig+0x166>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2b01      	cmp	r3, #1
 8002316:	d004      	beq.n	8002322 <HAL_RCC_OscConfig+0x166>
 8002318:	f240 111f 	movw	r1, #287	; 0x11f
 800231c:	4852      	ldr	r0, [pc, #328]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 800231e:	f004 ff4e 	bl	80071be <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	2b1f      	cmp	r3, #31
 8002328:	d904      	bls.n	8002334 <HAL_RCC_OscConfig+0x178>
 800232a:	f44f 7190 	mov.w	r1, #288	; 0x120
 800232e:	484e      	ldr	r0, [pc, #312]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 8002330:	f004 ff45 	bl	80071be <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002334:	4b4d      	ldr	r3, [pc, #308]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	f003 030c 	and.w	r3, r3, #12
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00b      	beq.n	8002358 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002340:	4b4a      	ldr	r3, [pc, #296]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002348:	2b08      	cmp	r3, #8
 800234a:	d11c      	bne.n	8002386 <HAL_RCC_OscConfig+0x1ca>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800234c:	4b47      	ldr	r3, [pc, #284]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d116      	bne.n	8002386 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002358:	4b44      	ldr	r3, [pc, #272]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	2b00      	cmp	r3, #0
 8002362:	d005      	beq.n	8002370 <HAL_RCC_OscConfig+0x1b4>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d001      	beq.n	8002370 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e20f      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002370:	493e      	ldr	r1, [pc, #248]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 8002372:	4b3e      	ldr	r3, [pc, #248]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	4313      	orrs	r3, r2
 8002382:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002384:	e03a      	b.n	80023fc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d020      	beq.n	80023d0 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238e:	4b38      	ldr	r3, [pc, #224]	; (8002470 <HAL_RCC_OscConfig+0x2b4>)
 8002390:	2201      	movs	r2, #1
 8002392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fdfa 	bl	8000f8c <HAL_GetTick>
 8002398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe fdf6 	bl	8000f8c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e1f0      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ae:	4b2f      	ldr	r3, [pc, #188]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ba:	492c      	ldr	r1, [pc, #176]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 80023bc:	4b2b      	ldr	r3, [pc, #172]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4313      	orrs	r3, r2
 80023cc:	600b      	str	r3, [r1, #0]
 80023ce:	e015      	b.n	80023fc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d0:	4b27      	ldr	r3, [pc, #156]	; (8002470 <HAL_RCC_OscConfig+0x2b4>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d6:	f7fe fdd9 	bl	8000f8c <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_OscConfig+0x234>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023de:	f7fe fdd5 	bl	8000f8c <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e1cf      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023f0:	4b1e      	ldr	r3, [pc, #120]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f0      	bne.n	80023de <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0308 	and.w	r3, r3, #8
 8002404:	2b00      	cmp	r3, #0
 8002406:	d046      	beq.n	8002496 <HAL_RCC_OscConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCC_OscConfig+0x266>
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d004      	beq.n	8002422 <HAL_RCC_OscConfig+0x266>
 8002418:	f44f 71b0 	mov.w	r1, #352	; 0x160
 800241c:	4812      	ldr	r0, [pc, #72]	; (8002468 <HAL_RCC_OscConfig+0x2ac>)
 800241e:	f004 fece 	bl	80071be <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d016      	beq.n	8002458 <HAL_RCC_OscConfig+0x29c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_RCC_OscConfig+0x2b8>)
 800242c:	2201      	movs	r2, #1
 800242e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002430:	f7fe fdac 	bl	8000f8c <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002438:	f7fe fda8 	bl	8000f8c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b02      	cmp	r3, #2
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e1a2      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <HAL_RCC_OscConfig+0x2b0>)
 800244c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d0f0      	beq.n	8002438 <HAL_RCC_OscConfig+0x27c>
 8002456:	e01e      	b.n	8002496 <HAL_RCC_OscConfig+0x2da>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002458:	4b06      	ldr	r3, [pc, #24]	; (8002474 <HAL_RCC_OscConfig+0x2b8>)
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245e:	f7fe fd95 	bl	8000f8c <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002464:	e011      	b.n	800248a <HAL_RCC_OscConfig+0x2ce>
 8002466:	bf00      	nop
 8002468:	0800b360 	.word	0x0800b360
 800246c:	40023800 	.word	0x40023800
 8002470:	42470000 	.word	0x42470000
 8002474:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002478:	f7fe fd88 	bl	8000f8c <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e182      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800248a:	4b97      	ldr	r3, [pc, #604]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 800248c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f000 80a8 	beq.w	80025f4 <HAL_RCC_OscConfig+0x438>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024a4:	2300      	movs	r3, #0
 80024a6:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00c      	beq.n	80024ca <HAL_RCC_OscConfig+0x30e>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d008      	beq.n	80024ca <HAL_RCC_OscConfig+0x30e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b05      	cmp	r3, #5
 80024be:	d004      	beq.n	80024ca <HAL_RCC_OscConfig+0x30e>
 80024c0:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80024c4:	4889      	ldr	r0, [pc, #548]	; (80026ec <HAL_RCC_OscConfig+0x530>)
 80024c6:	f004 fe7a 	bl	80071be <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ca:	4b87      	ldr	r3, [pc, #540]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10f      	bne.n	80024f6 <HAL_RCC_OscConfig+0x33a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4a83      	ldr	r2, [pc, #524]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 80024dc:	4b82      	ldr	r3, [pc, #520]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024e4:	6413      	str	r3, [r2, #64]	; 0x40
 80024e6:	4b80      	ldr	r3, [pc, #512]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80024f2:	2301      	movs	r3, #1
 80024f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024f6:	4b7e      	ldr	r3, [pc, #504]	; (80026f0 <HAL_RCC_OscConfig+0x534>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d118      	bne.n	8002534 <HAL_RCC_OscConfig+0x378>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002502:	4a7b      	ldr	r2, [pc, #492]	; (80026f0 <HAL_RCC_OscConfig+0x534>)
 8002504:	4b7a      	ldr	r3, [pc, #488]	; (80026f0 <HAL_RCC_OscConfig+0x534>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800250e:	f7fe fd3d 	bl	8000f8c <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x36c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002516:	f7fe fd39 	bl	8000f8c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x36c>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e133      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002528:	4b71      	ldr	r3, [pc, #452]	; (80026f0 <HAL_RCC_OscConfig+0x534>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x35a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d106      	bne.n	800254a <HAL_RCC_OscConfig+0x38e>
 800253c:	4a6a      	ldr	r2, [pc, #424]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 800253e:	4b6a      	ldr	r3, [pc, #424]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 8002540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002542:	f043 0301 	orr.w	r3, r3, #1
 8002546:	6713      	str	r3, [r2, #112]	; 0x70
 8002548:	e01c      	b.n	8002584 <HAL_RCC_OscConfig+0x3c8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	2b05      	cmp	r3, #5
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x3b0>
 8002552:	4a65      	ldr	r2, [pc, #404]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 8002554:	4b64      	ldr	r3, [pc, #400]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 8002556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	6713      	str	r3, [r2, #112]	; 0x70
 800255e:	4a62      	ldr	r2, [pc, #392]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 8002560:	4b61      	ldr	r3, [pc, #388]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 8002562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	6713      	str	r3, [r2, #112]	; 0x70
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0x3c8>
 800256c:	4a5e      	ldr	r2, [pc, #376]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 800256e:	4b5e      	ldr	r3, [pc, #376]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 8002570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002572:	f023 0301 	bic.w	r3, r3, #1
 8002576:	6713      	str	r3, [r2, #112]	; 0x70
 8002578:	4a5b      	ldr	r2, [pc, #364]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 800257a:	4b5b      	ldr	r3, [pc, #364]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	f023 0304 	bic.w	r3, r3, #4
 8002582:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d015      	beq.n	80025b8 <HAL_RCC_OscConfig+0x3fc>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800258c:	f7fe fcfe 	bl	8000f8c <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002592:	e00a      	b.n	80025aa <HAL_RCC_OscConfig+0x3ee>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002594:	f7fe fcfa 	bl	8000f8c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	f241 3288 	movw	r2, #5000	; 0x1388
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d901      	bls.n	80025aa <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80025a6:	2303      	movs	r3, #3
 80025a8:	e0f2      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025aa:	4b4f      	ldr	r3, [pc, #316]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	f003 0302 	and.w	r3, r3, #2
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d0ee      	beq.n	8002594 <HAL_RCC_OscConfig+0x3d8>
 80025b6:	e014      	b.n	80025e2 <HAL_RCC_OscConfig+0x426>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025b8:	f7fe fce8 	bl	8000f8c <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025be:	e00a      	b.n	80025d6 <HAL_RCC_OscConfig+0x41a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025c0:	f7fe fce4 	bl	8000f8c <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x41a>
        {
          return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e0dc      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025d6:	4b44      	ldr	r3, [pc, #272]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1ee      	bne.n	80025c0 <HAL_RCC_OscConfig+0x404>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025e2:	7dfb      	ldrb	r3, [r7, #23]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_RCC_OscConfig+0x438>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e8:	4a3f      	ldr	r2, [pc, #252]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 80025ea:	4b3f      	ldr	r3, [pc, #252]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00c      	beq.n	8002616 <HAL_RCC_OscConfig+0x45a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	2b01      	cmp	r3, #1
 8002602:	d008      	beq.n	8002616 <HAL_RCC_OscConfig+0x45a>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	699b      	ldr	r3, [r3, #24]
 8002608:	2b02      	cmp	r3, #2
 800260a:	d004      	beq.n	8002616 <HAL_RCC_OscConfig+0x45a>
 800260c:	f240 11cf 	movw	r1, #463	; 0x1cf
 8002610:	4836      	ldr	r0, [pc, #216]	; (80026ec <HAL_RCC_OscConfig+0x530>)
 8002612:	f004 fdd4 	bl	80071be <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80b7 	beq.w	800278e <HAL_RCC_OscConfig+0x5d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002620:	4b31      	ldr	r3, [pc, #196]	; (80026e8 <HAL_RCC_OscConfig+0x52c>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	f000 80ae 	beq.w	800278a <HAL_RCC_OscConfig+0x5ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	699b      	ldr	r3, [r3, #24]
 8002632:	2b02      	cmp	r3, #2
 8002634:	f040 8092 	bne.w	800275c <HAL_RCC_OscConfig+0x5a0>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d009      	beq.n	8002654 <HAL_RCC_OscConfig+0x498>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	69db      	ldr	r3, [r3, #28]
 8002644:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002648:	d004      	beq.n	8002654 <HAL_RCC_OscConfig+0x498>
 800264a:	f44f 71ec 	mov.w	r1, #472	; 0x1d8
 800264e:	4827      	ldr	r0, [pc, #156]	; (80026ec <HAL_RCC_OscConfig+0x530>)
 8002650:	f004 fdb5 	bl	80071be <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	2b3f      	cmp	r3, #63	; 0x3f
 800265a:	d904      	bls.n	8002666 <HAL_RCC_OscConfig+0x4aa>
 800265c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8002660:	4822      	ldr	r0, [pc, #136]	; (80026ec <HAL_RCC_OscConfig+0x530>)
 8002662:	f004 fdac 	bl	80071be <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	2b31      	cmp	r3, #49	; 0x31
 800266c:	d904      	bls.n	8002678 <HAL_RCC_OscConfig+0x4bc>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8002676:	d904      	bls.n	8002682 <HAL_RCC_OscConfig+0x4c6>
 8002678:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 800267c:	481b      	ldr	r0, [pc, #108]	; (80026ec <HAL_RCC_OscConfig+0x530>)
 800267e:	f004 fd9e 	bl	80071be <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	2b02      	cmp	r3, #2
 8002688:	d010      	beq.n	80026ac <HAL_RCC_OscConfig+0x4f0>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	2b04      	cmp	r3, #4
 8002690:	d00c      	beq.n	80026ac <HAL_RCC_OscConfig+0x4f0>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	2b06      	cmp	r3, #6
 8002698:	d008      	beq.n	80026ac <HAL_RCC_OscConfig+0x4f0>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d004      	beq.n	80026ac <HAL_RCC_OscConfig+0x4f0>
 80026a2:	f240 11db 	movw	r1, #475	; 0x1db
 80026a6:	4811      	ldr	r0, [pc, #68]	; (80026ec <HAL_RCC_OscConfig+0x530>)
 80026a8:	f004 fd89 	bl	80071be <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d903      	bls.n	80026bc <HAL_RCC_OscConfig+0x500>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b8:	2b0f      	cmp	r3, #15
 80026ba:	d904      	bls.n	80026c6 <HAL_RCC_OscConfig+0x50a>
 80026bc:	f44f 71ee 	mov.w	r1, #476	; 0x1dc
 80026c0:	480a      	ldr	r0, [pc, #40]	; (80026ec <HAL_RCC_OscConfig+0x530>)
 80026c2:	f004 fd7c 	bl	80071be <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c6:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <HAL_RCC_OscConfig+0x538>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026cc:	f7fe fc5e 	bl	8000f8c <HAL_GetTick>
 80026d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026d2:	e011      	b.n	80026f8 <HAL_RCC_OscConfig+0x53c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026d4:	f7fe fc5a 	bl	8000f8c <HAL_GetTick>
 80026d8:	4602      	mov	r2, r0
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	1ad3      	subs	r3, r2, r3
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d90a      	bls.n	80026f8 <HAL_RCC_OscConfig+0x53c>
          {
            return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e054      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
 80026e6:	bf00      	nop
 80026e8:	40023800 	.word	0x40023800
 80026ec:	0800b360 	.word	0x0800b360
 80026f0:	40007000 	.word	0x40007000
 80026f4:	42470060 	.word	0x42470060
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f8:	4b27      	ldr	r3, [pc, #156]	; (8002798 <HAL_RCC_OscConfig+0x5dc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e7      	bne.n	80026d4 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002704:	4924      	ldr	r1, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x5dc>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	69da      	ldr	r2, [r3, #28]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6a1b      	ldr	r3, [r3, #32]
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002714:	019b      	lsls	r3, r3, #6
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271c:	085b      	lsrs	r3, r3, #1
 800271e:	3b01      	subs	r3, #1
 8002720:	041b      	lsls	r3, r3, #16
 8002722:	431a      	orrs	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	061b      	lsls	r3, r3, #24
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800272e:	4b1b      	ldr	r3, [pc, #108]	; (800279c <HAL_RCC_OscConfig+0x5e0>)
 8002730:	2201      	movs	r2, #1
 8002732:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002734:	f7fe fc2a 	bl	8000f8c <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800273a:	e008      	b.n	800274e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273c:	f7fe fc26 	bl	8000f8c <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e020      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800274e:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_RCC_OscConfig+0x5dc>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d0f0      	beq.n	800273c <HAL_RCC_OscConfig+0x580>
 800275a:	e018      	b.n	800278e <HAL_RCC_OscConfig+0x5d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800275c:	4b0f      	ldr	r3, [pc, #60]	; (800279c <HAL_RCC_OscConfig+0x5e0>)
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002762:	f7fe fc13 	bl	8000f8c <HAL_GetTick>
 8002766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002768:	e008      	b.n	800277c <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276a:	f7fe fc0f 	bl	8000f8c <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d901      	bls.n	800277c <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e009      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <HAL_RCC_OscConfig+0x5dc>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1f0      	bne.n	800276a <HAL_RCC_OscConfig+0x5ae>
 8002788:	e001      	b.n	800278e <HAL_RCC_OscConfig+0x5d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_RCC_OscConfig+0x5d4>
    }
  }
  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40023800 	.word	0x40023800
 800279c:	42470060 	.word	0x42470060

080027a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e172      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x24>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b0f      	cmp	r3, #15
 80027c2:	d904      	bls.n	80027ce <HAL_RCC_ClockConfig+0x2e>
 80027c4:	f44f 7110 	mov.w	r1, #576	; 0x240
 80027c8:	487b      	ldr	r0, [pc, #492]	; (80029b8 <HAL_RCC_ClockConfig+0x218>)
 80027ca:	f004 fcf8 	bl	80071be <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d019      	beq.n	8002808 <HAL_RCC_ClockConfig+0x68>
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d016      	beq.n	8002808 <HAL_RCC_ClockConfig+0x68>
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d013      	beq.n	8002808 <HAL_RCC_ClockConfig+0x68>
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d010      	beq.n	8002808 <HAL_RCC_ClockConfig+0x68>
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	2b04      	cmp	r3, #4
 80027ea:	d00d      	beq.n	8002808 <HAL_RCC_ClockConfig+0x68>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	d00a      	beq.n	8002808 <HAL_RCC_ClockConfig+0x68>
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d007      	beq.n	8002808 <HAL_RCC_ClockConfig+0x68>
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	2b07      	cmp	r3, #7
 80027fc:	d004      	beq.n	8002808 <HAL_RCC_ClockConfig+0x68>
 80027fe:	f240 2141 	movw	r1, #577	; 0x241
 8002802:	486d      	ldr	r0, [pc, #436]	; (80029b8 <HAL_RCC_ClockConfig+0x218>)
 8002804:	f004 fcdb 	bl	80071be <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002808:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <HAL_RCC_ClockConfig+0x21c>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 020f 	and.w	r2, r3, #15
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	429a      	cmp	r2, r3
 8002814:	d20c      	bcs.n	8002830 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002816:	4b69      	ldr	r3, [pc, #420]	; (80029bc <HAL_RCC_ClockConfig+0x21c>)
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b67      	ldr	r3, [pc, #412]	; (80029bc <HAL_RCC_ClockConfig+0x21c>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 020f 	and.w	r2, r3, #15
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e134      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2fa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d049      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0304 	and.w	r3, r3, #4
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002848:	4a5d      	ldr	r2, [pc, #372]	; (80029c0 <HAL_RCC_ClockConfig+0x220>)
 800284a:	4b5d      	ldr	r3, [pc, #372]	; (80029c0 <HAL_RCC_ClockConfig+0x220>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002852:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0308 	and.w	r3, r3, #8
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002860:	4a57      	ldr	r2, [pc, #348]	; (80029c0 <HAL_RCC_ClockConfig+0x220>)
 8002862:	4b57      	ldr	r3, [pc, #348]	; (80029c0 <HAL_RCC_ClockConfig+0x220>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800286a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d024      	beq.n	80028be <HAL_RCC_ClockConfig+0x11e>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	2b80      	cmp	r3, #128	; 0x80
 800287a:	d020      	beq.n	80028be <HAL_RCC_ClockConfig+0x11e>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	2b90      	cmp	r3, #144	; 0x90
 8002882:	d01c      	beq.n	80028be <HAL_RCC_ClockConfig+0x11e>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2ba0      	cmp	r3, #160	; 0xa0
 800288a:	d018      	beq.n	80028be <HAL_RCC_ClockConfig+0x11e>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	2bb0      	cmp	r3, #176	; 0xb0
 8002892:	d014      	beq.n	80028be <HAL_RCC_ClockConfig+0x11e>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	2bc0      	cmp	r3, #192	; 0xc0
 800289a:	d010      	beq.n	80028be <HAL_RCC_ClockConfig+0x11e>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2bd0      	cmp	r3, #208	; 0xd0
 80028a2:	d00c      	beq.n	80028be <HAL_RCC_ClockConfig+0x11e>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2be0      	cmp	r3, #224	; 0xe0
 80028aa:	d008      	beq.n	80028be <HAL_RCC_ClockConfig+0x11e>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2bf0      	cmp	r3, #240	; 0xf0
 80028b2:	d004      	beq.n	80028be <HAL_RCC_ClockConfig+0x11e>
 80028b4:	f44f 7119 	mov.w	r1, #612	; 0x264
 80028b8:	483f      	ldr	r0, [pc, #252]	; (80029b8 <HAL_RCC_ClockConfig+0x218>)
 80028ba:	f004 fc80 	bl	80071be <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028be:	4940      	ldr	r1, [pc, #256]	; (80029c0 <HAL_RCC_ClockConfig+0x220>)
 80028c0:	4b3f      	ldr	r3, [pc, #252]	; (80029c0 <HAL_RCC_ClockConfig+0x220>)
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	4313      	orrs	r3, r2
 80028ce:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d059      	beq.n	8002990 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d010      	beq.n	8002906 <HAL_RCC_ClockConfig+0x166>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d00c      	beq.n	8002906 <HAL_RCC_ClockConfig+0x166>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d008      	beq.n	8002906 <HAL_RCC_ClockConfig+0x166>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d004      	beq.n	8002906 <HAL_RCC_ClockConfig+0x166>
 80028fc:	f240 216b 	movw	r1, #619	; 0x26b
 8002900:	482d      	ldr	r0, [pc, #180]	; (80029b8 <HAL_RCC_ClockConfig+0x218>)
 8002902:	f004 fc5c 	bl	80071be <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d107      	bne.n	800291e <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800290e:	4b2c      	ldr	r3, [pc, #176]	; (80029c0 <HAL_RCC_ClockConfig+0x220>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d119      	bne.n	800294e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e0bd      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2fa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b02      	cmp	r3, #2
 8002924:	d003      	beq.n	800292e <HAL_RCC_ClockConfig+0x18e>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800292a:	2b03      	cmp	r3, #3
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800292e:	4b24      	ldr	r3, [pc, #144]	; (80029c0 <HAL_RCC_ClockConfig+0x220>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d109      	bne.n	800294e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e0ad      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2fa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293e:	4b20      	ldr	r3, [pc, #128]	; (80029c0 <HAL_RCC_ClockConfig+0x220>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0a5      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2fa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800294e:	491c      	ldr	r1, [pc, #112]	; (80029c0 <HAL_RCC_ClockConfig+0x220>)
 8002950:	4b1b      	ldr	r3, [pc, #108]	; (80029c0 <HAL_RCC_ClockConfig+0x220>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f023 0203 	bic.w	r2, r3, #3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4313      	orrs	r3, r2
 800295e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002960:	f7fe fb14 	bl	8000f8c <HAL_GetTick>
 8002964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002966:	e00a      	b.n	800297e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002968:	f7fe fb10 	bl	8000f8c <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	f241 3288 	movw	r2, #5000	; 0x1388
 8002976:	4293      	cmp	r3, r2
 8002978:	d901      	bls.n	800297e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e08d      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2fa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297e:	4b10      	ldr	r3, [pc, #64]	; (80029c0 <HAL_RCC_ClockConfig+0x220>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 020c 	and.w	r2, r3, #12
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	429a      	cmp	r2, r3
 800298e:	d1eb      	bne.n	8002968 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_ClockConfig+0x21c>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 020f 	and.w	r2, r3, #15
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	429a      	cmp	r2, r3
 800299c:	d912      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x224>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800299e:	4b07      	ldr	r3, [pc, #28]	; (80029bc <HAL_RCC_ClockConfig+0x21c>)
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	b2d2      	uxtb	r2, r2
 80029a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_ClockConfig+0x21c>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 020f 	and.w	r2, r3, #15
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d007      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e070      	b.n	8002a9a <HAL_RCC_ClockConfig+0x2fa>
 80029b8:	0800b360 	.word	0x0800b360
 80029bc:	40023c00 	.word	0x40023c00
 80029c0:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0304 	and.w	r3, r3, #4
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d025      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d018      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x26a>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029e0:	d013      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x26a>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80029ea:	d00e      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x26a>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80029f4:	d009      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x26a>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80029fe:	d004      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x26a>
 8002a00:	f240 21a9 	movw	r1, #681	; 0x2a9
 8002a04:	4827      	ldr	r0, [pc, #156]	; (8002aa4 <HAL_RCC_ClockConfig+0x304>)
 8002a06:	f004 fbda 	bl	80071be <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a0a:	4927      	ldr	r1, [pc, #156]	; (8002aa8 <HAL_RCC_ClockConfig+0x308>)
 8002a0c:	4b26      	ldr	r3, [pc, #152]	; (8002aa8 <HAL_RCC_ClockConfig+0x308>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0308 	and.w	r3, r3, #8
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d026      	beq.n	8002a76 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	691b      	ldr	r3, [r3, #16]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d018      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x2c2>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a38:	d013      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x2c2>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8002a42:	d00e      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x2c2>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	691b      	ldr	r3, [r3, #16]
 8002a48:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x2c2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	691b      	ldr	r3, [r3, #16]
 8002a52:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 8002a56:	d004      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x2c2>
 8002a58:	f44f 712c 	mov.w	r1, #688	; 0x2b0
 8002a5c:	4811      	ldr	r0, [pc, #68]	; (8002aa4 <HAL_RCC_ClockConfig+0x304>)
 8002a5e:	f004 fbae 	bl	80071be <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a62:	4911      	ldr	r1, [pc, #68]	; (8002aa8 <HAL_RCC_ClockConfig+0x308>)
 8002a64:	4b10      	ldr	r3, [pc, #64]	; (8002aa8 <HAL_RCC_ClockConfig+0x308>)
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4313      	orrs	r3, r2
 8002a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a76:	f000 f81d 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a7a:	4601      	mov	r1, r0
 8002a7c:	4b0a      	ldr	r3, [pc, #40]	; (8002aa8 <HAL_RCC_ClockConfig+0x308>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	091b      	lsrs	r3, r3, #4
 8002a82:	f003 030f 	and.w	r3, r3, #15
 8002a86:	4a09      	ldr	r2, [pc, #36]	; (8002aac <HAL_RCC_ClockConfig+0x30c>)
 8002a88:	5cd3      	ldrb	r3, [r2, r3]
 8002a8a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a8e:	4a08      	ldr	r2, [pc, #32]	; (8002ab0 <HAL_RCC_ClockConfig+0x310>)
 8002a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002a92:	2000      	movs	r0, #0
 8002a94:	f7fe fa36 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	0800b360 	.word	0x0800b360
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	0800b9c0 	.word	0x0800b9c0
 8002ab0:	20000134 	.word	0x20000134

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab8:	b08f      	sub	sp, #60	; 0x3c
 8002aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002acc:	4b62      	ldr	r3, [pc, #392]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b04      	cmp	r3, #4
 8002ad6:	d007      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d008      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x3a>
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f040 80b2 	bne.w	8002c46 <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae2:	4b5e      	ldr	r3, [pc, #376]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ae4:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 8002ae6:	e0b1      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae8:	4b5d      	ldr	r3, [pc, #372]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002aea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002aec:	e0ae      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aee:	4b5a      	ldr	r3, [pc, #360]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002af8:	4b57      	ldr	r3, [pc, #348]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d04e      	beq.n	8002ba2 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b04:	4b54      	ldr	r3, [pc, #336]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	099b      	lsrs	r3, r3, #6
 8002b0a:	f04f 0400 	mov.w	r4, #0
 8002b0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b12:	f04f 0200 	mov.w	r2, #0
 8002b16:	ea01 0103 	and.w	r1, r1, r3
 8002b1a:	ea02 0204 	and.w	r2, r2, r4
 8002b1e:	460b      	mov	r3, r1
 8002b20:	4614      	mov	r4, r2
 8002b22:	0160      	lsls	r0, r4, #5
 8002b24:	6278      	str	r0, [r7, #36]	; 0x24
 8002b26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b28:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002b2c:	6278      	str	r0, [r7, #36]	; 0x24
 8002b2e:	015b      	lsls	r3, r3, #5
 8002b30:	623b      	str	r3, [r7, #32]
 8002b32:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002b36:	1a5b      	subs	r3, r3, r1
 8002b38:	eb64 0402 	sbc.w	r4, r4, r2
 8002b3c:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002b40:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8002b44:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002b48:	ebb8 0803 	subs.w	r8, r8, r3
 8002b4c:	eb69 0904 	sbc.w	r9, r9, r4
 8002b50:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b54:	61fb      	str	r3, [r7, #28]
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b5c:	61fb      	str	r3, [r7, #28]
 8002b5e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8002b62:	61bb      	str	r3, [r7, #24]
 8002b64:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002b68:	eb18 0801 	adds.w	r8, r8, r1
 8002b6c:	eb49 0902 	adc.w	r9, r9, r2
 8002b70:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002b74:	617b      	str	r3, [r7, #20]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8002b82:	613b      	str	r3, [r7, #16]
 8002b84:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002b88:	4640      	mov	r0, r8
 8002b8a:	4649      	mov	r1, r9
 8002b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b8e:	f04f 0400 	mov.w	r4, #0
 8002b92:	461a      	mov	r2, r3
 8002b94:	4623      	mov	r3, r4
 8002b96:	f7fe f80b 	bl	8000bb0 <__aeabi_uldivmod>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	460c      	mov	r4, r1
 8002b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba0:	e043      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ba2:	4b2d      	ldr	r3, [pc, #180]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	099b      	lsrs	r3, r3, #6
 8002ba8:	f04f 0400 	mov.w	r4, #0
 8002bac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002bb0:	f04f 0200 	mov.w	r2, #0
 8002bb4:	ea01 0103 	and.w	r1, r1, r3
 8002bb8:	ea02 0204 	and.w	r2, r2, r4
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	4614      	mov	r4, r2
 8002bc0:	0160      	lsls	r0, r4, #5
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	68f8      	ldr	r0, [r7, #12]
 8002bc6:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	015b      	lsls	r3, r3, #5
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002bd4:	1a5b      	subs	r3, r3, r1
 8002bd6:	eb64 0402 	sbc.w	r4, r4, r2
 8002bda:	01a6      	lsls	r6, r4, #6
 8002bdc:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002be0:	019d      	lsls	r5, r3, #6
 8002be2:	1aed      	subs	r5, r5, r3
 8002be4:	eb66 0604 	sbc.w	r6, r6, r4
 8002be8:	00f3      	lsls	r3, r6, #3
 8002bea:	607b      	str	r3, [r7, #4]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8002bf2:	607b      	str	r3, [r7, #4]
 8002bf4:	00eb      	lsls	r3, r5, #3
 8002bf6:	603b      	str	r3, [r7, #0]
 8002bf8:	e897 0060 	ldmia.w	r7, {r5, r6}
 8002bfc:	186d      	adds	r5, r5, r1
 8002bfe:	eb46 0602 	adc.w	r6, r6, r2
 8002c02:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 8002c06:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 8002c0a:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8002c0e:	4655      	mov	r5, sl
 8002c10:	465e      	mov	r6, fp
 8002c12:	4628      	mov	r0, r5
 8002c14:	4631      	mov	r1, r6
 8002c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c18:	f04f 0400 	mov.w	r4, #0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4623      	mov	r3, r4
 8002c20:	f7fd ffc6 	bl	8000bb0 <__aeabi_uldivmod>
 8002c24:	4603      	mov	r3, r0
 8002c26:	460c      	mov	r4, r1
 8002c28:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0c1b      	lsrs	r3, r3, #16
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	3301      	adds	r3, #1
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8002c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c44:	e002      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c46:	4b05      	ldr	r3, [pc, #20]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c48:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c4a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	373c      	adds	r7, #60	; 0x3c
 8002c52:	46bd      	mov	sp, r7
 8002c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	00f42400 	.word	0x00f42400
 8002c60:	007a1200 	.word	0x007a1200

08002c64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000134 	.word	0x20000134

08002c7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c80:	f7ff fff0 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002c84:	4601      	mov	r1, r0
 8002c86:	4b05      	ldr	r3, [pc, #20]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	0a9b      	lsrs	r3, r3, #10
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	4a03      	ldr	r2, [pc, #12]	; (8002ca0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
 8002c94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	0800b9d0 	.word	0x0800b9d0

08002ca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ca8:	f7ff ffdc 	bl	8002c64 <HAL_RCC_GetHCLKFreq>
 8002cac:	4601      	mov	r1, r0
 8002cae:	4b05      	ldr	r3, [pc, #20]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	0b5b      	lsrs	r3, r3, #13
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	4a03      	ldr	r2, [pc, #12]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cba:	5cd3      	ldrb	r3, [r2, r3]
 8002cbc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	bd80      	pop	{r7, pc}
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	0800b9d0 	.word	0x0800b9d0

08002ccc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e10d      	b.n	8002efa <HAL_SPI_Init+0x22e>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a88      	ldr	r2, [pc, #544]	; (8002f04 <HAL_SPI_Init+0x238>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d013      	beq.n	8002d10 <HAL_SPI_Init+0x44>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a86      	ldr	r2, [pc, #536]	; (8002f08 <HAL_SPI_Init+0x23c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00e      	beq.n	8002d10 <HAL_SPI_Init+0x44>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a85      	ldr	r2, [pc, #532]	; (8002f0c <HAL_SPI_Init+0x240>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d009      	beq.n	8002d10 <HAL_SPI_Init+0x44>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a83      	ldr	r2, [pc, #524]	; (8002f10 <HAL_SPI_Init+0x244>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d004      	beq.n	8002d10 <HAL_SPI_Init+0x44>
 8002d06:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8002d0a:	4882      	ldr	r0, [pc, #520]	; (8002f14 <HAL_SPI_Init+0x248>)
 8002d0c:	f004 fa57 	bl	80071be <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d009      	beq.n	8002d2c <HAL_SPI_Init+0x60>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d20:	d004      	beq.n	8002d2c <HAL_SPI_Init+0x60>
 8002d22:	f240 113f 	movw	r1, #319	; 0x13f
 8002d26:	487b      	ldr	r0, [pc, #492]	; (8002f14 <HAL_SPI_Init+0x248>)
 8002d28:	f004 fa49 	bl	80071be <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00e      	beq.n	8002d52 <HAL_SPI_Init+0x86>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d3c:	d009      	beq.n	8002d52 <HAL_SPI_Init+0x86>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d46:	d004      	beq.n	8002d52 <HAL_SPI_Init+0x86>
 8002d48:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8002d4c:	4871      	ldr	r0, [pc, #452]	; (8002f14 <HAL_SPI_Init+0x248>)
 8002d4e:	f004 fa36 	bl	80071be <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d5a:	d008      	beq.n	8002d6e <HAL_SPI_Init+0xa2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d004      	beq.n	8002d6e <HAL_SPI_Init+0xa2>
 8002d64:	f240 1141 	movw	r1, #321	; 0x141
 8002d68:	486a      	ldr	r0, [pc, #424]	; (8002f14 <HAL_SPI_Init+0x248>)
 8002d6a:	f004 fa28 	bl	80071be <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d76:	d00d      	beq.n	8002d94 <HAL_SPI_Init+0xc8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d009      	beq.n	8002d94 <HAL_SPI_Init+0xc8>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699b      	ldr	r3, [r3, #24]
 8002d84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d88:	d004      	beq.n	8002d94 <HAL_SPI_Init+0xc8>
 8002d8a:	f44f 71a1 	mov.w	r1, #322	; 0x142
 8002d8e:	4861      	ldr	r0, [pc, #388]	; (8002f14 <HAL_SPI_Init+0x248>)
 8002d90:	f004 fa15 	bl	80071be <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d020      	beq.n	8002dde <HAL_SPI_Init+0x112>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	69db      	ldr	r3, [r3, #28]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d01c      	beq.n	8002dde <HAL_SPI_Init+0x112>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2b10      	cmp	r3, #16
 8002daa:	d018      	beq.n	8002dde <HAL_SPI_Init+0x112>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	2b18      	cmp	r3, #24
 8002db2:	d014      	beq.n	8002dde <HAL_SPI_Init+0x112>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	69db      	ldr	r3, [r3, #28]
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d010      	beq.n	8002dde <HAL_SPI_Init+0x112>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	69db      	ldr	r3, [r3, #28]
 8002dc0:	2b28      	cmp	r3, #40	; 0x28
 8002dc2:	d00c      	beq.n	8002dde <HAL_SPI_Init+0x112>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	2b30      	cmp	r3, #48	; 0x30
 8002dca:	d008      	beq.n	8002dde <HAL_SPI_Init+0x112>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	2b38      	cmp	r3, #56	; 0x38
 8002dd2:	d004      	beq.n	8002dde <HAL_SPI_Init+0x112>
 8002dd4:	f240 1143 	movw	r1, #323	; 0x143
 8002dd8:	484e      	ldr	r0, [pc, #312]	; (8002f14 <HAL_SPI_Init+0x248>)
 8002dda:	f004 f9f0 	bl	80071be <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a1b      	ldr	r3, [r3, #32]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d008      	beq.n	8002df8 <HAL_SPI_Init+0x12c>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a1b      	ldr	r3, [r3, #32]
 8002dea:	2b80      	cmp	r3, #128	; 0x80
 8002dec:	d004      	beq.n	8002df8 <HAL_SPI_Init+0x12c>
 8002dee:	f44f 71a2 	mov.w	r1, #324	; 0x144
 8002df2:	4848      	ldr	r0, [pc, #288]	; (8002f14 <HAL_SPI_Init+0x248>)
 8002df4:	f004 f9e3 	bl	80071be <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d008      	beq.n	8002e12 <HAL_SPI_Init+0x146>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d004      	beq.n	8002e12 <HAL_SPI_Init+0x146>
 8002e08:	f240 1145 	movw	r1, #325	; 0x145
 8002e0c:	4841      	ldr	r0, [pc, #260]	; (8002f14 <HAL_SPI_Init+0x248>)
 8002e0e:	f004 f9d6 	bl	80071be <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d119      	bne.n	8002e4e <HAL_SPI_Init+0x182>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d008      	beq.n	8002e34 <HAL_SPI_Init+0x168>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	691b      	ldr	r3, [r3, #16]
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d004      	beq.n	8002e34 <HAL_SPI_Init+0x168>
 8002e2a:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8002e2e:	4839      	ldr	r0, [pc, #228]	; (8002f14 <HAL_SPI_Init+0x248>)
 8002e30:	f004 f9c5 	bl	80071be <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	695b      	ldr	r3, [r3, #20]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d008      	beq.n	8002e4e <HAL_SPI_Init+0x182>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d004      	beq.n	8002e4e <HAL_SPI_Init+0x182>
 8002e44:	f240 1149 	movw	r1, #329	; 0x149
 8002e48:	4832      	ldr	r0, [pc, #200]	; (8002f14 <HAL_SPI_Init+0x248>)
 8002e4a:	f004 f9b8 	bl	80071be <assert_failed>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d106      	bne.n	8002e6e <HAL_SPI_Init+0x1a2>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f004 fc6b 	bl	8007744 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2202      	movs	r2, #2
 8002e72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	6812      	ldr	r2, [r2, #0]
 8002e7e:	6812      	ldr	r2, [r2, #0]
 8002e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	687a      	ldr	r2, [r7, #4]
 8002e8c:	6851      	ldr	r1, [r2, #4]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	6892      	ldr	r2, [r2, #8]
 8002e92:	4311      	orrs	r1, r2
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	68d2      	ldr	r2, [r2, #12]
 8002e98:	4311      	orrs	r1, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6912      	ldr	r2, [r2, #16]
 8002e9e:	4311      	orrs	r1, r2
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	6952      	ldr	r2, [r2, #20]
 8002ea4:	4311      	orrs	r1, r2
 8002ea6:	687a      	ldr	r2, [r7, #4]
 8002ea8:	6992      	ldr	r2, [r2, #24]
 8002eaa:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002eae:	4311      	orrs	r1, r2
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	69d2      	ldr	r2, [r2, #28]
 8002eb4:	4311      	orrs	r1, r2
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	6a12      	ldr	r2, [r2, #32]
 8002eba:	4311      	orrs	r1, r2
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6992      	ldr	r2, [r2, #24]
 8002ecc:	0c12      	lsrs	r2, r2, #16
 8002ece:	f002 0104 	and.w	r1, r2, #4
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	687a      	ldr	r2, [r7, #4]
 8002ee0:	6812      	ldr	r2, [r2, #0]
 8002ee2:	69d2      	ldr	r2, [r2, #28]
 8002ee4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ee8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002ef8:	2300      	movs	r3, #0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	40013000 	.word	0x40013000
 8002f08:	40003800 	.word	0x40003800
 8002f0c:	40003c00 	.word	0x40003c00
 8002f10:	40013400 	.word	0x40013400
 8002f14:	0800b398 	.word	0x0800b398

08002f18 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b08c      	sub	sp, #48	; 0x30
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	60f8      	str	r0, [r7, #12]
 8002f20:	60b9      	str	r1, [r7, #8]
 8002f22:	607a      	str	r2, [r7, #4]
 8002f24:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002f26:	2301      	movs	r3, #1
 8002f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <HAL_SPI_TransmitReceive+0x2a>
 8002f38:	f240 4155 	movw	r1, #1109	; 0x455
 8002f3c:	4884      	ldr	r0, [pc, #528]	; (8003150 <HAL_SPI_TransmitReceive+0x238>)
 8002f3e:	f004 f93e 	bl	80071be <assert_failed>

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d101      	bne.n	8002f50 <HAL_SPI_TransmitReceive+0x38>
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	e18b      	b.n	8003268 <HAL_SPI_TransmitReceive+0x350>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f58:	f7fe f818 	bl	8000f8c <HAL_GetTick>
 8002f5c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002f72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d00f      	beq.n	8002f9a <HAL_SPI_TransmitReceive+0x82>
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f80:	d107      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d103      	bne.n	8002f92 <HAL_SPI_TransmitReceive+0x7a>
 8002f8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d003      	beq.n	8002f9a <HAL_SPI_TransmitReceive+0x82>
  {
    errorcode = HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
 8002f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002f98:	e15c      	b.n	8003254 <HAL_SPI_TransmitReceive+0x33c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d005      	beq.n	8002fac <HAL_SPI_TransmitReceive+0x94>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d002      	beq.n	8002fac <HAL_SPI_TransmitReceive+0x94>
 8002fa6:	887b      	ldrh	r3, [r7, #2]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d103      	bne.n	8002fb4 <HAL_SPI_TransmitReceive+0x9c>
  {
    errorcode = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8002fb2:	e14f      	b.n	8003254 <HAL_SPI_TransmitReceive+0x33c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	d003      	beq.n	8002fc8 <HAL_SPI_TransmitReceive+0xb0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2205      	movs	r2, #5
 8002fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	687a      	ldr	r2, [r7, #4]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	887a      	ldrh	r2, [r7, #2]
 8002fd8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	887a      	ldrh	r2, [r7, #2]
 8002fde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	887a      	ldrh	r2, [r7, #2]
 8002fea:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	887a      	ldrh	r2, [r7, #2]
 8002ff0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003008:	2b40      	cmp	r3, #64	; 0x40
 800300a:	d007      	beq.n	800301c <HAL_SPI_TransmitReceive+0x104>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	6812      	ldr	r2, [r2, #0]
 8003014:	6812      	ldr	r2, [r2, #0]
 8003016:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800301a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003024:	d178      	bne.n	8003118 <HAL_SPI_TransmitReceive+0x200>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_SPI_TransmitReceive+0x11c>
 800302e:	8b7b      	ldrh	r3, [r7, #26]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d166      	bne.n	8003102 <HAL_SPI_TransmitReceive+0x1ea>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800303c:	8812      	ldrh	r2, [r2, #0]
 800303e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003044:	1c9a      	adds	r2, r3, #2
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800304e:	b29b      	uxth	r3, r3
 8003050:	3b01      	subs	r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003058:	e053      	b.n	8003102 <HAL_SPI_TransmitReceive+0x1ea>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	689b      	ldr	r3, [r3, #8]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b02      	cmp	r3, #2
 8003066:	d11b      	bne.n	80030a0 <HAL_SPI_TransmitReceive+0x188>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800306c:	b29b      	uxth	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d016      	beq.n	80030a0 <HAL_SPI_TransmitReceive+0x188>
 8003072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003074:	2b01      	cmp	r3, #1
 8003076:	d113      	bne.n	80030a0 <HAL_SPI_TransmitReceive+0x188>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003080:	8812      	ldrh	r2, [r2, #0]
 8003082:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003088:	1c9a      	adds	r2, r3, #2
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003092:	b29b      	uxth	r3, r3
 8003094:	3b01      	subs	r3, #1
 8003096:	b29a      	uxth	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800309c:	2300      	movs	r3, #0
 800309e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d119      	bne.n	80030e2 <HAL_SPI_TransmitReceive+0x1ca>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d014      	beq.n	80030e2 <HAL_SPI_TransmitReceive+0x1ca>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	68d2      	ldr	r2, [r2, #12]
 80030c2:	b292      	uxth	r2, r2
 80030c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ca:	1c9a      	adds	r2, r3, #2
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80030de:	2301      	movs	r3, #1
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80030e2:	f7fd ff53 	bl	8000f8c <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	1ad2      	subs	r2, r2, r3
 80030ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d307      	bcc.n	8003102 <HAL_SPI_TransmitReceive+0x1ea>
 80030f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030f8:	d003      	beq.n	8003102 <HAL_SPI_TransmitReceive+0x1ea>
      {
        errorcode = HAL_TIMEOUT;
 80030fa:	2303      	movs	r3, #3
 80030fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003100:	e0a8      	b.n	8003254 <HAL_SPI_TransmitReceive+0x33c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003106:	b29b      	uxth	r3, r3
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1a6      	bne.n	800305a <HAL_SPI_TransmitReceive+0x142>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003110:	b29b      	uxth	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1a1      	bne.n	800305a <HAL_SPI_TransmitReceive+0x142>
 8003116:	e07f      	b.n	8003218 <HAL_SPI_TransmitReceive+0x300>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <HAL_SPI_TransmitReceive+0x20e>
 8003120:	8b7b      	ldrh	r3, [r7, #26]
 8003122:	2b01      	cmp	r3, #1
 8003124:	d16e      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x2ec>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	330c      	adds	r3, #12
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003130:	7812      	ldrb	r2, [r2, #0]
 8003132:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800314c:	e05a      	b.n	8003204 <HAL_SPI_TransmitReceive+0x2ec>
 800314e:	bf00      	nop
 8003150:	0800b398 	.word	0x0800b398
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b02      	cmp	r3, #2
 8003160:	d11c      	bne.n	800319c <HAL_SPI_TransmitReceive+0x284>
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003166:	b29b      	uxth	r3, r3
 8003168:	2b00      	cmp	r3, #0
 800316a:	d017      	beq.n	800319c <HAL_SPI_TransmitReceive+0x284>
 800316c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800316e:	2b01      	cmp	r3, #1
 8003170:	d114      	bne.n	800319c <HAL_SPI_TransmitReceive+0x284>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	330c      	adds	r3, #12
 8003178:	68fa      	ldr	r2, [r7, #12]
 800317a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800317c:	7812      	ldrb	r2, [r2, #0]
 800317e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003184:	1c5a      	adds	r2, r3, #1
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800318e:	b29b      	uxth	r3, r3
 8003190:	3b01      	subs	r3, #1
 8003192:	b29a      	uxth	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d119      	bne.n	80031de <HAL_SPI_TransmitReceive+0x2c6>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d014      	beq.n	80031de <HAL_SPI_TransmitReceive+0x2c6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	68d2      	ldr	r2, [r2, #12]
 80031be:	b2d2      	uxtb	r2, r2
 80031c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	1c5a      	adds	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	3b01      	subs	r3, #1
 80031d4:	b29a      	uxth	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80031da:	2301      	movs	r3, #1
 80031dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031de:	f7fd fed5 	bl	8000f8c <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	1ad2      	subs	r2, r2, r3
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d303      	bcc.n	80031f6 <HAL_SPI_TransmitReceive+0x2de>
 80031ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80031f4:	d102      	bne.n	80031fc <HAL_SPI_TransmitReceive+0x2e4>
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d103      	bne.n	8003204 <HAL_SPI_TransmitReceive+0x2ec>
      {
        errorcode = HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003202:	e027      	b.n	8003254 <HAL_SPI_TransmitReceive+0x33c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003208:	b29b      	uxth	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1a2      	bne.n	8003154 <HAL_SPI_TransmitReceive+0x23c>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d19d      	bne.n	8003154 <HAL_SPI_TransmitReceive+0x23c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800321a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800321c:	68f8      	ldr	r0, [r7, #12]
 800321e:	f000 f891 	bl	8003344 <SPI_EndRxTxTransaction>
 8003222:	4603      	mov	r3, r0
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <HAL_SPI_TransmitReceive+0x31e>
  {
    errorcode = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2220      	movs	r2, #32
 8003232:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003234:	e00e      	b.n	8003254 <HAL_SPI_TransmitReceive+0x33c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d10a      	bne.n	8003254 <HAL_SPI_TransmitReceive+0x33c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800323e:	2300      	movs	r3, #0
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	617b      	str	r3, [r7, #20]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	617b      	str	r3, [r7, #20]
 8003252:	697b      	ldr	r3, [r7, #20]
  }

error :
  hspi->State = HAL_SPI_STATE_READY;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003264:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003268:	4618      	mov	r0, r3
 800326a:	3730      	adds	r7, #48	; 0x30
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	603b      	str	r3, [r7, #0]
 800327c:	4613      	mov	r3, r2
 800327e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003280:	e04c      	b.n	800331c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003288:	d048      	beq.n	800331c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800328a:	f7fd fe7f 	bl	8000f8c <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	1ad2      	subs	r2, r2, r3
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	429a      	cmp	r2, r3
 8003298:	d202      	bcs.n	80032a0 <SPI_WaitFlagStateUntilTimeout+0x30>
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d13d      	bne.n	800331c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	6812      	ldr	r2, [r2, #0]
 80032a8:	6852      	ldr	r2, [r2, #4]
 80032aa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80032ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032b8:	d111      	bne.n	80032de <SPI_WaitFlagStateUntilTimeout+0x6e>
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c2:	d004      	beq.n	80032ce <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032cc:	d107      	bne.n	80032de <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	6812      	ldr	r2, [r2, #0]
 80032d6:	6812      	ldr	r2, [r2, #0]
 80032d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e6:	d10f      	bne.n	8003308 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	6812      	ldr	r2, [r2, #0]
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032f6:	601a      	str	r2, [r3, #0]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	6812      	ldr	r2, [r2, #0]
 8003300:	6812      	ldr	r2, [r2, #0]
 8003302:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003306:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e00f      	b.n	800333c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	689a      	ldr	r2, [r3, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	401a      	ands	r2, r3
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	429a      	cmp	r2, r3
 800332a:	bf0c      	ite	eq
 800332c:	2301      	moveq	r3, #1
 800332e:	2300      	movne	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	429a      	cmp	r2, r3
 8003338:	d1a3      	bne.n	8003282 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800333a:	2300      	movs	r3, #0
}
 800333c:	4618      	mov	r0, r3
 800333e:	3710      	adds	r7, #16
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}

08003344 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af02      	add	r7, sp, #8
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2200      	movs	r2, #0
 8003358:	2180      	movs	r1, #128	; 0x80
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f7ff ff88 	bl	8003270 <SPI_WaitFlagStateUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	f043 0220 	orr.w	r2, r3, #32
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e000      	b.n	8003378 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b086      	sub	sp, #24
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e17e      	b.n	8003692 <HAL_TIM_Encoder_Init+0x312>
  }

  /* Check the parameters */
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d014      	beq.n	80033c6 <HAL_TIM_Encoder_Init+0x46>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d010      	beq.n	80033c6 <HAL_TIM_Encoder_Init+0x46>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	2b20      	cmp	r3, #32
 80033aa:	d00c      	beq.n	80033c6 <HAL_TIM_Encoder_Init+0x46>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d008      	beq.n	80033c6 <HAL_TIM_Encoder_Init+0x46>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b60      	cmp	r3, #96	; 0x60
 80033ba:	d004      	beq.n	80033c6 <HAL_TIM_Encoder_Init+0x46>
 80033bc:	f640 2129 	movw	r1, #2601	; 0xa29
 80033c0:	4872      	ldr	r0, [pc, #456]	; (800358c <HAL_TIM_Encoder_Init+0x20c>)
 80033c2:	f003 fefc 	bl	80071be <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00e      	beq.n	80033ec <HAL_TIM_Encoder_Init+0x6c>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	691b      	ldr	r3, [r3, #16]
 80033d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033d6:	d009      	beq.n	80033ec <HAL_TIM_Encoder_Init+0x6c>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	691b      	ldr	r3, [r3, #16]
 80033dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80033e0:	d004      	beq.n	80033ec <HAL_TIM_Encoder_Init+0x6c>
 80033e2:	f640 212a 	movw	r1, #2602	; 0xa2a
 80033e6:	4869      	ldr	r0, [pc, #420]	; (800358c <HAL_TIM_Encoder_Init+0x20c>)
 80033e8:	f003 fee9 	bl	80071be <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_TIM_Encoder_Init+0x86>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	699b      	ldr	r3, [r3, #24]
 80033f8:	2b80      	cmp	r3, #128	; 0x80
 80033fa:	d004      	beq.n	8003406 <HAL_TIM_Encoder_Init+0x86>
 80033fc:	f640 212b 	movw	r1, #2603	; 0xa2b
 8003400:	4862      	ldr	r0, [pc, #392]	; (800358c <HAL_TIM_Encoder_Init+0x20c>)
 8003402:	f003 fedc 	bl	80071be <assert_failed>
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a61      	ldr	r2, [pc, #388]	; (8003590 <HAL_TIM_Encoder_Init+0x210>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d01d      	beq.n	800344c <HAL_TIM_Encoder_Init+0xcc>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003418:	d018      	beq.n	800344c <HAL_TIM_Encoder_Init+0xcc>
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a5d      	ldr	r2, [pc, #372]	; (8003594 <HAL_TIM_Encoder_Init+0x214>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d013      	beq.n	800344c <HAL_TIM_Encoder_Init+0xcc>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a5b      	ldr	r2, [pc, #364]	; (8003598 <HAL_TIM_Encoder_Init+0x218>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00e      	beq.n	800344c <HAL_TIM_Encoder_Init+0xcc>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a5a      	ldr	r2, [pc, #360]	; (800359c <HAL_TIM_Encoder_Init+0x21c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d009      	beq.n	800344c <HAL_TIM_Encoder_Init+0xcc>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a58      	ldr	r2, [pc, #352]	; (80035a0 <HAL_TIM_Encoder_Init+0x220>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d004      	beq.n	800344c <HAL_TIM_Encoder_Init+0xcc>
 8003442:	f640 212c 	movw	r1, #2604	; 0xa2c
 8003446:	4851      	ldr	r0, [pc, #324]	; (800358c <HAL_TIM_Encoder_Init+0x20c>)
 8003448:	f003 feb9 	bl	80071be <assert_failed>
  assert_param(IS_TIM_ENCODER_MODE(sConfig->EncoderMode));
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d00c      	beq.n	800346e <HAL_TIM_Encoder_Init+0xee>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2b02      	cmp	r3, #2
 800345a:	d008      	beq.n	800346e <HAL_TIM_Encoder_Init+0xee>
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2b03      	cmp	r3, #3
 8003462:	d004      	beq.n	800346e <HAL_TIM_Encoder_Init+0xee>
 8003464:	f640 212d 	movw	r1, #2605	; 0xa2d
 8003468:	4848      	ldr	r0, [pc, #288]	; (800358c <HAL_TIM_Encoder_Init+0x20c>)
 800346a:	f003 fea8 	bl	80071be <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC1Selection));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d00c      	beq.n	8003490 <HAL_TIM_Encoder_Init+0x110>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	2b02      	cmp	r3, #2
 800347c:	d008      	beq.n	8003490 <HAL_TIM_Encoder_Init+0x110>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	2b03      	cmp	r3, #3
 8003484:	d004      	beq.n	8003490 <HAL_TIM_Encoder_Init+0x110>
 8003486:	f640 212e 	movw	r1, #2606	; 0xa2e
 800348a:	4840      	ldr	r0, [pc, #256]	; (800358c <HAL_TIM_Encoder_Init+0x20c>)
 800348c:	f003 fe97 	bl	80071be <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->IC2Selection));
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d00c      	beq.n	80034b2 <HAL_TIM_Encoder_Init+0x132>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	2b02      	cmp	r3, #2
 800349e:	d008      	beq.n	80034b2 <HAL_TIM_Encoder_Init+0x132>
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d004      	beq.n	80034b2 <HAL_TIM_Encoder_Init+0x132>
 80034a8:	f640 212f 	movw	r1, #2607	; 0xa2f
 80034ac:	4837      	ldr	r0, [pc, #220]	; (800358c <HAL_TIM_Encoder_Init+0x20c>)
 80034ae:	f003 fe86 	bl	80071be <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <HAL_TIM_Encoder_Init+0x154>
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d008      	beq.n	80034d4 <HAL_TIM_Encoder_Init+0x154>
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b0a      	cmp	r3, #10
 80034c8:	d004      	beq.n	80034d4 <HAL_TIM_Encoder_Init+0x154>
 80034ca:	f44f 6123 	mov.w	r1, #2608	; 0xa30
 80034ce:	482f      	ldr	r0, [pc, #188]	; (800358c <HAL_TIM_Encoder_Init+0x20c>)
 80034d0:	f003 fe75 	bl	80071be <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC2Polarity));
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d00c      	beq.n	80034f6 <HAL_TIM_Encoder_Init+0x176>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	695b      	ldr	r3, [r3, #20]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d008      	beq.n	80034f6 <HAL_TIM_Encoder_Init+0x176>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	2b0a      	cmp	r3, #10
 80034ea:	d004      	beq.n	80034f6 <HAL_TIM_Encoder_Init+0x176>
 80034ec:	f640 2131 	movw	r1, #2609	; 0xa31
 80034f0:	4826      	ldr	r0, [pc, #152]	; (800358c <HAL_TIM_Encoder_Init+0x20c>)
 80034f2:	f003 fe64 	bl	80071be <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d010      	beq.n	8003520 <HAL_TIM_Encoder_Init+0x1a0>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	2b04      	cmp	r3, #4
 8003504:	d00c      	beq.n	8003520 <HAL_TIM_Encoder_Init+0x1a0>
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	2b08      	cmp	r3, #8
 800350c:	d008      	beq.n	8003520 <HAL_TIM_Encoder_Init+0x1a0>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	68db      	ldr	r3, [r3, #12]
 8003512:	2b0c      	cmp	r3, #12
 8003514:	d004      	beq.n	8003520 <HAL_TIM_Encoder_Init+0x1a0>
 8003516:	f640 2132 	movw	r1, #2610	; 0xa32
 800351a:	481c      	ldr	r0, [pc, #112]	; (800358c <HAL_TIM_Encoder_Init+0x20c>)
 800351c:	f003 fe4f 	bl	80071be <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	69db      	ldr	r3, [r3, #28]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <HAL_TIM_Encoder_Init+0x1ca>
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	69db      	ldr	r3, [r3, #28]
 800352c:	2b04      	cmp	r3, #4
 800352e:	d00c      	beq.n	800354a <HAL_TIM_Encoder_Init+0x1ca>
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	69db      	ldr	r3, [r3, #28]
 8003534:	2b08      	cmp	r3, #8
 8003536:	d008      	beq.n	800354a <HAL_TIM_Encoder_Init+0x1ca>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	69db      	ldr	r3, [r3, #28]
 800353c:	2b0c      	cmp	r3, #12
 800353e:	d004      	beq.n	800354a <HAL_TIM_Encoder_Init+0x1ca>
 8003540:	f640 2133 	movw	r1, #2611	; 0xa33
 8003544:	4811      	ldr	r0, [pc, #68]	; (800358c <HAL_TIM_Encoder_Init+0x20c>)
 8003546:	f003 fe3a 	bl	80071be <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b0f      	cmp	r3, #15
 8003550:	d904      	bls.n	800355c <HAL_TIM_Encoder_Init+0x1dc>
 8003552:	f640 2134 	movw	r1, #2612	; 0xa34
 8003556:	480d      	ldr	r0, [pc, #52]	; (800358c <HAL_TIM_Encoder_Init+0x20c>)
 8003558:	f003 fe31 	bl	80071be <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	6a1b      	ldr	r3, [r3, #32]
 8003560:	2b0f      	cmp	r3, #15
 8003562:	d904      	bls.n	800356e <HAL_TIM_Encoder_Init+0x1ee>
 8003564:	f640 2135 	movw	r1, #2613	; 0xa35
 8003568:	4808      	ldr	r0, [pc, #32]	; (800358c <HAL_TIM_Encoder_Init+0x20c>)
 800356a:	f003 fe28 	bl	80071be <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d114      	bne.n	80035a4 <HAL_TIM_Encoder_Init+0x224>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f004 fb1e 	bl	8007bc4 <HAL_TIM_Encoder_MspInit>
 8003588:	e00c      	b.n	80035a4 <HAL_TIM_Encoder_Init+0x224>
 800358a:	bf00      	nop
 800358c:	0800b3d0 	.word	0x0800b3d0
 8003590:	40010000 	.word	0x40010000
 8003594:	40000400 	.word	0x40000400
 8003598:	40000800 	.word	0x40000800
 800359c:	40000c00 	.word	0x40000c00
 80035a0:	40014000 	.word	0x40014000
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80035ba:	f023 0307 	bic.w	r3, r3, #7
 80035be:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3304      	adds	r3, #4
 80035c8:	4619      	mov	r1, r3
 80035ca:	4610      	mov	r0, r2
 80035cc:	f000 f8cc 	bl	8003768 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	699b      	ldr	r3, [r3, #24]
 80035de:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035f8:	f023 0303 	bic.w	r3, r3, #3
 80035fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	689a      	ldr	r2, [r3, #8]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	021b      	lsls	r3, r3, #8
 8003608:	4313      	orrs	r3, r2
 800360a:	693a      	ldr	r2, [r7, #16]
 800360c:	4313      	orrs	r3, r2
 800360e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003616:	f023 030c 	bic.w	r3, r3, #12
 800361a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003622:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003626:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	69db      	ldr	r3, [r3, #28]
 8003630:	021b      	lsls	r3, r3, #8
 8003632:	4313      	orrs	r3, r2
 8003634:	693a      	ldr	r2, [r7, #16]
 8003636:	4313      	orrs	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	011a      	lsls	r2, r3, #4
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	6a1b      	ldr	r3, [r3, #32]
 8003644:	031b      	lsls	r3, r3, #12
 8003646:	4313      	orrs	r3, r2
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003654:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800365c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	695b      	ldr	r3, [r3, #20]
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	4313      	orrs	r3, r2
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4313      	orrs	r3, r2
 800366e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	68fa      	ldr	r2, [r7, #12]
 8003686:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop

0800369c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a29      	ldr	r2, [pc, #164]	; (8003750 <HAL_TIM_Encoder_Start+0xb4>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d01d      	beq.n	80036ec <HAL_TIM_Encoder_Start+0x50>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036b8:	d018      	beq.n	80036ec <HAL_TIM_Encoder_Start+0x50>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a25      	ldr	r2, [pc, #148]	; (8003754 <HAL_TIM_Encoder_Start+0xb8>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d013      	beq.n	80036ec <HAL_TIM_Encoder_Start+0x50>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a23      	ldr	r2, [pc, #140]	; (8003758 <HAL_TIM_Encoder_Start+0xbc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00e      	beq.n	80036ec <HAL_TIM_Encoder_Start+0x50>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a22      	ldr	r2, [pc, #136]	; (800375c <HAL_TIM_Encoder_Start+0xc0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d009      	beq.n	80036ec <HAL_TIM_Encoder_Start+0x50>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a20      	ldr	r2, [pc, #128]	; (8003760 <HAL_TIM_Encoder_Start+0xc4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d004      	beq.n	80036ec <HAL_TIM_Encoder_Start+0x50>
 80036e2:	f640 21cf 	movw	r1, #2767	; 0xacf
 80036e6:	481f      	ldr	r0, [pc, #124]	; (8003764 <HAL_TIM_Encoder_Start+0xc8>)
 80036e8:	f003 fd69 	bl	80071be <assert_failed>

  /* Enable the encoder interface channels */
  switch (Channel)
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_TIM_Encoder_Start+0x5c>
 80036f2:	2b04      	cmp	r3, #4
 80036f4:	d008      	beq.n	8003708 <HAL_TIM_Encoder_Start+0x6c>
 80036f6:	e00f      	b.n	8003718 <HAL_TIM_Encoder_Start+0x7c>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2201      	movs	r2, #1
 80036fe:	2100      	movs	r1, #0
 8003700:	4618      	mov	r0, r3
 8003702:	f000 f8b1 	bl	8003868 <TIM_CCxChannelCmd>
      break;
 8003706:	e016      	b.n	8003736 <HAL_TIM_Encoder_Start+0x9a>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2201      	movs	r2, #1
 800370e:	2104      	movs	r1, #4
 8003710:	4618      	mov	r0, r3
 8003712:	f000 f8a9 	bl	8003868 <TIM_CCxChannelCmd>
      break;
 8003716:	e00e      	b.n	8003736 <HAL_TIM_Encoder_Start+0x9a>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2201      	movs	r2, #1
 800371e:	2100      	movs	r1, #0
 8003720:	4618      	mov	r0, r3
 8003722:	f000 f8a1 	bl	8003868 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2201      	movs	r2, #1
 800372c:	2104      	movs	r1, #4
 800372e:	4618      	mov	r0, r3
 8003730:	f000 f89a 	bl	8003868 <TIM_CCxChannelCmd>
      break;
 8003734:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	f042 0201 	orr.w	r2, r2, #1
 8003744:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40010000 	.word	0x40010000
 8003754:	40000400 	.word	0x40000400
 8003758:	40000800 	.word	0x40000800
 800375c:	40000c00 	.word	0x40000c00
 8003760:	40014000 	.word	0x40014000
 8003764:	0800b3d0 	.word	0x0800b3d0

08003768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4a34      	ldr	r2, [pc, #208]	; (800384c <TIM_Base_SetConfig+0xe4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d00f      	beq.n	80037a0 <TIM_Base_SetConfig+0x38>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003786:	d00b      	beq.n	80037a0 <TIM_Base_SetConfig+0x38>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a31      	ldr	r2, [pc, #196]	; (8003850 <TIM_Base_SetConfig+0xe8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d007      	beq.n	80037a0 <TIM_Base_SetConfig+0x38>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	4a30      	ldr	r2, [pc, #192]	; (8003854 <TIM_Base_SetConfig+0xec>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d003      	beq.n	80037a0 <TIM_Base_SetConfig+0x38>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	4a2f      	ldr	r2, [pc, #188]	; (8003858 <TIM_Base_SetConfig+0xf0>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d108      	bne.n	80037b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a25      	ldr	r2, [pc, #148]	; (800384c <TIM_Base_SetConfig+0xe4>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d01b      	beq.n	80037f2 <TIM_Base_SetConfig+0x8a>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037c0:	d017      	beq.n	80037f2 <TIM_Base_SetConfig+0x8a>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	4a22      	ldr	r2, [pc, #136]	; (8003850 <TIM_Base_SetConfig+0xe8>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d013      	beq.n	80037f2 <TIM_Base_SetConfig+0x8a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	4a21      	ldr	r2, [pc, #132]	; (8003854 <TIM_Base_SetConfig+0xec>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d00f      	beq.n	80037f2 <TIM_Base_SetConfig+0x8a>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a20      	ldr	r2, [pc, #128]	; (8003858 <TIM_Base_SetConfig+0xf0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d00b      	beq.n	80037f2 <TIM_Base_SetConfig+0x8a>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a1f      	ldr	r2, [pc, #124]	; (800385c <TIM_Base_SetConfig+0xf4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d007      	beq.n	80037f2 <TIM_Base_SetConfig+0x8a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4a1e      	ldr	r2, [pc, #120]	; (8003860 <TIM_Base_SetConfig+0xf8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d003      	beq.n	80037f2 <TIM_Base_SetConfig+0x8a>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a1d      	ldr	r2, [pc, #116]	; (8003864 <TIM_Base_SetConfig+0xfc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d108      	bne.n	8003804 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4313      	orrs	r3, r2
 8003810:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	681a      	ldr	r2, [r3, #0]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a08      	ldr	r2, [pc, #32]	; (800384c <TIM_Base_SetConfig+0xe4>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d103      	bne.n	8003838 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	691a      	ldr	r2, [r3, #16]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	615a      	str	r2, [r3, #20]
}
 800383e:	bf00      	nop
 8003840:	3714      	adds	r7, #20
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	40010000 	.word	0x40010000
 8003850:	40000400 	.word	0x40000400
 8003854:	40000800 	.word	0x40000800
 8003858:	40000c00 	.word	0x40000c00
 800385c:	40014000 	.word	0x40014000
 8003860:	40014400 	.word	0x40014400
 8003864:	40014800 	.word	0x40014800

08003868 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	60f8      	str	r0, [r7, #12]
 8003870:	60b9      	str	r1, [r7, #8]
 8003872:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a2a      	ldr	r2, [pc, #168]	; (8003920 <TIM_CCxChannelCmd+0xb8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d020      	beq.n	80038be <TIM_CCxChannelCmd+0x56>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003882:	d01c      	beq.n	80038be <TIM_CCxChannelCmd+0x56>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	4a27      	ldr	r2, [pc, #156]	; (8003924 <TIM_CCxChannelCmd+0xbc>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d018      	beq.n	80038be <TIM_CCxChannelCmd+0x56>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4a26      	ldr	r2, [pc, #152]	; (8003928 <TIM_CCxChannelCmd+0xc0>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d014      	beq.n	80038be <TIM_CCxChannelCmd+0x56>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	4a25      	ldr	r2, [pc, #148]	; (800392c <TIM_CCxChannelCmd+0xc4>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d010      	beq.n	80038be <TIM_CCxChannelCmd+0x56>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	4a24      	ldr	r2, [pc, #144]	; (8003930 <TIM_CCxChannelCmd+0xc8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d00c      	beq.n	80038be <TIM_CCxChannelCmd+0x56>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4a23      	ldr	r2, [pc, #140]	; (8003934 <TIM_CCxChannelCmd+0xcc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d008      	beq.n	80038be <TIM_CCxChannelCmd+0x56>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4a22      	ldr	r2, [pc, #136]	; (8003938 <TIM_CCxChannelCmd+0xd0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <TIM_CCxChannelCmd+0x56>
 80038b4:	f641 11b7 	movw	r1, #6583	; 0x19b7
 80038b8:	4820      	ldr	r0, [pc, #128]	; (800393c <TIM_CCxChannelCmd+0xd4>)
 80038ba:	f003 fc80 	bl	80071be <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d010      	beq.n	80038e6 <TIM_CCxChannelCmd+0x7e>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d00d      	beq.n	80038e6 <TIM_CCxChannelCmd+0x7e>
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d00a      	beq.n	80038e6 <TIM_CCxChannelCmd+0x7e>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b0c      	cmp	r3, #12
 80038d4:	d007      	beq.n	80038e6 <TIM_CCxChannelCmd+0x7e>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	2b3c      	cmp	r3, #60	; 0x3c
 80038da:	d004      	beq.n	80038e6 <TIM_CCxChannelCmd+0x7e>
 80038dc:	f641 11b8 	movw	r1, #6584	; 0x19b8
 80038e0:	4816      	ldr	r0, [pc, #88]	; (800393c <TIM_CCxChannelCmd+0xd4>)
 80038e2:	f003 fc6c 	bl	80071be <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f003 031f 	and.w	r3, r3, #31
 80038ec:	2201      	movs	r2, #1
 80038ee:	fa02 f303 	lsl.w	r3, r2, r3
 80038f2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a1a      	ldr	r2, [r3, #32]
 80038f8:	697b      	ldr	r3, [r7, #20]
 80038fa:	43db      	mvns	r3, r3
 80038fc:	401a      	ands	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a1a      	ldr	r2, [r3, #32]
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	fa01 f303 	lsl.w	r3, r1, r3
 8003912:	431a      	orrs	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	621a      	str	r2, [r3, #32]
}
 8003918:	bf00      	nop
 800391a:	3718      	adds	r7, #24
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40010000 	.word	0x40010000
 8003924:	40000400 	.word	0x40000400
 8003928:	40000800 	.word	0x40000800
 800392c:	40000c00 	.word	0x40000c00
 8003930:	40014000 	.word	0x40014000
 8003934:	40014400 	.word	0x40014400
 8003938:	40014800 	.word	0x40014800
 800393c:	0800b3d0 	.word	0x0800b3d0

08003940 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a46      	ldr	r2, [pc, #280]	; (8003a68 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d018      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395c:	d013      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a42      	ldr	r2, [pc, #264]	; (8003a6c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00e      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a40      	ldr	r2, [pc, #256]	; (8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d009      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a3f      	ldr	r2, [pc, #252]	; (8003a74 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d004      	beq.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x46>
 800397c:	f240 6161 	movw	r1, #1633	; 0x661
 8003980:	483d      	ldr	r0, [pc, #244]	; (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 8003982:	f003 fc1c 	bl	80071be <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d020      	beq.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	2b10      	cmp	r3, #16
 8003994:	d01c      	beq.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2b20      	cmp	r3, #32
 800399c:	d018      	beq.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	2b30      	cmp	r3, #48	; 0x30
 80039a4:	d014      	beq.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	2b40      	cmp	r3, #64	; 0x40
 80039ac:	d010      	beq.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b50      	cmp	r3, #80	; 0x50
 80039b4:	d00c      	beq.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b60      	cmp	r3, #96	; 0x60
 80039bc:	d008      	beq.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	2b70      	cmp	r3, #112	; 0x70
 80039c4:	d004      	beq.n	80039d0 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 80039c6:	f240 6162 	movw	r1, #1634	; 0x662
 80039ca:	482b      	ldr	r0, [pc, #172]	; (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 80039cc:	f003 fbf7 	bl	80071be <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	2b80      	cmp	r3, #128	; 0x80
 80039d6:	d008      	beq.n	80039ea <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d004      	beq.n	80039ea <HAL_TIMEx_MasterConfigSynchronization+0xaa>
 80039e0:	f240 6163 	movw	r1, #1635	; 0x663
 80039e4:	4824      	ldr	r0, [pc, #144]	; (8003a78 <HAL_TIMEx_MasterConfigSynchronization+0x138>)
 80039e6:	f003 fbea 	bl	80071be <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d101      	bne.n	80039f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80039f4:	2302      	movs	r3, #2
 80039f6:	e032      	b.n	8003a5e <HAL_TIMEx_MasterConfigSynchronization+0x11e>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2202      	movs	r2, #2
 8003a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003a2a:	68bb      	ldr	r3, [r7, #8]
 8003a2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a30:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40010000 	.word	0x40010000
 8003a6c:	40000400 	.word	0x40000400
 8003a70:	40000800 	.word	0x40000800
 8003a74:	40000c00 	.word	0x40000c00
 8003a78:	0800b408 	.word	0x0800b408

08003a7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e0a0      	b.n	8003bd0 <HAL_UART_Init+0x154>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	699b      	ldr	r3, [r3, #24]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d02c      	beq.n	8003af0 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a4f      	ldr	r2, [pc, #316]	; (8003bd8 <HAL_UART_Init+0x15c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d00e      	beq.n	8003abe <HAL_UART_Init+0x42>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a4d      	ldr	r2, [pc, #308]	; (8003bdc <HAL_UART_Init+0x160>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d009      	beq.n	8003abe <HAL_UART_Init+0x42>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a4c      	ldr	r2, [pc, #304]	; (8003be0 <HAL_UART_Init+0x164>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d004      	beq.n	8003abe <HAL_UART_Init+0x42>
 8003ab4:	f240 1149 	movw	r1, #329	; 0x149
 8003ab8:	484a      	ldr	r0, [pc, #296]	; (8003be4 <HAL_UART_Init+0x168>)
 8003aba:	f003 fb80 	bl	80071be <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d028      	beq.n	8003b18 <HAL_UART_Init+0x9c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	699b      	ldr	r3, [r3, #24]
 8003aca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ace:	d023      	beq.n	8003b18 <HAL_UART_Init+0x9c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad8:	d01e      	beq.n	8003b18 <HAL_UART_Init+0x9c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae2:	d019      	beq.n	8003b18 <HAL_UART_Init+0x9c>
 8003ae4:	f44f 71a5 	mov.w	r1, #330	; 0x14a
 8003ae8:	483e      	ldr	r0, [pc, #248]	; (8003be4 <HAL_UART_Init+0x168>)
 8003aea:	f003 fb68 	bl	80071be <assert_failed>
 8003aee:	e013      	b.n	8003b18 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a38      	ldr	r2, [pc, #224]	; (8003bd8 <HAL_UART_Init+0x15c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00e      	beq.n	8003b18 <HAL_UART_Init+0x9c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a37      	ldr	r2, [pc, #220]	; (8003bdc <HAL_UART_Init+0x160>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d009      	beq.n	8003b18 <HAL_UART_Init+0x9c>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a35      	ldr	r2, [pc, #212]	; (8003be0 <HAL_UART_Init+0x164>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <HAL_UART_Init+0x9c>
 8003b0e:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 8003b12:	4834      	ldr	r0, [pc, #208]	; (8003be4 <HAL_UART_Init+0x168>)
 8003b14:	f003 fb53 	bl	80071be <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d009      	beq.n	8003b34 <HAL_UART_Init+0xb8>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b28:	d004      	beq.n	8003b34 <HAL_UART_Init+0xb8>
 8003b2a:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8003b2e:	482d      	ldr	r0, [pc, #180]	; (8003be4 <HAL_UART_Init+0x168>)
 8003b30:	f003 fb45 	bl	80071be <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d009      	beq.n	8003b50 <HAL_UART_Init+0xd4>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b44:	d004      	beq.n	8003b50 <HAL_UART_Init+0xd4>
 8003b46:	f240 1151 	movw	r1, #337	; 0x151
 8003b4a:	4826      	ldr	r0, [pc, #152]	; (8003be4 <HAL_UART_Init+0x168>)
 8003b4c:	f003 fb37 	bl	80071be <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d106      	bne.n	8003b6a <HAL_UART_Init+0xee>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f004 f907 	bl	8007d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2224      	movs	r2, #36	; 0x24
 8003b6e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	6812      	ldr	r2, [r2, #0]
 8003b7a:	68d2      	ldr	r2, [r2, #12]
 8003b7c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b80:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f98e 	bl	8003ea4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6812      	ldr	r2, [r2, #0]
 8003b90:	6912      	ldr	r2, [r2, #16]
 8003b92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b96:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	6952      	ldr	r2, [r2, #20]
 8003ba2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ba6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	687a      	ldr	r2, [r7, #4]
 8003bae:	6812      	ldr	r2, [r2, #0]
 8003bb0:	68d2      	ldr	r2, [r2, #12]
 8003bb2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bb6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2220      	movs	r2, #32
 8003bc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3708      	adds	r7, #8
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	40011000 	.word	0x40011000
 8003bdc:	40004400 	.word	0x40004400
 8003be0:	40011400 	.word	0x40011400
 8003be4:	0800b444 	.word	0x0800b444

08003be8 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003bfc:	b2db      	uxtb	r3, r3
 8003bfe:	2b20      	cmp	r3, #32
 8003c00:	d166      	bne.n	8003cd0 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_UART_Receive_DMA+0x26>
 8003c08:	88fb      	ldrh	r3, [r7, #6]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e05f      	b.n	8003cd2 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d101      	bne.n	8003c20 <HAL_UART_Receive_DMA+0x38>
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	e058      	b.n	8003cd2 <HAL_UART_Receive_DMA+0xea>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8003c28:	68ba      	ldr	r2, [r7, #8]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	88fa      	ldrh	r2, [r7, #6]
 8003c32:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2222      	movs	r2, #34	; 0x22
 8003c3e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c46:	4a25      	ldr	r2, [pc, #148]	; (8003cdc <HAL_UART_Receive_DMA+0xf4>)
 8003c48:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c4e:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <HAL_UART_Receive_DMA+0xf8>)
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c56:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <HAL_UART_Receive_DMA+0xfc>)
 8003c58:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c5e:	2200      	movs	r2, #0
 8003c60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8003c62:	f107 0308 	add.w	r3, r7, #8
 8003c66:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	88fb      	ldrh	r3, [r7, #6]
 8003c7a:	f7fd fced 	bl	8001658 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	613b      	str	r3, [r7, #16]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	613b      	str	r3, [r7, #16]
 8003c92:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	6812      	ldr	r2, [r2, #0]
 8003ca4:	68d2      	ldr	r2, [r2, #12]
 8003ca6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003caa:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68fa      	ldr	r2, [r7, #12]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	6952      	ldr	r2, [r2, #20]
 8003cb6:	f042 0201 	orr.w	r2, r2, #1
 8003cba:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	6812      	ldr	r2, [r2, #0]
 8003cc4:	6952      	ldr	r2, [r2, #20]
 8003cc6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cca:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	e000      	b.n	8003cd2 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003cd0:	2302      	movs	r3, #2
  }
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3718      	adds	r7, #24
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	08003d25 	.word	0x08003d25
 8003ce0:	08003d8d 	.word	0x08003d8d
 8003ce4:	08003da9 	.word	0x08003da9

08003ce8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003cf0:	bf00      	nop
 8003cf2:	370c      	adds	r7, #12
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003d04:	bf00      	nop
 8003d06:	370c      	adds	r7, #12
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr

08003d10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003d18:	bf00      	nop
 8003d1a:	370c      	adds	r7, #12
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d22:	4770      	bx	lr

08003d24 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d30:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d11e      	bne.n	8003d7e <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	6812      	ldr	r2, [r2, #0]
 8003d4e:	68d2      	ldr	r2, [r2, #12]
 8003d50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d54:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	6812      	ldr	r2, [r2, #0]
 8003d5e:	6952      	ldr	r2, [r2, #20]
 8003d60:	f022 0201 	bic.w	r2, r2, #1
 8003d64:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	6812      	ldr	r2, [r2, #0]
 8003d6e:	6952      	ldr	r2, [r2, #20]
 8003d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d74:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f7ff ffb2 	bl	8003ce8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d84:	bf00      	nop
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d98:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f7ff ffae 	bl	8003cfc <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003da0:	bf00      	nop
 8003da2:	3710      	adds	r7, #16
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003db0:	2300      	movs	r3, #0
 8003db2:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db8:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dc4:	2b80      	cmp	r3, #128	; 0x80
 8003dc6:	bf0c      	ite	eq
 8003dc8:	2301      	moveq	r3, #1
 8003dca:	2300      	movne	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b21      	cmp	r3, #33	; 0x21
 8003dda:	d108      	bne.n	8003dee <UART_DMAError+0x46>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	2200      	movs	r2, #0
 8003de6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003de8:	68b8      	ldr	r0, [r7, #8]
 8003dea:	f000 f827 	bl	8003e3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	695b      	ldr	r3, [r3, #20]
 8003df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df8:	2b40      	cmp	r3, #64	; 0x40
 8003dfa:	bf0c      	ite	eq
 8003dfc:	2301      	moveq	r3, #1
 8003dfe:	2300      	movne	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b22      	cmp	r3, #34	; 0x22
 8003e0e:	d108      	bne.n	8003e22 <UART_DMAError+0x7a>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d005      	beq.n	8003e22 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e1c:	68b8      	ldr	r0, [r7, #8]
 8003e1e:	f000 f823 	bl	8003e68 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e26:	f043 0210 	orr.w	r2, r3, #16
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e2e:	68b8      	ldr	r0, [r7, #8]
 8003e30:	f7ff ff6e 	bl	8003d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e34:	bf00      	nop
 8003e36:	3710      	adds	r7, #16
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6812      	ldr	r2, [r2, #0]
 8003e4c:	68d2      	ldr	r2, [r2, #12]
 8003e4e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003e52:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	68d2      	ldr	r2, [r2, #12]
 8003e7a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003e7e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	6812      	ldr	r2, [r2, #0]
 8003e88:	6952      	ldr	r2, [r2, #20]
 8003e8a:	f022 0201 	bic.w	r2, r2, #1
 8003e8e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2220      	movs	r2, #32
 8003e94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003e98:	bf00      	nop
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	4aa8      	ldr	r2, [pc, #672]	; (8004154 <UART_SetConfig+0x2b0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d904      	bls.n	8003ec0 <UART_SetConfig+0x1c>
 8003eb6:	f640 31e5 	movw	r1, #3045	; 0xbe5
 8003eba:	48a7      	ldr	r0, [pc, #668]	; (8004158 <UART_SetConfig+0x2b4>)
 8003ebc:	f003 f97f 	bl	80071be <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d009      	beq.n	8003edc <UART_SetConfig+0x38>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ed0:	d004      	beq.n	8003edc <UART_SetConfig+0x38>
 8003ed2:	f640 31e6 	movw	r1, #3046	; 0xbe6
 8003ed6:	48a0      	ldr	r0, [pc, #640]	; (8004158 <UART_SetConfig+0x2b4>)
 8003ed8:	f003 f971 	bl	80071be <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d00e      	beq.n	8003f02 <UART_SetConfig+0x5e>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eec:	d009      	beq.n	8003f02 <UART_SetConfig+0x5e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ef6:	d004      	beq.n	8003f02 <UART_SetConfig+0x5e>
 8003ef8:	f640 31e7 	movw	r1, #3047	; 0xbe7
 8003efc:	4896      	ldr	r0, [pc, #600]	; (8004158 <UART_SetConfig+0x2b4>)
 8003efe:	f003 f95e 	bl	80071be <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	695a      	ldr	r2, [r3, #20]
 8003f06:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d103      	bne.n	8003f18 <UART_SetConfig+0x74>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	695b      	ldr	r3, [r3, #20]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <UART_SetConfig+0x7e>
 8003f18:	f640 31e8 	movw	r1, #3048	; 0xbe8
 8003f1c:	488e      	ldr	r0, [pc, #568]	; (8004158 <UART_SetConfig+0x2b4>)
 8003f1e:	f003 f94e 	bl	80071be <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	6912      	ldr	r2, [r2, #16]
 8003f2c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	68d2      	ldr	r2, [r2, #12]
 8003f34:	430a      	orrs	r2, r1
 8003f36:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	69db      	ldr	r3, [r3, #28]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
 8003f5a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003f5e:	f023 030c 	bic.w	r3, r3, #12
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	430b      	orrs	r3, r1
 8003f66:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	6812      	ldr	r2, [r2, #0]
 8003f70:	6952      	ldr	r2, [r2, #20]
 8003f72:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	6992      	ldr	r2, [r2, #24]
 8003f7a:	430a      	orrs	r2, r1
 8003f7c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f86:	f040 80ef 	bne.w	8004168 <UART_SetConfig+0x2c4>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a73      	ldr	r2, [pc, #460]	; (800415c <UART_SetConfig+0x2b8>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d004      	beq.n	8003f9e <UART_SetConfig+0xfa>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a71      	ldr	r2, [pc, #452]	; (8004160 <UART_SetConfig+0x2bc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d16c      	bne.n	8004078 <UART_SetConfig+0x1d4>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681c      	ldr	r4, [r3, #0]
 8003fa2:	f7fe fe7f 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	009a      	lsls	r2, r3, #2
 8003fb0:	441a      	add	r2, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	005b      	lsls	r3, r3, #1
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	4a69      	ldr	r2, [pc, #420]	; (8004164 <UART_SetConfig+0x2c0>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	011d      	lsls	r5, r3, #4
 8003fc6:	f7fe fe6d 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	4613      	mov	r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009a      	lsls	r2, r3, #2
 8003fd4:	441a      	add	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fbb2 f6f3 	udiv	r6, r2, r3
 8003fe0:	f7fe fe60 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4413      	add	r3, r2
 8003fec:	009a      	lsls	r2, r3, #2
 8003fee:	441a      	add	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	005b      	lsls	r3, r3, #1
 8003ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ffa:	4a5a      	ldr	r2, [pc, #360]	; (8004164 <UART_SetConfig+0x2c0>)
 8003ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	2264      	movs	r2, #100	; 0x64
 8004004:	fb02 f303 	mul.w	r3, r2, r3
 8004008:	1af3      	subs	r3, r6, r3
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	3332      	adds	r3, #50	; 0x32
 800400e:	4a55      	ldr	r2, [pc, #340]	; (8004164 <UART_SetConfig+0x2c0>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	005b      	lsls	r3, r3, #1
 8004018:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800401c:	441d      	add	r5, r3
 800401e:	f7fe fe41 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8004022:	4602      	mov	r2, r0
 8004024:	4613      	mov	r3, r2
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	4413      	add	r3, r2
 800402a:	009a      	lsls	r2, r3, #2
 800402c:	441a      	add	r2, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	005b      	lsls	r3, r3, #1
 8004034:	fbb2 f6f3 	udiv	r6, r2, r3
 8004038:	f7fe fe34 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 800403c:	4602      	mov	r2, r0
 800403e:	4613      	mov	r3, r2
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	009a      	lsls	r2, r3, #2
 8004046:	441a      	add	r2, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	4a44      	ldr	r2, [pc, #272]	; (8004164 <UART_SetConfig+0x2c0>)
 8004054:	fba2 2303 	umull	r2, r3, r2, r3
 8004058:	095b      	lsrs	r3, r3, #5
 800405a:	2264      	movs	r2, #100	; 0x64
 800405c:	fb02 f303 	mul.w	r3, r2, r3
 8004060:	1af3      	subs	r3, r6, r3
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	3332      	adds	r3, #50	; 0x32
 8004066:	4a3f      	ldr	r2, [pc, #252]	; (8004164 <UART_SetConfig+0x2c0>)
 8004068:	fba2 2303 	umull	r2, r3, r2, r3
 800406c:	095b      	lsrs	r3, r3, #5
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	442b      	add	r3, r5
 8004074:	60a3      	str	r3, [r4, #8]
 8004076:	e159      	b.n	800432c <UART_SetConfig+0x488>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681c      	ldr	r4, [r3, #0]
 800407c:	f7fe fdfe 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8004080:	4602      	mov	r2, r0
 8004082:	4613      	mov	r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4413      	add	r3, r2
 8004088:	009a      	lsls	r2, r3, #2
 800408a:	441a      	add	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	005b      	lsls	r3, r3, #1
 8004092:	fbb2 f3f3 	udiv	r3, r2, r3
 8004096:	4a33      	ldr	r2, [pc, #204]	; (8004164 <UART_SetConfig+0x2c0>)
 8004098:	fba2 2303 	umull	r2, r3, r2, r3
 800409c:	095b      	lsrs	r3, r3, #5
 800409e:	011d      	lsls	r5, r3, #4
 80040a0:	f7fe fdec 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 80040a4:	4602      	mov	r2, r0
 80040a6:	4613      	mov	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	009a      	lsls	r2, r3, #2
 80040ae:	441a      	add	r2, r3
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80040ba:	f7fe fddf 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 80040be:	4602      	mov	r2, r0
 80040c0:	4613      	mov	r3, r2
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	009a      	lsls	r2, r3, #2
 80040c8:	441a      	add	r2, r3
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	685b      	ldr	r3, [r3, #4]
 80040ce:	005b      	lsls	r3, r3, #1
 80040d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d4:	4a23      	ldr	r2, [pc, #140]	; (8004164 <UART_SetConfig+0x2c0>)
 80040d6:	fba2 2303 	umull	r2, r3, r2, r3
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	2264      	movs	r2, #100	; 0x64
 80040de:	fb02 f303 	mul.w	r3, r2, r3
 80040e2:	1af3      	subs	r3, r6, r3
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	3332      	adds	r3, #50	; 0x32
 80040e8:	4a1e      	ldr	r2, [pc, #120]	; (8004164 <UART_SetConfig+0x2c0>)
 80040ea:	fba2 2303 	umull	r2, r3, r2, r3
 80040ee:	095b      	lsrs	r3, r3, #5
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040f6:	441d      	add	r5, r3
 80040f8:	f7fe fdc0 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 80040fc:	4602      	mov	r2, r0
 80040fe:	4613      	mov	r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	4413      	add	r3, r2
 8004104:	009a      	lsls	r2, r3, #2
 8004106:	441a      	add	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fbb2 f6f3 	udiv	r6, r2, r3
 8004112:	f7fe fdb3 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8004116:	4602      	mov	r2, r0
 8004118:	4613      	mov	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	4413      	add	r3, r2
 800411e:	009a      	lsls	r2, r3, #2
 8004120:	441a      	add	r2, r3
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	005b      	lsls	r3, r3, #1
 8004128:	fbb2 f3f3 	udiv	r3, r2, r3
 800412c:	4a0d      	ldr	r2, [pc, #52]	; (8004164 <UART_SetConfig+0x2c0>)
 800412e:	fba2 2303 	umull	r2, r3, r2, r3
 8004132:	095b      	lsrs	r3, r3, #5
 8004134:	2264      	movs	r2, #100	; 0x64
 8004136:	fb02 f303 	mul.w	r3, r2, r3
 800413a:	1af3      	subs	r3, r6, r3
 800413c:	00db      	lsls	r3, r3, #3
 800413e:	3332      	adds	r3, #50	; 0x32
 8004140:	4a08      	ldr	r2, [pc, #32]	; (8004164 <UART_SetConfig+0x2c0>)
 8004142:	fba2 2303 	umull	r2, r3, r2, r3
 8004146:	095b      	lsrs	r3, r3, #5
 8004148:	f003 0307 	and.w	r3, r3, #7
 800414c:	442b      	add	r3, r5
 800414e:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8004150:	e0ec      	b.n	800432c <UART_SetConfig+0x488>
 8004152:	bf00      	nop
 8004154:	00a037a0 	.word	0x00a037a0
 8004158:	0800b444 	.word	0x0800b444
 800415c:	40011000 	.word	0x40011000
 8004160:	40011400 	.word	0x40011400
 8004164:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a71      	ldr	r2, [pc, #452]	; (8004334 <UART_SetConfig+0x490>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d004      	beq.n	800417c <UART_SetConfig+0x2d8>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a70      	ldr	r2, [pc, #448]	; (8004338 <UART_SetConfig+0x494>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d16b      	bne.n	8004254 <UART_SetConfig+0x3b0>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681c      	ldr	r4, [r3, #0]
 8004180:	f7fe fd90 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8004184:	4602      	mov	r2, r0
 8004186:	4613      	mov	r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	009a      	lsls	r2, r3, #2
 800418e:	441a      	add	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	fbb2 f3f3 	udiv	r3, r2, r3
 800419a:	4a68      	ldr	r2, [pc, #416]	; (800433c <UART_SetConfig+0x498>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	095b      	lsrs	r3, r3, #5
 80041a2:	011d      	lsls	r5, r3, #4
 80041a4:	f7fe fd7e 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 80041a8:	4602      	mov	r2, r0
 80041aa:	4613      	mov	r3, r2
 80041ac:	009b      	lsls	r3, r3, #2
 80041ae:	4413      	add	r3, r2
 80041b0:	009a      	lsls	r2, r3, #2
 80041b2:	441a      	add	r2, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	fbb2 f6f3 	udiv	r6, r2, r3
 80041be:	f7fe fd71 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 80041c2:	4602      	mov	r2, r0
 80041c4:	4613      	mov	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	4413      	add	r3, r2
 80041ca:	009a      	lsls	r2, r3, #2
 80041cc:	441a      	add	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041d8:	4a58      	ldr	r2, [pc, #352]	; (800433c <UART_SetConfig+0x498>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	095b      	lsrs	r3, r3, #5
 80041e0:	2264      	movs	r2, #100	; 0x64
 80041e2:	fb02 f303 	mul.w	r3, r2, r3
 80041e6:	1af3      	subs	r3, r6, r3
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	3332      	adds	r3, #50	; 0x32
 80041ec:	4a53      	ldr	r2, [pc, #332]	; (800433c <UART_SetConfig+0x498>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	095b      	lsrs	r3, r3, #5
 80041f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041f8:	441d      	add	r5, r3
 80041fa:	f7fe fd53 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 80041fe:	4602      	mov	r2, r0
 8004200:	4613      	mov	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	009a      	lsls	r2, r3, #2
 8004208:	441a      	add	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	fbb2 f6f3 	udiv	r6, r2, r3
 8004214:	f7fe fd46 	bl	8002ca4 <HAL_RCC_GetPCLK2Freq>
 8004218:	4602      	mov	r2, r0
 800421a:	4613      	mov	r3, r2
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	4413      	add	r3, r2
 8004220:	009a      	lsls	r2, r3, #2
 8004222:	441a      	add	r2, r3
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	fbb2 f3f3 	udiv	r3, r2, r3
 800422e:	4a43      	ldr	r2, [pc, #268]	; (800433c <UART_SetConfig+0x498>)
 8004230:	fba2 2303 	umull	r2, r3, r2, r3
 8004234:	095b      	lsrs	r3, r3, #5
 8004236:	2264      	movs	r2, #100	; 0x64
 8004238:	fb02 f303 	mul.w	r3, r2, r3
 800423c:	1af3      	subs	r3, r6, r3
 800423e:	011b      	lsls	r3, r3, #4
 8004240:	3332      	adds	r3, #50	; 0x32
 8004242:	4a3e      	ldr	r2, [pc, #248]	; (800433c <UART_SetConfig+0x498>)
 8004244:	fba2 2303 	umull	r2, r3, r2, r3
 8004248:	095b      	lsrs	r3, r3, #5
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	442b      	add	r3, r5
 8004250:	60a3      	str	r3, [r4, #8]
 8004252:	e06b      	b.n	800432c <UART_SetConfig+0x488>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681c      	ldr	r4, [r3, #0]
 8004258:	f7fe fd10 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 800425c:	4602      	mov	r2, r0
 800425e:	4613      	mov	r3, r2
 8004260:	009b      	lsls	r3, r3, #2
 8004262:	4413      	add	r3, r2
 8004264:	009a      	lsls	r2, r3, #2
 8004266:	441a      	add	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004272:	4a32      	ldr	r2, [pc, #200]	; (800433c <UART_SetConfig+0x498>)
 8004274:	fba2 2303 	umull	r2, r3, r2, r3
 8004278:	095b      	lsrs	r3, r3, #5
 800427a:	011d      	lsls	r5, r3, #4
 800427c:	f7fe fcfe 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 8004280:	4602      	mov	r2, r0
 8004282:	4613      	mov	r3, r2
 8004284:	009b      	lsls	r3, r3, #2
 8004286:	4413      	add	r3, r2
 8004288:	009a      	lsls	r2, r3, #2
 800428a:	441a      	add	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	fbb2 f6f3 	udiv	r6, r2, r3
 8004296:	f7fe fcf1 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 800429a:	4602      	mov	r2, r0
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	009a      	lsls	r2, r3, #2
 80042a4:	441a      	add	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80042b0:	4a22      	ldr	r2, [pc, #136]	; (800433c <UART_SetConfig+0x498>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	095b      	lsrs	r3, r3, #5
 80042b8:	2264      	movs	r2, #100	; 0x64
 80042ba:	fb02 f303 	mul.w	r3, r2, r3
 80042be:	1af3      	subs	r3, r6, r3
 80042c0:	011b      	lsls	r3, r3, #4
 80042c2:	3332      	adds	r3, #50	; 0x32
 80042c4:	4a1d      	ldr	r2, [pc, #116]	; (800433c <UART_SetConfig+0x498>)
 80042c6:	fba2 2303 	umull	r2, r3, r2, r3
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042d0:	441d      	add	r5, r3
 80042d2:	f7fe fcd3 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 80042d6:	4602      	mov	r2, r0
 80042d8:	4613      	mov	r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4413      	add	r3, r2
 80042de:	009a      	lsls	r2, r3, #2
 80042e0:	441a      	add	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	009b      	lsls	r3, r3, #2
 80042e8:	fbb2 f6f3 	udiv	r6, r2, r3
 80042ec:	f7fe fcc6 	bl	8002c7c <HAL_RCC_GetPCLK1Freq>
 80042f0:	4602      	mov	r2, r0
 80042f2:	4613      	mov	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	4413      	add	r3, r2
 80042f8:	009a      	lsls	r2, r3, #2
 80042fa:	441a      	add	r2, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	fbb2 f3f3 	udiv	r3, r2, r3
 8004306:	4a0d      	ldr	r2, [pc, #52]	; (800433c <UART_SetConfig+0x498>)
 8004308:	fba2 2303 	umull	r2, r3, r2, r3
 800430c:	095b      	lsrs	r3, r3, #5
 800430e:	2264      	movs	r2, #100	; 0x64
 8004310:	fb02 f303 	mul.w	r3, r2, r3
 8004314:	1af3      	subs	r3, r6, r3
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	3332      	adds	r3, #50	; 0x32
 800431a:	4a08      	ldr	r2, [pc, #32]	; (800433c <UART_SetConfig+0x498>)
 800431c:	fba2 2303 	umull	r2, r3, r2, r3
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	442b      	add	r3, r5
 8004328:	60a3      	str	r3, [r4, #8]
}
 800432a:	e7ff      	b.n	800432c <UART_SetConfig+0x488>
 800432c:	bf00      	nop
 800432e:	3714      	adds	r7, #20
 8004330:	46bd      	mov	sp, r7
 8004332:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004334:	40011000 	.word	0x40011000
 8004338:	40011400 	.word	0x40011400
 800433c:	51eb851f 	.word	0x51eb851f

08004340 <L6470_ResetAppCmdPkg>:
  * @brief  Reset the structure used to store the identifier of the L6470
  *         application command and its the needed parameters.
  * @param  L6470_AppCmdPkg   The structure to be reset.
  */
void L6470_ResetAppCmdPkg(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  uint8_t id;
  
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 8004348:	2300      	movs	r3, #0
 800434a:	73fb      	strb	r3, [r7, #15]
 800434c:	e01a      	b.n	8004384 <L6470_ResetAppCmdPkg+0x44>
  {
    (pL6470_AppCmdPkg+id)->L6470_AppCmdId=(eL6470_AppCmdId_t)0;
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	4413      	add	r3, r2
 8004356:	2200      	movs	r2, #0
 8004358:	701a      	strb	r2, [r3, #0]
    (pL6470_AppCmdPkg+id)->p1=0;
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	011b      	lsls	r3, r3, #4
 800435e:	687a      	ldr	r2, [r7, #4]
 8004360:	4413      	add	r3, r2
 8004362:	2200      	movs	r2, #0
 8004364:	605a      	str	r2, [r3, #4]
    (pL6470_AppCmdPkg+id)->p2=0;
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	2200      	movs	r2, #0
 8004370:	609a      	str	r2, [r3, #8]
    (pL6470_AppCmdPkg+id)->p3=0;
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	4413      	add	r3, r2
 800437a:	2200      	movs	r2, #0
 800437c:	60da      	str	r2, [r3, #12]
  for(id=0; id<L6470DAISYCHAINSIZE; id++)
 800437e:	7bfb      	ldrb	r3, [r7, #15]
 8004380:	3301      	adds	r3, #1
 8004382:	73fb      	strb	r3, [r7, #15]
 8004384:	7bfb      	ldrb	r3, [r7, #15]
 8004386:	2b03      	cmp	r3, #3
 8004388:	d9e1      	bls.n	800434e <L6470_ResetAppCmdPkg+0xe>
  }
}
 800438a:	bf00      	nop
 800438c:	3714      	adds	r7, #20
 800438e:	46bd      	mov	sp, r7
 8004390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004394:	4770      	bx	lr

08004396 <L6470_FillAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_FillAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 8004396:	b480      	push	{r7}
 8004398:	b085      	sub	sp, #20
 800439a:	af00      	add	r7, sp, #0
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	4603      	mov	r3, r0
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	4613      	mov	r3, r2
 80043a6:	73bb      	strb	r3, [r7, #14]
  (pL6470_AppCmdPkg+L6470_Id)->L6470_AppCmdId = L6470_AppCmdId;
 80043a8:	7bfb      	ldrb	r3, [r7, #15]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	4413      	add	r3, r2
 80043b0:	7bba      	ldrb	r2, [r7, #14]
 80043b2:	701a      	strb	r2, [r3, #0]
  (pL6470_AppCmdPkg+L6470_Id)->p1 = p1;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	4413      	add	r3, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	605a      	str	r2, [r3, #4]
  (pL6470_AppCmdPkg+L6470_Id)->p2 = p2;
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	4413      	add	r3, r2
 80043c8:	69ba      	ldr	r2, [r7, #24]
 80043ca:	609a      	str	r2, [r3, #8]
  (pL6470_AppCmdPkg+L6470_Id)->p3 = p3;
 80043cc:	7bfb      	ldrb	r3, [r7, #15]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	4413      	add	r3, r2
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	60da      	str	r2, [r3, #12]
}
 80043d8:	bf00      	nop
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <L6470_PrepareAppCmdPkg>:
  * @param  p1                The 1st parameter (if it is not needed it will be not considered).
  * @param  p2                The 2nd parameter (if it is not needed it will be not considered).
  * @param  p3                The 3rd parameter (if it is not needed it will be not considered).
  */
void L6470_PrepareAppCmdPkg(uint8_t L6470_Id, sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, eL6470_AppCmdId_t L6470_AppCmdId, uint32_t p1, uint32_t p2, uint32_t p3)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af02      	add	r7, sp, #8
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	607b      	str	r3, [r7, #4]
 80043ee:	4603      	mov	r3, r0
 80043f0:	73fb      	strb	r3, [r7, #15]
 80043f2:	4613      	mov	r3, r2
 80043f4:	73bb      	strb	r3, [r7, #14]
  if(!L6470_DaisyChain_HalfPrepared)
 80043f6:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <L6470_PrepareAppCmdPkg+0x44>)
 80043f8:	781b      	ldrb	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d105      	bne.n	800440a <L6470_PrepareAppCmdPkg+0x26>
  {
    L6470_DaisyChain_HalfPrepared = ONE_F; /* To avoid to delete the previous entered command */
 80043fe:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <L6470_PrepareAppCmdPkg+0x44>)
 8004400:	2201      	movs	r2, #1
 8004402:	701a      	strb	r2, [r3, #0]
    L6470_ResetAppCmdPkg(pL6470_AppCmdPkg);
 8004404:	68b8      	ldr	r0, [r7, #8]
 8004406:	f7ff ff9b 	bl	8004340 <L6470_ResetAppCmdPkg>
  }
  
  L6470_FillAppCmdPkg(L6470_Id, pL6470_AppCmdPkg, L6470_AppCmdId, p1, p2, p3);
 800440a:	7bba      	ldrb	r2, [r7, #14]
 800440c:	7bf8      	ldrb	r0, [r7, #15]
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	9301      	str	r3, [sp, #4]
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68b9      	ldr	r1, [r7, #8]
 800441a:	f7ff ffbc 	bl	8004396 <L6470_FillAppCmdPkg>
}
 800441e:	bf00      	nop
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	200007c8 	.word	0x200007c8

0800442c <L6470_PrepareDaisyChainCommand>:
  *
  * @param  pL6470_AppCmdPkg              Pointer to the sL6470_AppCmdPkg_t to be filled.
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the structure used by SPI to send the commands.
  */
void L6470_PrepareDaisyChainCommand(sL6470_AppCmdPkg_t* pL6470_AppCmdPkg, uint8_t* pL6470_DaisyChainSpiTxStruct)
{
 800442c:	b490      	push	{r4, r7}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint8_t PARAMLengthBytes; /* The number of bytes related to the numeric value for the addressed register */
  uint8_t spibyte;
  uint8_t i;
  
  /* Reset the structure used to send the command to the L6470 Daisy Chain through the SPI */
  i = 0;
 8004436:	2300      	movs	r3, #0
 8004438:	737b      	strb	r3, [r7, #13]
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 800443a:	2300      	movs	r3, #0
 800443c:	73bb      	strb	r3, [r7, #14]
 800443e:	e013      	b.n	8004468 <L6470_PrepareDaisyChainCommand+0x3c>
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8004440:	2300      	movs	r3, #0
 8004442:	73fb      	strb	r3, [r7, #15]
 8004444:	e00a      	b.n	800445c <L6470_PrepareDaisyChainCommand+0x30>
      *(pL6470_DaisyChainSpiTxStruct+(i++)) = 0x00;
 8004446:	7b7b      	ldrb	r3, [r7, #13]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	737a      	strb	r2, [r7, #13]
 800444c:	461a      	mov	r2, r3
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	4413      	add	r3, r2
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
    for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 8004456:	7bfb      	ldrb	r3, [r7, #15]
 8004458:	3301      	adds	r3, #1
 800445a:	73fb      	strb	r3, [r7, #15]
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	2b03      	cmp	r3, #3
 8004460:	d9f1      	bls.n	8004446 <L6470_PrepareDaisyChainCommand+0x1a>
  for(spibyte=0;spibyte<L6470MAXSPICMDBYTESIZE;spibyte++)
 8004462:	7bbb      	ldrb	r3, [r7, #14]
 8004464:	3301      	adds	r3, #1
 8004466:	73bb      	strb	r3, [r7, #14]
 8004468:	7bbb      	ldrb	r3, [r7, #14]
 800446a:	2b03      	cmp	r3, #3
 800446c:	d9e8      	bls.n	8004440 <L6470_PrepareDaisyChainCommand+0x14>
  
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800446e:	2300      	movs	r3, #0
 8004470:	73fb      	strb	r3, [r7, #15]
 8004472:	e1f7      	b.n	8004864 <L6470_PrepareDaisyChainCommand+0x438>
  {
    /* Build the 1st bytes to transmit with the binary code of the command */
    *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) = (L6470_ApplicationCommand[(pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId].BinaryCode);
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	441a      	add	r2, r3
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	011b      	lsls	r3, r3, #4
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	440b      	add	r3, r1
 8004482:	781b      	ldrb	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	49b3      	ldr	r1, [pc, #716]	; (8004754 <L6470_PrepareDaisyChainCommand+0x328>)
 8004488:	4603      	mov	r3, r0
 800448a:	00db      	lsls	r3, r3, #3
 800448c:	1a1b      	subs	r3, r3, r0
 800448e:	005b      	lsls	r3, r3, #1
 8004490:	440b      	add	r3, r1
 8004492:	330c      	adds	r3, #12
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	7013      	strb	r3, [r2, #0]
    
    /* Perform the related L6470_AppCmdId */
    switch((pL6470_AppCmdPkg+PkgId)->L6470_AppCmdId)
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	4413      	add	r3, r2
 80044a0:	781b      	ldrb	r3, [r3, #0]
 80044a2:	2b12      	cmp	r3, #18
 80044a4:	f200 81db 	bhi.w	800485e <L6470_PrepareDaisyChainCommand+0x432>
 80044a8:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <L6470_PrepareDaisyChainCommand+0x84>)
 80044aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044ae:	bf00      	nop
 80044b0:	0800485f 	.word	0x0800485f
 80044b4:	080044fd 	.word	0x080044fd
 80044b8:	08004585 	.word	0x08004585
 80044bc:	080045b3 	.word	0x080045b3
 80044c0:	0800461b 	.word	0x0800461b
 80044c4:	08004649 	.word	0x08004649
 80044c8:	080046b1 	.word	0x080046b1
 80044cc:	080046ed 	.word	0x080046ed
 80044d0:	08004761 	.word	0x08004761
 80044d4:	080047fd 	.word	0x080047fd
 80044d8:	0800485f 	.word	0x0800485f
 80044dc:	0800485f 	.word	0x0800485f
 80044e0:	0800485f 	.word	0x0800485f
 80044e4:	0800485f 	.word	0x0800485f
 80044e8:	0800485f 	.word	0x0800485f
 80044ec:	0800485f 	.word	0x0800485f
 80044f0:	0800485f 	.word	0x0800485f
 80044f4:	0800485f 	.word	0x0800485f
 80044f8:	0800485f 	.word	0x0800485f
    {
    case L6470_NOP_ID:
      break;
    case L6470_SETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 80044fc:	7bfb      	ldrb	r3, [r7, #15]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	18d1      	adds	r1, r2, r3
 8004502:	7bfb      	ldrb	r3, [r7, #15]
 8004504:	683a      	ldr	r2, [r7, #0]
 8004506:	4413      	add	r3, r2
 8004508:	7818      	ldrb	r0, [r3, #0]
 800450a:	7bfb      	ldrb	r3, [r7, #15]
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	4413      	add	r3, r2
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	4c90      	ldr	r4, [pc, #576]	; (8004758 <L6470_PrepareDaisyChainCommand+0x32c>)
 8004516:	4613      	mov	r3, r2
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4423      	add	r3, r4
 8004520:	781b      	ldrb	r3, [r3, #0]
 8004522:	4303      	orrs	r3, r0
 8004524:	b2db      	uxtb	r3, r3
 8004526:	700b      	strb	r3, [r1, #0]
      
      /* The length, in byte, of this register (PARAM) is... */
      PARAMLengthBytes = L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].LengthByte;
 8004528:	7bfb      	ldrb	r3, [r7, #15]
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	4413      	add	r3, r2
 8004530:	685a      	ldr	r2, [r3, #4]
 8004532:	4989      	ldr	r1, [pc, #548]	; (8004758 <L6470_PrepareDaisyChainCommand+0x32c>)
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	440b      	add	r3, r1
 800453e:	330e      	adds	r3, #14
 8004540:	781b      	ldrb	r3, [r3, #0]
 8004542:	733b      	strb	r3, [r7, #12]
      
      /* Build the others bytes to transmit (VALUE) */
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8004544:	2301      	movs	r3, #1
 8004546:	73bb      	strb	r3, [r7, #14]
 8004548:	e016      	b.n	8004578 <L6470_PrepareDaisyChainCommand+0x14c>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(PARAMLengthBytes-spibyte)));
 800454a:	7bbb      	ldrb	r3, [r7, #14]
 800454c:	009a      	lsls	r2, r3, #2
 800454e:	7bfb      	ldrb	r3, [r7, #15]
 8004550:	4413      	add	r3, r2
 8004552:	461a      	mov	r2, r3
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	4413      	add	r3, r2
 8004558:	7bfa      	ldrb	r2, [r7, #15]
 800455a:	0112      	lsls	r2, r2, #4
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	440a      	add	r2, r1
 8004560:	6891      	ldr	r1, [r2, #8]
 8004562:	7b38      	ldrb	r0, [r7, #12]
 8004564:	7bba      	ldrb	r2, [r7, #14]
 8004566:	1a82      	subs	r2, r0, r2
 8004568:	00d2      	lsls	r2, r2, #3
 800456a:	fa21 f202 	lsr.w	r2, r1, r2
 800456e:	b2d2      	uxtb	r2, r2
 8004570:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(PARAMLengthBytes+1); spibyte++)
 8004572:	7bbb      	ldrb	r3, [r7, #14]
 8004574:	3301      	adds	r3, #1
 8004576:	73bb      	strb	r3, [r7, #14]
 8004578:	7bba      	ldrb	r2, [r7, #14]
 800457a:	7b3b      	ldrb	r3, [r7, #12]
 800457c:	3301      	adds	r3, #1
 800457e:	429a      	cmp	r2, r3
 8004580:	dbe3      	blt.n	800454a <L6470_PrepareDaisyChainCommand+0x11e>
      }
      break;
 8004582:	e16c      	b.n	800485e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_GETPARAM_ID:
      /* Build the 1st bytes to transmit (PARAM) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Register[((pL6470_AppCmdPkg+PkgId)->p1)].Address);
 8004584:	7bfb      	ldrb	r3, [r7, #15]
 8004586:	683a      	ldr	r2, [r7, #0]
 8004588:	18d1      	adds	r1, r2, r3
 800458a:	7bfb      	ldrb	r3, [r7, #15]
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	4413      	add	r3, r2
 8004590:	7818      	ldrb	r0, [r3, #0]
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	4413      	add	r3, r2
 800459a:	685a      	ldr	r2, [r3, #4]
 800459c:	4c6e      	ldr	r4, [pc, #440]	; (8004758 <L6470_PrepareDaisyChainCommand+0x32c>)
 800459e:	4613      	mov	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4413      	add	r3, r2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	4423      	add	r3, r4
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	4303      	orrs	r3, r0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	700b      	strb	r3, [r1, #0]
      break;
 80045b0:	e155      	b.n	800485e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_RUN_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80045b2:	7bfb      	ldrb	r3, [r7, #15]
 80045b4:	683a      	ldr	r2, [r7, #0]
 80045b6:	18d1      	adds	r1, r2, r3
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	4413      	add	r3, r2
 80045be:	7818      	ldrb	r0, [r3, #0]
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	4413      	add	r3, r2
 80045c8:	685a      	ldr	r2, [r3, #4]
 80045ca:	4c64      	ldr	r4, [pc, #400]	; (800475c <L6470_PrepareDaisyChainCommand+0x330>)
 80045cc:	4613      	mov	r3, r2
 80045ce:	00db      	lsls	r3, r3, #3
 80045d0:	4413      	add	r3, r2
 80045d2:	4423      	add	r3, r4
 80045d4:	3308      	adds	r3, #8
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	4303      	orrs	r3, r0
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80045de:	2301      	movs	r3, #1
 80045e0:	73bb      	strb	r3, [r7, #14]
 80045e2:	e016      	b.n	8004612 <L6470_PrepareDaisyChainCommand+0x1e6>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 80045e4:	7bbb      	ldrb	r3, [r7, #14]
 80045e6:	009a      	lsls	r2, r3, #2
 80045e8:	7bfb      	ldrb	r3, [r7, #15]
 80045ea:	4413      	add	r3, r2
 80045ec:	461a      	mov	r2, r3
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	4413      	add	r3, r2
 80045f2:	7bfa      	ldrb	r2, [r7, #15]
 80045f4:	0112      	lsls	r2, r2, #4
 80045f6:	6879      	ldr	r1, [r7, #4]
 80045f8:	440a      	add	r2, r1
 80045fa:	6891      	ldr	r1, [r2, #8]
 80045fc:	7bba      	ldrb	r2, [r7, #14]
 80045fe:	f1c2 0203 	rsb	r2, r2, #3
 8004602:	00d2      	lsls	r2, r2, #3
 8004604:	fa21 f202 	lsr.w	r2, r1, r2
 8004608:	b2d2      	uxtb	r2, r2
 800460a:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 800460c:	7bbb      	ldrb	r3, [r7, #14]
 800460e:	3301      	adds	r3, #1
 8004610:	73bb      	strb	r3, [r7, #14]
 8004612:	7bbb      	ldrb	r3, [r7, #14]
 8004614:	2b03      	cmp	r3, #3
 8004616:	d9e5      	bls.n	80045e4 <L6470_PrepareDaisyChainCommand+0x1b8>
      }
      break;
 8004618:	e121      	b.n	800485e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_STEPCLOCK_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	683a      	ldr	r2, [r7, #0]
 800461e:	18d1      	adds	r1, r2, r3
 8004620:	7bfb      	ldrb	r3, [r7, #15]
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	4413      	add	r3, r2
 8004626:	7818      	ldrb	r0, [r3, #0]
 8004628:	7bfb      	ldrb	r3, [r7, #15]
 800462a:	011b      	lsls	r3, r3, #4
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	4413      	add	r3, r2
 8004630:	685a      	ldr	r2, [r3, #4]
 8004632:	4c4a      	ldr	r4, [pc, #296]	; (800475c <L6470_PrepareDaisyChainCommand+0x330>)
 8004634:	4613      	mov	r3, r2
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	4413      	add	r3, r2
 800463a:	4423      	add	r3, r4
 800463c:	3308      	adds	r3, #8
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	4303      	orrs	r3, r0
 8004642:	b2db      	uxtb	r3, r3
 8004644:	700b      	strb	r3, [r1, #0]
      break;
 8004646:	e10a      	b.n	800485e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_MOVE_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 8004648:	7bfb      	ldrb	r3, [r7, #15]
 800464a:	683a      	ldr	r2, [r7, #0]
 800464c:	18d1      	adds	r1, r2, r3
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	4413      	add	r3, r2
 8004654:	7818      	ldrb	r0, [r3, #0]
 8004656:	7bfb      	ldrb	r3, [r7, #15]
 8004658:	011b      	lsls	r3, r3, #4
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	4413      	add	r3, r2
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	4c3e      	ldr	r4, [pc, #248]	; (800475c <L6470_PrepareDaisyChainCommand+0x330>)
 8004662:	4613      	mov	r3, r2
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	4413      	add	r3, r2
 8004668:	4423      	add	r3, r4
 800466a:	3308      	adds	r3, #8
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	4303      	orrs	r3, r0
 8004670:	b2db      	uxtb	r3, r3
 8004672:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (N_STEP) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8004674:	2301      	movs	r3, #1
 8004676:	73bb      	strb	r3, [r7, #14]
 8004678:	e016      	b.n	80046a8 <L6470_PrepareDaisyChainCommand+0x27c>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800467a:	7bbb      	ldrb	r3, [r7, #14]
 800467c:	009a      	lsls	r2, r3, #2
 800467e:	7bfb      	ldrb	r3, [r7, #15]
 8004680:	4413      	add	r3, r2
 8004682:	461a      	mov	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	4413      	add	r3, r2
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	0112      	lsls	r2, r2, #4
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	440a      	add	r2, r1
 8004690:	6891      	ldr	r1, [r2, #8]
 8004692:	7bba      	ldrb	r2, [r7, #14]
 8004694:	f1c2 0203 	rsb	r2, r2, #3
 8004698:	00d2      	lsls	r2, r2, #3
 800469a:	fa21 f202 	lsr.w	r2, r1, r2
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80046a2:	7bbb      	ldrb	r3, [r7, #14]
 80046a4:	3301      	adds	r3, #1
 80046a6:	73bb      	strb	r3, [r7, #14]
 80046a8:	7bbb      	ldrb	r3, [r7, #14]
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d9e5      	bls.n	800467a <L6470_PrepareDaisyChainCommand+0x24e>
      }      
      break;
 80046ae:	e0d6      	b.n	800485e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_GOTO_ID:
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80046b0:	2301      	movs	r3, #1
 80046b2:	73bb      	strb	r3, [r7, #14]
 80046b4:	e016      	b.n	80046e4 <L6470_PrepareDaisyChainCommand+0x2b8>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p1) >> (8*(3-spibyte)));
 80046b6:	7bbb      	ldrb	r3, [r7, #14]
 80046b8:	009a      	lsls	r2, r3, #2
 80046ba:	7bfb      	ldrb	r3, [r7, #15]
 80046bc:	4413      	add	r3, r2
 80046be:	461a      	mov	r2, r3
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	4413      	add	r3, r2
 80046c4:	7bfa      	ldrb	r2, [r7, #15]
 80046c6:	0112      	lsls	r2, r2, #4
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	440a      	add	r2, r1
 80046cc:	6851      	ldr	r1, [r2, #4]
 80046ce:	7bba      	ldrb	r2, [r7, #14]
 80046d0:	f1c2 0203 	rsb	r2, r2, #3
 80046d4:	00d2      	lsls	r2, r2, #3
 80046d6:	fa21 f202 	lsr.w	r2, r1, r2
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80046de:	7bbb      	ldrb	r3, [r7, #14]
 80046e0:	3301      	adds	r3, #1
 80046e2:	73bb      	strb	r3, [r7, #14]
 80046e4:	7bbb      	ldrb	r3, [r7, #14]
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d9e5      	bls.n	80046b6 <L6470_PrepareDaisyChainCommand+0x28a>
      }
      break;
 80046ea:	e0b8      	b.n	800485e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_GOTODIR_ID:
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode);
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
 80046ee:	683a      	ldr	r2, [r7, #0]
 80046f0:	18d1      	adds	r1, r2, r3
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	4413      	add	r3, r2
 80046f8:	7818      	ldrb	r0, [r3, #0]
 80046fa:	7bfb      	ldrb	r3, [r7, #15]
 80046fc:	011b      	lsls	r3, r3, #4
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	4413      	add	r3, r2
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	4c15      	ldr	r4, [pc, #84]	; (800475c <L6470_PrepareDaisyChainCommand+0x330>)
 8004706:	4613      	mov	r3, r2
 8004708:	00db      	lsls	r3, r3, #3
 800470a:	4413      	add	r3, r2
 800470c:	4423      	add	r3, r4
 800470e:	3308      	adds	r3, #8
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	4303      	orrs	r3, r0
 8004714:	b2db      	uxtb	r3, r3
 8004716:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (ABS_POS) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8004718:	2301      	movs	r3, #1
 800471a:	73bb      	strb	r3, [r7, #14]
 800471c:	e016      	b.n	800474c <L6470_PrepareDaisyChainCommand+0x320>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p2) >> (8*(3-spibyte)));
 800471e:	7bbb      	ldrb	r3, [r7, #14]
 8004720:	009a      	lsls	r2, r3, #2
 8004722:	7bfb      	ldrb	r3, [r7, #15]
 8004724:	4413      	add	r3, r2
 8004726:	461a      	mov	r2, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	4413      	add	r3, r2
 800472c:	7bfa      	ldrb	r2, [r7, #15]
 800472e:	0112      	lsls	r2, r2, #4
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	440a      	add	r2, r1
 8004734:	6891      	ldr	r1, [r2, #8]
 8004736:	7bba      	ldrb	r2, [r7, #14]
 8004738:	f1c2 0203 	rsb	r2, r2, #3
 800473c:	00d2      	lsls	r2, r2, #3
 800473e:	fa21 f202 	lsr.w	r2, r1, r2
 8004742:	b2d2      	uxtb	r2, r2
 8004744:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 8004746:	7bbb      	ldrb	r3, [r7, #14]
 8004748:	3301      	adds	r3, #1
 800474a:	73bb      	strb	r3, [r7, #14]
 800474c:	7bbb      	ldrb	r3, [r7, #14]
 800474e:	2b03      	cmp	r3, #3
 8004750:	d9e5      	bls.n	800471e <L6470_PrepareDaisyChainCommand+0x2f2>
      }
      break;
 8004752:	e084      	b.n	800485e <L6470_PrepareDaisyChainCommand+0x432>
 8004754:	0800b894 	.word	0x0800b894
 8004758:	0800b6a0 	.word	0x0800b6a0
 800475c:	0800b9a0 	.word	0x0800b9a0
    case L6470_GOUNTIL_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 8004760:	7bfb      	ldrb	r3, [r7, #15]
 8004762:	683a      	ldr	r2, [r7, #0]
 8004764:	18d1      	adds	r1, r2, r3
 8004766:	7bfb      	ldrb	r3, [r7, #15]
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	4413      	add	r3, r2
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	b258      	sxtb	r0, r3
 8004770:	7bfb      	ldrb	r3, [r7, #15]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	4413      	add	r3, r2
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	4c3f      	ldr	r4, [pc, #252]	; (8004878 <L6470_PrepareDaisyChainCommand+0x44c>)
 800477c:	4613      	mov	r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	4413      	add	r3, r2
 8004782:	4423      	add	r3, r4
 8004784:	3304      	adds	r3, #4
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	00db      	lsls	r3, r3, #3
 800478a:	b25b      	sxtb	r3, r3
 800478c:	4303      	orrs	r3, r0
 800478e:	b25b      	sxtb	r3, r3
 8004790:	b2db      	uxtb	r3, r3
 8004792:	700b      	strb	r3, [r1, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	18d1      	adds	r1, r2, r3
 800479a:	7bfb      	ldrb	r3, [r7, #15]
 800479c:	683a      	ldr	r2, [r7, #0]
 800479e:	4413      	add	r3, r2
 80047a0:	7818      	ldrb	r0, [r3, #0]
 80047a2:	7bfb      	ldrb	r3, [r7, #15]
 80047a4:	011b      	lsls	r3, r3, #4
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	4413      	add	r3, r2
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	4c33      	ldr	r4, [pc, #204]	; (800487c <L6470_PrepareDaisyChainCommand+0x450>)
 80047ae:	4613      	mov	r3, r2
 80047b0:	00db      	lsls	r3, r3, #3
 80047b2:	4413      	add	r3, r2
 80047b4:	4423      	add	r3, r4
 80047b6:	3308      	adds	r3, #8
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	4303      	orrs	r3, r0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	700b      	strb	r3, [r1, #0]
      
      /* Build the others bytes to transmit (SPD) */
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80047c0:	2301      	movs	r3, #1
 80047c2:	73bb      	strb	r3, [r7, #14]
 80047c4:	e016      	b.n	80047f4 <L6470_PrepareDaisyChainCommand+0x3c8>
      {
        *(pL6470_DaisyChainSpiTxStruct+((spibyte*L6470DAISYCHAINSIZE)+PkgId)) = (uint8_t)(((pL6470_AppCmdPkg+PkgId)->p3) >> (8*(3-spibyte)));
 80047c6:	7bbb      	ldrb	r3, [r7, #14]
 80047c8:	009a      	lsls	r2, r3, #2
 80047ca:	7bfb      	ldrb	r3, [r7, #15]
 80047cc:	4413      	add	r3, r2
 80047ce:	461a      	mov	r2, r3
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4413      	add	r3, r2
 80047d4:	7bfa      	ldrb	r2, [r7, #15]
 80047d6:	0112      	lsls	r2, r2, #4
 80047d8:	6879      	ldr	r1, [r7, #4]
 80047da:	440a      	add	r2, r1
 80047dc:	68d1      	ldr	r1, [r2, #12]
 80047de:	7bba      	ldrb	r2, [r7, #14]
 80047e0:	f1c2 0203 	rsb	r2, r2, #3
 80047e4:	00d2      	lsls	r2, r2, #3
 80047e6:	fa21 f202 	lsr.w	r2, r1, r2
 80047ea:	b2d2      	uxtb	r2, r2
 80047ec:	701a      	strb	r2, [r3, #0]
      for (spibyte=1; spibyte<(3+1); spibyte++)
 80047ee:	7bbb      	ldrb	r3, [r7, #14]
 80047f0:	3301      	adds	r3, #1
 80047f2:	73bb      	strb	r3, [r7, #14]
 80047f4:	7bbb      	ldrb	r3, [r7, #14]
 80047f6:	2b03      	cmp	r3, #3
 80047f8:	d9e5      	bls.n	80047c6 <L6470_PrepareDaisyChainCommand+0x39a>
      }
      break;
 80047fa:	e030      	b.n	800485e <L6470_PrepareDaisyChainCommand+0x432>
    case L6470_RELEASESW_ID:
      /* Build the 1st bytes to transmit (ACT) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= ((L6470_ACT[((pL6470_AppCmdPkg+PkgId)->p1)].BinaryCode)<<3);
 80047fc:	7bfb      	ldrb	r3, [r7, #15]
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	18d1      	adds	r1, r2, r3
 8004802:	7bfb      	ldrb	r3, [r7, #15]
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	4413      	add	r3, r2
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	b258      	sxtb	r0, r3
 800480c:	7bfb      	ldrb	r3, [r7, #15]
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	4413      	add	r3, r2
 8004814:	685a      	ldr	r2, [r3, #4]
 8004816:	4c18      	ldr	r4, [pc, #96]	; (8004878 <L6470_PrepareDaisyChainCommand+0x44c>)
 8004818:	4613      	mov	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	4413      	add	r3, r2
 800481e:	4423      	add	r3, r4
 8004820:	3304      	adds	r3, #4
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	b25b      	sxtb	r3, r3
 8004828:	4303      	orrs	r3, r0
 800482a:	b25b      	sxtb	r3, r3
 800482c:	b2db      	uxtb	r3, r3
 800482e:	700b      	strb	r3, [r1, #0]
      /* Build the 1st bytes to transmit (DIR) */
      *(pL6470_DaisyChainSpiTxStruct+((0*L6470DAISYCHAINSIZE)+PkgId)) |= (L6470_Direction[((pL6470_AppCmdPkg+PkgId)->p2)].BinaryCode);
 8004830:	7bfb      	ldrb	r3, [r7, #15]
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	18d1      	adds	r1, r2, r3
 8004836:	7bfb      	ldrb	r3, [r7, #15]
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	4413      	add	r3, r2
 800483c:	7818      	ldrb	r0, [r3, #0]
 800483e:	7bfb      	ldrb	r3, [r7, #15]
 8004840:	011b      	lsls	r3, r3, #4
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	4413      	add	r3, r2
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	4c0c      	ldr	r4, [pc, #48]	; (800487c <L6470_PrepareDaisyChainCommand+0x450>)
 800484a:	4613      	mov	r3, r2
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4413      	add	r3, r2
 8004850:	4423      	add	r3, r4
 8004852:	3308      	adds	r3, #8
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	4303      	orrs	r3, r0
 8004858:	b2db      	uxtb	r3, r3
 800485a:	700b      	strb	r3, [r1, #0]
      break;
 800485c:	bf00      	nop
  for(PkgId=0; PkgId<L6470DAISYCHAINSIZE; PkgId++)
 800485e:	7bfb      	ldrb	r3, [r7, #15]
 8004860:	3301      	adds	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
 8004864:	7bfb      	ldrb	r3, [r7, #15]
 8004866:	2b03      	cmp	r3, #3
 8004868:	f67f ae04 	bls.w	8004474 <L6470_PrepareDaisyChainCommand+0x48>
      break;
    case L6470_GETSTATUS_ID:
      break;
    }
  }
}
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bc90      	pop	{r4, r7}
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	0800b9b4 	.word	0x0800b9b4
 800487c:	0800b9a0 	.word	0x0800b9a0

08004880 <AbsPos_2_Position>:
  * 
  * @param  AbsPos      The absolute position in the range from [-(2^21)] to [+(2^21)-1].
  * @retval Position    The position as signed number.
  */
int32_t AbsPos_2_Position(uint32_t AbsPos)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  if (AbsPos > L6470_MAX_POSITION)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800488e:	d303      	bcc.n	8004898 <AbsPos_2_Position+0x18>
    return (AbsPos - (L6470_POSITION_RANGE + 1));
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f5a3 0380 	sub.w	r3, r3, #4194304	; 0x400000
 8004896:	e000      	b.n	800489a <AbsPos_2_Position+0x1a>
  else
    return AbsPos;
 8004898:	687b      	ldr	r3, [r7, #4]
}
 800489a:	4618      	mov	r0, r3
 800489c:	370c      	adds	r7, #12
 800489e:	46bd      	mov	sp, r7
 80048a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a4:	4770      	bx	lr
	...

080048a8 <Step_s_2_Speed>:
  * 
  * @param  step/s      The speed as step/s.
  * @retval Speed       The SPEED register value.
  */
uint32_t Step_s_2_Speed(float Step_s)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_SPEED * ((float)14.9012e-3)))
 80048b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80048b6:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80048e8 <Step_s_2_Speed+0x40>
 80048ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	d80a      	bhi.n	80048da <Step_s_2_Speed+0x32>
    return (uint32_t)(Step_s / ((float)14.9012e-3));
 80048c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80048c8:	eddf 6a08 	vldr	s13, [pc, #32]	; 80048ec <Step_s_2_Speed+0x44>
 80048cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80048d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048d4:	ee17 3a90 	vmov	r3, s15
 80048d8:	e000      	b.n	80048dc <Step_s_2_Speed+0x34>
  else
    return 0;   // Warning
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr
 80048e8:	4674241b 	.word	0x4674241b
 80048ec:	3c74242a 	.word	0x3c74242a

080048f0 <Step_s2_2_Acc>:
  * 
  * @param  step/(s^2)  The acceleration as step/(s^2).
  * @retval Acc         The ACC register value.
  */
uint16_t Step_s2_2_Acc(float Step_s2)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_ACC * ((float)1.4552e1)))
 80048fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80048fe:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004934 <Step_s2_2_Acc+0x44>
 8004902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490a:	d80c      	bhi.n	8004926 <Step_s2_2_Acc+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 800490c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004910:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004938 <Step_s2_2_Acc+0x48>
 8004914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800491c:	edc7 7a00 	vstr	s15, [r7]
 8004920:	883b      	ldrh	r3, [r7, #0]
 8004922:	b29b      	uxth	r3, r3
 8004924:	e000      	b.n	8004928 <Step_s2_2_Acc+0x38>
  else
    return 0;   // Warning
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr
 8004934:	4768c671 	.word	0x4768c671
 8004938:	4168d4fe 	.word	0x4168d4fe

0800493c <Step_s2_2_Dec>:
  * 
  * @param  step/(s^2)  The deceleration as step/(s^2).
  * @retval Dec         The DEC register value.
  */
uint16_t Step_s2_2_Dec(float Step_s2)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s2 <= (L6470_MAX_DEC * ((float)1.4552e1)))
 8004946:	edd7 7a01 	vldr	s15, [r7, #4]
 800494a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004980 <Step_s2_2_Dec+0x44>
 800494e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004956:	d80c      	bhi.n	8004972 <Step_s2_2_Dec+0x36>
    return (uint16_t)(Step_s2 / ((float)1.4552e1));
 8004958:	ed97 7a01 	vldr	s14, [r7, #4]
 800495c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004984 <Step_s2_2_Dec+0x48>
 8004960:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004968:	edc7 7a00 	vstr	s15, [r7]
 800496c:	883b      	ldrh	r3, [r7, #0]
 800496e:	b29b      	uxth	r3, r3
 8004970:	e000      	b.n	8004974 <Step_s2_2_Dec+0x38>
  else
    return 0;   // Warning
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr
 8004980:	4768c671 	.word	0x4768c671
 8004984:	4168d4fe 	.word	0x4168d4fe

08004988 <Step_s_2_MaxSpeed>:
  * 
  * @param  step/s      The max speed as step/s.
  * @retval MaxSpeed    The MAX_SPEED register value.
  */
uint16_t Step_s_2_MaxSpeed(float Step_s)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MAX_SPEED * ((float)15.2588)))
 8004992:	edd7 7a01 	vldr	s15, [r7, #4]
 8004996:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80049cc <Step_s_2_MaxSpeed+0x44>
 800499a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800499e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a2:	d80c      	bhi.n	80049be <Step_s_2_MaxSpeed+0x36>
    return (uint16_t)(Step_s / ((float)15.2588));
 80049a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80049a8:	eddf 6a09 	vldr	s13, [pc, #36]	; 80049d0 <Step_s_2_MaxSpeed+0x48>
 80049ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b4:	edc7 7a00 	vstr	s15, [r7]
 80049b8:	883b      	ldrh	r3, [r7, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	e000      	b.n	80049c0 <Step_s_2_MaxSpeed+0x38>
  else
    return 0;   // Warning
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr
 80049cc:	4673e702 	.word	0x4673e702
 80049d0:	4174240b 	.word	0x4174240b

080049d4 <Step_s_2_MinSpeed>:
  * 
  * @param  step/s      The min speed as step/s.
  * @retval MinSpeed    The MIN_SPEED register value.
  */
uint16_t Step_s_2_MinSpeed(float Step_s)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_MIN_SPEED * ((float)238.4186e-3)))
 80049de:	edd7 7a01 	vldr	s15, [r7, #4]
 80049e2:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004a18 <Step_s_2_MinSpeed+0x44>
 80049e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80049ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ee:	d80c      	bhi.n	8004a0a <Step_s_2_MinSpeed+0x36>
    return (uint16_t)(Step_s / ((float)238.4186e-3));
 80049f0:	ed97 7a01 	vldr	s14, [r7, #4]
 80049f4:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004a1c <Step_s_2_MinSpeed+0x48>
 80049f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80049fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a00:	edc7 7a00 	vstr	s15, [r7]
 8004a04:	883b      	ldrh	r3, [r7, #0]
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	e000      	b.n	8004a0c <Step_s_2_MinSpeed+0x38>
  else
    return 0;   // Warning
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	447414bf 	.word	0x447414bf
 8004a1c:	3e742401 	.word	0x3e742401

08004a20 <Step_s_2_FsSpd>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_FsSpd(float Step_s)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= ((L6470_MAX_FS_SPD+0.5) * ((float)15.25)))
 8004a2a:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a2e:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8004a6c <Step_s_2_FsSpd+0x4c>
 8004a32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3a:	d810      	bhi.n	8004a5e <Step_s_2_FsSpd+0x3e>
    return (uint16_t)((float)(Step_s / ((float)15.25)) - (float)0.5);
 8004a3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a40:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004a70 <Step_s_2_FsSpd+0x50>
 8004a44:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a48:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004a4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a54:	edc7 7a00 	vstr	s15, [r7]
 8004a58:	883b      	ldrh	r3, [r7, #0]
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	e000      	b.n	8004a60 <Step_s_2_FsSpd+0x40>
  else
    return 0;   // Warning
 8004a5e:	2300      	movs	r3, #0
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	4673e180 	.word	0x4673e180
 8004a70:	41740000 	.word	0x41740000

08004a74 <Step_s_2_IntSpeed>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint16_t Step_s_2_IntSpeed(float Step_s)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	ed87 0a01 	vstr	s0, [r7, #4]
  if (Step_s <= (L6470_MAX_INT_SPEED * ((float)59.6046e-3)))
 8004a7e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a82:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004ab8 <Step_s_2_IntSpeed+0x44>
 8004a86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a8e:	d80c      	bhi.n	8004aaa <Step_s_2_IntSpeed+0x36>
    return (uint16_t)(Step_s / ((float)59.6046e-3));
 8004a90:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a94:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004abc <Step_s_2_IntSpeed+0x48>
 8004a98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aa0:	edc7 7a00 	vstr	s15, [r7]
 8004aa4:	883b      	ldrh	r3, [r7, #0]
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	e000      	b.n	8004aac <Step_s_2_IntSpeed+0x38>
  else
    return 0;   // Warning
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	44742023 	.word	0x44742023
 8004abc:	3d7423f4 	.word	0x3d7423f4

08004ac0 <s_Step_2_StSlp>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_StSlp(float s_Step)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_ST_SLP * ((float)1.5686e-5)))
 8004aca:	edd7 7a01 	vldr	s15, [r7, #4]
 8004ace:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004b04 <s_Step_2_StSlp+0x44>
 8004ad2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ada:	d80c      	bhi.n	8004af6 <s_Step_2_StSlp+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004adc:	ed97 7a01 	vldr	s14, [r7, #4]
 8004ae0:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004b08 <s_Step_2_StSlp+0x48>
 8004ae4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004ae8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004aec:	edc7 7a00 	vstr	s15, [r7]
 8004af0:	783b      	ldrb	r3, [r7, #0]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	e000      	b.n	8004af8 <s_Step_2_StSlp+0x38>
  else
    return 0;   // Warning
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	3b8311d9 	.word	0x3b8311d9
 8004b08:	3783956e 	.word	0x3783956e

08004b0c <s_Step_2_FnSlpAcc>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpAcc(float s_Step)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_ACC * ((float)1.5686e-5)))
 8004b16:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b1a:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004b50 <s_Step_2_FnSlpAcc+0x44>
 8004b1e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b26:	d80c      	bhi.n	8004b42 <s_Step_2_FnSlpAcc+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004b28:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b2c:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004b54 <s_Step_2_FnSlpAcc+0x48>
 8004b30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b38:	edc7 7a00 	vstr	s15, [r7]
 8004b3c:	783b      	ldrb	r3, [r7, #0]
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	e000      	b.n	8004b44 <s_Step_2_FnSlpAcc+0x38>
  else
    return 0;   // Warning
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	3b8311d9 	.word	0x3b8311d9
 8004b54:	3783956e 	.word	0x3783956e

08004b58 <s_Step_2_FnSlpDec>:
  * 
  * @param  step/s      The full-step speed as step/s.
  * @retval FsSpd       The FS_SPD register value.
  */
uint8_t s_Step_2_FnSlpDec(float s_Step)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b083      	sub	sp, #12
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	ed87 0a01 	vstr	s0, [r7, #4]
  if (s_Step <= (L6470_MAX_FN_SLP_DEC * ((float)1.5686e-5)))
 8004b62:	edd7 7a01 	vldr	s15, [r7, #4]
 8004b66:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8004b9c <s_Step_2_FnSlpDec+0x44>
 8004b6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b72:	d80c      	bhi.n	8004b8e <s_Step_2_FnSlpDec+0x36>
    return (uint8_t)(s_Step / ((float)1.5686e-5));
 8004b74:	ed97 7a01 	vldr	s14, [r7, #4]
 8004b78:	eddf 6a09 	vldr	s13, [pc, #36]	; 8004ba0 <s_Step_2_FnSlpDec+0x48>
 8004b7c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b84:	edc7 7a00 	vstr	s15, [r7]
 8004b88:	783b      	ldrb	r3, [r7, #0]
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	e000      	b.n	8004b90 <s_Step_2_FnSlpDec+0x38>
  else
    return 0;   // Warning
 8004b8e:	2300      	movs	r3, #0
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	370c      	adds	r7, #12
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr
 8004b9c:	3b8311d9 	.word	0x3b8311d9
 8004ba0:	3783956e 	.word	0x3783956e

08004ba4 <mA_2_OcdTh>:
  * 
  * @param  mA          The overcurrent threshold as mA.
  * @retval OcdTh       The OCD_TH register value.
  */
uint8_t mA_2_OcdTh(float mA)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_OCD_TH+1) * ((float)375)))
 8004bae:	edd7 7a01 	vldr	s15, [r7, #4]
 8004bb2:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004c3c <mA_2_OcdTh+0x98>
 8004bb6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bbe:	d836      	bhi.n	8004c2e <mA_2_OcdTh+0x8a>
  {
    result = (mA / ((float)375));
 8004bc0:	ed97 7a01 	vldr	s14, [r7, #4]
 8004bc4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004c40 <mA_2_OcdTh+0x9c>
 8004bc8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bcc:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 8004bd0:	edd7 7a03 	vldr	s15, [r7, #12]
 8004bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd8:	edc7 7a00 	vstr	s15, [r7]
 8004bdc:	783b      	ldrb	r3, [r7, #0]
 8004bde:	b2db      	uxtb	r3, r3
 8004be0:	ee07 3a90 	vmov	s15, r3
 8004be4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004be8:	ed97 7a03 	vldr	s14, [r7, #12]
 8004bec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bf0:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 8004bf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8004bf8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004bfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c04:	d50a      	bpl.n	8004c1c <mA_2_OcdTh+0x78>
      return ((uint8_t)result - 1);
 8004c06:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c0e:	edc7 7a00 	vstr	s15, [r7]
 8004c12:	783b      	ldrb	r3, [r7, #0]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	3b01      	subs	r3, #1
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	e009      	b.n	8004c30 <mA_2_OcdTh+0x8c>
    else
      return ((uint8_t)result);    
 8004c1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c24:	edc7 7a00 	vstr	s15, [r7]
 8004c28:	783b      	ldrb	r3, [r7, #0]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	e000      	b.n	8004c30 <mA_2_OcdTh+0x8c>
  }
  else
    return 0;   // Warning
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr
 8004c3c:	45bb8000 	.word	0x45bb8000
 8004c40:	43bb8000 	.word	0x43bb8000

08004c44 <mA_2_StallTh>:
  * 
  * @param  mA          The stall detection threshold as mA.
  * @retval StallTh     The STALL_TH register value.
  */
uint8_t mA_2_StallTh(float mA)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	ed87 0a01 	vstr	s0, [r7, #4]
  float result, decimal;
  
  if (mA <= ((L6470_MAX_STALL_TH+1) * ((float)31.25)))
 8004c4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004c52:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8004cdc <mA_2_StallTh+0x98>
 8004c56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c5e:	d836      	bhi.n	8004cce <mA_2_StallTh+0x8a>
  {
    result = (mA / ((float)31.25));
 8004c60:	ed97 7a01 	vldr	s14, [r7, #4]
 8004c64:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004ce0 <mA_2_StallTh+0x9c>
 8004c68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004c6c:	edc7 7a03 	vstr	s15, [r7, #12]
    decimal = result - (uint8_t)result;
 8004c70:	edd7 7a03 	vldr	s15, [r7, #12]
 8004c74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c78:	edc7 7a00 	vstr	s15, [r7]
 8004c7c:	783b      	ldrb	r3, [r7, #0]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	ee07 3a90 	vmov	s15, r3
 8004c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c88:	ed97 7a03 	vldr	s14, [r7, #12]
 8004c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c90:	edc7 7a02 	vstr	s15, [r7, #8]
    
    if (decimal < (float)0.5)
 8004c94:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c98:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004c9c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ca4:	d50a      	bpl.n	8004cbc <mA_2_StallTh+0x78>
      return ((uint8_t)result - 1);
 8004ca6:	edd7 7a03 	vldr	s15, [r7, #12]
 8004caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cae:	edc7 7a00 	vstr	s15, [r7]
 8004cb2:	783b      	ldrb	r3, [r7, #0]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	b2db      	uxtb	r3, r3
 8004cba:	e009      	b.n	8004cd0 <mA_2_StallTh+0x8c>
    else
      return ((uint8_t)result);    
 8004cbc:	edd7 7a03 	vldr	s15, [r7, #12]
 8004cc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cc4:	edc7 7a00 	vstr	s15, [r7]
 8004cc8:	783b      	ldrb	r3, [r7, #0]
 8004cca:	b2db      	uxtb	r3, r3
 8004ccc:	e000      	b.n	8004cd0 <mA_2_StallTh+0x8c>
  }
  else
    return 0;   // Warning
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	457a0000 	.word	0x457a0000
 8004ce0:	41fa0000 	.word	0x41fa0000

08004ce4 <L6470_SetParam>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * @param  Value         The new value.
  */
void L6470_SetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af02      	add	r7, sp, #8
 8004cea:	4603      	mov	r3, r0
 8004cec:	603a      	str	r2, [r7, #0]
 8004cee:	71fb      	strb	r3, [r7, #7]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8004cf4:	79ba      	ldrb	r2, [r7, #6]
 8004cf6:	79f8      	ldrb	r0, [r7, #7]
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	9301      	str	r3, [sp, #4]
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	2201      	movs	r2, #1
 8004d04:	4907      	ldr	r1, [pc, #28]	; (8004d24 <L6470_SetParam+0x40>)
 8004d06:	f7ff fb6d 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d0a:	4907      	ldr	r1, [pc, #28]	; (8004d28 <L6470_SetParam+0x44>)
 8004d0c:	4805      	ldr	r0, [pc, #20]	; (8004d24 <L6470_SetParam+0x40>)
 8004d0e:	f7ff fb8d 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d12:	4906      	ldr	r1, [pc, #24]	; (8004d2c <L6470_SetParam+0x48>)
 8004d14:	4804      	ldr	r0, [pc, #16]	; (8004d28 <L6470_SetParam+0x44>)
 8004d16:	f000 fc51 	bl	80055bc <L6470_DaisyChainCommand>
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000ba0 	.word	0x20000ba0
 8004d28:	20000b90 	.word	0x20000b90
 8004d2c:	20000b80 	.word	0x20000b80

08004d30 <L6470_GetParam>:
  * @param  L6470_RegId   The identifier of the L6470 register to be addressed.
  * 
  * @retval ReceivedValue The register value.
  */
uint32_t L6470_GetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	4603      	mov	r3, r0
 8004d38:	460a      	mov	r2, r1
 8004d3a:	71fb      	strb	r3, [r7, #7]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	71bb      	strb	r3, [r7, #6]
  uint8_t ValueLengthByte;
  uint32_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 8004d40:	79ba      	ldrb	r2, [r7, #6]
 8004d42:	79f8      	ldrb	r0, [r7, #7]
 8004d44:	2300      	movs	r3, #0
 8004d46:	9301      	str	r3, [sp, #4]
 8004d48:	2300      	movs	r3, #0
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	2202      	movs	r2, #2
 8004d50:	4910      	ldr	r1, [pc, #64]	; (8004d94 <L6470_GetParam+0x64>)
 8004d52:	f7ff fb47 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004d56:	4910      	ldr	r1, [pc, #64]	; (8004d98 <L6470_GetParam+0x68>)
 8004d58:	480e      	ldr	r0, [pc, #56]	; (8004d94 <L6470_GetParam+0x64>)
 8004d5a:	f7ff fb67 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004d5e:	490f      	ldr	r1, [pc, #60]	; (8004d9c <L6470_GetParam+0x6c>)
 8004d60:	480d      	ldr	r0, [pc, #52]	; (8004d98 <L6470_GetParam+0x68>)
 8004d62:	f000 fc2b 	bl	80055bc <L6470_DaisyChainCommand>
  
  ValueLengthByte = L6470_Register[L6470_RegId].LengthByte;
 8004d66:	79ba      	ldrb	r2, [r7, #6]
 8004d68:	490d      	ldr	r1, [pc, #52]	; (8004da0 <L6470_GetParam+0x70>)
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	440b      	add	r3, r1
 8004d74:	330e      	adds	r3, #14
 8004d76:	781b      	ldrb	r3, [r3, #0]
 8004d78:	73fb      	strb	r3, [r7, #15]
  
  ReceivedValue = L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, ValueLengthByte);
 8004d7a:	7bfa      	ldrb	r2, [r7, #15]
 8004d7c:	79fb      	ldrb	r3, [r7, #7]
 8004d7e:	4907      	ldr	r1, [pc, #28]	; (8004d9c <L6470_GetParam+0x6c>)
 8004d80:	4618      	mov	r0, r3
 8004d82:	f000 fc61 	bl	8005648 <L6470_ExtractReturnedData>
 8004d86:	60b8      	str	r0, [r7, #8]
  
  return ReceivedValue;
 8004d88:	68bb      	ldr	r3, [r7, #8]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3710      	adds	r7, #16
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	bd80      	pop	{r7, pc}
 8004d92:	bf00      	nop
 8004d94:	20000ba0 	.word	0x20000ba0
 8004d98:	20000b90 	.word	0x20000b90
 8004d9c:	20000b80 	.word	0x20000b80
 8004da0:	0800b6a0 	.word	0x0800b6a0

08004da4 <L6470_Run>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_Run(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af02      	add	r7, sp, #8
 8004daa:	4603      	mov	r3, r0
 8004dac:	603a      	str	r2, [r7, #0]
 8004dae:	71fb      	strb	r3, [r7, #7]
 8004db0:	460b      	mov	r3, r1
 8004db2:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 8004db4:	79ba      	ldrb	r2, [r7, #6]
 8004db6:	79f8      	ldrb	r0, [r7, #7]
 8004db8:	2300      	movs	r3, #0
 8004dba:	9301      	str	r3, [sp, #4]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	9300      	str	r3, [sp, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	4907      	ldr	r1, [pc, #28]	; (8004de4 <L6470_Run+0x40>)
 8004dc6:	f7ff fb0d 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004dca:	4907      	ldr	r1, [pc, #28]	; (8004de8 <L6470_Run+0x44>)
 8004dcc:	4805      	ldr	r0, [pc, #20]	; (8004de4 <L6470_Run+0x40>)
 8004dce:	f7ff fb2d 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004dd2:	4906      	ldr	r1, [pc, #24]	; (8004dec <L6470_Run+0x48>)
 8004dd4:	4804      	ldr	r0, [pc, #16]	; (8004de8 <L6470_Run+0x44>)
 8004dd6:	f000 fbf1 	bl	80055bc <L6470_DaisyChainCommand>
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000ba0 	.word	0x20000ba0
 8004de8:	20000b90 	.word	0x20000b90
 8004dec:	20000b80 	.word	0x20000b80

08004df0 <L6470_StepClock>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_StepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af02      	add	r7, sp, #8
 8004df6:	4603      	mov	r3, r0
 8004df8:	460a      	mov	r2, r1
 8004dfa:	71fb      	strb	r3, [r7, #7]
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 8004e00:	79ba      	ldrb	r2, [r7, #6]
 8004e02:	79f8      	ldrb	r0, [r7, #7]
 8004e04:	2300      	movs	r3, #0
 8004e06:	9301      	str	r3, [sp, #4]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	9300      	str	r3, [sp, #0]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	2204      	movs	r2, #4
 8004e10:	4907      	ldr	r1, [pc, #28]	; (8004e30 <L6470_StepClock+0x40>)
 8004e12:	f7ff fae7 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e16:	4907      	ldr	r1, [pc, #28]	; (8004e34 <L6470_StepClock+0x44>)
 8004e18:	4805      	ldr	r0, [pc, #20]	; (8004e30 <L6470_StepClock+0x40>)
 8004e1a:	f7ff fb07 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e1e:	4906      	ldr	r1, [pc, #24]	; (8004e38 <L6470_StepClock+0x48>)
 8004e20:	4804      	ldr	r0, [pc, #16]	; (8004e34 <L6470_StepClock+0x44>)
 8004e22:	f000 fbcb 	bl	80055bc <L6470_DaisyChainCommand>
}
 8004e26:	bf00      	nop
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000ba0 	.word	0x20000ba0
 8004e34:	20000b90 	.word	0x20000b90
 8004e38:	20000b80 	.word	0x20000b80

08004e3c <L6470_Move>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  N_Step        The number of microsteps.
  */
void L6470_Move(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af02      	add	r7, sp, #8
 8004e42:	4603      	mov	r3, r0
 8004e44:	603a      	str	r2, [r7, #0]
 8004e46:	71fb      	strb	r3, [r7, #7]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8004e4c:	79ba      	ldrb	r2, [r7, #6]
 8004e4e:	79f8      	ldrb	r0, [r7, #7]
 8004e50:	2300      	movs	r3, #0
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	4613      	mov	r3, r2
 8004e5a:	2205      	movs	r2, #5
 8004e5c:	4907      	ldr	r1, [pc, #28]	; (8004e7c <L6470_Move+0x40>)
 8004e5e:	f7ff fac1 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004e62:	4907      	ldr	r1, [pc, #28]	; (8004e80 <L6470_Move+0x44>)
 8004e64:	4805      	ldr	r0, [pc, #20]	; (8004e7c <L6470_Move+0x40>)
 8004e66:	f7ff fae1 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004e6a:	4906      	ldr	r1, [pc, #24]	; (8004e84 <L6470_Move+0x48>)
 8004e6c:	4804      	ldr	r0, [pc, #16]	; (8004e80 <L6470_Move+0x44>)
 8004e6e:	f000 fba5 	bl	80055bc <L6470_DaisyChainCommand>
}
 8004e72:	bf00      	nop
 8004e74:	3708      	adds	r7, #8
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	20000ba0 	.word	0x20000ba0
 8004e80:	20000b90 	.word	0x20000b90
 8004e84:	20000b80 	.word	0x20000b80

08004e88 <L6470_GoTo>:
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b084      	sub	sp, #16
 8004e8c:	af02      	add	r7, sp, #8
 8004e8e:	4603      	mov	r3, r0
 8004e90:	6039      	str	r1, [r7, #0]
 8004e92:	71fb      	strb	r3, [r7, #7]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e9a:	d211      	bcs.n	8004ec0 <L6470_GoTo+0x38>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8004e9c:	79f8      	ldrb	r0, [r7, #7]
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	9301      	str	r3, [sp, #4]
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	9300      	str	r3, [sp, #0]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2206      	movs	r2, #6
 8004eaa:	4907      	ldr	r1, [pc, #28]	; (8004ec8 <L6470_GoTo+0x40>)
 8004eac:	f7ff fa9a 	bl	80043e4 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004eb0:	4906      	ldr	r1, [pc, #24]	; (8004ecc <L6470_GoTo+0x44>)
 8004eb2:	4805      	ldr	r0, [pc, #20]	; (8004ec8 <L6470_GoTo+0x40>)
 8004eb4:	f7ff faba 	bl	800442c <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004eb8:	4905      	ldr	r1, [pc, #20]	; (8004ed0 <L6470_GoTo+0x48>)
 8004eba:	4804      	ldr	r0, [pc, #16]	; (8004ecc <L6470_GoTo+0x44>)
 8004ebc:	f000 fb7e 	bl	80055bc <L6470_DaisyChainCommand>
  }
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	20000ba0 	.word	0x20000ba0
 8004ecc:	20000b90 	.word	0x20000b90
 8004ed0:	20000b80 	.word	0x20000b80

08004ed4 <L6470_GoToDir>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  AbsPos        The target absolute position.
  */
void L6470_GoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af02      	add	r7, sp, #8
 8004eda:	4603      	mov	r3, r0
 8004edc:	603a      	str	r2, [r7, #0]
 8004ede:	71fb      	strb	r3, [r7, #7]
 8004ee0:	460b      	mov	r3, r1
 8004ee2:	71bb      	strb	r3, [r7, #6]
  if (AbsPos <= L6470_POSITION_RANGE)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eea:	d212      	bcs.n	8004f12 <L6470_GoToDir+0x3e>
  {
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8004eec:	79ba      	ldrb	r2, [r7, #6]
 8004eee:	79f8      	ldrb	r0, [r7, #7]
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	9301      	str	r3, [sp, #4]
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	2207      	movs	r2, #7
 8004efc:	4907      	ldr	r1, [pc, #28]	; (8004f1c <L6470_GoToDir+0x48>)
 8004efe:	f7ff fa71 	bl	80043e4 <L6470_PrepareAppCmdPkg>
    L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f02:	4907      	ldr	r1, [pc, #28]	; (8004f20 <L6470_GoToDir+0x4c>)
 8004f04:	4805      	ldr	r0, [pc, #20]	; (8004f1c <L6470_GoToDir+0x48>)
 8004f06:	f7ff fa91 	bl	800442c <L6470_PrepareDaisyChainCommand>
    L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f0a:	4906      	ldr	r1, [pc, #24]	; (8004f24 <L6470_GoToDir+0x50>)
 8004f0c:	4804      	ldr	r0, [pc, #16]	; (8004f20 <L6470_GoToDir+0x4c>)
 8004f0e:	f000 fb55 	bl	80055bc <L6470_DaisyChainCommand>
  }
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000ba0 	.word	0x20000ba0
 8004f20:	20000b90 	.word	0x20000b90
 8004f24:	20000b80 	.word	0x20000b80

08004f28 <L6470_GoUntil>:
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  * @param  Speed         The speed value as (([step/s] * 250e-9) / 2^-28)
  */
void L6470_GoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af02      	add	r7, sp, #8
 8004f2e:	603b      	str	r3, [r7, #0]
 8004f30:	4603      	mov	r3, r0
 8004f32:	71fb      	strb	r3, [r7, #7]
 8004f34:	460b      	mov	r3, r1
 8004f36:	71bb      	strb	r3, [r7, #6]
 8004f38:	4613      	mov	r3, r2
 8004f3a:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 8004f3c:	79b9      	ldrb	r1, [r7, #6]
 8004f3e:	797b      	ldrb	r3, [r7, #5]
 8004f40:	79f8      	ldrb	r0, [r7, #7]
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	9201      	str	r2, [sp, #4]
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	2208      	movs	r2, #8
 8004f4c:	4907      	ldr	r1, [pc, #28]	; (8004f6c <L6470_GoUntil+0x44>)
 8004f4e:	f7ff fa49 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004f52:	4907      	ldr	r1, [pc, #28]	; (8004f70 <L6470_GoUntil+0x48>)
 8004f54:	4805      	ldr	r0, [pc, #20]	; (8004f6c <L6470_GoUntil+0x44>)
 8004f56:	f7ff fa69 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004f5a:	4906      	ldr	r1, [pc, #24]	; (8004f74 <L6470_GoUntil+0x4c>)
 8004f5c:	4804      	ldr	r0, [pc, #16]	; (8004f70 <L6470_GoUntil+0x48>)
 8004f5e:	f000 fb2d 	bl	80055bc <L6470_DaisyChainCommand>
}
 8004f62:	bf00      	nop
 8004f64:	3708      	adds	r7, #8
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000ba0 	.word	0x20000ba0
 8004f70:	20000b90 	.word	0x20000b90
 8004f74:	20000b80 	.word	0x20000b80

08004f78 <L6470_ReleaseSW>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * @param  L6470_ActId   The identifier of the L6470 action about the absolute position.
  * @param  L6470_DirId   The identifier of the L6470 motion direction.
  */
void L6470_ReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 8004f78:	b580      	push	{r7, lr}
 8004f7a:	b084      	sub	sp, #16
 8004f7c:	af02      	add	r7, sp, #8
 8004f7e:	4603      	mov	r3, r0
 8004f80:	71fb      	strb	r3, [r7, #7]
 8004f82:	460b      	mov	r3, r1
 8004f84:	71bb      	strb	r3, [r7, #6]
 8004f86:	4613      	mov	r3, r2
 8004f88:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 8004f8a:	79b9      	ldrb	r1, [r7, #6]
 8004f8c:	797b      	ldrb	r3, [r7, #5]
 8004f8e:	79f8      	ldrb	r0, [r7, #7]
 8004f90:	2200      	movs	r2, #0
 8004f92:	9201      	str	r2, [sp, #4]
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	460b      	mov	r3, r1
 8004f98:	2209      	movs	r2, #9
 8004f9a:	4907      	ldr	r1, [pc, #28]	; (8004fb8 <L6470_ReleaseSW+0x40>)
 8004f9c:	f7ff fa22 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004fa0:	4906      	ldr	r1, [pc, #24]	; (8004fbc <L6470_ReleaseSW+0x44>)
 8004fa2:	4805      	ldr	r0, [pc, #20]	; (8004fb8 <L6470_ReleaseSW+0x40>)
 8004fa4:	f7ff fa42 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004fa8:	4905      	ldr	r1, [pc, #20]	; (8004fc0 <L6470_ReleaseSW+0x48>)
 8004faa:	4804      	ldr	r0, [pc, #16]	; (8004fbc <L6470_ReleaseSW+0x44>)
 8004fac:	f000 fb06 	bl	80055bc <L6470_DaisyChainCommand>
}
 8004fb0:	bf00      	nop
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	20000ba0 	.word	0x20000ba0
 8004fbc:	20000b90 	.word	0x20000b90
 8004fc0:	20000b80 	.word	0x20000b80

08004fc4 <L6470_GoHome>:
  *         via the shortest path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoHome(uint8_t L6470_Id)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af02      	add	r7, sp, #8
 8004fca:	4603      	mov	r3, r0
 8004fcc:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8004fce:	79f8      	ldrb	r0, [r7, #7]
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	9301      	str	r3, [sp, #4]
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	9300      	str	r3, [sp, #0]
 8004fd8:	2300      	movs	r3, #0
 8004fda:	220a      	movs	r2, #10
 8004fdc:	4907      	ldr	r1, [pc, #28]	; (8004ffc <L6470_GoHome+0x38>)
 8004fde:	f7ff fa01 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8004fe2:	4907      	ldr	r1, [pc, #28]	; (8005000 <L6470_GoHome+0x3c>)
 8004fe4:	4805      	ldr	r0, [pc, #20]	; (8004ffc <L6470_GoHome+0x38>)
 8004fe6:	f7ff fa21 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8004fea:	4906      	ldr	r1, [pc, #24]	; (8005004 <L6470_GoHome+0x40>)
 8004fec:	4804      	ldr	r0, [pc, #16]	; (8005000 <L6470_GoHome+0x3c>)
 8004fee:	f000 fae5 	bl	80055bc <L6470_DaisyChainCommand>
}
 8004ff2:	bf00      	nop
 8004ff4:	3708      	adds	r7, #8
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
 8004ffa:	bf00      	nop
 8004ffc:	20000ba0 	.word	0x20000ba0
 8005000:	20000b90 	.word	0x20000b90
 8005004:	20000b80 	.word	0x20000b80

08005008 <L6470_GoMark>:
  *         minimum path.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_GoMark(uint8_t L6470_Id)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af02      	add	r7, sp, #8
 800500e:	4603      	mov	r3, r0
 8005010:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 8005012:	79f8      	ldrb	r0, [r7, #7]
 8005014:	2300      	movs	r3, #0
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	2300      	movs	r3, #0
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	2300      	movs	r3, #0
 800501e:	220b      	movs	r2, #11
 8005020:	4907      	ldr	r1, [pc, #28]	; (8005040 <L6470_GoMark+0x38>)
 8005022:	f7ff f9df 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005026:	4907      	ldr	r1, [pc, #28]	; (8005044 <L6470_GoMark+0x3c>)
 8005028:	4805      	ldr	r0, [pc, #20]	; (8005040 <L6470_GoMark+0x38>)
 800502a:	f7ff f9ff 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800502e:	4906      	ldr	r1, [pc, #24]	; (8005048 <L6470_GoMark+0x40>)
 8005030:	4804      	ldr	r0, [pc, #16]	; (8005044 <L6470_GoMark+0x3c>)
 8005032:	f000 fac3 	bl	80055bc <L6470_DaisyChainCommand>
}
 8005036:	bf00      	nop
 8005038:	3708      	adds	r7, #8
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	20000ba0 	.word	0x20000ba0
 8005044:	20000b90 	.word	0x20000b90
 8005048:	20000b80 	.word	0x20000b80

0800504c <L6470_ResetPos>:
  * @brief  ResetPos command resets the ABS_POS register to zero.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetPos(uint8_t L6470_Id)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af02      	add	r7, sp, #8
 8005052:	4603      	mov	r3, r0
 8005054:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 8005056:	79f8      	ldrb	r0, [r7, #7]
 8005058:	2300      	movs	r3, #0
 800505a:	9301      	str	r3, [sp, #4]
 800505c:	2300      	movs	r3, #0
 800505e:	9300      	str	r3, [sp, #0]
 8005060:	2300      	movs	r3, #0
 8005062:	220c      	movs	r2, #12
 8005064:	4907      	ldr	r1, [pc, #28]	; (8005084 <L6470_ResetPos+0x38>)
 8005066:	f7ff f9bd 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800506a:	4907      	ldr	r1, [pc, #28]	; (8005088 <L6470_ResetPos+0x3c>)
 800506c:	4805      	ldr	r0, [pc, #20]	; (8005084 <L6470_ResetPos+0x38>)
 800506e:	f7ff f9dd 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005072:	4906      	ldr	r1, [pc, #24]	; (800508c <L6470_ResetPos+0x40>)
 8005074:	4804      	ldr	r0, [pc, #16]	; (8005088 <L6470_ResetPos+0x3c>)
 8005076:	f000 faa1 	bl	80055bc <L6470_DaisyChainCommand>
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000ba0 	.word	0x20000ba0
 8005088:	20000b90 	.word	0x20000b90
 800508c:	20000b80 	.word	0x20000b80

08005090 <L6470_ResetDevice>:
  * @brief  ResetDevice command resets the device to power-up conditions.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_ResetDevice(uint8_t L6470_Id)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af02      	add	r7, sp, #8
 8005096:	4603      	mov	r3, r0
 8005098:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 800509a:	79f8      	ldrb	r0, [r7, #7]
 800509c:	2300      	movs	r3, #0
 800509e:	9301      	str	r3, [sp, #4]
 80050a0:	2300      	movs	r3, #0
 80050a2:	9300      	str	r3, [sp, #0]
 80050a4:	2300      	movs	r3, #0
 80050a6:	220d      	movs	r2, #13
 80050a8:	4907      	ldr	r1, [pc, #28]	; (80050c8 <L6470_ResetDevice+0x38>)
 80050aa:	f7ff f99b 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80050ae:	4907      	ldr	r1, [pc, #28]	; (80050cc <L6470_ResetDevice+0x3c>)
 80050b0:	4805      	ldr	r0, [pc, #20]	; (80050c8 <L6470_ResetDevice+0x38>)
 80050b2:	f7ff f9bb 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80050b6:	4906      	ldr	r1, [pc, #24]	; (80050d0 <L6470_ResetDevice+0x40>)
 80050b8:	4804      	ldr	r0, [pc, #16]	; (80050cc <L6470_ResetDevice+0x3c>)
 80050ba:	f000 fa7f 	bl	80055bc <L6470_DaisyChainCommand>
}
 80050be:	bf00      	nop
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	20000ba0 	.word	0x20000ba0
 80050cc:	20000b90 	.word	0x20000b90
 80050d0:	20000b80 	.word	0x20000b80

080050d4 <L6470_SoftStop>:
  *         in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftStop(uint8_t L6470_Id)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af02      	add	r7, sp, #8
 80050da:	4603      	mov	r3, r0
 80050dc:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80050de:	79f8      	ldrb	r0, [r7, #7]
 80050e0:	2300      	movs	r3, #0
 80050e2:	9301      	str	r3, [sp, #4]
 80050e4:	2300      	movs	r3, #0
 80050e6:	9300      	str	r3, [sp, #0]
 80050e8:	2300      	movs	r3, #0
 80050ea:	220e      	movs	r2, #14
 80050ec:	4907      	ldr	r1, [pc, #28]	; (800510c <L6470_SoftStop+0x38>)
 80050ee:	f7ff f979 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80050f2:	4907      	ldr	r1, [pc, #28]	; (8005110 <L6470_SoftStop+0x3c>)
 80050f4:	4805      	ldr	r0, [pc, #20]	; (800510c <L6470_SoftStop+0x38>)
 80050f6:	f7ff f999 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80050fa:	4906      	ldr	r1, [pc, #24]	; (8005114 <L6470_SoftStop+0x40>)
 80050fc:	4804      	ldr	r0, [pc, #16]	; (8005110 <L6470_SoftStop+0x3c>)
 80050fe:	f000 fa5d 	bl	80055bc <L6470_DaisyChainCommand>
}
 8005102:	bf00      	nop
 8005104:	3708      	adds	r7, #8
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	20000ba0 	.word	0x20000ba0
 8005110:	20000b90 	.word	0x20000b90
 8005114:	20000b80 	.word	0x20000b80

08005118 <L6470_HardStop>:
  * @brief  HardStop command causes an immediate motor stop with infinite deceleration.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardStop(uint8_t L6470_Id)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af02      	add	r7, sp, #8
 800511e:	4603      	mov	r3, r0
 8005120:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 8005122:	79f8      	ldrb	r0, [r7, #7]
 8005124:	2300      	movs	r3, #0
 8005126:	9301      	str	r3, [sp, #4]
 8005128:	2300      	movs	r3, #0
 800512a:	9300      	str	r3, [sp, #0]
 800512c:	2300      	movs	r3, #0
 800512e:	220f      	movs	r2, #15
 8005130:	4907      	ldr	r1, [pc, #28]	; (8005150 <L6470_HardStop+0x38>)
 8005132:	f7ff f957 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005136:	4907      	ldr	r1, [pc, #28]	; (8005154 <L6470_HardStop+0x3c>)
 8005138:	4805      	ldr	r0, [pc, #20]	; (8005150 <L6470_HardStop+0x38>)
 800513a:	f7ff f977 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800513e:	4906      	ldr	r1, [pc, #24]	; (8005158 <L6470_HardStop+0x40>)
 8005140:	4804      	ldr	r0, [pc, #16]	; (8005154 <L6470_HardStop+0x3c>)
 8005142:	f000 fa3b 	bl	80055bc <L6470_DaisyChainCommand>
}
 8005146:	bf00      	nop
 8005148:	3708      	adds	r7, #8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20000ba0 	.word	0x20000ba0
 8005154:	20000b90 	.word	0x20000b90
 8005158:	20000b80 	.word	0x20000b80

0800515c <L6470_SoftHiZ>:
  *         stored in the DEC register.
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_SoftHiZ(uint8_t L6470_Id)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b084      	sub	sp, #16
 8005160:	af02      	add	r7, sp, #8
 8005162:	4603      	mov	r3, r0
 8005164:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 8005166:	79f8      	ldrb	r0, [r7, #7]
 8005168:	2300      	movs	r3, #0
 800516a:	9301      	str	r3, [sp, #4]
 800516c:	2300      	movs	r3, #0
 800516e:	9300      	str	r3, [sp, #0]
 8005170:	2300      	movs	r3, #0
 8005172:	2210      	movs	r2, #16
 8005174:	4907      	ldr	r1, [pc, #28]	; (8005194 <L6470_SoftHiZ+0x38>)
 8005176:	f7ff f935 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 800517a:	4907      	ldr	r1, [pc, #28]	; (8005198 <L6470_SoftHiZ+0x3c>)
 800517c:	4805      	ldr	r0, [pc, #20]	; (8005194 <L6470_SoftHiZ+0x38>)
 800517e:	f7ff f955 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 8005182:	4906      	ldr	r1, [pc, #24]	; (800519c <L6470_SoftHiZ+0x40>)
 8005184:	4804      	ldr	r0, [pc, #16]	; (8005198 <L6470_SoftHiZ+0x3c>)
 8005186:	f000 fa19 	bl	80055bc <L6470_DaisyChainCommand>
}
 800518a:	bf00      	nop
 800518c:	3708      	adds	r7, #8
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
 8005192:	bf00      	nop
 8005194:	20000ba0 	.word	0x20000ba0
 8005198:	20000b90 	.word	0x20000b90
 800519c:	20000b80 	.word	0x20000b80

080051a0 <L6470_HardHiZ>:
  * @brief  HardHiZ command immediately disables the power bridges (high impedance state).
  * 
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  */
void L6470_HardHiZ(uint8_t L6470_Id)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af02      	add	r7, sp, #8
 80051a6:	4603      	mov	r3, r0
 80051a8:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 80051aa:	79f8      	ldrb	r0, [r7, #7]
 80051ac:	2300      	movs	r3, #0
 80051ae:	9301      	str	r3, [sp, #4]
 80051b0:	2300      	movs	r3, #0
 80051b2:	9300      	str	r3, [sp, #0]
 80051b4:	2300      	movs	r3, #0
 80051b6:	2211      	movs	r2, #17
 80051b8:	4907      	ldr	r1, [pc, #28]	; (80051d8 <L6470_HardHiZ+0x38>)
 80051ba:	f7ff f913 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 80051be:	4907      	ldr	r1, [pc, #28]	; (80051dc <L6470_HardHiZ+0x3c>)
 80051c0:	4805      	ldr	r0, [pc, #20]	; (80051d8 <L6470_HardHiZ+0x38>)
 80051c2:	f7ff f933 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80051c6:	4906      	ldr	r1, [pc, #24]	; (80051e0 <L6470_HardHiZ+0x40>)
 80051c8:	4804      	ldr	r0, [pc, #16]	; (80051dc <L6470_HardHiZ+0x3c>)
 80051ca:	f000 f9f7 	bl	80055bc <L6470_DaisyChainCommand>
}
 80051ce:	bf00      	nop
 80051d0:	3708      	adds	r7, #8
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	20000ba0 	.word	0x20000ba0
 80051dc:	20000b90 	.word	0x20000b90
 80051e0:	20000b80 	.word	0x20000b80

080051e4 <L6470_GetStatus>:
  * @param  L6470_Id      The identifier of the L6470 target inside the daisy chain.
  * 
  * @retval ReceivedValue The register value.
  */
uint16_t L6470_GetStatus(uint8_t L6470_Id)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	4603      	mov	r3, r0
 80051ec:	71fb      	strb	r3, [r7, #7]
  uint16_t ReceivedValue;

  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 80051ee:	79f8      	ldrb	r0, [r7, #7]
 80051f0:	2300      	movs	r3, #0
 80051f2:	9301      	str	r3, [sp, #4]
 80051f4:	2300      	movs	r3, #0
 80051f6:	9300      	str	r3, [sp, #0]
 80051f8:	2300      	movs	r3, #0
 80051fa:	2212      	movs	r2, #18
 80051fc:	490b      	ldr	r1, [pc, #44]	; (800522c <L6470_GetStatus+0x48>)
 80051fe:	f7ff f8f1 	bl	80043e4 <L6470_PrepareAppCmdPkg>
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005202:	490b      	ldr	r1, [pc, #44]	; (8005230 <L6470_GetStatus+0x4c>)
 8005204:	4809      	ldr	r0, [pc, #36]	; (800522c <L6470_GetStatus+0x48>)
 8005206:	f7ff f911 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 800520a:	490a      	ldr	r1, [pc, #40]	; (8005234 <L6470_GetStatus+0x50>)
 800520c:	4808      	ldr	r0, [pc, #32]	; (8005230 <L6470_GetStatus+0x4c>)
 800520e:	f000 f9d5 	bl	80055bc <L6470_DaisyChainCommand>
  
  ReceivedValue = (uint16_t)L6470_ExtractReturnedData(L6470_Id, (uint8_t*)L6470_DaisyChainSpiRxStruct, 2);
 8005212:	79fb      	ldrb	r3, [r7, #7]
 8005214:	2202      	movs	r2, #2
 8005216:	4907      	ldr	r1, [pc, #28]	; (8005234 <L6470_GetStatus+0x50>)
 8005218:	4618      	mov	r0, r3
 800521a:	f000 fa15 	bl	8005648 <L6470_ExtractReturnedData>
 800521e:	4603      	mov	r3, r0
 8005220:	81fb      	strh	r3, [r7, #14]
  
  return ReceivedValue;
 8005222:	89fb      	ldrh	r3, [r7, #14]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3710      	adds	r7, #16
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}
 800522c:	20000ba0 	.word	0x20000ba0
 8005230:	20000b90 	.word	0x20000b90
 8005234:	20000b80 	.word	0x20000b80

08005238 <L6470_PrepareSetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId, uint32_t Value)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af02      	add	r7, sp, #8
 800523e:	4603      	mov	r3, r0
 8005240:	603a      	str	r2, [r7, #0]
 8005242:	71fb      	strb	r3, [r7, #7]
 8005244:	460b      	mov	r3, r1
 8005246:	71bb      	strb	r3, [r7, #6]
    L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SETPARAM_ID, L6470_RegId, Value, 0);
 8005248:	79ba      	ldrb	r2, [r7, #6]
 800524a:	79f8      	ldrb	r0, [r7, #7]
 800524c:	2300      	movs	r3, #0
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	4613      	mov	r3, r2
 8005256:	2201      	movs	r2, #1
 8005258:	4903      	ldr	r1, [pc, #12]	; (8005268 <L6470_PrepareSetParam+0x30>)
 800525a:	f7ff f8c3 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
 8005266:	bf00      	nop
 8005268:	20000ba0 	.word	0x20000ba0

0800526c <L6470_PrepareGetParam>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetParam(uint8_t L6470_Id, eL6470_RegId_t L6470_RegId)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af02      	add	r7, sp, #8
 8005272:	4603      	mov	r3, r0
 8005274:	460a      	mov	r2, r1
 8005276:	71fb      	strb	r3, [r7, #7]
 8005278:	4613      	mov	r3, r2
 800527a:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETPARAM_ID, L6470_RegId, 0, 0);
 800527c:	79ba      	ldrb	r2, [r7, #6]
 800527e:	79f8      	ldrb	r0, [r7, #7]
 8005280:	2300      	movs	r3, #0
 8005282:	9301      	str	r3, [sp, #4]
 8005284:	2300      	movs	r3, #0
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	4613      	mov	r3, r2
 800528a:	2202      	movs	r2, #2
 800528c:	4903      	ldr	r1, [pc, #12]	; (800529c <L6470_PrepareGetParam+0x30>)
 800528e:	f7ff f8a9 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 8005292:	bf00      	nop
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20000ba0 	.word	0x20000ba0

080052a0 <L6470_PrepareRun>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareRun(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af02      	add	r7, sp, #8
 80052a6:	4603      	mov	r3, r0
 80052a8:	603a      	str	r2, [r7, #0]
 80052aa:	71fb      	strb	r3, [r7, #7]
 80052ac:	460b      	mov	r3, r1
 80052ae:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RUN_ID, L6470_DirId, Speed, 0);
 80052b0:	79ba      	ldrb	r2, [r7, #6]
 80052b2:	79f8      	ldrb	r0, [r7, #7]
 80052b4:	2300      	movs	r3, #0
 80052b6:	9301      	str	r3, [sp, #4]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	9300      	str	r3, [sp, #0]
 80052bc:	4613      	mov	r3, r2
 80052be:	2203      	movs	r2, #3
 80052c0:	4903      	ldr	r1, [pc, #12]	; (80052d0 <L6470_PrepareRun+0x30>)
 80052c2:	f7ff f88f 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 80052c6:	bf00      	nop
 80052c8:	3708      	adds	r7, #8
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000ba0 	.word	0x20000ba0

080052d4 <L6470_PrepareStepClock>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareStepClock(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af02      	add	r7, sp, #8
 80052da:	4603      	mov	r3, r0
 80052dc:	460a      	mov	r2, r1
 80052de:	71fb      	strb	r3, [r7, #7]
 80052e0:	4613      	mov	r3, r2
 80052e2:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_STEPCLOCK_ID, L6470_DirId, 0, 0);
 80052e4:	79ba      	ldrb	r2, [r7, #6]
 80052e6:	79f8      	ldrb	r0, [r7, #7]
 80052e8:	2300      	movs	r3, #0
 80052ea:	9301      	str	r3, [sp, #4]
 80052ec:	2300      	movs	r3, #0
 80052ee:	9300      	str	r3, [sp, #0]
 80052f0:	4613      	mov	r3, r2
 80052f2:	2204      	movs	r2, #4
 80052f4:	4903      	ldr	r1, [pc, #12]	; (8005304 <L6470_PrepareStepClock+0x30>)
 80052f6:	f7ff f875 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	20000ba0 	.word	0x20000ba0

08005308 <L6470_PrepareMove>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareMove(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t N_Step)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af02      	add	r7, sp, #8
 800530e:	4603      	mov	r3, r0
 8005310:	603a      	str	r2, [r7, #0]
 8005312:	71fb      	strb	r3, [r7, #7]
 8005314:	460b      	mov	r3, r1
 8005316:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_MOVE_ID, L6470_DirId, N_Step, 0);
 8005318:	79ba      	ldrb	r2, [r7, #6]
 800531a:	79f8      	ldrb	r0, [r7, #7]
 800531c:	2300      	movs	r3, #0
 800531e:	9301      	str	r3, [sp, #4]
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	4613      	mov	r3, r2
 8005326:	2205      	movs	r2, #5
 8005328:	4903      	ldr	r1, [pc, #12]	; (8005338 <L6470_PrepareMove+0x30>)
 800532a:	f7ff f85b 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 800532e:	bf00      	nop
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}
 8005336:	bf00      	nop
 8005338:	20000ba0 	.word	0x20000ba0

0800533c <L6470_PrepareGoTo>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoTo(uint8_t L6470_Id, uint32_t AbsPos)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b084      	sub	sp, #16
 8005340:	af02      	add	r7, sp, #8
 8005342:	4603      	mov	r3, r0
 8005344:	6039      	str	r1, [r7, #0]
 8005346:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTO_ID, AbsPos, 0, 0);
 8005348:	79f8      	ldrb	r0, [r7, #7]
 800534a:	2300      	movs	r3, #0
 800534c:	9301      	str	r3, [sp, #4]
 800534e:	2300      	movs	r3, #0
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2206      	movs	r2, #6
 8005356:	4903      	ldr	r1, [pc, #12]	; (8005364 <L6470_PrepareGoTo+0x28>)
 8005358:	f7ff f844 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 800535c:	bf00      	nop
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}
 8005364:	20000ba0 	.word	0x20000ba0

08005368 <L6470_PrepareGoToDir>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoToDir(uint8_t L6470_Id, eL6470_DirId_t L6470_DirId, uint32_t AbsPos)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af02      	add	r7, sp, #8
 800536e:	4603      	mov	r3, r0
 8005370:	603a      	str	r2, [r7, #0]
 8005372:	71fb      	strb	r3, [r7, #7]
 8005374:	460b      	mov	r3, r1
 8005376:	71bb      	strb	r3, [r7, #6]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOTODIR_ID, L6470_DirId, AbsPos, 0);
 8005378:	79ba      	ldrb	r2, [r7, #6]
 800537a:	79f8      	ldrb	r0, [r7, #7]
 800537c:	2300      	movs	r3, #0
 800537e:	9301      	str	r3, [sp, #4]
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	4613      	mov	r3, r2
 8005386:	2207      	movs	r2, #7
 8005388:	4903      	ldr	r1, [pc, #12]	; (8005398 <L6470_PrepareGoToDir+0x30>)
 800538a:	f7ff f82b 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 800538e:	bf00      	nop
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	bf00      	nop
 8005398:	20000ba0 	.word	0x20000ba0

0800539c <L6470_PrepareGoUntil>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoUntil(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId, uint32_t Speed)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	4603      	mov	r3, r0
 80053a6:	71fb      	strb	r3, [r7, #7]
 80053a8:	460b      	mov	r3, r1
 80053aa:	71bb      	strb	r3, [r7, #6]
 80053ac:	4613      	mov	r3, r2
 80053ae:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOUNTIL_ID, L6470_ActId, L6470_DirId, Speed);
 80053b0:	79b9      	ldrb	r1, [r7, #6]
 80053b2:	797b      	ldrb	r3, [r7, #5]
 80053b4:	79f8      	ldrb	r0, [r7, #7]
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	9201      	str	r2, [sp, #4]
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	460b      	mov	r3, r1
 80053be:	2208      	movs	r2, #8
 80053c0:	4903      	ldr	r1, [pc, #12]	; (80053d0 <L6470_PrepareGoUntil+0x34>)
 80053c2:	f7ff f80f 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 80053c6:	bf00      	nop
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	20000ba0 	.word	0x20000ba0

080053d4 <L6470_PrepareReleaseSW>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareReleaseSW(uint8_t L6470_Id, eL6470_ActId_t L6470_ActId, eL6470_DirId_t L6470_DirId)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af02      	add	r7, sp, #8
 80053da:	4603      	mov	r3, r0
 80053dc:	71fb      	strb	r3, [r7, #7]
 80053de:	460b      	mov	r3, r1
 80053e0:	71bb      	strb	r3, [r7, #6]
 80053e2:	4613      	mov	r3, r2
 80053e4:	717b      	strb	r3, [r7, #5]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RELEASESW_ID, L6470_ActId, L6470_DirId, 0);
 80053e6:	79b9      	ldrb	r1, [r7, #6]
 80053e8:	797b      	ldrb	r3, [r7, #5]
 80053ea:	79f8      	ldrb	r0, [r7, #7]
 80053ec:	2200      	movs	r2, #0
 80053ee:	9201      	str	r2, [sp, #4]
 80053f0:	9300      	str	r3, [sp, #0]
 80053f2:	460b      	mov	r3, r1
 80053f4:	2209      	movs	r2, #9
 80053f6:	4903      	ldr	r1, [pc, #12]	; (8005404 <L6470_PrepareReleaseSW+0x30>)
 80053f8:	f7fe fff4 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000ba0 	.word	0x20000ba0

08005408 <L6470_PrepareGoHome>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoHome(uint8_t L6470_Id)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b084      	sub	sp, #16
 800540c:	af02      	add	r7, sp, #8
 800540e:	4603      	mov	r3, r0
 8005410:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOHOME_ID, 0, 0, 0);
 8005412:	79f8      	ldrb	r0, [r7, #7]
 8005414:	2300      	movs	r3, #0
 8005416:	9301      	str	r3, [sp, #4]
 8005418:	2300      	movs	r3, #0
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	2300      	movs	r3, #0
 800541e:	220a      	movs	r2, #10
 8005420:	4903      	ldr	r1, [pc, #12]	; (8005430 <L6470_PrepareGoHome+0x28>)
 8005422:	f7fe ffdf 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 8005426:	bf00      	nop
 8005428:	3708      	adds	r7, #8
 800542a:	46bd      	mov	sp, r7
 800542c:	bd80      	pop	{r7, pc}
 800542e:	bf00      	nop
 8005430:	20000ba0 	.word	0x20000ba0

08005434 <L6470_PrepareGoMark>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGoMark(uint8_t L6470_Id)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b084      	sub	sp, #16
 8005438:	af02      	add	r7, sp, #8
 800543a:	4603      	mov	r3, r0
 800543c:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GOMARK_ID, 0, 0, 0);
 800543e:	79f8      	ldrb	r0, [r7, #7]
 8005440:	2300      	movs	r3, #0
 8005442:	9301      	str	r3, [sp, #4]
 8005444:	2300      	movs	r3, #0
 8005446:	9300      	str	r3, [sp, #0]
 8005448:	2300      	movs	r3, #0
 800544a:	220b      	movs	r2, #11
 800544c:	4903      	ldr	r1, [pc, #12]	; (800545c <L6470_PrepareGoMark+0x28>)
 800544e:	f7fe ffc9 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 8005452:	bf00      	nop
 8005454:	3708      	adds	r7, #8
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}
 800545a:	bf00      	nop
 800545c:	20000ba0 	.word	0x20000ba0

08005460 <L6470_PrepareResetPos>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetPos(uint8_t L6470_Id)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b084      	sub	sp, #16
 8005464:	af02      	add	r7, sp, #8
 8005466:	4603      	mov	r3, r0
 8005468:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETPOS_ID, 0, 0, 0);
 800546a:	79f8      	ldrb	r0, [r7, #7]
 800546c:	2300      	movs	r3, #0
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	2300      	movs	r3, #0
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2300      	movs	r3, #0
 8005476:	220c      	movs	r2, #12
 8005478:	4903      	ldr	r1, [pc, #12]	; (8005488 <L6470_PrepareResetPos+0x28>)
 800547a:	f7fe ffb3 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 800547e:	bf00      	nop
 8005480:	3708      	adds	r7, #8
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	20000ba0 	.word	0x20000ba0

0800548c <L6470_PrepareResetDevice>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareResetDevice(uint8_t L6470_Id)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af02      	add	r7, sp, #8
 8005492:	4603      	mov	r3, r0
 8005494:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_RESETDEVICE_ID, 0, 0, 0);
 8005496:	79f8      	ldrb	r0, [r7, #7]
 8005498:	2300      	movs	r3, #0
 800549a:	9301      	str	r3, [sp, #4]
 800549c:	2300      	movs	r3, #0
 800549e:	9300      	str	r3, [sp, #0]
 80054a0:	2300      	movs	r3, #0
 80054a2:	220d      	movs	r2, #13
 80054a4:	4903      	ldr	r1, [pc, #12]	; (80054b4 <L6470_PrepareResetDevice+0x28>)
 80054a6:	f7fe ff9d 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 80054aa:	bf00      	nop
 80054ac:	3708      	adds	r7, #8
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}
 80054b2:	bf00      	nop
 80054b4:	20000ba0 	.word	0x20000ba0

080054b8 <L6470_PrepareSoftStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftStop(uint8_t L6470_Id)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af02      	add	r7, sp, #8
 80054be:	4603      	mov	r3, r0
 80054c0:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTSTOP_ID, 0, 0, 0);
 80054c2:	79f8      	ldrb	r0, [r7, #7]
 80054c4:	2300      	movs	r3, #0
 80054c6:	9301      	str	r3, [sp, #4]
 80054c8:	2300      	movs	r3, #0
 80054ca:	9300      	str	r3, [sp, #0]
 80054cc:	2300      	movs	r3, #0
 80054ce:	220e      	movs	r2, #14
 80054d0:	4903      	ldr	r1, [pc, #12]	; (80054e0 <L6470_PrepareSoftStop+0x28>)
 80054d2:	f7fe ff87 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 80054d6:	bf00      	nop
 80054d8:	3708      	adds	r7, #8
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	20000ba0 	.word	0x20000ba0

080054e4 <L6470_PrepareHardStop>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardStop(uint8_t L6470_Id)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af02      	add	r7, sp, #8
 80054ea:	4603      	mov	r3, r0
 80054ec:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDSTOP_ID, 0, 0, 0);
 80054ee:	79f8      	ldrb	r0, [r7, #7]
 80054f0:	2300      	movs	r3, #0
 80054f2:	9301      	str	r3, [sp, #4]
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	2300      	movs	r3, #0
 80054fa:	220f      	movs	r2, #15
 80054fc:	4903      	ldr	r1, [pc, #12]	; (800550c <L6470_PrepareHardStop+0x28>)
 80054fe:	f7fe ff71 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 8005502:	bf00      	nop
 8005504:	3708      	adds	r7, #8
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000ba0 	.word	0x20000ba0

08005510 <L6470_PrepareSoftHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareSoftHiZ(uint8_t L6470_Id)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af02      	add	r7, sp, #8
 8005516:	4603      	mov	r3, r0
 8005518:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_SOFTHIZ_ID, 0, 0, 0);
 800551a:	79f8      	ldrb	r0, [r7, #7]
 800551c:	2300      	movs	r3, #0
 800551e:	9301      	str	r3, [sp, #4]
 8005520:	2300      	movs	r3, #0
 8005522:	9300      	str	r3, [sp, #0]
 8005524:	2300      	movs	r3, #0
 8005526:	2210      	movs	r2, #16
 8005528:	4903      	ldr	r1, [pc, #12]	; (8005538 <L6470_PrepareSoftHiZ+0x28>)
 800552a:	f7fe ff5b 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 800552e:	bf00      	nop
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	20000ba0 	.word	0x20000ba0

0800553c <L6470_PrepareHardHiZ>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareHardHiZ(uint8_t L6470_Id)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af02      	add	r7, sp, #8
 8005542:	4603      	mov	r3, r0
 8005544:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_HARDHIZ_ID, 0, 0, 0);
 8005546:	79f8      	ldrb	r0, [r7, #7]
 8005548:	2300      	movs	r3, #0
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	2300      	movs	r3, #0
 800554e:	9300      	str	r3, [sp, #0]
 8005550:	2300      	movs	r3, #0
 8005552:	2211      	movs	r2, #17
 8005554:	4903      	ldr	r1, [pc, #12]	; (8005564 <L6470_PrepareHardHiZ+0x28>)
 8005556:	f7fe ff45 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 800555a:	bf00      	nop
 800555c:	3708      	adds	r7, #8
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
 8005562:	bf00      	nop
 8005564:	20000ba0 	.word	0x20000ba0

08005568 <L6470_PrepareGetStatus>:
  *
  * @note   This function will properly fill the right column of the L6470_AppCmdPkg.
  * @note   The commad will be sent by @ref L6470_PerformPreparedApplicationCommand.
  */
void L6470_PrepareGetStatus(uint8_t L6470_Id)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af02      	add	r7, sp, #8
 800556e:	4603      	mov	r3, r0
 8005570:	71fb      	strb	r3, [r7, #7]
  L6470_PrepareAppCmdPkg(L6470_Id, L6470_AppCmdPkg, L6470_GETSTATUS_ID, 0, 0, 0);
 8005572:	79f8      	ldrb	r0, [r7, #7]
 8005574:	2300      	movs	r3, #0
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	2300      	movs	r3, #0
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	2300      	movs	r3, #0
 800557e:	2212      	movs	r2, #18
 8005580:	4903      	ldr	r1, [pc, #12]	; (8005590 <L6470_PrepareGetStatus+0x28>)
 8005582:	f7fe ff2f 	bl	80043e4 <L6470_PrepareAppCmdPkg>
}
 8005586:	bf00      	nop
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	20000ba0 	.word	0x20000ba0

08005594 <L6470_PerformPreparedApplicationCommand>:
  * @retval (uint8_t*)L6470_DaisyChainSpiRxStruct  The pointer to the structure
  *         containing returned values from each L6470 of the daisy chain for each
  *         sent SPI data.
  */
uint8_t* L6470_PerformPreparedApplicationCommand(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  L6470_PrepareDaisyChainCommand(L6470_AppCmdPkg, (uint8_t*)L6470_DaisyChainSpiTxStruct);
 8005598:	4905      	ldr	r1, [pc, #20]	; (80055b0 <L6470_PerformPreparedApplicationCommand+0x1c>)
 800559a:	4806      	ldr	r0, [pc, #24]	; (80055b4 <L6470_PerformPreparedApplicationCommand+0x20>)
 800559c:	f7fe ff46 	bl	800442c <L6470_PrepareDaisyChainCommand>
  L6470_DaisyChainCommand((uint8_t*)L6470_DaisyChainSpiTxStruct, (uint8_t*)L6470_DaisyChainSpiRxStruct);
 80055a0:	4905      	ldr	r1, [pc, #20]	; (80055b8 <L6470_PerformPreparedApplicationCommand+0x24>)
 80055a2:	4803      	ldr	r0, [pc, #12]	; (80055b0 <L6470_PerformPreparedApplicationCommand+0x1c>)
 80055a4:	f000 f80a 	bl	80055bc <L6470_DaisyChainCommand>
  
  return (uint8_t*)(L6470_DaisyChainSpiRxStruct);
 80055a8:	4b03      	ldr	r3, [pc, #12]	; (80055b8 <L6470_PerformPreparedApplicationCommand+0x24>)
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	bd80      	pop	{r7, pc}
 80055ae:	bf00      	nop
 80055b0:	20000b90 	.word	0x20000b90
 80055b4:	20000ba0 	.word	0x20000ba0
 80055b8:	20000b80 	.word	0x20000b80

080055bc <L6470_DaisyChainCommand>:
  * @brief  Send command to the L6470 daisy chain via SPI
  * @param  pL6470_DaisyChainSpiTxStruct  Pointer to the matrix array of bytes to be sent to the daisy chain L6470
  * @param  pL6470_DaisyChainSpiRxStruct  Pointer to the matrix array of bytes to be received from the daisy chain L6470
  */
void L6470_DaisyChainCommand(uint8_t* pL6470_DaisyChainSpiTxStruct, uint8_t* pL6470_DaisyChainSpiRxStruct)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b086      	sub	sp, #24
 80055c0:	af02      	add	r7, sp, #8
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  uint8_t spibyte;
  
  L6470_DaisyChain_HalfPrepared = ZERO_F;
 80055c6:	4b1c      	ldr	r3, [pc, #112]	; (8005638 <L6470_DaisyChainCommand+0x7c>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	701a      	strb	r2, [r3, #0]
  
  /* Send all command bytes via SPI */
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 80055cc:	2300      	movs	r3, #0
 80055ce:	73fb      	strb	r3, [r7, #15]
 80055d0:	e02b      	b.n	800562a <L6470_DaisyChainCommand+0x6e>
  {
    /* Enable SPI communication for L6470 */
    L6470_nCS_LOW();
 80055d2:	2200      	movs	r2, #0
 80055d4:	2110      	movs	r1, #16
 80055d6:	4819      	ldr	r0, [pc, #100]	; (800563c <L6470_DaisyChainCommand+0x80>)
 80055d8:	f7fc fda6 	bl	8002128 <HAL_GPIO_WritePin>
    
    /* Send the command via SPI */
    L6470_SPI_Communication(&hspi1, (pL6470_DaisyChainSpiTxStruct+(spibyte * L6470DAISYCHAINSIZE)), (pL6470_DaisyChainSpiRxStruct+(spibyte * L6470DAISYCHAINSIZE)), L6470DAISYCHAINSIZE, 10);
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	461a      	mov	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	1899      	adds	r1, r3, r2
 80055e6:	7bfb      	ldrb	r3, [r7, #15]
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	461a      	mov	r2, r3
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	441a      	add	r2, r3
 80055f0:	230a      	movs	r3, #10
 80055f2:	9300      	str	r3, [sp, #0]
 80055f4:	2304      	movs	r3, #4
 80055f6:	4812      	ldr	r0, [pc, #72]	; (8005640 <L6470_DaisyChainCommand+0x84>)
 80055f8:	f7fd fc8e 	bl	8002f18 <HAL_SPI_TransmitReceive>
    
    /* Allow the device to decode the received command */
    L6470_nCS_HIGH();
 80055fc:	2201      	movs	r2, #1
 80055fe:	2110      	movs	r1, #16
 8005600:	480e      	ldr	r0, [pc, #56]	; (800563c <L6470_DaisyChainCommand+0x80>)
 8005602:	f7fc fd91 	bl	8002128 <HAL_GPIO_WritePin>
    
    _DELAY(TDISCS);
 8005606:	4b0f      	ldr	r3, [pc, #60]	; (8005644 <L6470_DaisyChainCommand+0x88>)
 8005608:	2200      	movs	r2, #0
 800560a:	701a      	strb	r2, [r3, #0]
 800560c:	e006      	b.n	800561c <L6470_DaisyChainCommand+0x60>
 800560e:	bf00      	nop
 8005610:	4b0c      	ldr	r3, [pc, #48]	; (8005644 <L6470_DaisyChainCommand+0x88>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	3301      	adds	r3, #1
 8005616:	b2da      	uxtb	r2, r3
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <L6470_DaisyChainCommand+0x88>)
 800561a:	701a      	strb	r2, [r3, #0]
 800561c:	4b09      	ldr	r3, [pc, #36]	; (8005644 <L6470_DaisyChainCommand+0x88>)
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	2b13      	cmp	r3, #19
 8005622:	d9f4      	bls.n	800560e <L6470_DaisyChainCommand+0x52>
  for(spibyte=0; spibyte < L6470MAXSPICMDBYTESIZE; spibyte++)
 8005624:	7bfb      	ldrb	r3, [r7, #15]
 8005626:	3301      	adds	r3, #1
 8005628:	73fb      	strb	r3, [r7, #15]
 800562a:	7bfb      	ldrb	r3, [r7, #15]
 800562c:	2b03      	cmp	r3, #3
 800562e:	d9d0      	bls.n	80055d2 <L6470_DaisyChainCommand+0x16>
  }
}
 8005630:	bf00      	nop
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	200007c8 	.word	0x200007c8
 800563c:	40020000 	.word	0x40020000
 8005640:	20000efc 	.word	0x20000efc
 8005644:	20000be2 	.word	0x20000be2

08005648 <L6470_ExtractReturnedData>:
  * @param    pL6470_DaisyChainSpiRxStruct  uint8_t-pointer to the matrix that
  *           contains the received data by SPI from the L6470 daisy chain.
  * @param    LengthByte  The number of bytes about the received value.
  */
uint32_t L6470_ExtractReturnedData(uint8_t L6470_Id, uint8_t* pL6470_DaisyChainSpiRxStruct, uint8_t LengthByte)
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	4603      	mov	r3, r0
 8005650:	6039      	str	r1, [r7, #0]
 8005652:	71fb      	strb	r3, [r7, #7]
 8005654:	4613      	mov	r3, r2
 8005656:	71bb      	strb	r3, [r7, #6]
  uint32_t value;
  uint8_t i;
  
  value = 0x000000;
 8005658:	2300      	movs	r3, #0
 800565a:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 800565c:	2301      	movs	r3, #1
 800565e:	72fb      	strb	r3, [r7, #11]
 8005660:	e015      	b.n	800568e <L6470_ExtractReturnedData+0x46>
  {
    value |= (*(pL6470_DaisyChainSpiRxStruct+(i*L6470DAISYCHAINSIZE)+L6470_Id))<<((LengthByte-i)*8);
 8005662:	7afb      	ldrb	r3, [r7, #11]
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	461a      	mov	r2, r3
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	4413      	add	r3, r2
 800566c:	683a      	ldr	r2, [r7, #0]
 800566e:	4413      	add	r3, r2
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	4619      	mov	r1, r3
 8005674:	79ba      	ldrb	r2, [r7, #6]
 8005676:	7afb      	ldrb	r3, [r7, #11]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	fa01 f303 	lsl.w	r3, r1, r3
 8005680:	461a      	mov	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
  for (i=1; i<=(L6470MAXSPICMDBYTESIZE-1); i++)
 8005688:	7afb      	ldrb	r3, [r7, #11]
 800568a:	3301      	adds	r3, #1
 800568c:	72fb      	strb	r3, [r7, #11]
 800568e:	7afb      	ldrb	r3, [r7, #11]
 8005690:	2b03      	cmp	r3, #3
 8005692:	d9e6      	bls.n	8005662 <L6470_ExtractReturnedData+0x1a>
  }
  
  return value;
 8005694:	68fb      	ldr	r3, [r7, #12]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
	...

080056a4 <L6470_CheckStatusRegisterFlag>:
  *
  * @retval state The flag state.
  */

uint8_t L6470_CheckStatusRegisterFlag(uint8_t L6470_Id, uint8_t L6470_StatusRegisterFlagId)
{
 80056a4:	b590      	push	{r4, r7, lr}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	4603      	mov	r3, r0
 80056ac:	460a      	mov	r2, r1
 80056ae:	71fb      	strb	r3, [r7, #7]
 80056b0:	4613      	mov	r3, r2
 80056b2:	71bb      	strb	r3, [r7, #6]
  uint8_t state = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	73fb      	strb	r3, [r7, #15]
  
  *((uint16_t*)pL6470_StatusRegister) = L6470_GetParam(L6470_Id, L6470_STATUS_ID);
 80056b8:	4b56      	ldr	r3, [pc, #344]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 80056ba:	681c      	ldr	r4, [r3, #0]
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	2118      	movs	r1, #24
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7ff fb35 	bl	8004d30 <L6470_GetParam>
 80056c6:	4603      	mov	r3, r0
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	8023      	strh	r3, [r4, #0]
  
  switch(L6470_StatusRegisterFlagId)
 80056cc:	79bb      	ldrb	r3, [r7, #6]
 80056ce:	2b0e      	cmp	r3, #14
 80056d0:	f200 809a 	bhi.w	8005808 <L6470_CheckStatusRegisterFlag+0x164>
 80056d4:	a201      	add	r2, pc, #4	; (adr r2, 80056dc <L6470_CheckStatusRegisterFlag+0x38>)
 80056d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056da:	bf00      	nop
 80056dc:	08005719 	.word	0x08005719
 80056e0:	08005729 	.word	0x08005729
 80056e4:	08005739 	.word	0x08005739
 80056e8:	08005749 	.word	0x08005749
 80056ec:	08005759 	.word	0x08005759
 80056f0:	08005769 	.word	0x08005769
 80056f4:	08005779 	.word	0x08005779
 80056f8:	08005789 	.word	0x08005789
 80056fc:	08005799 	.word	0x08005799
 8005700:	080057a9 	.word	0x080057a9
 8005704:	080057b9 	.word	0x080057b9
 8005708:	080057c9 	.word	0x080057c9
 800570c:	080057d9 	.word	0x080057d9
 8005710:	080057e9 	.word	0x080057e9
 8005714:	080057f9 	.word	0x080057f9
  {
  case HiZ_ID:
    state = pL6470_StatusRegister->HiZ;
 8005718:	4b3e      	ldr	r3, [pc, #248]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005722:	b2db      	uxtb	r3, r3
 8005724:	73fb      	strb	r3, [r7, #15]
    break;
 8005726:	e06f      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case BUSY_ID:
    state = pL6470_StatusRegister->BUSY;
 8005728:	4b3a      	ldr	r3, [pc, #232]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005732:	b2db      	uxtb	r3, r3
 8005734:	73fb      	strb	r3, [r7, #15]
    break;
 8005736:	e067      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case SW_F_ID:
    state = pL6470_StatusRegister->SW_F;
 8005738:	4b36      	ldr	r3, [pc, #216]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005742:	b2db      	uxtb	r3, r3
 8005744:	73fb      	strb	r3, [r7, #15]
    break;
 8005746:	e05f      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case SW_EVN_ID:
    state = pL6470_StatusRegister->SW_EVN;
 8005748:	4b32      	ldr	r3, [pc, #200]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005752:	b2db      	uxtb	r3, r3
 8005754:	73fb      	strb	r3, [r7, #15]
    break;
 8005756:	e057      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case DIR_ID:
    state = pL6470_StatusRegister->DIR;
 8005758:	4b2e      	ldr	r3, [pc, #184]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8005762:	b2db      	uxtb	r3, r3
 8005764:	73fb      	strb	r3, [r7, #15]
    break;
 8005766:	e04f      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case MOT_STATUS_ID:
    state = pL6470_StatusRegister->MOT_STATUS;
 8005768:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8005772:	b2db      	uxtb	r3, r3
 8005774:	73fb      	strb	r3, [r7, #15]
    break;
 8005776:	e047      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case NOTPERF_CMD_ID:
    state = pL6470_StatusRegister->NOTPERF_CMD;
 8005778:	4b26      	ldr	r3, [pc, #152]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	781b      	ldrb	r3, [r3, #0]
 800577e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005782:	b2db      	uxtb	r3, r3
 8005784:	73fb      	strb	r3, [r7, #15]
    break;
 8005786:	e03f      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case WRONG_CMD_ID:
    state = pL6470_StatusRegister->WRONG_CMD;
 8005788:	4b22      	ldr	r3, [pc, #136]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	785b      	ldrb	r3, [r3, #1]
 800578e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005792:	b2db      	uxtb	r3, r3
 8005794:	73fb      	strb	r3, [r7, #15]
    break;
 8005796:	e037      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case UVLO_ID:
    state = pL6470_StatusRegister->UVLO;
 8005798:	4b1e      	ldr	r3, [pc, #120]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	785b      	ldrb	r3, [r3, #1]
 800579e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	73fb      	strb	r3, [r7, #15]
    break;
 80057a6:	e02f      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case TH_WRN_ID:
    state = pL6470_StatusRegister->TH_WRN;
 80057a8:	4b1a      	ldr	r3, [pc, #104]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	785b      	ldrb	r3, [r3, #1]
 80057ae:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	73fb      	strb	r3, [r7, #15]
    break;
 80057b6:	e027      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case TH_SD_ID:
    state = pL6470_StatusRegister->TH_SD;
 80057b8:	4b16      	ldr	r3, [pc, #88]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	785b      	ldrb	r3, [r3, #1]
 80057be:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	73fb      	strb	r3, [r7, #15]
    break;
 80057c6:	e01f      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case OCD_ID:
    state = pL6470_StatusRegister->OCD;
 80057c8:	4b12      	ldr	r3, [pc, #72]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	785b      	ldrb	r3, [r3, #1]
 80057ce:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	73fb      	strb	r3, [r7, #15]
    break;
 80057d6:	e017      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_A_ID:
    state = pL6470_StatusRegister->STEP_LOSS_A;
 80057d8:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	785b      	ldrb	r3, [r3, #1]
 80057de:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	73fb      	strb	r3, [r7, #15]
    break;
 80057e6:	e00f      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case STEP_LOSS_B_ID:
    state = pL6470_StatusRegister->STEP_LOSS_B;
 80057e8:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	73fb      	strb	r3, [r7, #15]
    break;
 80057f6:	e007      	b.n	8005808 <L6470_CheckStatusRegisterFlag+0x164>
  case SCK_MOD_ID:
    state = pL6470_StatusRegister->SCK_MOD;
 80057f8:	4b06      	ldr	r3, [pc, #24]	; (8005814 <L6470_CheckStatusRegisterFlag+0x170>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	73fb      	strb	r3, [r7, #15]
    break;
 8005806:	bf00      	nop
  }
  
  return state;
 8005808:	7bfb      	ldrb	r3, [r7, #15]
}
 800580a:	4618      	mov	r0, r3
 800580c:	3714      	adds	r7, #20
 800580e:	46bd      	mov	sp, r7
 8005810:	bd90      	pop	{r4, r7, pc}
 8005812:	bf00      	nop
 8005814:	2000009c 	.word	0x2000009c

08005818 <L6470_Config>:
  * @brief  Configures the L6470 registers.
  * @param  StepperMotorDriverHandle_t* The pointer to the stepper motor driver handle structure.
  * @param  MotorParameterData_t* The pointer to the related parameter data structure.
  */
void L6470_Config(StepperMotorDriverHandle_t *StepperMotorDriverHandle, MotorParameterData_t *MotorParameterData)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
  /* Prepare the 'Register' field of StepperMotorDriverHandle */
  StepperMotorDriverHandle->Register.ACC = Step_s2_2_Acc(MotorParameterData->acc);
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	edd3 7a05 	vldr	s15, [r3, #20]
 8005828:	eeb0 0a67 	vmov.f32	s0, s15
 800582c:	f7ff f860 	bl	80048f0 <Step_s2_2_Acc>
 8005830:	4603      	mov	r3, r0
 8005832:	461a      	mov	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	839a      	strh	r2, [r3, #28]
  StepperMotorDriverHandle->Register.DEC = Step_s2_2_Dec(MotorParameterData->dec);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	edd3 7a06 	vldr	s15, [r3, #24]
 800583e:	eeb0 0a67 	vmov.f32	s0, s15
 8005842:	f7ff f87b 	bl	800493c <Step_s2_2_Dec>
 8005846:	4603      	mov	r3, r0
 8005848:	461a      	mov	r2, r3
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	83da      	strh	r2, [r3, #30]
  StepperMotorDriverHandle->Register.MAX_SPEED = Step_s_2_MaxSpeed(MotorParameterData->maxspeed);
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	edd3 7a07 	vldr	s15, [r3, #28]
 8005854:	eeb0 0a67 	vmov.f32	s0, s15
 8005858:	f7ff f896 	bl	8004988 <Step_s_2_MaxSpeed>
 800585c:	4603      	mov	r3, r0
 800585e:	461a      	mov	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	841a      	strh	r2, [r3, #32]
  StepperMotorDriverHandle->Register.MIN_SPEED = Step_s_2_MinSpeed(MotorParameterData->minspeed);
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	edd3 7a08 	vldr	s15, [r3, #32]
 800586a:	eeb0 0a67 	vmov.f32	s0, s15
 800586e:	f7ff f8b1 	bl	80049d4 <Step_s_2_MinSpeed>
 8005872:	4603      	mov	r3, r0
 8005874:	461a      	mov	r2, r3
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	845a      	strh	r2, [r3, #34]	; 0x22
  StepperMotorDriverHandle->Register.FS_SPD = Step_s_2_FsSpd(MotorParameterData->fsspd);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8005880:	eeb0 0a67 	vmov.f32	s0, s15
 8005884:	f7ff f8cc 	bl	8004a20 <Step_s_2_FsSpd>
 8005888:	4603      	mov	r3, r0
 800588a:	461a      	mov	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	849a      	strh	r2, [r3, #36]	; 0x24
  StepperMotorDriverHandle->Register.KVAL_HOLD = (uint8_t)((float)((float)(MotorParameterData->kvalhold * 256) / (MotorParameterData->motorvoltage)));
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8005896:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8005b44 <L6470_Config+0x32c>
 800589a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	ed93 7a00 	vldr	s14, [r3]
 80058a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058ac:	edc7 7a01 	vstr	s15, [r7, #4]
 80058b0:	793b      	ldrb	r3, [r7, #4]
 80058b2:	b2da      	uxtb	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  StepperMotorDriverHandle->Register.KVAL_RUN = (uint8_t)((float)((float)(MotorParameterData->kvalrun * 256) / (MotorParameterData->motorvoltage)));
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80058c0:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8005b44 <L6470_Config+0x32c>
 80058c4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	ed93 7a00 	vldr	s14, [r3]
 80058ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80058d6:	edc7 7a01 	vstr	s15, [r7, #4]
 80058da:	793b      	ldrb	r3, [r7, #4]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  StepperMotorDriverHandle->Register.KVAL_ACC = (uint8_t)((float)((float)(MotorParameterData->kvalacc * 256) / (MotorParameterData->motorvoltage)));
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80058ea:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8005b44 <L6470_Config+0x32c>
 80058ee:	ee67 6a87 	vmul.f32	s13, s15, s14
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	ed93 7a00 	vldr	s14, [r3]
 80058f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80058fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005900:	edc7 7a01 	vstr	s15, [r7, #4]
 8005904:	793b      	ldrb	r3, [r7, #4]
 8005906:	b2da      	uxtb	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  StepperMotorDriverHandle->Register.KVAL_DEC = (uint8_t)((float)((float)(MotorParameterData->kvaldec * 256) / (MotorParameterData->motorvoltage)));
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8005914:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8005b44 <L6470_Config+0x32c>
 8005918:	ee67 6a87 	vmul.f32	s13, s15, s14
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	ed93 7a00 	vldr	s14, [r3]
 8005922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800592a:	edc7 7a01 	vstr	s15, [r7, #4]
 800592e:	793b      	ldrb	r3, [r7, #4]
 8005930:	b2da      	uxtb	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  StepperMotorDriverHandle->Register.INT_SPEED = Step_s_2_IntSpeed(MotorParameterData->intspeed);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800593e:	eeb0 0a67 	vmov.f32	s0, s15
 8005942:	f7ff f897 	bl	8004a74 <Step_s_2_IntSpeed>
 8005946:	4603      	mov	r3, r0
 8005948:	461a      	mov	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	855a      	strh	r2, [r3, #42]	; 0x2a
  StepperMotorDriverHandle->Register.ST_SLP = s_Step_2_StSlp(MotorParameterData->stslp);
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8005954:	eeb0 0a67 	vmov.f32	s0, s15
 8005958:	f7ff f8b2 	bl	8004ac0 <s_Step_2_StSlp>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  StepperMotorDriverHandle->Register.FN_SLP_ACC = s_Step_2_FnSlpAcc(MotorParameterData->fnslpacc);
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800596c:	eeb0 0a67 	vmov.f32	s0, s15
 8005970:	f7ff f8cc 	bl	8004b0c <s_Step_2_FnSlpAcc>
 8005974:	4603      	mov	r3, r0
 8005976:	461a      	mov	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  StepperMotorDriverHandle->Register.FN_SLP_DEC = s_Step_2_FnSlpDec(MotorParameterData->fnslpdec);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8005984:	eeb0 0a67 	vmov.f32	s0, s15
 8005988:	f7ff f8e6 	bl	8004b58 <s_Step_2_FnSlpDec>
 800598c:	4603      	mov	r3, r0
 800598e:	461a      	mov	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  StepperMotorDriverHandle->Register.K_THERM = MotorParameterData->kterm;
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  StepperMotorDriverHandle->Register.OCD_TH = mA_2_OcdTh(MotorParameterData->ocdth);
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80059a8:	eeb0 0a67 	vmov.f32	s0, s15
 80059ac:	f7ff f8fa 	bl	8004ba4 <mA_2_OcdTh>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461a      	mov	r2, r3
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  StepperMotorDriverHandle->Register.STALL_TH = mA_2_StallTh(MotorParameterData->stallth);
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80059c0:	eeb0 0a67 	vmov.f32	s0, s15
 80059c4:	f7ff f93e 	bl	8004c44 <mA_2_StallTh>
 80059c8:	4603      	mov	r3, r0
 80059ca:	461a      	mov	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  StepperMotorDriverHandle->Register.STEP_MODE = MotorParameterData->step_sel;
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
  StepperMotorDriverHandle->Register.ALARM_EN = MotorParameterData->alarmen;
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	f893 2055 	ldrb.w	r2, [r3, #85]	; 0x55
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  StepperMotorDriverHandle->Register.CONFIG = MotorParameterData->config;
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	86da      	strh	r2, [r3, #54]	; 0x36
  
  /* Write the L6470 registers with the prepared data */
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ACC_ID, StepperMotorDriverHandle->Register.ACC);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68fa      	ldr	r2, [r7, #12]
 80059fc:	7810      	ldrb	r0, [r2, #0]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	8b92      	ldrh	r2, [r2, #28]
 8005a02:	2104      	movs	r1, #4
 8005a04:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_DEC_ID, StepperMotorDriverHandle->Register.DEC);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	7810      	ldrb	r0, [r2, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	8bd2      	ldrh	r2, [r2, #30]
 8005a14:	2105      	movs	r1, #5
 8005a16:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MAX_SPEED_ID, StepperMotorDriverHandle->Register.MAX_SPEED);
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	7810      	ldrb	r0, [r2, #0]
 8005a22:	68fa      	ldr	r2, [r7, #12]
 8005a24:	8c12      	ldrh	r2, [r2, #32]
 8005a26:	2106      	movs	r1, #6
 8005a28:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_MIN_SPEED_ID, StepperMotorDriverHandle->Register.MIN_SPEED);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	7810      	ldrb	r0, [r2, #0]
 8005a34:	68fa      	ldr	r2, [r7, #12]
 8005a36:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8005a38:	2107      	movs	r1, #7
 8005a3a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FS_SPD_ID, StepperMotorDriverHandle->Register.FS_SPD);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68fa      	ldr	r2, [r7, #12]
 8005a44:	7810      	ldrb	r0, [r2, #0]
 8005a46:	68fa      	ldr	r2, [r7, #12]
 8005a48:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8005a4a:	2108      	movs	r1, #8
 8005a4c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_HOLD_ID, StepperMotorDriverHandle->Register.KVAL_HOLD);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	7810      	ldrb	r0, [r2, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
 8005a5e:	2109      	movs	r1, #9
 8005a60:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_RUN_ID, StepperMotorDriverHandle->Register.KVAL_RUN);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	68fa      	ldr	r2, [r7, #12]
 8005a6a:	7810      	ldrb	r0, [r2, #0]
 8005a6c:	68fa      	ldr	r2, [r7, #12]
 8005a6e:	f892 2027 	ldrb.w	r2, [r2, #39]	; 0x27
 8005a72:	210a      	movs	r1, #10
 8005a74:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_ACC_ID, StepperMotorDriverHandle->Register.KVAL_ACC);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	689b      	ldr	r3, [r3, #8]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68fa      	ldr	r2, [r7, #12]
 8005a7e:	7810      	ldrb	r0, [r2, #0]
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 8005a86:	210b      	movs	r1, #11
 8005a88:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_KVAL_DEC_ID, StepperMotorDriverHandle->Register.KVAL_DEC);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	68fa      	ldr	r2, [r7, #12]
 8005a92:	7810      	ldrb	r0, [r2, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	f892 2029 	ldrb.w	r2, [r2, #41]	; 0x29
 8005a9a:	210c      	movs	r1, #12
 8005a9c:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_INT_SPEED_ID, StepperMotorDriverHandle->Register.INT_SPEED);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	7810      	ldrb	r0, [r2, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8005aac:	210d      	movs	r1, #13
 8005aae:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ST_SLP_ID, StepperMotorDriverHandle->Register.ST_SLP);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68fa      	ldr	r2, [r7, #12]
 8005ab8:	7810      	ldrb	r0, [r2, #0]
 8005aba:	68fa      	ldr	r2, [r7, #12]
 8005abc:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8005ac0:	210e      	movs	r1, #14
 8005ac2:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_ACC_ID, StepperMotorDriverHandle->Register.FN_SLP_ACC);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	7810      	ldrb	r0, [r2, #0]
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8005ad4:	210f      	movs	r1, #15
 8005ad6:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_FN_SLP_DEC_ID, StepperMotorDriverHandle->Register.FN_SLP_DEC);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	7810      	ldrb	r0, [r2, #0]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	f892 202e 	ldrb.w	r2, [r2, #46]	; 0x2e
 8005ae8:	2110      	movs	r1, #16
 8005aea:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_K_THERM_ID, StepperMotorDriverHandle->Register.K_THERM);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	7810      	ldrb	r0, [r2, #0]
 8005af6:	68fa      	ldr	r2, [r7, #12]
 8005af8:	f892 202f 	ldrb.w	r2, [r2, #47]	; 0x2f
 8005afc:	2111      	movs	r1, #17
 8005afe:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_OCD_TH_ID, StepperMotorDriverHandle->Register.OCD_TH);
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	7810      	ldrb	r0, [r2, #0]
 8005b0a:	68fa      	ldr	r2, [r7, #12]
 8005b0c:	f892 2031 	ldrb.w	r2, [r2, #49]	; 0x31
 8005b10:	2113      	movs	r1, #19
 8005b12:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STALL_TH_ID, StepperMotorDriverHandle->Register.STALL_TH);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	689b      	ldr	r3, [r3, #8]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68fa      	ldr	r2, [r7, #12]
 8005b1c:	7810      	ldrb	r0, [r2, #0]
 8005b1e:	68fa      	ldr	r2, [r7, #12]
 8005b20:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005b24:	2114      	movs	r1, #20
 8005b26:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_STEP_MODE_ID, StepperMotorDriverHandle->Register.STEP_MODE);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	7810      	ldrb	r0, [r2, #0]
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	f892 2033 	ldrb.w	r2, [r2, #51]	; 0x33
 8005b38:	2115      	movs	r1, #21
 8005b3a:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_ALARM_EN_ID, StepperMotorDriverHandle->Register.ALARM_EN);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	e001      	b.n	8005b48 <L6470_Config+0x330>
 8005b44:	43800000 	.word	0x43800000
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	7810      	ldrb	r0, [r2, #0]
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005b52:	2116      	movs	r1, #22
 8005b54:	4798      	blx	r3
  StepperMotorDriverHandle->Command->SetParam(StepperMotorDriverHandle->DaisyChainPosition, L6470_CONFIG_ID, StepperMotorDriverHandle->Register.CONFIG);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68fa      	ldr	r2, [r7, #12]
 8005b5e:	7810      	ldrb	r0, [r2, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	8ed2      	ldrh	r2, [r2, #54]	; 0x36
 8005b64:	2117      	movs	r1, #23
 8005b66:	4798      	blx	r3
}
 8005b68:	bf00      	nop
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <Prepare_Move_Cammand>:


/*************************************************************************/

void Prepare_Move_Cammand(uint8_t axis_index)
    {
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b082      	sub	sp, #8
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	71fb      	strb	r3, [r7, #7]

    if (Motor_Direction[axis_index])
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	4a17      	ldr	r2, [pc, #92]	; (8005bdc <Prepare_Move_Cammand+0x6c>)
 8005b7e:	5cd3      	ldrb	r3, [r2, r3]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d01b      	beq.n	8005bbc <Prepare_Move_Cammand+0x4c>
	{

	if (Motor_Current_Steps[axis_index] + Motor_Parameter[axis_index]
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	4a16      	ldr	r2, [pc, #88]	; (8005be0 <Prepare_Move_Cammand+0x70>)
 8005b88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b8c:	79fb      	ldrb	r3, [r7, #7]
 8005b8e:	4915      	ldr	r1, [pc, #84]	; (8005be4 <Prepare_Move_Cammand+0x74>)
 8005b90:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005b94:	441a      	add	r2, r3
		> Motor_MAX_Steps[axis_index])
 8005b96:	79fb      	ldrb	r3, [r7, #7]
 8005b98:	4913      	ldr	r1, [pc, #76]	; (8005be8 <Prepare_Move_Cammand+0x78>)
 8005b9a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
	if (Motor_Current_Steps[axis_index] + Motor_Parameter[axis_index]
 8005b9e:	429a      	cmp	r2, r3
 8005ba0:	dd0c      	ble.n	8005bbc <Prepare_Move_Cammand+0x4c>
	    {
	    Motor_Parameter[axis_index] = Motor_MAX_Steps[axis_index] - Motor_Current_Steps[axis_index];
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	79fa      	ldrb	r2, [r7, #7]
 8005ba6:	4910      	ldr	r1, [pc, #64]	; (8005be8 <Prepare_Move_Cammand+0x78>)
 8005ba8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8005bac:	79fa      	ldrb	r2, [r7, #7]
 8005bae:	480c      	ldr	r0, [pc, #48]	; (8005be0 <Prepare_Move_Cammand+0x70>)
 8005bb0:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8005bb4:	1a8a      	subs	r2, r1, r2
 8005bb6:	490b      	ldr	r1, [pc, #44]	; (8005be4 <Prepare_Move_Cammand+0x74>)
 8005bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    }
	}

	L6470_PrepareMove(axis_index, Motor_Direction[axis_index],
 8005bbc:	79fb      	ldrb	r3, [r7, #7]
 8005bbe:	4a07      	ldr	r2, [pc, #28]	; (8005bdc <Prepare_Move_Cammand+0x6c>)
 8005bc0:	5cd1      	ldrb	r1, [r2, r3]
		Motor_Parameter[axis_index]);
 8005bc2:	79fb      	ldrb	r3, [r7, #7]
 8005bc4:	4a07      	ldr	r2, [pc, #28]	; (8005be4 <Prepare_Move_Cammand+0x74>)
 8005bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	L6470_PrepareMove(axis_index, Motor_Direction[axis_index],
 8005bca:	461a      	mov	r2, r3
 8005bcc:	79fb      	ldrb	r3, [r7, #7]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7ff fb9a 	bl	8005308 <L6470_PrepareMove>
    }
 8005bd4:	bf00      	nop
 8005bd6:	3708      	adds	r7, #8
 8005bd8:	46bd      	mov	sp, r7
 8005bda:	bd80      	pop	{r7, pc}
 8005bdc:	20000a98 	.word	0x20000a98
 8005be0:	20000aac 	.word	0x20000aac
 8005be4:	20000a9c 	.word	0x20000a9c
 8005be8:	20000124 	.word	0x20000124

08005bec <Prepare_Run_Cammand>:


void Prepare_Run_Cammand(uint8_t axis_index)
    {
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	71fb      	strb	r3, [r7, #7]

    uint16_t speed = 0;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	81fb      	strh	r3, [r7, #14]
	}
    if (Motor_Current_Steps[axis_index] < 0)
	{
	//Motor_Parameter[axis_index] = 0;
	}
    speed = Step_s_2_Speed(Motor_Parameter[axis_index]);
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	4a0c      	ldr	r2, [pc, #48]	; (8005c30 <Prepare_Run_Cammand+0x44>)
 8005bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c02:	ee07 3a90 	vmov	s15, r3
 8005c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c0a:	eeb0 0a67 	vmov.f32	s0, s15
 8005c0e:	f7fe fe4b 	bl	80048a8 <Step_s_2_Speed>
 8005c12:	4603      	mov	r3, r0
 8005c14:	81fb      	strh	r3, [r7, #14]
    L6470_PrepareRun(axis_index, Motor_Direction[axis_index], speed);
 8005c16:	79fb      	ldrb	r3, [r7, #7]
 8005c18:	4a06      	ldr	r2, [pc, #24]	; (8005c34 <Prepare_Run_Cammand+0x48>)
 8005c1a:	5cd1      	ldrb	r1, [r2, r3]
 8005c1c:	89fa      	ldrh	r2, [r7, #14]
 8005c1e:	79fb      	ldrb	r3, [r7, #7]
 8005c20:	4618      	mov	r0, r3
 8005c22:	f7ff fb3d 	bl	80052a0 <L6470_PrepareRun>
    }
 8005c26:	bf00      	nop
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000a9c 	.word	0x20000a9c
 8005c34:	20000a98 	.word	0x20000a98

08005c38 <Prepare_Speed_Cammand>:


void Prepare_Speed_Cammand(uint8_t axis_index)
    {
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	4603      	mov	r3, r0
 8005c40:	71fb      	strb	r3, [r7, #7]

    uint16_t speed = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	81fb      	strh	r3, [r7, #14]

    if (Motor_Parameter[axis_index] > 15000)
 8005c46:	79fb      	ldrb	r3, [r7, #7]
 8005c48:	4a12      	ldr	r2, [pc, #72]	; (8005c94 <Prepare_Speed_Cammand+0x5c>)
 8005c4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c4e:	f643 2298 	movw	r2, #15000	; 0x3a98
 8005c52:	4293      	cmp	r3, r2
 8005c54:	dd05      	ble.n	8005c62 <Prepare_Speed_Cammand+0x2a>
	{
	Motor_Parameter[axis_index] = 15000;
 8005c56:	79fb      	ldrb	r3, [r7, #7]
 8005c58:	4a0e      	ldr	r2, [pc, #56]	; (8005c94 <Prepare_Speed_Cammand+0x5c>)
 8005c5a:	f643 2198 	movw	r1, #15000	; 0x3a98
 8005c5e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	}

    speed = Step_s_2_Speed(Motor_Parameter[axis_index]);
 8005c62:	79fb      	ldrb	r3, [r7, #7]
 8005c64:	4a0b      	ldr	r2, [pc, #44]	; (8005c94 <Prepare_Speed_Cammand+0x5c>)
 8005c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c6a:	ee07 3a90 	vmov	s15, r3
 8005c6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c72:	eeb0 0a67 	vmov.f32	s0, s15
 8005c76:	f7fe fe17 	bl	80048a8 <Step_s_2_Speed>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	81fb      	strh	r3, [r7, #14]
    L6470_PrepareSetParam(axis_index, L6470_MAX_SPEED_ID, speed);
 8005c7e:	89fa      	ldrh	r2, [r7, #14]
 8005c80:	79fb      	ldrb	r3, [r7, #7]
 8005c82:	2106      	movs	r1, #6
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff fad7 	bl	8005238 <L6470_PrepareSetParam>
    }
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}
 8005c92:	bf00      	nop
 8005c94:	20000a9c 	.word	0x20000a9c

08005c98 <Print_Command_Ok>:


void Print_Command_Ok(char* cli_tx_out_buffer, char* cli_rx_command)
    {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b082      	sub	sp, #8
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
    strncat(cli_tx_out_buffer, "\r\nOk->", 50);
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f7fa fa9c 	bl	80001e0 <strlen>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	461a      	mov	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4413      	add	r3, r2
 8005cb0:	4a0f      	ldr	r2, [pc, #60]	; (8005cf0 <Print_Command_Ok+0x58>)
 8005cb2:	6810      	ldr	r0, [r2, #0]
 8005cb4:	6018      	str	r0, [r3, #0]
 8005cb6:	8891      	ldrh	r1, [r2, #4]
 8005cb8:	7992      	ldrb	r2, [r2, #6]
 8005cba:	8099      	strh	r1, [r3, #4]
 8005cbc:	719a      	strb	r2, [r3, #6]
    strncat(cli_tx_out_buffer, cli_rx_command, strlen(cli_rx_command));
 8005cbe:	6838      	ldr	r0, [r7, #0]
 8005cc0:	f7fa fa8e 	bl	80001e0 <strlen>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	6839      	ldr	r1, [r7, #0]
 8005cca:	6878      	ldr	r0, [r7, #4]
 8005ccc:	f002 f954 	bl	8007f78 <strncat>
    strncat(cli_tx_out_buffer, "\r\n", 3);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7fa fa85 	bl	80001e0 <strlen>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	461a      	mov	r2, r3
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4413      	add	r3, r2
 8005cde:	4a05      	ldr	r2, [pc, #20]	; (8005cf4 <Print_Command_Ok+0x5c>)
 8005ce0:	8811      	ldrh	r1, [r2, #0]
 8005ce2:	7892      	ldrb	r2, [r2, #2]
 8005ce4:	8019      	strh	r1, [r3, #0]
 8005ce6:	709a      	strb	r2, [r3, #2]
    }
 8005ce8:	bf00      	nop
 8005cea:	3708      	adds	r7, #8
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	0800b480 	.word	0x0800b480
 8005cf4:	0800b488 	.word	0x0800b488

08005cf8 <Print_Command_Err>:

void Print_Command_Err(char* cli_tx_out_buffer, char* cli_rx_command)
    {
 8005cf8:	b5b0      	push	{r4, r5, r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
    strncat(cli_tx_out_buffer, "\r\nInvalid Command->", 50);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fa fa6c 	bl	80001e0 <strlen>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4413      	add	r3, r2
 8005d10:	4a11      	ldr	r2, [pc, #68]	; (8005d58 <Print_Command_Err+0x60>)
 8005d12:	461d      	mov	r5, r3
 8005d14:	4614      	mov	r4, r2
 8005d16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005d18:	6028      	str	r0, [r5, #0]
 8005d1a:	6069      	str	r1, [r5, #4]
 8005d1c:	60aa      	str	r2, [r5, #8]
 8005d1e:	60eb      	str	r3, [r5, #12]
 8005d20:	6820      	ldr	r0, [r4, #0]
 8005d22:	6128      	str	r0, [r5, #16]
    strncat(cli_tx_out_buffer, cli_rx_command, strlen(cli_rx_command));
 8005d24:	6838      	ldr	r0, [r7, #0]
 8005d26:	f7fa fa5b 	bl	80001e0 <strlen>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f002 f921 	bl	8007f78 <strncat>
    strncat(cli_tx_out_buffer, "\r\n", 3);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f7fa fa52 	bl	80001e0 <strlen>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	461a      	mov	r2, r3
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	4413      	add	r3, r2
 8005d44:	4a05      	ldr	r2, [pc, #20]	; (8005d5c <Print_Command_Err+0x64>)
 8005d46:	8811      	ldrh	r1, [r2, #0]
 8005d48:	7892      	ldrb	r2, [r2, #2]
 8005d4a:	8019      	strh	r1, [r3, #0]
 8005d4c:	709a      	strb	r2, [r3, #2]
    }
 8005d4e:	bf00      	nop
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bdb0      	pop	{r4, r5, r7, pc}
 8005d56:	bf00      	nop
 8005d58:	0800b48c 	.word	0x0800b48c
 8005d5c:	0800b488 	.word	0x0800b488

08005d60 <Parse_Parameters>:


uint8_t Parse_Parameters(uint8_t index, char* param, uint16_t param_len)
    {
 8005d60:	b590      	push	{r4, r7, lr}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	6039      	str	r1, [r7, #0]
 8005d6a:	71fb      	strb	r3, [r7, #7]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	80bb      	strh	r3, [r7, #4]

    char str_to_int[11] = "0";
 8005d70:	2330      	movs	r3, #48	; 0x30
 8005d72:	60bb      	str	r3, [r7, #8]
 8005d74:	f107 030c 	add.w	r3, r7, #12
 8005d78:	2200      	movs	r2, #0
 8005d7a:	601a      	str	r2, [r3, #0]
 8005d7c:	f8c3 2003 	str.w	r2, [r3, #3]
    uint8_t i = 0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	75fb      	strb	r3, [r7, #23]
    uint8_t ok_flag = 1;
 8005d84:	2301      	movs	r3, #1
 8005d86:	75bb      	strb	r3, [r7, #22]

    if (param_len == 1)
 8005d88:	88bb      	ldrh	r3, [r7, #4]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <Parse_Parameters+0x32>
	{
	 return 0;
 8005d8e:	2300      	movs	r3, #0
 8005d90:	e041      	b.n	8005e16 <Parse_Parameters+0xb6>
	}

    if (*param == '-')
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	781b      	ldrb	r3, [r3, #0]
 8005d96:	2b2d      	cmp	r3, #45	; 0x2d
 8005d98:	d107      	bne.n	8005daa <Parse_Parameters+0x4a>
	{
	param++;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	603b      	str	r3, [r7, #0]
	Motor_Direction[index] = L6470_DIR_REV_ID; //reverse , toward home
 8005da0:	79fb      	ldrb	r3, [r7, #7]
 8005da2:	4a1f      	ldr	r2, [pc, #124]	; (8005e20 <Parse_Parameters+0xc0>)
 8005da4:	2100      	movs	r1, #0
 8005da6:	54d1      	strb	r1, [r2, r3]
 8005da8:	e01f      	b.n	8005dea <Parse_Parameters+0x8a>
	}
    else
	{
	Motor_Direction[index] = L6470_DIR_FWD_ID; //forward away from home
 8005daa:	79fb      	ldrb	r3, [r7, #7]
 8005dac:	4a1c      	ldr	r2, [pc, #112]	; (8005e20 <Parse_Parameters+0xc0>)
 8005dae:	2101      	movs	r1, #1
 8005db0:	54d1      	strb	r1, [r2, r3]
	}

    while (*param != '\0' && *param != ' ')
 8005db2:	e01a      	b.n	8005dea <Parse_Parameters+0x8a>
	{

	if (*param < '0' || *param > '9' || i >= 10)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	781b      	ldrb	r3, [r3, #0]
 8005db8:	2b2f      	cmp	r3, #47	; 0x2f
 8005dba:	d906      	bls.n	8005dca <Parse_Parameters+0x6a>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	2b39      	cmp	r3, #57	; 0x39
 8005dc2:	d802      	bhi.n	8005dca <Parse_Parameters+0x6a>
 8005dc4:	7dfb      	ldrb	r3, [r7, #23]
 8005dc6:	2b09      	cmp	r3, #9
 8005dc8:	d902      	bls.n	8005dd0 <Parse_Parameters+0x70>
	    {
	    ok_flag = 0; //not number
 8005dca:	2300      	movs	r3, #0
 8005dcc:	75bb      	strb	r3, [r7, #22]
	    break;
 8005dce:	e014      	b.n	8005dfa <Parse_Parameters+0x9a>
	    }
	str_to_int[i++] = *param++;
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	1c5a      	adds	r2, r3, #1
 8005dd4:	75fa      	strb	r2, [r7, #23]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	1c5a      	adds	r2, r3, #1
 8005ddc:	603a      	str	r2, [r7, #0]
 8005dde:	781a      	ldrb	r2, [r3, #0]
 8005de0:	f107 0318 	add.w	r3, r7, #24
 8005de4:	440b      	add	r3, r1
 8005de6:	f803 2c10 	strb.w	r2, [r3, #-16]
    while (*param != '\0' && *param != ' ')
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	781b      	ldrb	r3, [r3, #0]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d003      	beq.n	8005dfa <Parse_Parameters+0x9a>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b20      	cmp	r3, #32
 8005df8:	d1dc      	bne.n	8005db4 <Parse_Parameters+0x54>
	}

    if(ok_flag)
 8005dfa:	7dbb      	ldrb	r3, [r7, #22]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d009      	beq.n	8005e14 <Parse_Parameters+0xb4>
	{


	Motor_Parameter[index] = atoi(str_to_int);
 8005e00:	79fc      	ldrb	r4, [r7, #7]
 8005e02:	f107 0308 	add.w	r3, r7, #8
 8005e06:	4618      	mov	r0, r3
 8005e08:	f002 f85b 	bl	8007ec2 <atoi>
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	4b05      	ldr	r3, [pc, #20]	; (8005e24 <Parse_Parameters+0xc4>)
 8005e10:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
	}

    return ok_flag;
 8005e14:	7dbb      	ldrb	r3, [r7, #22]
    }
 8005e16:	4618      	mov	r0, r3
 8005e18:	371c      	adds	r7, #28
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd90      	pop	{r4, r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20000a98 	.word	0x20000a98
 8005e24:	20000a9c 	.word	0x20000a9c

08005e28 <Move_Callback>:



uint8_t Move_Callback(char* cli_rx_command, char* cli_tx_out_buffer,
	uint16_t cmd_len)
    {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b088      	sub	sp, #32
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	4613      	mov	r3, r2
 8005e34:	80fb      	strh	r3, [r7, #6]

    uint8_t  is_command_valid = 1;
 8005e36:	2301      	movs	r3, #1
 8005e38:	77fb      	strb	r3, [r7, #31]
    uint16_t param_len = 0;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	82fb      	strh	r3, [r7, #22]
    uint8_t  param_number = 1;//param number, starting from first
 8005e3e:	2301      	movs	r3, #1
 8005e40:	77bb      	strb	r3, [r7, #30]
    uint8_t  param_counts = 0;//received param count
 8005e42:	2300      	movs	r3, #0
 8005e44:	777b      	strb	r3, [r7, #29]
    char*    param_ptr = NULL;
 8005e46:	2300      	movs	r3, #0
 8005e48:	61bb      	str	r3, [r7, #24]

    if(Control_Mode)
 8005e4a:	4b7a      	ldr	r3, [pc, #488]	; (8006034 <Move_Callback+0x20c>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f000 80ea 	beq.w	8006028 <Move_Callback+0x200>
	{

    L6470_PrepareGetParam(X_AXIS_INDEX,L6470_ABS_POS_ID);
 8005e54:	2100      	movs	r1, #0
 8005e56:	2000      	movs	r0, #0
 8005e58:	f7ff fa08 	bl	800526c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(Y_AXIS_INDEX,L6470_ABS_POS_ID);
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	2001      	movs	r0, #1
 8005e60:	f7ff fa04 	bl	800526c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(Z_AXIS_INDEX,L6470_ABS_POS_ID);
 8005e64:	2100      	movs	r1, #0
 8005e66:	2002      	movs	r0, #2
 8005e68:	f7ff fa00 	bl	800526c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(M_AXIS_INDEX,L6470_ABS_POS_ID);
 8005e6c:	2100      	movs	r1, #0
 8005e6e:	2003      	movs	r0, #3
 8005e70:	f7ff f9fc 	bl	800526c <L6470_PrepareGetParam>
    L6470_PerformPreparedApplicationCommand();
 8005e74:	f7ff fb8e 	bl	8005594 <L6470_PerformPreparedApplicationCommand>

    Motor_Current_Steps[X_AXIS_INDEX] = L6470_ExtractReturnedData(X_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8005e78:	2203      	movs	r2, #3
 8005e7a:	496f      	ldr	r1, [pc, #444]	; (8006038 <Move_Callback+0x210>)
 8005e7c:	2000      	movs	r0, #0
 8005e7e:	f7ff fbe3 	bl	8005648 <L6470_ExtractReturnedData>
 8005e82:	4603      	mov	r3, r0
 8005e84:	461a      	mov	r2, r3
 8005e86:	4b6d      	ldr	r3, [pc, #436]	; (800603c <Move_Callback+0x214>)
 8005e88:	601a      	str	r2, [r3, #0]
    Motor_Current_Steps[Y_AXIS_INDEX] = L6470_ExtractReturnedData(Y_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8005e8a:	2203      	movs	r2, #3
 8005e8c:	496a      	ldr	r1, [pc, #424]	; (8006038 <Move_Callback+0x210>)
 8005e8e:	2001      	movs	r0, #1
 8005e90:	f7ff fbda 	bl	8005648 <L6470_ExtractReturnedData>
 8005e94:	4603      	mov	r3, r0
 8005e96:	461a      	mov	r2, r3
 8005e98:	4b68      	ldr	r3, [pc, #416]	; (800603c <Move_Callback+0x214>)
 8005e9a:	605a      	str	r2, [r3, #4]
    Motor_Current_Steps[Z_AXIS_INDEX] = L6470_ExtractReturnedData(Z_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8005e9c:	2203      	movs	r2, #3
 8005e9e:	4966      	ldr	r1, [pc, #408]	; (8006038 <Move_Callback+0x210>)
 8005ea0:	2002      	movs	r0, #2
 8005ea2:	f7ff fbd1 	bl	8005648 <L6470_ExtractReturnedData>
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	4b64      	ldr	r3, [pc, #400]	; (800603c <Move_Callback+0x214>)
 8005eac:	609a      	str	r2, [r3, #8]
    Motor_Current_Steps[M_AXIS_INDEX] = L6470_ExtractReturnedData(M_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 8005eae:	2203      	movs	r2, #3
 8005eb0:	4961      	ldr	r1, [pc, #388]	; (8006038 <Move_Callback+0x210>)
 8005eb2:	2003      	movs	r0, #3
 8005eb4:	f7ff fbc8 	bl	8005648 <L6470_ExtractReturnedData>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	461a      	mov	r2, r3
 8005ebc:	4b5f      	ldr	r3, [pc, #380]	; (800603c <Move_Callback+0x214>)
 8005ebe:	60da      	str	r2, [r3, #12]


    Motor_Current_Steps[X_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[X_AXIS_INDEX]);
 8005ec0:	4b5e      	ldr	r3, [pc, #376]	; (800603c <Move_Callback+0x214>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fe fcdb 	bl	8004880 <AbsPos_2_Position>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	4b5b      	ldr	r3, [pc, #364]	; (800603c <Move_Callback+0x214>)
 8005ece:	601a      	str	r2, [r3, #0]
    Motor_Current_Steps[Y_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Y_AXIS_INDEX]);
 8005ed0:	4b5a      	ldr	r3, [pc, #360]	; (800603c <Move_Callback+0x214>)
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f7fe fcd3 	bl	8004880 <AbsPos_2_Position>
 8005eda:	4602      	mov	r2, r0
 8005edc:	4b57      	ldr	r3, [pc, #348]	; (800603c <Move_Callback+0x214>)
 8005ede:	605a      	str	r2, [r3, #4]
    Motor_Current_Steps[Z_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Z_AXIS_INDEX]);
 8005ee0:	4b56      	ldr	r3, [pc, #344]	; (800603c <Move_Callback+0x214>)
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7fe fccb 	bl	8004880 <AbsPos_2_Position>
 8005eea:	4602      	mov	r2, r0
 8005eec:	4b53      	ldr	r3, [pc, #332]	; (800603c <Move_Callback+0x214>)
 8005eee:	609a      	str	r2, [r3, #8]
    Motor_Current_Steps[M_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[M_AXIS_INDEX]);
 8005ef0:	4b52      	ldr	r3, [pc, #328]	; (800603c <Move_Callback+0x214>)
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7fe fcc3 	bl	8004880 <AbsPos_2_Position>
 8005efa:	4602      	mov	r2, r0
 8005efc:	4b4f      	ldr	r3, [pc, #316]	; (800603c <Move_Callback+0x214>)
 8005efe:	60da      	str	r2, [r3, #12]

    do
	{

	param_ptr = CLI_UART_Get_Parameter(cli_rx_command,
		                           param_number++,
 8005f00:	7fbb      	ldrb	r3, [r7, #30]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	77ba      	strb	r2, [r7, #30]
	param_ptr = CLI_UART_Get_Parameter(cli_rx_command,
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f107 0216 	add.w	r2, r7, #22
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f000 fdde 	bl	8006ad0 <CLI_UART_Get_Parameter>
 8005f14:	61b8      	str	r0, [r7, #24]
		                           &param_len);

	if (param_ptr != NULL)
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d06e      	beq.n	8005ffa <Move_Callback+0x1d2>
	    {

	    param_counts++;
 8005f1c:	7f7b      	ldrb	r3, [r7, #29]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	777b      	strb	r3, [r7, #29]

	    switch (*param_ptr)
 8005f22:	69bb      	ldr	r3, [r7, #24]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	3b6d      	subs	r3, #109	; 0x6d
 8005f28:	2b0d      	cmp	r3, #13
 8005f2a:	d863      	bhi.n	8005ff4 <Move_Callback+0x1cc>
 8005f2c:	a201      	add	r2, pc, #4	; (adr r2, 8005f34 <Move_Callback+0x10c>)
 8005f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f32:	bf00      	nop
 8005f34:	08005fd3 	.word	0x08005fd3
 8005f38:	08005ff5 	.word	0x08005ff5
 8005f3c:	08005ff5 	.word	0x08005ff5
 8005f40:	08005ff5 	.word	0x08005ff5
 8005f44:	08005ff5 	.word	0x08005ff5
 8005f48:	08005ff5 	.word	0x08005ff5
 8005f4c:	08005ff5 	.word	0x08005ff5
 8005f50:	08005ff5 	.word	0x08005ff5
 8005f54:	08005ff5 	.word	0x08005ff5
 8005f58:	08005ff5 	.word	0x08005ff5
 8005f5c:	08005ff5 	.word	0x08005ff5
 8005f60:	08005f6d 	.word	0x08005f6d
 8005f64:	08005f8f 	.word	0x08005f8f
 8005f68:	08005fb1 	.word	0x08005fb1
		{
	    case 'x':
		if (Parse_Parameters(X_AXIS_INDEX, (param_ptr+1), param_len))
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	8afa      	ldrh	r2, [r7, #22]
 8005f72:	4619      	mov	r1, r3
 8005f74:	2000      	movs	r0, #0
 8005f76:	f7ff fef3 	bl	8005d60 <Parse_Parameters>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d003      	beq.n	8005f88 <Move_Callback+0x160>
		    {
		    Prepare_Move_Cammand(X_AXIS_INDEX);
 8005f80:	2000      	movs	r0, #0
 8005f82:	f7ff fdf5 	bl	8005b70 <Prepare_Move_Cammand>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 8005f86:	e038      	b.n	8005ffa <Move_Callback+0x1d2>
		    is_command_valid = 0;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	77fb      	strb	r3, [r7, #31]
		break;
 8005f8c:	e035      	b.n	8005ffa <Move_Callback+0x1d2>

	    case 'y':
		if (Parse_Parameters(Y_AXIS_INDEX, (param_ptr+1), param_len))
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	3301      	adds	r3, #1
 8005f92:	8afa      	ldrh	r2, [r7, #22]
 8005f94:	4619      	mov	r1, r3
 8005f96:	2001      	movs	r0, #1
 8005f98:	f7ff fee2 	bl	8005d60 <Parse_Parameters>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d003      	beq.n	8005faa <Move_Callback+0x182>
		    {
		    Prepare_Move_Cammand(Y_AXIS_INDEX);
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	f7ff fde4 	bl	8005b70 <Prepare_Move_Cammand>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 8005fa8:	e027      	b.n	8005ffa <Move_Callback+0x1d2>
		    is_command_valid = 0;
 8005faa:	2300      	movs	r3, #0
 8005fac:	77fb      	strb	r3, [r7, #31]
		break;
 8005fae:	e024      	b.n	8005ffa <Move_Callback+0x1d2>

	    case 'z':
		if (Parse_Parameters(Z_AXIS_INDEX, (param_ptr+1), param_len))
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	8afa      	ldrh	r2, [r7, #22]
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	2002      	movs	r0, #2
 8005fba:	f7ff fed1 	bl	8005d60 <Parse_Parameters>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d003      	beq.n	8005fcc <Move_Callback+0x1a4>
		    {
		    Prepare_Move_Cammand(Z_AXIS_INDEX);
 8005fc4:	2002      	movs	r0, #2
 8005fc6:	f7ff fdd3 	bl	8005b70 <Prepare_Move_Cammand>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 8005fca:	e016      	b.n	8005ffa <Move_Callback+0x1d2>
		    is_command_valid = 0;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	77fb      	strb	r3, [r7, #31]
		break;
 8005fd0:	e013      	b.n	8005ffa <Move_Callback+0x1d2>

	    case 'm':
		if (Parse_Parameters(M_AXIS_INDEX, (param_ptr+1), param_len))
 8005fd2:	69bb      	ldr	r3, [r7, #24]
 8005fd4:	3301      	adds	r3, #1
 8005fd6:	8afa      	ldrh	r2, [r7, #22]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	2003      	movs	r0, #3
 8005fdc:	f7ff fec0 	bl	8005d60 <Parse_Parameters>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d003      	beq.n	8005fee <Move_Callback+0x1c6>
		    {
		    Prepare_Move_Cammand(M_AXIS_INDEX);
 8005fe6:	2003      	movs	r0, #3
 8005fe8:	f7ff fdc2 	bl	8005b70 <Prepare_Move_Cammand>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 8005fec:	e005      	b.n	8005ffa <Move_Callback+0x1d2>
		    is_command_valid = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	77fb      	strb	r3, [r7, #31]
		break;
 8005ff2:	e002      	b.n	8005ffa <Move_Callback+0x1d2>
	    default:
		is_command_valid = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	77fb      	strb	r3, [r7, #31]
		break;
 8005ff8:	bf00      	nop

		}
	    }

	}
    while (param_ptr != NULL);
 8005ffa:	69bb      	ldr	r3, [r7, #24]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f47f af7f 	bne.w	8005f00 <Move_Callback+0xd8>

    if (!param_counts)// no param received
 8006002:	7f7b      	ldrb	r3, [r7, #29]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <Move_Callback+0x1e4>
	{
	is_command_valid = 0;
 8006008:	2300      	movs	r3, #0
 800600a:	77fb      	strb	r3, [r7, #31]
	}

    if (is_command_valid)
 800600c:	7ffb      	ldrb	r3, [r7, #31]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d006      	beq.n	8006020 <Move_Callback+0x1f8>
	{
	Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 8006012:	68f9      	ldr	r1, [r7, #12]
 8006014:	68b8      	ldr	r0, [r7, #8]
 8006016:	f7ff fe3f 	bl	8005c98 <Print_Command_Ok>
	L6470_PerformPreparedApplicationCommand();
 800601a:	f7ff fabb 	bl	8005594 <L6470_PerformPreparedApplicationCommand>
 800601e:	e003      	b.n	8006028 <Move_Callback+0x200>
	}
    else
	{
	Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 8006020:	68f9      	ldr	r1, [r7, #12]
 8006022:	68b8      	ldr	r0, [r7, #8]
 8006024:	f7ff fe68 	bl	8005cf8 <Print_Command_Err>
	}

	}

    return 0;// operation complete do not call again
 8006028:	2300      	movs	r3, #0

    }
 800602a:	4618      	mov	r0, r3
 800602c:	3720      	adds	r7, #32
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000a95 	.word	0x20000a95
 8006038:	20000b80 	.word	0x20000b80
 800603c:	20000aac 	.word	0x20000aac

08006040 <Speed_Callback>:



uint8_t Speed_Callback(char* cli_rx_command, char* cli_tx_out_buffer,
	uint16_t cmd_len)
    {
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	4613      	mov	r3, r2
 800604c:	80fb      	strh	r3, [r7, #6]

    uint8_t is_command_valid = 1;
 800604e:	2301      	movs	r3, #1
 8006050:	77fb      	strb	r3, [r7, #31]
    uint16_t param_len = 0;
 8006052:	2300      	movs	r3, #0
 8006054:	82fb      	strh	r3, [r7, #22]
    uint8_t param_number = 1;
 8006056:	2301      	movs	r3, #1
 8006058:	77bb      	strb	r3, [r7, #30]
    char* param_ptr = NULL;
 800605a:	2300      	movs	r3, #0
 800605c:	61bb      	str	r3, [r7, #24]

    if (Control_Mode)
 800605e:	4b4a      	ldr	r3, [pc, #296]	; (8006188 <Speed_Callback+0x148>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	f000 808a 	beq.w	800617c <Speed_Callback+0x13c>
	{

	do
	    {

	    param_ptr = CLI_UART_Get_Parameter(cli_rx_command, param_number++,
 8006068:	7fbb      	ldrb	r3, [r7, #30]
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	77ba      	strb	r2, [r7, #30]
 800606e:	b29b      	uxth	r3, r3
 8006070:	f107 0216 	add.w	r2, r7, #22
 8006074:	4619      	mov	r1, r3
 8006076:	68f8      	ldr	r0, [r7, #12]
 8006078:	f000 fd2a 	bl	8006ad0 <CLI_UART_Get_Parameter>
 800607c:	61b8      	str	r0, [r7, #24]
		    &param_len);

	    if (param_ptr != NULL)
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d06a      	beq.n	800615a <Speed_Callback+0x11a>
		{

		switch (*param_ptr)
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	3b6d      	subs	r3, #109	; 0x6d
 800608a:	2b0d      	cmp	r3, #13
 800608c:	d862      	bhi.n	8006154 <Speed_Callback+0x114>
 800608e:	a201      	add	r2, pc, #4	; (adr r2, 8006094 <Speed_Callback+0x54>)
 8006090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006094:	08006133 	.word	0x08006133
 8006098:	08006155 	.word	0x08006155
 800609c:	08006155 	.word	0x08006155
 80060a0:	08006155 	.word	0x08006155
 80060a4:	08006155 	.word	0x08006155
 80060a8:	08006155 	.word	0x08006155
 80060ac:	08006155 	.word	0x08006155
 80060b0:	08006155 	.word	0x08006155
 80060b4:	08006155 	.word	0x08006155
 80060b8:	08006155 	.word	0x08006155
 80060bc:	08006155 	.word	0x08006155
 80060c0:	080060cd 	.word	0x080060cd
 80060c4:	080060ef 	.word	0x080060ef
 80060c8:	08006111 	.word	0x08006111
		    {
		case 'x':
		    if (Parse_Parameters(X_AXIS_INDEX, (param_ptr + 1),
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	3301      	adds	r3, #1
 80060d0:	8afa      	ldrh	r2, [r7, #22]
 80060d2:	4619      	mov	r1, r3
 80060d4:	2000      	movs	r0, #0
 80060d6:	f7ff fe43 	bl	8005d60 <Parse_Parameters>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d003      	beq.n	80060e8 <Speed_Callback+0xa8>
			    param_len))
			{
			Prepare_Speed_Cammand(X_AXIS_INDEX);
 80060e0:	2000      	movs	r0, #0
 80060e2:	f7ff fda9 	bl	8005c38 <Prepare_Speed_Cammand>
			}
		    else
			{
			is_command_valid = 0;
			}
		    break;
 80060e6:	e038      	b.n	800615a <Speed_Callback+0x11a>
			is_command_valid = 0;
 80060e8:	2300      	movs	r3, #0
 80060ea:	77fb      	strb	r3, [r7, #31]
		    break;
 80060ec:	e035      	b.n	800615a <Speed_Callback+0x11a>

		case 'y':
		    if (Parse_Parameters(Y_AXIS_INDEX, (param_ptr + 1),
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	3301      	adds	r3, #1
 80060f2:	8afa      	ldrh	r2, [r7, #22]
 80060f4:	4619      	mov	r1, r3
 80060f6:	2001      	movs	r0, #1
 80060f8:	f7ff fe32 	bl	8005d60 <Parse_Parameters>
 80060fc:	4603      	mov	r3, r0
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d003      	beq.n	800610a <Speed_Callback+0xca>
			    param_len))
			{
			Prepare_Speed_Cammand(Y_AXIS_INDEX);
 8006102:	2001      	movs	r0, #1
 8006104:	f7ff fd98 	bl	8005c38 <Prepare_Speed_Cammand>
			}
		    else
			{
			is_command_valid = 0;
			}
		    break;
 8006108:	e027      	b.n	800615a <Speed_Callback+0x11a>
			is_command_valid = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	77fb      	strb	r3, [r7, #31]
		    break;
 800610e:	e024      	b.n	800615a <Speed_Callback+0x11a>

		case 'z':
		    if (Parse_Parameters(Z_AXIS_INDEX, (param_ptr + 1),
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	3301      	adds	r3, #1
 8006114:	8afa      	ldrh	r2, [r7, #22]
 8006116:	4619      	mov	r1, r3
 8006118:	2002      	movs	r0, #2
 800611a:	f7ff fe21 	bl	8005d60 <Parse_Parameters>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d003      	beq.n	800612c <Speed_Callback+0xec>
			    param_len))
			{
			Prepare_Speed_Cammand(Z_AXIS_INDEX);
 8006124:	2002      	movs	r0, #2
 8006126:	f7ff fd87 	bl	8005c38 <Prepare_Speed_Cammand>
			}
		    else
			{
			is_command_valid = 0;
			}
		    break;
 800612a:	e016      	b.n	800615a <Speed_Callback+0x11a>
			is_command_valid = 0;
 800612c:	2300      	movs	r3, #0
 800612e:	77fb      	strb	r3, [r7, #31]
		    break;
 8006130:	e013      	b.n	800615a <Speed_Callback+0x11a>

		case 'm':
		    if (Parse_Parameters(M_AXIS_INDEX, (param_ptr + 1),
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	3301      	adds	r3, #1
 8006136:	8afa      	ldrh	r2, [r7, #22]
 8006138:	4619      	mov	r1, r3
 800613a:	2003      	movs	r0, #3
 800613c:	f7ff fe10 	bl	8005d60 <Parse_Parameters>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <Speed_Callback+0x10e>
			    param_len))
			{
			Prepare_Speed_Cammand(M_AXIS_INDEX);
 8006146:	2003      	movs	r0, #3
 8006148:	f7ff fd76 	bl	8005c38 <Prepare_Speed_Cammand>
			}
		    else
			{
			is_command_valid = 0;
			}
		    break;
 800614c:	e005      	b.n	800615a <Speed_Callback+0x11a>
			is_command_valid = 0;
 800614e:	2300      	movs	r3, #0
 8006150:	77fb      	strb	r3, [r7, #31]
		    break;
 8006152:	e002      	b.n	800615a <Speed_Callback+0x11a>
		default:
		    is_command_valid = 0;
 8006154:	2300      	movs	r3, #0
 8006156:	77fb      	strb	r3, [r7, #31]
		    break;
 8006158:	bf00      	nop

		    }
		}

	    }
	while (param_ptr != NULL);
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d183      	bne.n	8006068 <Speed_Callback+0x28>

	if (is_command_valid)
 8006160:	7ffb      	ldrb	r3, [r7, #31]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d006      	beq.n	8006174 <Speed_Callback+0x134>
	    {
	    Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 8006166:	68f9      	ldr	r1, [r7, #12]
 8006168:	68b8      	ldr	r0, [r7, #8]
 800616a:	f7ff fd95 	bl	8005c98 <Print_Command_Ok>
	    L6470_PerformPreparedApplicationCommand();
 800616e:	f7ff fa11 	bl	8005594 <L6470_PerformPreparedApplicationCommand>
 8006172:	e003      	b.n	800617c <Speed_Callback+0x13c>
	    }
	else
	    {
	    Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 8006174:	68f9      	ldr	r1, [r7, #12]
 8006176:	68b8      	ldr	r0, [r7, #8]
 8006178:	f7ff fdbe 	bl	8005cf8 <Print_Command_Err>
	    }

	}

    return 0; // operation complete do not call again
 800617c:	2300      	movs	r3, #0
    }
 800617e:	4618      	mov	r0, r3
 8006180:	3720      	adds	r7, #32
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000a95 	.word	0x20000a95

0800618c <Run_Callback>:



uint8_t Run_Callback(char* cli_rx_command, char* cli_tx_out_buffer,
	uint16_t cmd_len)
    {
 800618c:	b580      	push	{r7, lr}
 800618e:	b088      	sub	sp, #32
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	4613      	mov	r3, r2
 8006198:	80fb      	strh	r3, [r7, #6]

    uint8_t is_command_valid = 1;
 800619a:	2301      	movs	r3, #1
 800619c:	77fb      	strb	r3, [r7, #31]
    uint16_t param_len = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	82fb      	strh	r3, [r7, #22]
    char* param_ptr = NULL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	61bb      	str	r3, [r7, #24]
    uint8_t param_number = 1;
 80061a6:	2301      	movs	r3, #1
 80061a8:	77bb      	strb	r3, [r7, #30]

    if(Control_Mode)
 80061aa:	4b75      	ldr	r3, [pc, #468]	; (8006380 <Run_Callback+0x1f4>)
 80061ac:	781b      	ldrb	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	f000 80e0 	beq.w	8006374 <Run_Callback+0x1e8>
	{

    L6470_PrepareGetParam(X_AXIS_INDEX,L6470_ABS_POS_ID);
 80061b4:	2100      	movs	r1, #0
 80061b6:	2000      	movs	r0, #0
 80061b8:	f7ff f858 	bl	800526c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(Y_AXIS_INDEX,L6470_ABS_POS_ID);
 80061bc:	2100      	movs	r1, #0
 80061be:	2001      	movs	r0, #1
 80061c0:	f7ff f854 	bl	800526c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(Z_AXIS_INDEX,L6470_ABS_POS_ID);
 80061c4:	2100      	movs	r1, #0
 80061c6:	2002      	movs	r0, #2
 80061c8:	f7ff f850 	bl	800526c <L6470_PrepareGetParam>
    L6470_PrepareGetParam(M_AXIS_INDEX,L6470_ABS_POS_ID);
 80061cc:	2100      	movs	r1, #0
 80061ce:	2003      	movs	r0, #3
 80061d0:	f7ff f84c 	bl	800526c <L6470_PrepareGetParam>
    L6470_PerformPreparedApplicationCommand();
 80061d4:	f7ff f9de 	bl	8005594 <L6470_PerformPreparedApplicationCommand>

    Motor_Current_Steps[X_AXIS_INDEX] = L6470_ExtractReturnedData(X_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 80061d8:	2203      	movs	r2, #3
 80061da:	496a      	ldr	r1, [pc, #424]	; (8006384 <Run_Callback+0x1f8>)
 80061dc:	2000      	movs	r0, #0
 80061de:	f7ff fa33 	bl	8005648 <L6470_ExtractReturnedData>
 80061e2:	4603      	mov	r3, r0
 80061e4:	461a      	mov	r2, r3
 80061e6:	4b68      	ldr	r3, [pc, #416]	; (8006388 <Run_Callback+0x1fc>)
 80061e8:	601a      	str	r2, [r3, #0]
    Motor_Current_Steps[Y_AXIS_INDEX] = L6470_ExtractReturnedData(Y_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 80061ea:	2203      	movs	r2, #3
 80061ec:	4965      	ldr	r1, [pc, #404]	; (8006384 <Run_Callback+0x1f8>)
 80061ee:	2001      	movs	r0, #1
 80061f0:	f7ff fa2a 	bl	8005648 <L6470_ExtractReturnedData>
 80061f4:	4603      	mov	r3, r0
 80061f6:	461a      	mov	r2, r3
 80061f8:	4b63      	ldr	r3, [pc, #396]	; (8006388 <Run_Callback+0x1fc>)
 80061fa:	605a      	str	r2, [r3, #4]
    Motor_Current_Steps[Z_AXIS_INDEX] = L6470_ExtractReturnedData(Z_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 80061fc:	2203      	movs	r2, #3
 80061fe:	4961      	ldr	r1, [pc, #388]	; (8006384 <Run_Callback+0x1f8>)
 8006200:	2002      	movs	r0, #2
 8006202:	f7ff fa21 	bl	8005648 <L6470_ExtractReturnedData>
 8006206:	4603      	mov	r3, r0
 8006208:	461a      	mov	r2, r3
 800620a:	4b5f      	ldr	r3, [pc, #380]	; (8006388 <Run_Callback+0x1fc>)
 800620c:	609a      	str	r2, [r3, #8]
    Motor_Current_Steps[M_AXIS_INDEX] = L6470_ExtractReturnedData(M_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 800620e:	2203      	movs	r2, #3
 8006210:	495c      	ldr	r1, [pc, #368]	; (8006384 <Run_Callback+0x1f8>)
 8006212:	2003      	movs	r0, #3
 8006214:	f7ff fa18 	bl	8005648 <L6470_ExtractReturnedData>
 8006218:	4603      	mov	r3, r0
 800621a:	461a      	mov	r2, r3
 800621c:	4b5a      	ldr	r3, [pc, #360]	; (8006388 <Run_Callback+0x1fc>)
 800621e:	60da      	str	r2, [r3, #12]

    Motor_Current_Steps[X_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[X_AXIS_INDEX]);
 8006220:	4b59      	ldr	r3, [pc, #356]	; (8006388 <Run_Callback+0x1fc>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4618      	mov	r0, r3
 8006226:	f7fe fb2b 	bl	8004880 <AbsPos_2_Position>
 800622a:	4602      	mov	r2, r0
 800622c:	4b56      	ldr	r3, [pc, #344]	; (8006388 <Run_Callback+0x1fc>)
 800622e:	601a      	str	r2, [r3, #0]
    Motor_Current_Steps[Y_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Y_AXIS_INDEX]);
 8006230:	4b55      	ldr	r3, [pc, #340]	; (8006388 <Run_Callback+0x1fc>)
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	4618      	mov	r0, r3
 8006236:	f7fe fb23 	bl	8004880 <AbsPos_2_Position>
 800623a:	4602      	mov	r2, r0
 800623c:	4b52      	ldr	r3, [pc, #328]	; (8006388 <Run_Callback+0x1fc>)
 800623e:	605a      	str	r2, [r3, #4]
    Motor_Current_Steps[Z_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Z_AXIS_INDEX]);
 8006240:	4b51      	ldr	r3, [pc, #324]	; (8006388 <Run_Callback+0x1fc>)
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	4618      	mov	r0, r3
 8006246:	f7fe fb1b 	bl	8004880 <AbsPos_2_Position>
 800624a:	4602      	mov	r2, r0
 800624c:	4b4e      	ldr	r3, [pc, #312]	; (8006388 <Run_Callback+0x1fc>)
 800624e:	609a      	str	r2, [r3, #8]
    Motor_Current_Steps[M_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[M_AXIS_INDEX]);
 8006250:	4b4d      	ldr	r3, [pc, #308]	; (8006388 <Run_Callback+0x1fc>)
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	4618      	mov	r0, r3
 8006256:	f7fe fb13 	bl	8004880 <AbsPos_2_Position>
 800625a:	4602      	mov	r2, r0
 800625c:	4b4a      	ldr	r3, [pc, #296]	; (8006388 <Run_Callback+0x1fc>)
 800625e:	60da      	str	r2, [r3, #12]

    do
	{

	param_ptr = CLI_UART_Get_Parameter(cli_rx_command,
		                           param_number++,
 8006260:	7fbb      	ldrb	r3, [r7, #30]
 8006262:	1c5a      	adds	r2, r3, #1
 8006264:	77ba      	strb	r2, [r7, #30]
	param_ptr = CLI_UART_Get_Parameter(cli_rx_command,
 8006266:	b29b      	uxth	r3, r3
 8006268:	f107 0216 	add.w	r2, r7, #22
 800626c:	4619      	mov	r1, r3
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f000 fc2e 	bl	8006ad0 <CLI_UART_Get_Parameter>
 8006274:	61b8      	str	r0, [r7, #24]
		                           &param_len);

	if (param_ptr != NULL)
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d06a      	beq.n	8006352 <Run_Callback+0x1c6>
	    {

	    switch (*param_ptr)
 800627c:	69bb      	ldr	r3, [r7, #24]
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	3b6d      	subs	r3, #109	; 0x6d
 8006282:	2b0d      	cmp	r3, #13
 8006284:	d862      	bhi.n	800634c <Run_Callback+0x1c0>
 8006286:	a201      	add	r2, pc, #4	; (adr r2, 800628c <Run_Callback+0x100>)
 8006288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800628c:	0800632b 	.word	0x0800632b
 8006290:	0800634d 	.word	0x0800634d
 8006294:	0800634d 	.word	0x0800634d
 8006298:	0800634d 	.word	0x0800634d
 800629c:	0800634d 	.word	0x0800634d
 80062a0:	0800634d 	.word	0x0800634d
 80062a4:	0800634d 	.word	0x0800634d
 80062a8:	0800634d 	.word	0x0800634d
 80062ac:	0800634d 	.word	0x0800634d
 80062b0:	0800634d 	.word	0x0800634d
 80062b4:	0800634d 	.word	0x0800634d
 80062b8:	080062c5 	.word	0x080062c5
 80062bc:	080062e7 	.word	0x080062e7
 80062c0:	08006309 	.word	0x08006309
		{
	    case 'x':
		if (Parse_Parameters(X_AXIS_INDEX, (param_ptr+1), param_len))
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	3301      	adds	r3, #1
 80062c8:	8afa      	ldrh	r2, [r7, #22]
 80062ca:	4619      	mov	r1, r3
 80062cc:	2000      	movs	r0, #0
 80062ce:	f7ff fd47 	bl	8005d60 <Parse_Parameters>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d003      	beq.n	80062e0 <Run_Callback+0x154>
		    {
		    Prepare_Run_Cammand(X_AXIS_INDEX);
 80062d8:	2000      	movs	r0, #0
 80062da:	f7ff fc87 	bl	8005bec <Prepare_Run_Cammand>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 80062de:	e038      	b.n	8006352 <Run_Callback+0x1c6>
		    is_command_valid = 0;
 80062e0:	2300      	movs	r3, #0
 80062e2:	77fb      	strb	r3, [r7, #31]
		break;
 80062e4:	e035      	b.n	8006352 <Run_Callback+0x1c6>

	    case 'y':
		if (Parse_Parameters(Y_AXIS_INDEX, (param_ptr+1), param_len))
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	3301      	adds	r3, #1
 80062ea:	8afa      	ldrh	r2, [r7, #22]
 80062ec:	4619      	mov	r1, r3
 80062ee:	2001      	movs	r0, #1
 80062f0:	f7ff fd36 	bl	8005d60 <Parse_Parameters>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <Run_Callback+0x176>
		    {
		    Prepare_Run_Cammand(Y_AXIS_INDEX);
 80062fa:	2001      	movs	r0, #1
 80062fc:	f7ff fc76 	bl	8005bec <Prepare_Run_Cammand>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 8006300:	e027      	b.n	8006352 <Run_Callback+0x1c6>
		    is_command_valid = 0;
 8006302:	2300      	movs	r3, #0
 8006304:	77fb      	strb	r3, [r7, #31]
		break;
 8006306:	e024      	b.n	8006352 <Run_Callback+0x1c6>

	    case 'z':
		if (Parse_Parameters(Z_AXIS_INDEX, (param_ptr+1), param_len))
 8006308:	69bb      	ldr	r3, [r7, #24]
 800630a:	3301      	adds	r3, #1
 800630c:	8afa      	ldrh	r2, [r7, #22]
 800630e:	4619      	mov	r1, r3
 8006310:	2002      	movs	r0, #2
 8006312:	f7ff fd25 	bl	8005d60 <Parse_Parameters>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <Run_Callback+0x198>
		    {
		    Prepare_Run_Cammand(Z_AXIS_INDEX);
 800631c:	2002      	movs	r0, #2
 800631e:	f7ff fc65 	bl	8005bec <Prepare_Run_Cammand>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 8006322:	e016      	b.n	8006352 <Run_Callback+0x1c6>
		    is_command_valid = 0;
 8006324:	2300      	movs	r3, #0
 8006326:	77fb      	strb	r3, [r7, #31]
		break;
 8006328:	e013      	b.n	8006352 <Run_Callback+0x1c6>

	    case 'm':
		if (Parse_Parameters(M_AXIS_INDEX, (param_ptr+1), param_len))
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	3301      	adds	r3, #1
 800632e:	8afa      	ldrh	r2, [r7, #22]
 8006330:	4619      	mov	r1, r3
 8006332:	2003      	movs	r0, #3
 8006334:	f7ff fd14 	bl	8005d60 <Parse_Parameters>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d003      	beq.n	8006346 <Run_Callback+0x1ba>
		    {
		    Prepare_Run_Cammand(M_AXIS_INDEX);
 800633e:	2003      	movs	r0, #3
 8006340:	f7ff fc54 	bl	8005bec <Prepare_Run_Cammand>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 8006344:	e005      	b.n	8006352 <Run_Callback+0x1c6>
		    is_command_valid = 0;
 8006346:	2300      	movs	r3, #0
 8006348:	77fb      	strb	r3, [r7, #31]
		break;
 800634a:	e002      	b.n	8006352 <Run_Callback+0x1c6>
	    default:
		is_command_valid = 0;
 800634c:	2300      	movs	r3, #0
 800634e:	77fb      	strb	r3, [r7, #31]
		break;
 8006350:	bf00      	nop

		}
	    }

	}
    while (param_ptr != NULL);
 8006352:	69bb      	ldr	r3, [r7, #24]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d183      	bne.n	8006260 <Run_Callback+0xd4>

    if (is_command_valid)
 8006358:	7ffb      	ldrb	r3, [r7, #31]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d006      	beq.n	800636c <Run_Callback+0x1e0>
	{
	Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	68b8      	ldr	r0, [r7, #8]
 8006362:	f7ff fc99 	bl	8005c98 <Print_Command_Ok>
	L6470_PerformPreparedApplicationCommand();
 8006366:	f7ff f915 	bl	8005594 <L6470_PerformPreparedApplicationCommand>
 800636a:	e003      	b.n	8006374 <Run_Callback+0x1e8>
	}
    else
	{
	Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 800636c:	68f9      	ldr	r1, [r7, #12]
 800636e:	68b8      	ldr	r0, [r7, #8]
 8006370:	f7ff fcc2 	bl	8005cf8 <Print_Command_Err>
	}
	}

    return 0;// operation complete do not call again
 8006374:	2300      	movs	r3, #0

    }
 8006376:	4618      	mov	r0, r3
 8006378:	3720      	adds	r7, #32
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000a95 	.word	0x20000a95
 8006384:	20000b80 	.word	0x20000b80
 8006388:	20000aac 	.word	0x20000aac

0800638c <Home_Callback>:



uint8_t Home_Callback(char* cli_rx_command, char* cli_tx_out_buffer, uint16_t cmd_len)

    {
 800638c:	b580      	push	{r7, lr}
 800638e:	b088      	sub	sp, #32
 8006390:	af00      	add	r7, sp, #0
 8006392:	60f8      	str	r0, [r7, #12]
 8006394:	60b9      	str	r1, [r7, #8]
 8006396:	4613      	mov	r3, r2
 8006398:	80fb      	strh	r3, [r7, #6]
    uint8_t is_command_valid = 1;
 800639a:	2301      	movs	r3, #1
 800639c:	77fb      	strb	r3, [r7, #31]
    uint16_t param_len = 0;
 800639e:	2300      	movs	r3, #0
 80063a0:	82bb      	strh	r3, [r7, #20]
    uint8_t param_number = 1;
 80063a2:	2301      	movs	r3, #1
 80063a4:	77bb      	strb	r3, [r7, #30]

    char* param_ptr = NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	61bb      	str	r3, [r7, #24]

    uint16_t speed = Step_s_2_Speed(6000);
 80063aa:	ed9f 0a43 	vldr	s0, [pc, #268]	; 80064b8 <Home_Callback+0x12c>
 80063ae:	f7fe fa7b 	bl	80048a8 <Step_s_2_Speed>
 80063b2:	4603      	mov	r3, r0
 80063b4:	82fb      	strh	r3, [r7, #22]

    do
	{

	param_ptr = CLI_UART_Get_Parameter(cli_rx_command,
		                           param_number++,
 80063b6:	7fbb      	ldrb	r3, [r7, #30]
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	77ba      	strb	r2, [r7, #30]
	param_ptr = CLI_UART_Get_Parameter(cli_rx_command,
 80063bc:	b29b      	uxth	r3, r3
 80063be:	f107 0214 	add.w	r2, r7, #20
 80063c2:	4619      	mov	r1, r3
 80063c4:	68f8      	ldr	r0, [r7, #12]
 80063c6:	f000 fb83 	bl	8006ad0 <CLI_UART_Get_Parameter>
 80063ca:	61b8      	str	r0, [r7, #24]
		                           &param_len);

	if (param_ptr != NULL)
 80063cc:	69bb      	ldr	r3, [r7, #24]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d05b      	beq.n	800648a <Home_Callback+0xfe>
	    {

	    switch (*param_ptr)
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	3b6d      	subs	r3, #109	; 0x6d
 80063d8:	2b0d      	cmp	r3, #13
 80063da:	d853      	bhi.n	8006484 <Home_Callback+0xf8>
 80063dc:	a201      	add	r2, pc, #4	; (adr r2, 80063e4 <Home_Callback+0x58>)
 80063de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063e2:	bf00      	nop
 80063e4:	0800646b 	.word	0x0800646b
 80063e8:	08006485 	.word	0x08006485
 80063ec:	08006485 	.word	0x08006485
 80063f0:	08006485 	.word	0x08006485
 80063f4:	08006485 	.word	0x08006485
 80063f8:	08006485 	.word	0x08006485
 80063fc:	08006485 	.word	0x08006485
 8006400:	08006485 	.word	0x08006485
 8006404:	08006485 	.word	0x08006485
 8006408:	08006485 	.word	0x08006485
 800640c:	08006485 	.word	0x08006485
 8006410:	0800641d 	.word	0x0800641d
 8006414:	08006437 	.word	0x08006437
 8006418:	08006451 	.word	0x08006451
		{
	    case 'x':
		if(param_len == 1)
 800641c:	8abb      	ldrh	r3, [r7, #20]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d106      	bne.n	8006430 <Home_Callback+0xa4>
		    {
		    L6470_PrepareGoUntil(X_AXIS_INDEX,
 8006422:	8afb      	ldrh	r3, [r7, #22]
 8006424:	2200      	movs	r2, #0
 8006426:	2100      	movs	r1, #0
 8006428:	2000      	movs	r0, #0
 800642a:	f7fe ffb7 	bl	800539c <L6470_PrepareGoUntil>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 800642e:	e02c      	b.n	800648a <Home_Callback+0xfe>
		    is_command_valid = 0;
 8006430:	2300      	movs	r3, #0
 8006432:	77fb      	strb	r3, [r7, #31]
		break;
 8006434:	e029      	b.n	800648a <Home_Callback+0xfe>

	    case 'y':
		if(param_len == 1)
 8006436:	8abb      	ldrh	r3, [r7, #20]
 8006438:	2b01      	cmp	r3, #1
 800643a:	d106      	bne.n	800644a <Home_Callback+0xbe>
		    {
		    L6470_PrepareGoUntil(Y_AXIS_INDEX,
 800643c:	8afb      	ldrh	r3, [r7, #22]
 800643e:	2200      	movs	r2, #0
 8006440:	2100      	movs	r1, #0
 8006442:	2001      	movs	r0, #1
 8006444:	f7fe ffaa 	bl	800539c <L6470_PrepareGoUntil>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 8006448:	e01f      	b.n	800648a <Home_Callback+0xfe>
		    is_command_valid = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	77fb      	strb	r3, [r7, #31]
		break;
 800644e:	e01c      	b.n	800648a <Home_Callback+0xfe>

	    case 'z':
		if(param_len == 1)
 8006450:	8abb      	ldrh	r3, [r7, #20]
 8006452:	2b01      	cmp	r3, #1
 8006454:	d106      	bne.n	8006464 <Home_Callback+0xd8>
		    {
		    L6470_PrepareGoUntil(Z_AXIS_INDEX,
 8006456:	8afb      	ldrh	r3, [r7, #22]
 8006458:	2200      	movs	r2, #0
 800645a:	2100      	movs	r1, #0
 800645c:	2002      	movs	r0, #2
 800645e:	f7fe ff9d 	bl	800539c <L6470_PrepareGoUntil>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 8006462:	e012      	b.n	800648a <Home_Callback+0xfe>
		    is_command_valid = 0;
 8006464:	2300      	movs	r3, #0
 8006466:	77fb      	strb	r3, [r7, #31]
		break;
 8006468:	e00f      	b.n	800648a <Home_Callback+0xfe>

	    case 'm':
		if(param_len == 1)
 800646a:	8abb      	ldrh	r3, [r7, #20]
 800646c:	2b01      	cmp	r3, #1
 800646e:	d106      	bne.n	800647e <Home_Callback+0xf2>
		    {
		    L6470_PrepareGoUntil(M_AXIS_INDEX,
 8006470:	8afb      	ldrh	r3, [r7, #22]
 8006472:	2200      	movs	r2, #0
 8006474:	2100      	movs	r1, #0
 8006476:	2003      	movs	r0, #3
 8006478:	f7fe ff90 	bl	800539c <L6470_PrepareGoUntil>
		    }
		else
		    {
		    is_command_valid = 0;
		    }
		break;
 800647c:	e005      	b.n	800648a <Home_Callback+0xfe>
		    is_command_valid = 0;
 800647e:	2300      	movs	r3, #0
 8006480:	77fb      	strb	r3, [r7, #31]
		break;
 8006482:	e002      	b.n	800648a <Home_Callback+0xfe>

	    default:
		    is_command_valid = 0;
 8006484:	2300      	movs	r3, #0
 8006486:	77fb      	strb	r3, [r7, #31]
		break;
 8006488:	bf00      	nop

		}
	    }

	}
    while (param_ptr != NULL);
 800648a:	69bb      	ldr	r3, [r7, #24]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d192      	bne.n	80063b6 <Home_Callback+0x2a>

    if (is_command_valid)
 8006490:	7ffb      	ldrb	r3, [r7, #31]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d006      	beq.n	80064a4 <Home_Callback+0x118>
	{
	Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 8006496:	68f9      	ldr	r1, [r7, #12]
 8006498:	68b8      	ldr	r0, [r7, #8]
 800649a:	f7ff fbfd 	bl	8005c98 <Print_Command_Ok>
	L6470_PerformPreparedApplicationCommand();
 800649e:	f7ff f879 	bl	8005594 <L6470_PerformPreparedApplicationCommand>
 80064a2:	e003      	b.n	80064ac <Home_Callback+0x120>
	}
    else
	{
	Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 80064a4:	68f9      	ldr	r1, [r7, #12]
 80064a6:	68b8      	ldr	r0, [r7, #8]
 80064a8:	f7ff fc26 	bl	8005cf8 <Print_Command_Err>
	}

    return 0;// operation complete do not call again
 80064ac:	2300      	movs	r3, #0

    }
 80064ae:	4618      	mov	r0, r3
 80064b0:	3720      	adds	r7, #32
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}
 80064b6:	bf00      	nop
 80064b8:	45bb8000 	.word	0x45bb8000

080064bc <Auto_Callback>:



uint8_t Auto_Callback(char* cli_rx_command, char* cli_tx_out_buffer,
	uint16_t cmd_len)
    {
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80fb      	strh	r3, [r7, #6]

    uint16_t param_len = 0;
 80064ca:	2300      	movs	r3, #0
 80064cc:	82fb      	strh	r3, [r7, #22]

    CLI_UART_Get_Parameter(cli_rx_command,1,&param_len);
 80064ce:	f107 0316 	add.w	r3, r7, #22
 80064d2:	461a      	mov	r2, r3
 80064d4:	2101      	movs	r1, #1
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 fafa 	bl	8006ad0 <CLI_UART_Get_Parameter>

    if(param_len == 0)
 80064dc:	8afb      	ldrh	r3, [r7, #22]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d107      	bne.n	80064f2 <Auto_Callback+0x36>
	{
	Control_Mode = 1;
 80064e2:	4b08      	ldr	r3, [pc, #32]	; (8006504 <Auto_Callback+0x48>)
 80064e4:	2201      	movs	r2, #1
 80064e6:	701a      	strb	r2, [r3, #0]
	Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 80064e8:	68f9      	ldr	r1, [r7, #12]
 80064ea:	68b8      	ldr	r0, [r7, #8]
 80064ec:	f7ff fbd4 	bl	8005c98 <Print_Command_Ok>
 80064f0:	e003      	b.n	80064fa <Auto_Callback+0x3e>
	}
    else
	{
	Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 80064f2:	68f9      	ldr	r1, [r7, #12]
 80064f4:	68b8      	ldr	r0, [r7, #8]
 80064f6:	f7ff fbff 	bl	8005cf8 <Print_Command_Err>
	}

    return 0; // operation complete do not call again
 80064fa:	2300      	movs	r3, #0

    }
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	20000a95 	.word	0x20000a95

08006508 <Manual_Callback>:



uint8_t Manual_Callback(char* cli_rx_command, char* cli_tx_out_buffer,
	uint16_t cmd_len)
    {
 8006508:	b580      	push	{r7, lr}
 800650a:	b086      	sub	sp, #24
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	4613      	mov	r3, r2
 8006514:	80fb      	strh	r3, [r7, #6]

    uint16_t param_len = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	82fb      	strh	r3, [r7, #22]

    CLI_UART_Get_Parameter(cli_rx_command,1,&param_len);
 800651a:	f107 0316 	add.w	r3, r7, #22
 800651e:	461a      	mov	r2, r3
 8006520:	2101      	movs	r1, #1
 8006522:	68f8      	ldr	r0, [r7, #12]
 8006524:	f000 fad4 	bl	8006ad0 <CLI_UART_Get_Parameter>

    if(param_len == 0)
 8006528:	8afb      	ldrh	r3, [r7, #22]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d107      	bne.n	800653e <Manual_Callback+0x36>
	{
	Control_Mode = 0;
 800652e:	4b08      	ldr	r3, [pc, #32]	; (8006550 <Manual_Callback+0x48>)
 8006530:	2200      	movs	r2, #0
 8006532:	701a      	strb	r2, [r3, #0]
	Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 8006534:	68f9      	ldr	r1, [r7, #12]
 8006536:	68b8      	ldr	r0, [r7, #8]
 8006538:	f7ff fbae 	bl	8005c98 <Print_Command_Ok>
 800653c:	e003      	b.n	8006546 <Manual_Callback+0x3e>
	}
    else
	{
	Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 800653e:	68f9      	ldr	r1, [r7, #12]
 8006540:	68b8      	ldr	r0, [r7, #8]
 8006542:	f7ff fbd9 	bl	8005cf8 <Print_Command_Err>
	}

    return 0; // operation complete do not call again
 8006546:	2300      	movs	r3, #0

    }
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000a95 	.word	0x20000a95

08006554 <Getpos_Callback>:



uint8_t Getpos_Callback(char* cli_rx_command, char* cli_tx_out_buffer,
	uint16_t cmd_len)
    {
 8006554:	b590      	push	{r4, r7, lr}
 8006556:	b089      	sub	sp, #36	; 0x24
 8006558:	af02      	add	r7, sp, #8
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	4613      	mov	r3, r2
 8006560:	80fb      	strh	r3, [r7, #6]

    uint16_t param_len = 0;
 8006562:	2300      	movs	r3, #0
 8006564:	82fb      	strh	r3, [r7, #22]

    CLI_UART_Get_Parameter(cli_rx_command,1,&param_len);
 8006566:	f107 0316 	add.w	r3, r7, #22
 800656a:	461a      	mov	r2, r3
 800656c:	2101      	movs	r1, #1
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	f000 faae 	bl	8006ad0 <CLI_UART_Get_Parameter>

    if(param_len == 0)
 8006574:	8afb      	ldrh	r3, [r7, #22]
 8006576:	2b00      	cmp	r3, #0
 8006578:	d16f      	bne.n	800665a <Getpos_Callback+0x106>
	{
	    L6470_PrepareGetParam(X_AXIS_INDEX,L6470_ABS_POS_ID);
 800657a:	2100      	movs	r1, #0
 800657c:	2000      	movs	r0, #0
 800657e:	f7fe fe75 	bl	800526c <L6470_PrepareGetParam>
	    L6470_PrepareGetParam(Y_AXIS_INDEX,L6470_ABS_POS_ID);
 8006582:	2100      	movs	r1, #0
 8006584:	2001      	movs	r0, #1
 8006586:	f7fe fe71 	bl	800526c <L6470_PrepareGetParam>
	    L6470_PrepareGetParam(Z_AXIS_INDEX,L6470_ABS_POS_ID);
 800658a:	2100      	movs	r1, #0
 800658c:	2002      	movs	r0, #2
 800658e:	f7fe fe6d 	bl	800526c <L6470_PrepareGetParam>
	    L6470_PrepareGetParam(M_AXIS_INDEX,L6470_ABS_POS_ID);
 8006592:	2100      	movs	r1, #0
 8006594:	2003      	movs	r0, #3
 8006596:	f7fe fe69 	bl	800526c <L6470_PrepareGetParam>
	    L6470_PerformPreparedApplicationCommand();
 800659a:	f7fe fffb 	bl	8005594 <L6470_PerformPreparedApplicationCommand>

	    Motor_Current_Steps[X_AXIS_INDEX] = L6470_ExtractReturnedData(X_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 800659e:	2203      	movs	r2, #3
 80065a0:	4932      	ldr	r1, [pc, #200]	; (800666c <Getpos_Callback+0x118>)
 80065a2:	2000      	movs	r0, #0
 80065a4:	f7ff f850 	bl	8005648 <L6470_ExtractReturnedData>
 80065a8:	4603      	mov	r3, r0
 80065aa:	461a      	mov	r2, r3
 80065ac:	4b30      	ldr	r3, [pc, #192]	; (8006670 <Getpos_Callback+0x11c>)
 80065ae:	601a      	str	r2, [r3, #0]
	    Motor_Current_Steps[Y_AXIS_INDEX] = L6470_ExtractReturnedData(Y_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 80065b0:	2203      	movs	r2, #3
 80065b2:	492e      	ldr	r1, [pc, #184]	; (800666c <Getpos_Callback+0x118>)
 80065b4:	2001      	movs	r0, #1
 80065b6:	f7ff f847 	bl	8005648 <L6470_ExtractReturnedData>
 80065ba:	4603      	mov	r3, r0
 80065bc:	461a      	mov	r2, r3
 80065be:	4b2c      	ldr	r3, [pc, #176]	; (8006670 <Getpos_Callback+0x11c>)
 80065c0:	605a      	str	r2, [r3, #4]
	    Motor_Current_Steps[Z_AXIS_INDEX] = L6470_ExtractReturnedData(Z_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 80065c2:	2203      	movs	r2, #3
 80065c4:	4929      	ldr	r1, [pc, #164]	; (800666c <Getpos_Callback+0x118>)
 80065c6:	2002      	movs	r0, #2
 80065c8:	f7ff f83e 	bl	8005648 <L6470_ExtractReturnedData>
 80065cc:	4603      	mov	r3, r0
 80065ce:	461a      	mov	r2, r3
 80065d0:	4b27      	ldr	r3, [pc, #156]	; (8006670 <Getpos_Callback+0x11c>)
 80065d2:	609a      	str	r2, [r3, #8]
	    Motor_Current_Steps[M_AXIS_INDEX] = L6470_ExtractReturnedData(M_AXIS_INDEX, (uint8_t*)L6470_DaisyChainSpiRxStruct, 3);
 80065d4:	2203      	movs	r2, #3
 80065d6:	4925      	ldr	r1, [pc, #148]	; (800666c <Getpos_Callback+0x118>)
 80065d8:	2003      	movs	r0, #3
 80065da:	f7ff f835 	bl	8005648 <L6470_ExtractReturnedData>
 80065de:	4603      	mov	r3, r0
 80065e0:	461a      	mov	r2, r3
 80065e2:	4b23      	ldr	r3, [pc, #140]	; (8006670 <Getpos_Callback+0x11c>)
 80065e4:	60da      	str	r2, [r3, #12]

	    Motor_Current_Steps[X_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[X_AXIS_INDEX]);
 80065e6:	4b22      	ldr	r3, [pc, #136]	; (8006670 <Getpos_Callback+0x11c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe f948 	bl	8004880 <AbsPos_2_Position>
 80065f0:	4602      	mov	r2, r0
 80065f2:	4b1f      	ldr	r3, [pc, #124]	; (8006670 <Getpos_Callback+0x11c>)
 80065f4:	601a      	str	r2, [r3, #0]
	    Motor_Current_Steps[Y_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Y_AXIS_INDEX]);
 80065f6:	4b1e      	ldr	r3, [pc, #120]	; (8006670 <Getpos_Callback+0x11c>)
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe f940 	bl	8004880 <AbsPos_2_Position>
 8006600:	4602      	mov	r2, r0
 8006602:	4b1b      	ldr	r3, [pc, #108]	; (8006670 <Getpos_Callback+0x11c>)
 8006604:	605a      	str	r2, [r3, #4]
	    Motor_Current_Steps[Z_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[Z_AXIS_INDEX]);
 8006606:	4b1a      	ldr	r3, [pc, #104]	; (8006670 <Getpos_Callback+0x11c>)
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	4618      	mov	r0, r3
 800660c:	f7fe f938 	bl	8004880 <AbsPos_2_Position>
 8006610:	4602      	mov	r2, r0
 8006612:	4b17      	ldr	r3, [pc, #92]	; (8006670 <Getpos_Callback+0x11c>)
 8006614:	609a      	str	r2, [r3, #8]
	    Motor_Current_Steps[M_AXIS_INDEX] = AbsPos_2_Position(Motor_Current_Steps[M_AXIS_INDEX]);
 8006616:	4b16      	ldr	r3, [pc, #88]	; (8006670 <Getpos_Callback+0x11c>)
 8006618:	68db      	ldr	r3, [r3, #12]
 800661a:	4618      	mov	r0, r3
 800661c:	f7fe f930 	bl	8004880 <AbsPos_2_Position>
 8006620:	4602      	mov	r2, r0
 8006622:	4b13      	ldr	r3, [pc, #76]	; (8006670 <Getpos_Callback+0x11c>)
 8006624:	60da      	str	r2, [r3, #12]

	    Print_Command_Ok(cli_tx_out_buffer, cli_rx_command);
 8006626:	68f9      	ldr	r1, [r7, #12]
 8006628:	68b8      	ldr	r0, [r7, #8]
 800662a:	f7ff fb35 	bl	8005c98 <Print_Command_Ok>

	    sprintf(cli_tx_out_buffer + strlen(cli_tx_out_buffer),"x%i y%i z%i m%i\r\n",(int)Motor_Current_Steps[X_AXIS_INDEX],(int)Motor_Current_Steps[Y_AXIS_INDEX],
 800662e:	68b8      	ldr	r0, [r7, #8]
 8006630:	f7f9 fdd6 	bl	80001e0 <strlen>
 8006634:	4602      	mov	r2, r0
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	1898      	adds	r0, r3, r2
 800663a:	4b0d      	ldr	r3, [pc, #52]	; (8006670 <Getpos_Callback+0x11c>)
 800663c:	6819      	ldr	r1, [r3, #0]
 800663e:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <Getpos_Callback+0x11c>)
 8006640:	685c      	ldr	r4, [r3, #4]
		    (int)Motor_Current_Steps[Z_AXIS_INDEX],(int)Motor_Current_Steps[M_AXIS_INDEX]);
 8006642:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <Getpos_Callback+0x11c>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	4a0a      	ldr	r2, [pc, #40]	; (8006670 <Getpos_Callback+0x11c>)
 8006648:	68d2      	ldr	r2, [r2, #12]
	    sprintf(cli_tx_out_buffer + strlen(cli_tx_out_buffer),"x%i y%i z%i m%i\r\n",(int)Motor_Current_Steps[X_AXIS_INDEX],(int)Motor_Current_Steps[Y_AXIS_INDEX],
 800664a:	9201      	str	r2, [sp, #4]
 800664c:	9300      	str	r3, [sp, #0]
 800664e:	4623      	mov	r3, r4
 8006650:	460a      	mov	r2, r1
 8006652:	4908      	ldr	r1, [pc, #32]	; (8006674 <Getpos_Callback+0x120>)
 8006654:	f001 fc6c 	bl	8007f30 <sprintf>
 8006658:	e003      	b.n	8006662 <Getpos_Callback+0x10e>

	}
    else
	{
	    Print_Command_Err(cli_tx_out_buffer, cli_rx_command);
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	68b8      	ldr	r0, [r7, #8]
 800665e:	f7ff fb4b 	bl	8005cf8 <Print_Command_Err>
	}

    return 0; // operation complete do not call again
 8006662:	2300      	movs	r3, #0

    }
 8006664:	4618      	mov	r0, r3
 8006666:	371c      	adds	r7, #28
 8006668:	46bd      	mov	sp, r7
 800666a:	bd90      	pop	{r4, r7, pc}
 800666c:	20000b80 	.word	0x20000b80
 8006670:	20000aac 	.word	0x20000aac
 8006674:	0800b5b4 	.word	0x0800b5b4

08006678 <CLI_Add_All_Commands>:
/*************************************************************************/



void CLI_Add_All_Commands()
    {
 8006678:	b580      	push	{r7, lr}
 800667a:	af00      	add	r7, sp, #0

    CLI_Add_Cammand(&Move_Defination);
 800667c:	480b      	ldr	r0, [pc, #44]	; (80066ac <CLI_Add_All_Commands+0x34>)
 800667e:	f000 f92d 	bl	80068dc <CLI_Add_Cammand>
    CLI_Add_Cammand(&Speed_Defination);
 8006682:	480b      	ldr	r0, [pc, #44]	; (80066b0 <CLI_Add_All_Commands+0x38>)
 8006684:	f000 f92a 	bl	80068dc <CLI_Add_Cammand>
    CLI_Add_Cammand(&Run_Defination);
 8006688:	480a      	ldr	r0, [pc, #40]	; (80066b4 <CLI_Add_All_Commands+0x3c>)
 800668a:	f000 f927 	bl	80068dc <CLI_Add_Cammand>
    CLI_Add_Cammand(&Home_Defination);
 800668e:	480a      	ldr	r0, [pc, #40]	; (80066b8 <CLI_Add_All_Commands+0x40>)
 8006690:	f000 f924 	bl	80068dc <CLI_Add_Cammand>
    CLI_Add_Cammand(&Auto_Defination);
 8006694:	4809      	ldr	r0, [pc, #36]	; (80066bc <CLI_Add_All_Commands+0x44>)
 8006696:	f000 f921 	bl	80068dc <CLI_Add_Cammand>
    CLI_Add_Cammand(&Manual_Defination);
 800669a:	4809      	ldr	r0, [pc, #36]	; (80066c0 <CLI_Add_All_Commands+0x48>)
 800669c:	f000 f91e 	bl	80068dc <CLI_Add_Cammand>
    CLI_Add_Cammand(&Getpos_Defination);
 80066a0:	4808      	ldr	r0, [pc, #32]	; (80066c4 <CLI_Add_All_Commands+0x4c>)
 80066a2:	f000 f91b 	bl	80068dc <CLI_Add_Cammand>


    }
 80066a6:	bf00      	nop
 80066a8:	bd80      	pop	{r7, pc}
 80066aa:	bf00      	nop
 80066ac:	200000a0 	.word	0x200000a0
 80066b0:	200000b0 	.word	0x200000b0
 80066b4:	200000c0 	.word	0x200000c0
 80066b8:	200000d0 	.word	0x200000d0
 80066bc:	200000e0 	.word	0x200000e0
 80066c0:	200000f0 	.word	0x200000f0
 80066c4:	20000100 	.word	0x20000100

080066c8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
    {
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	80fb      	strh	r3, [r7, #6]

    if (GPIO_Pin == L6470_Flag_INT_Pin)
 80066d2:	88fb      	ldrh	r3, [r7, #6]
 80066d4:	2b02      	cmp	r3, #2
 80066d6:	d178      	bne.n	80067ca <HAL_GPIO_EXTI_Callback+0x102>
	{

	uint16_t status_register_x = L6470_GetStatus(X_AXIS_INDEX);
 80066d8:	2000      	movs	r0, #0
 80066da:	f7fe fd83 	bl	80051e4 <L6470_GetStatus>
 80066de:	4603      	mov	r3, r0
 80066e0:	81fb      	strh	r3, [r7, #14]
	uint16_t status_register_y = L6470_GetStatus(Y_AXIS_INDEX);
 80066e2:	2001      	movs	r0, #1
 80066e4:	f7fe fd7e 	bl	80051e4 <L6470_GetStatus>
 80066e8:	4603      	mov	r3, r0
 80066ea:	81bb      	strh	r3, [r7, #12]
	uint16_t status_register_z = L6470_GetStatus(Z_AXIS_INDEX);
 80066ec:	2002      	movs	r0, #2
 80066ee:	f7fe fd79 	bl	80051e4 <L6470_GetStatus>
 80066f2:	4603      	mov	r3, r0
 80066f4:	817b      	strh	r3, [r7, #10]
	uint16_t status_register_m = L6470_GetStatus(M_AXIS_INDEX);
 80066f6:	2003      	movs	r0, #3
 80066f8:	f7fe fd74 	bl	80051e4 <L6470_GetStatus>
 80066fc:	4603      	mov	r3, r0
 80066fe:	813b      	strh	r3, [r7, #8]

	if ((status_register_x & STATUS_STEP_LOSS_A) == 0
 8006700:	89fb      	ldrh	r3, [r7, #14]
 8006702:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006706:	2b00      	cmp	r3, #0
 8006708:	d004      	beq.n	8006714 <HAL_GPIO_EXTI_Callback+0x4c>
		|| (status_register_x & STATUS_STEP_LOSS_B) == 0)
 800670a:	89fb      	ldrh	r3, [r7, #14]
 800670c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006710:	2b00      	cmp	r3, #0
 8006712:	d102      	bne.n	800671a <HAL_GPIO_EXTI_Callback+0x52>
	    {
	    L6470_HardStop(X_AXIS_INDEX);
 8006714:	2000      	movs	r0, #0
 8006716:	f7fe fcff 	bl	8005118 <L6470_HardStop>
	    }
	if ((status_register_y & STATUS_STEP_LOSS_A) == 0
 800671a:	89bb      	ldrh	r3, [r7, #12]
 800671c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006720:	2b00      	cmp	r3, #0
 8006722:	d004      	beq.n	800672e <HAL_GPIO_EXTI_Callback+0x66>
		|| (status_register_y & STATUS_STEP_LOSS_B) == 0)
 8006724:	89bb      	ldrh	r3, [r7, #12]
 8006726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800672a:	2b00      	cmp	r3, #0
 800672c:	d102      	bne.n	8006734 <HAL_GPIO_EXTI_Callback+0x6c>
	    {
	    L6470_HardStop(Y_AXIS_INDEX);
 800672e:	2001      	movs	r0, #1
 8006730:	f7fe fcf2 	bl	8005118 <L6470_HardStop>
	    }
	if ((status_register_z & STATUS_STEP_LOSS_A) == 0
 8006734:	897b      	ldrh	r3, [r7, #10]
 8006736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800673a:	2b00      	cmp	r3, #0
 800673c:	d004      	beq.n	8006748 <HAL_GPIO_EXTI_Callback+0x80>
		|| (status_register_z & STATUS_STEP_LOSS_B) == 0)
 800673e:	897b      	ldrh	r3, [r7, #10]
 8006740:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006744:	2b00      	cmp	r3, #0
 8006746:	d102      	bne.n	800674e <HAL_GPIO_EXTI_Callback+0x86>
	    {
	    L6470_HardStop(Z_AXIS_INDEX);
 8006748:	2002      	movs	r0, #2
 800674a:	f7fe fce5 	bl	8005118 <L6470_HardStop>
	    }
	if ((status_register_m & STATUS_STEP_LOSS_A) == 0
 800674e:	893b      	ldrh	r3, [r7, #8]
 8006750:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d004      	beq.n	8006762 <HAL_GPIO_EXTI_Callback+0x9a>
		|| (status_register_m & STATUS_STEP_LOSS_B) == 0)
 8006758:	893b      	ldrh	r3, [r7, #8]
 800675a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d102      	bne.n	8006768 <HAL_GPIO_EXTI_Callback+0xa0>
	    {
	    L6470_HardStop(M_AXIS_INDEX);
 8006762:	2003      	movs	r0, #3
 8006764:	f7fe fcd8 	bl	8005118 <L6470_HardStop>
	    }

	if (status_register_x & STATUS_SW_EVN)
 8006768:	89fb      	ldrh	r3, [r7, #14]
 800676a:	f003 0308 	and.w	r3, r3, #8
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <HAL_GPIO_EXTI_Callback+0xba>
	    {
	    L6470_HardStop(X_AXIS_INDEX);
 8006772:	2000      	movs	r0, #0
 8006774:	f7fe fcd0 	bl	8005118 <L6470_HardStop>
	    L6470_ReleaseSW(X_AXIS_INDEX, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 8006778:	2201      	movs	r2, #1
 800677a:	2100      	movs	r1, #0
 800677c:	2000      	movs	r0, #0
 800677e:	f7fe fbfb 	bl	8004f78 <L6470_ReleaseSW>
	    }
	if (status_register_y & STATUS_SW_EVN)
 8006782:	89bb      	ldrh	r3, [r7, #12]
 8006784:	f003 0308 	and.w	r3, r3, #8
 8006788:	2b00      	cmp	r3, #0
 800678a:	d007      	beq.n	800679c <HAL_GPIO_EXTI_Callback+0xd4>
	    {
	    L6470_HardStop(Y_AXIS_INDEX);
 800678c:	2001      	movs	r0, #1
 800678e:	f7fe fcc3 	bl	8005118 <L6470_HardStop>
	    L6470_ReleaseSW(Y_AXIS_INDEX, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 8006792:	2201      	movs	r2, #1
 8006794:	2100      	movs	r1, #0
 8006796:	2001      	movs	r0, #1
 8006798:	f7fe fbee 	bl	8004f78 <L6470_ReleaseSW>
	    }
	if (status_register_z & STATUS_SW_EVN)
 800679c:	897b      	ldrh	r3, [r7, #10]
 800679e:	f003 0308 	and.w	r3, r3, #8
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d007      	beq.n	80067b6 <HAL_GPIO_EXTI_Callback+0xee>
	    {
	    L6470_HardStop(Z_AXIS_INDEX);
 80067a6:	2002      	movs	r0, #2
 80067a8:	f7fe fcb6 	bl	8005118 <L6470_HardStop>
	    L6470_ReleaseSW(Z_AXIS_INDEX, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 80067ac:	2201      	movs	r2, #1
 80067ae:	2100      	movs	r1, #0
 80067b0:	2002      	movs	r0, #2
 80067b2:	f7fe fbe1 	bl	8004f78 <L6470_ReleaseSW>
	    }
	if (status_register_m & STATUS_SW_EVN)
 80067b6:	893b      	ldrh	r3, [r7, #8]
 80067b8:	f003 0308 	and.w	r3, r3, #8
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d004      	beq.n	80067ca <HAL_GPIO_EXTI_Callback+0x102>
	    {
	    L6470_ReleaseSW(M_AXIS_INDEX, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 80067c0:	2201      	movs	r2, #1
 80067c2:	2100      	movs	r1, #0
 80067c4:	2003      	movs	r0, #3
 80067c6:	f7fe fbd7 	bl	8004f78 <L6470_ReleaseSW>
	    }
	}
    }
 80067ca:	bf00      	nop
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
	...

080067d4 <CLI_UART_Send_Char>:

static uint16_t Command_Count = 0;
CLI_Command_t* Cammand_List[MAX_COMMANDS];

void CLI_UART_Send_Char(char data)
    {
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	71fb      	strb	r3, [r7, #7]
    CLI_UART->Instance->DR = (data);
 80067de:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <CLI_UART_Send_Char+0x34>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	79fa      	ldrb	r2, [r7, #7]
 80067e6:	605a      	str	r2, [r3, #4]
    while (__HAL_UART_GET_FLAG(CLI_UART,UART_FLAG_TC) == 0);
 80067e8:	bf00      	nop
 80067ea:	4b07      	ldr	r3, [pc, #28]	; (8006808 <CLI_UART_Send_Char+0x34>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f6:	2b40      	cmp	r3, #64	; 0x40
 80067f8:	d1f7      	bne.n	80067ea <CLI_UART_Send_Char+0x16>
    }
 80067fa:	bf00      	nop
 80067fc:	370c      	adds	r7, #12
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	20000110 	.word	0x20000110

0800680c <CLI_UART_Send_String>:


void CLI_UART_Send_String(char* data)
    {
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
    uint16_t count = 0;
 8006814:	2300      	movs	r3, #0
 8006816:	81fb      	strh	r3, [r7, #14]
    while (*data)
 8006818:	e00d      	b.n	8006836 <CLI_UART_Send_String+0x2a>
	{
	CLI_UART_Send_Char(*data++);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	1c5a      	adds	r2, r3, #1
 800681e:	607a      	str	r2, [r7, #4]
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	4618      	mov	r0, r3
 8006824:	f7ff ffd6 	bl	80067d4 <CLI_UART_Send_Char>
	count++;
 8006828:	89fb      	ldrh	r3, [r7, #14]
 800682a:	3301      	adds	r3, #1
 800682c:	81fb      	strh	r3, [r7, #14]
	if(count == OUTPUT_BUFFER_SIZE)
 800682e:	89fb      	ldrh	r3, [r7, #14]
 8006830:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006834:	d004      	beq.n	8006840 <CLI_UART_Send_String+0x34>
    while (*data)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1ed      	bne.n	800681a <CLI_UART_Send_String+0xe>
	    {
	    break;
	    }
	}
    }
 800683e:	e000      	b.n	8006842 <CLI_UART_Send_String+0x36>
	    break;
 8006840:	bf00      	nop
    }
 8006842:	bf00      	nop
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <Help_Callback>:


uint8_t Help_Callback(char* cli_rx_command, char* cli_tx_out_buffer, uint16_t cmd_len)
    {
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	60f8      	str	r0, [r7, #12]
 8006854:	60b9      	str	r1, [r7, #8]
 8006856:	4613      	mov	r3, r2
 8006858:	80fb      	strh	r3, [r7, #6]

    static uint16_t count = 0;

    CLI_Command_t* command_list_ptr = Cammand_List[count];
 800685a:	4b12      	ldr	r3, [pc, #72]	; (80068a4 <Help_Callback+0x58>)
 800685c:	881b      	ldrh	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	4b11      	ldr	r3, [pc, #68]	; (80068a8 <Help_Callback+0x5c>)
 8006862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006866:	617b      	str	r3, [r7, #20]

    strncpy(cli_tx_out_buffer,
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	6859      	ldr	r1, [r3, #4]
	    command_list_ptr->CLI_Command_Description,
	    command_list_ptr->CLI_Description_Length);// add null char at end
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	895b      	ldrh	r3, [r3, #10]
    strncpy(cli_tx_out_buffer,
 8006870:	461a      	mov	r2, r3
 8006872:	68b8      	ldr	r0, [r7, #8]
 8006874:	f001 fba6 	bl	8007fc4 <strncpy>

    count++;
 8006878:	4b0a      	ldr	r3, [pc, #40]	; (80068a4 <Help_Callback+0x58>)
 800687a:	881b      	ldrh	r3, [r3, #0]
 800687c:	3301      	adds	r3, #1
 800687e:	b29a      	uxth	r2, r3
 8006880:	4b08      	ldr	r3, [pc, #32]	; (80068a4 <Help_Callback+0x58>)
 8006882:	801a      	strh	r2, [r3, #0]
    if (count < Command_Count)
 8006884:	4b07      	ldr	r3, [pc, #28]	; (80068a4 <Help_Callback+0x58>)
 8006886:	881a      	ldrh	r2, [r3, #0]
 8006888:	4b08      	ldr	r3, [pc, #32]	; (80068ac <Help_Callback+0x60>)
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	429a      	cmp	r2, r3
 800688e:	d201      	bcs.n	8006894 <Help_Callback+0x48>
	{
	return 1; //call again to generate next output
 8006890:	2301      	movs	r3, #1
 8006892:	e003      	b.n	800689c <Help_Callback+0x50>
	}

    count = 0;
 8006894:	4b03      	ldr	r3, [pc, #12]	; (80068a4 <Help_Callback+0x58>)
 8006896:	2200      	movs	r2, #0
 8006898:	801a      	strh	r2, [r3, #0]

    return 0; // operation complete do not call again
 800689a:	2300      	movs	r3, #0

    }
 800689c:	4618      	mov	r0, r3
 800689e:	3718      	adds	r7, #24
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}
 80068a4:	20000a8a 	.word	0x20000a8a
 80068a8:	20000be4 	.word	0x20000be4
 80068ac:	20000a88 	.word	0x20000a88

080068b0 <CLI_UART_Init>:
	                          // require only if generated output in callback is larger than output buffer
    };                            // to split generated output


void CLI_UART_Init()
    {
 80068b0:	b580      	push	{r7, lr}
 80068b2:	af00      	add	r7, sp, #0

    CLI_Add_Cammand(&Help_Defination); // add help command
 80068b4:	4806      	ldr	r0, [pc, #24]	; (80068d0 <CLI_UART_Init+0x20>)
 80068b6:	f000 f811 	bl	80068dc <CLI_Add_Cammand>
    Ring_Buffer_Init(CLI_UART);
 80068ba:	4b06      	ldr	r3, [pc, #24]	; (80068d4 <CLI_UART_Init+0x24>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fe84 	bl	80075cc <Ring_Buffer_Init>
    CLI_UART_Send_String("\n->");
 80068c4:	4804      	ldr	r0, [pc, #16]	; (80068d8 <CLI_UART_Init+0x28>)
 80068c6:	f7ff ffa1 	bl	800680c <CLI_UART_Send_String>

    }
 80068ca:	bf00      	nop
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop
 80068d0:	20000114 	.word	0x20000114
 80068d4:	20000110 	.word	0x20000110
 80068d8:	0800b68c 	.word	0x0800b68c

080068dc <CLI_Add_Cammand>:


uint8_t CLI_Add_Cammand(CLI_Command_t* command_def)
    {
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]

    if (Command_Count < MAX_COMMANDS)
 80068e4:	4b14      	ldr	r3, [pc, #80]	; (8006938 <CLI_Add_Cammand+0x5c>)
 80068e6:	881b      	ldrh	r3, [r3, #0]
 80068e8:	2b31      	cmp	r3, #49	; 0x31
 80068ea:	d820      	bhi.n	800692e <CLI_Add_Cammand+0x52>
	{
	command_def->CLI_Command_Length = strlen(command_def->CLI_Command);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7f9 fc75 	bl	80001e0 <strlen>
 80068f6:	4603      	mov	r3, r0
 80068f8:	b29a      	uxth	r2, r3
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	811a      	strh	r2, [r3, #8]
	command_def->CLI_Description_Length = strlen(command_def->CLI_Command_Description);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	685b      	ldr	r3, [r3, #4]
 8006902:	4618      	mov	r0, r3
 8006904:	f7f9 fc6c 	bl	80001e0 <strlen>
 8006908:	4603      	mov	r3, r0
 800690a:	b29a      	uxth	r2, r3
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	815a      	strh	r2, [r3, #10]
	Cammand_List[Command_Count] = command_def;
 8006910:	4b09      	ldr	r3, [pc, #36]	; (8006938 <CLI_Add_Cammand+0x5c>)
 8006912:	881b      	ldrh	r3, [r3, #0]
 8006914:	4619      	mov	r1, r3
 8006916:	4a09      	ldr	r2, [pc, #36]	; (800693c <CLI_Add_Cammand+0x60>)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	Command_Count++;
 800691e:	4b06      	ldr	r3, [pc, #24]	; (8006938 <CLI_Add_Cammand+0x5c>)
 8006920:	881b      	ldrh	r3, [r3, #0]
 8006922:	3301      	adds	r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	4b04      	ldr	r3, [pc, #16]	; (8006938 <CLI_Add_Cammand+0x5c>)
 8006928:	801a      	strh	r2, [r3, #0]
	return 1; // command added successful
 800692a:	2301      	movs	r3, #1
 800692c:	e000      	b.n	8006930 <CLI_Add_Cammand+0x54>
	}

    return 0;
 800692e:	2300      	movs	r3, #0

    }
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}
 8006938:	20000a88 	.word	0x20000a88
 800693c:	20000be4 	.word	0x20000be4

08006940 <CLI_UART_Loop>:


void CLI_UART_Loop()
    {
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0

    static uint8_t rx_char_count;
    uint8_t rx_char;
    uint8_t is_command_valid = 0;
 8006946:	2300      	movs	r3, #0
 8006948:	73fb      	strb	r3, [r7, #15]

    CLI_Command_t* command_list_ptr = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	607b      	str	r3, [r7, #4]

    if (Ring_Buffer_Get_Count())
 800694e:	f000 fe8f 	bl	8007670 <Ring_Buffer_Get_Count>
 8006952:	4603      	mov	r3, r0
 8006954:	2b00      	cmp	r3, #0
 8006956:	f000 80a6 	beq.w	8006aa6 <CLI_UART_Loop+0x166>
	{

	Ring_Buffer_Get_Char(&rx_char);
 800695a:	1c7b      	adds	r3, r7, #1
 800695c:	4618      	mov	r0, r3
 800695e:	f000 fe57 	bl	8007610 <Ring_Buffer_Get_Char>

	if (rx_char == '\n') // end of command
 8006962:	787b      	ldrb	r3, [r7, #1]
 8006964:	2b0a      	cmp	r3, #10
 8006966:	d16d      	bne.n	8006a44 <CLI_UART_Loop+0x104>
	    {

	    if (rx_char_count) // new command received
 8006968:	4b51      	ldr	r3, [pc, #324]	; (8006ab0 <CLI_UART_Loop+0x170>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00c      	beq.n	800698a <CLI_UART_Loop+0x4a>
		{
		strncpy(CLI_CMD_Buffer, CLI_Input_Buffer, INPUT_BUFFER_SIZE); // copy command
 8006970:	2264      	movs	r2, #100	; 0x64
 8006972:	4950      	ldr	r1, [pc, #320]	; (8006ab4 <CLI_UART_Loop+0x174>)
 8006974:	4850      	ldr	r0, [pc, #320]	; (8006ab8 <CLI_UART_Loop+0x178>)
 8006976:	f001 fb25 	bl	8007fc4 <strncpy>
		memset(CLI_Input_Buffer, 0x00, INPUT_BUFFER_SIZE); //reset input buffer
 800697a:	2264      	movs	r2, #100	; 0x64
 800697c:	2100      	movs	r1, #0
 800697e:	484d      	ldr	r0, [pc, #308]	; (8006ab4 <CLI_UART_Loop+0x174>)
 8006980:	f001 face 	bl	8007f20 <memset>
		rx_char_count = 0;
 8006984:	4b4a      	ldr	r3, [pc, #296]	; (8006ab0 <CLI_UART_Loop+0x170>)
 8006986:	2200      	movs	r2, #0
 8006988:	701a      	strb	r2, [r3, #0]
		}

	    //scan for command
	    for (uint16_t i = 0; i < Command_Count; i++)
 800698a:	2300      	movs	r3, #0
 800698c:	81bb      	strh	r3, [r7, #12]
 800698e:	e03c      	b.n	8006a0a <CLI_UART_Loop+0xca>
		{

		command_list_ptr = Cammand_List[i];
 8006990:	89bb      	ldrh	r3, [r7, #12]
 8006992:	4a4a      	ldr	r2, [pc, #296]	; (8006abc <CLI_UART_Loop+0x17c>)
 8006994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006998:	607b      	str	r3, [r7, #4]
		uint16_t cmd_len = command_list_ptr->CLI_Command_Length;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	891b      	ldrh	r3, [r3, #8]
 800699e:	807b      	strh	r3, [r7, #2]

		/* To ensure the string lengths match exactly, so as not to pick up
		a sub-string of a longer command, check the byte after the expected
		end of the string is either the end of the string or a space before
		a parameter. */
		if( ( CLI_CMD_Buffer[cmd_len] == ' ' ) || ( CLI_CMD_Buffer[cmd_len] == 0x00 ) )
 80069a0:	887b      	ldrh	r3, [r7, #2]
 80069a2:	4a45      	ldr	r2, [pc, #276]	; (8006ab8 <CLI_UART_Loop+0x178>)
 80069a4:	5cd3      	ldrb	r3, [r2, r3]
 80069a6:	2b20      	cmp	r3, #32
 80069a8:	d004      	beq.n	80069b4 <CLI_UART_Loop+0x74>
 80069aa:	887b      	ldrh	r3, [r7, #2]
 80069ac:	4a42      	ldr	r2, [pc, #264]	; (8006ab8 <CLI_UART_Loop+0x178>)
 80069ae:	5cd3      	ldrb	r3, [r2, r3]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d127      	bne.n	8006a04 <CLI_UART_Loop+0xc4>
		{

		if (strncmp(CLI_CMD_Buffer, command_list_ptr->CLI_Command, cmd_len) == 0)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	887a      	ldrh	r2, [r7, #2]
 80069ba:	4619      	mov	r1, r3
 80069bc:	483e      	ldr	r0, [pc, #248]	; (8006ab8 <CLI_UART_Loop+0x178>)
 80069be:	f001 faef 	bl	8007fa0 <strncmp>
 80069c2:	4603      	mov	r3, r0
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d11d      	bne.n	8006a04 <CLI_UART_Loop+0xc4>
		    {

		    is_command_valid = 1;
 80069c8:	2301      	movs	r3, #1
 80069ca:	73fb      	strb	r3, [r7, #15]

		    if (command_list_ptr->CLI_Callback != NULL)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	68db      	ldr	r3, [r3, #12]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d020      	beq.n	8006a16 <CLI_UART_Loop+0xd6>
			{
			uint8_t call_again = 1;
 80069d4:	2301      	movs	r3, #1
 80069d6:	72fb      	strb	r3, [r7, #11]
			// repeatedly call this function until it returns 0
			// require only if generated output in callback is larger than output buffer
			while (call_again)
 80069d8:	e010      	b.n	80069fc <CLI_UART_Loop+0xbc>
			    {

		            memset(CLI_Output_Buffer, 0x00, OUTPUT_BUFFER_SIZE); //reset output buffer
 80069da:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80069de:	2100      	movs	r1, #0
 80069e0:	4837      	ldr	r0, [pc, #220]	; (8006ac0 <CLI_UART_Loop+0x180>)
 80069e2:	f001 fa9d 	bl	8007f20 <memset>

		            //callback function
			    call_again = command_list_ptr->CLI_Callback(
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	887a      	ldrh	r2, [r7, #2]
 80069ec:	4934      	ldr	r1, [pc, #208]	; (8006ac0 <CLI_UART_Loop+0x180>)
 80069ee:	4832      	ldr	r0, [pc, #200]	; (8006ab8 <CLI_UART_Loop+0x178>)
 80069f0:	4798      	blx	r3
 80069f2:	4603      	mov	r3, r0
 80069f4:	72fb      	strb	r3, [r7, #11]
				    CLI_CMD_Buffer,
				    CLI_Output_Buffer,
				    cmd_len);

			    //send output to console
			    CLI_UART_Send_String(CLI_Output_Buffer);
 80069f6:	4832      	ldr	r0, [pc, #200]	; (8006ac0 <CLI_UART_Loop+0x180>)
 80069f8:	f7ff ff08 	bl	800680c <CLI_UART_Send_String>
			while (call_again)
 80069fc:	7afb      	ldrb	r3, [r7, #11]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d1eb      	bne.n	80069da <CLI_UART_Loop+0x9a>

			    }
			}
		    break; // command found break the loop
 8006a02:	e008      	b.n	8006a16 <CLI_UART_Loop+0xd6>
	    for (uint16_t i = 0; i < Command_Count; i++)
 8006a04:	89bb      	ldrh	r3, [r7, #12]
 8006a06:	3301      	adds	r3, #1
 8006a08:	81bb      	strh	r3, [r7, #12]
 8006a0a:	4b2e      	ldr	r3, [pc, #184]	; (8006ac4 <CLI_UART_Loop+0x184>)
 8006a0c:	881b      	ldrh	r3, [r3, #0]
 8006a0e:	89ba      	ldrh	r2, [r7, #12]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d3bd      	bcc.n	8006990 <CLI_UART_Loop+0x50>
 8006a14:	e000      	b.n	8006a18 <CLI_UART_Loop+0xd8>
		    break; // command found break the loop
 8006a16:	bf00      	nop

		    }
		}
		}

	    if (!is_command_valid)
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10e      	bne.n	8006a3c <CLI_UART_Loop+0xfc>
		{

	        //memset(CLI_Output_Buffer, 0x00, OUTPUT_BUFFER_SIZE); //reset output buffer
		strncpy(CLI_Output_Buffer, CLI_CMD_Buffer, INPUT_BUFFER_SIZE);
 8006a1e:	2264      	movs	r2, #100	; 0x64
 8006a20:	4925      	ldr	r1, [pc, #148]	; (8006ab8 <CLI_UART_Loop+0x178>)
 8006a22:	4827      	ldr	r0, [pc, #156]	; (8006ac0 <CLI_UART_Loop+0x180>)
 8006a24:	f001 face 	bl	8007fc4 <strncpy>
		strncat(CLI_Output_Buffer,
 8006a28:	4b27      	ldr	r3, [pc, #156]	; (8006ac8 <CLI_UART_Loop+0x188>)
 8006a2a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4823      	ldr	r0, [pc, #140]	; (8006ac0 <CLI_UART_Loop+0x180>)
 8006a32:	f001 faa1 	bl	8007f78 <strncat>
			CMD_Not_Recognized_Sring,
			OUTPUT_BUFFER_SIZE);
		//send output to console
		CLI_UART_Send_String(CLI_Output_Buffer);
 8006a36:	4822      	ldr	r0, [pc, #136]	; (8006ac0 <CLI_UART_Loop+0x180>)
 8006a38:	f7ff fee8 	bl	800680c <CLI_UART_Send_String>
		}

	    CLI_UART_Send_String("\r\n->");
 8006a3c:	4823      	ldr	r0, [pc, #140]	; (8006acc <CLI_UART_Loop+0x18c>)
 8006a3e:	f7ff fee5 	bl	800680c <CLI_UART_Send_String>
			}
		    }
		}
	    }
	}
    }
 8006a42:	e030      	b.n	8006aa6 <CLI_UART_Loop+0x166>
	    if (rx_char == '\r')
 8006a44:	787b      	ldrb	r3, [r7, #1]
 8006a46:	2b0d      	cmp	r3, #13
 8006a48:	d02d      	beq.n	8006aa6 <CLI_UART_Loop+0x166>
	    else if ((rx_char == '\b') || (rx_char == 0x7F)) // backspace or delete
 8006a4a:	787b      	ldrb	r3, [r7, #1]
 8006a4c:	2b08      	cmp	r3, #8
 8006a4e:	d002      	beq.n	8006a56 <CLI_UART_Loop+0x116>
 8006a50:	787b      	ldrb	r3, [r7, #1]
 8006a52:	2b7f      	cmp	r3, #127	; 0x7f
 8006a54:	d110      	bne.n	8006a78 <CLI_UART_Loop+0x138>
		if (rx_char_count > 0)
 8006a56:	4b16      	ldr	r3, [pc, #88]	; (8006ab0 <CLI_UART_Loop+0x170>)
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d023      	beq.n	8006aa6 <CLI_UART_Loop+0x166>
		    rx_char_count--;
 8006a5e:	4b14      	ldr	r3, [pc, #80]	; (8006ab0 <CLI_UART_Loop+0x170>)
 8006a60:	781b      	ldrb	r3, [r3, #0]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	b2da      	uxtb	r2, r3
 8006a66:	4b12      	ldr	r3, [pc, #72]	; (8006ab0 <CLI_UART_Loop+0x170>)
 8006a68:	701a      	strb	r2, [r3, #0]
		    CLI_Input_Buffer[rx_char_count] = '\0';
 8006a6a:	4b11      	ldr	r3, [pc, #68]	; (8006ab0 <CLI_UART_Loop+0x170>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	461a      	mov	r2, r3
 8006a70:	4b10      	ldr	r3, [pc, #64]	; (8006ab4 <CLI_UART_Loop+0x174>)
 8006a72:	2100      	movs	r1, #0
 8006a74:	5499      	strb	r1, [r3, r2]
		if (rx_char_count > 0)
 8006a76:	e016      	b.n	8006aa6 <CLI_UART_Loop+0x166>
		if ((rx_char >= ' ') && (rx_char <= '~'))
 8006a78:	787b      	ldrb	r3, [r7, #1]
 8006a7a:	2b1f      	cmp	r3, #31
 8006a7c:	d913      	bls.n	8006aa6 <CLI_UART_Loop+0x166>
 8006a7e:	787b      	ldrb	r3, [r7, #1]
 8006a80:	2b7e      	cmp	r3, #126	; 0x7e
 8006a82:	d810      	bhi.n	8006aa6 <CLI_UART_Loop+0x166>
		    if (rx_char_count < INPUT_BUFFER_SIZE)
 8006a84:	4b0a      	ldr	r3, [pc, #40]	; (8006ab0 <CLI_UART_Loop+0x170>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2b63      	cmp	r3, #99	; 0x63
 8006a8a:	d80c      	bhi.n	8006aa6 <CLI_UART_Loop+0x166>
			CLI_Input_Buffer[rx_char_count] = rx_char;
 8006a8c:	4b08      	ldr	r3, [pc, #32]	; (8006ab0 <CLI_UART_Loop+0x170>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	461a      	mov	r2, r3
 8006a92:	7879      	ldrb	r1, [r7, #1]
 8006a94:	4b07      	ldr	r3, [pc, #28]	; (8006ab4 <CLI_UART_Loop+0x174>)
 8006a96:	5499      	strb	r1, [r3, r2]
			rx_char_count++;
 8006a98:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <CLI_UART_Loop+0x170>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	3301      	adds	r3, #1
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	4b03      	ldr	r3, [pc, #12]	; (8006ab0 <CLI_UART_Loop+0x170>)
 8006aa2:	701a      	strb	r2, [r3, #0]
    }
 8006aa4:	e7ff      	b.n	8006aa6 <CLI_UART_Loop+0x166>
 8006aa6:	bf00      	nop
 8006aa8:	3710      	adds	r7, #16
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	bd80      	pop	{r7, pc}
 8006aae:	bf00      	nop
 8006ab0:	20000a8c 	.word	0x20000a8c
 8006ab4:	200009c0 	.word	0x200009c0
 8006ab8:	20000a24 	.word	0x20000a24
 8006abc:	20000be4 	.word	0x20000be4
 8006ac0:	200007cc 	.word	0x200007cc
 8006ac4:	20000a88 	.word	0x20000a88
 8006ac8:	0800b600 	.word	0x0800b600
 8006acc:	0800b690 	.word	0x0800b690

08006ad0 <CLI_UART_Get_Parameter>:



char* CLI_UART_Get_Parameter(char *pcCommandString, uint16_t uxWantedParameter,
	uint16_t *pxParameterStringLength)
    {
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	460b      	mov	r3, r1
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	817b      	strh	r3, [r7, #10]

    uint16_t uxParametersFound = 0;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	82fb      	strh	r3, [r7, #22]
    char *pcReturn = NULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	801a      	strh	r2, [r3, #0]

    while (uxParametersFound < uxWantedParameter)
 8006aec:	e03c      	b.n	8006b68 <CLI_UART_Get_Parameter+0x98>
	{
	/* Index the character pointer past the current word.  If this is the start
	 of the command string then the first word is the command itself. */
	while (((*pcCommandString) != 0x00) && ((*pcCommandString) != ' '))
	    {
	    pcCommandString++;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3301      	adds	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]
	while (((*pcCommandString) != 0x00) && ((*pcCommandString) != ' '))
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d007      	beq.n	8006b0c <CLI_UART_Get_Parameter+0x3c>
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	2b20      	cmp	r3, #32
 8006b02:	d1f4      	bne.n	8006aee <CLI_UART_Get_Parameter+0x1e>
	    }

	/* Find the start of the next string. */
	while (((*pcCommandString) != 0x00) && ((*pcCommandString) == ' '))
 8006b04:	e002      	b.n	8006b0c <CLI_UART_Get_Parameter+0x3c>
	    {
	    pcCommandString++;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	60fb      	str	r3, [r7, #12]
	while (((*pcCommandString) != 0x00) && ((*pcCommandString) == ' '))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d003      	beq.n	8006b1c <CLI_UART_Get_Parameter+0x4c>
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	781b      	ldrb	r3, [r3, #0]
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d0f4      	beq.n	8006b06 <CLI_UART_Get_Parameter+0x36>
	    }

	/* Was a string found? */
	if (*pcCommandString != 0x00)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d026      	beq.n	8006b72 <CLI_UART_Get_Parameter+0xa2>
	    {
	    /* Is this the start of the required parameter? */
	    uxParametersFound++;
 8006b24:	8afb      	ldrh	r3, [r7, #22]
 8006b26:	3301      	adds	r3, #1
 8006b28:	82fb      	strh	r3, [r7, #22]

	    if (uxParametersFound == uxWantedParameter)
 8006b2a:	8afa      	ldrh	r2, [r7, #22]
 8006b2c:	897b      	ldrh	r3, [r7, #10]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d11a      	bne.n	8006b68 <CLI_UART_Get_Parameter+0x98>
		{
		/* How long is the parameter? */
		pcReturn = pcCommandString;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	613b      	str	r3, [r7, #16]
		while (((*pcCommandString) != 0x00)
 8006b36:	e008      	b.n	8006b4a <CLI_UART_Get_Parameter+0x7a>
			&& ((*pcCommandString) != ' '))
		    {
		    (*pxParameterStringLength)++;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	881b      	ldrh	r3, [r3, #0]
 8006b3c:	3301      	adds	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	801a      	strh	r2, [r3, #0]
		    pcCommandString++;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	3301      	adds	r3, #1
 8006b48:	60fb      	str	r3, [r7, #12]
		while (((*pcCommandString) != 0x00)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <CLI_UART_Get_Parameter+0x8a>
			&& ((*pcCommandString) != ' '))
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d1ee      	bne.n	8006b38 <CLI_UART_Get_Parameter+0x68>
		    }

		if (*pxParameterStringLength == 0)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	881b      	ldrh	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d109      	bne.n	8006b76 <CLI_UART_Get_Parameter+0xa6>
		    {
		    pcReturn = NULL;
 8006b62:	2300      	movs	r3, #0
 8006b64:	613b      	str	r3, [r7, #16]
		    }

		break;
 8006b66:	e006      	b.n	8006b76 <CLI_UART_Get_Parameter+0xa6>
    while (uxParametersFound < uxWantedParameter)
 8006b68:	8afa      	ldrh	r2, [r7, #22]
 8006b6a:	897b      	ldrh	r3, [r7, #10]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d3c1      	bcc.n	8006af4 <CLI_UART_Get_Parameter+0x24>
 8006b70:	e002      	b.n	8006b78 <CLI_UART_Get_Parameter+0xa8>
		}
	    }
	else
	    {
	    break;
 8006b72:	bf00      	nop
 8006b74:	e000      	b.n	8006b78 <CLI_UART_Get_Parameter+0xa8>
		break;
 8006b76:	bf00      	nop
	    }
	}

    return pcReturn;
 8006b78:	693b      	ldr	r3, [r7, #16]
    }
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	371c      	adds	r7, #28
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b84:	4770      	bx	lr
	...

08006b88 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b082      	sub	sp, #8
 8006b8c:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006b8e:	2300      	movs	r3, #0
 8006b90:	607b      	str	r3, [r7, #4]
 8006b92:	4a0c      	ldr	r2, [pc, #48]	; (8006bc4 <MX_DMA_Init+0x3c>)
 8006b94:	4b0b      	ldr	r3, [pc, #44]	; (8006bc4 <MX_DMA_Init+0x3c>)
 8006b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b9e:	4b09      	ldr	r3, [pc, #36]	; (8006bc4 <MX_DMA_Init+0x3c>)
 8006ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ba6:	607b      	str	r3, [r7, #4]
 8006ba8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8006baa:	2200      	movs	r2, #0
 8006bac:	2100      	movs	r1, #0
 8006bae:	2010      	movs	r0, #16
 8006bb0:	f7fa fae6 	bl	8001180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8006bb4:	2010      	movs	r0, #16
 8006bb6:	f7fa fb0f 	bl	80011d8 <HAL_NVIC_EnableIRQ>

}
 8006bba:	bf00      	nop
 8006bbc:	3708      	adds	r7, #8
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	bd80      	pop	{r7, pc}
 8006bc2:	bf00      	nop
 8006bc4:	40023800 	.word	0x40023800

08006bc8 <Encoder_Interface_Config>:
extern int32_t Motor_Parameter[NO_OF_MOTORS]; // speed steps
extern uint8_t Motor_Direction[NO_OF_MOTORS];
extern uint8_t Control_Mode;

void Encoder_Interface_Config()
    {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	af00      	add	r7, sp, #0
    HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1);
 8006bcc:	2100      	movs	r1, #0
 8006bce:	4806      	ldr	r0, [pc, #24]	; (8006be8 <Encoder_Interface_Config+0x20>)
 8006bd0:	f7fc fd64 	bl	800369c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4805      	ldr	r0, [pc, #20]	; (8006bec <Encoder_Interface_Config+0x24>)
 8006bd8:	f7fc fd60 	bl	800369c <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8006bdc:	2100      	movs	r1, #0
 8006bde:	4804      	ldr	r0, [pc, #16]	; (8006bf0 <Encoder_Interface_Config+0x28>)
 8006be0:	f7fc fd5c 	bl	800369c <HAL_TIM_Encoder_Start>
    }
 8006be4:	bf00      	nop
 8006be6:	bd80      	pop	{r7, pc}
 8006be8:	20000f94 	.word	0x20000f94
 8006bec:	20000fd4 	.word	0x20000fd4
 8006bf0:	20000f54 	.word	0x20000f54
 8006bf4:	00000000 	.word	0x00000000

08006bf8 <Encoder_Loop>:

void Encoder_Loop()
    {
 8006bf8:	b5b0      	push	{r4, r5, r7, lr}
 8006bfa:	b088      	sub	sp, #32
 8006bfc:	af00      	add	r7, sp, #0
    static uint32_t time_stamp = 0;
    static uint8_t runnig_flag_x = 0;
    static uint8_t runnig_flag_y = 0;
    static uint8_t runnig_flag_z = 0;

    int32_t steps_to_move = 0;
 8006bfe:	2300      	movs	r3, #0
 8006c00:	61bb      	str	r3, [r7, #24]
    int32_t speed_val = 0;
 8006c02:	2300      	movs	r3, #0
 8006c04:	617b      	str	r3, [r7, #20]

    uint8_t direction = L6470_DIR_FWD_ID;
 8006c06:	2301      	movs	r3, #1
 8006c08:	77fb      	strb	r3, [r7, #31]
    uint8_t perform_prepared_action = 0;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	77bb      	strb	r3, [r7, #30]
    char int_to_str[10] = {0};
 8006c0e:	1d3b      	adds	r3, r7, #4
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]
 8006c14:	605a      	str	r2, [r3, #4]
 8006c16:	811a      	strh	r2, [r3, #8]

    if (Control_Mode == 0)
 8006c18:	4bc3      	ldr	r3, [pc, #780]	; (8006f28 <Encoder_Loop+0x330>)
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f040 816d 	bne.w	8006efc <Encoder_Loop+0x304>
	{

	int16_t encoder_count_x = htim2.Instance->CNT;
 8006c22:	4bc2      	ldr	r3, [pc, #776]	; (8006f2c <Encoder_Loop+0x334>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c28:	83bb      	strh	r3, [r7, #28]
	int16_t encoder_count_y = htim1.Instance->CNT;
 8006c2a:	4bc1      	ldr	r3, [pc, #772]	; (8006f30 <Encoder_Loop+0x338>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c30:	827b      	strh	r3, [r7, #18]
	int16_t encoder_count_z = htim4.Instance->CNT;
 8006c32:	4bc0      	ldr	r3, [pc, #768]	; (8006f34 <Encoder_Loop+0x33c>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c38:	823b      	strh	r3, [r7, #16]
	int16_t encoder_count_m = encoder_count_x;
 8006c3a:	8bbb      	ldrh	r3, [r7, #28]
 8006c3c:	81fb      	strh	r3, [r7, #14]

	if (HAL_GetTick() - time_stamp > 10)
 8006c3e:	f7fa f9a5 	bl	8000f8c <HAL_GetTick>
 8006c42:	4602      	mov	r2, r0
 8006c44:	4bbc      	ldr	r3, [pc, #752]	; (8006f38 <Encoder_Loop+0x340>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b0a      	cmp	r3, #10
 8006c4c:	f240 8156 	bls.w	8006efc <Encoder_Loop+0x304>
	    {

	    time_stamp = HAL_GetTick();
 8006c50:	f7fa f99c 	bl	8000f8c <HAL_GetTick>
 8006c54:	4602      	mov	r2, r0
 8006c56:	4bb8      	ldr	r3, [pc, #736]	; (8006f38 <Encoder_Loop+0x340>)
 8006c58:	601a      	str	r2, [r3, #0]

	    L6470_PrepareGetParam(X_AXIS_INDEX, L6470_ABS_POS_ID);
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	2000      	movs	r0, #0
 8006c5e:	f7fe fb05 	bl	800526c <L6470_PrepareGetParam>
	    L6470_PrepareGetParam(Y_AXIS_INDEX, L6470_ABS_POS_ID);
 8006c62:	2100      	movs	r1, #0
 8006c64:	2001      	movs	r0, #1
 8006c66:	f7fe fb01 	bl	800526c <L6470_PrepareGetParam>
	    L6470_PrepareGetParam(Z_AXIS_INDEX, L6470_ABS_POS_ID);
 8006c6a:	2100      	movs	r1, #0
 8006c6c:	2002      	movs	r0, #2
 8006c6e:	f7fe fafd 	bl	800526c <L6470_PrepareGetParam>
	    L6470_PrepareGetParam(M_AXIS_INDEX, L6470_ABS_POS_ID);
 8006c72:	2100      	movs	r1, #0
 8006c74:	2003      	movs	r0, #3
 8006c76:	f7fe faf9 	bl	800526c <L6470_PrepareGetParam>
	    L6470_PerformPreparedApplicationCommand();
 8006c7a:	f7fe fc8b 	bl	8005594 <L6470_PerformPreparedApplicationCommand>

	    Motor_Current_Steps[X_AXIS_INDEX] = L6470_ExtractReturnedData(
 8006c7e:	2203      	movs	r2, #3
 8006c80:	49ae      	ldr	r1, [pc, #696]	; (8006f3c <Encoder_Loop+0x344>)
 8006c82:	2000      	movs	r0, #0
 8006c84:	f7fe fce0 	bl	8005648 <L6470_ExtractReturnedData>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	4bac      	ldr	r3, [pc, #688]	; (8006f40 <Encoder_Loop+0x348>)
 8006c8e:	601a      	str	r2, [r3, #0]
	    X_AXIS_INDEX, (uint8_t*) L6470_DaisyChainSpiRxStruct, 3);
	    Motor_Current_Steps[Y_AXIS_INDEX] = L6470_ExtractReturnedData(
 8006c90:	2203      	movs	r2, #3
 8006c92:	49aa      	ldr	r1, [pc, #680]	; (8006f3c <Encoder_Loop+0x344>)
 8006c94:	2001      	movs	r0, #1
 8006c96:	f7fe fcd7 	bl	8005648 <L6470_ExtractReturnedData>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4ba8      	ldr	r3, [pc, #672]	; (8006f40 <Encoder_Loop+0x348>)
 8006ca0:	605a      	str	r2, [r3, #4]
	    Y_AXIS_INDEX, (uint8_t*) L6470_DaisyChainSpiRxStruct, 3);
	    Motor_Current_Steps[Z_AXIS_INDEX] = L6470_ExtractReturnedData(
 8006ca2:	2203      	movs	r2, #3
 8006ca4:	49a5      	ldr	r1, [pc, #660]	; (8006f3c <Encoder_Loop+0x344>)
 8006ca6:	2002      	movs	r0, #2
 8006ca8:	f7fe fcce 	bl	8005648 <L6470_ExtractReturnedData>
 8006cac:	4603      	mov	r3, r0
 8006cae:	461a      	mov	r2, r3
 8006cb0:	4ba3      	ldr	r3, [pc, #652]	; (8006f40 <Encoder_Loop+0x348>)
 8006cb2:	609a      	str	r2, [r3, #8]
	    Z_AXIS_INDEX, (uint8_t*) L6470_DaisyChainSpiRxStruct, 3);
	    Motor_Current_Steps[M_AXIS_INDEX] = L6470_ExtractReturnedData(
 8006cb4:	2203      	movs	r2, #3
 8006cb6:	49a1      	ldr	r1, [pc, #644]	; (8006f3c <Encoder_Loop+0x344>)
 8006cb8:	2003      	movs	r0, #3
 8006cba:	f7fe fcc5 	bl	8005648 <L6470_ExtractReturnedData>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	4b9f      	ldr	r3, [pc, #636]	; (8006f40 <Encoder_Loop+0x348>)
 8006cc4:	60da      	str	r2, [r3, #12]
	    M_AXIS_INDEX, (uint8_t*) L6470_DaisyChainSpiRxStruct, 3);

	    Motor_Current_Steps[X_AXIS_INDEX] = AbsPos_2_Position(
		    Motor_Current_Steps[X_AXIS_INDEX]);
 8006cc6:	4b9e      	ldr	r3, [pc, #632]	; (8006f40 <Encoder_Loop+0x348>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
	    Motor_Current_Steps[X_AXIS_INDEX] = AbsPos_2_Position(
 8006cca:	4618      	mov	r0, r3
 8006ccc:	f7fd fdd8 	bl	8004880 <AbsPos_2_Position>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	4b9b      	ldr	r3, [pc, #620]	; (8006f40 <Encoder_Loop+0x348>)
 8006cd4:	601a      	str	r2, [r3, #0]
	    Motor_Current_Steps[Y_AXIS_INDEX] = AbsPos_2_Position(
		    Motor_Current_Steps[Y_AXIS_INDEX]);
 8006cd6:	4b9a      	ldr	r3, [pc, #616]	; (8006f40 <Encoder_Loop+0x348>)
 8006cd8:	685b      	ldr	r3, [r3, #4]
	    Motor_Current_Steps[Y_AXIS_INDEX] = AbsPos_2_Position(
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fd fdd0 	bl	8004880 <AbsPos_2_Position>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	4b97      	ldr	r3, [pc, #604]	; (8006f40 <Encoder_Loop+0x348>)
 8006ce4:	605a      	str	r2, [r3, #4]
	    Motor_Current_Steps[Z_AXIS_INDEX] = AbsPos_2_Position(
		    Motor_Current_Steps[Z_AXIS_INDEX]);
 8006ce6:	4b96      	ldr	r3, [pc, #600]	; (8006f40 <Encoder_Loop+0x348>)
 8006ce8:	689b      	ldr	r3, [r3, #8]
	    Motor_Current_Steps[Z_AXIS_INDEX] = AbsPos_2_Position(
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fd fdc8 	bl	8004880 <AbsPos_2_Position>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	4b93      	ldr	r3, [pc, #588]	; (8006f40 <Encoder_Loop+0x348>)
 8006cf4:	609a      	str	r2, [r3, #8]
	    Motor_Current_Steps[M_AXIS_INDEX] = AbsPos_2_Position(
		    Motor_Current_Steps[M_AXIS_INDEX]);
 8006cf6:	4b92      	ldr	r3, [pc, #584]	; (8006f40 <Encoder_Loop+0x348>)
 8006cf8:	68db      	ldr	r3, [r3, #12]
	    Motor_Current_Steps[M_AXIS_INDEX] = AbsPos_2_Position(
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7fd fdc0 	bl	8004880 <AbsPos_2_Position>
 8006d00:	4602      	mov	r2, r0
 8006d02:	4b8f      	ldr	r3, [pc, #572]	; (8006f40 <Encoder_Loop+0x348>)
 8006d04:	60da      	str	r2, [r3, #12]

	    if (encoder_count_x)
 8006d06:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	f000 80e0 	beq.w	8006ed0 <Encoder_Loop+0x2d8>
		{

		perform_prepared_action = 1;
 8006d10:	2301      	movs	r3, #1
 8006d12:	77bb      	strb	r3, [r7, #30]
		htim2.Instance->CNT = 0;
 8006d14:	4b85      	ldr	r3, [pc, #532]	; (8006f2c <Encoder_Loop+0x334>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	625a      	str	r2, [r3, #36]	; 0x24

		if (encoder_count_x > 0)
 8006d1c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	dd5e      	ble.n	8006de2 <Encoder_Loop+0x1ea>
		    {
		    direction = L6470_DIR_FWD_ID;
 8006d24:	2301      	movs	r3, #1
 8006d26:	77fb      	strb	r3, [r7, #31]
		    if(Motor_Current_Steps[X_AXIS_INDEX] > Motor_MAX_Steps[X_AXIS_INDEX] * 0.8)
 8006d28:	4b85      	ldr	r3, [pc, #532]	; (8006f40 <Encoder_Loop+0x348>)
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7f9 fc01 	bl	8000534 <__aeabi_i2d>
 8006d32:	4604      	mov	r4, r0
 8006d34:	460d      	mov	r5, r1
 8006d36:	4b83      	ldr	r3, [pc, #524]	; (8006f44 <Encoder_Loop+0x34c>)
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7f9 fbfa 	bl	8000534 <__aeabi_i2d>
 8006d40:	a371      	add	r3, pc, #452	; (adr r3, 8006f08 <Encoder_Loop+0x310>)
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f7f9 fc5b 	bl	8000600 <__aeabi_dmul>
 8006d4a:	4602      	mov	r2, r0
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	4620      	mov	r0, r4
 8006d50:	4629      	mov	r1, r5
 8006d52:	f7f9 fee5 	bl	8000b20 <__aeabi_dcmpgt>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01d      	beq.n	8006d98 <Encoder_Loop+0x1a0>
			{
			encoder_count_x = encoder_count_x;
			if(Motor_Current_Steps[X_AXIS_INDEX] > Motor_MAX_Steps[X_AXIS_INDEX]*0.95)
 8006d5c:	4b78      	ldr	r3, [pc, #480]	; (8006f40 <Encoder_Loop+0x348>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7f9 fbe7 	bl	8000534 <__aeabi_i2d>
 8006d66:	4604      	mov	r4, r0
 8006d68:	460d      	mov	r5, r1
 8006d6a:	4b76      	ldr	r3, [pc, #472]	; (8006f44 <Encoder_Loop+0x34c>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7f9 fbe0 	bl	8000534 <__aeabi_i2d>
 8006d74:	a366      	add	r3, pc, #408	; (adr r3, 8006f10 <Encoder_Loop+0x318>)
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	f7f9 fc41 	bl	8000600 <__aeabi_dmul>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4620      	mov	r0, r4
 8006d84:	4629      	mov	r1, r5
 8006d86:	f7f9 fecb 	bl	8000b20 <__aeabi_dcmpgt>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	f000 8089 	beq.w	8006ea4 <Encoder_Loop+0x2ac>
			    {
			    encoder_count_x = 0;
 8006d92:	2300      	movs	r3, #0
 8006d94:	83bb      	strh	r3, [r7, #28]
 8006d96:	e085      	b.n	8006ea4 <Encoder_Loop+0x2ac>
			    }
			}
		    else
			{
			encoder_count_x = encoder_count_x* exp(encoder_count_x / 2);
 8006d98:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	f7f9 fbc9 	bl	8000534 <__aeabi_i2d>
 8006da2:	4604      	mov	r4, r0
 8006da4:	460d      	mov	r5, r1
 8006da6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006daa:	0fda      	lsrs	r2, r3, #31
 8006dac:	4413      	add	r3, r2
 8006dae:	105b      	asrs	r3, r3, #1
 8006db0:	b21b      	sxth	r3, r3
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7f9 fbbe 	bl	8000534 <__aeabi_i2d>
 8006db8:	4602      	mov	r2, r0
 8006dba:	460b      	mov	r3, r1
 8006dbc:	ec43 2b10 	vmov	d0, r2, r3
 8006dc0:	f004 f872 	bl	800aea8 <exp>
 8006dc4:	ec53 2b10 	vmov	r2, r3, d0
 8006dc8:	4620      	mov	r0, r4
 8006dca:	4629      	mov	r1, r5
 8006dcc:	f7f9 fc18 	bl	8000600 <__aeabi_dmul>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	460c      	mov	r4, r1
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	f7f9 fec2 	bl	8000b60 <__aeabi_d2iz>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	83bb      	strh	r3, [r7, #28]
 8006de0:	e060      	b.n	8006ea4 <Encoder_Loop+0x2ac>
			}
		    }
		else
		    {
		    encoder_count_x *= -1;
 8006de2:	8bbb      	ldrh	r3, [r7, #28]
 8006de4:	425b      	negs	r3, r3
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	83bb      	strh	r3, [r7, #28]
		    direction = L6470_DIR_REV_ID;
 8006dea:	2300      	movs	r3, #0
 8006dec:	77fb      	strb	r3, [r7, #31]
		    if(Motor_Current_Steps[X_AXIS_INDEX] < Motor_MAX_Steps[X_AXIS_INDEX] * 0.2)
 8006dee:	4b54      	ldr	r3, [pc, #336]	; (8006f40 <Encoder_Loop+0x348>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7f9 fb9e 	bl	8000534 <__aeabi_i2d>
 8006df8:	4604      	mov	r4, r0
 8006dfa:	460d      	mov	r5, r1
 8006dfc:	4b51      	ldr	r3, [pc, #324]	; (8006f44 <Encoder_Loop+0x34c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7f9 fb97 	bl	8000534 <__aeabi_i2d>
 8006e06:	a344      	add	r3, pc, #272	; (adr r3, 8006f18 <Encoder_Loop+0x320>)
 8006e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0c:	f7f9 fbf8 	bl	8000600 <__aeabi_dmul>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4620      	mov	r0, r4
 8006e16:	4629      	mov	r1, r5
 8006e18:	f7f9 fe64 	bl	8000ae4 <__aeabi_dcmplt>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d01c      	beq.n	8006e5c <Encoder_Loop+0x264>
			{
			encoder_count_x = encoder_count_x;
			if(Motor_Current_Steps[X_AXIS_INDEX] < Motor_MAX_Steps[X_AXIS_INDEX] * 0.05)
 8006e22:	4b47      	ldr	r3, [pc, #284]	; (8006f40 <Encoder_Loop+0x348>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7f9 fb84 	bl	8000534 <__aeabi_i2d>
 8006e2c:	4604      	mov	r4, r0
 8006e2e:	460d      	mov	r5, r1
 8006e30:	4b44      	ldr	r3, [pc, #272]	; (8006f44 <Encoder_Loop+0x34c>)
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7f9 fb7d 	bl	8000534 <__aeabi_i2d>
 8006e3a:	a339      	add	r3, pc, #228	; (adr r3, 8006f20 <Encoder_Loop+0x328>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 fbde 	bl	8000600 <__aeabi_dmul>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4620      	mov	r0, r4
 8006e4a:	4629      	mov	r1, r5
 8006e4c:	f7f9 fe4a 	bl	8000ae4 <__aeabi_dcmplt>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d026      	beq.n	8006ea4 <Encoder_Loop+0x2ac>
			    {
			    encoder_count_x = 0;
 8006e56:	2300      	movs	r3, #0
 8006e58:	83bb      	strh	r3, [r7, #28]
 8006e5a:	e023      	b.n	8006ea4 <Encoder_Loop+0x2ac>
			    }
			}
		    else
			{
			encoder_count_x = encoder_count_x* exp(encoder_count_x / 2);
 8006e5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7f9 fb67 	bl	8000534 <__aeabi_i2d>
 8006e66:	4604      	mov	r4, r0
 8006e68:	460d      	mov	r5, r1
 8006e6a:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006e6e:	0fda      	lsrs	r2, r3, #31
 8006e70:	4413      	add	r3, r2
 8006e72:	105b      	asrs	r3, r3, #1
 8006e74:	b21b      	sxth	r3, r3
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7f9 fb5c 	bl	8000534 <__aeabi_i2d>
 8006e7c:	4602      	mov	r2, r0
 8006e7e:	460b      	mov	r3, r1
 8006e80:	ec43 2b10 	vmov	d0, r2, r3
 8006e84:	f004 f810 	bl	800aea8 <exp>
 8006e88:	ec53 2b10 	vmov	r2, r3, d0
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4629      	mov	r1, r5
 8006e90:	f7f9 fbb6 	bl	8000600 <__aeabi_dmul>
 8006e94:	4603      	mov	r3, r0
 8006e96:	460c      	mov	r4, r1
 8006e98:	4618      	mov	r0, r3
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	f7f9 fe60 	bl	8000b60 <__aeabi_d2iz>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	83bb      	strh	r3, [r7, #28]
			}
		    }

		runnig_flag_x = 1;
 8006ea4:	4b28      	ldr	r3, [pc, #160]	; (8006f48 <Encoder_Loop+0x350>)
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	701a      	strb	r2, [r3, #0]
		speed_val = Step_s_2_Speed(encoder_count_x);
 8006eaa:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8006eae:	ee07 3a90 	vmov	s15, r3
 8006eb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8006eba:	f7fd fcf5 	bl	80048a8 <Step_s_2_Speed>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	617b      	str	r3, [r7, #20]
		L6470_PrepareRun(X_AXIS_INDEX, direction, speed_val);
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	7ffb      	ldrb	r3, [r7, #31]
 8006ec6:	4619      	mov	r1, r3
 8006ec8:	2000      	movs	r0, #0
 8006eca:	f7fe f9e9 	bl	80052a0 <L6470_PrepareRun>
 8006ece:	e00e      	b.n	8006eee <Encoder_Loop+0x2f6>

		}
	    else if(runnig_flag_x)
 8006ed0:	4b1d      	ldr	r3, [pc, #116]	; (8006f48 <Encoder_Loop+0x350>)
 8006ed2:	781b      	ldrb	r3, [r3, #0]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <Encoder_Loop+0x2f6>
		{
		runnig_flag_x = 0;
 8006ed8:	4b1b      	ldr	r3, [pc, #108]	; (8006f48 <Encoder_Loop+0x350>)
 8006eda:	2200      	movs	r2, #0
 8006edc:	701a      	strb	r2, [r3, #0]
		perform_prepared_action = 1;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	77bb      	strb	r3, [r7, #30]
		L6470_PrepareRun(X_AXIS_INDEX, direction, 0);
 8006ee2:	7ffb      	ldrb	r3, [r7, #31]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	2000      	movs	r0, #0
 8006eea:	f7fe f9d9 	bl	80052a0 <L6470_PrepareRun>
		}


	    if (perform_prepared_action)
 8006eee:	7fbb      	ldrb	r3, [r7, #30]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <Encoder_Loop+0x304>
		{
		perform_prepared_action = 0;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	77bb      	strb	r3, [r7, #30]
		L6470_PerformPreparedApplicationCommand();
 8006ef8:	f7fe fb4c 	bl	8005594 <L6470_PerformPreparedApplicationCommand>
		}


	    }
	}
    }
 8006efc:	bf00      	nop
 8006efe:	3720      	adds	r7, #32
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bdb0      	pop	{r4, r5, r7, pc}
 8006f04:	f3af 8000 	nop.w
 8006f08:	9999999a 	.word	0x9999999a
 8006f0c:	3fe99999 	.word	0x3fe99999
 8006f10:	66666666 	.word	0x66666666
 8006f14:	3fee6666 	.word	0x3fee6666
 8006f18:	9999999a 	.word	0x9999999a
 8006f1c:	3fc99999 	.word	0x3fc99999
 8006f20:	9999999a 	.word	0x9999999a
 8006f24:	3fa99999 	.word	0x3fa99999
 8006f28:	20000a95 	.word	0x20000a95
 8006f2c:	20000fd4 	.word	0x20000fd4
 8006f30:	20000f94 	.word	0x20000f94
 8006f34:	20000f54 	.word	0x20000f54
 8006f38:	20000a90 	.word	0x20000a90
 8006f3c:	20000b80 	.word	0x20000b80
 8006f40:	20000aac 	.word	0x20000aac
 8006f44:	20000124 	.word	0x20000124
 8006f48:	20000a94 	.word	0x20000a94

08006f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b08a      	sub	sp, #40	; 0x28
 8006f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f52:	f107 0314 	add.w	r3, r7, #20
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]
 8006f5a:	605a      	str	r2, [r3, #4]
 8006f5c:	609a      	str	r2, [r3, #8]
 8006f5e:	60da      	str	r2, [r3, #12]
 8006f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006f62:	2300      	movs	r3, #0
 8006f64:	613b      	str	r3, [r7, #16]
 8006f66:	4a45      	ldr	r2, [pc, #276]	; (800707c <MX_GPIO_Init+0x130>)
 8006f68:	4b44      	ldr	r3, [pc, #272]	; (800707c <MX_GPIO_Init+0x130>)
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	f043 0304 	orr.w	r3, r3, #4
 8006f70:	6313      	str	r3, [r2, #48]	; 0x30
 8006f72:	4b42      	ldr	r3, [pc, #264]	; (800707c <MX_GPIO_Init+0x130>)
 8006f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f76:	f003 0304 	and.w	r3, r3, #4
 8006f7a:	613b      	str	r3, [r7, #16]
 8006f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
 8006f82:	4a3e      	ldr	r2, [pc, #248]	; (800707c <MX_GPIO_Init+0x130>)
 8006f84:	4b3d      	ldr	r3, [pc, #244]	; (800707c <MX_GPIO_Init+0x130>)
 8006f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f8e:	4b3b      	ldr	r3, [pc, #236]	; (800707c <MX_GPIO_Init+0x130>)
 8006f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f96:	60fb      	str	r3, [r7, #12]
 8006f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60bb      	str	r3, [r7, #8]
 8006f9e:	4a37      	ldr	r2, [pc, #220]	; (800707c <MX_GPIO_Init+0x130>)
 8006fa0:	4b36      	ldr	r3, [pc, #216]	; (800707c <MX_GPIO_Init+0x130>)
 8006fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fa4:	f043 0301 	orr.w	r3, r3, #1
 8006fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8006faa:	4b34      	ldr	r3, [pc, #208]	; (800707c <MX_GPIO_Init+0x130>)
 8006fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	60bb      	str	r3, [r7, #8]
 8006fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	607b      	str	r3, [r7, #4]
 8006fba:	4a30      	ldr	r2, [pc, #192]	; (800707c <MX_GPIO_Init+0x130>)
 8006fbc:	4b2f      	ldr	r3, [pc, #188]	; (800707c <MX_GPIO_Init+0x130>)
 8006fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fc0:	f043 0302 	orr.w	r3, r3, #2
 8006fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8006fc6:	4b2d      	ldr	r3, [pc, #180]	; (800707c <MX_GPIO_Init+0x130>)
 8006fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fca:	f003 0302 	and.w	r3, r3, #2
 8006fce:	607b      	str	r3, [r7, #4]
 8006fd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L6470_CS_GPIO_Port, L6470_CS_Pin, GPIO_PIN_SET);
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	2110      	movs	r1, #16
 8006fd6:	482a      	ldr	r0, [pc, #168]	; (8007080 <MX_GPIO_Init+0x134>)
 8006fd8:	f7fb f8a6 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8006fdc:	2200      	movs	r2, #0
 8006fde:	2120      	movs	r1, #32
 8006fe0:	4827      	ldr	r0, [pc, #156]	; (8007080 <MX_GPIO_Init+0x134>)
 8006fe2:	f7fb f8a1 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(L6470_RST_STBY_GPIO_Port, L6470_RST_STBY_Pin, GPIO_PIN_RESET);
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	2120      	movs	r1, #32
 8006fea:	4826      	ldr	r0, [pc, #152]	; (8007084 <MX_GPIO_Init+0x138>)
 8006fec:	f7fb f89c 	bl	8002128 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = B1_Pin|L6470_BUSY_SYNC_INT_Pin|L6470_Flag_INT_Pin;
 8006ff0:	f242 0303 	movw	r3, #8195	; 0x2003
 8006ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006ff6:	4b24      	ldr	r3, [pc, #144]	; (8007088 <MX_GPIO_Init+0x13c>)
 8006ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ffe:	f107 0314 	add.w	r3, r7, #20
 8007002:	4619      	mov	r1, r3
 8007004:	4821      	ldr	r0, [pc, #132]	; (800708c <MX_GPIO_Init+0x140>)
 8007006:	f7fa fdfd 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = L6470_CS_Pin|LD2_Pin;
 800700a:	2330      	movs	r3, #48	; 0x30
 800700c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800700e:	2301      	movs	r3, #1
 8007010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007012:	2300      	movs	r3, #0
 8007014:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007016:	2300      	movs	r3, #0
 8007018:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800701a:	f107 0314 	add.w	r3, r7, #20
 800701e:	4619      	mov	r1, r3
 8007020:	4817      	ldr	r0, [pc, #92]	; (8007080 <MX_GPIO_Init+0x134>)
 8007022:	f7fa fdef 	bl	8001c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = L6470_RST_STBY_Pin;
 8007026:	2320      	movs	r3, #32
 8007028:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800702a:	2311      	movs	r3, #17
 800702c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800702e:	2300      	movs	r3, #0
 8007030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007032:	2300      	movs	r3, #0
 8007034:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(L6470_RST_STBY_GPIO_Port, &GPIO_InitStruct);
 8007036:	f107 0314 	add.w	r3, r7, #20
 800703a:	4619      	mov	r1, r3
 800703c:	4811      	ldr	r0, [pc, #68]	; (8007084 <MX_GPIO_Init+0x138>)
 800703e:	f7fa fde1 	bl	8001c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8007042:	2200      	movs	r2, #0
 8007044:	2100      	movs	r1, #0
 8007046:	2006      	movs	r0, #6
 8007048:	f7fa f89a 	bl	8001180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800704c:	2006      	movs	r0, #6
 800704e:	f7fa f8c3 	bl	80011d8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8007052:	2200      	movs	r2, #0
 8007054:	2100      	movs	r1, #0
 8007056:	2007      	movs	r0, #7
 8007058:	f7fa f892 	bl	8001180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800705c:	2007      	movs	r0, #7
 800705e:	f7fa f8bb 	bl	80011d8 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007062:	2200      	movs	r2, #0
 8007064:	2100      	movs	r1, #0
 8007066:	2028      	movs	r0, #40	; 0x28
 8007068:	f7fa f88a 	bl	8001180 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800706c:	2028      	movs	r0, #40	; 0x28
 800706e:	f7fa f8b3 	bl	80011d8 <HAL_NVIC_EnableIRQ>

}
 8007072:	bf00      	nop
 8007074:	3728      	adds	r7, #40	; 0x28
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	40023800 	.word	0x40023800
 8007080:	40020000 	.word	0x40020000
 8007084:	40020400 	.word	0x40020400
 8007088:	10210000 	.word	0x10210000
 800708c:	40020800 	.word	0x40020800

08007090 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007094:	f7f9 ff14 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007098:	f000 f81e 	bl	80070d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800709c:	f7ff ff56 	bl	8006f4c <MX_GPIO_Init>
  MX_DMA_Init();
 80070a0:	f7ff fd72 	bl	8006b88 <MX_DMA_Init>
  MX_SPI1_Init();
 80070a4:	f000 fb18 	bl	80076d8 <MX_SPI1_Init>
  MX_TIM4_Init();
 80070a8:	f000 fd38 	bl	8007b1c <MX_TIM4_Init>
  MX_TIM1_Init();
 80070ac:	f000 fc8a 	bl	80079c4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80070b0:	f000 fe38 	bl	8007d24 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80070b4:	f000 fcde 	bl	8007a74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  Motor_Config();
 80070b8:	f000 f88c 	bl	80071d4 <Motor_Config>
  //L6470_PrepareMove(2, 1, 200);

  //L6470_PrepareMove(3, 1, 100000);


  L6470_PerformPreparedApplicationCommand();
 80070bc:	f7fe fa6a 	bl	8005594 <L6470_PerformPreparedApplicationCommand>

  CLI_UART_Init();
 80070c0:	f7ff fbf6 	bl	80068b0 <CLI_UART_Init>

  CLI_Add_All_Commands();
 80070c4:	f7ff fad8 	bl	8006678 <CLI_Add_All_Commands>

  Encoder_Interface_Config();
 80070c8:	f7ff fd7e 	bl	8006bc8 <Encoder_Interface_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      CLI_UART_Loop();
 80070cc:	f7ff fc38 	bl	8006940 <CLI_UART_Loop>

      Encoder_Loop();
 80070d0:	f7ff fd92 	bl	8006bf8 <Encoder_Loop>
      CLI_UART_Loop();
 80070d4:	e7fa      	b.n	80070cc <main+0x3c>
	...

080070d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b094      	sub	sp, #80	; 0x50
 80070dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80070de:	f107 0320 	add.w	r3, r7, #32
 80070e2:	2230      	movs	r2, #48	; 0x30
 80070e4:	2100      	movs	r1, #0
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 ff1a 	bl	8007f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80070ec:	f107 030c 	add.w	r3, r7, #12
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
 80070f4:	605a      	str	r2, [r3, #4]
 80070f6:	609a      	str	r2, [r3, #8]
 80070f8:	60da      	str	r2, [r3, #12]
 80070fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80070fc:	2300      	movs	r3, #0
 80070fe:	60bb      	str	r3, [r7, #8]
 8007100:	4a29      	ldr	r2, [pc, #164]	; (80071a8 <SystemClock_Config+0xd0>)
 8007102:	4b29      	ldr	r3, [pc, #164]	; (80071a8 <SystemClock_Config+0xd0>)
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800710a:	6413      	str	r3, [r2, #64]	; 0x40
 800710c:	4b26      	ldr	r3, [pc, #152]	; (80071a8 <SystemClock_Config+0xd0>)
 800710e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007114:	60bb      	str	r3, [r7, #8]
 8007116:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007118:	2300      	movs	r3, #0
 800711a:	607b      	str	r3, [r7, #4]
 800711c:	4a23      	ldr	r2, [pc, #140]	; (80071ac <SystemClock_Config+0xd4>)
 800711e:	4b23      	ldr	r3, [pc, #140]	; (80071ac <SystemClock_Config+0xd4>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800712a:	6013      	str	r3, [r2, #0]
 800712c:	4b1f      	ldr	r3, [pc, #124]	; (80071ac <SystemClock_Config+0xd4>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007134:	607b      	str	r3, [r7, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8007138:	2302      	movs	r3, #2
 800713a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800713c:	2301      	movs	r3, #1
 800713e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007140:	2310      	movs	r3, #16
 8007142:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007144:	2302      	movs	r3, #2
 8007146:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007148:	2300      	movs	r3, #0
 800714a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800714c:	2310      	movs	r3, #16
 800714e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8007150:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8007154:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8007156:	2304      	movs	r3, #4
 8007158:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800715a:	2307      	movs	r3, #7
 800715c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800715e:	f107 0320 	add.w	r3, r7, #32
 8007162:	4618      	mov	r0, r3
 8007164:	f7fb f82a 	bl	80021bc <HAL_RCC_OscConfig>
 8007168:	4603      	mov	r3, r0
 800716a:	2b00      	cmp	r3, #0
 800716c:	d001      	beq.n	8007172 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800716e:	f000 f81f 	bl	80071b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007172:	230f      	movs	r3, #15
 8007174:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007176:	2302      	movs	r3, #2
 8007178:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800717a:	2300      	movs	r3, #0
 800717c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800717e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007182:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007184:	2300      	movs	r3, #0
 8007186:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007188:	f107 030c 	add.w	r3, r7, #12
 800718c:	2102      	movs	r1, #2
 800718e:	4618      	mov	r0, r3
 8007190:	f7fb fb06 	bl	80027a0 <HAL_RCC_ClockConfig>
 8007194:	4603      	mov	r3, r0
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800719a:	f000 f809 	bl	80071b0 <Error_Handler>
  }
}
 800719e:	bf00      	nop
 80071a0:	3750      	adds	r7, #80	; 0x50
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}
 80071a6:	bf00      	nop
 80071a8:	40023800 	.word	0x40023800
 80071ac:	40007000 	.word	0x40007000

080071b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80071b0:	b480      	push	{r7}
 80071b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80071b4:	bf00      	nop
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80071be:	b480      	push	{r7}
 80071c0:	b083      	sub	sp, #12
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
 80071c6:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80071c8:	bf00      	nop
 80071ca:	370c      	adds	r7, #12
 80071cc:	46bd      	mov	sp, r7
 80071ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d2:	4770      	bx	lr

080071d4 <Motor_Config>:
int32_t Motor_Current_Steps[NO_OF_MOTORS] ={0}; // speed steps
int32_t Motor_MAX_Steps[NO_OF_MOTORS] ={MAX_X_AXIS_STEPS,MAX_Y_AXIS_STEPS,MAX_Z_AXIS_STEPS,MAX_M_AXIS_STEPS}; // speed steps


void Motor_Config()
    {
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b082      	sub	sp, #8
 80071d8:	af00      	add	r7, sp, #0

    Motor_X_Data.motorvoltage = 12.0;
 80071da:	4b8c      	ldr	r3, [pc, #560]	; (800740c <Motor_Config+0x238>)
 80071dc:	4a8c      	ldr	r2, [pc, #560]	; (8007410 <Motor_Config+0x23c>)
 80071de:	601a      	str	r2, [r3, #0]
    Motor_X_Data.fullstepsperrevolution = 200;
 80071e0:	4b8a      	ldr	r3, [pc, #552]	; (800740c <Motor_Config+0x238>)
 80071e2:	4a8c      	ldr	r2, [pc, #560]	; (8007414 <Motor_Config+0x240>)
 80071e4:	605a      	str	r2, [r3, #4]
    Motor_X_Data.phasecurrent = 1.5;
 80071e6:	4b89      	ldr	r3, [pc, #548]	; (800740c <Motor_Config+0x238>)
 80071e8:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80071ec:	609a      	str	r2, [r3, #8]
    Motor_X_Data.phasevoltage = 3.0;
 80071ee:	4b87      	ldr	r3, [pc, #540]	; (800740c <Motor_Config+0x238>)
 80071f0:	4a89      	ldr	r2, [pc, #548]	; (8007418 <Motor_Config+0x244>)
 80071f2:	60da      	str	r2, [r3, #12]
    Motor_X_Data.speed = 200.0;
 80071f4:	4b85      	ldr	r3, [pc, #532]	; (800740c <Motor_Config+0x238>)
 80071f6:	4a87      	ldr	r2, [pc, #540]	; (8007414 <Motor_Config+0x240>)
 80071f8:	611a      	str	r2, [r3, #16]
    Motor_X_Data.acc = 100.0;
 80071fa:	4b84      	ldr	r3, [pc, #528]	; (800740c <Motor_Config+0x238>)
 80071fc:	4a87      	ldr	r2, [pc, #540]	; (800741c <Motor_Config+0x248>)
 80071fe:	615a      	str	r2, [r3, #20]
    Motor_X_Data.dec = 50.0;
 8007200:	4b82      	ldr	r3, [pc, #520]	; (800740c <Motor_Config+0x238>)
 8007202:	4a87      	ldr	r2, [pc, #540]	; (8007420 <Motor_Config+0x24c>)
 8007204:	619a      	str	r2, [r3, #24]
    Motor_X_Data.maxspeed = 3000.0;
 8007206:	4b81      	ldr	r3, [pc, #516]	; (800740c <Motor_Config+0x238>)
 8007208:	4a86      	ldr	r2, [pc, #536]	; (8007424 <Motor_Config+0x250>)
 800720a:	61da      	str	r2, [r3, #28]
    Motor_X_Data.minspeed = 0.0;
 800720c:	4b7f      	ldr	r3, [pc, #508]	; (800740c <Motor_Config+0x238>)
 800720e:	f04f 0200 	mov.w	r2, #0
 8007212:	621a      	str	r2, [r3, #32]
    Motor_X_Data.fsspd = 1000.0;
 8007214:	4b7d      	ldr	r3, [pc, #500]	; (800740c <Motor_Config+0x238>)
 8007216:	4a84      	ldr	r2, [pc, #528]	; (8007428 <Motor_Config+0x254>)
 8007218:	625a      	str	r2, [r3, #36]	; 0x24
    Motor_X_Data.kvalhold = 3.06;
 800721a:	4b7c      	ldr	r3, [pc, #496]	; (800740c <Motor_Config+0x238>)
 800721c:	4a83      	ldr	r2, [pc, #524]	; (800742c <Motor_Config+0x258>)
 800721e:	629a      	str	r2, [r3, #40]	; 0x28
    Motor_X_Data.kvalrun = 3.06;
 8007220:	4b7a      	ldr	r3, [pc, #488]	; (800740c <Motor_Config+0x238>)
 8007222:	4a82      	ldr	r2, [pc, #520]	; (800742c <Motor_Config+0x258>)
 8007224:	62da      	str	r2, [r3, #44]	; 0x2c
    Motor_X_Data.kvalacc = 3.06;
 8007226:	4b79      	ldr	r3, [pc, #484]	; (800740c <Motor_Config+0x238>)
 8007228:	4a80      	ldr	r2, [pc, #512]	; (800742c <Motor_Config+0x258>)
 800722a:	631a      	str	r2, [r3, #48]	; 0x30
    Motor_X_Data.kvaldec = 3.06;
 800722c:	4b77      	ldr	r3, [pc, #476]	; (800740c <Motor_Config+0x238>)
 800722e:	4a7f      	ldr	r2, [pc, #508]	; (800742c <Motor_Config+0x258>)
 8007230:	635a      	str	r2, [r3, #52]	; 0x34
    Motor_X_Data.intspeed = 61.52;
 8007232:	4b76      	ldr	r3, [pc, #472]	; (800740c <Motor_Config+0x238>)
 8007234:	4a7e      	ldr	r2, [pc, #504]	; (8007430 <Motor_Config+0x25c>)
 8007236:	639a      	str	r2, [r3, #56]	; 0x38
    Motor_X_Data.stslp = 392.1569e-6;
 8007238:	4b74      	ldr	r3, [pc, #464]	; (800740c <Motor_Config+0x238>)
 800723a:	4a7e      	ldr	r2, [pc, #504]	; (8007434 <Motor_Config+0x260>)
 800723c:	63da      	str	r2, [r3, #60]	; 0x3c
    Motor_X_Data.fnslpacc = 643.1372e-6;
 800723e:	4b73      	ldr	r3, [pc, #460]	; (800740c <Motor_Config+0x238>)
 8007240:	4a7d      	ldr	r2, [pc, #500]	; (8007438 <Motor_Config+0x264>)
 8007242:	641a      	str	r2, [r3, #64]	; 0x40
    Motor_X_Data.fnslpdec = 643.1372e-6;
 8007244:	4b71      	ldr	r3, [pc, #452]	; (800740c <Motor_Config+0x238>)
 8007246:	4a7c      	ldr	r2, [pc, #496]	; (8007438 <Motor_Config+0x264>)
 8007248:	645a      	str	r2, [r3, #68]	; 0x44
    Motor_X_Data.kterm = 0;
 800724a:	4b70      	ldr	r3, [pc, #448]	; (800740c <Motor_Config+0x238>)
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Motor_X_Data.ocdth =   1500 * 1.00;
 8007252:	4b6e      	ldr	r3, [pc, #440]	; (800740c <Motor_Config+0x238>)
 8007254:	4a79      	ldr	r2, [pc, #484]	; (800743c <Motor_Config+0x268>)
 8007256:	64da      	str	r2, [r3, #76]	; 0x4c
    Motor_X_Data.stallth = 1000 * 1.00;
 8007258:	4b6c      	ldr	r3, [pc, #432]	; (800740c <Motor_Config+0x238>)
 800725a:	4a73      	ldr	r2, [pc, #460]	; (8007428 <Motor_Config+0x254>)
 800725c:	651a      	str	r2, [r3, #80]	; 0x50
    Motor_X_Data.step_sel = MICROSTEP_1_128;
 800725e:	4b6b      	ldr	r3, [pc, #428]	; (800740c <Motor_Config+0x238>)
 8007260:	2207      	movs	r2, #7
 8007262:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    Motor_X_Data.alarmen = 0xFF;
 8007266:	4b69      	ldr	r3, [pc, #420]	; (800740c <Motor_Config+0x238>)
 8007268:	22ff      	movs	r2, #255	; 0xff
 800726a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    Motor_X_Data.config = 0x2E88;
 800726e:	4b67      	ldr	r3, [pc, #412]	; (800740c <Motor_Config+0x238>)
 8007270:	f642 6288 	movw	r2, #11912	; 0x2e88
 8007274:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56


    Motor_Y_Data.motorvoltage = 12.0;
 8007278:	4b71      	ldr	r3, [pc, #452]	; (8007440 <Motor_Config+0x26c>)
 800727a:	4a65      	ldr	r2, [pc, #404]	; (8007410 <Motor_Config+0x23c>)
 800727c:	601a      	str	r2, [r3, #0]
    Motor_Y_Data.fullstepsperrevolution = 200;
 800727e:	4b70      	ldr	r3, [pc, #448]	; (8007440 <Motor_Config+0x26c>)
 8007280:	4a64      	ldr	r2, [pc, #400]	; (8007414 <Motor_Config+0x240>)
 8007282:	605a      	str	r2, [r3, #4]
    Motor_Y_Data.phasecurrent = 1.5;
 8007284:	4b6e      	ldr	r3, [pc, #440]	; (8007440 <Motor_Config+0x26c>)
 8007286:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 800728a:	609a      	str	r2, [r3, #8]
    Motor_Y_Data.phasevoltage = 3.0;
 800728c:	4b6c      	ldr	r3, [pc, #432]	; (8007440 <Motor_Config+0x26c>)
 800728e:	4a62      	ldr	r2, [pc, #392]	; (8007418 <Motor_Config+0x244>)
 8007290:	60da      	str	r2, [r3, #12]
    Motor_Y_Data.speed = 100.0;
 8007292:	4b6b      	ldr	r3, [pc, #428]	; (8007440 <Motor_Config+0x26c>)
 8007294:	4a61      	ldr	r2, [pc, #388]	; (800741c <Motor_Config+0x248>)
 8007296:	611a      	str	r2, [r3, #16]
    Motor_Y_Data.acc = 100.0;
 8007298:	4b69      	ldr	r3, [pc, #420]	; (8007440 <Motor_Config+0x26c>)
 800729a:	4a60      	ldr	r2, [pc, #384]	; (800741c <Motor_Config+0x248>)
 800729c:	615a      	str	r2, [r3, #20]
    Motor_Y_Data.dec = 50.0;
 800729e:	4b68      	ldr	r3, [pc, #416]	; (8007440 <Motor_Config+0x26c>)
 80072a0:	4a5f      	ldr	r2, [pc, #380]	; (8007420 <Motor_Config+0x24c>)
 80072a2:	619a      	str	r2, [r3, #24]
    Motor_Y_Data.maxspeed = 3000.0;
 80072a4:	4b66      	ldr	r3, [pc, #408]	; (8007440 <Motor_Config+0x26c>)
 80072a6:	4a5f      	ldr	r2, [pc, #380]	; (8007424 <Motor_Config+0x250>)
 80072a8:	61da      	str	r2, [r3, #28]
    Motor_Y_Data.minspeed = 0.0;
 80072aa:	4b65      	ldr	r3, [pc, #404]	; (8007440 <Motor_Config+0x26c>)
 80072ac:	f04f 0200 	mov.w	r2, #0
 80072b0:	621a      	str	r2, [r3, #32]
    Motor_Y_Data.fsspd = 602.7;
 80072b2:	4b63      	ldr	r3, [pc, #396]	; (8007440 <Motor_Config+0x26c>)
 80072b4:	4a63      	ldr	r2, [pc, #396]	; (8007444 <Motor_Config+0x270>)
 80072b6:	625a      	str	r2, [r3, #36]	; 0x24
    Motor_Y_Data.kvalhold = 3.06;
 80072b8:	4b61      	ldr	r3, [pc, #388]	; (8007440 <Motor_Config+0x26c>)
 80072ba:	4a5c      	ldr	r2, [pc, #368]	; (800742c <Motor_Config+0x258>)
 80072bc:	629a      	str	r2, [r3, #40]	; 0x28
    Motor_Y_Data.kvalrun = 3.06;
 80072be:	4b60      	ldr	r3, [pc, #384]	; (8007440 <Motor_Config+0x26c>)
 80072c0:	4a5a      	ldr	r2, [pc, #360]	; (800742c <Motor_Config+0x258>)
 80072c2:	62da      	str	r2, [r3, #44]	; 0x2c
    Motor_Y_Data.kvalacc = 3.06;
 80072c4:	4b5e      	ldr	r3, [pc, #376]	; (8007440 <Motor_Config+0x26c>)
 80072c6:	4a59      	ldr	r2, [pc, #356]	; (800742c <Motor_Config+0x258>)
 80072c8:	631a      	str	r2, [r3, #48]	; 0x30
    Motor_Y_Data.kvaldec = 3.06;
 80072ca:	4b5d      	ldr	r3, [pc, #372]	; (8007440 <Motor_Config+0x26c>)
 80072cc:	4a57      	ldr	r2, [pc, #348]	; (800742c <Motor_Config+0x258>)
 80072ce:	635a      	str	r2, [r3, #52]	; 0x34
    Motor_Y_Data.intspeed = 61.52;
 80072d0:	4b5b      	ldr	r3, [pc, #364]	; (8007440 <Motor_Config+0x26c>)
 80072d2:	4a57      	ldr	r2, [pc, #348]	; (8007430 <Motor_Config+0x25c>)
 80072d4:	639a      	str	r2, [r3, #56]	; 0x38
    Motor_Y_Data.stslp = 392.1569e-6;
 80072d6:	4b5a      	ldr	r3, [pc, #360]	; (8007440 <Motor_Config+0x26c>)
 80072d8:	4a56      	ldr	r2, [pc, #344]	; (8007434 <Motor_Config+0x260>)
 80072da:	63da      	str	r2, [r3, #60]	; 0x3c
    Motor_Y_Data.fnslpacc = 643.1372e-6;
 80072dc:	4b58      	ldr	r3, [pc, #352]	; (8007440 <Motor_Config+0x26c>)
 80072de:	4a56      	ldr	r2, [pc, #344]	; (8007438 <Motor_Config+0x264>)
 80072e0:	641a      	str	r2, [r3, #64]	; 0x40
    Motor_Y_Data.fnslpdec = 643.1372e-6;
 80072e2:	4b57      	ldr	r3, [pc, #348]	; (8007440 <Motor_Config+0x26c>)
 80072e4:	4a54      	ldr	r2, [pc, #336]	; (8007438 <Motor_Config+0x264>)
 80072e6:	645a      	str	r2, [r3, #68]	; 0x44
    Motor_Y_Data.kterm = 0;
 80072e8:	4b55      	ldr	r3, [pc, #340]	; (8007440 <Motor_Config+0x26c>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Motor_Y_Data.ocdth = 1 * 1500 * 1.00;
 80072f0:	4b53      	ldr	r3, [pc, #332]	; (8007440 <Motor_Config+0x26c>)
 80072f2:	4a52      	ldr	r2, [pc, #328]	; (800743c <Motor_Config+0x268>)
 80072f4:	64da      	str	r2, [r3, #76]	; 0x4c
    Motor_Y_Data.stallth = 1000 * 1.00;
 80072f6:	4b52      	ldr	r3, [pc, #328]	; (8007440 <Motor_Config+0x26c>)
 80072f8:	4a4b      	ldr	r2, [pc, #300]	; (8007428 <Motor_Config+0x254>)
 80072fa:	651a      	str	r2, [r3, #80]	; 0x50
    Motor_Y_Data.step_sel = MICROSTEP_1_128;
 80072fc:	4b50      	ldr	r3, [pc, #320]	; (8007440 <Motor_Config+0x26c>)
 80072fe:	2207      	movs	r2, #7
 8007300:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    Motor_Y_Data.alarmen = 0xFF;
 8007304:	4b4e      	ldr	r3, [pc, #312]	; (8007440 <Motor_Config+0x26c>)
 8007306:	22ff      	movs	r2, #255	; 0xff
 8007308:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    Motor_Y_Data.config = 0x2E88;
 800730c:	4b4c      	ldr	r3, [pc, #304]	; (8007440 <Motor_Config+0x26c>)
 800730e:	f642 6288 	movw	r2, #11912	; 0x2e88
 8007312:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    Motor_Z_Data.motorvoltage = 12.0;
 8007316:	4b4c      	ldr	r3, [pc, #304]	; (8007448 <Motor_Config+0x274>)
 8007318:	4a3d      	ldr	r2, [pc, #244]	; (8007410 <Motor_Config+0x23c>)
 800731a:	601a      	str	r2, [r3, #0]
    Motor_Z_Data.fullstepsperrevolution = 200;
 800731c:	4b4a      	ldr	r3, [pc, #296]	; (8007448 <Motor_Config+0x274>)
 800731e:	4a3d      	ldr	r2, [pc, #244]	; (8007414 <Motor_Config+0x240>)
 8007320:	605a      	str	r2, [r3, #4]
    Motor_Z_Data.phasecurrent = 1.5;
 8007322:	4b49      	ldr	r3, [pc, #292]	; (8007448 <Motor_Config+0x274>)
 8007324:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8007328:	609a      	str	r2, [r3, #8]
    Motor_Z_Data.phasevoltage = 3.0;
 800732a:	4b47      	ldr	r3, [pc, #284]	; (8007448 <Motor_Config+0x274>)
 800732c:	4a3a      	ldr	r2, [pc, #232]	; (8007418 <Motor_Config+0x244>)
 800732e:	60da      	str	r2, [r3, #12]
    Motor_Z_Data.speed = 100.0;
 8007330:	4b45      	ldr	r3, [pc, #276]	; (8007448 <Motor_Config+0x274>)
 8007332:	4a3a      	ldr	r2, [pc, #232]	; (800741c <Motor_Config+0x248>)
 8007334:	611a      	str	r2, [r3, #16]
    Motor_Z_Data.acc = 100.0;
 8007336:	4b44      	ldr	r3, [pc, #272]	; (8007448 <Motor_Config+0x274>)
 8007338:	4a38      	ldr	r2, [pc, #224]	; (800741c <Motor_Config+0x248>)
 800733a:	615a      	str	r2, [r3, #20]
    Motor_Z_Data.dec = 50.0;
 800733c:	4b42      	ldr	r3, [pc, #264]	; (8007448 <Motor_Config+0x274>)
 800733e:	4a38      	ldr	r2, [pc, #224]	; (8007420 <Motor_Config+0x24c>)
 8007340:	619a      	str	r2, [r3, #24]
    Motor_Z_Data.maxspeed = 3000.0;
 8007342:	4b41      	ldr	r3, [pc, #260]	; (8007448 <Motor_Config+0x274>)
 8007344:	4a37      	ldr	r2, [pc, #220]	; (8007424 <Motor_Config+0x250>)
 8007346:	61da      	str	r2, [r3, #28]
    Motor_Z_Data.minspeed = 100.0;
 8007348:	4b3f      	ldr	r3, [pc, #252]	; (8007448 <Motor_Config+0x274>)
 800734a:	4a34      	ldr	r2, [pc, #208]	; (800741c <Motor_Config+0x248>)
 800734c:	621a      	str	r2, [r3, #32]
    Motor_Z_Data.fsspd = 602.7;
 800734e:	4b3e      	ldr	r3, [pc, #248]	; (8007448 <Motor_Config+0x274>)
 8007350:	4a3c      	ldr	r2, [pc, #240]	; (8007444 <Motor_Config+0x270>)
 8007352:	625a      	str	r2, [r3, #36]	; 0x24
    Motor_Z_Data.kvalhold = 3.06;
 8007354:	4b3c      	ldr	r3, [pc, #240]	; (8007448 <Motor_Config+0x274>)
 8007356:	4a35      	ldr	r2, [pc, #212]	; (800742c <Motor_Config+0x258>)
 8007358:	629a      	str	r2, [r3, #40]	; 0x28
    Motor_Z_Data.kvalrun = 3.06;
 800735a:	4b3b      	ldr	r3, [pc, #236]	; (8007448 <Motor_Config+0x274>)
 800735c:	4a33      	ldr	r2, [pc, #204]	; (800742c <Motor_Config+0x258>)
 800735e:	62da      	str	r2, [r3, #44]	; 0x2c
    Motor_Z_Data.kvalacc = 3.06;
 8007360:	4b39      	ldr	r3, [pc, #228]	; (8007448 <Motor_Config+0x274>)
 8007362:	4a32      	ldr	r2, [pc, #200]	; (800742c <Motor_Config+0x258>)
 8007364:	631a      	str	r2, [r3, #48]	; 0x30
    Motor_Z_Data.kvaldec = 3.06;
 8007366:	4b38      	ldr	r3, [pc, #224]	; (8007448 <Motor_Config+0x274>)
 8007368:	4a30      	ldr	r2, [pc, #192]	; (800742c <Motor_Config+0x258>)
 800736a:	635a      	str	r2, [r3, #52]	; 0x34
    Motor_Z_Data.intspeed = 61.52;
 800736c:	4b36      	ldr	r3, [pc, #216]	; (8007448 <Motor_Config+0x274>)
 800736e:	4a30      	ldr	r2, [pc, #192]	; (8007430 <Motor_Config+0x25c>)
 8007370:	639a      	str	r2, [r3, #56]	; 0x38
    Motor_Z_Data.stslp = 392.1569e-6;
 8007372:	4b35      	ldr	r3, [pc, #212]	; (8007448 <Motor_Config+0x274>)
 8007374:	4a2f      	ldr	r2, [pc, #188]	; (8007434 <Motor_Config+0x260>)
 8007376:	63da      	str	r2, [r3, #60]	; 0x3c
    Motor_Z_Data.fnslpacc = 643.1372e-6;
 8007378:	4b33      	ldr	r3, [pc, #204]	; (8007448 <Motor_Config+0x274>)
 800737a:	4a2f      	ldr	r2, [pc, #188]	; (8007438 <Motor_Config+0x264>)
 800737c:	641a      	str	r2, [r3, #64]	; 0x40
    Motor_Z_Data.fnslpdec = 643.1372e-6;
 800737e:	4b32      	ldr	r3, [pc, #200]	; (8007448 <Motor_Config+0x274>)
 8007380:	4a2d      	ldr	r2, [pc, #180]	; (8007438 <Motor_Config+0x264>)
 8007382:	645a      	str	r2, [r3, #68]	; 0x44
    Motor_Z_Data.kterm = 0;
 8007384:	4b30      	ldr	r3, [pc, #192]	; (8007448 <Motor_Config+0x274>)
 8007386:	2200      	movs	r2, #0
 8007388:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Motor_Z_Data.ocdth = 1 * 1500 * 1.00;
 800738c:	4b2e      	ldr	r3, [pc, #184]	; (8007448 <Motor_Config+0x274>)
 800738e:	4a2b      	ldr	r2, [pc, #172]	; (800743c <Motor_Config+0x268>)
 8007390:	64da      	str	r2, [r3, #76]	; 0x4c
    Motor_Z_Data.stallth = 1000 * 1.00;
 8007392:	4b2d      	ldr	r3, [pc, #180]	; (8007448 <Motor_Config+0x274>)
 8007394:	4a24      	ldr	r2, [pc, #144]	; (8007428 <Motor_Config+0x254>)
 8007396:	651a      	str	r2, [r3, #80]	; 0x50
    Motor_Z_Data.step_sel = MICROSTEP_1_16;
 8007398:	4b2b      	ldr	r3, [pc, #172]	; (8007448 <Motor_Config+0x274>)
 800739a:	2204      	movs	r2, #4
 800739c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    Motor_Z_Data.alarmen = 0xFF;
 80073a0:	4b29      	ldr	r3, [pc, #164]	; (8007448 <Motor_Config+0x274>)
 80073a2:	22ff      	movs	r2, #255	; 0xff
 80073a4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    Motor_Z_Data.config = 0x2E88;
 80073a8:	4b27      	ldr	r3, [pc, #156]	; (8007448 <Motor_Config+0x274>)
 80073aa:	f642 6288 	movw	r2, #11912	; 0x2e88
 80073ae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    Motor_M_Data.motorvoltage = 12.0;
 80073b2:	4b26      	ldr	r3, [pc, #152]	; (800744c <Motor_Config+0x278>)
 80073b4:	4a16      	ldr	r2, [pc, #88]	; (8007410 <Motor_Config+0x23c>)
 80073b6:	601a      	str	r2, [r3, #0]
    Motor_M_Data.fullstepsperrevolution = 200;
 80073b8:	4b24      	ldr	r3, [pc, #144]	; (800744c <Motor_Config+0x278>)
 80073ba:	4a16      	ldr	r2, [pc, #88]	; (8007414 <Motor_Config+0x240>)
 80073bc:	605a      	str	r2, [r3, #4]
    Motor_M_Data.phasecurrent = 1.5;
 80073be:	4b23      	ldr	r3, [pc, #140]	; (800744c <Motor_Config+0x278>)
 80073c0:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 80073c4:	609a      	str	r2, [r3, #8]
    Motor_M_Data.phasevoltage = 3.0;
 80073c6:	4b21      	ldr	r3, [pc, #132]	; (800744c <Motor_Config+0x278>)
 80073c8:	4a13      	ldr	r2, [pc, #76]	; (8007418 <Motor_Config+0x244>)
 80073ca:	60da      	str	r2, [r3, #12]
    Motor_M_Data.speed = 100.0;
 80073cc:	4b1f      	ldr	r3, [pc, #124]	; (800744c <Motor_Config+0x278>)
 80073ce:	4a13      	ldr	r2, [pc, #76]	; (800741c <Motor_Config+0x248>)
 80073d0:	611a      	str	r2, [r3, #16]
    Motor_M_Data.acc = 100.0;
 80073d2:	4b1e      	ldr	r3, [pc, #120]	; (800744c <Motor_Config+0x278>)
 80073d4:	4a11      	ldr	r2, [pc, #68]	; (800741c <Motor_Config+0x248>)
 80073d6:	615a      	str	r2, [r3, #20]
    Motor_M_Data.dec = 50.0;
 80073d8:	4b1c      	ldr	r3, [pc, #112]	; (800744c <Motor_Config+0x278>)
 80073da:	4a11      	ldr	r2, [pc, #68]	; (8007420 <Motor_Config+0x24c>)
 80073dc:	619a      	str	r2, [r3, #24]
    Motor_M_Data.maxspeed = 3000.0;
 80073de:	4b1b      	ldr	r3, [pc, #108]	; (800744c <Motor_Config+0x278>)
 80073e0:	4a10      	ldr	r2, [pc, #64]	; (8007424 <Motor_Config+0x250>)
 80073e2:	61da      	str	r2, [r3, #28]
    Motor_M_Data.minspeed = 100.0;
 80073e4:	4b19      	ldr	r3, [pc, #100]	; (800744c <Motor_Config+0x278>)
 80073e6:	4a0d      	ldr	r2, [pc, #52]	; (800741c <Motor_Config+0x248>)
 80073e8:	621a      	str	r2, [r3, #32]
    Motor_M_Data.fsspd = 602.7;
 80073ea:	4b18      	ldr	r3, [pc, #96]	; (800744c <Motor_Config+0x278>)
 80073ec:	4a15      	ldr	r2, [pc, #84]	; (8007444 <Motor_Config+0x270>)
 80073ee:	625a      	str	r2, [r3, #36]	; 0x24
    Motor_M_Data.kvalhold = 3.06;
 80073f0:	4b16      	ldr	r3, [pc, #88]	; (800744c <Motor_Config+0x278>)
 80073f2:	4a0e      	ldr	r2, [pc, #56]	; (800742c <Motor_Config+0x258>)
 80073f4:	629a      	str	r2, [r3, #40]	; 0x28
    Motor_M_Data.kvalrun = 3.06;
 80073f6:	4b15      	ldr	r3, [pc, #84]	; (800744c <Motor_Config+0x278>)
 80073f8:	4a0c      	ldr	r2, [pc, #48]	; (800742c <Motor_Config+0x258>)
 80073fa:	62da      	str	r2, [r3, #44]	; 0x2c
    Motor_M_Data.kvalacc = 3.06;
 80073fc:	4b13      	ldr	r3, [pc, #76]	; (800744c <Motor_Config+0x278>)
 80073fe:	4a0b      	ldr	r2, [pc, #44]	; (800742c <Motor_Config+0x258>)
 8007400:	631a      	str	r2, [r3, #48]	; 0x30
    Motor_M_Data.kvaldec = 3.06;
 8007402:	4b12      	ldr	r3, [pc, #72]	; (800744c <Motor_Config+0x278>)
 8007404:	4a09      	ldr	r2, [pc, #36]	; (800742c <Motor_Config+0x258>)
 8007406:	635a      	str	r2, [r3, #52]	; 0x34
 8007408:	e022      	b.n	8007450 <Motor_Config+0x27c>
 800740a:	bf00      	nop
 800740c:	20000dd4 	.word	0x20000dd4
 8007410:	41400000 	.word	0x41400000
 8007414:	43480000 	.word	0x43480000
 8007418:	40400000 	.word	0x40400000
 800741c:	42c80000 	.word	0x42c80000
 8007420:	42480000 	.word	0x42480000
 8007424:	453b8000 	.word	0x453b8000
 8007428:	447a0000 	.word	0x447a0000
 800742c:	4043d70a 	.word	0x4043d70a
 8007430:	4276147b 	.word	0x4276147b
 8007434:	39cd9a68 	.word	0x39cd9a68
 8007438:	3a289835 	.word	0x3a289835
 800743c:	44bb8000 	.word	0x44bb8000
 8007440:	20000d40 	.word	0x20000d40
 8007444:	4416accd 	.word	0x4416accd
 8007448:	20000ce8 	.word	0x20000ce8
 800744c:	20000ea4 	.word	0x20000ea4
    Motor_M_Data.intspeed = 61.52;
 8007450:	4b4f      	ldr	r3, [pc, #316]	; (8007590 <Motor_Config+0x3bc>)
 8007452:	4a50      	ldr	r2, [pc, #320]	; (8007594 <Motor_Config+0x3c0>)
 8007454:	639a      	str	r2, [r3, #56]	; 0x38
    Motor_M_Data.stslp = 392.1569e-6;
 8007456:	4b4e      	ldr	r3, [pc, #312]	; (8007590 <Motor_Config+0x3bc>)
 8007458:	4a4f      	ldr	r2, [pc, #316]	; (8007598 <Motor_Config+0x3c4>)
 800745a:	63da      	str	r2, [r3, #60]	; 0x3c
    Motor_M_Data.fnslpacc = 643.1372e-6;
 800745c:	4b4c      	ldr	r3, [pc, #304]	; (8007590 <Motor_Config+0x3bc>)
 800745e:	4a4f      	ldr	r2, [pc, #316]	; (800759c <Motor_Config+0x3c8>)
 8007460:	641a      	str	r2, [r3, #64]	; 0x40
    Motor_M_Data.fnslpdec = 643.1372e-6;
 8007462:	4b4b      	ldr	r3, [pc, #300]	; (8007590 <Motor_Config+0x3bc>)
 8007464:	4a4d      	ldr	r2, [pc, #308]	; (800759c <Motor_Config+0x3c8>)
 8007466:	645a      	str	r2, [r3, #68]	; 0x44
    Motor_M_Data.kterm = 0;
 8007468:	4b49      	ldr	r3, [pc, #292]	; (8007590 <Motor_Config+0x3bc>)
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    Motor_M_Data.ocdth = 1 * 1500 * 1.00;
 8007470:	4b47      	ldr	r3, [pc, #284]	; (8007590 <Motor_Config+0x3bc>)
 8007472:	4a4b      	ldr	r2, [pc, #300]	; (80075a0 <Motor_Config+0x3cc>)
 8007474:	64da      	str	r2, [r3, #76]	; 0x4c
    Motor_M_Data.stallth = 1000 * 1.00;
 8007476:	4b46      	ldr	r3, [pc, #280]	; (8007590 <Motor_Config+0x3bc>)
 8007478:	4a4a      	ldr	r2, [pc, #296]	; (80075a4 <Motor_Config+0x3d0>)
 800747a:	651a      	str	r2, [r3, #80]	; 0x50
    Motor_M_Data.step_sel = MICROSTEP_1_128;
 800747c:	4b44      	ldr	r3, [pc, #272]	; (8007590 <Motor_Config+0x3bc>)
 800747e:	2207      	movs	r2, #7
 8007480:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    Motor_M_Data.alarmen = 0xFF;
 8007484:	4b42      	ldr	r3, [pc, #264]	; (8007590 <Motor_Config+0x3bc>)
 8007486:	22ff      	movs	r2, #255	; 0xff
 8007488:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
    Motor_M_Data.config = 0x2E88;
 800748c:	4b40      	ldr	r3, [pc, #256]	; (8007590 <Motor_Config+0x3bc>)
 800748e:	f642 6288 	movw	r2, #11912	; 0x2e88
 8007492:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    L6470_ENABLE();
 8007496:	2201      	movs	r2, #1
 8007498:	2120      	movs	r1, #32
 800749a:	4843      	ldr	r0, [pc, #268]	; (80075a8 <Motor_Config+0x3d4>)
 800749c:	f7fa fe44 	bl	8002128 <HAL_GPIO_WritePin>

    L6470_ResetDevice(0);
 80074a0:	2000      	movs	r0, #0
 80074a2:	f7fd fdf5 	bl	8005090 <L6470_ResetDevice>
    L6470_GetStatus(0);
 80074a6:	2000      	movs	r0, #0
 80074a8:	f7fd fe9c 	bl	80051e4 <L6470_GetStatus>

    L6470_ResetDevice(1);
 80074ac:	2001      	movs	r0, #1
 80074ae:	f7fd fdef 	bl	8005090 <L6470_ResetDevice>
    L6470_GetStatus(1);
 80074b2:	2001      	movs	r0, #1
 80074b4:	f7fd fe96 	bl	80051e4 <L6470_GetStatus>

    L6470_ResetDevice(2);
 80074b8:	2002      	movs	r0, #2
 80074ba:	f7fd fde9 	bl	8005090 <L6470_ResetDevice>
    L6470_GetStatus(2);
 80074be:	2002      	movs	r0, #2
 80074c0:	f7fd fe90 	bl	80051e4 <L6470_GetStatus>

    L6470_ResetDevice(3);
 80074c4:	2003      	movs	r0, #3
 80074c6:	f7fd fde3 	bl	8005090 <L6470_ResetDevice>
    L6470_GetStatus(3);
 80074ca:	2003      	movs	r0, #3
 80074cc:	f7fd fe8a 	bl	80051e4 <L6470_GetStatus>

    Motor_X_Handler.DaisyChainPosition = 0;
 80074d0:	4b36      	ldr	r3, [pc, #216]	; (80075ac <Motor_Config+0x3d8>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	701a      	strb	r2, [r3, #0]
    Motor_X_Handler.Command = &L6470Command;
 80074d6:	4b35      	ldr	r3, [pc, #212]	; (80075ac <Motor_Config+0x3d8>)
 80074d8:	4a35      	ldr	r2, [pc, #212]	; (80075b0 <Motor_Config+0x3dc>)
 80074da:	609a      	str	r2, [r3, #8]
    L6470_Config(&Motor_X_Handler, &Motor_X_Data);
 80074dc:	4935      	ldr	r1, [pc, #212]	; (80075b4 <Motor_Config+0x3e0>)
 80074de:	4833      	ldr	r0, [pc, #204]	; (80075ac <Motor_Config+0x3d8>)
 80074e0:	f7fe f99a 	bl	8005818 <L6470_Config>

    Motor_Y_Handler.DaisyChainPosition = 1;
 80074e4:	4b34      	ldr	r3, [pc, #208]	; (80075b8 <Motor_Config+0x3e4>)
 80074e6:	2201      	movs	r2, #1
 80074e8:	701a      	strb	r2, [r3, #0]
    Motor_Y_Handler.Command = &L6470Command;
 80074ea:	4b33      	ldr	r3, [pc, #204]	; (80075b8 <Motor_Config+0x3e4>)
 80074ec:	4a30      	ldr	r2, [pc, #192]	; (80075b0 <Motor_Config+0x3dc>)
 80074ee:	609a      	str	r2, [r3, #8]
    L6470_Config(&Motor_Y_Handler, &Motor_Y_Data);
 80074f0:	4932      	ldr	r1, [pc, #200]	; (80075bc <Motor_Config+0x3e8>)
 80074f2:	4831      	ldr	r0, [pc, #196]	; (80075b8 <Motor_Config+0x3e4>)
 80074f4:	f7fe f990 	bl	8005818 <L6470_Config>

    Motor_Z_Handler.DaisyChainPosition = 2;
 80074f8:	4b31      	ldr	r3, [pc, #196]	; (80075c0 <Motor_Config+0x3ec>)
 80074fa:	2202      	movs	r2, #2
 80074fc:	701a      	strb	r2, [r3, #0]
    Motor_Z_Handler.Command = &L6470Command;
 80074fe:	4b30      	ldr	r3, [pc, #192]	; (80075c0 <Motor_Config+0x3ec>)
 8007500:	4a2b      	ldr	r2, [pc, #172]	; (80075b0 <Motor_Config+0x3dc>)
 8007502:	609a      	str	r2, [r3, #8]
    L6470_Config(&Motor_Z_Handler, &Motor_Z_Data);
 8007504:	492f      	ldr	r1, [pc, #188]	; (80075c4 <Motor_Config+0x3f0>)
 8007506:	482e      	ldr	r0, [pc, #184]	; (80075c0 <Motor_Config+0x3ec>)
 8007508:	f7fe f986 	bl	8005818 <L6470_Config>

    Motor_M_Handler.DaisyChainPosition = 3;
 800750c:	4b2e      	ldr	r3, [pc, #184]	; (80075c8 <Motor_Config+0x3f4>)
 800750e:	2203      	movs	r2, #3
 8007510:	701a      	strb	r2, [r3, #0]
    Motor_M_Handler.Command = &L6470Command;
 8007512:	4b2d      	ldr	r3, [pc, #180]	; (80075c8 <Motor_Config+0x3f4>)
 8007514:	4a26      	ldr	r2, [pc, #152]	; (80075b0 <Motor_Config+0x3dc>)
 8007516:	609a      	str	r2, [r3, #8]
    L6470_Config(&Motor_M_Handler, &Motor_M_Data);
 8007518:	491d      	ldr	r1, [pc, #116]	; (8007590 <Motor_Config+0x3bc>)
 800751a:	482b      	ldr	r0, [pc, #172]	; (80075c8 <Motor_Config+0x3f4>)
 800751c:	f7fe f97c 	bl	8005818 <L6470_Config>


    uint16_t status_register_x = L6470_GetStatus(0);
 8007520:	2000      	movs	r0, #0
 8007522:	f7fd fe5f 	bl	80051e4 <L6470_GetStatus>
 8007526:	4603      	mov	r3, r0
 8007528:	80fb      	strh	r3, [r7, #6]
    uint16_t status_register_y = L6470_GetStatus(1);
 800752a:	2001      	movs	r0, #1
 800752c:	f7fd fe5a 	bl	80051e4 <L6470_GetStatus>
 8007530:	4603      	mov	r3, r0
 8007532:	80bb      	strh	r3, [r7, #4]
    uint16_t status_register_z = L6470_GetStatus(2);
 8007534:	2002      	movs	r0, #2
 8007536:	f7fd fe55 	bl	80051e4 <L6470_GetStatus>
 800753a:	4603      	mov	r3, r0
 800753c:	807b      	strh	r3, [r7, #2]
    uint16_t status_register_m = L6470_GetStatus(3);
 800753e:	2003      	movs	r0, #3
 8007540:	f7fd fe50 	bl	80051e4 <L6470_GetStatus>
 8007544:	4603      	mov	r3, r0
 8007546:	803b      	strh	r3, [r7, #0]

    (void)status_register_m;


    if (status_register_z & STATUS_SW_F)
 8007548:	887b      	ldrh	r3, [r7, #2]
 800754a:	f003 0304 	and.w	r3, r3, #4
 800754e:	2b00      	cmp	r3, #0
 8007550:	d004      	beq.n	800755c <Motor_Config+0x388>
	{
	L6470_ReleaseSW(2, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 8007552:	2201      	movs	r2, #1
 8007554:	2100      	movs	r1, #0
 8007556:	2002      	movs	r0, #2
 8007558:	f7fd fd0e 	bl	8004f78 <L6470_ReleaseSW>
	}

    if (status_register_x & STATUS_SW_F)
 800755c:	88fb      	ldrh	r3, [r7, #6]
 800755e:	f003 0304 	and.w	r3, r3, #4
 8007562:	2b00      	cmp	r3, #0
 8007564:	d004      	beq.n	8007570 <Motor_Config+0x39c>
	{
	L6470_PrepareReleaseSW(0, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 8007566:	2201      	movs	r2, #1
 8007568:	2100      	movs	r1, #0
 800756a:	2000      	movs	r0, #0
 800756c:	f7fd ff32 	bl	80053d4 <L6470_PrepareReleaseSW>
	}

    if (status_register_y & STATUS_SW_F)
 8007570:	88bb      	ldrh	r3, [r7, #4]
 8007572:	f003 0304 	and.w	r3, r3, #4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d004      	beq.n	8007584 <Motor_Config+0x3b0>
	{
	L6470_PrepareReleaseSW(1, L6470_ACT_RST_ID, L6470_DIR_FWD_ID);
 800757a:	2201      	movs	r2, #1
 800757c:	2100      	movs	r1, #0
 800757e:	2001      	movs	r0, #1
 8007580:	f7fd ff28 	bl	80053d4 <L6470_PrepareReleaseSW>
	}

    L6470_PerformPreparedApplicationCommand();
 8007584:	f7fe f806 	bl	8005594 <L6470_PerformPreparedApplicationCommand>

    }
 8007588:	bf00      	nop
 800758a:	3708      	adds	r7, #8
 800758c:	46bd      	mov	sp, r7
 800758e:	bd80      	pop	{r7, pc}
 8007590:	20000ea4 	.word	0x20000ea4
 8007594:	4276147b 	.word	0x4276147b
 8007598:	39cd9a68 	.word	0x39cd9a68
 800759c:	3a289835 	.word	0x3a289835
 80075a0:	44bb8000 	.word	0x44bb8000
 80075a4:	447a0000 	.word	0x447a0000
 80075a8:	40020400 	.word	0x40020400
 80075ac:	20000e2c 	.word	0x20000e2c
 80075b0:	20000008 	.word	0x20000008
 80075b4:	20000dd4 	.word	0x20000dd4
 80075b8:	20000e68 	.word	0x20000e68
 80075bc:	20000d40 	.word	0x20000d40
 80075c0:	20000d98 	.word	0x20000d98
 80075c4:	20000ce8 	.word	0x20000ce8
 80075c8:	20000cac 	.word	0x20000cac

080075cc <Ring_Buffer_Init>:
static uint32_t Read_PTR;

#define WRITE_PTR (uint32_t)( BUFFER_SIZE - (huart->hdmarx->Instance->NDTR))

void Ring_Buffer_Init(UART_HandleTypeDef *_huart)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
	huart = _huart;
 80075d4:	4a0b      	ldr	r2, [pc, #44]	; (8007604 <Ring_Buffer_Init+0x38>)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6013      	str	r3, [r2, #0]
	huart->hdmarx->Instance->NDTR = BUFFER_SIZE;
 80075da:	4b0a      	ldr	r3, [pc, #40]	; (8007604 <Ring_Buffer_Init+0x38>)
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2280      	movs	r2, #128	; 0x80
 80075e4:	605a      	str	r2, [r3, #4]
	Read_PTR = 0;
 80075e6:	4b08      	ldr	r3, [pc, #32]	; (8007608 <Ring_Buffer_Init+0x3c>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(huart, RX_DMA_Buffer, BUFFER_SIZE);
 80075ec:	4b05      	ldr	r3, [pc, #20]	; (8007604 <Ring_Buffer_Init+0x38>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	2280      	movs	r2, #128	; 0x80
 80075f2:	4906      	ldr	r1, [pc, #24]	; (800760c <Ring_Buffer_Init+0x40>)
 80075f4:	4618      	mov	r0, r3
 80075f6:	f7fc faf7 	bl	8003be8 <HAL_UART_Receive_DMA>

}
 80075fa:	bf00      	nop
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}
 8007602:	bf00      	nop
 8007604:	20000b3c 	.word	0x20000b3c
 8007608:	20000b40 	.word	0x20000b40
 800760c:	20000abc 	.word	0x20000abc

08007610 <Ring_Buffer_Get_Char>:

	return (Read_PTR == WRITE_PTR)?1:0;
}

uint8_t Ring_Buffer_Get_Char(uint8_t* data)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	if (WRITE_PTR == Read_PTR)
 8007618:	4b12      	ldr	r3, [pc, #72]	; (8007664 <Ring_Buffer_Get_Char+0x54>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 8007626:	4b10      	ldr	r3, [pc, #64]	; (8007668 <Ring_Buffer_Get_Char+0x58>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d101      	bne.n	8007632 <Ring_Buffer_Get_Char+0x22>
	{
		return 0;
 800762e:	2300      	movs	r3, #0
 8007630:	e012      	b.n	8007658 <Ring_Buffer_Get_Char+0x48>
	}
	else
	{
		*data = RX_DMA_Buffer[Read_PTR];
 8007632:	4b0d      	ldr	r3, [pc, #52]	; (8007668 <Ring_Buffer_Get_Char+0x58>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	4a0d      	ldr	r2, [pc, #52]	; (800766c <Ring_Buffer_Get_Char+0x5c>)
 8007638:	5cd2      	ldrb	r2, [r2, r3]
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	701a      	strb	r2, [r3, #0]

		Read_PTR++;
 800763e:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <Ring_Buffer_Get_Char+0x58>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	3301      	adds	r3, #1
 8007644:	4a08      	ldr	r2, [pc, #32]	; (8007668 <Ring_Buffer_Get_Char+0x58>)
 8007646:	6013      	str	r3, [r2, #0]

		if (Read_PTR == BUFFER_SIZE)
 8007648:	4b07      	ldr	r3, [pc, #28]	; (8007668 <Ring_Buffer_Get_Char+0x58>)
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	2b80      	cmp	r3, #128	; 0x80
 800764e:	d102      	bne.n	8007656 <Ring_Buffer_Get_Char+0x46>
		{
			Read_PTR = 0;
 8007650:	4b05      	ldr	r3, [pc, #20]	; (8007668 <Ring_Buffer_Get_Char+0x58>)
 8007652:	2200      	movs	r2, #0
 8007654:	601a      	str	r2, [r3, #0]
		}

		return 1;
 8007656:	2301      	movs	r3, #1
	}
}
 8007658:	4618      	mov	r0, r3
 800765a:	370c      	adds	r7, #12
 800765c:	46bd      	mov	sp, r7
 800765e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007662:	4770      	bx	lr
 8007664:	20000b3c 	.word	0x20000b3c
 8007668:	20000b40 	.word	0x20000b40
 800766c:	20000abc 	.word	0x20000abc

08007670 <Ring_Buffer_Get_Count>:

uint8_t Ring_Buffer_Get_Count(void)
{
 8007670:	b480      	push	{r7}
 8007672:	af00      	add	r7, sp, #0
	if (WRITE_PTR >= Read_PTR)
 8007674:	4b16      	ldr	r3, [pc, #88]	; (80076d0 <Ring_Buffer_Get_Count+0x60>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f1c3 0280 	rsb	r2, r3, #128	; 0x80
 8007682:	4b14      	ldr	r3, [pc, #80]	; (80076d4 <Ring_Buffer_Get_Count+0x64>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	429a      	cmp	r2, r3
 8007688:	d30f      	bcc.n	80076aa <Ring_Buffer_Get_Count+0x3a>
	{
		return (WRITE_PTR - Read_PTR);
 800768a:	4b11      	ldr	r3, [pc, #68]	; (80076d0 <Ring_Buffer_Get_Count+0x60>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	685b      	ldr	r3, [r3, #4]
 8007694:	b2db      	uxtb	r3, r3
 8007696:	425b      	negs	r3, r3
 8007698:	b2da      	uxtb	r2, r3
 800769a:	4b0e      	ldr	r3, [pc, #56]	; (80076d4 <Ring_Buffer_Get_Count+0x64>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	3b80      	subs	r3, #128	; 0x80
 80076a6:	b2db      	uxtb	r3, r3
 80076a8:	e00c      	b.n	80076c4 <Ring_Buffer_Get_Count+0x54>
	}
	return (BUFFER_SIZE - (Read_PTR - WRITE_PTR));
 80076aa:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <Ring_Buffer_Get_Count+0x60>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	b2da      	uxtb	r2, r3
 80076b6:	4b07      	ldr	r3, [pc, #28]	; (80076d4 <Ring_Buffer_Get_Count+0x64>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	b2db      	uxtb	r3, r3
 80076bc:	4413      	add	r3, r2
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	425b      	negs	r3, r3
 80076c2:	b2db      	uxtb	r3, r3
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	20000b3c 	.word	0x20000b3c
 80076d4:	20000b40 	.word	0x20000b40

080076d8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80076dc:	4b17      	ldr	r3, [pc, #92]	; (800773c <MX_SPI1_Init+0x64>)
 80076de:	4a18      	ldr	r2, [pc, #96]	; (8007740 <MX_SPI1_Init+0x68>)
 80076e0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80076e2:	4b16      	ldr	r3, [pc, #88]	; (800773c <MX_SPI1_Init+0x64>)
 80076e4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80076e8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80076ea:	4b14      	ldr	r3, [pc, #80]	; (800773c <MX_SPI1_Init+0x64>)
 80076ec:	2200      	movs	r2, #0
 80076ee:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80076f0:	4b12      	ldr	r3, [pc, #72]	; (800773c <MX_SPI1_Init+0x64>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80076f6:	4b11      	ldr	r3, [pc, #68]	; (800773c <MX_SPI1_Init+0x64>)
 80076f8:	2202      	movs	r2, #2
 80076fa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80076fc:	4b0f      	ldr	r3, [pc, #60]	; (800773c <MX_SPI1_Init+0x64>)
 80076fe:	2201      	movs	r2, #1
 8007700:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007702:	4b0e      	ldr	r3, [pc, #56]	; (800773c <MX_SPI1_Init+0x64>)
 8007704:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007708:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800770a:	4b0c      	ldr	r3, [pc, #48]	; (800773c <MX_SPI1_Init+0x64>)
 800770c:	2218      	movs	r2, #24
 800770e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007710:	4b0a      	ldr	r3, [pc, #40]	; (800773c <MX_SPI1_Init+0x64>)
 8007712:	2200      	movs	r2, #0
 8007714:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007716:	4b09      	ldr	r3, [pc, #36]	; (800773c <MX_SPI1_Init+0x64>)
 8007718:	2200      	movs	r2, #0
 800771a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800771c:	4b07      	ldr	r3, [pc, #28]	; (800773c <MX_SPI1_Init+0x64>)
 800771e:	2200      	movs	r2, #0
 8007720:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8007722:	4b06      	ldr	r3, [pc, #24]	; (800773c <MX_SPI1_Init+0x64>)
 8007724:	220a      	movs	r2, #10
 8007726:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007728:	4804      	ldr	r0, [pc, #16]	; (800773c <MX_SPI1_Init+0x64>)
 800772a:	f7fb facf 	bl	8002ccc <HAL_SPI_Init>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8007734:	f7ff fd3c 	bl	80071b0 <Error_Handler>
  }

}
 8007738:	bf00      	nop
 800773a:	bd80      	pop	{r7, pc}
 800773c:	20000efc 	.word	0x20000efc
 8007740:	40013000 	.word	0x40013000

08007744 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b08a      	sub	sp, #40	; 0x28
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800774c:	f107 0314 	add.w	r3, r7, #20
 8007750:	2200      	movs	r2, #0
 8007752:	601a      	str	r2, [r3, #0]
 8007754:	605a      	str	r2, [r3, #4]
 8007756:	609a      	str	r2, [r3, #8]
 8007758:	60da      	str	r2, [r3, #12]
 800775a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a28      	ldr	r2, [pc, #160]	; (8007804 <HAL_SPI_MspInit+0xc0>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d149      	bne.n	80077fa <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8007766:	2300      	movs	r3, #0
 8007768:	613b      	str	r3, [r7, #16]
 800776a:	4a27      	ldr	r2, [pc, #156]	; (8007808 <HAL_SPI_MspInit+0xc4>)
 800776c:	4b26      	ldr	r3, [pc, #152]	; (8007808 <HAL_SPI_MspInit+0xc4>)
 800776e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007770:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007774:	6453      	str	r3, [r2, #68]	; 0x44
 8007776:	4b24      	ldr	r3, [pc, #144]	; (8007808 <HAL_SPI_MspInit+0xc4>)
 8007778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800777a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800777e:	613b      	str	r3, [r7, #16]
 8007780:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007782:	2300      	movs	r3, #0
 8007784:	60fb      	str	r3, [r7, #12]
 8007786:	4a20      	ldr	r2, [pc, #128]	; (8007808 <HAL_SPI_MspInit+0xc4>)
 8007788:	4b1f      	ldr	r3, [pc, #124]	; (8007808 <HAL_SPI_MspInit+0xc4>)
 800778a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800778c:	f043 0301 	orr.w	r3, r3, #1
 8007790:	6313      	str	r3, [r2, #48]	; 0x30
 8007792:	4b1d      	ldr	r3, [pc, #116]	; (8007808 <HAL_SPI_MspInit+0xc4>)
 8007794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	60fb      	str	r3, [r7, #12]
 800779c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800779e:	2300      	movs	r3, #0
 80077a0:	60bb      	str	r3, [r7, #8]
 80077a2:	4a19      	ldr	r2, [pc, #100]	; (8007808 <HAL_SPI_MspInit+0xc4>)
 80077a4:	4b18      	ldr	r3, [pc, #96]	; (8007808 <HAL_SPI_MspInit+0xc4>)
 80077a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077a8:	f043 0302 	orr.w	r3, r3, #2
 80077ac:	6313      	str	r3, [r2, #48]	; 0x30
 80077ae:	4b16      	ldr	r3, [pc, #88]	; (8007808 <HAL_SPI_MspInit+0xc4>)
 80077b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b2:	f003 0302 	and.w	r3, r3, #2
 80077b6:	60bb      	str	r3, [r7, #8]
 80077b8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80077ba:	23c0      	movs	r3, #192	; 0xc0
 80077bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077be:	2302      	movs	r3, #2
 80077c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077c2:	2300      	movs	r3, #0
 80077c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077c6:	2303      	movs	r3, #3
 80077c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80077ca:	2305      	movs	r3, #5
 80077cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80077ce:	f107 0314 	add.w	r3, r7, #20
 80077d2:	4619      	mov	r1, r3
 80077d4:	480d      	ldr	r0, [pc, #52]	; (800780c <HAL_SPI_MspInit+0xc8>)
 80077d6:	f7fa fa15 	bl	8001c04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80077da:	2308      	movs	r3, #8
 80077dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80077de:	2302      	movs	r3, #2
 80077e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80077e2:	2300      	movs	r3, #0
 80077e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80077e6:	2303      	movs	r3, #3
 80077e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80077ea:	2305      	movs	r3, #5
 80077ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80077ee:	f107 0314 	add.w	r3, r7, #20
 80077f2:	4619      	mov	r1, r3
 80077f4:	4806      	ldr	r0, [pc, #24]	; (8007810 <HAL_SPI_MspInit+0xcc>)
 80077f6:	f7fa fa05 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80077fa:	bf00      	nop
 80077fc:	3728      	adds	r7, #40	; 0x28
 80077fe:	46bd      	mov	sp, r7
 8007800:	bd80      	pop	{r7, pc}
 8007802:	bf00      	nop
 8007804:	40013000 	.word	0x40013000
 8007808:	40023800 	.word	0x40023800
 800780c:	40020000 	.word	0x40020000
 8007810:	40020400 	.word	0x40020400

08007814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800781a:	2300      	movs	r3, #0
 800781c:	607b      	str	r3, [r7, #4]
 800781e:	4a10      	ldr	r2, [pc, #64]	; (8007860 <HAL_MspInit+0x4c>)
 8007820:	4b0f      	ldr	r3, [pc, #60]	; (8007860 <HAL_MspInit+0x4c>)
 8007822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007828:	6453      	str	r3, [r2, #68]	; 0x44
 800782a:	4b0d      	ldr	r3, [pc, #52]	; (8007860 <HAL_MspInit+0x4c>)
 800782c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800782e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007832:	607b      	str	r3, [r7, #4]
 8007834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007836:	2300      	movs	r3, #0
 8007838:	603b      	str	r3, [r7, #0]
 800783a:	4a09      	ldr	r2, [pc, #36]	; (8007860 <HAL_MspInit+0x4c>)
 800783c:	4b08      	ldr	r3, [pc, #32]	; (8007860 <HAL_MspInit+0x4c>)
 800783e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007844:	6413      	str	r3, [r2, #64]	; 0x40
 8007846:	4b06      	ldr	r3, [pc, #24]	; (8007860 <HAL_MspInit+0x4c>)
 8007848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800784e:	603b      	str	r3, [r7, #0]
 8007850:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8007852:	2007      	movs	r0, #7
 8007854:	f7f9 fc74 	bl	8001140 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007858:	bf00      	nop
 800785a:	3708      	adds	r7, #8
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}
 8007860:	40023800 	.word	0x40023800

08007864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007864:	b480      	push	{r7}
 8007866:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007868:	bf00      	nop
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007872:	b480      	push	{r7}
 8007874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007876:	e7fe      	b.n	8007876 <HardFault_Handler+0x4>

08007878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007878:	b480      	push	{r7}
 800787a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800787c:	e7fe      	b.n	800787c <MemManage_Handler+0x4>

0800787e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800787e:	b480      	push	{r7}
 8007880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007882:	e7fe      	b.n	8007882 <BusFault_Handler+0x4>

08007884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007884:	b480      	push	{r7}
 8007886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007888:	e7fe      	b.n	8007888 <UsageFault_Handler+0x4>

0800788a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800788a:	b480      	push	{r7}
 800788c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800788e:	bf00      	nop
 8007890:	46bd      	mov	sp, r7
 8007892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007896:	4770      	bx	lr

08007898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007898:	b480      	push	{r7}
 800789a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800789c:	bf00      	nop
 800789e:	46bd      	mov	sp, r7
 80078a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a4:	4770      	bx	lr

080078a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80078a6:	b480      	push	{r7}
 80078a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80078aa:	bf00      	nop
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80078b8:	f7f9 fb54 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80078bc:	bf00      	nop
 80078be:	bd80      	pop	{r7, pc}

080078c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80078c4:	2001      	movs	r0, #1
 80078c6:	f7fa fc61 	bl	800218c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80078ca:	bf00      	nop
 80078cc:	bd80      	pop	{r7, pc}

080078ce <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80078d2:	2002      	movs	r0, #2
 80078d4:	f7fa fc5a 	bl	800218c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80078d8:	bf00      	nop
 80078da:	bd80      	pop	{r7, pc}

080078dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80078e0:	4802      	ldr	r0, [pc, #8]	; (80078ec <DMA1_Stream5_IRQHandler+0x10>)
 80078e2:	f7f9 ff27 	bl	8001734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80078e6:	bf00      	nop
 80078e8:	bd80      	pop	{r7, pc}
 80078ea:	bf00      	nop
 80078ec:	20001014 	.word	0x20001014

080078f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80078f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80078f8:	f7fa fc48 	bl	800218c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80078fc:	bf00      	nop
 80078fe:	bd80      	pop	{r7, pc}

08007900 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b084      	sub	sp, #16
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007908:	4b11      	ldr	r3, [pc, #68]	; (8007950 <_sbrk+0x50>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d102      	bne.n	8007916 <_sbrk+0x16>
		heap_end = &end;
 8007910:	4b0f      	ldr	r3, [pc, #60]	; (8007950 <_sbrk+0x50>)
 8007912:	4a10      	ldr	r2, [pc, #64]	; (8007954 <_sbrk+0x54>)
 8007914:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007916:	4b0e      	ldr	r3, [pc, #56]	; (8007950 <_sbrk+0x50>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800791c:	4b0c      	ldr	r3, [pc, #48]	; (8007950 <_sbrk+0x50>)
 800791e:	681a      	ldr	r2, [r3, #0]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4413      	add	r3, r2
 8007924:	466a      	mov	r2, sp
 8007926:	4293      	cmp	r3, r2
 8007928:	d907      	bls.n	800793a <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 800792a:	f000 facf 	bl	8007ecc <__errno>
 800792e:	4602      	mov	r2, r0
 8007930:	230c      	movs	r3, #12
 8007932:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007934:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007938:	e006      	b.n	8007948 <_sbrk+0x48>
	}

	heap_end += incr;
 800793a:	4b05      	ldr	r3, [pc, #20]	; (8007950 <_sbrk+0x50>)
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	4413      	add	r3, r2
 8007942:	4a03      	ldr	r2, [pc, #12]	; (8007950 <_sbrk+0x50>)
 8007944:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007946:	68fb      	ldr	r3, [r7, #12]
}
 8007948:	4618      	mov	r0, r3
 800794a:	3710      	adds	r7, #16
 800794c:	46bd      	mov	sp, r7
 800794e:	bd80      	pop	{r7, pc}
 8007950:	20000b44 	.word	0x20000b44
 8007954:	200010c4 	.word	0x200010c4

08007958 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007958:	b480      	push	{r7}
 800795a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800795c:	4a16      	ldr	r2, [pc, #88]	; (80079b8 <SystemInit+0x60>)
 800795e:	4b16      	ldr	r3, [pc, #88]	; (80079b8 <SystemInit+0x60>)
 8007960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800796c:	4a13      	ldr	r2, [pc, #76]	; (80079bc <SystemInit+0x64>)
 800796e:	4b13      	ldr	r3, [pc, #76]	; (80079bc <SystemInit+0x64>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f043 0301 	orr.w	r3, r3, #1
 8007976:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8007978:	4b10      	ldr	r3, [pc, #64]	; (80079bc <SystemInit+0x64>)
 800797a:	2200      	movs	r2, #0
 800797c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800797e:	4a0f      	ldr	r2, [pc, #60]	; (80079bc <SystemInit+0x64>)
 8007980:	4b0e      	ldr	r3, [pc, #56]	; (80079bc <SystemInit+0x64>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8007988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800798c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800798e:	4b0b      	ldr	r3, [pc, #44]	; (80079bc <SystemInit+0x64>)
 8007990:	4a0b      	ldr	r2, [pc, #44]	; (80079c0 <SystemInit+0x68>)
 8007992:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8007994:	4a09      	ldr	r2, [pc, #36]	; (80079bc <SystemInit+0x64>)
 8007996:	4b09      	ldr	r3, [pc, #36]	; (80079bc <SystemInit+0x64>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800799e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80079a0:	4b06      	ldr	r3, [pc, #24]	; (80079bc <SystemInit+0x64>)
 80079a2:	2200      	movs	r2, #0
 80079a4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80079a6:	4b04      	ldr	r3, [pc, #16]	; (80079b8 <SystemInit+0x60>)
 80079a8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80079ac:	609a      	str	r2, [r3, #8]
#endif
}
 80079ae:	bf00      	nop
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr
 80079b8:	e000ed00 	.word	0xe000ed00
 80079bc:	40023800 	.word	0x40023800
 80079c0:	24003010 	.word	0x24003010

080079c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08c      	sub	sp, #48	; 0x30
 80079c8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80079ca:	f107 030c 	add.w	r3, r7, #12
 80079ce:	2224      	movs	r2, #36	; 0x24
 80079d0:	2100      	movs	r1, #0
 80079d2:	4618      	mov	r0, r3
 80079d4:	f000 faa4 	bl	8007f20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80079d8:	1d3b      	adds	r3, r7, #4
 80079da:	2200      	movs	r2, #0
 80079dc:	601a      	str	r2, [r3, #0]
 80079de:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 80079e0:	4b22      	ldr	r3, [pc, #136]	; (8007a6c <MX_TIM1_Init+0xa8>)
 80079e2:	4a23      	ldr	r2, [pc, #140]	; (8007a70 <MX_TIM1_Init+0xac>)
 80079e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1;
 80079e6:	4b21      	ldr	r3, [pc, #132]	; (8007a6c <MX_TIM1_Init+0xa8>)
 80079e8:	2201      	movs	r2, #1
 80079ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079ec:	4b1f      	ldr	r3, [pc, #124]	; (8007a6c <MX_TIM1_Init+0xa8>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xFFFF;
 80079f2:	4b1e      	ldr	r3, [pc, #120]	; (8007a6c <MX_TIM1_Init+0xa8>)
 80079f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80079f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079fa:	4b1c      	ldr	r3, [pc, #112]	; (8007a6c <MX_TIM1_Init+0xa8>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <MX_TIM1_Init+0xa8>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007a06:	4b19      	ldr	r3, [pc, #100]	; (8007a6c <MX_TIM1_Init+0xa8>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8007a10:	2302      	movs	r3, #2
 8007a12:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007a14:	2301      	movs	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8007a20:	2302      	movs	r3, #2
 8007a22:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007a24:	2301      	movs	r3, #1
 8007a26:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007a30:	f107 030c 	add.w	r3, r7, #12
 8007a34:	4619      	mov	r1, r3
 8007a36:	480d      	ldr	r0, [pc, #52]	; (8007a6c <MX_TIM1_Init+0xa8>)
 8007a38:	f7fb fca2 	bl	8003380 <HAL_TIM_Encoder_Init>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8007a42:	f7ff fbb5 	bl	80071b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007a46:	2300      	movs	r3, #0
 8007a48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007a4e:	1d3b      	adds	r3, r7, #4
 8007a50:	4619      	mov	r1, r3
 8007a52:	4806      	ldr	r0, [pc, #24]	; (8007a6c <MX_TIM1_Init+0xa8>)
 8007a54:	f7fb ff74 	bl	8003940 <HAL_TIMEx_MasterConfigSynchronization>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8007a5e:	f7ff fba7 	bl	80071b0 <Error_Handler>
  }

}
 8007a62:	bf00      	nop
 8007a64:	3730      	adds	r7, #48	; 0x30
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000f94 	.word	0x20000f94
 8007a70:	40010000 	.word	0x40010000

08007a74 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08c      	sub	sp, #48	; 0x30
 8007a78:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007a7a:	f107 030c 	add.w	r3, r7, #12
 8007a7e:	2224      	movs	r2, #36	; 0x24
 8007a80:	2100      	movs	r1, #0
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fa4c 	bl	8007f20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007a88:	1d3b      	adds	r3, r7, #4
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8007a90:	4b21      	ldr	r3, [pc, #132]	; (8007b18 <MX_TIM2_Init+0xa4>)
 8007a92:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007a96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8007a98:	4b1f      	ldr	r3, [pc, #124]	; (8007b18 <MX_TIM2_Init+0xa4>)
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007a9e:	4b1e      	ldr	r3, [pc, #120]	; (8007b18 <MX_TIM2_Init+0xa4>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8007aa4:	4b1c      	ldr	r3, [pc, #112]	; (8007b18 <MX_TIM2_Init+0xa4>)
 8007aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007aaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007aac:	4b1a      	ldr	r3, [pc, #104]	; (8007b18 <MX_TIM2_Init+0xa4>)
 8007aae:	2200      	movs	r2, #0
 8007ab0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ab2:	4b19      	ldr	r3, [pc, #100]	; (8007b18 <MX_TIM2_Init+0xa4>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8007abc:	2302      	movs	r3, #2
 8007abe:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8007acc:	2302      	movs	r3, #2
 8007ace:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8007adc:	f107 030c 	add.w	r3, r7, #12
 8007ae0:	4619      	mov	r1, r3
 8007ae2:	480d      	ldr	r0, [pc, #52]	; (8007b18 <MX_TIM2_Init+0xa4>)
 8007ae4:	f7fb fc4c 	bl	8003380 <HAL_TIM_Encoder_Init>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8007aee:	f7ff fb5f 	bl	80071b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007af2:	2300      	movs	r3, #0
 8007af4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007af6:	2300      	movs	r3, #0
 8007af8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007afa:	1d3b      	adds	r3, r7, #4
 8007afc:	4619      	mov	r1, r3
 8007afe:	4806      	ldr	r0, [pc, #24]	; (8007b18 <MX_TIM2_Init+0xa4>)
 8007b00:	f7fb ff1e 	bl	8003940 <HAL_TIMEx_MasterConfigSynchronization>
 8007b04:	4603      	mov	r3, r0
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d001      	beq.n	8007b0e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8007b0a:	f7ff fb51 	bl	80071b0 <Error_Handler>
  }

}
 8007b0e:	bf00      	nop
 8007b10:	3730      	adds	r7, #48	; 0x30
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20000fd4 	.word	0x20000fd4

08007b1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b08c      	sub	sp, #48	; 0x30
 8007b20:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007b22:	f107 030c 	add.w	r3, r7, #12
 8007b26:	2224      	movs	r2, #36	; 0x24
 8007b28:	2100      	movs	r1, #0
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f000 f9f8 	bl	8007f20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007b30:	1d3b      	adds	r3, r7, #4
 8007b32:	2200      	movs	r2, #0
 8007b34:	601a      	str	r2, [r3, #0]
 8007b36:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8007b38:	4b20      	ldr	r3, [pc, #128]	; (8007bbc <MX_TIM4_Init+0xa0>)
 8007b3a:	4a21      	ldr	r2, [pc, #132]	; (8007bc0 <MX_TIM4_Init+0xa4>)
 8007b3c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8007b3e:	4b1f      	ldr	r3, [pc, #124]	; (8007bbc <MX_TIM4_Init+0xa0>)
 8007b40:	2200      	movs	r2, #0
 8007b42:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007b44:	4b1d      	ldr	r3, [pc, #116]	; (8007bbc <MX_TIM4_Init+0xa0>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0xFFFF;
 8007b4a:	4b1c      	ldr	r3, [pc, #112]	; (8007bbc <MX_TIM4_Init+0xa0>)
 8007b4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007b52:	4b1a      	ldr	r3, [pc, #104]	; (8007bbc <MX_TIM4_Init+0xa0>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007b58:	4b18      	ldr	r3, [pc, #96]	; (8007bbc <MX_TIM4_Init+0xa0>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007b5e:	2303      	movs	r3, #3
 8007b60:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8007b62:	2302      	movs	r3, #2
 8007b64:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007b66:	2301      	movs	r3, #1
 8007b68:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8007b72:	2302      	movs	r3, #2
 8007b74:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007b76:	2301      	movs	r3, #1
 8007b78:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8007b82:	f107 030c 	add.w	r3, r7, #12
 8007b86:	4619      	mov	r1, r3
 8007b88:	480c      	ldr	r0, [pc, #48]	; (8007bbc <MX_TIM4_Init+0xa0>)
 8007b8a:	f7fb fbf9 	bl	8003380 <HAL_TIM_Encoder_Init>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d001      	beq.n	8007b98 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8007b94:	f7ff fb0c 	bl	80071b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007b98:	2300      	movs	r3, #0
 8007b9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8007ba0:	1d3b      	adds	r3, r7, #4
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	4805      	ldr	r0, [pc, #20]	; (8007bbc <MX_TIM4_Init+0xa0>)
 8007ba6:	f7fb fecb 	bl	8003940 <HAL_TIMEx_MasterConfigSynchronization>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8007bb0:	f7ff fafe 	bl	80071b0 <Error_Handler>
  }

}
 8007bb4:	bf00      	nop
 8007bb6:	3730      	adds	r7, #48	; 0x30
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}
 8007bbc:	20000f54 	.word	0x20000f54
 8007bc0:	40000800 	.word	0x40000800

08007bc4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08e      	sub	sp, #56	; 0x38
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007bcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	605a      	str	r2, [r3, #4]
 8007bd6:	609a      	str	r2, [r3, #8]
 8007bd8:	60da      	str	r2, [r3, #12]
 8007bda:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	4a4b      	ldr	r2, [pc, #300]	; (8007d10 <HAL_TIM_Encoder_MspInit+0x14c>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d12d      	bne.n	8007c42 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007be6:	2300      	movs	r3, #0
 8007be8:	623b      	str	r3, [r7, #32]
 8007bea:	4a4a      	ldr	r2, [pc, #296]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007bec:	4b49      	ldr	r3, [pc, #292]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bf0:	f043 0301 	orr.w	r3, r3, #1
 8007bf4:	6453      	str	r3, [r2, #68]	; 0x44
 8007bf6:	4b47      	ldr	r3, [pc, #284]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	623b      	str	r3, [r7, #32]
 8007c00:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c02:	2300      	movs	r3, #0
 8007c04:	61fb      	str	r3, [r7, #28]
 8007c06:	4a43      	ldr	r2, [pc, #268]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007c08:	4b42      	ldr	r3, [pc, #264]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c0c:	f043 0301 	orr.w	r3, r3, #1
 8007c10:	6313      	str	r3, [r2, #48]	; 0x30
 8007c12:	4b40      	ldr	r3, [pc, #256]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	61fb      	str	r3, [r7, #28]
 8007c1c:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007c1e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c24:	2302      	movs	r3, #2
 8007c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8007c30:	2301      	movs	r3, #1
 8007c32:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4837      	ldr	r0, [pc, #220]	; (8007d18 <HAL_TIM_Encoder_MspInit+0x154>)
 8007c3c:	f7f9 ffe2 	bl	8001c04 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8007c40:	e062      	b.n	8007d08 <HAL_TIM_Encoder_MspInit+0x144>
  else if(tim_encoderHandle->Instance==TIM2)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c4a:	d12c      	bne.n	8007ca6 <HAL_TIM_Encoder_MspInit+0xe2>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	61bb      	str	r3, [r7, #24]
 8007c50:	4a30      	ldr	r2, [pc, #192]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007c52:	4b30      	ldr	r3, [pc, #192]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c56:	f043 0301 	orr.w	r3, r3, #1
 8007c5a:	6413      	str	r3, [r2, #64]	; 0x40
 8007c5c:	4b2d      	ldr	r3, [pc, #180]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c60:	f003 0301 	and.w	r3, r3, #1
 8007c64:	61bb      	str	r3, [r7, #24]
 8007c66:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c68:	2300      	movs	r3, #0
 8007c6a:	617b      	str	r3, [r7, #20]
 8007c6c:	4a29      	ldr	r2, [pc, #164]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007c6e:	4b29      	ldr	r3, [pc, #164]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	f043 0301 	orr.w	r3, r3, #1
 8007c76:	6313      	str	r3, [r2, #48]	; 0x30
 8007c78:	4b26      	ldr	r3, [pc, #152]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c7c:	f003 0301 	and.w	r3, r3, #1
 8007c80:	617b      	str	r3, [r7, #20]
 8007c82:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007c84:	2303      	movs	r3, #3
 8007c86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c88:	2302      	movs	r3, #2
 8007c8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c90:	2300      	movs	r3, #0
 8007c92:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007c94:	2301      	movs	r3, #1
 8007c96:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	481e      	ldr	r0, [pc, #120]	; (8007d18 <HAL_TIM_Encoder_MspInit+0x154>)
 8007ca0:	f7f9 ffb0 	bl	8001c04 <HAL_GPIO_Init>
}
 8007ca4:	e030      	b.n	8007d08 <HAL_TIM_Encoder_MspInit+0x144>
  else if(tim_encoderHandle->Instance==TIM4)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a1c      	ldr	r2, [pc, #112]	; (8007d1c <HAL_TIM_Encoder_MspInit+0x158>)
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d12b      	bne.n	8007d08 <HAL_TIM_Encoder_MspInit+0x144>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	613b      	str	r3, [r7, #16]
 8007cb4:	4a17      	ldr	r2, [pc, #92]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007cb6:	4b17      	ldr	r3, [pc, #92]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	f043 0304 	orr.w	r3, r3, #4
 8007cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8007cc0:	4b14      	ldr	r3, [pc, #80]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc4:	f003 0304 	and.w	r3, r3, #4
 8007cc8:	613b      	str	r3, [r7, #16]
 8007cca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ccc:	2300      	movs	r3, #0
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	4a10      	ldr	r2, [pc, #64]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007cd2:	4b10      	ldr	r3, [pc, #64]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd6:	f043 0302 	orr.w	r3, r3, #2
 8007cda:	6313      	str	r3, [r2, #48]	; 0x30
 8007cdc:	4b0d      	ldr	r3, [pc, #52]	; (8007d14 <HAL_TIM_Encoder_MspInit+0x150>)
 8007cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce0:	f003 0302 	and.w	r3, r3, #2
 8007ce4:	60fb      	str	r3, [r7, #12]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007ce8:	23c0      	movs	r3, #192	; 0xc0
 8007cea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cec:	2302      	movs	r3, #2
 8007cee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cf4:	2300      	movs	r3, #0
 8007cf6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8007cf8:	2302      	movs	r3, #2
 8007cfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007d00:	4619      	mov	r1, r3
 8007d02:	4807      	ldr	r0, [pc, #28]	; (8007d20 <HAL_TIM_Encoder_MspInit+0x15c>)
 8007d04:	f7f9 ff7e 	bl	8001c04 <HAL_GPIO_Init>
}
 8007d08:	bf00      	nop
 8007d0a:	3738      	adds	r7, #56	; 0x38
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	40010000 	.word	0x40010000
 8007d14:	40023800 	.word	0x40023800
 8007d18:	40020000 	.word	0x40020000
 8007d1c:	40000800 	.word	0x40000800
 8007d20:	40020400 	.word	0x40020400

08007d24 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8007d28:	4b11      	ldr	r3, [pc, #68]	; (8007d70 <MX_USART2_UART_Init+0x4c>)
 8007d2a:	4a12      	ldr	r2, [pc, #72]	; (8007d74 <MX_USART2_UART_Init+0x50>)
 8007d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8007d2e:	4b10      	ldr	r3, [pc, #64]	; (8007d70 <MX_USART2_UART_Init+0x4c>)
 8007d30:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8007d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8007d36:	4b0e      	ldr	r3, [pc, #56]	; (8007d70 <MX_USART2_UART_Init+0x4c>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007d3c:	4b0c      	ldr	r3, [pc, #48]	; (8007d70 <MX_USART2_UART_Init+0x4c>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007d42:	4b0b      	ldr	r3, [pc, #44]	; (8007d70 <MX_USART2_UART_Init+0x4c>)
 8007d44:	2200      	movs	r2, #0
 8007d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007d48:	4b09      	ldr	r3, [pc, #36]	; (8007d70 <MX_USART2_UART_Init+0x4c>)
 8007d4a:	220c      	movs	r2, #12
 8007d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d4e:	4b08      	ldr	r3, [pc, #32]	; (8007d70 <MX_USART2_UART_Init+0x4c>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007d54:	4b06      	ldr	r3, [pc, #24]	; (8007d70 <MX_USART2_UART_Init+0x4c>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007d5a:	4805      	ldr	r0, [pc, #20]	; (8007d70 <MX_USART2_UART_Init+0x4c>)
 8007d5c:	f7fb fe8e 	bl	8003a7c <HAL_UART_Init>
 8007d60:	4603      	mov	r3, r0
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d001      	beq.n	8007d6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8007d66:	f7ff fa23 	bl	80071b0 <Error_Handler>
  }

}
 8007d6a:	bf00      	nop
 8007d6c:	bd80      	pop	{r7, pc}
 8007d6e:	bf00      	nop
 8007d70:	20001074 	.word	0x20001074
 8007d74:	40004400 	.word	0x40004400

08007d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b08a      	sub	sp, #40	; 0x28
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d80:	f107 0314 	add.w	r3, r7, #20
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	605a      	str	r2, [r3, #4]
 8007d8a:	609a      	str	r2, [r3, #8]
 8007d8c:	60da      	str	r2, [r3, #12]
 8007d8e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a31      	ldr	r2, [pc, #196]	; (8007e5c <HAL_UART_MspInit+0xe4>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d15b      	bne.n	8007e52 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	613b      	str	r3, [r7, #16]
 8007d9e:	4a30      	ldr	r2, [pc, #192]	; (8007e60 <HAL_UART_MspInit+0xe8>)
 8007da0:	4b2f      	ldr	r3, [pc, #188]	; (8007e60 <HAL_UART_MspInit+0xe8>)
 8007da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007da8:	6413      	str	r3, [r2, #64]	; 0x40
 8007daa:	4b2d      	ldr	r3, [pc, #180]	; (8007e60 <HAL_UART_MspInit+0xe8>)
 8007dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007db2:	613b      	str	r3, [r7, #16]
 8007db4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007db6:	2300      	movs	r3, #0
 8007db8:	60fb      	str	r3, [r7, #12]
 8007dba:	4a29      	ldr	r2, [pc, #164]	; (8007e60 <HAL_UART_MspInit+0xe8>)
 8007dbc:	4b28      	ldr	r3, [pc, #160]	; (8007e60 <HAL_UART_MspInit+0xe8>)
 8007dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dc0:	f043 0301 	orr.w	r3, r3, #1
 8007dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8007dc6:	4b26      	ldr	r3, [pc, #152]	; (8007e60 <HAL_UART_MspInit+0xe8>)
 8007dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dca:	f003 0301 	and.w	r3, r3, #1
 8007dce:	60fb      	str	r3, [r7, #12]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8007dd2:	230c      	movs	r3, #12
 8007dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007dd6:	2302      	movs	r3, #2
 8007dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dda:	2300      	movs	r3, #0
 8007ddc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dde:	2300      	movs	r3, #0
 8007de0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8007de2:	2307      	movs	r3, #7
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007de6:	f107 0314 	add.w	r3, r7, #20
 8007dea:	4619      	mov	r1, r3
 8007dec:	481d      	ldr	r0, [pc, #116]	; (8007e64 <HAL_UART_MspInit+0xec>)
 8007dee:	f7f9 ff09 	bl	8001c04 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8007df2:	4b1d      	ldr	r3, [pc, #116]	; (8007e68 <HAL_UART_MspInit+0xf0>)
 8007df4:	4a1d      	ldr	r2, [pc, #116]	; (8007e6c <HAL_UART_MspInit+0xf4>)
 8007df6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8007df8:	4b1b      	ldr	r3, [pc, #108]	; (8007e68 <HAL_UART_MspInit+0xf0>)
 8007dfa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007dfe:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007e00:	4b19      	ldr	r3, [pc, #100]	; (8007e68 <HAL_UART_MspInit+0xf0>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e06:	4b18      	ldr	r3, [pc, #96]	; (8007e68 <HAL_UART_MspInit+0xf0>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007e0c:	4b16      	ldr	r3, [pc, #88]	; (8007e68 <HAL_UART_MspInit+0xf0>)
 8007e0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007e12:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007e14:	4b14      	ldr	r3, [pc, #80]	; (8007e68 <HAL_UART_MspInit+0xf0>)
 8007e16:	2200      	movs	r2, #0
 8007e18:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007e1a:	4b13      	ldr	r3, [pc, #76]	; (8007e68 <HAL_UART_MspInit+0xf0>)
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8007e20:	4b11      	ldr	r3, [pc, #68]	; (8007e68 <HAL_UART_MspInit+0xf0>)
 8007e22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e26:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8007e28:	4b0f      	ldr	r3, [pc, #60]	; (8007e68 <HAL_UART_MspInit+0xf0>)
 8007e2a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007e2e:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007e30:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <HAL_UART_MspInit+0xf0>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8007e36:	480c      	ldr	r0, [pc, #48]	; (8007e68 <HAL_UART_MspInit+0xf0>)
 8007e38:	f7f9 f9f2 	bl	8001220 <HAL_DMA_Init>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8007e42:	f7ff f9b5 	bl	80071b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a07      	ldr	r2, [pc, #28]	; (8007e68 <HAL_UART_MspInit+0xf0>)
 8007e4a:	635a      	str	r2, [r3, #52]	; 0x34
 8007e4c:	4a06      	ldr	r2, [pc, #24]	; (8007e68 <HAL_UART_MspInit+0xf0>)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8007e52:	bf00      	nop
 8007e54:	3728      	adds	r7, #40	; 0x28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	40004400 	.word	0x40004400
 8007e60:	40023800 	.word	0x40023800
 8007e64:	40020000 	.word	0x40020000
 8007e68:	20001014 	.word	0x20001014
 8007e6c:	40026088 	.word	0x40026088

08007e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8007e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007ea8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8007e74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8007e76:	e003      	b.n	8007e80 <LoopCopyDataInit>

08007e78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8007e78:	4b0c      	ldr	r3, [pc, #48]	; (8007eac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8007e7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8007e7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8007e7e:	3104      	adds	r1, #4

08007e80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8007e80:	480b      	ldr	r0, [pc, #44]	; (8007eb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8007e82:	4b0c      	ldr	r3, [pc, #48]	; (8007eb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8007e84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8007e86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8007e88:	d3f6      	bcc.n	8007e78 <CopyDataInit>
  ldr  r2, =_sbss
 8007e8a:	4a0b      	ldr	r2, [pc, #44]	; (8007eb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8007e8c:	e002      	b.n	8007e94 <LoopFillZerobss>

08007e8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8007e8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8007e90:	f842 3b04 	str.w	r3, [r2], #4

08007e94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8007e94:	4b09      	ldr	r3, [pc, #36]	; (8007ebc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8007e96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8007e98:	d3f9      	bcc.n	8007e8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8007e9a:	f7ff fd5d 	bl	8007958 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007e9e:	f000 f81b 	bl	8007ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007ea2:	f7ff f8f5 	bl	8007090 <main>
  bx  lr    
 8007ea6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8007ea8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8007eac:	0800bc90 	.word	0x0800bc90
  ldr  r0, =_sdata
 8007eb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8007eb4:	200007ac 	.word	0x200007ac
  ldr  r2, =_sbss
 8007eb8:	200007ac 	.word	0x200007ac
  ldr  r3, = _ebss
 8007ebc:	200010c4 	.word	0x200010c4

08007ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007ec0:	e7fe      	b.n	8007ec0 <ADC_IRQHandler>

08007ec2 <atoi>:
 8007ec2:	220a      	movs	r2, #10
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	f000 b913 	b.w	80080f0 <strtol>
	...

08007ecc <__errno>:
 8007ecc:	4b01      	ldr	r3, [pc, #4]	; (8007ed4 <__errno+0x8>)
 8007ece:	6818      	ldr	r0, [r3, #0]
 8007ed0:	4770      	bx	lr
 8007ed2:	bf00      	nop
 8007ed4:	20000138 	.word	0x20000138

08007ed8 <__libc_init_array>:
 8007ed8:	b570      	push	{r4, r5, r6, lr}
 8007eda:	4e0d      	ldr	r6, [pc, #52]	; (8007f10 <__libc_init_array+0x38>)
 8007edc:	4c0d      	ldr	r4, [pc, #52]	; (8007f14 <__libc_init_array+0x3c>)
 8007ede:	1ba4      	subs	r4, r4, r6
 8007ee0:	10a4      	asrs	r4, r4, #2
 8007ee2:	2500      	movs	r5, #0
 8007ee4:	42a5      	cmp	r5, r4
 8007ee6:	d109      	bne.n	8007efc <__libc_init_array+0x24>
 8007ee8:	4e0b      	ldr	r6, [pc, #44]	; (8007f18 <__libc_init_array+0x40>)
 8007eea:	4c0c      	ldr	r4, [pc, #48]	; (8007f1c <__libc_init_array+0x44>)
 8007eec:	f003 f9d4 	bl	800b298 <_init>
 8007ef0:	1ba4      	subs	r4, r4, r6
 8007ef2:	10a4      	asrs	r4, r4, #2
 8007ef4:	2500      	movs	r5, #0
 8007ef6:	42a5      	cmp	r5, r4
 8007ef8:	d105      	bne.n	8007f06 <__libc_init_array+0x2e>
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f00:	4798      	blx	r3
 8007f02:	3501      	adds	r5, #1
 8007f04:	e7ee      	b.n	8007ee4 <__libc_init_array+0xc>
 8007f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007f0a:	4798      	blx	r3
 8007f0c:	3501      	adds	r5, #1
 8007f0e:	e7f2      	b.n	8007ef6 <__libc_init_array+0x1e>
 8007f10:	0800bc88 	.word	0x0800bc88
 8007f14:	0800bc88 	.word	0x0800bc88
 8007f18:	0800bc88 	.word	0x0800bc88
 8007f1c:	0800bc8c 	.word	0x0800bc8c

08007f20 <memset>:
 8007f20:	4402      	add	r2, r0
 8007f22:	4603      	mov	r3, r0
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d100      	bne.n	8007f2a <memset+0xa>
 8007f28:	4770      	bx	lr
 8007f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f2e:	e7f9      	b.n	8007f24 <memset+0x4>

08007f30 <sprintf>:
 8007f30:	b40e      	push	{r1, r2, r3}
 8007f32:	b500      	push	{lr}
 8007f34:	b09c      	sub	sp, #112	; 0x70
 8007f36:	f44f 7102 	mov.w	r1, #520	; 0x208
 8007f3a:	ab1d      	add	r3, sp, #116	; 0x74
 8007f3c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007f40:	9002      	str	r0, [sp, #8]
 8007f42:	9006      	str	r0, [sp, #24]
 8007f44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f48:	480a      	ldr	r0, [pc, #40]	; (8007f74 <sprintf+0x44>)
 8007f4a:	9104      	str	r1, [sp, #16]
 8007f4c:	9107      	str	r1, [sp, #28]
 8007f4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f56:	f8ad 1016 	strh.w	r1, [sp, #22]
 8007f5a:	6800      	ldr	r0, [r0, #0]
 8007f5c:	9301      	str	r3, [sp, #4]
 8007f5e:	a902      	add	r1, sp, #8
 8007f60:	f000 f8de 	bl	8008120 <_svfprintf_r>
 8007f64:	9b02      	ldr	r3, [sp, #8]
 8007f66:	2200      	movs	r2, #0
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	b01c      	add	sp, #112	; 0x70
 8007f6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f70:	b003      	add	sp, #12
 8007f72:	4770      	bx	lr
 8007f74:	20000138 	.word	0x20000138

08007f78 <strncat>:
 8007f78:	b530      	push	{r4, r5, lr}
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	781c      	ldrb	r4, [r3, #0]
 8007f7e:	1c5d      	adds	r5, r3, #1
 8007f80:	b944      	cbnz	r4, 8007f94 <strncat+0x1c>
 8007f82:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8007f86:	d304      	bcc.n	8007f92 <strncat+0x1a>
 8007f88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f8c:	f803 4b01 	strb.w	r4, [r3], #1
 8007f90:	b914      	cbnz	r4, 8007f98 <strncat+0x20>
 8007f92:	bd30      	pop	{r4, r5, pc}
 8007f94:	462b      	mov	r3, r5
 8007f96:	e7f1      	b.n	8007f7c <strncat+0x4>
 8007f98:	2a00      	cmp	r2, #0
 8007f9a:	d1f2      	bne.n	8007f82 <strncat+0xa>
 8007f9c:	701a      	strb	r2, [r3, #0]
 8007f9e:	e7f0      	b.n	8007f82 <strncat+0xa>

08007fa0 <strncmp>:
 8007fa0:	b510      	push	{r4, lr}
 8007fa2:	b16a      	cbz	r2, 8007fc0 <strncmp+0x20>
 8007fa4:	3901      	subs	r1, #1
 8007fa6:	1884      	adds	r4, r0, r2
 8007fa8:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007fac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d103      	bne.n	8007fbc <strncmp+0x1c>
 8007fb4:	42a0      	cmp	r0, r4
 8007fb6:	d001      	beq.n	8007fbc <strncmp+0x1c>
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d1f5      	bne.n	8007fa8 <strncmp+0x8>
 8007fbc:	1a98      	subs	r0, r3, r2
 8007fbe:	bd10      	pop	{r4, pc}
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	bd10      	pop	{r4, pc}

08007fc4 <strncpy>:
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	b902      	cbnz	r2, 8007fcc <strncpy+0x8>
 8007fca:	bd70      	pop	{r4, r5, r6, pc}
 8007fcc:	4623      	mov	r3, r4
 8007fce:	f811 5b01 	ldrb.w	r5, [r1], #1
 8007fd2:	f803 5b01 	strb.w	r5, [r3], #1
 8007fd6:	1e56      	subs	r6, r2, #1
 8007fd8:	b91d      	cbnz	r5, 8007fe2 <strncpy+0x1e>
 8007fda:	4414      	add	r4, r2
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	d103      	bne.n	8007fe8 <strncpy+0x24>
 8007fe0:	bd70      	pop	{r4, r5, r6, pc}
 8007fe2:	461c      	mov	r4, r3
 8007fe4:	4632      	mov	r2, r6
 8007fe6:	e7ef      	b.n	8007fc8 <strncpy+0x4>
 8007fe8:	f803 5b01 	strb.w	r5, [r3], #1
 8007fec:	e7f6      	b.n	8007fdc <strncpy+0x18>

08007fee <_strtol_l.isra.0>:
 8007fee:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ff2:	4680      	mov	r8, r0
 8007ff4:	4689      	mov	r9, r1
 8007ff6:	4692      	mov	sl, r2
 8007ff8:	461f      	mov	r7, r3
 8007ffa:	468b      	mov	fp, r1
 8007ffc:	465d      	mov	r5, fp
 8007ffe:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008000:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008004:	f001 feba 	bl	8009d7c <__locale_ctype_ptr_l>
 8008008:	4420      	add	r0, r4
 800800a:	7846      	ldrb	r6, [r0, #1]
 800800c:	f016 0608 	ands.w	r6, r6, #8
 8008010:	d10b      	bne.n	800802a <_strtol_l.isra.0+0x3c>
 8008012:	2c2d      	cmp	r4, #45	; 0x2d
 8008014:	d10b      	bne.n	800802e <_strtol_l.isra.0+0x40>
 8008016:	782c      	ldrb	r4, [r5, #0]
 8008018:	2601      	movs	r6, #1
 800801a:	f10b 0502 	add.w	r5, fp, #2
 800801e:	b167      	cbz	r7, 800803a <_strtol_l.isra.0+0x4c>
 8008020:	2f10      	cmp	r7, #16
 8008022:	d114      	bne.n	800804e <_strtol_l.isra.0+0x60>
 8008024:	2c30      	cmp	r4, #48	; 0x30
 8008026:	d00a      	beq.n	800803e <_strtol_l.isra.0+0x50>
 8008028:	e011      	b.n	800804e <_strtol_l.isra.0+0x60>
 800802a:	46ab      	mov	fp, r5
 800802c:	e7e6      	b.n	8007ffc <_strtol_l.isra.0+0xe>
 800802e:	2c2b      	cmp	r4, #43	; 0x2b
 8008030:	bf04      	itt	eq
 8008032:	782c      	ldrbeq	r4, [r5, #0]
 8008034:	f10b 0502 	addeq.w	r5, fp, #2
 8008038:	e7f1      	b.n	800801e <_strtol_l.isra.0+0x30>
 800803a:	2c30      	cmp	r4, #48	; 0x30
 800803c:	d127      	bne.n	800808e <_strtol_l.isra.0+0xa0>
 800803e:	782b      	ldrb	r3, [r5, #0]
 8008040:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008044:	2b58      	cmp	r3, #88	; 0x58
 8008046:	d14b      	bne.n	80080e0 <_strtol_l.isra.0+0xf2>
 8008048:	786c      	ldrb	r4, [r5, #1]
 800804a:	2710      	movs	r7, #16
 800804c:	3502      	adds	r5, #2
 800804e:	2e00      	cmp	r6, #0
 8008050:	bf0c      	ite	eq
 8008052:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8008056:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800805a:	2200      	movs	r2, #0
 800805c:	fbb1 fef7 	udiv	lr, r1, r7
 8008060:	4610      	mov	r0, r2
 8008062:	fb07 1c1e 	mls	ip, r7, lr, r1
 8008066:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800806a:	2b09      	cmp	r3, #9
 800806c:	d811      	bhi.n	8008092 <_strtol_l.isra.0+0xa4>
 800806e:	461c      	mov	r4, r3
 8008070:	42a7      	cmp	r7, r4
 8008072:	dd1d      	ble.n	80080b0 <_strtol_l.isra.0+0xc2>
 8008074:	1c53      	adds	r3, r2, #1
 8008076:	d007      	beq.n	8008088 <_strtol_l.isra.0+0x9a>
 8008078:	4586      	cmp	lr, r0
 800807a:	d316      	bcc.n	80080aa <_strtol_l.isra.0+0xbc>
 800807c:	d101      	bne.n	8008082 <_strtol_l.isra.0+0x94>
 800807e:	45a4      	cmp	ip, r4
 8008080:	db13      	blt.n	80080aa <_strtol_l.isra.0+0xbc>
 8008082:	fb00 4007 	mla	r0, r0, r7, r4
 8008086:	2201      	movs	r2, #1
 8008088:	f815 4b01 	ldrb.w	r4, [r5], #1
 800808c:	e7eb      	b.n	8008066 <_strtol_l.isra.0+0x78>
 800808e:	270a      	movs	r7, #10
 8008090:	e7dd      	b.n	800804e <_strtol_l.isra.0+0x60>
 8008092:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8008096:	2b19      	cmp	r3, #25
 8008098:	d801      	bhi.n	800809e <_strtol_l.isra.0+0xb0>
 800809a:	3c37      	subs	r4, #55	; 0x37
 800809c:	e7e8      	b.n	8008070 <_strtol_l.isra.0+0x82>
 800809e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80080a2:	2b19      	cmp	r3, #25
 80080a4:	d804      	bhi.n	80080b0 <_strtol_l.isra.0+0xc2>
 80080a6:	3c57      	subs	r4, #87	; 0x57
 80080a8:	e7e2      	b.n	8008070 <_strtol_l.isra.0+0x82>
 80080aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080ae:	e7eb      	b.n	8008088 <_strtol_l.isra.0+0x9a>
 80080b0:	1c53      	adds	r3, r2, #1
 80080b2:	d108      	bne.n	80080c6 <_strtol_l.isra.0+0xd8>
 80080b4:	2322      	movs	r3, #34	; 0x22
 80080b6:	f8c8 3000 	str.w	r3, [r8]
 80080ba:	4608      	mov	r0, r1
 80080bc:	f1ba 0f00 	cmp.w	sl, #0
 80080c0:	d107      	bne.n	80080d2 <_strtol_l.isra.0+0xe4>
 80080c2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080c6:	b106      	cbz	r6, 80080ca <_strtol_l.isra.0+0xdc>
 80080c8:	4240      	negs	r0, r0
 80080ca:	f1ba 0f00 	cmp.w	sl, #0
 80080ce:	d00c      	beq.n	80080ea <_strtol_l.isra.0+0xfc>
 80080d0:	b122      	cbz	r2, 80080dc <_strtol_l.isra.0+0xee>
 80080d2:	3d01      	subs	r5, #1
 80080d4:	f8ca 5000 	str.w	r5, [sl]
 80080d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080dc:	464d      	mov	r5, r9
 80080de:	e7f9      	b.n	80080d4 <_strtol_l.isra.0+0xe6>
 80080e0:	2430      	movs	r4, #48	; 0x30
 80080e2:	2f00      	cmp	r7, #0
 80080e4:	d1b3      	bne.n	800804e <_strtol_l.isra.0+0x60>
 80080e6:	2708      	movs	r7, #8
 80080e8:	e7b1      	b.n	800804e <_strtol_l.isra.0+0x60>
 80080ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080080f0 <strtol>:
 80080f0:	4b08      	ldr	r3, [pc, #32]	; (8008114 <strtol+0x24>)
 80080f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080f4:	681c      	ldr	r4, [r3, #0]
 80080f6:	4d08      	ldr	r5, [pc, #32]	; (8008118 <strtol+0x28>)
 80080f8:	6a23      	ldr	r3, [r4, #32]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	bf08      	it	eq
 80080fe:	462b      	moveq	r3, r5
 8008100:	9300      	str	r3, [sp, #0]
 8008102:	4613      	mov	r3, r2
 8008104:	460a      	mov	r2, r1
 8008106:	4601      	mov	r1, r0
 8008108:	4620      	mov	r0, r4
 800810a:	f7ff ff70 	bl	8007fee <_strtol_l.isra.0>
 800810e:	b003      	add	sp, #12
 8008110:	bd30      	pop	{r4, r5, pc}
 8008112:	bf00      	nop
 8008114:	20000138 	.word	0x20000138
 8008118:	2000022c 	.word	0x2000022c
 800811c:	00000000 	.word	0x00000000

08008120 <_svfprintf_r>:
 8008120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008124:	b0bd      	sub	sp, #244	; 0xf4
 8008126:	468a      	mov	sl, r1
 8008128:	4615      	mov	r5, r2
 800812a:	461f      	mov	r7, r3
 800812c:	4683      	mov	fp, r0
 800812e:	f001 fe29 	bl	8009d84 <_localeconv_r>
 8008132:	6803      	ldr	r3, [r0, #0]
 8008134:	930d      	str	r3, [sp, #52]	; 0x34
 8008136:	4618      	mov	r0, r3
 8008138:	f7f8 f852 	bl	80001e0 <strlen>
 800813c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008140:	9008      	str	r0, [sp, #32]
 8008142:	061b      	lsls	r3, r3, #24
 8008144:	d518      	bpl.n	8008178 <_svfprintf_r+0x58>
 8008146:	f8da 3010 	ldr.w	r3, [sl, #16]
 800814a:	b9ab      	cbnz	r3, 8008178 <_svfprintf_r+0x58>
 800814c:	2140      	movs	r1, #64	; 0x40
 800814e:	4658      	mov	r0, fp
 8008150:	f001 fe2e 	bl	8009db0 <_malloc_r>
 8008154:	f8ca 0000 	str.w	r0, [sl]
 8008158:	f8ca 0010 	str.w	r0, [sl, #16]
 800815c:	b948      	cbnz	r0, 8008172 <_svfprintf_r+0x52>
 800815e:	230c      	movs	r3, #12
 8008160:	f8cb 3000 	str.w	r3, [fp]
 8008164:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008168:	9309      	str	r3, [sp, #36]	; 0x24
 800816a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800816c:	b03d      	add	sp, #244	; 0xf4
 800816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008172:	2340      	movs	r3, #64	; 0x40
 8008174:	f8ca 3014 	str.w	r3, [sl, #20]
 8008178:	ed9f 7b99 	vldr	d7, [pc, #612]	; 80083e0 <_svfprintf_r+0x2c0>
 800817c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008180:	2300      	movs	r3, #0
 8008182:	ac2c      	add	r4, sp, #176	; 0xb0
 8008184:	941f      	str	r4, [sp, #124]	; 0x7c
 8008186:	9321      	str	r3, [sp, #132]	; 0x84
 8008188:	9320      	str	r3, [sp, #128]	; 0x80
 800818a:	9505      	str	r5, [sp, #20]
 800818c:	9303      	str	r3, [sp, #12]
 800818e:	9311      	str	r3, [sp, #68]	; 0x44
 8008190:	9310      	str	r3, [sp, #64]	; 0x40
 8008192:	9309      	str	r3, [sp, #36]	; 0x24
 8008194:	9d05      	ldr	r5, [sp, #20]
 8008196:	462b      	mov	r3, r5
 8008198:	f813 2b01 	ldrb.w	r2, [r3], #1
 800819c:	b112      	cbz	r2, 80081a4 <_svfprintf_r+0x84>
 800819e:	2a25      	cmp	r2, #37	; 0x25
 80081a0:	f040 8083 	bne.w	80082aa <_svfprintf_r+0x18a>
 80081a4:	9b05      	ldr	r3, [sp, #20]
 80081a6:	1aee      	subs	r6, r5, r3
 80081a8:	d00d      	beq.n	80081c6 <_svfprintf_r+0xa6>
 80081aa:	e884 0048 	stmia.w	r4, {r3, r6}
 80081ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80081b0:	4433      	add	r3, r6
 80081b2:	9321      	str	r3, [sp, #132]	; 0x84
 80081b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80081b6:	3301      	adds	r3, #1
 80081b8:	2b07      	cmp	r3, #7
 80081ba:	9320      	str	r3, [sp, #128]	; 0x80
 80081bc:	dc77      	bgt.n	80082ae <_svfprintf_r+0x18e>
 80081be:	3408      	adds	r4, #8
 80081c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081c2:	4433      	add	r3, r6
 80081c4:	9309      	str	r3, [sp, #36]	; 0x24
 80081c6:	782b      	ldrb	r3, [r5, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	f000 8729 	beq.w	8009020 <_svfprintf_r+0xf00>
 80081ce:	2300      	movs	r3, #0
 80081d0:	1c69      	adds	r1, r5, #1
 80081d2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80081d6:	461a      	mov	r2, r3
 80081d8:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80081dc:	930a      	str	r3, [sp, #40]	; 0x28
 80081de:	461d      	mov	r5, r3
 80081e0:	200a      	movs	r0, #10
 80081e2:	1c4e      	adds	r6, r1, #1
 80081e4:	7809      	ldrb	r1, [r1, #0]
 80081e6:	9605      	str	r6, [sp, #20]
 80081e8:	9102      	str	r1, [sp, #8]
 80081ea:	9902      	ldr	r1, [sp, #8]
 80081ec:	3920      	subs	r1, #32
 80081ee:	2958      	cmp	r1, #88	; 0x58
 80081f0:	f200 8418 	bhi.w	8008a24 <_svfprintf_r+0x904>
 80081f4:	e8df f011 	tbh	[pc, r1, lsl #1]
 80081f8:	041600a6 	.word	0x041600a6
 80081fc:	00ab0416 	.word	0x00ab0416
 8008200:	04160416 	.word	0x04160416
 8008204:	04160416 	.word	0x04160416
 8008208:	04160416 	.word	0x04160416
 800820c:	006500ae 	.word	0x006500ae
 8008210:	00b70416 	.word	0x00b70416
 8008214:	041600ba 	.word	0x041600ba
 8008218:	00da00d7 	.word	0x00da00d7
 800821c:	00da00da 	.word	0x00da00da
 8008220:	00da00da 	.word	0x00da00da
 8008224:	00da00da 	.word	0x00da00da
 8008228:	00da00da 	.word	0x00da00da
 800822c:	04160416 	.word	0x04160416
 8008230:	04160416 	.word	0x04160416
 8008234:	04160416 	.word	0x04160416
 8008238:	04160416 	.word	0x04160416
 800823c:	04160416 	.word	0x04160416
 8008240:	012b0115 	.word	0x012b0115
 8008244:	012b0416 	.word	0x012b0416
 8008248:	04160416 	.word	0x04160416
 800824c:	04160416 	.word	0x04160416
 8008250:	041600ed 	.word	0x041600ed
 8008254:	03400416 	.word	0x03400416
 8008258:	04160416 	.word	0x04160416
 800825c:	04160416 	.word	0x04160416
 8008260:	03a80416 	.word	0x03a80416
 8008264:	04160416 	.word	0x04160416
 8008268:	04160086 	.word	0x04160086
 800826c:	04160416 	.word	0x04160416
 8008270:	04160416 	.word	0x04160416
 8008274:	04160416 	.word	0x04160416
 8008278:	04160416 	.word	0x04160416
 800827c:	01070416 	.word	0x01070416
 8008280:	012b006b 	.word	0x012b006b
 8008284:	012b012b 	.word	0x012b012b
 8008288:	006b00f0 	.word	0x006b00f0
 800828c:	04160416 	.word	0x04160416
 8008290:	041600fa 	.word	0x041600fa
 8008294:	03420322 	.word	0x03420322
 8008298:	01010376 	.word	0x01010376
 800829c:	03870416 	.word	0x03870416
 80082a0:	03aa0416 	.word	0x03aa0416
 80082a4:	04160416 	.word	0x04160416
 80082a8:	03c2      	.short	0x03c2
 80082aa:	461d      	mov	r5, r3
 80082ac:	e773      	b.n	8008196 <_svfprintf_r+0x76>
 80082ae:	aa1f      	add	r2, sp, #124	; 0x7c
 80082b0:	4651      	mov	r1, sl
 80082b2:	4658      	mov	r0, fp
 80082b4:	f002 fa94 	bl	800a7e0 <__ssprint_r>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	f040 8692 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 80082be:	ac2c      	add	r4, sp, #176	; 0xb0
 80082c0:	e77e      	b.n	80081c0 <_svfprintf_r+0xa0>
 80082c2:	2301      	movs	r3, #1
 80082c4:	222b      	movs	r2, #43	; 0x2b
 80082c6:	9905      	ldr	r1, [sp, #20]
 80082c8:	e78b      	b.n	80081e2 <_svfprintf_r+0xc2>
 80082ca:	460f      	mov	r7, r1
 80082cc:	e7fb      	b.n	80082c6 <_svfprintf_r+0x1a6>
 80082ce:	b10b      	cbz	r3, 80082d4 <_svfprintf_r+0x1b4>
 80082d0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80082d4:	06ae      	lsls	r6, r5, #26
 80082d6:	f140 80aa 	bpl.w	800842e <_svfprintf_r+0x30e>
 80082da:	3707      	adds	r7, #7
 80082dc:	f027 0707 	bic.w	r7, r7, #7
 80082e0:	f107 0308 	add.w	r3, r7, #8
 80082e4:	e9d7 6700 	ldrd	r6, r7, [r7]
 80082e8:	9304      	str	r3, [sp, #16]
 80082ea:	2e00      	cmp	r6, #0
 80082ec:	f177 0300 	sbcs.w	r3, r7, #0
 80082f0:	da06      	bge.n	8008300 <_svfprintf_r+0x1e0>
 80082f2:	4276      	negs	r6, r6
 80082f4:	f04f 032d 	mov.w	r3, #45	; 0x2d
 80082f8:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 80082fc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008300:	2301      	movs	r3, #1
 8008302:	e2ca      	b.n	800889a <_svfprintf_r+0x77a>
 8008304:	b10b      	cbz	r3, 800830a <_svfprintf_r+0x1ea>
 8008306:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800830a:	4b37      	ldr	r3, [pc, #220]	; (80083e8 <_svfprintf_r+0x2c8>)
 800830c:	9311      	str	r3, [sp, #68]	; 0x44
 800830e:	06ab      	lsls	r3, r5, #26
 8008310:	f140 8339 	bpl.w	8008986 <_svfprintf_r+0x866>
 8008314:	3707      	adds	r7, #7
 8008316:	f027 0707 	bic.w	r7, r7, #7
 800831a:	f107 0308 	add.w	r3, r7, #8
 800831e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008322:	9304      	str	r3, [sp, #16]
 8008324:	07e8      	lsls	r0, r5, #31
 8008326:	d50b      	bpl.n	8008340 <_svfprintf_r+0x220>
 8008328:	ea56 0307 	orrs.w	r3, r6, r7
 800832c:	d008      	beq.n	8008340 <_svfprintf_r+0x220>
 800832e:	2330      	movs	r3, #48	; 0x30
 8008330:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8008334:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008338:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 800833c:	f045 0502 	orr.w	r5, r5, #2
 8008340:	2302      	movs	r3, #2
 8008342:	e2a7      	b.n	8008894 <_svfprintf_r+0x774>
 8008344:	2a00      	cmp	r2, #0
 8008346:	d1be      	bne.n	80082c6 <_svfprintf_r+0x1a6>
 8008348:	2301      	movs	r3, #1
 800834a:	2220      	movs	r2, #32
 800834c:	e7bb      	b.n	80082c6 <_svfprintf_r+0x1a6>
 800834e:	f045 0501 	orr.w	r5, r5, #1
 8008352:	e7b8      	b.n	80082c6 <_svfprintf_r+0x1a6>
 8008354:	683e      	ldr	r6, [r7, #0]
 8008356:	960a      	str	r6, [sp, #40]	; 0x28
 8008358:	2e00      	cmp	r6, #0
 800835a:	f107 0104 	add.w	r1, r7, #4
 800835e:	dab4      	bge.n	80082ca <_svfprintf_r+0x1aa>
 8008360:	4276      	negs	r6, r6
 8008362:	960a      	str	r6, [sp, #40]	; 0x28
 8008364:	460f      	mov	r7, r1
 8008366:	f045 0504 	orr.w	r5, r5, #4
 800836a:	e7ac      	b.n	80082c6 <_svfprintf_r+0x1a6>
 800836c:	9905      	ldr	r1, [sp, #20]
 800836e:	1c4e      	adds	r6, r1, #1
 8008370:	7809      	ldrb	r1, [r1, #0]
 8008372:	9102      	str	r1, [sp, #8]
 8008374:	292a      	cmp	r1, #42	; 0x2a
 8008376:	d010      	beq.n	800839a <_svfprintf_r+0x27a>
 8008378:	f04f 0900 	mov.w	r9, #0
 800837c:	9605      	str	r6, [sp, #20]
 800837e:	9902      	ldr	r1, [sp, #8]
 8008380:	3930      	subs	r1, #48	; 0x30
 8008382:	2909      	cmp	r1, #9
 8008384:	f63f af31 	bhi.w	80081ea <_svfprintf_r+0xca>
 8008388:	fb00 1909 	mla	r9, r0, r9, r1
 800838c:	9905      	ldr	r1, [sp, #20]
 800838e:	460e      	mov	r6, r1
 8008390:	f816 1b01 	ldrb.w	r1, [r6], #1
 8008394:	9102      	str	r1, [sp, #8]
 8008396:	9605      	str	r6, [sp, #20]
 8008398:	e7f1      	b.n	800837e <_svfprintf_r+0x25e>
 800839a:	6839      	ldr	r1, [r7, #0]
 800839c:	9605      	str	r6, [sp, #20]
 800839e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 80083a2:	3704      	adds	r7, #4
 80083a4:	e78f      	b.n	80082c6 <_svfprintf_r+0x1a6>
 80083a6:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80083aa:	e78c      	b.n	80082c6 <_svfprintf_r+0x1a6>
 80083ac:	2100      	movs	r1, #0
 80083ae:	910a      	str	r1, [sp, #40]	; 0x28
 80083b0:	9902      	ldr	r1, [sp, #8]
 80083b2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80083b4:	3930      	subs	r1, #48	; 0x30
 80083b6:	fb00 1106 	mla	r1, r0, r6, r1
 80083ba:	910a      	str	r1, [sp, #40]	; 0x28
 80083bc:	9905      	ldr	r1, [sp, #20]
 80083be:	460e      	mov	r6, r1
 80083c0:	f816 1b01 	ldrb.w	r1, [r6], #1
 80083c4:	9102      	str	r1, [sp, #8]
 80083c6:	9902      	ldr	r1, [sp, #8]
 80083c8:	9605      	str	r6, [sp, #20]
 80083ca:	3930      	subs	r1, #48	; 0x30
 80083cc:	2909      	cmp	r1, #9
 80083ce:	d9ef      	bls.n	80083b0 <_svfprintf_r+0x290>
 80083d0:	e70b      	b.n	80081ea <_svfprintf_r+0xca>
 80083d2:	f045 0508 	orr.w	r5, r5, #8
 80083d6:	e776      	b.n	80082c6 <_svfprintf_r+0x1a6>
 80083d8:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 80083dc:	e773      	b.n	80082c6 <_svfprintf_r+0x1a6>
 80083de:	bf00      	nop
	...
 80083e8:	0800b9e8 	.word	0x0800b9e8
 80083ec:	9905      	ldr	r1, [sp, #20]
 80083ee:	7809      	ldrb	r1, [r1, #0]
 80083f0:	296c      	cmp	r1, #108	; 0x6c
 80083f2:	d105      	bne.n	8008400 <_svfprintf_r+0x2e0>
 80083f4:	9905      	ldr	r1, [sp, #20]
 80083f6:	3101      	adds	r1, #1
 80083f8:	9105      	str	r1, [sp, #20]
 80083fa:	f045 0520 	orr.w	r5, r5, #32
 80083fe:	e762      	b.n	80082c6 <_svfprintf_r+0x1a6>
 8008400:	f045 0510 	orr.w	r5, r5, #16
 8008404:	e75f      	b.n	80082c6 <_svfprintf_r+0x1a6>
 8008406:	1d3b      	adds	r3, r7, #4
 8008408:	9304      	str	r3, [sp, #16]
 800840a:	2600      	movs	r6, #0
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8008412:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008416:	f04f 0901 	mov.w	r9, #1
 800841a:	4637      	mov	r7, r6
 800841c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8008420:	e11b      	b.n	800865a <_svfprintf_r+0x53a>
 8008422:	b10b      	cbz	r3, 8008428 <_svfprintf_r+0x308>
 8008424:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008428:	f045 0510 	orr.w	r5, r5, #16
 800842c:	e752      	b.n	80082d4 <_svfprintf_r+0x1b4>
 800842e:	f015 0f10 	tst.w	r5, #16
 8008432:	f107 0304 	add.w	r3, r7, #4
 8008436:	d003      	beq.n	8008440 <_svfprintf_r+0x320>
 8008438:	683e      	ldr	r6, [r7, #0]
 800843a:	9304      	str	r3, [sp, #16]
 800843c:	17f7      	asrs	r7, r6, #31
 800843e:	e754      	b.n	80082ea <_svfprintf_r+0x1ca>
 8008440:	683e      	ldr	r6, [r7, #0]
 8008442:	9304      	str	r3, [sp, #16]
 8008444:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008448:	bf18      	it	ne
 800844a:	b236      	sxthne	r6, r6
 800844c:	e7f6      	b.n	800843c <_svfprintf_r+0x31c>
 800844e:	b10b      	cbz	r3, 8008454 <_svfprintf_r+0x334>
 8008450:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008454:	3707      	adds	r7, #7
 8008456:	f027 0707 	bic.w	r7, r7, #7
 800845a:	f107 0308 	add.w	r3, r7, #8
 800845e:	9304      	str	r3, [sp, #16]
 8008460:	ed97 7b00 	vldr	d7, [r7]
 8008464:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008468:	9b06      	ldr	r3, [sp, #24]
 800846a:	9312      	str	r3, [sp, #72]	; 0x48
 800846c:	9b07      	ldr	r3, [sp, #28]
 800846e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008472:	9313      	str	r3, [sp, #76]	; 0x4c
 8008474:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008478:	4b4a      	ldr	r3, [pc, #296]	; (80085a4 <_svfprintf_r+0x484>)
 800847a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800847e:	f7f8 fb59 	bl	8000b34 <__aeabi_dcmpun>
 8008482:	2800      	cmp	r0, #0
 8008484:	f040 85d5 	bne.w	8009032 <_svfprintf_r+0xf12>
 8008488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800848c:	4b45      	ldr	r3, [pc, #276]	; (80085a4 <_svfprintf_r+0x484>)
 800848e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8008492:	f7f8 fb31 	bl	8000af8 <__aeabi_dcmple>
 8008496:	2800      	cmp	r0, #0
 8008498:	f040 85cb 	bne.w	8009032 <_svfprintf_r+0xf12>
 800849c:	2200      	movs	r2, #0
 800849e:	2300      	movs	r3, #0
 80084a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084a4:	f7f8 fb1e 	bl	8000ae4 <__aeabi_dcmplt>
 80084a8:	b110      	cbz	r0, 80084b0 <_svfprintf_r+0x390>
 80084aa:	232d      	movs	r3, #45	; 0x2d
 80084ac:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80084b0:	4b3d      	ldr	r3, [pc, #244]	; (80085a8 <_svfprintf_r+0x488>)
 80084b2:	4a3e      	ldr	r2, [pc, #248]	; (80085ac <_svfprintf_r+0x48c>)
 80084b4:	9902      	ldr	r1, [sp, #8]
 80084b6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80084ba:	2947      	cmp	r1, #71	; 0x47
 80084bc:	bfcc      	ite	gt
 80084be:	4690      	movgt	r8, r2
 80084c0:	4698      	movle	r8, r3
 80084c2:	f04f 0903 	mov.w	r9, #3
 80084c6:	2600      	movs	r6, #0
 80084c8:	4637      	mov	r7, r6
 80084ca:	e0c6      	b.n	800865a <_svfprintf_r+0x53a>
 80084cc:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80084d0:	d022      	beq.n	8008518 <_svfprintf_r+0x3f8>
 80084d2:	9b02      	ldr	r3, [sp, #8]
 80084d4:	f023 0320 	bic.w	r3, r3, #32
 80084d8:	2b47      	cmp	r3, #71	; 0x47
 80084da:	d104      	bne.n	80084e6 <_svfprintf_r+0x3c6>
 80084dc:	f1b9 0f00 	cmp.w	r9, #0
 80084e0:	bf08      	it	eq
 80084e2:	f04f 0901 	moveq.w	r9, #1
 80084e6:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80084ea:	930c      	str	r3, [sp, #48]	; 0x30
 80084ec:	9b07      	ldr	r3, [sp, #28]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	da15      	bge.n	800851e <_svfprintf_r+0x3fe>
 80084f2:	9b06      	ldr	r3, [sp, #24]
 80084f4:	930e      	str	r3, [sp, #56]	; 0x38
 80084f6:	9b07      	ldr	r3, [sp, #28]
 80084f8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80084fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80084fe:	232d      	movs	r3, #45	; 0x2d
 8008500:	930b      	str	r3, [sp, #44]	; 0x2c
 8008502:	9b02      	ldr	r3, [sp, #8]
 8008504:	f023 0720 	bic.w	r7, r3, #32
 8008508:	2f46      	cmp	r7, #70	; 0x46
 800850a:	d00e      	beq.n	800852a <_svfprintf_r+0x40a>
 800850c:	2f45      	cmp	r7, #69	; 0x45
 800850e:	d146      	bne.n	800859e <_svfprintf_r+0x47e>
 8008510:	f109 0601 	add.w	r6, r9, #1
 8008514:	2102      	movs	r1, #2
 8008516:	e00a      	b.n	800852e <_svfprintf_r+0x40e>
 8008518:	f04f 0906 	mov.w	r9, #6
 800851c:	e7e3      	b.n	80084e6 <_svfprintf_r+0x3c6>
 800851e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008522:	2300      	movs	r3, #0
 8008524:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8008528:	e7ea      	b.n	8008500 <_svfprintf_r+0x3e0>
 800852a:	464e      	mov	r6, r9
 800852c:	2103      	movs	r1, #3
 800852e:	ab1d      	add	r3, sp, #116	; 0x74
 8008530:	9301      	str	r3, [sp, #4]
 8008532:	ab1a      	add	r3, sp, #104	; 0x68
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	4632      	mov	r2, r6
 8008538:	ab19      	add	r3, sp, #100	; 0x64
 800853a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800853e:	4658      	mov	r0, fp
 8008540:	f000 fe4e 	bl	80091e0 <_dtoa_r>
 8008544:	2f47      	cmp	r7, #71	; 0x47
 8008546:	4680      	mov	r8, r0
 8008548:	d102      	bne.n	8008550 <_svfprintf_r+0x430>
 800854a:	07e8      	lsls	r0, r5, #31
 800854c:	f140 857e 	bpl.w	800904c <_svfprintf_r+0xf2c>
 8008550:	eb08 0306 	add.w	r3, r8, r6
 8008554:	2f46      	cmp	r7, #70	; 0x46
 8008556:	9303      	str	r3, [sp, #12]
 8008558:	d111      	bne.n	800857e <_svfprintf_r+0x45e>
 800855a:	f898 3000 	ldrb.w	r3, [r8]
 800855e:	2b30      	cmp	r3, #48	; 0x30
 8008560:	d109      	bne.n	8008576 <_svfprintf_r+0x456>
 8008562:	2200      	movs	r2, #0
 8008564:	2300      	movs	r3, #0
 8008566:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800856a:	f7f8 fab1 	bl	8000ad0 <__aeabi_dcmpeq>
 800856e:	b910      	cbnz	r0, 8008576 <_svfprintf_r+0x456>
 8008570:	f1c6 0601 	rsb	r6, r6, #1
 8008574:	9619      	str	r6, [sp, #100]	; 0x64
 8008576:	9a03      	ldr	r2, [sp, #12]
 8008578:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800857a:	441a      	add	r2, r3
 800857c:	9203      	str	r2, [sp, #12]
 800857e:	2200      	movs	r2, #0
 8008580:	2300      	movs	r3, #0
 8008582:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8008586:	f7f8 faa3 	bl	8000ad0 <__aeabi_dcmpeq>
 800858a:	b988      	cbnz	r0, 80085b0 <_svfprintf_r+0x490>
 800858c:	2230      	movs	r2, #48	; 0x30
 800858e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008590:	9903      	ldr	r1, [sp, #12]
 8008592:	4299      	cmp	r1, r3
 8008594:	d90e      	bls.n	80085b4 <_svfprintf_r+0x494>
 8008596:	1c59      	adds	r1, r3, #1
 8008598:	911d      	str	r1, [sp, #116]	; 0x74
 800859a:	701a      	strb	r2, [r3, #0]
 800859c:	e7f7      	b.n	800858e <_svfprintf_r+0x46e>
 800859e:	464e      	mov	r6, r9
 80085a0:	e7b8      	b.n	8008514 <_svfprintf_r+0x3f4>
 80085a2:	bf00      	nop
 80085a4:	7fefffff 	.word	0x7fefffff
 80085a8:	0800b9d8 	.word	0x0800b9d8
 80085ac:	0800b9dc 	.word	0x0800b9dc
 80085b0:	9b03      	ldr	r3, [sp, #12]
 80085b2:	931d      	str	r3, [sp, #116]	; 0x74
 80085b4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80085b6:	2f47      	cmp	r7, #71	; 0x47
 80085b8:	eba3 0308 	sub.w	r3, r3, r8
 80085bc:	9303      	str	r3, [sp, #12]
 80085be:	f040 80fa 	bne.w	80087b6 <_svfprintf_r+0x696>
 80085c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085c4:	1cd9      	adds	r1, r3, #3
 80085c6:	db02      	blt.n	80085ce <_svfprintf_r+0x4ae>
 80085c8:	4599      	cmp	r9, r3
 80085ca:	f280 8120 	bge.w	800880e <_svfprintf_r+0x6ee>
 80085ce:	9b02      	ldr	r3, [sp, #8]
 80085d0:	3b02      	subs	r3, #2
 80085d2:	9302      	str	r3, [sp, #8]
 80085d4:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80085d6:	f89d 1008 	ldrb.w	r1, [sp, #8]
 80085da:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 80085de:	1e53      	subs	r3, r2, #1
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	9319      	str	r3, [sp, #100]	; 0x64
 80085e4:	bfb6      	itet	lt
 80085e6:	f1c2 0301 	rsblt	r3, r2, #1
 80085ea:	222b      	movge	r2, #43	; 0x2b
 80085ec:	222d      	movlt	r2, #45	; 0x2d
 80085ee:	2b09      	cmp	r3, #9
 80085f0:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80085f4:	f340 80fb 	ble.w	80087ee <_svfprintf_r+0x6ce>
 80085f8:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80085fc:	260a      	movs	r6, #10
 80085fe:	fb93 f0f6 	sdiv	r0, r3, r6
 8008602:	fb06 3310 	mls	r3, r6, r0, r3
 8008606:	3330      	adds	r3, #48	; 0x30
 8008608:	2809      	cmp	r0, #9
 800860a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800860e:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8008612:	4603      	mov	r3, r0
 8008614:	f300 80e4 	bgt.w	80087e0 <_svfprintf_r+0x6c0>
 8008618:	3330      	adds	r3, #48	; 0x30
 800861a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800861e:	3a02      	subs	r2, #2
 8008620:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8008624:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8008628:	4282      	cmp	r2, r0
 800862a:	4619      	mov	r1, r3
 800862c:	f0c0 80da 	bcc.w	80087e4 <_svfprintf_r+0x6c4>
 8008630:	9a03      	ldr	r2, [sp, #12]
 8008632:	ab1b      	add	r3, sp, #108	; 0x6c
 8008634:	1acb      	subs	r3, r1, r3
 8008636:	2a01      	cmp	r2, #1
 8008638:	9310      	str	r3, [sp, #64]	; 0x40
 800863a:	eb03 0902 	add.w	r9, r3, r2
 800863e:	dc02      	bgt.n	8008646 <_svfprintf_r+0x526>
 8008640:	f015 0701 	ands.w	r7, r5, #1
 8008644:	d002      	beq.n	800864c <_svfprintf_r+0x52c>
 8008646:	9b08      	ldr	r3, [sp, #32]
 8008648:	2700      	movs	r7, #0
 800864a:	4499      	add	r9, r3
 800864c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800864e:	b113      	cbz	r3, 8008656 <_svfprintf_r+0x536>
 8008650:	232d      	movs	r3, #45	; 0x2d
 8008652:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8008656:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008658:	2600      	movs	r6, #0
 800865a:	454e      	cmp	r6, r9
 800865c:	4633      	mov	r3, r6
 800865e:	bfb8      	it	lt
 8008660:	464b      	movlt	r3, r9
 8008662:	930b      	str	r3, [sp, #44]	; 0x2c
 8008664:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8008668:	b113      	cbz	r3, 8008670 <_svfprintf_r+0x550>
 800866a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800866c:	3301      	adds	r3, #1
 800866e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008670:	f015 0302 	ands.w	r3, r5, #2
 8008674:	9314      	str	r3, [sp, #80]	; 0x50
 8008676:	bf1e      	ittt	ne
 8008678:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 800867a:	3302      	addne	r3, #2
 800867c:	930b      	strne	r3, [sp, #44]	; 0x2c
 800867e:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8008682:	9315      	str	r3, [sp, #84]	; 0x54
 8008684:	d118      	bne.n	80086b8 <_svfprintf_r+0x598>
 8008686:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008688:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800868a:	1a9b      	subs	r3, r3, r2
 800868c:	2b00      	cmp	r3, #0
 800868e:	930c      	str	r3, [sp, #48]	; 0x30
 8008690:	dd12      	ble.n	80086b8 <_svfprintf_r+0x598>
 8008692:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008694:	2b10      	cmp	r3, #16
 8008696:	4ba9      	ldr	r3, [pc, #676]	; (800893c <_svfprintf_r+0x81c>)
 8008698:	6023      	str	r3, [r4, #0]
 800869a:	f300 81d5 	bgt.w	8008a48 <_svfprintf_r+0x928>
 800869e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086a0:	6063      	str	r3, [r4, #4]
 80086a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086a6:	4413      	add	r3, r2
 80086a8:	9321      	str	r3, [sp, #132]	; 0x84
 80086aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80086ac:	3301      	adds	r3, #1
 80086ae:	2b07      	cmp	r3, #7
 80086b0:	9320      	str	r3, [sp, #128]	; 0x80
 80086b2:	f300 81e2 	bgt.w	8008a7a <_svfprintf_r+0x95a>
 80086b6:	3408      	adds	r4, #8
 80086b8:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80086bc:	b173      	cbz	r3, 80086dc <_svfprintf_r+0x5bc>
 80086be:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 80086c2:	6023      	str	r3, [r4, #0]
 80086c4:	2301      	movs	r3, #1
 80086c6:	6063      	str	r3, [r4, #4]
 80086c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086ca:	3301      	adds	r3, #1
 80086cc:	9321      	str	r3, [sp, #132]	; 0x84
 80086ce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80086d0:	3301      	adds	r3, #1
 80086d2:	2b07      	cmp	r3, #7
 80086d4:	9320      	str	r3, [sp, #128]	; 0x80
 80086d6:	f300 81da 	bgt.w	8008a8e <_svfprintf_r+0x96e>
 80086da:	3408      	adds	r4, #8
 80086dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80086de:	b16b      	cbz	r3, 80086fc <_svfprintf_r+0x5dc>
 80086e0:	ab18      	add	r3, sp, #96	; 0x60
 80086e2:	6023      	str	r3, [r4, #0]
 80086e4:	2302      	movs	r3, #2
 80086e6:	6063      	str	r3, [r4, #4]
 80086e8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086ea:	3302      	adds	r3, #2
 80086ec:	9321      	str	r3, [sp, #132]	; 0x84
 80086ee:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80086f0:	3301      	adds	r3, #1
 80086f2:	2b07      	cmp	r3, #7
 80086f4:	9320      	str	r3, [sp, #128]	; 0x80
 80086f6:	f300 81d4 	bgt.w	8008aa2 <_svfprintf_r+0x982>
 80086fa:	3408      	adds	r4, #8
 80086fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80086fe:	2b80      	cmp	r3, #128	; 0x80
 8008700:	d114      	bne.n	800872c <_svfprintf_r+0x60c>
 8008702:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008706:	1a9b      	subs	r3, r3, r2
 8008708:	2b00      	cmp	r3, #0
 800870a:	dd0f      	ble.n	800872c <_svfprintf_r+0x60c>
 800870c:	4a8c      	ldr	r2, [pc, #560]	; (8008940 <_svfprintf_r+0x820>)
 800870e:	6022      	str	r2, [r4, #0]
 8008710:	2b10      	cmp	r3, #16
 8008712:	f300 81d0 	bgt.w	8008ab6 <_svfprintf_r+0x996>
 8008716:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008718:	6063      	str	r3, [r4, #4]
 800871a:	4413      	add	r3, r2
 800871c:	9321      	str	r3, [sp, #132]	; 0x84
 800871e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008720:	3301      	adds	r3, #1
 8008722:	2b07      	cmp	r3, #7
 8008724:	9320      	str	r3, [sp, #128]	; 0x80
 8008726:	f300 81df 	bgt.w	8008ae8 <_svfprintf_r+0x9c8>
 800872a:	3408      	adds	r4, #8
 800872c:	eba6 0609 	sub.w	r6, r6, r9
 8008730:	2e00      	cmp	r6, #0
 8008732:	dd0f      	ble.n	8008754 <_svfprintf_r+0x634>
 8008734:	4b82      	ldr	r3, [pc, #520]	; (8008940 <_svfprintf_r+0x820>)
 8008736:	6023      	str	r3, [r4, #0]
 8008738:	2e10      	cmp	r6, #16
 800873a:	f300 81df 	bgt.w	8008afc <_svfprintf_r+0x9dc>
 800873e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008740:	9821      	ldr	r0, [sp, #132]	; 0x84
 8008742:	6066      	str	r6, [r4, #4]
 8008744:	3301      	adds	r3, #1
 8008746:	4406      	add	r6, r0
 8008748:	2b07      	cmp	r3, #7
 800874a:	9621      	str	r6, [sp, #132]	; 0x84
 800874c:	9320      	str	r3, [sp, #128]	; 0x80
 800874e:	f300 81ec 	bgt.w	8008b2a <_svfprintf_r+0xa0a>
 8008752:	3408      	adds	r4, #8
 8008754:	05eb      	lsls	r3, r5, #23
 8008756:	f100 81f2 	bmi.w	8008b3e <_svfprintf_r+0xa1e>
 800875a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800875c:	e884 0300 	stmia.w	r4, {r8, r9}
 8008760:	444b      	add	r3, r9
 8008762:	9321      	str	r3, [sp, #132]	; 0x84
 8008764:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008766:	3301      	adds	r3, #1
 8008768:	2b07      	cmp	r3, #7
 800876a:	9320      	str	r3, [sp, #128]	; 0x80
 800876c:	f340 8419 	ble.w	8008fa2 <_svfprintf_r+0xe82>
 8008770:	aa1f      	add	r2, sp, #124	; 0x7c
 8008772:	4651      	mov	r1, sl
 8008774:	4658      	mov	r0, fp
 8008776:	f002 f833 	bl	800a7e0 <__ssprint_r>
 800877a:	2800      	cmp	r0, #0
 800877c:	f040 8431 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008780:	ac2c      	add	r4, sp, #176	; 0xb0
 8008782:	076b      	lsls	r3, r5, #29
 8008784:	f100 8410 	bmi.w	8008fa8 <_svfprintf_r+0xe88>
 8008788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800878a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800878c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800878e:	428a      	cmp	r2, r1
 8008790:	bfac      	ite	ge
 8008792:	189b      	addge	r3, r3, r2
 8008794:	185b      	addlt	r3, r3, r1
 8008796:	9309      	str	r3, [sp, #36]	; 0x24
 8008798:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800879a:	b13b      	cbz	r3, 80087ac <_svfprintf_r+0x68c>
 800879c:	aa1f      	add	r2, sp, #124	; 0x7c
 800879e:	4651      	mov	r1, sl
 80087a0:	4658      	mov	r0, fp
 80087a2:	f002 f81d 	bl	800a7e0 <__ssprint_r>
 80087a6:	2800      	cmp	r0, #0
 80087a8:	f040 841b 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 80087ac:	2300      	movs	r3, #0
 80087ae:	9320      	str	r3, [sp, #128]	; 0x80
 80087b0:	9f04      	ldr	r7, [sp, #16]
 80087b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80087b4:	e4ee      	b.n	8008194 <_svfprintf_r+0x74>
 80087b6:	9b02      	ldr	r3, [sp, #8]
 80087b8:	2b65      	cmp	r3, #101	; 0x65
 80087ba:	f77f af0b 	ble.w	80085d4 <_svfprintf_r+0x4b4>
 80087be:	9b02      	ldr	r3, [sp, #8]
 80087c0:	2b66      	cmp	r3, #102	; 0x66
 80087c2:	d124      	bne.n	800880e <_svfprintf_r+0x6ee>
 80087c4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	dd19      	ble.n	80087fe <_svfprintf_r+0x6de>
 80087ca:	f1b9 0f00 	cmp.w	r9, #0
 80087ce:	d101      	bne.n	80087d4 <_svfprintf_r+0x6b4>
 80087d0:	07ea      	lsls	r2, r5, #31
 80087d2:	d502      	bpl.n	80087da <_svfprintf_r+0x6ba>
 80087d4:	9a08      	ldr	r2, [sp, #32]
 80087d6:	4413      	add	r3, r2
 80087d8:	444b      	add	r3, r9
 80087da:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80087dc:	4699      	mov	r9, r3
 80087de:	e735      	b.n	800864c <_svfprintf_r+0x52c>
 80087e0:	460a      	mov	r2, r1
 80087e2:	e70c      	b.n	80085fe <_svfprintf_r+0x4de>
 80087e4:	f812 1b01 	ldrb.w	r1, [r2], #1
 80087e8:	f803 1b01 	strb.w	r1, [r3], #1
 80087ec:	e71c      	b.n	8008628 <_svfprintf_r+0x508>
 80087ee:	2230      	movs	r2, #48	; 0x30
 80087f0:	4413      	add	r3, r2
 80087f2:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 80087f6:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 80087fa:	a91c      	add	r1, sp, #112	; 0x70
 80087fc:	e718      	b.n	8008630 <_svfprintf_r+0x510>
 80087fe:	f1b9 0f00 	cmp.w	r9, #0
 8008802:	d101      	bne.n	8008808 <_svfprintf_r+0x6e8>
 8008804:	07eb      	lsls	r3, r5, #31
 8008806:	d515      	bpl.n	8008834 <_svfprintf_r+0x714>
 8008808:	9b08      	ldr	r3, [sp, #32]
 800880a:	3301      	adds	r3, #1
 800880c:	e7e4      	b.n	80087d8 <_svfprintf_r+0x6b8>
 800880e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008810:	9b03      	ldr	r3, [sp, #12]
 8008812:	429a      	cmp	r2, r3
 8008814:	db06      	blt.n	8008824 <_svfprintf_r+0x704>
 8008816:	07ef      	lsls	r7, r5, #31
 8008818:	d50e      	bpl.n	8008838 <_svfprintf_r+0x718>
 800881a:	9b08      	ldr	r3, [sp, #32]
 800881c:	4413      	add	r3, r2
 800881e:	2267      	movs	r2, #103	; 0x67
 8008820:	9202      	str	r2, [sp, #8]
 8008822:	e7da      	b.n	80087da <_svfprintf_r+0x6ba>
 8008824:	9b03      	ldr	r3, [sp, #12]
 8008826:	9908      	ldr	r1, [sp, #32]
 8008828:	2a00      	cmp	r2, #0
 800882a:	440b      	add	r3, r1
 800882c:	dcf7      	bgt.n	800881e <_svfprintf_r+0x6fe>
 800882e:	f1c2 0201 	rsb	r2, r2, #1
 8008832:	e7f3      	b.n	800881c <_svfprintf_r+0x6fc>
 8008834:	2301      	movs	r3, #1
 8008836:	e7d0      	b.n	80087da <_svfprintf_r+0x6ba>
 8008838:	4613      	mov	r3, r2
 800883a:	e7f0      	b.n	800881e <_svfprintf_r+0x6fe>
 800883c:	b10b      	cbz	r3, 8008842 <_svfprintf_r+0x722>
 800883e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008842:	f015 0f20 	tst.w	r5, #32
 8008846:	f107 0304 	add.w	r3, r7, #4
 800884a:	d008      	beq.n	800885e <_svfprintf_r+0x73e>
 800884c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800884e:	683a      	ldr	r2, [r7, #0]
 8008850:	17ce      	asrs	r6, r1, #31
 8008852:	4608      	mov	r0, r1
 8008854:	4631      	mov	r1, r6
 8008856:	e9c2 0100 	strd	r0, r1, [r2]
 800885a:	461f      	mov	r7, r3
 800885c:	e49a      	b.n	8008194 <_svfprintf_r+0x74>
 800885e:	06ee      	lsls	r6, r5, #27
 8008860:	d503      	bpl.n	800886a <_svfprintf_r+0x74a>
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008866:	6011      	str	r1, [r2, #0]
 8008868:	e7f7      	b.n	800885a <_svfprintf_r+0x73a>
 800886a:	0668      	lsls	r0, r5, #25
 800886c:	d5f9      	bpl.n	8008862 <_svfprintf_r+0x742>
 800886e:	683a      	ldr	r2, [r7, #0]
 8008870:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8008874:	8011      	strh	r1, [r2, #0]
 8008876:	e7f0      	b.n	800885a <_svfprintf_r+0x73a>
 8008878:	f045 0510 	orr.w	r5, r5, #16
 800887c:	f015 0320 	ands.w	r3, r5, #32
 8008880:	d022      	beq.n	80088c8 <_svfprintf_r+0x7a8>
 8008882:	3707      	adds	r7, #7
 8008884:	f027 0707 	bic.w	r7, r7, #7
 8008888:	f107 0308 	add.w	r3, r7, #8
 800888c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8008890:	9304      	str	r3, [sp, #16]
 8008892:	2300      	movs	r3, #0
 8008894:	2200      	movs	r2, #0
 8008896:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800889a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800889e:	f000 83db 	beq.w	8009058 <_svfprintf_r+0xf38>
 80088a2:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 80088a6:	920b      	str	r2, [sp, #44]	; 0x2c
 80088a8:	ea56 0207 	orrs.w	r2, r6, r7
 80088ac:	f040 83d9 	bne.w	8009062 <_svfprintf_r+0xf42>
 80088b0:	f1b9 0f00 	cmp.w	r9, #0
 80088b4:	f000 80aa 	beq.w	8008a0c <_svfprintf_r+0x8ec>
 80088b8:	2b01      	cmp	r3, #1
 80088ba:	d076      	beq.n	80089aa <_svfprintf_r+0x88a>
 80088bc:	2b02      	cmp	r3, #2
 80088be:	f000 8091 	beq.w	80089e4 <_svfprintf_r+0x8c4>
 80088c2:	2600      	movs	r6, #0
 80088c4:	2700      	movs	r7, #0
 80088c6:	e3d2      	b.n	800906e <_svfprintf_r+0xf4e>
 80088c8:	1d3a      	adds	r2, r7, #4
 80088ca:	f015 0110 	ands.w	r1, r5, #16
 80088ce:	9204      	str	r2, [sp, #16]
 80088d0:	d002      	beq.n	80088d8 <_svfprintf_r+0x7b8>
 80088d2:	683e      	ldr	r6, [r7, #0]
 80088d4:	2700      	movs	r7, #0
 80088d6:	e7dd      	b.n	8008894 <_svfprintf_r+0x774>
 80088d8:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 80088dc:	d0f9      	beq.n	80088d2 <_svfprintf_r+0x7b2>
 80088de:	883e      	ldrh	r6, [r7, #0]
 80088e0:	2700      	movs	r7, #0
 80088e2:	e7d6      	b.n	8008892 <_svfprintf_r+0x772>
 80088e4:	1d3b      	adds	r3, r7, #4
 80088e6:	9304      	str	r3, [sp, #16]
 80088e8:	2330      	movs	r3, #48	; 0x30
 80088ea:	2278      	movs	r2, #120	; 0x78
 80088ec:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80088f0:	4b14      	ldr	r3, [pc, #80]	; (8008944 <_svfprintf_r+0x824>)
 80088f2:	683e      	ldr	r6, [r7, #0]
 80088f4:	9311      	str	r3, [sp, #68]	; 0x44
 80088f6:	2700      	movs	r7, #0
 80088f8:	f045 0502 	orr.w	r5, r5, #2
 80088fc:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8008900:	2302      	movs	r3, #2
 8008902:	9202      	str	r2, [sp, #8]
 8008904:	e7c6      	b.n	8008894 <_svfprintf_r+0x774>
 8008906:	1d3b      	adds	r3, r7, #4
 8008908:	2600      	movs	r6, #0
 800890a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800890e:	9304      	str	r3, [sp, #16]
 8008910:	f8d7 8000 	ldr.w	r8, [r7]
 8008914:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008918:	d00a      	beq.n	8008930 <_svfprintf_r+0x810>
 800891a:	464a      	mov	r2, r9
 800891c:	4631      	mov	r1, r6
 800891e:	4640      	mov	r0, r8
 8008920:	f7f7 fc66 	bl	80001f0 <memchr>
 8008924:	2800      	cmp	r0, #0
 8008926:	f000 808d 	beq.w	8008a44 <_svfprintf_r+0x924>
 800892a:	eba0 0908 	sub.w	r9, r0, r8
 800892e:	e5cb      	b.n	80084c8 <_svfprintf_r+0x3a8>
 8008930:	4640      	mov	r0, r8
 8008932:	f7f7 fc55 	bl	80001e0 <strlen>
 8008936:	4681      	mov	r9, r0
 8008938:	e5c6      	b.n	80084c8 <_svfprintf_r+0x3a8>
 800893a:	bf00      	nop
 800893c:	0800ba0c 	.word	0x0800ba0c
 8008940:	0800ba1c 	.word	0x0800ba1c
 8008944:	0800b9f9 	.word	0x0800b9f9
 8008948:	f045 0510 	orr.w	r5, r5, #16
 800894c:	06a9      	lsls	r1, r5, #26
 800894e:	d509      	bpl.n	8008964 <_svfprintf_r+0x844>
 8008950:	3707      	adds	r7, #7
 8008952:	f027 0707 	bic.w	r7, r7, #7
 8008956:	f107 0308 	add.w	r3, r7, #8
 800895a:	e9d7 6700 	ldrd	r6, r7, [r7]
 800895e:	9304      	str	r3, [sp, #16]
 8008960:	2301      	movs	r3, #1
 8008962:	e797      	b.n	8008894 <_svfprintf_r+0x774>
 8008964:	1d3b      	adds	r3, r7, #4
 8008966:	f015 0f10 	tst.w	r5, #16
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	d001      	beq.n	8008972 <_svfprintf_r+0x852>
 800896e:	683e      	ldr	r6, [r7, #0]
 8008970:	e002      	b.n	8008978 <_svfprintf_r+0x858>
 8008972:	066a      	lsls	r2, r5, #25
 8008974:	d5fb      	bpl.n	800896e <_svfprintf_r+0x84e>
 8008976:	883e      	ldrh	r6, [r7, #0]
 8008978:	2700      	movs	r7, #0
 800897a:	e7f1      	b.n	8008960 <_svfprintf_r+0x840>
 800897c:	b10b      	cbz	r3, 8008982 <_svfprintf_r+0x862>
 800897e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008982:	4ba3      	ldr	r3, [pc, #652]	; (8008c10 <_svfprintf_r+0xaf0>)
 8008984:	e4c2      	b.n	800830c <_svfprintf_r+0x1ec>
 8008986:	1d3b      	adds	r3, r7, #4
 8008988:	f015 0f10 	tst.w	r5, #16
 800898c:	9304      	str	r3, [sp, #16]
 800898e:	d001      	beq.n	8008994 <_svfprintf_r+0x874>
 8008990:	683e      	ldr	r6, [r7, #0]
 8008992:	e002      	b.n	800899a <_svfprintf_r+0x87a>
 8008994:	066e      	lsls	r6, r5, #25
 8008996:	d5fb      	bpl.n	8008990 <_svfprintf_r+0x870>
 8008998:	883e      	ldrh	r6, [r7, #0]
 800899a:	2700      	movs	r7, #0
 800899c:	e4c2      	b.n	8008324 <_svfprintf_r+0x204>
 800899e:	4643      	mov	r3, r8
 80089a0:	e366      	b.n	8009070 <_svfprintf_r+0xf50>
 80089a2:	2f00      	cmp	r7, #0
 80089a4:	bf08      	it	eq
 80089a6:	2e0a      	cmpeq	r6, #10
 80089a8:	d205      	bcs.n	80089b6 <_svfprintf_r+0x896>
 80089aa:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 80089ae:	3630      	adds	r6, #48	; 0x30
 80089b0:	f808 6d41 	strb.w	r6, [r8, #-65]!
 80089b4:	e377      	b.n	80090a6 <_svfprintf_r+0xf86>
 80089b6:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80089ba:	4630      	mov	r0, r6
 80089bc:	4639      	mov	r1, r7
 80089be:	220a      	movs	r2, #10
 80089c0:	2300      	movs	r3, #0
 80089c2:	f7f8 f8f5 	bl	8000bb0 <__aeabi_uldivmod>
 80089c6:	3230      	adds	r2, #48	; 0x30
 80089c8:	f808 2d01 	strb.w	r2, [r8, #-1]!
 80089cc:	2300      	movs	r3, #0
 80089ce:	4630      	mov	r0, r6
 80089d0:	4639      	mov	r1, r7
 80089d2:	220a      	movs	r2, #10
 80089d4:	f7f8 f8ec 	bl	8000bb0 <__aeabi_uldivmod>
 80089d8:	4606      	mov	r6, r0
 80089da:	460f      	mov	r7, r1
 80089dc:	ea56 0307 	orrs.w	r3, r6, r7
 80089e0:	d1eb      	bne.n	80089ba <_svfprintf_r+0x89a>
 80089e2:	e360      	b.n	80090a6 <_svfprintf_r+0xf86>
 80089e4:	2600      	movs	r6, #0
 80089e6:	2700      	movs	r7, #0
 80089e8:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 80089ec:	f006 030f 	and.w	r3, r6, #15
 80089f0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80089f2:	5cd3      	ldrb	r3, [r2, r3]
 80089f4:	f808 3d01 	strb.w	r3, [r8, #-1]!
 80089f8:	0933      	lsrs	r3, r6, #4
 80089fa:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 80089fe:	093a      	lsrs	r2, r7, #4
 8008a00:	461e      	mov	r6, r3
 8008a02:	4617      	mov	r7, r2
 8008a04:	ea56 0307 	orrs.w	r3, r6, r7
 8008a08:	d1f0      	bne.n	80089ec <_svfprintf_r+0x8cc>
 8008a0a:	e34c      	b.n	80090a6 <_svfprintf_r+0xf86>
 8008a0c:	b93b      	cbnz	r3, 8008a1e <_svfprintf_r+0x8fe>
 8008a0e:	07ea      	lsls	r2, r5, #31
 8008a10:	d505      	bpl.n	8008a1e <_svfprintf_r+0x8fe>
 8008a12:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8008a16:	2330      	movs	r3, #48	; 0x30
 8008a18:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8008a1c:	e343      	b.n	80090a6 <_svfprintf_r+0xf86>
 8008a1e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8008a22:	e340      	b.n	80090a6 <_svfprintf_r+0xf86>
 8008a24:	b10b      	cbz	r3, 8008a2a <_svfprintf_r+0x90a>
 8008a26:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8008a2a:	9b02      	ldr	r3, [sp, #8]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 82f7 	beq.w	8009020 <_svfprintf_r+0xf00>
 8008a32:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8008a36:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8008a3a:	2600      	movs	r6, #0
 8008a3c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8008a40:	9704      	str	r7, [sp, #16]
 8008a42:	e4e8      	b.n	8008416 <_svfprintf_r+0x2f6>
 8008a44:	4606      	mov	r6, r0
 8008a46:	e53f      	b.n	80084c8 <_svfprintf_r+0x3a8>
 8008a48:	2310      	movs	r3, #16
 8008a4a:	6063      	str	r3, [r4, #4]
 8008a4c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a4e:	3310      	adds	r3, #16
 8008a50:	9321      	str	r3, [sp, #132]	; 0x84
 8008a52:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008a54:	3301      	adds	r3, #1
 8008a56:	2b07      	cmp	r3, #7
 8008a58:	9320      	str	r3, [sp, #128]	; 0x80
 8008a5a:	dc04      	bgt.n	8008a66 <_svfprintf_r+0x946>
 8008a5c:	3408      	adds	r4, #8
 8008a5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008a60:	3b10      	subs	r3, #16
 8008a62:	930c      	str	r3, [sp, #48]	; 0x30
 8008a64:	e615      	b.n	8008692 <_svfprintf_r+0x572>
 8008a66:	aa1f      	add	r2, sp, #124	; 0x7c
 8008a68:	4651      	mov	r1, sl
 8008a6a:	4658      	mov	r0, fp
 8008a6c:	f001 feb8 	bl	800a7e0 <__ssprint_r>
 8008a70:	2800      	cmp	r0, #0
 8008a72:	f040 82b6 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008a76:	ac2c      	add	r4, sp, #176	; 0xb0
 8008a78:	e7f1      	b.n	8008a5e <_svfprintf_r+0x93e>
 8008a7a:	aa1f      	add	r2, sp, #124	; 0x7c
 8008a7c:	4651      	mov	r1, sl
 8008a7e:	4658      	mov	r0, fp
 8008a80:	f001 feae 	bl	800a7e0 <__ssprint_r>
 8008a84:	2800      	cmp	r0, #0
 8008a86:	f040 82ac 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008a8a:	ac2c      	add	r4, sp, #176	; 0xb0
 8008a8c:	e614      	b.n	80086b8 <_svfprintf_r+0x598>
 8008a8e:	aa1f      	add	r2, sp, #124	; 0x7c
 8008a90:	4651      	mov	r1, sl
 8008a92:	4658      	mov	r0, fp
 8008a94:	f001 fea4 	bl	800a7e0 <__ssprint_r>
 8008a98:	2800      	cmp	r0, #0
 8008a9a:	f040 82a2 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008a9e:	ac2c      	add	r4, sp, #176	; 0xb0
 8008aa0:	e61c      	b.n	80086dc <_svfprintf_r+0x5bc>
 8008aa2:	aa1f      	add	r2, sp, #124	; 0x7c
 8008aa4:	4651      	mov	r1, sl
 8008aa6:	4658      	mov	r0, fp
 8008aa8:	f001 fe9a 	bl	800a7e0 <__ssprint_r>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f040 8298 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008ab2:	ac2c      	add	r4, sp, #176	; 0xb0
 8008ab4:	e622      	b.n	80086fc <_svfprintf_r+0x5dc>
 8008ab6:	2210      	movs	r2, #16
 8008ab8:	6062      	str	r2, [r4, #4]
 8008aba:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008abc:	3210      	adds	r2, #16
 8008abe:	9221      	str	r2, [sp, #132]	; 0x84
 8008ac0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008ac2:	3201      	adds	r2, #1
 8008ac4:	2a07      	cmp	r2, #7
 8008ac6:	9220      	str	r2, [sp, #128]	; 0x80
 8008ac8:	dc02      	bgt.n	8008ad0 <_svfprintf_r+0x9b0>
 8008aca:	3408      	adds	r4, #8
 8008acc:	3b10      	subs	r3, #16
 8008ace:	e61d      	b.n	800870c <_svfprintf_r+0x5ec>
 8008ad0:	aa1f      	add	r2, sp, #124	; 0x7c
 8008ad2:	4651      	mov	r1, sl
 8008ad4:	4658      	mov	r0, fp
 8008ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ad8:	f001 fe82 	bl	800a7e0 <__ssprint_r>
 8008adc:	2800      	cmp	r0, #0
 8008ade:	f040 8280 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008ae2:	ac2c      	add	r4, sp, #176	; 0xb0
 8008ae4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008ae6:	e7f1      	b.n	8008acc <_svfprintf_r+0x9ac>
 8008ae8:	aa1f      	add	r2, sp, #124	; 0x7c
 8008aea:	4651      	mov	r1, sl
 8008aec:	4658      	mov	r0, fp
 8008aee:	f001 fe77 	bl	800a7e0 <__ssprint_r>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	f040 8275 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008af8:	ac2c      	add	r4, sp, #176	; 0xb0
 8008afa:	e617      	b.n	800872c <_svfprintf_r+0x60c>
 8008afc:	2310      	movs	r3, #16
 8008afe:	6063      	str	r3, [r4, #4]
 8008b00:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b02:	3310      	adds	r3, #16
 8008b04:	9321      	str	r3, [sp, #132]	; 0x84
 8008b06:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008b08:	3301      	adds	r3, #1
 8008b0a:	2b07      	cmp	r3, #7
 8008b0c:	9320      	str	r3, [sp, #128]	; 0x80
 8008b0e:	dc02      	bgt.n	8008b16 <_svfprintf_r+0x9f6>
 8008b10:	3408      	adds	r4, #8
 8008b12:	3e10      	subs	r6, #16
 8008b14:	e60e      	b.n	8008734 <_svfprintf_r+0x614>
 8008b16:	aa1f      	add	r2, sp, #124	; 0x7c
 8008b18:	4651      	mov	r1, sl
 8008b1a:	4658      	mov	r0, fp
 8008b1c:	f001 fe60 	bl	800a7e0 <__ssprint_r>
 8008b20:	2800      	cmp	r0, #0
 8008b22:	f040 825e 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008b26:	ac2c      	add	r4, sp, #176	; 0xb0
 8008b28:	e7f3      	b.n	8008b12 <_svfprintf_r+0x9f2>
 8008b2a:	aa1f      	add	r2, sp, #124	; 0x7c
 8008b2c:	4651      	mov	r1, sl
 8008b2e:	4658      	mov	r0, fp
 8008b30:	f001 fe56 	bl	800a7e0 <__ssprint_r>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	f040 8254 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008b3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8008b3c:	e60a      	b.n	8008754 <_svfprintf_r+0x634>
 8008b3e:	9b02      	ldr	r3, [sp, #8]
 8008b40:	2b65      	cmp	r3, #101	; 0x65
 8008b42:	f340 81a9 	ble.w	8008e98 <_svfprintf_r+0xd78>
 8008b46:	2200      	movs	r2, #0
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b4e:	f7f7 ffbf 	bl	8000ad0 <__aeabi_dcmpeq>
 8008b52:	2800      	cmp	r0, #0
 8008b54:	d062      	beq.n	8008c1c <_svfprintf_r+0xafc>
 8008b56:	4b2f      	ldr	r3, [pc, #188]	; (8008c14 <_svfprintf_r+0xaf4>)
 8008b58:	6023      	str	r3, [r4, #0]
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	6063      	str	r3, [r4, #4]
 8008b5e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b60:	3301      	adds	r3, #1
 8008b62:	9321      	str	r3, [sp, #132]	; 0x84
 8008b64:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008b66:	3301      	adds	r3, #1
 8008b68:	2b07      	cmp	r3, #7
 8008b6a:	9320      	str	r3, [sp, #128]	; 0x80
 8008b6c:	dc25      	bgt.n	8008bba <_svfprintf_r+0xa9a>
 8008b6e:	3408      	adds	r4, #8
 8008b70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008b72:	9a03      	ldr	r2, [sp, #12]
 8008b74:	4293      	cmp	r3, r2
 8008b76:	db02      	blt.n	8008b7e <_svfprintf_r+0xa5e>
 8008b78:	07ee      	lsls	r6, r5, #31
 8008b7a:	f57f ae02 	bpl.w	8008782 <_svfprintf_r+0x662>
 8008b7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	9b08      	ldr	r3, [sp, #32]
 8008b84:	6063      	str	r3, [r4, #4]
 8008b86:	9a08      	ldr	r2, [sp, #32]
 8008b88:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b8a:	4413      	add	r3, r2
 8008b8c:	9321      	str	r3, [sp, #132]	; 0x84
 8008b8e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008b90:	3301      	adds	r3, #1
 8008b92:	2b07      	cmp	r3, #7
 8008b94:	9320      	str	r3, [sp, #128]	; 0x80
 8008b96:	dc1a      	bgt.n	8008bce <_svfprintf_r+0xaae>
 8008b98:	3408      	adds	r4, #8
 8008b9a:	9b03      	ldr	r3, [sp, #12]
 8008b9c:	1e5e      	subs	r6, r3, #1
 8008b9e:	2e00      	cmp	r6, #0
 8008ba0:	f77f adef 	ble.w	8008782 <_svfprintf_r+0x662>
 8008ba4:	4f1c      	ldr	r7, [pc, #112]	; (8008c18 <_svfprintf_r+0xaf8>)
 8008ba6:	f04f 0810 	mov.w	r8, #16
 8008baa:	2e10      	cmp	r6, #16
 8008bac:	6027      	str	r7, [r4, #0]
 8008bae:	dc18      	bgt.n	8008be2 <_svfprintf_r+0xac2>
 8008bb0:	6066      	str	r6, [r4, #4]
 8008bb2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bb4:	441e      	add	r6, r3
 8008bb6:	9621      	str	r6, [sp, #132]	; 0x84
 8008bb8:	e5d4      	b.n	8008764 <_svfprintf_r+0x644>
 8008bba:	aa1f      	add	r2, sp, #124	; 0x7c
 8008bbc:	4651      	mov	r1, sl
 8008bbe:	4658      	mov	r0, fp
 8008bc0:	f001 fe0e 	bl	800a7e0 <__ssprint_r>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	f040 820c 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008bca:	ac2c      	add	r4, sp, #176	; 0xb0
 8008bcc:	e7d0      	b.n	8008b70 <_svfprintf_r+0xa50>
 8008bce:	aa1f      	add	r2, sp, #124	; 0x7c
 8008bd0:	4651      	mov	r1, sl
 8008bd2:	4658      	mov	r0, fp
 8008bd4:	f001 fe04 	bl	800a7e0 <__ssprint_r>
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	f040 8202 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008bde:	ac2c      	add	r4, sp, #176	; 0xb0
 8008be0:	e7db      	b.n	8008b9a <_svfprintf_r+0xa7a>
 8008be2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008be4:	f8c4 8004 	str.w	r8, [r4, #4]
 8008be8:	3310      	adds	r3, #16
 8008bea:	9321      	str	r3, [sp, #132]	; 0x84
 8008bec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008bee:	3301      	adds	r3, #1
 8008bf0:	2b07      	cmp	r3, #7
 8008bf2:	9320      	str	r3, [sp, #128]	; 0x80
 8008bf4:	dc02      	bgt.n	8008bfc <_svfprintf_r+0xadc>
 8008bf6:	3408      	adds	r4, #8
 8008bf8:	3e10      	subs	r6, #16
 8008bfa:	e7d6      	b.n	8008baa <_svfprintf_r+0xa8a>
 8008bfc:	aa1f      	add	r2, sp, #124	; 0x7c
 8008bfe:	4651      	mov	r1, sl
 8008c00:	4658      	mov	r0, fp
 8008c02:	f001 fded 	bl	800a7e0 <__ssprint_r>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	f040 81eb 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008c0c:	ac2c      	add	r4, sp, #176	; 0xb0
 8008c0e:	e7f3      	b.n	8008bf8 <_svfprintf_r+0xad8>
 8008c10:	0800b9f9 	.word	0x0800b9f9
 8008c14:	0800ba0a 	.word	0x0800ba0a
 8008c18:	0800ba1c 	.word	0x0800ba1c
 8008c1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	dc7a      	bgt.n	8008d18 <_svfprintf_r+0xbf8>
 8008c22:	4b9b      	ldr	r3, [pc, #620]	; (8008e90 <_svfprintf_r+0xd70>)
 8008c24:	6023      	str	r3, [r4, #0]
 8008c26:	2301      	movs	r3, #1
 8008c28:	6063      	str	r3, [r4, #4]
 8008c2a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c2c:	3301      	adds	r3, #1
 8008c2e:	9321      	str	r3, [sp, #132]	; 0x84
 8008c30:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008c32:	3301      	adds	r3, #1
 8008c34:	2b07      	cmp	r3, #7
 8008c36:	9320      	str	r3, [sp, #128]	; 0x80
 8008c38:	dc44      	bgt.n	8008cc4 <_svfprintf_r+0xba4>
 8008c3a:	3408      	adds	r4, #8
 8008c3c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008c3e:	b923      	cbnz	r3, 8008c4a <_svfprintf_r+0xb2a>
 8008c40:	9b03      	ldr	r3, [sp, #12]
 8008c42:	b913      	cbnz	r3, 8008c4a <_svfprintf_r+0xb2a>
 8008c44:	07e8      	lsls	r0, r5, #31
 8008c46:	f57f ad9c 	bpl.w	8008782 <_svfprintf_r+0x662>
 8008c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008c4c:	6023      	str	r3, [r4, #0]
 8008c4e:	9b08      	ldr	r3, [sp, #32]
 8008c50:	6063      	str	r3, [r4, #4]
 8008c52:	9a08      	ldr	r2, [sp, #32]
 8008c54:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c56:	4413      	add	r3, r2
 8008c58:	9321      	str	r3, [sp, #132]	; 0x84
 8008c5a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008c5c:	3301      	adds	r3, #1
 8008c5e:	2b07      	cmp	r3, #7
 8008c60:	9320      	str	r3, [sp, #128]	; 0x80
 8008c62:	dc39      	bgt.n	8008cd8 <_svfprintf_r+0xbb8>
 8008c64:	f104 0308 	add.w	r3, r4, #8
 8008c68:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8008c6a:	2e00      	cmp	r6, #0
 8008c6c:	da19      	bge.n	8008ca2 <_svfprintf_r+0xb82>
 8008c6e:	4f89      	ldr	r7, [pc, #548]	; (8008e94 <_svfprintf_r+0xd74>)
 8008c70:	4276      	negs	r6, r6
 8008c72:	2410      	movs	r4, #16
 8008c74:	2e10      	cmp	r6, #16
 8008c76:	601f      	str	r7, [r3, #0]
 8008c78:	dc38      	bgt.n	8008cec <_svfprintf_r+0xbcc>
 8008c7a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c7c:	605e      	str	r6, [r3, #4]
 8008c7e:	4416      	add	r6, r2
 8008c80:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008c82:	9621      	str	r6, [sp, #132]	; 0x84
 8008c84:	3201      	adds	r2, #1
 8008c86:	2a07      	cmp	r2, #7
 8008c88:	f103 0308 	add.w	r3, r3, #8
 8008c8c:	9220      	str	r2, [sp, #128]	; 0x80
 8008c8e:	dd08      	ble.n	8008ca2 <_svfprintf_r+0xb82>
 8008c90:	aa1f      	add	r2, sp, #124	; 0x7c
 8008c92:	4651      	mov	r1, sl
 8008c94:	4658      	mov	r0, fp
 8008c96:	f001 fda3 	bl	800a7e0 <__ssprint_r>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	f040 81a1 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008ca0:	ab2c      	add	r3, sp, #176	; 0xb0
 8008ca2:	9a03      	ldr	r2, [sp, #12]
 8008ca4:	605a      	str	r2, [r3, #4]
 8008ca6:	9903      	ldr	r1, [sp, #12]
 8008ca8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008caa:	f8c3 8000 	str.w	r8, [r3]
 8008cae:	440a      	add	r2, r1
 8008cb0:	9221      	str	r2, [sp, #132]	; 0x84
 8008cb2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008cb4:	3201      	adds	r2, #1
 8008cb6:	2a07      	cmp	r2, #7
 8008cb8:	9220      	str	r2, [sp, #128]	; 0x80
 8008cba:	f73f ad59 	bgt.w	8008770 <_svfprintf_r+0x650>
 8008cbe:	f103 0408 	add.w	r4, r3, #8
 8008cc2:	e55e      	b.n	8008782 <_svfprintf_r+0x662>
 8008cc4:	aa1f      	add	r2, sp, #124	; 0x7c
 8008cc6:	4651      	mov	r1, sl
 8008cc8:	4658      	mov	r0, fp
 8008cca:	f001 fd89 	bl	800a7e0 <__ssprint_r>
 8008cce:	2800      	cmp	r0, #0
 8008cd0:	f040 8187 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008cd4:	ac2c      	add	r4, sp, #176	; 0xb0
 8008cd6:	e7b1      	b.n	8008c3c <_svfprintf_r+0xb1c>
 8008cd8:	aa1f      	add	r2, sp, #124	; 0x7c
 8008cda:	4651      	mov	r1, sl
 8008cdc:	4658      	mov	r0, fp
 8008cde:	f001 fd7f 	bl	800a7e0 <__ssprint_r>
 8008ce2:	2800      	cmp	r0, #0
 8008ce4:	f040 817d 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008ce8:	ab2c      	add	r3, sp, #176	; 0xb0
 8008cea:	e7bd      	b.n	8008c68 <_svfprintf_r+0xb48>
 8008cec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008cee:	605c      	str	r4, [r3, #4]
 8008cf0:	3210      	adds	r2, #16
 8008cf2:	9221      	str	r2, [sp, #132]	; 0x84
 8008cf4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008cf6:	3201      	adds	r2, #1
 8008cf8:	2a07      	cmp	r2, #7
 8008cfa:	9220      	str	r2, [sp, #128]	; 0x80
 8008cfc:	dc02      	bgt.n	8008d04 <_svfprintf_r+0xbe4>
 8008cfe:	3308      	adds	r3, #8
 8008d00:	3e10      	subs	r6, #16
 8008d02:	e7b7      	b.n	8008c74 <_svfprintf_r+0xb54>
 8008d04:	aa1f      	add	r2, sp, #124	; 0x7c
 8008d06:	4651      	mov	r1, sl
 8008d08:	4658      	mov	r0, fp
 8008d0a:	f001 fd69 	bl	800a7e0 <__ssprint_r>
 8008d0e:	2800      	cmp	r0, #0
 8008d10:	f040 8167 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008d14:	ab2c      	add	r3, sp, #176	; 0xb0
 8008d16:	e7f3      	b.n	8008d00 <_svfprintf_r+0xbe0>
 8008d18:	9b03      	ldr	r3, [sp, #12]
 8008d1a:	42bb      	cmp	r3, r7
 8008d1c:	bfa8      	it	ge
 8008d1e:	463b      	movge	r3, r7
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	461e      	mov	r6, r3
 8008d24:	dd0b      	ble.n	8008d3e <_svfprintf_r+0xc1e>
 8008d26:	6063      	str	r3, [r4, #4]
 8008d28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d2a:	f8c4 8000 	str.w	r8, [r4]
 8008d2e:	4433      	add	r3, r6
 8008d30:	9321      	str	r3, [sp, #132]	; 0x84
 8008d32:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008d34:	3301      	adds	r3, #1
 8008d36:	2b07      	cmp	r3, #7
 8008d38:	9320      	str	r3, [sp, #128]	; 0x80
 8008d3a:	dc5f      	bgt.n	8008dfc <_svfprintf_r+0xcdc>
 8008d3c:	3408      	adds	r4, #8
 8008d3e:	2e00      	cmp	r6, #0
 8008d40:	bfac      	ite	ge
 8008d42:	1bbe      	subge	r6, r7, r6
 8008d44:	463e      	movlt	r6, r7
 8008d46:	2e00      	cmp	r6, #0
 8008d48:	dd0f      	ble.n	8008d6a <_svfprintf_r+0xc4a>
 8008d4a:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8008e94 <_svfprintf_r+0xd74>
 8008d4e:	f8c4 9000 	str.w	r9, [r4]
 8008d52:	2e10      	cmp	r6, #16
 8008d54:	dc5c      	bgt.n	8008e10 <_svfprintf_r+0xcf0>
 8008d56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d58:	6066      	str	r6, [r4, #4]
 8008d5a:	441e      	add	r6, r3
 8008d5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008d5e:	9621      	str	r6, [sp, #132]	; 0x84
 8008d60:	3301      	adds	r3, #1
 8008d62:	2b07      	cmp	r3, #7
 8008d64:	9320      	str	r3, [sp, #128]	; 0x80
 8008d66:	dc6a      	bgt.n	8008e3e <_svfprintf_r+0xd1e>
 8008d68:	3408      	adds	r4, #8
 8008d6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d6c:	9a03      	ldr	r2, [sp, #12]
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	db01      	blt.n	8008d76 <_svfprintf_r+0xc56>
 8008d72:	07e9      	lsls	r1, r5, #31
 8008d74:	d50d      	bpl.n	8008d92 <_svfprintf_r+0xc72>
 8008d76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d78:	6023      	str	r3, [r4, #0]
 8008d7a:	9b08      	ldr	r3, [sp, #32]
 8008d7c:	6063      	str	r3, [r4, #4]
 8008d7e:	9a08      	ldr	r2, [sp, #32]
 8008d80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d82:	4413      	add	r3, r2
 8008d84:	9321      	str	r3, [sp, #132]	; 0x84
 8008d86:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008d88:	3301      	adds	r3, #1
 8008d8a:	2b07      	cmp	r3, #7
 8008d8c:	9320      	str	r3, [sp, #128]	; 0x80
 8008d8e:	dc60      	bgt.n	8008e52 <_svfprintf_r+0xd32>
 8008d90:	3408      	adds	r4, #8
 8008d92:	9b03      	ldr	r3, [sp, #12]
 8008d94:	9a03      	ldr	r2, [sp, #12]
 8008d96:	1bde      	subs	r6, r3, r7
 8008d98:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	429e      	cmp	r6, r3
 8008d9e:	bfa8      	it	ge
 8008da0:	461e      	movge	r6, r3
 8008da2:	2e00      	cmp	r6, #0
 8008da4:	dd0b      	ble.n	8008dbe <_svfprintf_r+0xc9e>
 8008da6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008da8:	6066      	str	r6, [r4, #4]
 8008daa:	4433      	add	r3, r6
 8008dac:	9321      	str	r3, [sp, #132]	; 0x84
 8008dae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008db0:	3301      	adds	r3, #1
 8008db2:	4447      	add	r7, r8
 8008db4:	2b07      	cmp	r3, #7
 8008db6:	6027      	str	r7, [r4, #0]
 8008db8:	9320      	str	r3, [sp, #128]	; 0x80
 8008dba:	dc54      	bgt.n	8008e66 <_svfprintf_r+0xd46>
 8008dbc:	3408      	adds	r4, #8
 8008dbe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dc0:	9a03      	ldr	r2, [sp, #12]
 8008dc2:	2e00      	cmp	r6, #0
 8008dc4:	eba2 0303 	sub.w	r3, r2, r3
 8008dc8:	bfac      	ite	ge
 8008dca:	1b9e      	subge	r6, r3, r6
 8008dcc:	461e      	movlt	r6, r3
 8008dce:	2e00      	cmp	r6, #0
 8008dd0:	f77f acd7 	ble.w	8008782 <_svfprintf_r+0x662>
 8008dd4:	4f2f      	ldr	r7, [pc, #188]	; (8008e94 <_svfprintf_r+0xd74>)
 8008dd6:	f04f 0810 	mov.w	r8, #16
 8008dda:	2e10      	cmp	r6, #16
 8008ddc:	6027      	str	r7, [r4, #0]
 8008dde:	f77f aee7 	ble.w	8008bb0 <_svfprintf_r+0xa90>
 8008de2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008de4:	f8c4 8004 	str.w	r8, [r4, #4]
 8008de8:	3310      	adds	r3, #16
 8008dea:	9321      	str	r3, [sp, #132]	; 0x84
 8008dec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008dee:	3301      	adds	r3, #1
 8008df0:	2b07      	cmp	r3, #7
 8008df2:	9320      	str	r3, [sp, #128]	; 0x80
 8008df4:	dc41      	bgt.n	8008e7a <_svfprintf_r+0xd5a>
 8008df6:	3408      	adds	r4, #8
 8008df8:	3e10      	subs	r6, #16
 8008dfa:	e7ee      	b.n	8008dda <_svfprintf_r+0xcba>
 8008dfc:	aa1f      	add	r2, sp, #124	; 0x7c
 8008dfe:	4651      	mov	r1, sl
 8008e00:	4658      	mov	r0, fp
 8008e02:	f001 fced 	bl	800a7e0 <__ssprint_r>
 8008e06:	2800      	cmp	r0, #0
 8008e08:	f040 80eb 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008e0c:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e0e:	e796      	b.n	8008d3e <_svfprintf_r+0xc1e>
 8008e10:	2310      	movs	r3, #16
 8008e12:	6063      	str	r3, [r4, #4]
 8008e14:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e16:	3310      	adds	r3, #16
 8008e18:	9321      	str	r3, [sp, #132]	; 0x84
 8008e1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008e1c:	3301      	adds	r3, #1
 8008e1e:	2b07      	cmp	r3, #7
 8008e20:	9320      	str	r3, [sp, #128]	; 0x80
 8008e22:	dc02      	bgt.n	8008e2a <_svfprintf_r+0xd0a>
 8008e24:	3408      	adds	r4, #8
 8008e26:	3e10      	subs	r6, #16
 8008e28:	e791      	b.n	8008d4e <_svfprintf_r+0xc2e>
 8008e2a:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e2c:	4651      	mov	r1, sl
 8008e2e:	4658      	mov	r0, fp
 8008e30:	f001 fcd6 	bl	800a7e0 <__ssprint_r>
 8008e34:	2800      	cmp	r0, #0
 8008e36:	f040 80d4 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008e3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e3c:	e7f3      	b.n	8008e26 <_svfprintf_r+0xd06>
 8008e3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e40:	4651      	mov	r1, sl
 8008e42:	4658      	mov	r0, fp
 8008e44:	f001 fccc 	bl	800a7e0 <__ssprint_r>
 8008e48:	2800      	cmp	r0, #0
 8008e4a:	f040 80ca 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008e4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e50:	e78b      	b.n	8008d6a <_svfprintf_r+0xc4a>
 8008e52:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e54:	4651      	mov	r1, sl
 8008e56:	4658      	mov	r0, fp
 8008e58:	f001 fcc2 	bl	800a7e0 <__ssprint_r>
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	f040 80c0 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008e62:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e64:	e795      	b.n	8008d92 <_svfprintf_r+0xc72>
 8008e66:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e68:	4651      	mov	r1, sl
 8008e6a:	4658      	mov	r0, fp
 8008e6c:	f001 fcb8 	bl	800a7e0 <__ssprint_r>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	f040 80b6 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008e76:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e78:	e7a1      	b.n	8008dbe <_svfprintf_r+0xc9e>
 8008e7a:	aa1f      	add	r2, sp, #124	; 0x7c
 8008e7c:	4651      	mov	r1, sl
 8008e7e:	4658      	mov	r0, fp
 8008e80:	f001 fcae 	bl	800a7e0 <__ssprint_r>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	f040 80ac 	bne.w	8008fe2 <_svfprintf_r+0xec2>
 8008e8a:	ac2c      	add	r4, sp, #176	; 0xb0
 8008e8c:	e7b4      	b.n	8008df8 <_svfprintf_r+0xcd8>
 8008e8e:	bf00      	nop
 8008e90:	0800ba0a 	.word	0x0800ba0a
 8008e94:	0800ba1c 	.word	0x0800ba1c
 8008e98:	9b03      	ldr	r3, [sp, #12]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	dc01      	bgt.n	8008ea2 <_svfprintf_r+0xd82>
 8008e9e:	07ea      	lsls	r2, r5, #31
 8008ea0:	d576      	bpl.n	8008f90 <_svfprintf_r+0xe70>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	6063      	str	r3, [r4, #4]
 8008ea6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ea8:	f8c4 8000 	str.w	r8, [r4]
 8008eac:	3301      	adds	r3, #1
 8008eae:	9321      	str	r3, [sp, #132]	; 0x84
 8008eb0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	2b07      	cmp	r3, #7
 8008eb6:	9320      	str	r3, [sp, #128]	; 0x80
 8008eb8:	dc36      	bgt.n	8008f28 <_svfprintf_r+0xe08>
 8008eba:	3408      	adds	r4, #8
 8008ebc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ebe:	6023      	str	r3, [r4, #0]
 8008ec0:	9b08      	ldr	r3, [sp, #32]
 8008ec2:	6063      	str	r3, [r4, #4]
 8008ec4:	9a08      	ldr	r2, [sp, #32]
 8008ec6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ec8:	4413      	add	r3, r2
 8008eca:	9321      	str	r3, [sp, #132]	; 0x84
 8008ecc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008ece:	3301      	adds	r3, #1
 8008ed0:	2b07      	cmp	r3, #7
 8008ed2:	9320      	str	r3, [sp, #128]	; 0x80
 8008ed4:	dc31      	bgt.n	8008f3a <_svfprintf_r+0xe1a>
 8008ed6:	3408      	adds	r4, #8
 8008ed8:	2300      	movs	r3, #0
 8008eda:	2200      	movs	r2, #0
 8008edc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ee0:	f7f7 fdf6 	bl	8000ad0 <__aeabi_dcmpeq>
 8008ee4:	9b03      	ldr	r3, [sp, #12]
 8008ee6:	1e5e      	subs	r6, r3, #1
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	d12f      	bne.n	8008f4c <_svfprintf_r+0xe2c>
 8008eec:	f108 0301 	add.w	r3, r8, #1
 8008ef0:	e884 0048 	stmia.w	r4, {r3, r6}
 8008ef4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ef6:	9a03      	ldr	r2, [sp, #12]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	4413      	add	r3, r2
 8008efc:	9321      	str	r3, [sp, #132]	; 0x84
 8008efe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f00:	3301      	adds	r3, #1
 8008f02:	2b07      	cmp	r3, #7
 8008f04:	9320      	str	r3, [sp, #128]	; 0x80
 8008f06:	dd4a      	ble.n	8008f9e <_svfprintf_r+0xe7e>
 8008f08:	aa1f      	add	r2, sp, #124	; 0x7c
 8008f0a:	4651      	mov	r1, sl
 8008f0c:	4658      	mov	r0, fp
 8008f0e:	f001 fc67 	bl	800a7e0 <__ssprint_r>
 8008f12:	2800      	cmp	r0, #0
 8008f14:	d165      	bne.n	8008fe2 <_svfprintf_r+0xec2>
 8008f16:	ac2c      	add	r4, sp, #176	; 0xb0
 8008f18:	ab1b      	add	r3, sp, #108	; 0x6c
 8008f1a:	6023      	str	r3, [r4, #0]
 8008f1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f1e:	6063      	str	r3, [r4, #4]
 8008f20:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008f22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f24:	4413      	add	r3, r2
 8008f26:	e41c      	b.n	8008762 <_svfprintf_r+0x642>
 8008f28:	aa1f      	add	r2, sp, #124	; 0x7c
 8008f2a:	4651      	mov	r1, sl
 8008f2c:	4658      	mov	r0, fp
 8008f2e:	f001 fc57 	bl	800a7e0 <__ssprint_r>
 8008f32:	2800      	cmp	r0, #0
 8008f34:	d155      	bne.n	8008fe2 <_svfprintf_r+0xec2>
 8008f36:	ac2c      	add	r4, sp, #176	; 0xb0
 8008f38:	e7c0      	b.n	8008ebc <_svfprintf_r+0xd9c>
 8008f3a:	aa1f      	add	r2, sp, #124	; 0x7c
 8008f3c:	4651      	mov	r1, sl
 8008f3e:	4658      	mov	r0, fp
 8008f40:	f001 fc4e 	bl	800a7e0 <__ssprint_r>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d14c      	bne.n	8008fe2 <_svfprintf_r+0xec2>
 8008f48:	ac2c      	add	r4, sp, #176	; 0xb0
 8008f4a:	e7c5      	b.n	8008ed8 <_svfprintf_r+0xdb8>
 8008f4c:	2e00      	cmp	r6, #0
 8008f4e:	dde3      	ble.n	8008f18 <_svfprintf_r+0xdf8>
 8008f50:	4f59      	ldr	r7, [pc, #356]	; (80090b8 <_svfprintf_r+0xf98>)
 8008f52:	f04f 0810 	mov.w	r8, #16
 8008f56:	2e10      	cmp	r6, #16
 8008f58:	6027      	str	r7, [r4, #0]
 8008f5a:	dc04      	bgt.n	8008f66 <_svfprintf_r+0xe46>
 8008f5c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f5e:	6066      	str	r6, [r4, #4]
 8008f60:	441e      	add	r6, r3
 8008f62:	9621      	str	r6, [sp, #132]	; 0x84
 8008f64:	e7cb      	b.n	8008efe <_svfprintf_r+0xdde>
 8008f66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f68:	f8c4 8004 	str.w	r8, [r4, #4]
 8008f6c:	3310      	adds	r3, #16
 8008f6e:	9321      	str	r3, [sp, #132]	; 0x84
 8008f70:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008f72:	3301      	adds	r3, #1
 8008f74:	2b07      	cmp	r3, #7
 8008f76:	9320      	str	r3, [sp, #128]	; 0x80
 8008f78:	dc02      	bgt.n	8008f80 <_svfprintf_r+0xe60>
 8008f7a:	3408      	adds	r4, #8
 8008f7c:	3e10      	subs	r6, #16
 8008f7e:	e7ea      	b.n	8008f56 <_svfprintf_r+0xe36>
 8008f80:	aa1f      	add	r2, sp, #124	; 0x7c
 8008f82:	4651      	mov	r1, sl
 8008f84:	4658      	mov	r0, fp
 8008f86:	f001 fc2b 	bl	800a7e0 <__ssprint_r>
 8008f8a:	bb50      	cbnz	r0, 8008fe2 <_svfprintf_r+0xec2>
 8008f8c:	ac2c      	add	r4, sp, #176	; 0xb0
 8008f8e:	e7f5      	b.n	8008f7c <_svfprintf_r+0xe5c>
 8008f90:	2301      	movs	r3, #1
 8008f92:	6063      	str	r3, [r4, #4]
 8008f94:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f96:	f8c4 8000 	str.w	r8, [r4]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	e7ae      	b.n	8008efc <_svfprintf_r+0xddc>
 8008f9e:	3408      	adds	r4, #8
 8008fa0:	e7ba      	b.n	8008f18 <_svfprintf_r+0xdf8>
 8008fa2:	3408      	adds	r4, #8
 8008fa4:	f7ff bbed 	b.w	8008782 <_svfprintf_r+0x662>
 8008fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008faa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fac:	1a9d      	subs	r5, r3, r2
 8008fae:	2d00      	cmp	r5, #0
 8008fb0:	f77f abea 	ble.w	8008788 <_svfprintf_r+0x668>
 8008fb4:	2610      	movs	r6, #16
 8008fb6:	4b41      	ldr	r3, [pc, #260]	; (80090bc <_svfprintf_r+0xf9c>)
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	2d10      	cmp	r5, #16
 8008fbc:	dc1b      	bgt.n	8008ff6 <_svfprintf_r+0xed6>
 8008fbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008fc0:	6065      	str	r5, [r4, #4]
 8008fc2:	441d      	add	r5, r3
 8008fc4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8008fc6:	9521      	str	r5, [sp, #132]	; 0x84
 8008fc8:	3301      	adds	r3, #1
 8008fca:	2b07      	cmp	r3, #7
 8008fcc:	9320      	str	r3, [sp, #128]	; 0x80
 8008fce:	f77f abdb 	ble.w	8008788 <_svfprintf_r+0x668>
 8008fd2:	aa1f      	add	r2, sp, #124	; 0x7c
 8008fd4:	4651      	mov	r1, sl
 8008fd6:	4658      	mov	r0, fp
 8008fd8:	f001 fc02 	bl	800a7e0 <__ssprint_r>
 8008fdc:	2800      	cmp	r0, #0
 8008fde:	f43f abd3 	beq.w	8008788 <_svfprintf_r+0x668>
 8008fe2:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8008fe6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008fea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fec:	bf18      	it	ne
 8008fee:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8008ff2:	f7ff b8b9 	b.w	8008168 <_svfprintf_r+0x48>
 8008ff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ff8:	6066      	str	r6, [r4, #4]
 8008ffa:	3310      	adds	r3, #16
 8008ffc:	9321      	str	r3, [sp, #132]	; 0x84
 8008ffe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8009000:	3301      	adds	r3, #1
 8009002:	2b07      	cmp	r3, #7
 8009004:	9320      	str	r3, [sp, #128]	; 0x80
 8009006:	dc02      	bgt.n	800900e <_svfprintf_r+0xeee>
 8009008:	3408      	adds	r4, #8
 800900a:	3d10      	subs	r5, #16
 800900c:	e7d3      	b.n	8008fb6 <_svfprintf_r+0xe96>
 800900e:	aa1f      	add	r2, sp, #124	; 0x7c
 8009010:	4651      	mov	r1, sl
 8009012:	4658      	mov	r0, fp
 8009014:	f001 fbe4 	bl	800a7e0 <__ssprint_r>
 8009018:	2800      	cmp	r0, #0
 800901a:	d1e2      	bne.n	8008fe2 <_svfprintf_r+0xec2>
 800901c:	ac2c      	add	r4, sp, #176	; 0xb0
 800901e:	e7f4      	b.n	800900a <_svfprintf_r+0xeea>
 8009020:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009022:	2b00      	cmp	r3, #0
 8009024:	d0dd      	beq.n	8008fe2 <_svfprintf_r+0xec2>
 8009026:	aa1f      	add	r2, sp, #124	; 0x7c
 8009028:	4651      	mov	r1, sl
 800902a:	4658      	mov	r0, fp
 800902c:	f001 fbd8 	bl	800a7e0 <__ssprint_r>
 8009030:	e7d7      	b.n	8008fe2 <_svfprintf_r+0xec2>
 8009032:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009036:	4610      	mov	r0, r2
 8009038:	4619      	mov	r1, r3
 800903a:	f7f7 fd7b 	bl	8000b34 <__aeabi_dcmpun>
 800903e:	2800      	cmp	r0, #0
 8009040:	f43f aa44 	beq.w	80084cc <_svfprintf_r+0x3ac>
 8009044:	4b1e      	ldr	r3, [pc, #120]	; (80090c0 <_svfprintf_r+0xfa0>)
 8009046:	4a1f      	ldr	r2, [pc, #124]	; (80090c4 <_svfprintf_r+0xfa4>)
 8009048:	f7ff ba34 	b.w	80084b4 <_svfprintf_r+0x394>
 800904c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800904e:	eba3 0308 	sub.w	r3, r3, r8
 8009052:	9303      	str	r3, [sp, #12]
 8009054:	f7ff bab5 	b.w	80085c2 <_svfprintf_r+0x4a2>
 8009058:	ea56 0207 	orrs.w	r2, r6, r7
 800905c:	950b      	str	r5, [sp, #44]	; 0x2c
 800905e:	f43f ac2b 	beq.w	80088b8 <_svfprintf_r+0x798>
 8009062:	2b01      	cmp	r3, #1
 8009064:	f43f ac9d 	beq.w	80089a2 <_svfprintf_r+0x882>
 8009068:	2b02      	cmp	r3, #2
 800906a:	f43f acbd 	beq.w	80089e8 <_svfprintf_r+0x8c8>
 800906e:	ab2c      	add	r3, sp, #176	; 0xb0
 8009070:	08f1      	lsrs	r1, r6, #3
 8009072:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8009076:	08f8      	lsrs	r0, r7, #3
 8009078:	f006 0207 	and.w	r2, r6, #7
 800907c:	4607      	mov	r7, r0
 800907e:	460e      	mov	r6, r1
 8009080:	3230      	adds	r2, #48	; 0x30
 8009082:	ea56 0107 	orrs.w	r1, r6, r7
 8009086:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800908a:	f803 2c01 	strb.w	r2, [r3, #-1]
 800908e:	f47f ac86 	bne.w	800899e <_svfprintf_r+0x87e>
 8009092:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009094:	07c9      	lsls	r1, r1, #31
 8009096:	d506      	bpl.n	80090a6 <_svfprintf_r+0xf86>
 8009098:	2a30      	cmp	r2, #48	; 0x30
 800909a:	d004      	beq.n	80090a6 <_svfprintf_r+0xf86>
 800909c:	2230      	movs	r2, #48	; 0x30
 800909e:	f808 2c01 	strb.w	r2, [r8, #-1]
 80090a2:	f1a3 0802 	sub.w	r8, r3, #2
 80090a6:	464e      	mov	r6, r9
 80090a8:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80090ac:	eba9 0908 	sub.w	r9, r9, r8
 80090b0:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80090b2:	2700      	movs	r7, #0
 80090b4:	f7ff bad1 	b.w	800865a <_svfprintf_r+0x53a>
 80090b8:	0800ba1c 	.word	0x0800ba1c
 80090bc:	0800ba0c 	.word	0x0800ba0c
 80090c0:	0800b9e0 	.word	0x0800b9e0
 80090c4:	0800b9e4 	.word	0x0800b9e4

080090c8 <quorem>:
 80090c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090cc:	6903      	ldr	r3, [r0, #16]
 80090ce:	690c      	ldr	r4, [r1, #16]
 80090d0:	429c      	cmp	r4, r3
 80090d2:	4680      	mov	r8, r0
 80090d4:	f300 8082 	bgt.w	80091dc <quorem+0x114>
 80090d8:	3c01      	subs	r4, #1
 80090da:	f101 0714 	add.w	r7, r1, #20
 80090de:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80090e2:	f100 0614 	add.w	r6, r0, #20
 80090e6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80090ea:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80090ee:	eb06 030e 	add.w	r3, r6, lr
 80090f2:	3501      	adds	r5, #1
 80090f4:	eb07 090e 	add.w	r9, r7, lr
 80090f8:	9301      	str	r3, [sp, #4]
 80090fa:	fbb0 f5f5 	udiv	r5, r0, r5
 80090fe:	b395      	cbz	r5, 8009166 <quorem+0x9e>
 8009100:	f04f 0a00 	mov.w	sl, #0
 8009104:	4638      	mov	r0, r7
 8009106:	46b4      	mov	ip, r6
 8009108:	46d3      	mov	fp, sl
 800910a:	f850 2b04 	ldr.w	r2, [r0], #4
 800910e:	b293      	uxth	r3, r2
 8009110:	fb05 a303 	mla	r3, r5, r3, sl
 8009114:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009118:	b29b      	uxth	r3, r3
 800911a:	ebab 0303 	sub.w	r3, fp, r3
 800911e:	0c12      	lsrs	r2, r2, #16
 8009120:	f8bc b000 	ldrh.w	fp, [ip]
 8009124:	fb05 a202 	mla	r2, r5, r2, sl
 8009128:	fa13 f38b 	uxtah	r3, r3, fp
 800912c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009130:	fa1f fb82 	uxth.w	fp, r2
 8009134:	f8dc 2000 	ldr.w	r2, [ip]
 8009138:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800913c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009140:	b29b      	uxth	r3, r3
 8009142:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009146:	4581      	cmp	r9, r0
 8009148:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800914c:	f84c 3b04 	str.w	r3, [ip], #4
 8009150:	d2db      	bcs.n	800910a <quorem+0x42>
 8009152:	f856 300e 	ldr.w	r3, [r6, lr]
 8009156:	b933      	cbnz	r3, 8009166 <quorem+0x9e>
 8009158:	9b01      	ldr	r3, [sp, #4]
 800915a:	3b04      	subs	r3, #4
 800915c:	429e      	cmp	r6, r3
 800915e:	461a      	mov	r2, r3
 8009160:	d330      	bcc.n	80091c4 <quorem+0xfc>
 8009162:	f8c8 4010 	str.w	r4, [r8, #16]
 8009166:	4640      	mov	r0, r8
 8009168:	f001 fa63 	bl	800a632 <__mcmp>
 800916c:	2800      	cmp	r0, #0
 800916e:	db25      	blt.n	80091bc <quorem+0xf4>
 8009170:	3501      	adds	r5, #1
 8009172:	4630      	mov	r0, r6
 8009174:	f04f 0e00 	mov.w	lr, #0
 8009178:	f857 2b04 	ldr.w	r2, [r7], #4
 800917c:	f8d0 c000 	ldr.w	ip, [r0]
 8009180:	b293      	uxth	r3, r2
 8009182:	ebae 0303 	sub.w	r3, lr, r3
 8009186:	0c12      	lsrs	r2, r2, #16
 8009188:	fa13 f38c 	uxtah	r3, r3, ip
 800918c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009190:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009194:	b29b      	uxth	r3, r3
 8009196:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800919a:	45b9      	cmp	r9, r7
 800919c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80091a0:	f840 3b04 	str.w	r3, [r0], #4
 80091a4:	d2e8      	bcs.n	8009178 <quorem+0xb0>
 80091a6:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80091aa:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80091ae:	b92a      	cbnz	r2, 80091bc <quorem+0xf4>
 80091b0:	3b04      	subs	r3, #4
 80091b2:	429e      	cmp	r6, r3
 80091b4:	461a      	mov	r2, r3
 80091b6:	d30b      	bcc.n	80091d0 <quorem+0x108>
 80091b8:	f8c8 4010 	str.w	r4, [r8, #16]
 80091bc:	4628      	mov	r0, r5
 80091be:	b003      	add	sp, #12
 80091c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091c4:	6812      	ldr	r2, [r2, #0]
 80091c6:	3b04      	subs	r3, #4
 80091c8:	2a00      	cmp	r2, #0
 80091ca:	d1ca      	bne.n	8009162 <quorem+0x9a>
 80091cc:	3c01      	subs	r4, #1
 80091ce:	e7c5      	b.n	800915c <quorem+0x94>
 80091d0:	6812      	ldr	r2, [r2, #0]
 80091d2:	3b04      	subs	r3, #4
 80091d4:	2a00      	cmp	r2, #0
 80091d6:	d1ef      	bne.n	80091b8 <quorem+0xf0>
 80091d8:	3c01      	subs	r4, #1
 80091da:	e7ea      	b.n	80091b2 <quorem+0xea>
 80091dc:	2000      	movs	r0, #0
 80091de:	e7ee      	b.n	80091be <quorem+0xf6>

080091e0 <_dtoa_r>:
 80091e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e4:	ec57 6b10 	vmov	r6, r7, d0
 80091e8:	b097      	sub	sp, #92	; 0x5c
 80091ea:	e9cd 6700 	strd	r6, r7, [sp]
 80091ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80091f0:	9107      	str	r1, [sp, #28]
 80091f2:	4604      	mov	r4, r0
 80091f4:	920a      	str	r2, [sp, #40]	; 0x28
 80091f6:	930f      	str	r3, [sp, #60]	; 0x3c
 80091f8:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80091fa:	b93e      	cbnz	r6, 800920c <_dtoa_r+0x2c>
 80091fc:	2010      	movs	r0, #16
 80091fe:	f000 fdcf 	bl	8009da0 <malloc>
 8009202:	6260      	str	r0, [r4, #36]	; 0x24
 8009204:	6046      	str	r6, [r0, #4]
 8009206:	6086      	str	r6, [r0, #8]
 8009208:	6006      	str	r6, [r0, #0]
 800920a:	60c6      	str	r6, [r0, #12]
 800920c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800920e:	6819      	ldr	r1, [r3, #0]
 8009210:	b151      	cbz	r1, 8009228 <_dtoa_r+0x48>
 8009212:	685a      	ldr	r2, [r3, #4]
 8009214:	604a      	str	r2, [r1, #4]
 8009216:	2301      	movs	r3, #1
 8009218:	4093      	lsls	r3, r2
 800921a:	608b      	str	r3, [r1, #8]
 800921c:	4620      	mov	r0, r4
 800921e:	f001 f833 	bl	800a288 <_Bfree>
 8009222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009224:	2200      	movs	r2, #0
 8009226:	601a      	str	r2, [r3, #0]
 8009228:	9b01      	ldr	r3, [sp, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	bfbf      	itttt	lt
 800922e:	2301      	movlt	r3, #1
 8009230:	602b      	strlt	r3, [r5, #0]
 8009232:	9b01      	ldrlt	r3, [sp, #4]
 8009234:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009238:	bfb2      	itee	lt
 800923a:	9301      	strlt	r3, [sp, #4]
 800923c:	2300      	movge	r3, #0
 800923e:	602b      	strge	r3, [r5, #0]
 8009240:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009244:	4ba8      	ldr	r3, [pc, #672]	; (80094e8 <_dtoa_r+0x308>)
 8009246:	ea33 0308 	bics.w	r3, r3, r8
 800924a:	d11b      	bne.n	8009284 <_dtoa_r+0xa4>
 800924c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800924e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009252:	6013      	str	r3, [r2, #0]
 8009254:	9b00      	ldr	r3, [sp, #0]
 8009256:	b923      	cbnz	r3, 8009262 <_dtoa_r+0x82>
 8009258:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800925c:	2800      	cmp	r0, #0
 800925e:	f000 8578 	beq.w	8009d52 <_dtoa_r+0xb72>
 8009262:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009264:	b953      	cbnz	r3, 800927c <_dtoa_r+0x9c>
 8009266:	4ba1      	ldr	r3, [pc, #644]	; (80094ec <_dtoa_r+0x30c>)
 8009268:	e021      	b.n	80092ae <_dtoa_r+0xce>
 800926a:	4ba1      	ldr	r3, [pc, #644]	; (80094f0 <_dtoa_r+0x310>)
 800926c:	9302      	str	r3, [sp, #8]
 800926e:	3308      	adds	r3, #8
 8009270:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009272:	6013      	str	r3, [r2, #0]
 8009274:	9802      	ldr	r0, [sp, #8]
 8009276:	b017      	add	sp, #92	; 0x5c
 8009278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800927c:	4b9b      	ldr	r3, [pc, #620]	; (80094ec <_dtoa_r+0x30c>)
 800927e:	9302      	str	r3, [sp, #8]
 8009280:	3303      	adds	r3, #3
 8009282:	e7f5      	b.n	8009270 <_dtoa_r+0x90>
 8009284:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009288:	2200      	movs	r2, #0
 800928a:	2300      	movs	r3, #0
 800928c:	4630      	mov	r0, r6
 800928e:	4639      	mov	r1, r7
 8009290:	f7f7 fc1e 	bl	8000ad0 <__aeabi_dcmpeq>
 8009294:	4681      	mov	r9, r0
 8009296:	b160      	cbz	r0, 80092b2 <_dtoa_r+0xd2>
 8009298:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800929a:	2301      	movs	r3, #1
 800929c:	6013      	str	r3, [r2, #0]
 800929e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	f000 8553 	beq.w	8009d4c <_dtoa_r+0xb6c>
 80092a6:	4b93      	ldr	r3, [pc, #588]	; (80094f4 <_dtoa_r+0x314>)
 80092a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80092aa:	6013      	str	r3, [r2, #0]
 80092ac:	3b01      	subs	r3, #1
 80092ae:	9302      	str	r3, [sp, #8]
 80092b0:	e7e0      	b.n	8009274 <_dtoa_r+0x94>
 80092b2:	aa14      	add	r2, sp, #80	; 0x50
 80092b4:	a915      	add	r1, sp, #84	; 0x54
 80092b6:	ec47 6b10 	vmov	d0, r6, r7
 80092ba:	4620      	mov	r0, r4
 80092bc:	f001 fa31 	bl	800a722 <__d2b>
 80092c0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80092c4:	4682      	mov	sl, r0
 80092c6:	2d00      	cmp	r5, #0
 80092c8:	d07e      	beq.n	80093c8 <_dtoa_r+0x1e8>
 80092ca:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80092ce:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80092d2:	4630      	mov	r0, r6
 80092d4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80092d8:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80092dc:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 80092e0:	2200      	movs	r2, #0
 80092e2:	4b85      	ldr	r3, [pc, #532]	; (80094f8 <_dtoa_r+0x318>)
 80092e4:	f7f6 ffd8 	bl	8000298 <__aeabi_dsub>
 80092e8:	a379      	add	r3, pc, #484	; (adr r3, 80094d0 <_dtoa_r+0x2f0>)
 80092ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ee:	f7f7 f987 	bl	8000600 <__aeabi_dmul>
 80092f2:	a379      	add	r3, pc, #484	; (adr r3, 80094d8 <_dtoa_r+0x2f8>)
 80092f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092f8:	f7f6 ffd0 	bl	800029c <__adddf3>
 80092fc:	4606      	mov	r6, r0
 80092fe:	4628      	mov	r0, r5
 8009300:	460f      	mov	r7, r1
 8009302:	f7f7 f917 	bl	8000534 <__aeabi_i2d>
 8009306:	a376      	add	r3, pc, #472	; (adr r3, 80094e0 <_dtoa_r+0x300>)
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	f7f7 f978 	bl	8000600 <__aeabi_dmul>
 8009310:	4602      	mov	r2, r0
 8009312:	460b      	mov	r3, r1
 8009314:	4630      	mov	r0, r6
 8009316:	4639      	mov	r1, r7
 8009318:	f7f6 ffc0 	bl	800029c <__adddf3>
 800931c:	4606      	mov	r6, r0
 800931e:	460f      	mov	r7, r1
 8009320:	f7f7 fc1e 	bl	8000b60 <__aeabi_d2iz>
 8009324:	2200      	movs	r2, #0
 8009326:	4683      	mov	fp, r0
 8009328:	2300      	movs	r3, #0
 800932a:	4630      	mov	r0, r6
 800932c:	4639      	mov	r1, r7
 800932e:	f7f7 fbd9 	bl	8000ae4 <__aeabi_dcmplt>
 8009332:	b158      	cbz	r0, 800934c <_dtoa_r+0x16c>
 8009334:	4658      	mov	r0, fp
 8009336:	f7f7 f8fd 	bl	8000534 <__aeabi_i2d>
 800933a:	4602      	mov	r2, r0
 800933c:	460b      	mov	r3, r1
 800933e:	4630      	mov	r0, r6
 8009340:	4639      	mov	r1, r7
 8009342:	f7f7 fbc5 	bl	8000ad0 <__aeabi_dcmpeq>
 8009346:	b908      	cbnz	r0, 800934c <_dtoa_r+0x16c>
 8009348:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800934c:	f1bb 0f16 	cmp.w	fp, #22
 8009350:	d859      	bhi.n	8009406 <_dtoa_r+0x226>
 8009352:	496a      	ldr	r1, [pc, #424]	; (80094fc <_dtoa_r+0x31c>)
 8009354:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8009358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800935c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009360:	f7f7 fbde 	bl	8000b20 <__aeabi_dcmpgt>
 8009364:	2800      	cmp	r0, #0
 8009366:	d050      	beq.n	800940a <_dtoa_r+0x22a>
 8009368:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800936c:	2300      	movs	r3, #0
 800936e:	930e      	str	r3, [sp, #56]	; 0x38
 8009370:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009372:	1b5d      	subs	r5, r3, r5
 8009374:	1e6b      	subs	r3, r5, #1
 8009376:	9306      	str	r3, [sp, #24]
 8009378:	bf45      	ittet	mi
 800937a:	f1c5 0301 	rsbmi	r3, r5, #1
 800937e:	9305      	strmi	r3, [sp, #20]
 8009380:	2300      	movpl	r3, #0
 8009382:	2300      	movmi	r3, #0
 8009384:	bf4c      	ite	mi
 8009386:	9306      	strmi	r3, [sp, #24]
 8009388:	9305      	strpl	r3, [sp, #20]
 800938a:	f1bb 0f00 	cmp.w	fp, #0
 800938e:	db3e      	blt.n	800940e <_dtoa_r+0x22e>
 8009390:	9b06      	ldr	r3, [sp, #24]
 8009392:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8009396:	445b      	add	r3, fp
 8009398:	9306      	str	r3, [sp, #24]
 800939a:	2300      	movs	r3, #0
 800939c:	9308      	str	r3, [sp, #32]
 800939e:	9b07      	ldr	r3, [sp, #28]
 80093a0:	2b09      	cmp	r3, #9
 80093a2:	f200 80af 	bhi.w	8009504 <_dtoa_r+0x324>
 80093a6:	2b05      	cmp	r3, #5
 80093a8:	bfc4      	itt	gt
 80093aa:	3b04      	subgt	r3, #4
 80093ac:	9307      	strgt	r3, [sp, #28]
 80093ae:	9b07      	ldr	r3, [sp, #28]
 80093b0:	f1a3 0302 	sub.w	r3, r3, #2
 80093b4:	bfcc      	ite	gt
 80093b6:	2600      	movgt	r6, #0
 80093b8:	2601      	movle	r6, #1
 80093ba:	2b03      	cmp	r3, #3
 80093bc:	f200 80ae 	bhi.w	800951c <_dtoa_r+0x33c>
 80093c0:	e8df f003 	tbb	[pc, r3]
 80093c4:	772f8482 	.word	0x772f8482
 80093c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80093ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80093cc:	441d      	add	r5, r3
 80093ce:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80093d2:	2b20      	cmp	r3, #32
 80093d4:	dd11      	ble.n	80093fa <_dtoa_r+0x21a>
 80093d6:	9a00      	ldr	r2, [sp, #0]
 80093d8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80093dc:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80093e0:	fa22 f000 	lsr.w	r0, r2, r0
 80093e4:	fa08 f303 	lsl.w	r3, r8, r3
 80093e8:	4318      	orrs	r0, r3
 80093ea:	f7f7 f893 	bl	8000514 <__aeabi_ui2d>
 80093ee:	2301      	movs	r3, #1
 80093f0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80093f4:	3d01      	subs	r5, #1
 80093f6:	9312      	str	r3, [sp, #72]	; 0x48
 80093f8:	e772      	b.n	80092e0 <_dtoa_r+0x100>
 80093fa:	f1c3 0020 	rsb	r0, r3, #32
 80093fe:	9b00      	ldr	r3, [sp, #0]
 8009400:	fa03 f000 	lsl.w	r0, r3, r0
 8009404:	e7f1      	b.n	80093ea <_dtoa_r+0x20a>
 8009406:	2301      	movs	r3, #1
 8009408:	e7b1      	b.n	800936e <_dtoa_r+0x18e>
 800940a:	900e      	str	r0, [sp, #56]	; 0x38
 800940c:	e7b0      	b.n	8009370 <_dtoa_r+0x190>
 800940e:	9b05      	ldr	r3, [sp, #20]
 8009410:	eba3 030b 	sub.w	r3, r3, fp
 8009414:	9305      	str	r3, [sp, #20]
 8009416:	f1cb 0300 	rsb	r3, fp, #0
 800941a:	9308      	str	r3, [sp, #32]
 800941c:	2300      	movs	r3, #0
 800941e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009420:	e7bd      	b.n	800939e <_dtoa_r+0x1be>
 8009422:	2301      	movs	r3, #1
 8009424:	9309      	str	r3, [sp, #36]	; 0x24
 8009426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009428:	2b00      	cmp	r3, #0
 800942a:	dd7a      	ble.n	8009522 <_dtoa_r+0x342>
 800942c:	9304      	str	r3, [sp, #16]
 800942e:	9303      	str	r3, [sp, #12]
 8009430:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009432:	2200      	movs	r2, #0
 8009434:	606a      	str	r2, [r5, #4]
 8009436:	2104      	movs	r1, #4
 8009438:	f101 0214 	add.w	r2, r1, #20
 800943c:	429a      	cmp	r2, r3
 800943e:	d975      	bls.n	800952c <_dtoa_r+0x34c>
 8009440:	6869      	ldr	r1, [r5, #4]
 8009442:	4620      	mov	r0, r4
 8009444:	f000 feec 	bl	800a220 <_Balloc>
 8009448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800944a:	6028      	str	r0, [r5, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	9302      	str	r3, [sp, #8]
 8009450:	9b03      	ldr	r3, [sp, #12]
 8009452:	2b0e      	cmp	r3, #14
 8009454:	f200 80e5 	bhi.w	8009622 <_dtoa_r+0x442>
 8009458:	2e00      	cmp	r6, #0
 800945a:	f000 80e2 	beq.w	8009622 <_dtoa_r+0x442>
 800945e:	ed9d 7b00 	vldr	d7, [sp]
 8009462:	f1bb 0f00 	cmp.w	fp, #0
 8009466:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800946a:	dd74      	ble.n	8009556 <_dtoa_r+0x376>
 800946c:	4a23      	ldr	r2, [pc, #140]	; (80094fc <_dtoa_r+0x31c>)
 800946e:	f00b 030f 	and.w	r3, fp, #15
 8009472:	ea4f 162b 	mov.w	r6, fp, asr #4
 8009476:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800947a:	06f0      	lsls	r0, r6, #27
 800947c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009480:	d559      	bpl.n	8009536 <_dtoa_r+0x356>
 8009482:	4b1f      	ldr	r3, [pc, #124]	; (8009500 <_dtoa_r+0x320>)
 8009484:	ec51 0b17 	vmov	r0, r1, d7
 8009488:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800948c:	f7f7 f9e2 	bl	8000854 <__aeabi_ddiv>
 8009490:	e9cd 0100 	strd	r0, r1, [sp]
 8009494:	f006 060f 	and.w	r6, r6, #15
 8009498:	2503      	movs	r5, #3
 800949a:	4f19      	ldr	r7, [pc, #100]	; (8009500 <_dtoa_r+0x320>)
 800949c:	2e00      	cmp	r6, #0
 800949e:	d14c      	bne.n	800953a <_dtoa_r+0x35a>
 80094a0:	4642      	mov	r2, r8
 80094a2:	464b      	mov	r3, r9
 80094a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094a8:	f7f7 f9d4 	bl	8000854 <__aeabi_ddiv>
 80094ac:	e9cd 0100 	strd	r0, r1, [sp]
 80094b0:	e06a      	b.n	8009588 <_dtoa_r+0x3a8>
 80094b2:	2301      	movs	r3, #1
 80094b4:	9309      	str	r3, [sp, #36]	; 0x24
 80094b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094b8:	445b      	add	r3, fp
 80094ba:	9304      	str	r3, [sp, #16]
 80094bc:	3301      	adds	r3, #1
 80094be:	2b01      	cmp	r3, #1
 80094c0:	9303      	str	r3, [sp, #12]
 80094c2:	bfb8      	it	lt
 80094c4:	2301      	movlt	r3, #1
 80094c6:	e7b3      	b.n	8009430 <_dtoa_r+0x250>
 80094c8:	2300      	movs	r3, #0
 80094ca:	e7ab      	b.n	8009424 <_dtoa_r+0x244>
 80094cc:	2300      	movs	r3, #0
 80094ce:	e7f1      	b.n	80094b4 <_dtoa_r+0x2d4>
 80094d0:	636f4361 	.word	0x636f4361
 80094d4:	3fd287a7 	.word	0x3fd287a7
 80094d8:	8b60c8b3 	.word	0x8b60c8b3
 80094dc:	3fc68a28 	.word	0x3fc68a28
 80094e0:	509f79fb 	.word	0x509f79fb
 80094e4:	3fd34413 	.word	0x3fd34413
 80094e8:	7ff00000 	.word	0x7ff00000
 80094ec:	0800ba35 	.word	0x0800ba35
 80094f0:	0800ba2c 	.word	0x0800ba2c
 80094f4:	0800ba0b 	.word	0x0800ba0b
 80094f8:	3ff80000 	.word	0x3ff80000
 80094fc:	0800ba70 	.word	0x0800ba70
 8009500:	0800ba48 	.word	0x0800ba48
 8009504:	2601      	movs	r6, #1
 8009506:	2300      	movs	r3, #0
 8009508:	9307      	str	r3, [sp, #28]
 800950a:	9609      	str	r6, [sp, #36]	; 0x24
 800950c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009510:	9304      	str	r3, [sp, #16]
 8009512:	9303      	str	r3, [sp, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	2312      	movs	r3, #18
 8009518:	920a      	str	r2, [sp, #40]	; 0x28
 800951a:	e789      	b.n	8009430 <_dtoa_r+0x250>
 800951c:	2301      	movs	r3, #1
 800951e:	9309      	str	r3, [sp, #36]	; 0x24
 8009520:	e7f4      	b.n	800950c <_dtoa_r+0x32c>
 8009522:	2301      	movs	r3, #1
 8009524:	9304      	str	r3, [sp, #16]
 8009526:	9303      	str	r3, [sp, #12]
 8009528:	461a      	mov	r2, r3
 800952a:	e7f5      	b.n	8009518 <_dtoa_r+0x338>
 800952c:	686a      	ldr	r2, [r5, #4]
 800952e:	3201      	adds	r2, #1
 8009530:	606a      	str	r2, [r5, #4]
 8009532:	0049      	lsls	r1, r1, #1
 8009534:	e780      	b.n	8009438 <_dtoa_r+0x258>
 8009536:	2502      	movs	r5, #2
 8009538:	e7af      	b.n	800949a <_dtoa_r+0x2ba>
 800953a:	07f1      	lsls	r1, r6, #31
 800953c:	d508      	bpl.n	8009550 <_dtoa_r+0x370>
 800953e:	4640      	mov	r0, r8
 8009540:	4649      	mov	r1, r9
 8009542:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009546:	f7f7 f85b 	bl	8000600 <__aeabi_dmul>
 800954a:	3501      	adds	r5, #1
 800954c:	4680      	mov	r8, r0
 800954e:	4689      	mov	r9, r1
 8009550:	1076      	asrs	r6, r6, #1
 8009552:	3708      	adds	r7, #8
 8009554:	e7a2      	b.n	800949c <_dtoa_r+0x2bc>
 8009556:	f000 809d 	beq.w	8009694 <_dtoa_r+0x4b4>
 800955a:	f1cb 0600 	rsb	r6, fp, #0
 800955e:	4b9f      	ldr	r3, [pc, #636]	; (80097dc <_dtoa_r+0x5fc>)
 8009560:	4f9f      	ldr	r7, [pc, #636]	; (80097e0 <_dtoa_r+0x600>)
 8009562:	f006 020f 	and.w	r2, r6, #15
 8009566:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800956a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800956e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009572:	f7f7 f845 	bl	8000600 <__aeabi_dmul>
 8009576:	e9cd 0100 	strd	r0, r1, [sp]
 800957a:	1136      	asrs	r6, r6, #4
 800957c:	2300      	movs	r3, #0
 800957e:	2502      	movs	r5, #2
 8009580:	2e00      	cmp	r6, #0
 8009582:	d17c      	bne.n	800967e <_dtoa_r+0x49e>
 8009584:	2b00      	cmp	r3, #0
 8009586:	d191      	bne.n	80094ac <_dtoa_r+0x2cc>
 8009588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800958a:	2b00      	cmp	r3, #0
 800958c:	f000 8084 	beq.w	8009698 <_dtoa_r+0x4b8>
 8009590:	e9dd 8900 	ldrd	r8, r9, [sp]
 8009594:	2200      	movs	r2, #0
 8009596:	4b93      	ldr	r3, [pc, #588]	; (80097e4 <_dtoa_r+0x604>)
 8009598:	4640      	mov	r0, r8
 800959a:	4649      	mov	r1, r9
 800959c:	f7f7 faa2 	bl	8000ae4 <__aeabi_dcmplt>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d079      	beq.n	8009698 <_dtoa_r+0x4b8>
 80095a4:	9b03      	ldr	r3, [sp, #12]
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d076      	beq.n	8009698 <_dtoa_r+0x4b8>
 80095aa:	9b04      	ldr	r3, [sp, #16]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	dd34      	ble.n	800961a <_dtoa_r+0x43a>
 80095b0:	2200      	movs	r2, #0
 80095b2:	4b8d      	ldr	r3, [pc, #564]	; (80097e8 <_dtoa_r+0x608>)
 80095b4:	4640      	mov	r0, r8
 80095b6:	4649      	mov	r1, r9
 80095b8:	f7f7 f822 	bl	8000600 <__aeabi_dmul>
 80095bc:	e9cd 0100 	strd	r0, r1, [sp]
 80095c0:	9e04      	ldr	r6, [sp, #16]
 80095c2:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80095c6:	3501      	adds	r5, #1
 80095c8:	4628      	mov	r0, r5
 80095ca:	f7f6 ffb3 	bl	8000534 <__aeabi_i2d>
 80095ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095d2:	f7f7 f815 	bl	8000600 <__aeabi_dmul>
 80095d6:	2200      	movs	r2, #0
 80095d8:	4b84      	ldr	r3, [pc, #528]	; (80097ec <_dtoa_r+0x60c>)
 80095da:	f7f6 fe5f 	bl	800029c <__adddf3>
 80095de:	4680      	mov	r8, r0
 80095e0:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 80095e4:	2e00      	cmp	r6, #0
 80095e6:	d15a      	bne.n	800969e <_dtoa_r+0x4be>
 80095e8:	2200      	movs	r2, #0
 80095ea:	4b81      	ldr	r3, [pc, #516]	; (80097f0 <_dtoa_r+0x610>)
 80095ec:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095f0:	f7f6 fe52 	bl	8000298 <__aeabi_dsub>
 80095f4:	4642      	mov	r2, r8
 80095f6:	464b      	mov	r3, r9
 80095f8:	e9cd 0100 	strd	r0, r1, [sp]
 80095fc:	f7f7 fa90 	bl	8000b20 <__aeabi_dcmpgt>
 8009600:	2800      	cmp	r0, #0
 8009602:	f040 829b 	bne.w	8009b3c <_dtoa_r+0x95c>
 8009606:	4642      	mov	r2, r8
 8009608:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800960c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009610:	f7f7 fa68 	bl	8000ae4 <__aeabi_dcmplt>
 8009614:	2800      	cmp	r0, #0
 8009616:	f040 828f 	bne.w	8009b38 <_dtoa_r+0x958>
 800961a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800961e:	e9cd 2300 	strd	r2, r3, [sp]
 8009622:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009624:	2b00      	cmp	r3, #0
 8009626:	f2c0 8150 	blt.w	80098ca <_dtoa_r+0x6ea>
 800962a:	f1bb 0f0e 	cmp.w	fp, #14
 800962e:	f300 814c 	bgt.w	80098ca <_dtoa_r+0x6ea>
 8009632:	4b6a      	ldr	r3, [pc, #424]	; (80097dc <_dtoa_r+0x5fc>)
 8009634:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009638:	e9d3 8900 	ldrd	r8, r9, [r3]
 800963c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800963e:	2b00      	cmp	r3, #0
 8009640:	f280 80da 	bge.w	80097f8 <_dtoa_r+0x618>
 8009644:	9b03      	ldr	r3, [sp, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	f300 80d6 	bgt.w	80097f8 <_dtoa_r+0x618>
 800964c:	f040 8273 	bne.w	8009b36 <_dtoa_r+0x956>
 8009650:	2200      	movs	r2, #0
 8009652:	4b67      	ldr	r3, [pc, #412]	; (80097f0 <_dtoa_r+0x610>)
 8009654:	4640      	mov	r0, r8
 8009656:	4649      	mov	r1, r9
 8009658:	f7f6 ffd2 	bl	8000600 <__aeabi_dmul>
 800965c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009660:	f7f7 fa54 	bl	8000b0c <__aeabi_dcmpge>
 8009664:	9e03      	ldr	r6, [sp, #12]
 8009666:	4637      	mov	r7, r6
 8009668:	2800      	cmp	r0, #0
 800966a:	f040 824a 	bne.w	8009b02 <_dtoa_r+0x922>
 800966e:	9b02      	ldr	r3, [sp, #8]
 8009670:	9a02      	ldr	r2, [sp, #8]
 8009672:	1c5d      	adds	r5, r3, #1
 8009674:	2331      	movs	r3, #49	; 0x31
 8009676:	7013      	strb	r3, [r2, #0]
 8009678:	f10b 0b01 	add.w	fp, fp, #1
 800967c:	e245      	b.n	8009b0a <_dtoa_r+0x92a>
 800967e:	07f2      	lsls	r2, r6, #31
 8009680:	d505      	bpl.n	800968e <_dtoa_r+0x4ae>
 8009682:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009686:	f7f6 ffbb 	bl	8000600 <__aeabi_dmul>
 800968a:	3501      	adds	r5, #1
 800968c:	2301      	movs	r3, #1
 800968e:	1076      	asrs	r6, r6, #1
 8009690:	3708      	adds	r7, #8
 8009692:	e775      	b.n	8009580 <_dtoa_r+0x3a0>
 8009694:	2502      	movs	r5, #2
 8009696:	e777      	b.n	8009588 <_dtoa_r+0x3a8>
 8009698:	465f      	mov	r7, fp
 800969a:	9e03      	ldr	r6, [sp, #12]
 800969c:	e794      	b.n	80095c8 <_dtoa_r+0x3e8>
 800969e:	9a02      	ldr	r2, [sp, #8]
 80096a0:	4b4e      	ldr	r3, [pc, #312]	; (80097dc <_dtoa_r+0x5fc>)
 80096a2:	4432      	add	r2, r6
 80096a4:	9213      	str	r2, [sp, #76]	; 0x4c
 80096a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096a8:	1e71      	subs	r1, r6, #1
 80096aa:	2a00      	cmp	r2, #0
 80096ac:	d048      	beq.n	8009740 <_dtoa_r+0x560>
 80096ae:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 80096b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096b6:	2000      	movs	r0, #0
 80096b8:	494e      	ldr	r1, [pc, #312]	; (80097f4 <_dtoa_r+0x614>)
 80096ba:	f7f7 f8cb 	bl	8000854 <__aeabi_ddiv>
 80096be:	4642      	mov	r2, r8
 80096c0:	464b      	mov	r3, r9
 80096c2:	f7f6 fde9 	bl	8000298 <__aeabi_dsub>
 80096c6:	9d02      	ldr	r5, [sp, #8]
 80096c8:	4680      	mov	r8, r0
 80096ca:	4689      	mov	r9, r1
 80096cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096d0:	f7f7 fa46 	bl	8000b60 <__aeabi_d2iz>
 80096d4:	4606      	mov	r6, r0
 80096d6:	f7f6 ff2d 	bl	8000534 <__aeabi_i2d>
 80096da:	4602      	mov	r2, r0
 80096dc:	460b      	mov	r3, r1
 80096de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096e2:	f7f6 fdd9 	bl	8000298 <__aeabi_dsub>
 80096e6:	3630      	adds	r6, #48	; 0x30
 80096e8:	f805 6b01 	strb.w	r6, [r5], #1
 80096ec:	4642      	mov	r2, r8
 80096ee:	464b      	mov	r3, r9
 80096f0:	e9cd 0100 	strd	r0, r1, [sp]
 80096f4:	f7f7 f9f6 	bl	8000ae4 <__aeabi_dcmplt>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d165      	bne.n	80097c8 <_dtoa_r+0x5e8>
 80096fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009700:	2000      	movs	r0, #0
 8009702:	4938      	ldr	r1, [pc, #224]	; (80097e4 <_dtoa_r+0x604>)
 8009704:	f7f6 fdc8 	bl	8000298 <__aeabi_dsub>
 8009708:	4642      	mov	r2, r8
 800970a:	464b      	mov	r3, r9
 800970c:	f7f7 f9ea 	bl	8000ae4 <__aeabi_dcmplt>
 8009710:	2800      	cmp	r0, #0
 8009712:	f040 80ba 	bne.w	800988a <_dtoa_r+0x6aa>
 8009716:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009718:	429d      	cmp	r5, r3
 800971a:	f43f af7e 	beq.w	800961a <_dtoa_r+0x43a>
 800971e:	2200      	movs	r2, #0
 8009720:	4b31      	ldr	r3, [pc, #196]	; (80097e8 <_dtoa_r+0x608>)
 8009722:	4640      	mov	r0, r8
 8009724:	4649      	mov	r1, r9
 8009726:	f7f6 ff6b 	bl	8000600 <__aeabi_dmul>
 800972a:	2200      	movs	r2, #0
 800972c:	4680      	mov	r8, r0
 800972e:	4689      	mov	r9, r1
 8009730:	4b2d      	ldr	r3, [pc, #180]	; (80097e8 <_dtoa_r+0x608>)
 8009732:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009736:	f7f6 ff63 	bl	8000600 <__aeabi_dmul>
 800973a:	e9cd 0100 	strd	r0, r1, [sp]
 800973e:	e7c5      	b.n	80096cc <_dtoa_r+0x4ec>
 8009740:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8009744:	4642      	mov	r2, r8
 8009746:	464b      	mov	r3, r9
 8009748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800974c:	f7f6 ff58 	bl	8000600 <__aeabi_dmul>
 8009750:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8009754:	9d02      	ldr	r5, [sp, #8]
 8009756:	e9dd 0100 	ldrd	r0, r1, [sp]
 800975a:	f7f7 fa01 	bl	8000b60 <__aeabi_d2iz>
 800975e:	4606      	mov	r6, r0
 8009760:	f7f6 fee8 	bl	8000534 <__aeabi_i2d>
 8009764:	3630      	adds	r6, #48	; 0x30
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800976e:	f7f6 fd93 	bl	8000298 <__aeabi_dsub>
 8009772:	f805 6b01 	strb.w	r6, [r5], #1
 8009776:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009778:	42ab      	cmp	r3, r5
 800977a:	4680      	mov	r8, r0
 800977c:	4689      	mov	r9, r1
 800977e:	f04f 0200 	mov.w	r2, #0
 8009782:	d125      	bne.n	80097d0 <_dtoa_r+0x5f0>
 8009784:	4b1b      	ldr	r3, [pc, #108]	; (80097f4 <_dtoa_r+0x614>)
 8009786:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800978a:	f7f6 fd87 	bl	800029c <__adddf3>
 800978e:	4602      	mov	r2, r0
 8009790:	460b      	mov	r3, r1
 8009792:	4640      	mov	r0, r8
 8009794:	4649      	mov	r1, r9
 8009796:	f7f7 f9c3 	bl	8000b20 <__aeabi_dcmpgt>
 800979a:	2800      	cmp	r0, #0
 800979c:	d175      	bne.n	800988a <_dtoa_r+0x6aa>
 800979e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80097a2:	2000      	movs	r0, #0
 80097a4:	4913      	ldr	r1, [pc, #76]	; (80097f4 <_dtoa_r+0x614>)
 80097a6:	f7f6 fd77 	bl	8000298 <__aeabi_dsub>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	4640      	mov	r0, r8
 80097b0:	4649      	mov	r1, r9
 80097b2:	f7f7 f997 	bl	8000ae4 <__aeabi_dcmplt>
 80097b6:	2800      	cmp	r0, #0
 80097b8:	f43f af2f 	beq.w	800961a <_dtoa_r+0x43a>
 80097bc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80097c0:	2b30      	cmp	r3, #48	; 0x30
 80097c2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80097c6:	d001      	beq.n	80097cc <_dtoa_r+0x5ec>
 80097c8:	46bb      	mov	fp, r7
 80097ca:	e04d      	b.n	8009868 <_dtoa_r+0x688>
 80097cc:	4615      	mov	r5, r2
 80097ce:	e7f5      	b.n	80097bc <_dtoa_r+0x5dc>
 80097d0:	4b05      	ldr	r3, [pc, #20]	; (80097e8 <_dtoa_r+0x608>)
 80097d2:	f7f6 ff15 	bl	8000600 <__aeabi_dmul>
 80097d6:	e9cd 0100 	strd	r0, r1, [sp]
 80097da:	e7bc      	b.n	8009756 <_dtoa_r+0x576>
 80097dc:	0800ba70 	.word	0x0800ba70
 80097e0:	0800ba48 	.word	0x0800ba48
 80097e4:	3ff00000 	.word	0x3ff00000
 80097e8:	40240000 	.word	0x40240000
 80097ec:	401c0000 	.word	0x401c0000
 80097f0:	40140000 	.word	0x40140000
 80097f4:	3fe00000 	.word	0x3fe00000
 80097f8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80097fc:	9d02      	ldr	r5, [sp, #8]
 80097fe:	4642      	mov	r2, r8
 8009800:	464b      	mov	r3, r9
 8009802:	4630      	mov	r0, r6
 8009804:	4639      	mov	r1, r7
 8009806:	f7f7 f825 	bl	8000854 <__aeabi_ddiv>
 800980a:	f7f7 f9a9 	bl	8000b60 <__aeabi_d2iz>
 800980e:	9000      	str	r0, [sp, #0]
 8009810:	f7f6 fe90 	bl	8000534 <__aeabi_i2d>
 8009814:	4642      	mov	r2, r8
 8009816:	464b      	mov	r3, r9
 8009818:	f7f6 fef2 	bl	8000600 <__aeabi_dmul>
 800981c:	4602      	mov	r2, r0
 800981e:	460b      	mov	r3, r1
 8009820:	4630      	mov	r0, r6
 8009822:	4639      	mov	r1, r7
 8009824:	f7f6 fd38 	bl	8000298 <__aeabi_dsub>
 8009828:	9e00      	ldr	r6, [sp, #0]
 800982a:	9f03      	ldr	r7, [sp, #12]
 800982c:	3630      	adds	r6, #48	; 0x30
 800982e:	f805 6b01 	strb.w	r6, [r5], #1
 8009832:	9e02      	ldr	r6, [sp, #8]
 8009834:	1bae      	subs	r6, r5, r6
 8009836:	42b7      	cmp	r7, r6
 8009838:	4602      	mov	r2, r0
 800983a:	460b      	mov	r3, r1
 800983c:	d138      	bne.n	80098b0 <_dtoa_r+0x6d0>
 800983e:	f7f6 fd2d 	bl	800029c <__adddf3>
 8009842:	4606      	mov	r6, r0
 8009844:	460f      	mov	r7, r1
 8009846:	4602      	mov	r2, r0
 8009848:	460b      	mov	r3, r1
 800984a:	4640      	mov	r0, r8
 800984c:	4649      	mov	r1, r9
 800984e:	f7f7 f949 	bl	8000ae4 <__aeabi_dcmplt>
 8009852:	b9c8      	cbnz	r0, 8009888 <_dtoa_r+0x6a8>
 8009854:	4632      	mov	r2, r6
 8009856:	463b      	mov	r3, r7
 8009858:	4640      	mov	r0, r8
 800985a:	4649      	mov	r1, r9
 800985c:	f7f7 f938 	bl	8000ad0 <__aeabi_dcmpeq>
 8009860:	b110      	cbz	r0, 8009868 <_dtoa_r+0x688>
 8009862:	9b00      	ldr	r3, [sp, #0]
 8009864:	07db      	lsls	r3, r3, #31
 8009866:	d40f      	bmi.n	8009888 <_dtoa_r+0x6a8>
 8009868:	4651      	mov	r1, sl
 800986a:	4620      	mov	r0, r4
 800986c:	f000 fd0c 	bl	800a288 <_Bfree>
 8009870:	2300      	movs	r3, #0
 8009872:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009874:	702b      	strb	r3, [r5, #0]
 8009876:	f10b 0301 	add.w	r3, fp, #1
 800987a:	6013      	str	r3, [r2, #0]
 800987c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800987e:	2b00      	cmp	r3, #0
 8009880:	f43f acf8 	beq.w	8009274 <_dtoa_r+0x94>
 8009884:	601d      	str	r5, [r3, #0]
 8009886:	e4f5      	b.n	8009274 <_dtoa_r+0x94>
 8009888:	465f      	mov	r7, fp
 800988a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800988e:	2a39      	cmp	r2, #57	; 0x39
 8009890:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8009894:	d106      	bne.n	80098a4 <_dtoa_r+0x6c4>
 8009896:	9a02      	ldr	r2, [sp, #8]
 8009898:	429a      	cmp	r2, r3
 800989a:	d107      	bne.n	80098ac <_dtoa_r+0x6cc>
 800989c:	2330      	movs	r3, #48	; 0x30
 800989e:	7013      	strb	r3, [r2, #0]
 80098a0:	3701      	adds	r7, #1
 80098a2:	4613      	mov	r3, r2
 80098a4:	781a      	ldrb	r2, [r3, #0]
 80098a6:	3201      	adds	r2, #1
 80098a8:	701a      	strb	r2, [r3, #0]
 80098aa:	e78d      	b.n	80097c8 <_dtoa_r+0x5e8>
 80098ac:	461d      	mov	r5, r3
 80098ae:	e7ec      	b.n	800988a <_dtoa_r+0x6aa>
 80098b0:	2200      	movs	r2, #0
 80098b2:	4ba4      	ldr	r3, [pc, #656]	; (8009b44 <_dtoa_r+0x964>)
 80098b4:	f7f6 fea4 	bl	8000600 <__aeabi_dmul>
 80098b8:	2200      	movs	r2, #0
 80098ba:	2300      	movs	r3, #0
 80098bc:	4606      	mov	r6, r0
 80098be:	460f      	mov	r7, r1
 80098c0:	f7f7 f906 	bl	8000ad0 <__aeabi_dcmpeq>
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d09a      	beq.n	80097fe <_dtoa_r+0x61e>
 80098c8:	e7ce      	b.n	8009868 <_dtoa_r+0x688>
 80098ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098cc:	2a00      	cmp	r2, #0
 80098ce:	f000 80cd 	beq.w	8009a6c <_dtoa_r+0x88c>
 80098d2:	9a07      	ldr	r2, [sp, #28]
 80098d4:	2a01      	cmp	r2, #1
 80098d6:	f300 80af 	bgt.w	8009a38 <_dtoa_r+0x858>
 80098da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80098dc:	2a00      	cmp	r2, #0
 80098de:	f000 80a7 	beq.w	8009a30 <_dtoa_r+0x850>
 80098e2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80098e6:	9e08      	ldr	r6, [sp, #32]
 80098e8:	9d05      	ldr	r5, [sp, #20]
 80098ea:	9a05      	ldr	r2, [sp, #20]
 80098ec:	441a      	add	r2, r3
 80098ee:	9205      	str	r2, [sp, #20]
 80098f0:	9a06      	ldr	r2, [sp, #24]
 80098f2:	2101      	movs	r1, #1
 80098f4:	441a      	add	r2, r3
 80098f6:	4620      	mov	r0, r4
 80098f8:	9206      	str	r2, [sp, #24]
 80098fa:	f000 fd65 	bl	800a3c8 <__i2b>
 80098fe:	4607      	mov	r7, r0
 8009900:	2d00      	cmp	r5, #0
 8009902:	dd0c      	ble.n	800991e <_dtoa_r+0x73e>
 8009904:	9b06      	ldr	r3, [sp, #24]
 8009906:	2b00      	cmp	r3, #0
 8009908:	dd09      	ble.n	800991e <_dtoa_r+0x73e>
 800990a:	42ab      	cmp	r3, r5
 800990c:	9a05      	ldr	r2, [sp, #20]
 800990e:	bfa8      	it	ge
 8009910:	462b      	movge	r3, r5
 8009912:	1ad2      	subs	r2, r2, r3
 8009914:	9205      	str	r2, [sp, #20]
 8009916:	9a06      	ldr	r2, [sp, #24]
 8009918:	1aed      	subs	r5, r5, r3
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	9306      	str	r3, [sp, #24]
 800991e:	9b08      	ldr	r3, [sp, #32]
 8009920:	b1f3      	cbz	r3, 8009960 <_dtoa_r+0x780>
 8009922:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 80a5 	beq.w	8009a74 <_dtoa_r+0x894>
 800992a:	2e00      	cmp	r6, #0
 800992c:	dd10      	ble.n	8009950 <_dtoa_r+0x770>
 800992e:	4639      	mov	r1, r7
 8009930:	4632      	mov	r2, r6
 8009932:	4620      	mov	r0, r4
 8009934:	f000 fdde 	bl	800a4f4 <__pow5mult>
 8009938:	4652      	mov	r2, sl
 800993a:	4601      	mov	r1, r0
 800993c:	4607      	mov	r7, r0
 800993e:	4620      	mov	r0, r4
 8009940:	f000 fd4b 	bl	800a3da <__multiply>
 8009944:	4651      	mov	r1, sl
 8009946:	4680      	mov	r8, r0
 8009948:	4620      	mov	r0, r4
 800994a:	f000 fc9d 	bl	800a288 <_Bfree>
 800994e:	46c2      	mov	sl, r8
 8009950:	9b08      	ldr	r3, [sp, #32]
 8009952:	1b9a      	subs	r2, r3, r6
 8009954:	d004      	beq.n	8009960 <_dtoa_r+0x780>
 8009956:	4651      	mov	r1, sl
 8009958:	4620      	mov	r0, r4
 800995a:	f000 fdcb 	bl	800a4f4 <__pow5mult>
 800995e:	4682      	mov	sl, r0
 8009960:	2101      	movs	r1, #1
 8009962:	4620      	mov	r0, r4
 8009964:	f000 fd30 	bl	800a3c8 <__i2b>
 8009968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800996a:	2b00      	cmp	r3, #0
 800996c:	4606      	mov	r6, r0
 800996e:	f340 8083 	ble.w	8009a78 <_dtoa_r+0x898>
 8009972:	461a      	mov	r2, r3
 8009974:	4601      	mov	r1, r0
 8009976:	4620      	mov	r0, r4
 8009978:	f000 fdbc 	bl	800a4f4 <__pow5mult>
 800997c:	9b07      	ldr	r3, [sp, #28]
 800997e:	2b01      	cmp	r3, #1
 8009980:	4606      	mov	r6, r0
 8009982:	dd7c      	ble.n	8009a7e <_dtoa_r+0x89e>
 8009984:	f04f 0800 	mov.w	r8, #0
 8009988:	6933      	ldr	r3, [r6, #16]
 800998a:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800998e:	6918      	ldr	r0, [r3, #16]
 8009990:	f000 fccc 	bl	800a32c <__hi0bits>
 8009994:	f1c0 0020 	rsb	r0, r0, #32
 8009998:	9b06      	ldr	r3, [sp, #24]
 800999a:	4418      	add	r0, r3
 800999c:	f010 001f 	ands.w	r0, r0, #31
 80099a0:	f000 8096 	beq.w	8009ad0 <_dtoa_r+0x8f0>
 80099a4:	f1c0 0320 	rsb	r3, r0, #32
 80099a8:	2b04      	cmp	r3, #4
 80099aa:	f340 8087 	ble.w	8009abc <_dtoa_r+0x8dc>
 80099ae:	9b05      	ldr	r3, [sp, #20]
 80099b0:	f1c0 001c 	rsb	r0, r0, #28
 80099b4:	4403      	add	r3, r0
 80099b6:	9305      	str	r3, [sp, #20]
 80099b8:	9b06      	ldr	r3, [sp, #24]
 80099ba:	4405      	add	r5, r0
 80099bc:	4403      	add	r3, r0
 80099be:	9306      	str	r3, [sp, #24]
 80099c0:	9b05      	ldr	r3, [sp, #20]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	dd05      	ble.n	80099d2 <_dtoa_r+0x7f2>
 80099c6:	4651      	mov	r1, sl
 80099c8:	461a      	mov	r2, r3
 80099ca:	4620      	mov	r0, r4
 80099cc:	f000 fde0 	bl	800a590 <__lshift>
 80099d0:	4682      	mov	sl, r0
 80099d2:	9b06      	ldr	r3, [sp, #24]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	dd05      	ble.n	80099e4 <_dtoa_r+0x804>
 80099d8:	4631      	mov	r1, r6
 80099da:	461a      	mov	r2, r3
 80099dc:	4620      	mov	r0, r4
 80099de:	f000 fdd7 	bl	800a590 <__lshift>
 80099e2:	4606      	mov	r6, r0
 80099e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d074      	beq.n	8009ad4 <_dtoa_r+0x8f4>
 80099ea:	4631      	mov	r1, r6
 80099ec:	4650      	mov	r0, sl
 80099ee:	f000 fe20 	bl	800a632 <__mcmp>
 80099f2:	2800      	cmp	r0, #0
 80099f4:	da6e      	bge.n	8009ad4 <_dtoa_r+0x8f4>
 80099f6:	2300      	movs	r3, #0
 80099f8:	4651      	mov	r1, sl
 80099fa:	220a      	movs	r2, #10
 80099fc:	4620      	mov	r0, r4
 80099fe:	f000 fc5a 	bl	800a2b6 <__multadd>
 8009a02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a04:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8009a08:	4682      	mov	sl, r0
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	f000 81a8 	beq.w	8009d60 <_dtoa_r+0xb80>
 8009a10:	2300      	movs	r3, #0
 8009a12:	4639      	mov	r1, r7
 8009a14:	220a      	movs	r2, #10
 8009a16:	4620      	mov	r0, r4
 8009a18:	f000 fc4d 	bl	800a2b6 <__multadd>
 8009a1c:	9b04      	ldr	r3, [sp, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	4607      	mov	r7, r0
 8009a22:	f300 80c8 	bgt.w	8009bb6 <_dtoa_r+0x9d6>
 8009a26:	9b07      	ldr	r3, [sp, #28]
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	f340 80c4 	ble.w	8009bb6 <_dtoa_r+0x9d6>
 8009a2e:	e059      	b.n	8009ae4 <_dtoa_r+0x904>
 8009a30:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009a32:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009a36:	e756      	b.n	80098e6 <_dtoa_r+0x706>
 8009a38:	9b03      	ldr	r3, [sp, #12]
 8009a3a:	1e5e      	subs	r6, r3, #1
 8009a3c:	9b08      	ldr	r3, [sp, #32]
 8009a3e:	42b3      	cmp	r3, r6
 8009a40:	bfbf      	itttt	lt
 8009a42:	9b08      	ldrlt	r3, [sp, #32]
 8009a44:	9608      	strlt	r6, [sp, #32]
 8009a46:	1af2      	sublt	r2, r6, r3
 8009a48:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8009a4a:	bfb6      	itet	lt
 8009a4c:	189b      	addlt	r3, r3, r2
 8009a4e:	1b9e      	subge	r6, r3, r6
 8009a50:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8009a52:	9b03      	ldr	r3, [sp, #12]
 8009a54:	bfb8      	it	lt
 8009a56:	2600      	movlt	r6, #0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	bfb9      	ittee	lt
 8009a5c:	9b05      	ldrlt	r3, [sp, #20]
 8009a5e:	9a03      	ldrlt	r2, [sp, #12]
 8009a60:	9d05      	ldrge	r5, [sp, #20]
 8009a62:	9b03      	ldrge	r3, [sp, #12]
 8009a64:	bfbc      	itt	lt
 8009a66:	1a9d      	sublt	r5, r3, r2
 8009a68:	2300      	movlt	r3, #0
 8009a6a:	e73e      	b.n	80098ea <_dtoa_r+0x70a>
 8009a6c:	9e08      	ldr	r6, [sp, #32]
 8009a6e:	9d05      	ldr	r5, [sp, #20]
 8009a70:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009a72:	e745      	b.n	8009900 <_dtoa_r+0x720>
 8009a74:	9a08      	ldr	r2, [sp, #32]
 8009a76:	e76e      	b.n	8009956 <_dtoa_r+0x776>
 8009a78:	9b07      	ldr	r3, [sp, #28]
 8009a7a:	2b01      	cmp	r3, #1
 8009a7c:	dc19      	bgt.n	8009ab2 <_dtoa_r+0x8d2>
 8009a7e:	9b00      	ldr	r3, [sp, #0]
 8009a80:	b9bb      	cbnz	r3, 8009ab2 <_dtoa_r+0x8d2>
 8009a82:	9b01      	ldr	r3, [sp, #4]
 8009a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a88:	b99b      	cbnz	r3, 8009ab2 <_dtoa_r+0x8d2>
 8009a8a:	9b01      	ldr	r3, [sp, #4]
 8009a8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009a90:	0d1b      	lsrs	r3, r3, #20
 8009a92:	051b      	lsls	r3, r3, #20
 8009a94:	b183      	cbz	r3, 8009ab8 <_dtoa_r+0x8d8>
 8009a96:	9b05      	ldr	r3, [sp, #20]
 8009a98:	3301      	adds	r3, #1
 8009a9a:	9305      	str	r3, [sp, #20]
 8009a9c:	9b06      	ldr	r3, [sp, #24]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	9306      	str	r3, [sp, #24]
 8009aa2:	f04f 0801 	mov.w	r8, #1
 8009aa6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	f47f af6d 	bne.w	8009988 <_dtoa_r+0x7a8>
 8009aae:	2001      	movs	r0, #1
 8009ab0:	e772      	b.n	8009998 <_dtoa_r+0x7b8>
 8009ab2:	f04f 0800 	mov.w	r8, #0
 8009ab6:	e7f6      	b.n	8009aa6 <_dtoa_r+0x8c6>
 8009ab8:	4698      	mov	r8, r3
 8009aba:	e7f4      	b.n	8009aa6 <_dtoa_r+0x8c6>
 8009abc:	d080      	beq.n	80099c0 <_dtoa_r+0x7e0>
 8009abe:	9a05      	ldr	r2, [sp, #20]
 8009ac0:	331c      	adds	r3, #28
 8009ac2:	441a      	add	r2, r3
 8009ac4:	9205      	str	r2, [sp, #20]
 8009ac6:	9a06      	ldr	r2, [sp, #24]
 8009ac8:	441a      	add	r2, r3
 8009aca:	441d      	add	r5, r3
 8009acc:	4613      	mov	r3, r2
 8009ace:	e776      	b.n	80099be <_dtoa_r+0x7de>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	e7f4      	b.n	8009abe <_dtoa_r+0x8de>
 8009ad4:	9b03      	ldr	r3, [sp, #12]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	dc36      	bgt.n	8009b48 <_dtoa_r+0x968>
 8009ada:	9b07      	ldr	r3, [sp, #28]
 8009adc:	2b02      	cmp	r3, #2
 8009ade:	dd33      	ble.n	8009b48 <_dtoa_r+0x968>
 8009ae0:	9b03      	ldr	r3, [sp, #12]
 8009ae2:	9304      	str	r3, [sp, #16]
 8009ae4:	9b04      	ldr	r3, [sp, #16]
 8009ae6:	b963      	cbnz	r3, 8009b02 <_dtoa_r+0x922>
 8009ae8:	4631      	mov	r1, r6
 8009aea:	2205      	movs	r2, #5
 8009aec:	4620      	mov	r0, r4
 8009aee:	f000 fbe2 	bl	800a2b6 <__multadd>
 8009af2:	4601      	mov	r1, r0
 8009af4:	4606      	mov	r6, r0
 8009af6:	4650      	mov	r0, sl
 8009af8:	f000 fd9b 	bl	800a632 <__mcmp>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	f73f adb6 	bgt.w	800966e <_dtoa_r+0x48e>
 8009b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b04:	9d02      	ldr	r5, [sp, #8]
 8009b06:	ea6f 0b03 	mvn.w	fp, r3
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	9303      	str	r3, [sp, #12]
 8009b0e:	4631      	mov	r1, r6
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 fbb9 	bl	800a288 <_Bfree>
 8009b16:	2f00      	cmp	r7, #0
 8009b18:	f43f aea6 	beq.w	8009868 <_dtoa_r+0x688>
 8009b1c:	9b03      	ldr	r3, [sp, #12]
 8009b1e:	b12b      	cbz	r3, 8009b2c <_dtoa_r+0x94c>
 8009b20:	42bb      	cmp	r3, r7
 8009b22:	d003      	beq.n	8009b2c <_dtoa_r+0x94c>
 8009b24:	4619      	mov	r1, r3
 8009b26:	4620      	mov	r0, r4
 8009b28:	f000 fbae 	bl	800a288 <_Bfree>
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f000 fbaa 	bl	800a288 <_Bfree>
 8009b34:	e698      	b.n	8009868 <_dtoa_r+0x688>
 8009b36:	2600      	movs	r6, #0
 8009b38:	4637      	mov	r7, r6
 8009b3a:	e7e2      	b.n	8009b02 <_dtoa_r+0x922>
 8009b3c:	46bb      	mov	fp, r7
 8009b3e:	4637      	mov	r7, r6
 8009b40:	e595      	b.n	800966e <_dtoa_r+0x48e>
 8009b42:	bf00      	nop
 8009b44:	40240000 	.word	0x40240000
 8009b48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b4a:	bb93      	cbnz	r3, 8009bb2 <_dtoa_r+0x9d2>
 8009b4c:	9b03      	ldr	r3, [sp, #12]
 8009b4e:	9304      	str	r3, [sp, #16]
 8009b50:	9d02      	ldr	r5, [sp, #8]
 8009b52:	4631      	mov	r1, r6
 8009b54:	4650      	mov	r0, sl
 8009b56:	f7ff fab7 	bl	80090c8 <quorem>
 8009b5a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009b5e:	f805 9b01 	strb.w	r9, [r5], #1
 8009b62:	9b02      	ldr	r3, [sp, #8]
 8009b64:	9a04      	ldr	r2, [sp, #16]
 8009b66:	1aeb      	subs	r3, r5, r3
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	f300 80dc 	bgt.w	8009d26 <_dtoa_r+0xb46>
 8009b6e:	9b02      	ldr	r3, [sp, #8]
 8009b70:	2a01      	cmp	r2, #1
 8009b72:	bfac      	ite	ge
 8009b74:	189b      	addge	r3, r3, r2
 8009b76:	3301      	addlt	r3, #1
 8009b78:	4698      	mov	r8, r3
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	9303      	str	r3, [sp, #12]
 8009b7e:	4651      	mov	r1, sl
 8009b80:	2201      	movs	r2, #1
 8009b82:	4620      	mov	r0, r4
 8009b84:	f000 fd04 	bl	800a590 <__lshift>
 8009b88:	4631      	mov	r1, r6
 8009b8a:	4682      	mov	sl, r0
 8009b8c:	f000 fd51 	bl	800a632 <__mcmp>
 8009b90:	2800      	cmp	r0, #0
 8009b92:	f300 808d 	bgt.w	8009cb0 <_dtoa_r+0xad0>
 8009b96:	d103      	bne.n	8009ba0 <_dtoa_r+0x9c0>
 8009b98:	f019 0f01 	tst.w	r9, #1
 8009b9c:	f040 8088 	bne.w	8009cb0 <_dtoa_r+0xad0>
 8009ba0:	4645      	mov	r5, r8
 8009ba2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009ba6:	2b30      	cmp	r3, #48	; 0x30
 8009ba8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009bac:	d1af      	bne.n	8009b0e <_dtoa_r+0x92e>
 8009bae:	4615      	mov	r5, r2
 8009bb0:	e7f7      	b.n	8009ba2 <_dtoa_r+0x9c2>
 8009bb2:	9b03      	ldr	r3, [sp, #12]
 8009bb4:	9304      	str	r3, [sp, #16]
 8009bb6:	2d00      	cmp	r5, #0
 8009bb8:	dd05      	ble.n	8009bc6 <_dtoa_r+0x9e6>
 8009bba:	4639      	mov	r1, r7
 8009bbc:	462a      	mov	r2, r5
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f000 fce6 	bl	800a590 <__lshift>
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	f1b8 0f00 	cmp.w	r8, #0
 8009bca:	d04c      	beq.n	8009c66 <_dtoa_r+0xa86>
 8009bcc:	6879      	ldr	r1, [r7, #4]
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f000 fb26 	bl	800a220 <_Balloc>
 8009bd4:	693a      	ldr	r2, [r7, #16]
 8009bd6:	3202      	adds	r2, #2
 8009bd8:	4605      	mov	r5, r0
 8009bda:	0092      	lsls	r2, r2, #2
 8009bdc:	f107 010c 	add.w	r1, r7, #12
 8009be0:	300c      	adds	r0, #12
 8009be2:	f000 fb05 	bl	800a1f0 <memcpy>
 8009be6:	2201      	movs	r2, #1
 8009be8:	4629      	mov	r1, r5
 8009bea:	4620      	mov	r0, r4
 8009bec:	f000 fcd0 	bl	800a590 <__lshift>
 8009bf0:	9b00      	ldr	r3, [sp, #0]
 8009bf2:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009bf6:	9703      	str	r7, [sp, #12]
 8009bf8:	f003 0301 	and.w	r3, r3, #1
 8009bfc:	4607      	mov	r7, r0
 8009bfe:	9305      	str	r3, [sp, #20]
 8009c00:	4631      	mov	r1, r6
 8009c02:	4650      	mov	r0, sl
 8009c04:	f7ff fa60 	bl	80090c8 <quorem>
 8009c08:	9903      	ldr	r1, [sp, #12]
 8009c0a:	4605      	mov	r5, r0
 8009c0c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009c10:	4650      	mov	r0, sl
 8009c12:	f000 fd0e 	bl	800a632 <__mcmp>
 8009c16:	463a      	mov	r2, r7
 8009c18:	9000      	str	r0, [sp, #0]
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	f000 fd22 	bl	800a666 <__mdiff>
 8009c22:	68c3      	ldr	r3, [r0, #12]
 8009c24:	4602      	mov	r2, r0
 8009c26:	bb03      	cbnz	r3, 8009c6a <_dtoa_r+0xa8a>
 8009c28:	4601      	mov	r1, r0
 8009c2a:	9006      	str	r0, [sp, #24]
 8009c2c:	4650      	mov	r0, sl
 8009c2e:	f000 fd00 	bl	800a632 <__mcmp>
 8009c32:	9a06      	ldr	r2, [sp, #24]
 8009c34:	4603      	mov	r3, r0
 8009c36:	4611      	mov	r1, r2
 8009c38:	4620      	mov	r0, r4
 8009c3a:	9306      	str	r3, [sp, #24]
 8009c3c:	f000 fb24 	bl	800a288 <_Bfree>
 8009c40:	9b06      	ldr	r3, [sp, #24]
 8009c42:	b9a3      	cbnz	r3, 8009c6e <_dtoa_r+0xa8e>
 8009c44:	9a07      	ldr	r2, [sp, #28]
 8009c46:	b992      	cbnz	r2, 8009c6e <_dtoa_r+0xa8e>
 8009c48:	9a05      	ldr	r2, [sp, #20]
 8009c4a:	b982      	cbnz	r2, 8009c6e <_dtoa_r+0xa8e>
 8009c4c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009c50:	d029      	beq.n	8009ca6 <_dtoa_r+0xac6>
 8009c52:	9b00      	ldr	r3, [sp, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	dd01      	ble.n	8009c5c <_dtoa_r+0xa7c>
 8009c58:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8009c5c:	f108 0501 	add.w	r5, r8, #1
 8009c60:	f888 9000 	strb.w	r9, [r8]
 8009c64:	e753      	b.n	8009b0e <_dtoa_r+0x92e>
 8009c66:	4638      	mov	r0, r7
 8009c68:	e7c2      	b.n	8009bf0 <_dtoa_r+0xa10>
 8009c6a:	2301      	movs	r3, #1
 8009c6c:	e7e3      	b.n	8009c36 <_dtoa_r+0xa56>
 8009c6e:	9a00      	ldr	r2, [sp, #0]
 8009c70:	2a00      	cmp	r2, #0
 8009c72:	db04      	blt.n	8009c7e <_dtoa_r+0xa9e>
 8009c74:	d125      	bne.n	8009cc2 <_dtoa_r+0xae2>
 8009c76:	9a07      	ldr	r2, [sp, #28]
 8009c78:	bb1a      	cbnz	r2, 8009cc2 <_dtoa_r+0xae2>
 8009c7a:	9a05      	ldr	r2, [sp, #20]
 8009c7c:	bb0a      	cbnz	r2, 8009cc2 <_dtoa_r+0xae2>
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	ddec      	ble.n	8009c5c <_dtoa_r+0xa7c>
 8009c82:	4651      	mov	r1, sl
 8009c84:	2201      	movs	r2, #1
 8009c86:	4620      	mov	r0, r4
 8009c88:	f000 fc82 	bl	800a590 <__lshift>
 8009c8c:	4631      	mov	r1, r6
 8009c8e:	4682      	mov	sl, r0
 8009c90:	f000 fccf 	bl	800a632 <__mcmp>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	dc03      	bgt.n	8009ca0 <_dtoa_r+0xac0>
 8009c98:	d1e0      	bne.n	8009c5c <_dtoa_r+0xa7c>
 8009c9a:	f019 0f01 	tst.w	r9, #1
 8009c9e:	d0dd      	beq.n	8009c5c <_dtoa_r+0xa7c>
 8009ca0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009ca4:	d1d8      	bne.n	8009c58 <_dtoa_r+0xa78>
 8009ca6:	2339      	movs	r3, #57	; 0x39
 8009ca8:	f888 3000 	strb.w	r3, [r8]
 8009cac:	f108 0801 	add.w	r8, r8, #1
 8009cb0:	4645      	mov	r5, r8
 8009cb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009cb6:	2b39      	cmp	r3, #57	; 0x39
 8009cb8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8009cbc:	d03b      	beq.n	8009d36 <_dtoa_r+0xb56>
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	e040      	b.n	8009d44 <_dtoa_r+0xb64>
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	f108 0501 	add.w	r5, r8, #1
 8009cc8:	dd05      	ble.n	8009cd6 <_dtoa_r+0xaf6>
 8009cca:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009cce:	d0ea      	beq.n	8009ca6 <_dtoa_r+0xac6>
 8009cd0:	f109 0901 	add.w	r9, r9, #1
 8009cd4:	e7c4      	b.n	8009c60 <_dtoa_r+0xa80>
 8009cd6:	9b02      	ldr	r3, [sp, #8]
 8009cd8:	9a04      	ldr	r2, [sp, #16]
 8009cda:	f805 9c01 	strb.w	r9, [r5, #-1]
 8009cde:	1aeb      	subs	r3, r5, r3
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	46a8      	mov	r8, r5
 8009ce4:	f43f af4b 	beq.w	8009b7e <_dtoa_r+0x99e>
 8009ce8:	4651      	mov	r1, sl
 8009cea:	2300      	movs	r3, #0
 8009cec:	220a      	movs	r2, #10
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 fae1 	bl	800a2b6 <__multadd>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	9903      	ldr	r1, [sp, #12]
 8009cf8:	42bb      	cmp	r3, r7
 8009cfa:	4682      	mov	sl, r0
 8009cfc:	f04f 0300 	mov.w	r3, #0
 8009d00:	f04f 020a 	mov.w	r2, #10
 8009d04:	4620      	mov	r0, r4
 8009d06:	d104      	bne.n	8009d12 <_dtoa_r+0xb32>
 8009d08:	f000 fad5 	bl	800a2b6 <__multadd>
 8009d0c:	9003      	str	r0, [sp, #12]
 8009d0e:	4607      	mov	r7, r0
 8009d10:	e776      	b.n	8009c00 <_dtoa_r+0xa20>
 8009d12:	f000 fad0 	bl	800a2b6 <__multadd>
 8009d16:	2300      	movs	r3, #0
 8009d18:	9003      	str	r0, [sp, #12]
 8009d1a:	220a      	movs	r2, #10
 8009d1c:	4639      	mov	r1, r7
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f000 fac9 	bl	800a2b6 <__multadd>
 8009d24:	e7f3      	b.n	8009d0e <_dtoa_r+0xb2e>
 8009d26:	4651      	mov	r1, sl
 8009d28:	2300      	movs	r3, #0
 8009d2a:	220a      	movs	r2, #10
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 fac2 	bl	800a2b6 <__multadd>
 8009d32:	4682      	mov	sl, r0
 8009d34:	e70d      	b.n	8009b52 <_dtoa_r+0x972>
 8009d36:	9b02      	ldr	r3, [sp, #8]
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d105      	bne.n	8009d48 <_dtoa_r+0xb68>
 8009d3c:	9a02      	ldr	r2, [sp, #8]
 8009d3e:	f10b 0b01 	add.w	fp, fp, #1
 8009d42:	2331      	movs	r3, #49	; 0x31
 8009d44:	7013      	strb	r3, [r2, #0]
 8009d46:	e6e2      	b.n	8009b0e <_dtoa_r+0x92e>
 8009d48:	4615      	mov	r5, r2
 8009d4a:	e7b2      	b.n	8009cb2 <_dtoa_r+0xad2>
 8009d4c:	4b09      	ldr	r3, [pc, #36]	; (8009d74 <_dtoa_r+0xb94>)
 8009d4e:	f7ff baae 	b.w	80092ae <_dtoa_r+0xce>
 8009d52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f47f aa88 	bne.w	800926a <_dtoa_r+0x8a>
 8009d5a:	4b07      	ldr	r3, [pc, #28]	; (8009d78 <_dtoa_r+0xb98>)
 8009d5c:	f7ff baa7 	b.w	80092ae <_dtoa_r+0xce>
 8009d60:	9b04      	ldr	r3, [sp, #16]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	f73f aef4 	bgt.w	8009b50 <_dtoa_r+0x970>
 8009d68:	9b07      	ldr	r3, [sp, #28]
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	f77f aef0 	ble.w	8009b50 <_dtoa_r+0x970>
 8009d70:	e6b8      	b.n	8009ae4 <_dtoa_r+0x904>
 8009d72:	bf00      	nop
 8009d74:	0800ba0a 	.word	0x0800ba0a
 8009d78:	0800ba2c 	.word	0x0800ba2c

08009d7c <__locale_ctype_ptr_l>:
 8009d7c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8009d80:	4770      	bx	lr
	...

08009d84 <_localeconv_r>:
 8009d84:	4b04      	ldr	r3, [pc, #16]	; (8009d98 <_localeconv_r+0x14>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	6a18      	ldr	r0, [r3, #32]
 8009d8a:	4b04      	ldr	r3, [pc, #16]	; (8009d9c <_localeconv_r+0x18>)
 8009d8c:	2800      	cmp	r0, #0
 8009d8e:	bf08      	it	eq
 8009d90:	4618      	moveq	r0, r3
 8009d92:	30f0      	adds	r0, #240	; 0xf0
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	20000138 	.word	0x20000138
 8009d9c:	2000022c 	.word	0x2000022c

08009da0 <malloc>:
 8009da0:	4b02      	ldr	r3, [pc, #8]	; (8009dac <malloc+0xc>)
 8009da2:	4601      	mov	r1, r0
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f000 b803 	b.w	8009db0 <_malloc_r>
 8009daa:	bf00      	nop
 8009dac:	20000138 	.word	0x20000138

08009db0 <_malloc_r>:
 8009db0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009db4:	f101 040b 	add.w	r4, r1, #11
 8009db8:	2c16      	cmp	r4, #22
 8009dba:	4681      	mov	r9, r0
 8009dbc:	d907      	bls.n	8009dce <_malloc_r+0x1e>
 8009dbe:	f034 0407 	bics.w	r4, r4, #7
 8009dc2:	d505      	bpl.n	8009dd0 <_malloc_r+0x20>
 8009dc4:	230c      	movs	r3, #12
 8009dc6:	f8c9 3000 	str.w	r3, [r9]
 8009dca:	2600      	movs	r6, #0
 8009dcc:	e131      	b.n	800a032 <_malloc_r+0x282>
 8009dce:	2410      	movs	r4, #16
 8009dd0:	428c      	cmp	r4, r1
 8009dd2:	d3f7      	bcc.n	8009dc4 <_malloc_r+0x14>
 8009dd4:	4648      	mov	r0, r9
 8009dd6:	f000 fa17 	bl	800a208 <__malloc_lock>
 8009dda:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8009dde:	4d9c      	ldr	r5, [pc, #624]	; (800a050 <_malloc_r+0x2a0>)
 8009de0:	d236      	bcs.n	8009e50 <_malloc_r+0xa0>
 8009de2:	f104 0208 	add.w	r2, r4, #8
 8009de6:	442a      	add	r2, r5
 8009de8:	f1a2 0108 	sub.w	r1, r2, #8
 8009dec:	6856      	ldr	r6, [r2, #4]
 8009dee:	428e      	cmp	r6, r1
 8009df0:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8009df4:	d102      	bne.n	8009dfc <_malloc_r+0x4c>
 8009df6:	68d6      	ldr	r6, [r2, #12]
 8009df8:	42b2      	cmp	r2, r6
 8009dfa:	d010      	beq.n	8009e1e <_malloc_r+0x6e>
 8009dfc:	6873      	ldr	r3, [r6, #4]
 8009dfe:	68f2      	ldr	r2, [r6, #12]
 8009e00:	68b1      	ldr	r1, [r6, #8]
 8009e02:	f023 0303 	bic.w	r3, r3, #3
 8009e06:	60ca      	str	r2, [r1, #12]
 8009e08:	4433      	add	r3, r6
 8009e0a:	6091      	str	r1, [r2, #8]
 8009e0c:	685a      	ldr	r2, [r3, #4]
 8009e0e:	f042 0201 	orr.w	r2, r2, #1
 8009e12:	605a      	str	r2, [r3, #4]
 8009e14:	4648      	mov	r0, r9
 8009e16:	f000 f9fd 	bl	800a214 <__malloc_unlock>
 8009e1a:	3608      	adds	r6, #8
 8009e1c:	e109      	b.n	800a032 <_malloc_r+0x282>
 8009e1e:	3302      	adds	r3, #2
 8009e20:	4a8c      	ldr	r2, [pc, #560]	; (800a054 <_malloc_r+0x2a4>)
 8009e22:	692e      	ldr	r6, [r5, #16]
 8009e24:	4296      	cmp	r6, r2
 8009e26:	4611      	mov	r1, r2
 8009e28:	d06d      	beq.n	8009f06 <_malloc_r+0x156>
 8009e2a:	6870      	ldr	r0, [r6, #4]
 8009e2c:	f020 0003 	bic.w	r0, r0, #3
 8009e30:	1b07      	subs	r7, r0, r4
 8009e32:	2f0f      	cmp	r7, #15
 8009e34:	dd47      	ble.n	8009ec6 <_malloc_r+0x116>
 8009e36:	1933      	adds	r3, r6, r4
 8009e38:	f044 0401 	orr.w	r4, r4, #1
 8009e3c:	6074      	str	r4, [r6, #4]
 8009e3e:	616b      	str	r3, [r5, #20]
 8009e40:	612b      	str	r3, [r5, #16]
 8009e42:	60da      	str	r2, [r3, #12]
 8009e44:	609a      	str	r2, [r3, #8]
 8009e46:	f047 0201 	orr.w	r2, r7, #1
 8009e4a:	605a      	str	r2, [r3, #4]
 8009e4c:	5037      	str	r7, [r6, r0]
 8009e4e:	e7e1      	b.n	8009e14 <_malloc_r+0x64>
 8009e50:	0a63      	lsrs	r3, r4, #9
 8009e52:	d02a      	beq.n	8009eaa <_malloc_r+0xfa>
 8009e54:	2b04      	cmp	r3, #4
 8009e56:	d812      	bhi.n	8009e7e <_malloc_r+0xce>
 8009e58:	09a3      	lsrs	r3, r4, #6
 8009e5a:	3338      	adds	r3, #56	; 0x38
 8009e5c:	1c5a      	adds	r2, r3, #1
 8009e5e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8009e62:	f1a2 0008 	sub.w	r0, r2, #8
 8009e66:	6856      	ldr	r6, [r2, #4]
 8009e68:	4286      	cmp	r6, r0
 8009e6a:	d006      	beq.n	8009e7a <_malloc_r+0xca>
 8009e6c:	6872      	ldr	r2, [r6, #4]
 8009e6e:	f022 0203 	bic.w	r2, r2, #3
 8009e72:	1b11      	subs	r1, r2, r4
 8009e74:	290f      	cmp	r1, #15
 8009e76:	dd1c      	ble.n	8009eb2 <_malloc_r+0x102>
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	e7d0      	b.n	8009e20 <_malloc_r+0x70>
 8009e7e:	2b14      	cmp	r3, #20
 8009e80:	d801      	bhi.n	8009e86 <_malloc_r+0xd6>
 8009e82:	335b      	adds	r3, #91	; 0x5b
 8009e84:	e7ea      	b.n	8009e5c <_malloc_r+0xac>
 8009e86:	2b54      	cmp	r3, #84	; 0x54
 8009e88:	d802      	bhi.n	8009e90 <_malloc_r+0xe0>
 8009e8a:	0b23      	lsrs	r3, r4, #12
 8009e8c:	336e      	adds	r3, #110	; 0x6e
 8009e8e:	e7e5      	b.n	8009e5c <_malloc_r+0xac>
 8009e90:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009e94:	d802      	bhi.n	8009e9c <_malloc_r+0xec>
 8009e96:	0be3      	lsrs	r3, r4, #15
 8009e98:	3377      	adds	r3, #119	; 0x77
 8009e9a:	e7df      	b.n	8009e5c <_malloc_r+0xac>
 8009e9c:	f240 5254 	movw	r2, #1364	; 0x554
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d804      	bhi.n	8009eae <_malloc_r+0xfe>
 8009ea4:	0ca3      	lsrs	r3, r4, #18
 8009ea6:	337c      	adds	r3, #124	; 0x7c
 8009ea8:	e7d8      	b.n	8009e5c <_malloc_r+0xac>
 8009eaa:	233f      	movs	r3, #63	; 0x3f
 8009eac:	e7d6      	b.n	8009e5c <_malloc_r+0xac>
 8009eae:	237e      	movs	r3, #126	; 0x7e
 8009eb0:	e7d4      	b.n	8009e5c <_malloc_r+0xac>
 8009eb2:	2900      	cmp	r1, #0
 8009eb4:	68f1      	ldr	r1, [r6, #12]
 8009eb6:	db04      	blt.n	8009ec2 <_malloc_r+0x112>
 8009eb8:	68b3      	ldr	r3, [r6, #8]
 8009eba:	60d9      	str	r1, [r3, #12]
 8009ebc:	608b      	str	r3, [r1, #8]
 8009ebe:	18b3      	adds	r3, r6, r2
 8009ec0:	e7a4      	b.n	8009e0c <_malloc_r+0x5c>
 8009ec2:	460e      	mov	r6, r1
 8009ec4:	e7d0      	b.n	8009e68 <_malloc_r+0xb8>
 8009ec6:	2f00      	cmp	r7, #0
 8009ec8:	616a      	str	r2, [r5, #20]
 8009eca:	612a      	str	r2, [r5, #16]
 8009ecc:	db05      	blt.n	8009eda <_malloc_r+0x12a>
 8009ece:	4430      	add	r0, r6
 8009ed0:	6843      	ldr	r3, [r0, #4]
 8009ed2:	f043 0301 	orr.w	r3, r3, #1
 8009ed6:	6043      	str	r3, [r0, #4]
 8009ed8:	e79c      	b.n	8009e14 <_malloc_r+0x64>
 8009eda:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8009ede:	d244      	bcs.n	8009f6a <_malloc_r+0x1ba>
 8009ee0:	08c0      	lsrs	r0, r0, #3
 8009ee2:	1087      	asrs	r7, r0, #2
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	fa02 f707 	lsl.w	r7, r2, r7
 8009eea:	686a      	ldr	r2, [r5, #4]
 8009eec:	3001      	adds	r0, #1
 8009eee:	433a      	orrs	r2, r7
 8009ef0:	606a      	str	r2, [r5, #4]
 8009ef2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8009ef6:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8009efa:	60b7      	str	r7, [r6, #8]
 8009efc:	3a08      	subs	r2, #8
 8009efe:	60f2      	str	r2, [r6, #12]
 8009f00:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8009f04:	60fe      	str	r6, [r7, #12]
 8009f06:	2001      	movs	r0, #1
 8009f08:	109a      	asrs	r2, r3, #2
 8009f0a:	fa00 f202 	lsl.w	r2, r0, r2
 8009f0e:	6868      	ldr	r0, [r5, #4]
 8009f10:	4282      	cmp	r2, r0
 8009f12:	f200 80a1 	bhi.w	800a058 <_malloc_r+0x2a8>
 8009f16:	4202      	tst	r2, r0
 8009f18:	d106      	bne.n	8009f28 <_malloc_r+0x178>
 8009f1a:	f023 0303 	bic.w	r3, r3, #3
 8009f1e:	0052      	lsls	r2, r2, #1
 8009f20:	4202      	tst	r2, r0
 8009f22:	f103 0304 	add.w	r3, r3, #4
 8009f26:	d0fa      	beq.n	8009f1e <_malloc_r+0x16e>
 8009f28:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8009f2c:	46e0      	mov	r8, ip
 8009f2e:	469e      	mov	lr, r3
 8009f30:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8009f34:	4546      	cmp	r6, r8
 8009f36:	d153      	bne.n	8009fe0 <_malloc_r+0x230>
 8009f38:	f10e 0e01 	add.w	lr, lr, #1
 8009f3c:	f01e 0f03 	tst.w	lr, #3
 8009f40:	f108 0808 	add.w	r8, r8, #8
 8009f44:	d1f4      	bne.n	8009f30 <_malloc_r+0x180>
 8009f46:	0798      	lsls	r0, r3, #30
 8009f48:	d179      	bne.n	800a03e <_malloc_r+0x28e>
 8009f4a:	686b      	ldr	r3, [r5, #4]
 8009f4c:	ea23 0302 	bic.w	r3, r3, r2
 8009f50:	606b      	str	r3, [r5, #4]
 8009f52:	6868      	ldr	r0, [r5, #4]
 8009f54:	0052      	lsls	r2, r2, #1
 8009f56:	4282      	cmp	r2, r0
 8009f58:	d87e      	bhi.n	800a058 <_malloc_r+0x2a8>
 8009f5a:	2a00      	cmp	r2, #0
 8009f5c:	d07c      	beq.n	800a058 <_malloc_r+0x2a8>
 8009f5e:	4673      	mov	r3, lr
 8009f60:	4202      	tst	r2, r0
 8009f62:	d1e1      	bne.n	8009f28 <_malloc_r+0x178>
 8009f64:	3304      	adds	r3, #4
 8009f66:	0052      	lsls	r2, r2, #1
 8009f68:	e7fa      	b.n	8009f60 <_malloc_r+0x1b0>
 8009f6a:	0a42      	lsrs	r2, r0, #9
 8009f6c:	2a04      	cmp	r2, #4
 8009f6e:	d815      	bhi.n	8009f9c <_malloc_r+0x1ec>
 8009f70:	0982      	lsrs	r2, r0, #6
 8009f72:	3238      	adds	r2, #56	; 0x38
 8009f74:	1c57      	adds	r7, r2, #1
 8009f76:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8009f7a:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8009f7e:	45be      	cmp	lr, r7
 8009f80:	d126      	bne.n	8009fd0 <_malloc_r+0x220>
 8009f82:	2001      	movs	r0, #1
 8009f84:	1092      	asrs	r2, r2, #2
 8009f86:	fa00 f202 	lsl.w	r2, r0, r2
 8009f8a:	6868      	ldr	r0, [r5, #4]
 8009f8c:	4310      	orrs	r0, r2
 8009f8e:	6068      	str	r0, [r5, #4]
 8009f90:	f8c6 e00c 	str.w	lr, [r6, #12]
 8009f94:	60b7      	str	r7, [r6, #8]
 8009f96:	f8ce 6008 	str.w	r6, [lr, #8]
 8009f9a:	e7b3      	b.n	8009f04 <_malloc_r+0x154>
 8009f9c:	2a14      	cmp	r2, #20
 8009f9e:	d801      	bhi.n	8009fa4 <_malloc_r+0x1f4>
 8009fa0:	325b      	adds	r2, #91	; 0x5b
 8009fa2:	e7e7      	b.n	8009f74 <_malloc_r+0x1c4>
 8009fa4:	2a54      	cmp	r2, #84	; 0x54
 8009fa6:	d802      	bhi.n	8009fae <_malloc_r+0x1fe>
 8009fa8:	0b02      	lsrs	r2, r0, #12
 8009faa:	326e      	adds	r2, #110	; 0x6e
 8009fac:	e7e2      	b.n	8009f74 <_malloc_r+0x1c4>
 8009fae:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009fb2:	d802      	bhi.n	8009fba <_malloc_r+0x20a>
 8009fb4:	0bc2      	lsrs	r2, r0, #15
 8009fb6:	3277      	adds	r2, #119	; 0x77
 8009fb8:	e7dc      	b.n	8009f74 <_malloc_r+0x1c4>
 8009fba:	f240 5754 	movw	r7, #1364	; 0x554
 8009fbe:	42ba      	cmp	r2, r7
 8009fc0:	bf9a      	itte	ls
 8009fc2:	0c82      	lsrls	r2, r0, #18
 8009fc4:	327c      	addls	r2, #124	; 0x7c
 8009fc6:	227e      	movhi	r2, #126	; 0x7e
 8009fc8:	e7d4      	b.n	8009f74 <_malloc_r+0x1c4>
 8009fca:	68bf      	ldr	r7, [r7, #8]
 8009fcc:	45be      	cmp	lr, r7
 8009fce:	d004      	beq.n	8009fda <_malloc_r+0x22a>
 8009fd0:	687a      	ldr	r2, [r7, #4]
 8009fd2:	f022 0203 	bic.w	r2, r2, #3
 8009fd6:	4290      	cmp	r0, r2
 8009fd8:	d3f7      	bcc.n	8009fca <_malloc_r+0x21a>
 8009fda:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8009fde:	e7d7      	b.n	8009f90 <_malloc_r+0x1e0>
 8009fe0:	6870      	ldr	r0, [r6, #4]
 8009fe2:	68f7      	ldr	r7, [r6, #12]
 8009fe4:	f020 0003 	bic.w	r0, r0, #3
 8009fe8:	eba0 0a04 	sub.w	sl, r0, r4
 8009fec:	f1ba 0f0f 	cmp.w	sl, #15
 8009ff0:	dd10      	ble.n	800a014 <_malloc_r+0x264>
 8009ff2:	68b2      	ldr	r2, [r6, #8]
 8009ff4:	1933      	adds	r3, r6, r4
 8009ff6:	f044 0401 	orr.w	r4, r4, #1
 8009ffa:	6074      	str	r4, [r6, #4]
 8009ffc:	60d7      	str	r7, [r2, #12]
 8009ffe:	60ba      	str	r2, [r7, #8]
 800a000:	f04a 0201 	orr.w	r2, sl, #1
 800a004:	616b      	str	r3, [r5, #20]
 800a006:	612b      	str	r3, [r5, #16]
 800a008:	60d9      	str	r1, [r3, #12]
 800a00a:	6099      	str	r1, [r3, #8]
 800a00c:	605a      	str	r2, [r3, #4]
 800a00e:	f846 a000 	str.w	sl, [r6, r0]
 800a012:	e6ff      	b.n	8009e14 <_malloc_r+0x64>
 800a014:	f1ba 0f00 	cmp.w	sl, #0
 800a018:	db0f      	blt.n	800a03a <_malloc_r+0x28a>
 800a01a:	4430      	add	r0, r6
 800a01c:	6843      	ldr	r3, [r0, #4]
 800a01e:	f043 0301 	orr.w	r3, r3, #1
 800a022:	6043      	str	r3, [r0, #4]
 800a024:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800a028:	4648      	mov	r0, r9
 800a02a:	60df      	str	r7, [r3, #12]
 800a02c:	60bb      	str	r3, [r7, #8]
 800a02e:	f000 f8f1 	bl	800a214 <__malloc_unlock>
 800a032:	4630      	mov	r0, r6
 800a034:	b003      	add	sp, #12
 800a036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03a:	463e      	mov	r6, r7
 800a03c:	e77a      	b.n	8009f34 <_malloc_r+0x184>
 800a03e:	f85c 0908 	ldr.w	r0, [ip], #-8
 800a042:	4584      	cmp	ip, r0
 800a044:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800a048:	f43f af7d 	beq.w	8009f46 <_malloc_r+0x196>
 800a04c:	e781      	b.n	8009f52 <_malloc_r+0x1a2>
 800a04e:	bf00      	nop
 800a050:	20000398 	.word	0x20000398
 800a054:	200003a0 	.word	0x200003a0
 800a058:	f8d5 b008 	ldr.w	fp, [r5, #8]
 800a05c:	f8db 6004 	ldr.w	r6, [fp, #4]
 800a060:	f026 0603 	bic.w	r6, r6, #3
 800a064:	42b4      	cmp	r4, r6
 800a066:	d803      	bhi.n	800a070 <_malloc_r+0x2c0>
 800a068:	1b33      	subs	r3, r6, r4
 800a06a:	2b0f      	cmp	r3, #15
 800a06c:	f300 8096 	bgt.w	800a19c <_malloc_r+0x3ec>
 800a070:	4a4f      	ldr	r2, [pc, #316]	; (800a1b0 <_malloc_r+0x400>)
 800a072:	6817      	ldr	r7, [r2, #0]
 800a074:	4a4f      	ldr	r2, [pc, #316]	; (800a1b4 <_malloc_r+0x404>)
 800a076:	6811      	ldr	r1, [r2, #0]
 800a078:	3710      	adds	r7, #16
 800a07a:	3101      	adds	r1, #1
 800a07c:	eb0b 0306 	add.w	r3, fp, r6
 800a080:	4427      	add	r7, r4
 800a082:	d005      	beq.n	800a090 <_malloc_r+0x2e0>
 800a084:	494c      	ldr	r1, [pc, #304]	; (800a1b8 <_malloc_r+0x408>)
 800a086:	3901      	subs	r1, #1
 800a088:	440f      	add	r7, r1
 800a08a:	3101      	adds	r1, #1
 800a08c:	4249      	negs	r1, r1
 800a08e:	400f      	ands	r7, r1
 800a090:	4639      	mov	r1, r7
 800a092:	4648      	mov	r0, r9
 800a094:	9201      	str	r2, [sp, #4]
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	f000 fb92 	bl	800a7c0 <_sbrk_r>
 800a09c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800a0a0:	4680      	mov	r8, r0
 800a0a2:	d056      	beq.n	800a152 <_malloc_r+0x3a2>
 800a0a4:	9b00      	ldr	r3, [sp, #0]
 800a0a6:	9a01      	ldr	r2, [sp, #4]
 800a0a8:	4283      	cmp	r3, r0
 800a0aa:	d901      	bls.n	800a0b0 <_malloc_r+0x300>
 800a0ac:	45ab      	cmp	fp, r5
 800a0ae:	d150      	bne.n	800a152 <_malloc_r+0x3a2>
 800a0b0:	4842      	ldr	r0, [pc, #264]	; (800a1bc <_malloc_r+0x40c>)
 800a0b2:	6801      	ldr	r1, [r0, #0]
 800a0b4:	4543      	cmp	r3, r8
 800a0b6:	eb07 0e01 	add.w	lr, r7, r1
 800a0ba:	f8c0 e000 	str.w	lr, [r0]
 800a0be:	4940      	ldr	r1, [pc, #256]	; (800a1c0 <_malloc_r+0x410>)
 800a0c0:	4682      	mov	sl, r0
 800a0c2:	d113      	bne.n	800a0ec <_malloc_r+0x33c>
 800a0c4:	420b      	tst	r3, r1
 800a0c6:	d111      	bne.n	800a0ec <_malloc_r+0x33c>
 800a0c8:	68ab      	ldr	r3, [r5, #8]
 800a0ca:	443e      	add	r6, r7
 800a0cc:	f046 0601 	orr.w	r6, r6, #1
 800a0d0:	605e      	str	r6, [r3, #4]
 800a0d2:	4a3c      	ldr	r2, [pc, #240]	; (800a1c4 <_malloc_r+0x414>)
 800a0d4:	f8da 3000 	ldr.w	r3, [sl]
 800a0d8:	6811      	ldr	r1, [r2, #0]
 800a0da:	428b      	cmp	r3, r1
 800a0dc:	bf88      	it	hi
 800a0de:	6013      	strhi	r3, [r2, #0]
 800a0e0:	4a39      	ldr	r2, [pc, #228]	; (800a1c8 <_malloc_r+0x418>)
 800a0e2:	6811      	ldr	r1, [r2, #0]
 800a0e4:	428b      	cmp	r3, r1
 800a0e6:	bf88      	it	hi
 800a0e8:	6013      	strhi	r3, [r2, #0]
 800a0ea:	e032      	b.n	800a152 <_malloc_r+0x3a2>
 800a0ec:	6810      	ldr	r0, [r2, #0]
 800a0ee:	3001      	adds	r0, #1
 800a0f0:	bf1b      	ittet	ne
 800a0f2:	eba8 0303 	subne.w	r3, r8, r3
 800a0f6:	4473      	addne	r3, lr
 800a0f8:	f8c2 8000 	streq.w	r8, [r2]
 800a0fc:	f8ca 3000 	strne.w	r3, [sl]
 800a100:	f018 0007 	ands.w	r0, r8, #7
 800a104:	bf1c      	itt	ne
 800a106:	f1c0 0008 	rsbne	r0, r0, #8
 800a10a:	4480      	addne	r8, r0
 800a10c:	4b2a      	ldr	r3, [pc, #168]	; (800a1b8 <_malloc_r+0x408>)
 800a10e:	4447      	add	r7, r8
 800a110:	4418      	add	r0, r3
 800a112:	400f      	ands	r7, r1
 800a114:	1bc7      	subs	r7, r0, r7
 800a116:	4639      	mov	r1, r7
 800a118:	4648      	mov	r0, r9
 800a11a:	f000 fb51 	bl	800a7c0 <_sbrk_r>
 800a11e:	1c43      	adds	r3, r0, #1
 800a120:	bf08      	it	eq
 800a122:	4640      	moveq	r0, r8
 800a124:	f8da 3000 	ldr.w	r3, [sl]
 800a128:	f8c5 8008 	str.w	r8, [r5, #8]
 800a12c:	bf08      	it	eq
 800a12e:	2700      	moveq	r7, #0
 800a130:	eba0 0008 	sub.w	r0, r0, r8
 800a134:	443b      	add	r3, r7
 800a136:	4407      	add	r7, r0
 800a138:	f047 0701 	orr.w	r7, r7, #1
 800a13c:	45ab      	cmp	fp, r5
 800a13e:	f8ca 3000 	str.w	r3, [sl]
 800a142:	f8c8 7004 	str.w	r7, [r8, #4]
 800a146:	d0c4      	beq.n	800a0d2 <_malloc_r+0x322>
 800a148:	2e0f      	cmp	r6, #15
 800a14a:	d810      	bhi.n	800a16e <_malloc_r+0x3be>
 800a14c:	2301      	movs	r3, #1
 800a14e:	f8c8 3004 	str.w	r3, [r8, #4]
 800a152:	68ab      	ldr	r3, [r5, #8]
 800a154:	685a      	ldr	r2, [r3, #4]
 800a156:	f022 0203 	bic.w	r2, r2, #3
 800a15a:	4294      	cmp	r4, r2
 800a15c:	eba2 0304 	sub.w	r3, r2, r4
 800a160:	d801      	bhi.n	800a166 <_malloc_r+0x3b6>
 800a162:	2b0f      	cmp	r3, #15
 800a164:	dc1a      	bgt.n	800a19c <_malloc_r+0x3ec>
 800a166:	4648      	mov	r0, r9
 800a168:	f000 f854 	bl	800a214 <__malloc_unlock>
 800a16c:	e62d      	b.n	8009dca <_malloc_r+0x1a>
 800a16e:	f8db 3004 	ldr.w	r3, [fp, #4]
 800a172:	3e0c      	subs	r6, #12
 800a174:	f026 0607 	bic.w	r6, r6, #7
 800a178:	f003 0301 	and.w	r3, r3, #1
 800a17c:	4333      	orrs	r3, r6
 800a17e:	f8cb 3004 	str.w	r3, [fp, #4]
 800a182:	eb0b 0306 	add.w	r3, fp, r6
 800a186:	2205      	movs	r2, #5
 800a188:	2e0f      	cmp	r6, #15
 800a18a:	605a      	str	r2, [r3, #4]
 800a18c:	609a      	str	r2, [r3, #8]
 800a18e:	d9a0      	bls.n	800a0d2 <_malloc_r+0x322>
 800a190:	f10b 0108 	add.w	r1, fp, #8
 800a194:	4648      	mov	r0, r9
 800a196:	f000 fc2d 	bl	800a9f4 <_free_r>
 800a19a:	e79a      	b.n	800a0d2 <_malloc_r+0x322>
 800a19c:	68ae      	ldr	r6, [r5, #8]
 800a19e:	f044 0201 	orr.w	r2, r4, #1
 800a1a2:	4434      	add	r4, r6
 800a1a4:	f043 0301 	orr.w	r3, r3, #1
 800a1a8:	6072      	str	r2, [r6, #4]
 800a1aa:	60ac      	str	r4, [r5, #8]
 800a1ac:	6063      	str	r3, [r4, #4]
 800a1ae:	e631      	b.n	8009e14 <_malloc_r+0x64>
 800a1b0:	20000b78 	.word	0x20000b78
 800a1b4:	200007a0 	.word	0x200007a0
 800a1b8:	00000080 	.word	0x00000080
 800a1bc:	20000b48 	.word	0x20000b48
 800a1c0:	0000007f 	.word	0x0000007f
 800a1c4:	20000b70 	.word	0x20000b70
 800a1c8:	20000b74 	.word	0x20000b74

0800a1cc <__ascii_mbtowc>:
 800a1cc:	b082      	sub	sp, #8
 800a1ce:	b901      	cbnz	r1, 800a1d2 <__ascii_mbtowc+0x6>
 800a1d0:	a901      	add	r1, sp, #4
 800a1d2:	b142      	cbz	r2, 800a1e6 <__ascii_mbtowc+0x1a>
 800a1d4:	b14b      	cbz	r3, 800a1ea <__ascii_mbtowc+0x1e>
 800a1d6:	7813      	ldrb	r3, [r2, #0]
 800a1d8:	600b      	str	r3, [r1, #0]
 800a1da:	7812      	ldrb	r2, [r2, #0]
 800a1dc:	1c10      	adds	r0, r2, #0
 800a1de:	bf18      	it	ne
 800a1e0:	2001      	movne	r0, #1
 800a1e2:	b002      	add	sp, #8
 800a1e4:	4770      	bx	lr
 800a1e6:	4610      	mov	r0, r2
 800a1e8:	e7fb      	b.n	800a1e2 <__ascii_mbtowc+0x16>
 800a1ea:	f06f 0001 	mvn.w	r0, #1
 800a1ee:	e7f8      	b.n	800a1e2 <__ascii_mbtowc+0x16>

0800a1f0 <memcpy>:
 800a1f0:	b510      	push	{r4, lr}
 800a1f2:	1e43      	subs	r3, r0, #1
 800a1f4:	440a      	add	r2, r1
 800a1f6:	4291      	cmp	r1, r2
 800a1f8:	d100      	bne.n	800a1fc <memcpy+0xc>
 800a1fa:	bd10      	pop	{r4, pc}
 800a1fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a200:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a204:	e7f7      	b.n	800a1f6 <memcpy+0x6>
	...

0800a208 <__malloc_lock>:
 800a208:	4801      	ldr	r0, [pc, #4]	; (800a210 <__malloc_lock+0x8>)
 800a20a:	f000 bcaf 	b.w	800ab6c <__retarget_lock_acquire_recursive>
 800a20e:	bf00      	nop
 800a210:	200010b8 	.word	0x200010b8

0800a214 <__malloc_unlock>:
 800a214:	4801      	ldr	r0, [pc, #4]	; (800a21c <__malloc_unlock+0x8>)
 800a216:	f000 bcaa 	b.w	800ab6e <__retarget_lock_release_recursive>
 800a21a:	bf00      	nop
 800a21c:	200010b8 	.word	0x200010b8

0800a220 <_Balloc>:
 800a220:	b570      	push	{r4, r5, r6, lr}
 800a222:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a224:	4604      	mov	r4, r0
 800a226:	460e      	mov	r6, r1
 800a228:	b93d      	cbnz	r5, 800a23a <_Balloc+0x1a>
 800a22a:	2010      	movs	r0, #16
 800a22c:	f7ff fdb8 	bl	8009da0 <malloc>
 800a230:	6260      	str	r0, [r4, #36]	; 0x24
 800a232:	6045      	str	r5, [r0, #4]
 800a234:	6085      	str	r5, [r0, #8]
 800a236:	6005      	str	r5, [r0, #0]
 800a238:	60c5      	str	r5, [r0, #12]
 800a23a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a23c:	68eb      	ldr	r3, [r5, #12]
 800a23e:	b183      	cbz	r3, 800a262 <_Balloc+0x42>
 800a240:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a248:	b9b8      	cbnz	r0, 800a27a <_Balloc+0x5a>
 800a24a:	2101      	movs	r1, #1
 800a24c:	fa01 f506 	lsl.w	r5, r1, r6
 800a250:	1d6a      	adds	r2, r5, #5
 800a252:	0092      	lsls	r2, r2, #2
 800a254:	4620      	mov	r0, r4
 800a256:	f000 fb4a 	bl	800a8ee <_calloc_r>
 800a25a:	b160      	cbz	r0, 800a276 <_Balloc+0x56>
 800a25c:	6046      	str	r6, [r0, #4]
 800a25e:	6085      	str	r5, [r0, #8]
 800a260:	e00e      	b.n	800a280 <_Balloc+0x60>
 800a262:	2221      	movs	r2, #33	; 0x21
 800a264:	2104      	movs	r1, #4
 800a266:	4620      	mov	r0, r4
 800a268:	f000 fb41 	bl	800a8ee <_calloc_r>
 800a26c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a26e:	60e8      	str	r0, [r5, #12]
 800a270:	68db      	ldr	r3, [r3, #12]
 800a272:	2b00      	cmp	r3, #0
 800a274:	d1e4      	bne.n	800a240 <_Balloc+0x20>
 800a276:	2000      	movs	r0, #0
 800a278:	bd70      	pop	{r4, r5, r6, pc}
 800a27a:	6802      	ldr	r2, [r0, #0]
 800a27c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a280:	2300      	movs	r3, #0
 800a282:	6103      	str	r3, [r0, #16]
 800a284:	60c3      	str	r3, [r0, #12]
 800a286:	bd70      	pop	{r4, r5, r6, pc}

0800a288 <_Bfree>:
 800a288:	b570      	push	{r4, r5, r6, lr}
 800a28a:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a28c:	4606      	mov	r6, r0
 800a28e:	460d      	mov	r5, r1
 800a290:	b93c      	cbnz	r4, 800a2a2 <_Bfree+0x1a>
 800a292:	2010      	movs	r0, #16
 800a294:	f7ff fd84 	bl	8009da0 <malloc>
 800a298:	6270      	str	r0, [r6, #36]	; 0x24
 800a29a:	6044      	str	r4, [r0, #4]
 800a29c:	6084      	str	r4, [r0, #8]
 800a29e:	6004      	str	r4, [r0, #0]
 800a2a0:	60c4      	str	r4, [r0, #12]
 800a2a2:	b13d      	cbz	r5, 800a2b4 <_Bfree+0x2c>
 800a2a4:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a2a6:	686a      	ldr	r2, [r5, #4]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2ae:	6029      	str	r1, [r5, #0]
 800a2b0:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a2b4:	bd70      	pop	{r4, r5, r6, pc}

0800a2b6 <__multadd>:
 800a2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ba:	690d      	ldr	r5, [r1, #16]
 800a2bc:	461f      	mov	r7, r3
 800a2be:	4606      	mov	r6, r0
 800a2c0:	460c      	mov	r4, r1
 800a2c2:	f101 0e14 	add.w	lr, r1, #20
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	f8de 0000 	ldr.w	r0, [lr]
 800a2cc:	b281      	uxth	r1, r0
 800a2ce:	fb02 7101 	mla	r1, r2, r1, r7
 800a2d2:	0c0f      	lsrs	r7, r1, #16
 800a2d4:	0c00      	lsrs	r0, r0, #16
 800a2d6:	fb02 7000 	mla	r0, r2, r0, r7
 800a2da:	b289      	uxth	r1, r1
 800a2dc:	3301      	adds	r3, #1
 800a2de:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a2e2:	429d      	cmp	r5, r3
 800a2e4:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a2e8:	f84e 1b04 	str.w	r1, [lr], #4
 800a2ec:	dcec      	bgt.n	800a2c8 <__multadd+0x12>
 800a2ee:	b1d7      	cbz	r7, 800a326 <__multadd+0x70>
 800a2f0:	68a3      	ldr	r3, [r4, #8]
 800a2f2:	429d      	cmp	r5, r3
 800a2f4:	db12      	blt.n	800a31c <__multadd+0x66>
 800a2f6:	6861      	ldr	r1, [r4, #4]
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	3101      	adds	r1, #1
 800a2fc:	f7ff ff90 	bl	800a220 <_Balloc>
 800a300:	6922      	ldr	r2, [r4, #16]
 800a302:	3202      	adds	r2, #2
 800a304:	f104 010c 	add.w	r1, r4, #12
 800a308:	4680      	mov	r8, r0
 800a30a:	0092      	lsls	r2, r2, #2
 800a30c:	300c      	adds	r0, #12
 800a30e:	f7ff ff6f 	bl	800a1f0 <memcpy>
 800a312:	4621      	mov	r1, r4
 800a314:	4630      	mov	r0, r6
 800a316:	f7ff ffb7 	bl	800a288 <_Bfree>
 800a31a:	4644      	mov	r4, r8
 800a31c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a320:	3501      	adds	r5, #1
 800a322:	615f      	str	r7, [r3, #20]
 800a324:	6125      	str	r5, [r4, #16]
 800a326:	4620      	mov	r0, r4
 800a328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a32c <__hi0bits>:
 800a32c:	0c02      	lsrs	r2, r0, #16
 800a32e:	0412      	lsls	r2, r2, #16
 800a330:	4603      	mov	r3, r0
 800a332:	b9b2      	cbnz	r2, 800a362 <__hi0bits+0x36>
 800a334:	0403      	lsls	r3, r0, #16
 800a336:	2010      	movs	r0, #16
 800a338:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a33c:	bf04      	itt	eq
 800a33e:	021b      	lsleq	r3, r3, #8
 800a340:	3008      	addeq	r0, #8
 800a342:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a346:	bf04      	itt	eq
 800a348:	011b      	lsleq	r3, r3, #4
 800a34a:	3004      	addeq	r0, #4
 800a34c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a350:	bf04      	itt	eq
 800a352:	009b      	lsleq	r3, r3, #2
 800a354:	3002      	addeq	r0, #2
 800a356:	2b00      	cmp	r3, #0
 800a358:	db06      	blt.n	800a368 <__hi0bits+0x3c>
 800a35a:	005b      	lsls	r3, r3, #1
 800a35c:	d503      	bpl.n	800a366 <__hi0bits+0x3a>
 800a35e:	3001      	adds	r0, #1
 800a360:	4770      	bx	lr
 800a362:	2000      	movs	r0, #0
 800a364:	e7e8      	b.n	800a338 <__hi0bits+0xc>
 800a366:	2020      	movs	r0, #32
 800a368:	4770      	bx	lr

0800a36a <__lo0bits>:
 800a36a:	6803      	ldr	r3, [r0, #0]
 800a36c:	f013 0207 	ands.w	r2, r3, #7
 800a370:	4601      	mov	r1, r0
 800a372:	d00b      	beq.n	800a38c <__lo0bits+0x22>
 800a374:	07da      	lsls	r2, r3, #31
 800a376:	d423      	bmi.n	800a3c0 <__lo0bits+0x56>
 800a378:	0798      	lsls	r0, r3, #30
 800a37a:	bf49      	itett	mi
 800a37c:	085b      	lsrmi	r3, r3, #1
 800a37e:	089b      	lsrpl	r3, r3, #2
 800a380:	2001      	movmi	r0, #1
 800a382:	600b      	strmi	r3, [r1, #0]
 800a384:	bf5c      	itt	pl
 800a386:	600b      	strpl	r3, [r1, #0]
 800a388:	2002      	movpl	r0, #2
 800a38a:	4770      	bx	lr
 800a38c:	b298      	uxth	r0, r3
 800a38e:	b9a8      	cbnz	r0, 800a3bc <__lo0bits+0x52>
 800a390:	0c1b      	lsrs	r3, r3, #16
 800a392:	2010      	movs	r0, #16
 800a394:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a398:	bf04      	itt	eq
 800a39a:	0a1b      	lsreq	r3, r3, #8
 800a39c:	3008      	addeq	r0, #8
 800a39e:	071a      	lsls	r2, r3, #28
 800a3a0:	bf04      	itt	eq
 800a3a2:	091b      	lsreq	r3, r3, #4
 800a3a4:	3004      	addeq	r0, #4
 800a3a6:	079a      	lsls	r2, r3, #30
 800a3a8:	bf04      	itt	eq
 800a3aa:	089b      	lsreq	r3, r3, #2
 800a3ac:	3002      	addeq	r0, #2
 800a3ae:	07da      	lsls	r2, r3, #31
 800a3b0:	d402      	bmi.n	800a3b8 <__lo0bits+0x4e>
 800a3b2:	085b      	lsrs	r3, r3, #1
 800a3b4:	d006      	beq.n	800a3c4 <__lo0bits+0x5a>
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	600b      	str	r3, [r1, #0]
 800a3ba:	4770      	bx	lr
 800a3bc:	4610      	mov	r0, r2
 800a3be:	e7e9      	b.n	800a394 <__lo0bits+0x2a>
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	4770      	bx	lr
 800a3c4:	2020      	movs	r0, #32
 800a3c6:	4770      	bx	lr

0800a3c8 <__i2b>:
 800a3c8:	b510      	push	{r4, lr}
 800a3ca:	460c      	mov	r4, r1
 800a3cc:	2101      	movs	r1, #1
 800a3ce:	f7ff ff27 	bl	800a220 <_Balloc>
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	6144      	str	r4, [r0, #20]
 800a3d6:	6102      	str	r2, [r0, #16]
 800a3d8:	bd10      	pop	{r4, pc}

0800a3da <__multiply>:
 800a3da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3de:	4614      	mov	r4, r2
 800a3e0:	690a      	ldr	r2, [r1, #16]
 800a3e2:	6923      	ldr	r3, [r4, #16]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	bfb8      	it	lt
 800a3e8:	460b      	movlt	r3, r1
 800a3ea:	4689      	mov	r9, r1
 800a3ec:	bfbc      	itt	lt
 800a3ee:	46a1      	movlt	r9, r4
 800a3f0:	461c      	movlt	r4, r3
 800a3f2:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a3f6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a3fa:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800a3fe:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a402:	eb07 060a 	add.w	r6, r7, sl
 800a406:	429e      	cmp	r6, r3
 800a408:	bfc8      	it	gt
 800a40a:	3101      	addgt	r1, #1
 800a40c:	f7ff ff08 	bl	800a220 <_Balloc>
 800a410:	f100 0514 	add.w	r5, r0, #20
 800a414:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a418:	462b      	mov	r3, r5
 800a41a:	2200      	movs	r2, #0
 800a41c:	4543      	cmp	r3, r8
 800a41e:	d316      	bcc.n	800a44e <__multiply+0x74>
 800a420:	f104 0214 	add.w	r2, r4, #20
 800a424:	f109 0114 	add.w	r1, r9, #20
 800a428:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 800a42c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a430:	9301      	str	r3, [sp, #4]
 800a432:	9c01      	ldr	r4, [sp, #4]
 800a434:	4294      	cmp	r4, r2
 800a436:	4613      	mov	r3, r2
 800a438:	d80c      	bhi.n	800a454 <__multiply+0x7a>
 800a43a:	2e00      	cmp	r6, #0
 800a43c:	dd03      	ble.n	800a446 <__multiply+0x6c>
 800a43e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a442:	2b00      	cmp	r3, #0
 800a444:	d054      	beq.n	800a4f0 <__multiply+0x116>
 800a446:	6106      	str	r6, [r0, #16]
 800a448:	b003      	add	sp, #12
 800a44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a44e:	f843 2b04 	str.w	r2, [r3], #4
 800a452:	e7e3      	b.n	800a41c <__multiply+0x42>
 800a454:	f8b3 a000 	ldrh.w	sl, [r3]
 800a458:	3204      	adds	r2, #4
 800a45a:	f1ba 0f00 	cmp.w	sl, #0
 800a45e:	d020      	beq.n	800a4a2 <__multiply+0xc8>
 800a460:	46ae      	mov	lr, r5
 800a462:	4689      	mov	r9, r1
 800a464:	f04f 0c00 	mov.w	ip, #0
 800a468:	f859 4b04 	ldr.w	r4, [r9], #4
 800a46c:	f8be b000 	ldrh.w	fp, [lr]
 800a470:	b2a3      	uxth	r3, r4
 800a472:	fb0a b303 	mla	r3, sl, r3, fp
 800a476:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800a47a:	f8de 4000 	ldr.w	r4, [lr]
 800a47e:	4463      	add	r3, ip
 800a480:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a484:	fb0a c40b 	mla	r4, sl, fp, ip
 800a488:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a48c:	b29b      	uxth	r3, r3
 800a48e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a492:	454f      	cmp	r7, r9
 800a494:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800a498:	f84e 3b04 	str.w	r3, [lr], #4
 800a49c:	d8e4      	bhi.n	800a468 <__multiply+0x8e>
 800a49e:	f8ce c000 	str.w	ip, [lr]
 800a4a2:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 800a4a6:	f1b9 0f00 	cmp.w	r9, #0
 800a4aa:	d01f      	beq.n	800a4ec <__multiply+0x112>
 800a4ac:	682b      	ldr	r3, [r5, #0]
 800a4ae:	46ae      	mov	lr, r5
 800a4b0:	468c      	mov	ip, r1
 800a4b2:	f04f 0a00 	mov.w	sl, #0
 800a4b6:	f8bc 4000 	ldrh.w	r4, [ip]
 800a4ba:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a4be:	fb09 b404 	mla	r4, r9, r4, fp
 800a4c2:	44a2      	add	sl, r4
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 800a4ca:	f84e 3b04 	str.w	r3, [lr], #4
 800a4ce:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a4d2:	f8be 4000 	ldrh.w	r4, [lr]
 800a4d6:	0c1b      	lsrs	r3, r3, #16
 800a4d8:	fb09 4303 	mla	r3, r9, r3, r4
 800a4dc:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800a4e0:	4567      	cmp	r7, ip
 800a4e2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a4e6:	d8e6      	bhi.n	800a4b6 <__multiply+0xdc>
 800a4e8:	f8ce 3000 	str.w	r3, [lr]
 800a4ec:	3504      	adds	r5, #4
 800a4ee:	e7a0      	b.n	800a432 <__multiply+0x58>
 800a4f0:	3e01      	subs	r6, #1
 800a4f2:	e7a2      	b.n	800a43a <__multiply+0x60>

0800a4f4 <__pow5mult>:
 800a4f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4f8:	4615      	mov	r5, r2
 800a4fa:	f012 0203 	ands.w	r2, r2, #3
 800a4fe:	4606      	mov	r6, r0
 800a500:	460f      	mov	r7, r1
 800a502:	d007      	beq.n	800a514 <__pow5mult+0x20>
 800a504:	3a01      	subs	r2, #1
 800a506:	4c21      	ldr	r4, [pc, #132]	; (800a58c <__pow5mult+0x98>)
 800a508:	2300      	movs	r3, #0
 800a50a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a50e:	f7ff fed2 	bl	800a2b6 <__multadd>
 800a512:	4607      	mov	r7, r0
 800a514:	10ad      	asrs	r5, r5, #2
 800a516:	d035      	beq.n	800a584 <__pow5mult+0x90>
 800a518:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a51a:	b93c      	cbnz	r4, 800a52c <__pow5mult+0x38>
 800a51c:	2010      	movs	r0, #16
 800a51e:	f7ff fc3f 	bl	8009da0 <malloc>
 800a522:	6270      	str	r0, [r6, #36]	; 0x24
 800a524:	6044      	str	r4, [r0, #4]
 800a526:	6084      	str	r4, [r0, #8]
 800a528:	6004      	str	r4, [r0, #0]
 800a52a:	60c4      	str	r4, [r0, #12]
 800a52c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a530:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a534:	b94c      	cbnz	r4, 800a54a <__pow5mult+0x56>
 800a536:	f240 2171 	movw	r1, #625	; 0x271
 800a53a:	4630      	mov	r0, r6
 800a53c:	f7ff ff44 	bl	800a3c8 <__i2b>
 800a540:	2300      	movs	r3, #0
 800a542:	f8c8 0008 	str.w	r0, [r8, #8]
 800a546:	4604      	mov	r4, r0
 800a548:	6003      	str	r3, [r0, #0]
 800a54a:	f04f 0800 	mov.w	r8, #0
 800a54e:	07eb      	lsls	r3, r5, #31
 800a550:	d50a      	bpl.n	800a568 <__pow5mult+0x74>
 800a552:	4639      	mov	r1, r7
 800a554:	4622      	mov	r2, r4
 800a556:	4630      	mov	r0, r6
 800a558:	f7ff ff3f 	bl	800a3da <__multiply>
 800a55c:	4639      	mov	r1, r7
 800a55e:	4681      	mov	r9, r0
 800a560:	4630      	mov	r0, r6
 800a562:	f7ff fe91 	bl	800a288 <_Bfree>
 800a566:	464f      	mov	r7, r9
 800a568:	106d      	asrs	r5, r5, #1
 800a56a:	d00b      	beq.n	800a584 <__pow5mult+0x90>
 800a56c:	6820      	ldr	r0, [r4, #0]
 800a56e:	b938      	cbnz	r0, 800a580 <__pow5mult+0x8c>
 800a570:	4622      	mov	r2, r4
 800a572:	4621      	mov	r1, r4
 800a574:	4630      	mov	r0, r6
 800a576:	f7ff ff30 	bl	800a3da <__multiply>
 800a57a:	6020      	str	r0, [r4, #0]
 800a57c:	f8c0 8000 	str.w	r8, [r0]
 800a580:	4604      	mov	r4, r0
 800a582:	e7e4      	b.n	800a54e <__pow5mult+0x5a>
 800a584:	4638      	mov	r0, r7
 800a586:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a58a:	bf00      	nop
 800a58c:	0800bb38 	.word	0x0800bb38

0800a590 <__lshift>:
 800a590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a594:	460c      	mov	r4, r1
 800a596:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a59a:	6923      	ldr	r3, [r4, #16]
 800a59c:	6849      	ldr	r1, [r1, #4]
 800a59e:	eb0a 0903 	add.w	r9, sl, r3
 800a5a2:	68a3      	ldr	r3, [r4, #8]
 800a5a4:	4607      	mov	r7, r0
 800a5a6:	4616      	mov	r6, r2
 800a5a8:	f109 0501 	add.w	r5, r9, #1
 800a5ac:	42ab      	cmp	r3, r5
 800a5ae:	db31      	blt.n	800a614 <__lshift+0x84>
 800a5b0:	4638      	mov	r0, r7
 800a5b2:	f7ff fe35 	bl	800a220 <_Balloc>
 800a5b6:	2200      	movs	r2, #0
 800a5b8:	4680      	mov	r8, r0
 800a5ba:	f100 0314 	add.w	r3, r0, #20
 800a5be:	4611      	mov	r1, r2
 800a5c0:	4552      	cmp	r2, sl
 800a5c2:	db2a      	blt.n	800a61a <__lshift+0x8a>
 800a5c4:	6920      	ldr	r0, [r4, #16]
 800a5c6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a5ca:	f104 0114 	add.w	r1, r4, #20
 800a5ce:	f016 021f 	ands.w	r2, r6, #31
 800a5d2:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800a5d6:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 800a5da:	d022      	beq.n	800a622 <__lshift+0x92>
 800a5dc:	f1c2 0c20 	rsb	ip, r2, #32
 800a5e0:	2000      	movs	r0, #0
 800a5e2:	680e      	ldr	r6, [r1, #0]
 800a5e4:	4096      	lsls	r6, r2
 800a5e6:	4330      	orrs	r0, r6
 800a5e8:	f843 0b04 	str.w	r0, [r3], #4
 800a5ec:	f851 0b04 	ldr.w	r0, [r1], #4
 800a5f0:	458e      	cmp	lr, r1
 800a5f2:	fa20 f00c 	lsr.w	r0, r0, ip
 800a5f6:	d8f4      	bhi.n	800a5e2 <__lshift+0x52>
 800a5f8:	6018      	str	r0, [r3, #0]
 800a5fa:	b108      	cbz	r0, 800a600 <__lshift+0x70>
 800a5fc:	f109 0502 	add.w	r5, r9, #2
 800a600:	3d01      	subs	r5, #1
 800a602:	4638      	mov	r0, r7
 800a604:	f8c8 5010 	str.w	r5, [r8, #16]
 800a608:	4621      	mov	r1, r4
 800a60a:	f7ff fe3d 	bl	800a288 <_Bfree>
 800a60e:	4640      	mov	r0, r8
 800a610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a614:	3101      	adds	r1, #1
 800a616:	005b      	lsls	r3, r3, #1
 800a618:	e7c8      	b.n	800a5ac <__lshift+0x1c>
 800a61a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a61e:	3201      	adds	r2, #1
 800a620:	e7ce      	b.n	800a5c0 <__lshift+0x30>
 800a622:	3b04      	subs	r3, #4
 800a624:	f851 2b04 	ldr.w	r2, [r1], #4
 800a628:	f843 2f04 	str.w	r2, [r3, #4]!
 800a62c:	458e      	cmp	lr, r1
 800a62e:	d8f9      	bhi.n	800a624 <__lshift+0x94>
 800a630:	e7e6      	b.n	800a600 <__lshift+0x70>

0800a632 <__mcmp>:
 800a632:	6903      	ldr	r3, [r0, #16]
 800a634:	690a      	ldr	r2, [r1, #16]
 800a636:	1a9b      	subs	r3, r3, r2
 800a638:	b530      	push	{r4, r5, lr}
 800a63a:	d10c      	bne.n	800a656 <__mcmp+0x24>
 800a63c:	0092      	lsls	r2, r2, #2
 800a63e:	3014      	adds	r0, #20
 800a640:	3114      	adds	r1, #20
 800a642:	1884      	adds	r4, r0, r2
 800a644:	4411      	add	r1, r2
 800a646:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a64a:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a64e:	4295      	cmp	r5, r2
 800a650:	d003      	beq.n	800a65a <__mcmp+0x28>
 800a652:	d305      	bcc.n	800a660 <__mcmp+0x2e>
 800a654:	2301      	movs	r3, #1
 800a656:	4618      	mov	r0, r3
 800a658:	bd30      	pop	{r4, r5, pc}
 800a65a:	42a0      	cmp	r0, r4
 800a65c:	d3f3      	bcc.n	800a646 <__mcmp+0x14>
 800a65e:	e7fa      	b.n	800a656 <__mcmp+0x24>
 800a660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a664:	e7f7      	b.n	800a656 <__mcmp+0x24>

0800a666 <__mdiff>:
 800a666:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a66a:	460d      	mov	r5, r1
 800a66c:	4607      	mov	r7, r0
 800a66e:	4611      	mov	r1, r2
 800a670:	4628      	mov	r0, r5
 800a672:	4614      	mov	r4, r2
 800a674:	f7ff ffdd 	bl	800a632 <__mcmp>
 800a678:	1e06      	subs	r6, r0, #0
 800a67a:	d108      	bne.n	800a68e <__mdiff+0x28>
 800a67c:	4631      	mov	r1, r6
 800a67e:	4638      	mov	r0, r7
 800a680:	f7ff fdce 	bl	800a220 <_Balloc>
 800a684:	2301      	movs	r3, #1
 800a686:	6103      	str	r3, [r0, #16]
 800a688:	6146      	str	r6, [r0, #20]
 800a68a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a68e:	bfa4      	itt	ge
 800a690:	4623      	movge	r3, r4
 800a692:	462c      	movge	r4, r5
 800a694:	4638      	mov	r0, r7
 800a696:	6861      	ldr	r1, [r4, #4]
 800a698:	bfa6      	itte	ge
 800a69a:	461d      	movge	r5, r3
 800a69c:	2600      	movge	r6, #0
 800a69e:	2601      	movlt	r6, #1
 800a6a0:	f7ff fdbe 	bl	800a220 <_Balloc>
 800a6a4:	692b      	ldr	r3, [r5, #16]
 800a6a6:	60c6      	str	r6, [r0, #12]
 800a6a8:	6926      	ldr	r6, [r4, #16]
 800a6aa:	f105 0914 	add.w	r9, r5, #20
 800a6ae:	f104 0214 	add.w	r2, r4, #20
 800a6b2:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a6b6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a6ba:	f100 0514 	add.w	r5, r0, #20
 800a6be:	f04f 0c00 	mov.w	ip, #0
 800a6c2:	f852 ab04 	ldr.w	sl, [r2], #4
 800a6c6:	f859 4b04 	ldr.w	r4, [r9], #4
 800a6ca:	fa1c f18a 	uxtah	r1, ip, sl
 800a6ce:	b2a3      	uxth	r3, r4
 800a6d0:	1ac9      	subs	r1, r1, r3
 800a6d2:	0c23      	lsrs	r3, r4, #16
 800a6d4:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a6d8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a6dc:	b289      	uxth	r1, r1
 800a6de:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a6e2:	45c8      	cmp	r8, r9
 800a6e4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a6e8:	4696      	mov	lr, r2
 800a6ea:	f845 3b04 	str.w	r3, [r5], #4
 800a6ee:	d8e8      	bhi.n	800a6c2 <__mdiff+0x5c>
 800a6f0:	45be      	cmp	lr, r7
 800a6f2:	d305      	bcc.n	800a700 <__mdiff+0x9a>
 800a6f4:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a6f8:	b18b      	cbz	r3, 800a71e <__mdiff+0xb8>
 800a6fa:	6106      	str	r6, [r0, #16]
 800a6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a700:	f85e 1b04 	ldr.w	r1, [lr], #4
 800a704:	fa1c f381 	uxtah	r3, ip, r1
 800a708:	141a      	asrs	r2, r3, #16
 800a70a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a70e:	b29b      	uxth	r3, r3
 800a710:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a714:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a718:	f845 3b04 	str.w	r3, [r5], #4
 800a71c:	e7e8      	b.n	800a6f0 <__mdiff+0x8a>
 800a71e:	3e01      	subs	r6, #1
 800a720:	e7e8      	b.n	800a6f4 <__mdiff+0x8e>

0800a722 <__d2b>:
 800a722:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a726:	460e      	mov	r6, r1
 800a728:	2101      	movs	r1, #1
 800a72a:	ec59 8b10 	vmov	r8, r9, d0
 800a72e:	4615      	mov	r5, r2
 800a730:	f7ff fd76 	bl	800a220 <_Balloc>
 800a734:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a738:	4607      	mov	r7, r0
 800a73a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a73e:	bb34      	cbnz	r4, 800a78e <__d2b+0x6c>
 800a740:	9301      	str	r3, [sp, #4]
 800a742:	f1b8 0f00 	cmp.w	r8, #0
 800a746:	d027      	beq.n	800a798 <__d2b+0x76>
 800a748:	a802      	add	r0, sp, #8
 800a74a:	f840 8d08 	str.w	r8, [r0, #-8]!
 800a74e:	f7ff fe0c 	bl	800a36a <__lo0bits>
 800a752:	9900      	ldr	r1, [sp, #0]
 800a754:	b1f0      	cbz	r0, 800a794 <__d2b+0x72>
 800a756:	9a01      	ldr	r2, [sp, #4]
 800a758:	f1c0 0320 	rsb	r3, r0, #32
 800a75c:	fa02 f303 	lsl.w	r3, r2, r3
 800a760:	430b      	orrs	r3, r1
 800a762:	40c2      	lsrs	r2, r0
 800a764:	617b      	str	r3, [r7, #20]
 800a766:	9201      	str	r2, [sp, #4]
 800a768:	9b01      	ldr	r3, [sp, #4]
 800a76a:	61bb      	str	r3, [r7, #24]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	bf14      	ite	ne
 800a770:	2102      	movne	r1, #2
 800a772:	2101      	moveq	r1, #1
 800a774:	6139      	str	r1, [r7, #16]
 800a776:	b1c4      	cbz	r4, 800a7aa <__d2b+0x88>
 800a778:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a77c:	4404      	add	r4, r0
 800a77e:	6034      	str	r4, [r6, #0]
 800a780:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a784:	6028      	str	r0, [r5, #0]
 800a786:	4638      	mov	r0, r7
 800a788:	b003      	add	sp, #12
 800a78a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a78e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a792:	e7d5      	b.n	800a740 <__d2b+0x1e>
 800a794:	6179      	str	r1, [r7, #20]
 800a796:	e7e7      	b.n	800a768 <__d2b+0x46>
 800a798:	a801      	add	r0, sp, #4
 800a79a:	f7ff fde6 	bl	800a36a <__lo0bits>
 800a79e:	9b01      	ldr	r3, [sp, #4]
 800a7a0:	617b      	str	r3, [r7, #20]
 800a7a2:	2101      	movs	r1, #1
 800a7a4:	6139      	str	r1, [r7, #16]
 800a7a6:	3020      	adds	r0, #32
 800a7a8:	e7e5      	b.n	800a776 <__d2b+0x54>
 800a7aa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a7ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7b2:	6030      	str	r0, [r6, #0]
 800a7b4:	6918      	ldr	r0, [r3, #16]
 800a7b6:	f7ff fdb9 	bl	800a32c <__hi0bits>
 800a7ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a7be:	e7e1      	b.n	800a784 <__d2b+0x62>

0800a7c0 <_sbrk_r>:
 800a7c0:	b538      	push	{r3, r4, r5, lr}
 800a7c2:	4c06      	ldr	r4, [pc, #24]	; (800a7dc <_sbrk_r+0x1c>)
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	4605      	mov	r5, r0
 800a7c8:	4608      	mov	r0, r1
 800a7ca:	6023      	str	r3, [r4, #0]
 800a7cc:	f7fd f898 	bl	8007900 <_sbrk>
 800a7d0:	1c43      	adds	r3, r0, #1
 800a7d2:	d102      	bne.n	800a7da <_sbrk_r+0x1a>
 800a7d4:	6823      	ldr	r3, [r4, #0]
 800a7d6:	b103      	cbz	r3, 800a7da <_sbrk_r+0x1a>
 800a7d8:	602b      	str	r3, [r5, #0]
 800a7da:	bd38      	pop	{r3, r4, r5, pc}
 800a7dc:	200010c0 	.word	0x200010c0

0800a7e0 <__ssprint_r>:
 800a7e0:	6893      	ldr	r3, [r2, #8]
 800a7e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e6:	4681      	mov	r9, r0
 800a7e8:	460c      	mov	r4, r1
 800a7ea:	4617      	mov	r7, r2
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d060      	beq.n	800a8b2 <__ssprint_r+0xd2>
 800a7f0:	f04f 0b00 	mov.w	fp, #0
 800a7f4:	f8d2 a000 	ldr.w	sl, [r2]
 800a7f8:	465e      	mov	r6, fp
 800a7fa:	b356      	cbz	r6, 800a852 <__ssprint_r+0x72>
 800a7fc:	68a3      	ldr	r3, [r4, #8]
 800a7fe:	429e      	cmp	r6, r3
 800a800:	d344      	bcc.n	800a88c <__ssprint_r+0xac>
 800a802:	89a2      	ldrh	r2, [r4, #12]
 800a804:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a808:	d03e      	beq.n	800a888 <__ssprint_r+0xa8>
 800a80a:	6825      	ldr	r5, [r4, #0]
 800a80c:	6921      	ldr	r1, [r4, #16]
 800a80e:	eba5 0801 	sub.w	r8, r5, r1
 800a812:	6965      	ldr	r5, [r4, #20]
 800a814:	2302      	movs	r3, #2
 800a816:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a81a:	fb95 f5f3 	sdiv	r5, r5, r3
 800a81e:	f108 0301 	add.w	r3, r8, #1
 800a822:	4433      	add	r3, r6
 800a824:	429d      	cmp	r5, r3
 800a826:	bf38      	it	cc
 800a828:	461d      	movcc	r5, r3
 800a82a:	0553      	lsls	r3, r2, #21
 800a82c:	d546      	bpl.n	800a8bc <__ssprint_r+0xdc>
 800a82e:	4629      	mov	r1, r5
 800a830:	4648      	mov	r0, r9
 800a832:	f7ff fabd 	bl	8009db0 <_malloc_r>
 800a836:	b998      	cbnz	r0, 800a860 <__ssprint_r+0x80>
 800a838:	230c      	movs	r3, #12
 800a83a:	f8c9 3000 	str.w	r3, [r9]
 800a83e:	89a3      	ldrh	r3, [r4, #12]
 800a840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a844:	81a3      	strh	r3, [r4, #12]
 800a846:	2300      	movs	r3, #0
 800a848:	60bb      	str	r3, [r7, #8]
 800a84a:	607b      	str	r3, [r7, #4]
 800a84c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a850:	e031      	b.n	800a8b6 <__ssprint_r+0xd6>
 800a852:	f8da b000 	ldr.w	fp, [sl]
 800a856:	f8da 6004 	ldr.w	r6, [sl, #4]
 800a85a:	f10a 0a08 	add.w	sl, sl, #8
 800a85e:	e7cc      	b.n	800a7fa <__ssprint_r+0x1a>
 800a860:	4642      	mov	r2, r8
 800a862:	6921      	ldr	r1, [r4, #16]
 800a864:	9001      	str	r0, [sp, #4]
 800a866:	f7ff fcc3 	bl	800a1f0 <memcpy>
 800a86a:	89a2      	ldrh	r2, [r4, #12]
 800a86c:	9b01      	ldr	r3, [sp, #4]
 800a86e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800a872:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a876:	81a2      	strh	r2, [r4, #12]
 800a878:	6123      	str	r3, [r4, #16]
 800a87a:	6165      	str	r5, [r4, #20]
 800a87c:	4443      	add	r3, r8
 800a87e:	eba5 0508 	sub.w	r5, r5, r8
 800a882:	6023      	str	r3, [r4, #0]
 800a884:	60a5      	str	r5, [r4, #8]
 800a886:	4633      	mov	r3, r6
 800a888:	429e      	cmp	r6, r3
 800a88a:	d200      	bcs.n	800a88e <__ssprint_r+0xae>
 800a88c:	4633      	mov	r3, r6
 800a88e:	461a      	mov	r2, r3
 800a890:	4659      	mov	r1, fp
 800a892:	6820      	ldr	r0, [r4, #0]
 800a894:	9301      	str	r3, [sp, #4]
 800a896:	f000 f96b 	bl	800ab70 <memmove>
 800a89a:	68a2      	ldr	r2, [r4, #8]
 800a89c:	9b01      	ldr	r3, [sp, #4]
 800a89e:	1ad2      	subs	r2, r2, r3
 800a8a0:	60a2      	str	r2, [r4, #8]
 800a8a2:	6822      	ldr	r2, [r4, #0]
 800a8a4:	4413      	add	r3, r2
 800a8a6:	6023      	str	r3, [r4, #0]
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	1b9e      	subs	r6, r3, r6
 800a8ac:	60be      	str	r6, [r7, #8]
 800a8ae:	2e00      	cmp	r6, #0
 800a8b0:	d1cf      	bne.n	800a852 <__ssprint_r+0x72>
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	b003      	add	sp, #12
 800a8b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8bc:	462a      	mov	r2, r5
 800a8be:	4648      	mov	r0, r9
 800a8c0:	f000 f970 	bl	800aba4 <_realloc_r>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d1d6      	bne.n	800a878 <__ssprint_r+0x98>
 800a8ca:	6921      	ldr	r1, [r4, #16]
 800a8cc:	4648      	mov	r0, r9
 800a8ce:	f000 f891 	bl	800a9f4 <_free_r>
 800a8d2:	e7b1      	b.n	800a838 <__ssprint_r+0x58>

0800a8d4 <__ascii_wctomb>:
 800a8d4:	b149      	cbz	r1, 800a8ea <__ascii_wctomb+0x16>
 800a8d6:	2aff      	cmp	r2, #255	; 0xff
 800a8d8:	bf85      	ittet	hi
 800a8da:	238a      	movhi	r3, #138	; 0x8a
 800a8dc:	6003      	strhi	r3, [r0, #0]
 800a8de:	700a      	strbls	r2, [r1, #0]
 800a8e0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800a8e4:	bf98      	it	ls
 800a8e6:	2001      	movls	r0, #1
 800a8e8:	4770      	bx	lr
 800a8ea:	4608      	mov	r0, r1
 800a8ec:	4770      	bx	lr

0800a8ee <_calloc_r>:
 800a8ee:	b510      	push	{r4, lr}
 800a8f0:	4351      	muls	r1, r2
 800a8f2:	f7ff fa5d 	bl	8009db0 <_malloc_r>
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	b198      	cbz	r0, 800a922 <_calloc_r+0x34>
 800a8fa:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800a8fe:	f022 0203 	bic.w	r2, r2, #3
 800a902:	3a04      	subs	r2, #4
 800a904:	2a24      	cmp	r2, #36	; 0x24
 800a906:	d81b      	bhi.n	800a940 <_calloc_r+0x52>
 800a908:	2a13      	cmp	r2, #19
 800a90a:	d917      	bls.n	800a93c <_calloc_r+0x4e>
 800a90c:	2100      	movs	r1, #0
 800a90e:	2a1b      	cmp	r2, #27
 800a910:	6001      	str	r1, [r0, #0]
 800a912:	6041      	str	r1, [r0, #4]
 800a914:	d807      	bhi.n	800a926 <_calloc_r+0x38>
 800a916:	f100 0308 	add.w	r3, r0, #8
 800a91a:	2200      	movs	r2, #0
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	605a      	str	r2, [r3, #4]
 800a920:	609a      	str	r2, [r3, #8]
 800a922:	4620      	mov	r0, r4
 800a924:	bd10      	pop	{r4, pc}
 800a926:	2a24      	cmp	r2, #36	; 0x24
 800a928:	6081      	str	r1, [r0, #8]
 800a92a:	60c1      	str	r1, [r0, #12]
 800a92c:	bf11      	iteee	ne
 800a92e:	f100 0310 	addne.w	r3, r0, #16
 800a932:	6101      	streq	r1, [r0, #16]
 800a934:	f100 0318 	addeq.w	r3, r0, #24
 800a938:	6141      	streq	r1, [r0, #20]
 800a93a:	e7ee      	b.n	800a91a <_calloc_r+0x2c>
 800a93c:	4603      	mov	r3, r0
 800a93e:	e7ec      	b.n	800a91a <_calloc_r+0x2c>
 800a940:	2100      	movs	r1, #0
 800a942:	f7fd faed 	bl	8007f20 <memset>
 800a946:	e7ec      	b.n	800a922 <_calloc_r+0x34>

0800a948 <_malloc_trim_r>:
 800a948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a94c:	4f25      	ldr	r7, [pc, #148]	; (800a9e4 <_malloc_trim_r+0x9c>)
 800a94e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 800a9f0 <_malloc_trim_r+0xa8>
 800a952:	4689      	mov	r9, r1
 800a954:	4606      	mov	r6, r0
 800a956:	f7ff fc57 	bl	800a208 <__malloc_lock>
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	685d      	ldr	r5, [r3, #4]
 800a95e:	f1a8 0411 	sub.w	r4, r8, #17
 800a962:	f025 0503 	bic.w	r5, r5, #3
 800a966:	eba4 0409 	sub.w	r4, r4, r9
 800a96a:	442c      	add	r4, r5
 800a96c:	fbb4 f4f8 	udiv	r4, r4, r8
 800a970:	3c01      	subs	r4, #1
 800a972:	fb08 f404 	mul.w	r4, r8, r4
 800a976:	4544      	cmp	r4, r8
 800a978:	da05      	bge.n	800a986 <_malloc_trim_r+0x3e>
 800a97a:	4630      	mov	r0, r6
 800a97c:	f7ff fc4a 	bl	800a214 <__malloc_unlock>
 800a980:	2000      	movs	r0, #0
 800a982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a986:	2100      	movs	r1, #0
 800a988:	4630      	mov	r0, r6
 800a98a:	f7ff ff19 	bl	800a7c0 <_sbrk_r>
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	442b      	add	r3, r5
 800a992:	4298      	cmp	r0, r3
 800a994:	d1f1      	bne.n	800a97a <_malloc_trim_r+0x32>
 800a996:	4261      	negs	r1, r4
 800a998:	4630      	mov	r0, r6
 800a99a:	f7ff ff11 	bl	800a7c0 <_sbrk_r>
 800a99e:	3001      	adds	r0, #1
 800a9a0:	d110      	bne.n	800a9c4 <_malloc_trim_r+0x7c>
 800a9a2:	2100      	movs	r1, #0
 800a9a4:	4630      	mov	r0, r6
 800a9a6:	f7ff ff0b 	bl	800a7c0 <_sbrk_r>
 800a9aa:	68ba      	ldr	r2, [r7, #8]
 800a9ac:	1a83      	subs	r3, r0, r2
 800a9ae:	2b0f      	cmp	r3, #15
 800a9b0:	dde3      	ble.n	800a97a <_malloc_trim_r+0x32>
 800a9b2:	490d      	ldr	r1, [pc, #52]	; (800a9e8 <_malloc_trim_r+0xa0>)
 800a9b4:	6809      	ldr	r1, [r1, #0]
 800a9b6:	1a40      	subs	r0, r0, r1
 800a9b8:	490c      	ldr	r1, [pc, #48]	; (800a9ec <_malloc_trim_r+0xa4>)
 800a9ba:	f043 0301 	orr.w	r3, r3, #1
 800a9be:	6008      	str	r0, [r1, #0]
 800a9c0:	6053      	str	r3, [r2, #4]
 800a9c2:	e7da      	b.n	800a97a <_malloc_trim_r+0x32>
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	4a09      	ldr	r2, [pc, #36]	; (800a9ec <_malloc_trim_r+0xa4>)
 800a9c8:	1b2d      	subs	r5, r5, r4
 800a9ca:	f045 0501 	orr.w	r5, r5, #1
 800a9ce:	605d      	str	r5, [r3, #4]
 800a9d0:	6813      	ldr	r3, [r2, #0]
 800a9d2:	4630      	mov	r0, r6
 800a9d4:	1b1c      	subs	r4, r3, r4
 800a9d6:	6014      	str	r4, [r2, #0]
 800a9d8:	f7ff fc1c 	bl	800a214 <__malloc_unlock>
 800a9dc:	2001      	movs	r0, #1
 800a9de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9e2:	bf00      	nop
 800a9e4:	20000398 	.word	0x20000398
 800a9e8:	200007a0 	.word	0x200007a0
 800a9ec:	20000b48 	.word	0x20000b48
 800a9f0:	00000080 	.word	0x00000080

0800a9f4 <_free_r>:
 800a9f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f8:	4604      	mov	r4, r0
 800a9fa:	4688      	mov	r8, r1
 800a9fc:	2900      	cmp	r1, #0
 800a9fe:	f000 80ab 	beq.w	800ab58 <_free_r+0x164>
 800aa02:	f7ff fc01 	bl	800a208 <__malloc_lock>
 800aa06:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800aa0a:	4d54      	ldr	r5, [pc, #336]	; (800ab5c <_free_r+0x168>)
 800aa0c:	f022 0001 	bic.w	r0, r2, #1
 800aa10:	f1a8 0308 	sub.w	r3, r8, #8
 800aa14:	181f      	adds	r7, r3, r0
 800aa16:	68a9      	ldr	r1, [r5, #8]
 800aa18:	687e      	ldr	r6, [r7, #4]
 800aa1a:	428f      	cmp	r7, r1
 800aa1c:	f026 0603 	bic.w	r6, r6, #3
 800aa20:	f002 0201 	and.w	r2, r2, #1
 800aa24:	d11b      	bne.n	800aa5e <_free_r+0x6a>
 800aa26:	4430      	add	r0, r6
 800aa28:	b93a      	cbnz	r2, 800aa3a <_free_r+0x46>
 800aa2a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800aa2e:	1a9b      	subs	r3, r3, r2
 800aa30:	4410      	add	r0, r2
 800aa32:	6899      	ldr	r1, [r3, #8]
 800aa34:	68da      	ldr	r2, [r3, #12]
 800aa36:	60ca      	str	r2, [r1, #12]
 800aa38:	6091      	str	r1, [r2, #8]
 800aa3a:	f040 0201 	orr.w	r2, r0, #1
 800aa3e:	605a      	str	r2, [r3, #4]
 800aa40:	60ab      	str	r3, [r5, #8]
 800aa42:	4b47      	ldr	r3, [pc, #284]	; (800ab60 <_free_r+0x16c>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4298      	cmp	r0, r3
 800aa48:	d304      	bcc.n	800aa54 <_free_r+0x60>
 800aa4a:	4b46      	ldr	r3, [pc, #280]	; (800ab64 <_free_r+0x170>)
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	6819      	ldr	r1, [r3, #0]
 800aa50:	f7ff ff7a 	bl	800a948 <_malloc_trim_r>
 800aa54:	4620      	mov	r0, r4
 800aa56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5a:	f7ff bbdb 	b.w	800a214 <__malloc_unlock>
 800aa5e:	607e      	str	r6, [r7, #4]
 800aa60:	2a00      	cmp	r2, #0
 800aa62:	d139      	bne.n	800aad8 <_free_r+0xe4>
 800aa64:	f858 1c08 	ldr.w	r1, [r8, #-8]
 800aa68:	1a5b      	subs	r3, r3, r1
 800aa6a:	4408      	add	r0, r1
 800aa6c:	6899      	ldr	r1, [r3, #8]
 800aa6e:	f105 0e08 	add.w	lr, r5, #8
 800aa72:	4571      	cmp	r1, lr
 800aa74:	d032      	beq.n	800aadc <_free_r+0xe8>
 800aa76:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800aa7a:	f8c1 e00c 	str.w	lr, [r1, #12]
 800aa7e:	f8ce 1008 	str.w	r1, [lr, #8]
 800aa82:	19b9      	adds	r1, r7, r6
 800aa84:	6849      	ldr	r1, [r1, #4]
 800aa86:	07c9      	lsls	r1, r1, #31
 800aa88:	d40a      	bmi.n	800aaa0 <_free_r+0xac>
 800aa8a:	4430      	add	r0, r6
 800aa8c:	68b9      	ldr	r1, [r7, #8]
 800aa8e:	bb3a      	cbnz	r2, 800aae0 <_free_r+0xec>
 800aa90:	4e35      	ldr	r6, [pc, #212]	; (800ab68 <_free_r+0x174>)
 800aa92:	42b1      	cmp	r1, r6
 800aa94:	d124      	bne.n	800aae0 <_free_r+0xec>
 800aa96:	616b      	str	r3, [r5, #20]
 800aa98:	612b      	str	r3, [r5, #16]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	60d9      	str	r1, [r3, #12]
 800aa9e:	6099      	str	r1, [r3, #8]
 800aaa0:	f040 0101 	orr.w	r1, r0, #1
 800aaa4:	6059      	str	r1, [r3, #4]
 800aaa6:	5018      	str	r0, [r3, r0]
 800aaa8:	2a00      	cmp	r2, #0
 800aaaa:	d1d3      	bne.n	800aa54 <_free_r+0x60>
 800aaac:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800aab0:	d21a      	bcs.n	800aae8 <_free_r+0xf4>
 800aab2:	08c0      	lsrs	r0, r0, #3
 800aab4:	1081      	asrs	r1, r0, #2
 800aab6:	2201      	movs	r2, #1
 800aab8:	408a      	lsls	r2, r1
 800aaba:	6869      	ldr	r1, [r5, #4]
 800aabc:	3001      	adds	r0, #1
 800aabe:	430a      	orrs	r2, r1
 800aac0:	606a      	str	r2, [r5, #4]
 800aac2:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800aac6:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 800aaca:	6099      	str	r1, [r3, #8]
 800aacc:	3a08      	subs	r2, #8
 800aace:	60da      	str	r2, [r3, #12]
 800aad0:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 800aad4:	60cb      	str	r3, [r1, #12]
 800aad6:	e7bd      	b.n	800aa54 <_free_r+0x60>
 800aad8:	2200      	movs	r2, #0
 800aada:	e7d2      	b.n	800aa82 <_free_r+0x8e>
 800aadc:	2201      	movs	r2, #1
 800aade:	e7d0      	b.n	800aa82 <_free_r+0x8e>
 800aae0:	68fe      	ldr	r6, [r7, #12]
 800aae2:	60ce      	str	r6, [r1, #12]
 800aae4:	60b1      	str	r1, [r6, #8]
 800aae6:	e7db      	b.n	800aaa0 <_free_r+0xac>
 800aae8:	0a42      	lsrs	r2, r0, #9
 800aaea:	2a04      	cmp	r2, #4
 800aaec:	d813      	bhi.n	800ab16 <_free_r+0x122>
 800aaee:	0982      	lsrs	r2, r0, #6
 800aaf0:	3238      	adds	r2, #56	; 0x38
 800aaf2:	1c51      	adds	r1, r2, #1
 800aaf4:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 800aaf8:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 800aafc:	428e      	cmp	r6, r1
 800aafe:	d124      	bne.n	800ab4a <_free_r+0x156>
 800ab00:	2001      	movs	r0, #1
 800ab02:	1092      	asrs	r2, r2, #2
 800ab04:	fa00 f202 	lsl.w	r2, r0, r2
 800ab08:	6868      	ldr	r0, [r5, #4]
 800ab0a:	4302      	orrs	r2, r0
 800ab0c:	606a      	str	r2, [r5, #4]
 800ab0e:	60de      	str	r6, [r3, #12]
 800ab10:	6099      	str	r1, [r3, #8]
 800ab12:	60b3      	str	r3, [r6, #8]
 800ab14:	e7de      	b.n	800aad4 <_free_r+0xe0>
 800ab16:	2a14      	cmp	r2, #20
 800ab18:	d801      	bhi.n	800ab1e <_free_r+0x12a>
 800ab1a:	325b      	adds	r2, #91	; 0x5b
 800ab1c:	e7e9      	b.n	800aaf2 <_free_r+0xfe>
 800ab1e:	2a54      	cmp	r2, #84	; 0x54
 800ab20:	d802      	bhi.n	800ab28 <_free_r+0x134>
 800ab22:	0b02      	lsrs	r2, r0, #12
 800ab24:	326e      	adds	r2, #110	; 0x6e
 800ab26:	e7e4      	b.n	800aaf2 <_free_r+0xfe>
 800ab28:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800ab2c:	d802      	bhi.n	800ab34 <_free_r+0x140>
 800ab2e:	0bc2      	lsrs	r2, r0, #15
 800ab30:	3277      	adds	r2, #119	; 0x77
 800ab32:	e7de      	b.n	800aaf2 <_free_r+0xfe>
 800ab34:	f240 5154 	movw	r1, #1364	; 0x554
 800ab38:	428a      	cmp	r2, r1
 800ab3a:	bf9a      	itte	ls
 800ab3c:	0c82      	lsrls	r2, r0, #18
 800ab3e:	327c      	addls	r2, #124	; 0x7c
 800ab40:	227e      	movhi	r2, #126	; 0x7e
 800ab42:	e7d6      	b.n	800aaf2 <_free_r+0xfe>
 800ab44:	6889      	ldr	r1, [r1, #8]
 800ab46:	428e      	cmp	r6, r1
 800ab48:	d004      	beq.n	800ab54 <_free_r+0x160>
 800ab4a:	684a      	ldr	r2, [r1, #4]
 800ab4c:	f022 0203 	bic.w	r2, r2, #3
 800ab50:	4290      	cmp	r0, r2
 800ab52:	d3f7      	bcc.n	800ab44 <_free_r+0x150>
 800ab54:	68ce      	ldr	r6, [r1, #12]
 800ab56:	e7da      	b.n	800ab0e <_free_r+0x11a>
 800ab58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab5c:	20000398 	.word	0x20000398
 800ab60:	200007a4 	.word	0x200007a4
 800ab64:	20000b78 	.word	0x20000b78
 800ab68:	200003a0 	.word	0x200003a0

0800ab6c <__retarget_lock_acquire_recursive>:
 800ab6c:	4770      	bx	lr

0800ab6e <__retarget_lock_release_recursive>:
 800ab6e:	4770      	bx	lr

0800ab70 <memmove>:
 800ab70:	4288      	cmp	r0, r1
 800ab72:	b510      	push	{r4, lr}
 800ab74:	eb01 0302 	add.w	r3, r1, r2
 800ab78:	d803      	bhi.n	800ab82 <memmove+0x12>
 800ab7a:	1e42      	subs	r2, r0, #1
 800ab7c:	4299      	cmp	r1, r3
 800ab7e:	d10c      	bne.n	800ab9a <memmove+0x2a>
 800ab80:	bd10      	pop	{r4, pc}
 800ab82:	4298      	cmp	r0, r3
 800ab84:	d2f9      	bcs.n	800ab7a <memmove+0xa>
 800ab86:	1881      	adds	r1, r0, r2
 800ab88:	1ad2      	subs	r2, r2, r3
 800ab8a:	42d3      	cmn	r3, r2
 800ab8c:	d100      	bne.n	800ab90 <memmove+0x20>
 800ab8e:	bd10      	pop	{r4, pc}
 800ab90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ab94:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ab98:	e7f7      	b.n	800ab8a <memmove+0x1a>
 800ab9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ab9e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800aba2:	e7eb      	b.n	800ab7c <memmove+0xc>

0800aba4 <_realloc_r>:
 800aba4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aba8:	4682      	mov	sl, r0
 800abaa:	460c      	mov	r4, r1
 800abac:	b929      	cbnz	r1, 800abba <_realloc_r+0x16>
 800abae:	4611      	mov	r1, r2
 800abb0:	b003      	add	sp, #12
 800abb2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb6:	f7ff b8fb 	b.w	8009db0 <_malloc_r>
 800abba:	9201      	str	r2, [sp, #4]
 800abbc:	f7ff fb24 	bl	800a208 <__malloc_lock>
 800abc0:	9a01      	ldr	r2, [sp, #4]
 800abc2:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800abc6:	f102 080b 	add.w	r8, r2, #11
 800abca:	f1b8 0f16 	cmp.w	r8, #22
 800abce:	f1a4 0908 	sub.w	r9, r4, #8
 800abd2:	f025 0603 	bic.w	r6, r5, #3
 800abd6:	d90a      	bls.n	800abee <_realloc_r+0x4a>
 800abd8:	f038 0807 	bics.w	r8, r8, #7
 800abdc:	d509      	bpl.n	800abf2 <_realloc_r+0x4e>
 800abde:	230c      	movs	r3, #12
 800abe0:	f8ca 3000 	str.w	r3, [sl]
 800abe4:	2700      	movs	r7, #0
 800abe6:	4638      	mov	r0, r7
 800abe8:	b003      	add	sp, #12
 800abea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abee:	f04f 0810 	mov.w	r8, #16
 800abf2:	4590      	cmp	r8, r2
 800abf4:	d3f3      	bcc.n	800abde <_realloc_r+0x3a>
 800abf6:	45b0      	cmp	r8, r6
 800abf8:	f340 8145 	ble.w	800ae86 <_realloc_r+0x2e2>
 800abfc:	4ba8      	ldr	r3, [pc, #672]	; (800aea0 <_realloc_r+0x2fc>)
 800abfe:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800ac02:	eb09 0106 	add.w	r1, r9, r6
 800ac06:	4571      	cmp	r1, lr
 800ac08:	469b      	mov	fp, r3
 800ac0a:	684b      	ldr	r3, [r1, #4]
 800ac0c:	d005      	beq.n	800ac1a <_realloc_r+0x76>
 800ac0e:	f023 0001 	bic.w	r0, r3, #1
 800ac12:	4408      	add	r0, r1
 800ac14:	6840      	ldr	r0, [r0, #4]
 800ac16:	07c7      	lsls	r7, r0, #31
 800ac18:	d447      	bmi.n	800acaa <_realloc_r+0x106>
 800ac1a:	f023 0303 	bic.w	r3, r3, #3
 800ac1e:	4571      	cmp	r1, lr
 800ac20:	eb06 0703 	add.w	r7, r6, r3
 800ac24:	d119      	bne.n	800ac5a <_realloc_r+0xb6>
 800ac26:	f108 0010 	add.w	r0, r8, #16
 800ac2a:	4287      	cmp	r7, r0
 800ac2c:	db3f      	blt.n	800acae <_realloc_r+0x10a>
 800ac2e:	eb09 0308 	add.w	r3, r9, r8
 800ac32:	eba7 0708 	sub.w	r7, r7, r8
 800ac36:	f047 0701 	orr.w	r7, r7, #1
 800ac3a:	f8cb 3008 	str.w	r3, [fp, #8]
 800ac3e:	605f      	str	r7, [r3, #4]
 800ac40:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ac44:	f003 0301 	and.w	r3, r3, #1
 800ac48:	ea43 0308 	orr.w	r3, r3, r8
 800ac4c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ac50:	4650      	mov	r0, sl
 800ac52:	f7ff fadf 	bl	800a214 <__malloc_unlock>
 800ac56:	4627      	mov	r7, r4
 800ac58:	e7c5      	b.n	800abe6 <_realloc_r+0x42>
 800ac5a:	45b8      	cmp	r8, r7
 800ac5c:	dc27      	bgt.n	800acae <_realloc_r+0x10a>
 800ac5e:	68cb      	ldr	r3, [r1, #12]
 800ac60:	688a      	ldr	r2, [r1, #8]
 800ac62:	60d3      	str	r3, [r2, #12]
 800ac64:	609a      	str	r2, [r3, #8]
 800ac66:	eba7 0008 	sub.w	r0, r7, r8
 800ac6a:	280f      	cmp	r0, #15
 800ac6c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800ac70:	eb09 0207 	add.w	r2, r9, r7
 800ac74:	f240 8109 	bls.w	800ae8a <_realloc_r+0x2e6>
 800ac78:	eb09 0108 	add.w	r1, r9, r8
 800ac7c:	f003 0301 	and.w	r3, r3, #1
 800ac80:	ea43 0308 	orr.w	r3, r3, r8
 800ac84:	f040 0001 	orr.w	r0, r0, #1
 800ac88:	f8c9 3004 	str.w	r3, [r9, #4]
 800ac8c:	6048      	str	r0, [r1, #4]
 800ac8e:	6853      	ldr	r3, [r2, #4]
 800ac90:	f043 0301 	orr.w	r3, r3, #1
 800ac94:	6053      	str	r3, [r2, #4]
 800ac96:	3108      	adds	r1, #8
 800ac98:	4650      	mov	r0, sl
 800ac9a:	f7ff feab 	bl	800a9f4 <_free_r>
 800ac9e:	4650      	mov	r0, sl
 800aca0:	f7ff fab8 	bl	800a214 <__malloc_unlock>
 800aca4:	f109 0708 	add.w	r7, r9, #8
 800aca8:	e79d      	b.n	800abe6 <_realloc_r+0x42>
 800acaa:	2300      	movs	r3, #0
 800acac:	4619      	mov	r1, r3
 800acae:	07e8      	lsls	r0, r5, #31
 800acb0:	f100 8084 	bmi.w	800adbc <_realloc_r+0x218>
 800acb4:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800acb8:	eba9 0505 	sub.w	r5, r9, r5
 800acbc:	6868      	ldr	r0, [r5, #4]
 800acbe:	f020 0003 	bic.w	r0, r0, #3
 800acc2:	4430      	add	r0, r6
 800acc4:	2900      	cmp	r1, #0
 800acc6:	d076      	beq.n	800adb6 <_realloc_r+0x212>
 800acc8:	4571      	cmp	r1, lr
 800acca:	d150      	bne.n	800ad6e <_realloc_r+0x1ca>
 800accc:	4403      	add	r3, r0
 800acce:	f108 0110 	add.w	r1, r8, #16
 800acd2:	428b      	cmp	r3, r1
 800acd4:	db6f      	blt.n	800adb6 <_realloc_r+0x212>
 800acd6:	462f      	mov	r7, r5
 800acd8:	68ea      	ldr	r2, [r5, #12]
 800acda:	f857 1f08 	ldr.w	r1, [r7, #8]!
 800acde:	60ca      	str	r2, [r1, #12]
 800ace0:	6091      	str	r1, [r2, #8]
 800ace2:	1f32      	subs	r2, r6, #4
 800ace4:	2a24      	cmp	r2, #36	; 0x24
 800ace6:	d83b      	bhi.n	800ad60 <_realloc_r+0x1bc>
 800ace8:	2a13      	cmp	r2, #19
 800acea:	d936      	bls.n	800ad5a <_realloc_r+0x1b6>
 800acec:	6821      	ldr	r1, [r4, #0]
 800acee:	60a9      	str	r1, [r5, #8]
 800acf0:	6861      	ldr	r1, [r4, #4]
 800acf2:	60e9      	str	r1, [r5, #12]
 800acf4:	2a1b      	cmp	r2, #27
 800acf6:	d81c      	bhi.n	800ad32 <_realloc_r+0x18e>
 800acf8:	f105 0210 	add.w	r2, r5, #16
 800acfc:	f104 0108 	add.w	r1, r4, #8
 800ad00:	6808      	ldr	r0, [r1, #0]
 800ad02:	6010      	str	r0, [r2, #0]
 800ad04:	6848      	ldr	r0, [r1, #4]
 800ad06:	6050      	str	r0, [r2, #4]
 800ad08:	6889      	ldr	r1, [r1, #8]
 800ad0a:	6091      	str	r1, [r2, #8]
 800ad0c:	eb05 0208 	add.w	r2, r5, r8
 800ad10:	eba3 0308 	sub.w	r3, r3, r8
 800ad14:	f043 0301 	orr.w	r3, r3, #1
 800ad18:	f8cb 2008 	str.w	r2, [fp, #8]
 800ad1c:	6053      	str	r3, [r2, #4]
 800ad1e:	686b      	ldr	r3, [r5, #4]
 800ad20:	f003 0301 	and.w	r3, r3, #1
 800ad24:	ea43 0308 	orr.w	r3, r3, r8
 800ad28:	606b      	str	r3, [r5, #4]
 800ad2a:	4650      	mov	r0, sl
 800ad2c:	f7ff fa72 	bl	800a214 <__malloc_unlock>
 800ad30:	e759      	b.n	800abe6 <_realloc_r+0x42>
 800ad32:	68a1      	ldr	r1, [r4, #8]
 800ad34:	6129      	str	r1, [r5, #16]
 800ad36:	68e1      	ldr	r1, [r4, #12]
 800ad38:	6169      	str	r1, [r5, #20]
 800ad3a:	2a24      	cmp	r2, #36	; 0x24
 800ad3c:	bf01      	itttt	eq
 800ad3e:	6922      	ldreq	r2, [r4, #16]
 800ad40:	61aa      	streq	r2, [r5, #24]
 800ad42:	6960      	ldreq	r0, [r4, #20]
 800ad44:	61e8      	streq	r0, [r5, #28]
 800ad46:	bf19      	ittee	ne
 800ad48:	f105 0218 	addne.w	r2, r5, #24
 800ad4c:	f104 0110 	addne.w	r1, r4, #16
 800ad50:	f105 0220 	addeq.w	r2, r5, #32
 800ad54:	f104 0118 	addeq.w	r1, r4, #24
 800ad58:	e7d2      	b.n	800ad00 <_realloc_r+0x15c>
 800ad5a:	463a      	mov	r2, r7
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	e7cf      	b.n	800ad00 <_realloc_r+0x15c>
 800ad60:	4621      	mov	r1, r4
 800ad62:	4638      	mov	r0, r7
 800ad64:	9301      	str	r3, [sp, #4]
 800ad66:	f7ff ff03 	bl	800ab70 <memmove>
 800ad6a:	9b01      	ldr	r3, [sp, #4]
 800ad6c:	e7ce      	b.n	800ad0c <_realloc_r+0x168>
 800ad6e:	18c7      	adds	r7, r0, r3
 800ad70:	45b8      	cmp	r8, r7
 800ad72:	dc20      	bgt.n	800adb6 <_realloc_r+0x212>
 800ad74:	68cb      	ldr	r3, [r1, #12]
 800ad76:	688a      	ldr	r2, [r1, #8]
 800ad78:	60d3      	str	r3, [r2, #12]
 800ad7a:	609a      	str	r2, [r3, #8]
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	68eb      	ldr	r3, [r5, #12]
 800ad80:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800ad84:	60d3      	str	r3, [r2, #12]
 800ad86:	609a      	str	r2, [r3, #8]
 800ad88:	1f32      	subs	r2, r6, #4
 800ad8a:	2a24      	cmp	r2, #36	; 0x24
 800ad8c:	d842      	bhi.n	800ae14 <_realloc_r+0x270>
 800ad8e:	2a13      	cmp	r2, #19
 800ad90:	d93e      	bls.n	800ae10 <_realloc_r+0x26c>
 800ad92:	6823      	ldr	r3, [r4, #0]
 800ad94:	60ab      	str	r3, [r5, #8]
 800ad96:	6863      	ldr	r3, [r4, #4]
 800ad98:	60eb      	str	r3, [r5, #12]
 800ad9a:	2a1b      	cmp	r2, #27
 800ad9c:	d824      	bhi.n	800ade8 <_realloc_r+0x244>
 800ad9e:	f105 0010 	add.w	r0, r5, #16
 800ada2:	f104 0308 	add.w	r3, r4, #8
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	6002      	str	r2, [r0, #0]
 800adaa:	685a      	ldr	r2, [r3, #4]
 800adac:	6042      	str	r2, [r0, #4]
 800adae:	689b      	ldr	r3, [r3, #8]
 800adb0:	6083      	str	r3, [r0, #8]
 800adb2:	46a9      	mov	r9, r5
 800adb4:	e757      	b.n	800ac66 <_realloc_r+0xc2>
 800adb6:	4580      	cmp	r8, r0
 800adb8:	4607      	mov	r7, r0
 800adba:	dddf      	ble.n	800ad7c <_realloc_r+0x1d8>
 800adbc:	4611      	mov	r1, r2
 800adbe:	4650      	mov	r0, sl
 800adc0:	f7fe fff6 	bl	8009db0 <_malloc_r>
 800adc4:	4607      	mov	r7, r0
 800adc6:	2800      	cmp	r0, #0
 800adc8:	d0af      	beq.n	800ad2a <_realloc_r+0x186>
 800adca:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800adce:	f023 0301 	bic.w	r3, r3, #1
 800add2:	f1a0 0208 	sub.w	r2, r0, #8
 800add6:	444b      	add	r3, r9
 800add8:	429a      	cmp	r2, r3
 800adda:	d11f      	bne.n	800ae1c <_realloc_r+0x278>
 800addc:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800ade0:	f027 0703 	bic.w	r7, r7, #3
 800ade4:	4437      	add	r7, r6
 800ade6:	e73e      	b.n	800ac66 <_realloc_r+0xc2>
 800ade8:	68a3      	ldr	r3, [r4, #8]
 800adea:	612b      	str	r3, [r5, #16]
 800adec:	68e3      	ldr	r3, [r4, #12]
 800adee:	616b      	str	r3, [r5, #20]
 800adf0:	2a24      	cmp	r2, #36	; 0x24
 800adf2:	bf01      	itttt	eq
 800adf4:	6923      	ldreq	r3, [r4, #16]
 800adf6:	61ab      	streq	r3, [r5, #24]
 800adf8:	6962      	ldreq	r2, [r4, #20]
 800adfa:	61ea      	streq	r2, [r5, #28]
 800adfc:	bf19      	ittee	ne
 800adfe:	f105 0018 	addne.w	r0, r5, #24
 800ae02:	f104 0310 	addne.w	r3, r4, #16
 800ae06:	f105 0020 	addeq.w	r0, r5, #32
 800ae0a:	f104 0318 	addeq.w	r3, r4, #24
 800ae0e:	e7ca      	b.n	800ada6 <_realloc_r+0x202>
 800ae10:	4623      	mov	r3, r4
 800ae12:	e7c8      	b.n	800ada6 <_realloc_r+0x202>
 800ae14:	4621      	mov	r1, r4
 800ae16:	f7ff feab 	bl	800ab70 <memmove>
 800ae1a:	e7ca      	b.n	800adb2 <_realloc_r+0x20e>
 800ae1c:	1f32      	subs	r2, r6, #4
 800ae1e:	2a24      	cmp	r2, #36	; 0x24
 800ae20:	d82d      	bhi.n	800ae7e <_realloc_r+0x2da>
 800ae22:	2a13      	cmp	r2, #19
 800ae24:	d928      	bls.n	800ae78 <_realloc_r+0x2d4>
 800ae26:	6823      	ldr	r3, [r4, #0]
 800ae28:	6003      	str	r3, [r0, #0]
 800ae2a:	6863      	ldr	r3, [r4, #4]
 800ae2c:	6043      	str	r3, [r0, #4]
 800ae2e:	2a1b      	cmp	r2, #27
 800ae30:	d80e      	bhi.n	800ae50 <_realloc_r+0x2ac>
 800ae32:	f100 0308 	add.w	r3, r0, #8
 800ae36:	f104 0208 	add.w	r2, r4, #8
 800ae3a:	6811      	ldr	r1, [r2, #0]
 800ae3c:	6019      	str	r1, [r3, #0]
 800ae3e:	6851      	ldr	r1, [r2, #4]
 800ae40:	6059      	str	r1, [r3, #4]
 800ae42:	6892      	ldr	r2, [r2, #8]
 800ae44:	609a      	str	r2, [r3, #8]
 800ae46:	4621      	mov	r1, r4
 800ae48:	4650      	mov	r0, sl
 800ae4a:	f7ff fdd3 	bl	800a9f4 <_free_r>
 800ae4e:	e76c      	b.n	800ad2a <_realloc_r+0x186>
 800ae50:	68a3      	ldr	r3, [r4, #8]
 800ae52:	6083      	str	r3, [r0, #8]
 800ae54:	68e3      	ldr	r3, [r4, #12]
 800ae56:	60c3      	str	r3, [r0, #12]
 800ae58:	2a24      	cmp	r2, #36	; 0x24
 800ae5a:	bf01      	itttt	eq
 800ae5c:	6923      	ldreq	r3, [r4, #16]
 800ae5e:	6103      	streq	r3, [r0, #16]
 800ae60:	6961      	ldreq	r1, [r4, #20]
 800ae62:	6141      	streq	r1, [r0, #20]
 800ae64:	bf19      	ittee	ne
 800ae66:	f100 0310 	addne.w	r3, r0, #16
 800ae6a:	f104 0210 	addne.w	r2, r4, #16
 800ae6e:	f100 0318 	addeq.w	r3, r0, #24
 800ae72:	f104 0218 	addeq.w	r2, r4, #24
 800ae76:	e7e0      	b.n	800ae3a <_realloc_r+0x296>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	4622      	mov	r2, r4
 800ae7c:	e7dd      	b.n	800ae3a <_realloc_r+0x296>
 800ae7e:	4621      	mov	r1, r4
 800ae80:	f7ff fe76 	bl	800ab70 <memmove>
 800ae84:	e7df      	b.n	800ae46 <_realloc_r+0x2a2>
 800ae86:	4637      	mov	r7, r6
 800ae88:	e6ed      	b.n	800ac66 <_realloc_r+0xc2>
 800ae8a:	f003 0301 	and.w	r3, r3, #1
 800ae8e:	431f      	orrs	r7, r3
 800ae90:	f8c9 7004 	str.w	r7, [r9, #4]
 800ae94:	6853      	ldr	r3, [r2, #4]
 800ae96:	f043 0301 	orr.w	r3, r3, #1
 800ae9a:	6053      	str	r3, [r2, #4]
 800ae9c:	e6ff      	b.n	800ac9e <_realloc_r+0xfa>
 800ae9e:	bf00      	nop
 800aea0:	20000398 	.word	0x20000398
 800aea4:	00000000 	.word	0x00000000

0800aea8 <exp>:
 800aea8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aeaa:	ed2d 8b02 	vpush	{d8}
 800aeae:	4e38      	ldr	r6, [pc, #224]	; (800af90 <exp+0xe8>)
 800aeb0:	b08b      	sub	sp, #44	; 0x2c
 800aeb2:	ec55 4b10 	vmov	r4, r5, d0
 800aeb6:	f000 f873 	bl	800afa0 <__ieee754_exp>
 800aeba:	f996 3000 	ldrsb.w	r3, [r6]
 800aebe:	eeb0 8a40 	vmov.f32	s16, s0
 800aec2:	eef0 8a60 	vmov.f32	s17, s1
 800aec6:	3301      	adds	r3, #1
 800aec8:	d02c      	beq.n	800af24 <exp+0x7c>
 800aeca:	ec45 4b10 	vmov	d0, r4, r5
 800aece:	f000 f9d9 	bl	800b284 <finite>
 800aed2:	b338      	cbz	r0, 800af24 <exp+0x7c>
 800aed4:	a32a      	add	r3, pc, #168	; (adr r3, 800af80 <exp+0xd8>)
 800aed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeda:	4620      	mov	r0, r4
 800aedc:	4629      	mov	r1, r5
 800aede:	f7f5 fe1f 	bl	8000b20 <__aeabi_dcmpgt>
 800aee2:	4607      	mov	r7, r0
 800aee4:	2800      	cmp	r0, #0
 800aee6:	d030      	beq.n	800af4a <exp+0xa2>
 800aee8:	2303      	movs	r3, #3
 800aeea:	9300      	str	r3, [sp, #0]
 800aeec:	4b29      	ldr	r3, [pc, #164]	; (800af94 <exp+0xec>)
 800aeee:	9301      	str	r3, [sp, #4]
 800aef0:	2300      	movs	r3, #0
 800aef2:	9308      	str	r3, [sp, #32]
 800aef4:	f996 3000 	ldrsb.w	r3, [r6]
 800aef8:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800aefc:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800af00:	b9c3      	cbnz	r3, 800af34 <exp+0x8c>
 800af02:	4b25      	ldr	r3, [pc, #148]	; (800af98 <exp+0xf0>)
 800af04:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800af08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af0c:	4668      	mov	r0, sp
 800af0e:	f000 f9c1 	bl	800b294 <matherr>
 800af12:	b1a8      	cbz	r0, 800af40 <exp+0x98>
 800af14:	9b08      	ldr	r3, [sp, #32]
 800af16:	b11b      	cbz	r3, 800af20 <exp+0x78>
 800af18:	f7fc ffd8 	bl	8007ecc <__errno>
 800af1c:	9b08      	ldr	r3, [sp, #32]
 800af1e:	6003      	str	r3, [r0, #0]
 800af20:	ed9d 8b06 	vldr	d8, [sp, #24]
 800af24:	eeb0 0a48 	vmov.f32	s0, s16
 800af28:	eef0 0a68 	vmov.f32	s1, s17
 800af2c:	b00b      	add	sp, #44	; 0x2c
 800af2e:	ecbd 8b02 	vpop	{d8}
 800af32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af34:	4919      	ldr	r1, [pc, #100]	; (800af9c <exp+0xf4>)
 800af36:	2000      	movs	r0, #0
 800af38:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	d1e5      	bne.n	800af0c <exp+0x64>
 800af40:	f7fc ffc4 	bl	8007ecc <__errno>
 800af44:	2322      	movs	r3, #34	; 0x22
 800af46:	6003      	str	r3, [r0, #0]
 800af48:	e7e4      	b.n	800af14 <exp+0x6c>
 800af4a:	a30f      	add	r3, pc, #60	; (adr r3, 800af88 <exp+0xe0>)
 800af4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af50:	4620      	mov	r0, r4
 800af52:	4629      	mov	r1, r5
 800af54:	f7f5 fdc6 	bl	8000ae4 <__aeabi_dcmplt>
 800af58:	2800      	cmp	r0, #0
 800af5a:	d0e3      	beq.n	800af24 <exp+0x7c>
 800af5c:	2304      	movs	r3, #4
 800af5e:	9300      	str	r3, [sp, #0]
 800af60:	4b0c      	ldr	r3, [pc, #48]	; (800af94 <exp+0xec>)
 800af62:	9301      	str	r3, [sp, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	2300      	movs	r3, #0
 800af68:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800af6c:	9708      	str	r7, [sp, #32]
 800af6e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800af72:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800af76:	f996 3000 	ldrsb.w	r3, [r6]
 800af7a:	e7df      	b.n	800af3c <exp+0x94>
 800af7c:	f3af 8000 	nop.w
 800af80:	fefa39ef 	.word	0xfefa39ef
 800af84:	40862e42 	.word	0x40862e42
 800af88:	d52d3051 	.word	0xd52d3051
 800af8c:	c0874910 	.word	0xc0874910
 800af90:	200007a8 	.word	0x200007a8
 800af94:	0800bc45 	.word	0x0800bc45
 800af98:	47efffff 	.word	0x47efffff
 800af9c:	7ff00000 	.word	0x7ff00000

0800afa0 <__ieee754_exp>:
 800afa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa4:	ec55 4b10 	vmov	r4, r5, d0
 800afa8:	4aad      	ldr	r2, [pc, #692]	; (800b260 <__ieee754_exp+0x2c0>)
 800afaa:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800afae:	4297      	cmp	r7, r2
 800afb0:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 800afb4:	f240 80af 	bls.w	800b116 <__ieee754_exp+0x176>
 800afb8:	4aaa      	ldr	r2, [pc, #680]	; (800b264 <__ieee754_exp+0x2c4>)
 800afba:	4297      	cmp	r7, r2
 800afbc:	d915      	bls.n	800afea <__ieee754_exp+0x4a>
 800afbe:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800afc2:	4323      	orrs	r3, r4
 800afc4:	d009      	beq.n	800afda <__ieee754_exp+0x3a>
 800afc6:	ee10 2a10 	vmov	r2, s0
 800afca:	462b      	mov	r3, r5
 800afcc:	4620      	mov	r0, r4
 800afce:	4629      	mov	r1, r5
 800afd0:	f7f5 f964 	bl	800029c <__adddf3>
 800afd4:	4604      	mov	r4, r0
 800afd6:	460d      	mov	r5, r1
 800afd8:	e002      	b.n	800afe0 <__ieee754_exp+0x40>
 800afda:	b10e      	cbz	r6, 800afe0 <__ieee754_exp+0x40>
 800afdc:	2400      	movs	r4, #0
 800afde:	2500      	movs	r5, #0
 800afe0:	ec45 4b10 	vmov	d0, r4, r5
 800afe4:	b003      	add	sp, #12
 800afe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afea:	a387      	add	r3, pc, #540	; (adr r3, 800b208 <__ieee754_exp+0x268>)
 800afec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff0:	ee10 0a10 	vmov	r0, s0
 800aff4:	4629      	mov	r1, r5
 800aff6:	f7f5 fd93 	bl	8000b20 <__aeabi_dcmpgt>
 800affa:	b138      	cbz	r0, 800b00c <__ieee754_exp+0x6c>
 800affc:	a384      	add	r3, pc, #528	; (adr r3, 800b210 <__ieee754_exp+0x270>)
 800affe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b002:	4610      	mov	r0, r2
 800b004:	4619      	mov	r1, r3
 800b006:	f7f5 fafb 	bl	8000600 <__aeabi_dmul>
 800b00a:	e7e3      	b.n	800afd4 <__ieee754_exp+0x34>
 800b00c:	a382      	add	r3, pc, #520	; (adr r3, 800b218 <__ieee754_exp+0x278>)
 800b00e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b012:	4620      	mov	r0, r4
 800b014:	4629      	mov	r1, r5
 800b016:	f7f5 fd65 	bl	8000ae4 <__aeabi_dcmplt>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d1de      	bne.n	800afdc <__ieee754_exp+0x3c>
 800b01e:	4b92      	ldr	r3, [pc, #584]	; (800b268 <__ieee754_exp+0x2c8>)
 800b020:	429f      	cmp	r7, r3
 800b022:	ea4f 07c6 	mov.w	r7, r6, lsl #3
 800b026:	f200 808e 	bhi.w	800b146 <__ieee754_exp+0x1a6>
 800b02a:	4b90      	ldr	r3, [pc, #576]	; (800b26c <__ieee754_exp+0x2cc>)
 800b02c:	443b      	add	r3, r7
 800b02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b032:	4620      	mov	r0, r4
 800b034:	4629      	mov	r1, r5
 800b036:	f7f5 f92f 	bl	8000298 <__aeabi_dsub>
 800b03a:	4b8d      	ldr	r3, [pc, #564]	; (800b270 <__ieee754_exp+0x2d0>)
 800b03c:	441f      	add	r7, r3
 800b03e:	ed97 7b00 	vldr	d7, [r7]
 800b042:	ed8d 7b00 	vstr	d7, [sp]
 800b046:	4682      	mov	sl, r0
 800b048:	f1c6 0001 	rsb	r0, r6, #1
 800b04c:	468b      	mov	fp, r1
 800b04e:	1b86      	subs	r6, r0, r6
 800b050:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b054:	4650      	mov	r0, sl
 800b056:	4659      	mov	r1, fp
 800b058:	f7f5 f91e 	bl	8000298 <__aeabi_dsub>
 800b05c:	4604      	mov	r4, r0
 800b05e:	460d      	mov	r5, r1
 800b060:	4622      	mov	r2, r4
 800b062:	462b      	mov	r3, r5
 800b064:	4620      	mov	r0, r4
 800b066:	4629      	mov	r1, r5
 800b068:	f7f5 faca 	bl	8000600 <__aeabi_dmul>
 800b06c:	a36c      	add	r3, pc, #432	; (adr r3, 800b220 <__ieee754_exp+0x280>)
 800b06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b072:	4680      	mov	r8, r0
 800b074:	4689      	mov	r9, r1
 800b076:	f7f5 fac3 	bl	8000600 <__aeabi_dmul>
 800b07a:	a36b      	add	r3, pc, #428	; (adr r3, 800b228 <__ieee754_exp+0x288>)
 800b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b080:	f7f5 f90a 	bl	8000298 <__aeabi_dsub>
 800b084:	4642      	mov	r2, r8
 800b086:	464b      	mov	r3, r9
 800b088:	f7f5 faba 	bl	8000600 <__aeabi_dmul>
 800b08c:	a368      	add	r3, pc, #416	; (adr r3, 800b230 <__ieee754_exp+0x290>)
 800b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b092:	f7f5 f903 	bl	800029c <__adddf3>
 800b096:	4642      	mov	r2, r8
 800b098:	464b      	mov	r3, r9
 800b09a:	f7f5 fab1 	bl	8000600 <__aeabi_dmul>
 800b09e:	a366      	add	r3, pc, #408	; (adr r3, 800b238 <__ieee754_exp+0x298>)
 800b0a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a4:	f7f5 f8f8 	bl	8000298 <__aeabi_dsub>
 800b0a8:	4642      	mov	r2, r8
 800b0aa:	464b      	mov	r3, r9
 800b0ac:	f7f5 faa8 	bl	8000600 <__aeabi_dmul>
 800b0b0:	a363      	add	r3, pc, #396	; (adr r3, 800b240 <__ieee754_exp+0x2a0>)
 800b0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b6:	f7f5 f8f1 	bl	800029c <__adddf3>
 800b0ba:	4642      	mov	r2, r8
 800b0bc:	464b      	mov	r3, r9
 800b0be:	f7f5 fa9f 	bl	8000600 <__aeabi_dmul>
 800b0c2:	4602      	mov	r2, r0
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	4620      	mov	r0, r4
 800b0c8:	4629      	mov	r1, r5
 800b0ca:	f7f5 f8e5 	bl	8000298 <__aeabi_dsub>
 800b0ce:	4680      	mov	r8, r0
 800b0d0:	4689      	mov	r9, r1
 800b0d2:	4602      	mov	r2, r0
 800b0d4:	460b      	mov	r3, r1
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	4629      	mov	r1, r5
 800b0da:	2e00      	cmp	r6, #0
 800b0dc:	d162      	bne.n	800b1a4 <__ieee754_exp+0x204>
 800b0de:	f7f5 fa8f 	bl	8000600 <__aeabi_dmul>
 800b0e2:	2200      	movs	r2, #0
 800b0e4:	4606      	mov	r6, r0
 800b0e6:	460f      	mov	r7, r1
 800b0e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	f7f5 f8d2 	bl	8000298 <__aeabi_dsub>
 800b0f4:	4602      	mov	r2, r0
 800b0f6:	460b      	mov	r3, r1
 800b0f8:	4630      	mov	r0, r6
 800b0fa:	4639      	mov	r1, r7
 800b0fc:	f7f5 fbaa 	bl	8000854 <__aeabi_ddiv>
 800b100:	4622      	mov	r2, r4
 800b102:	462b      	mov	r3, r5
 800b104:	f7f5 f8c8 	bl	8000298 <__aeabi_dsub>
 800b108:	4602      	mov	r2, r0
 800b10a:	460b      	mov	r3, r1
 800b10c:	2000      	movs	r0, #0
 800b10e:	4959      	ldr	r1, [pc, #356]	; (800b274 <__ieee754_exp+0x2d4>)
 800b110:	f7f5 f8c2 	bl	8000298 <__aeabi_dsub>
 800b114:	e75e      	b.n	800afd4 <__ieee754_exp+0x34>
 800b116:	4b58      	ldr	r3, [pc, #352]	; (800b278 <__ieee754_exp+0x2d8>)
 800b118:	429f      	cmp	r7, r3
 800b11a:	d880      	bhi.n	800b01e <__ieee754_exp+0x7e>
 800b11c:	4b57      	ldr	r3, [pc, #348]	; (800b27c <__ieee754_exp+0x2dc>)
 800b11e:	429f      	cmp	r7, r3
 800b120:	d83c      	bhi.n	800b19c <__ieee754_exp+0x1fc>
 800b122:	a33b      	add	r3, pc, #236	; (adr r3, 800b210 <__ieee754_exp+0x270>)
 800b124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b128:	ee10 0a10 	vmov	r0, s0
 800b12c:	4629      	mov	r1, r5
 800b12e:	f7f5 f8b5 	bl	800029c <__adddf3>
 800b132:	2200      	movs	r2, #0
 800b134:	4b4f      	ldr	r3, [pc, #316]	; (800b274 <__ieee754_exp+0x2d4>)
 800b136:	f7f5 fcf3 	bl	8000b20 <__aeabi_dcmpgt>
 800b13a:	b388      	cbz	r0, 800b1a0 <__ieee754_exp+0x200>
 800b13c:	2200      	movs	r2, #0
 800b13e:	4b4d      	ldr	r3, [pc, #308]	; (800b274 <__ieee754_exp+0x2d4>)
 800b140:	4620      	mov	r0, r4
 800b142:	4629      	mov	r1, r5
 800b144:	e744      	b.n	800afd0 <__ieee754_exp+0x30>
 800b146:	4e4e      	ldr	r6, [pc, #312]	; (800b280 <__ieee754_exp+0x2e0>)
 800b148:	a33f      	add	r3, pc, #252	; (adr r3, 800b248 <__ieee754_exp+0x2a8>)
 800b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14e:	443e      	add	r6, r7
 800b150:	4620      	mov	r0, r4
 800b152:	4629      	mov	r1, r5
 800b154:	f7f5 fa54 	bl	8000600 <__aeabi_dmul>
 800b158:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b15c:	f7f5 f89e 	bl	800029c <__adddf3>
 800b160:	f7f5 fcfe 	bl	8000b60 <__aeabi_d2iz>
 800b164:	4606      	mov	r6, r0
 800b166:	f7f5 f9e5 	bl	8000534 <__aeabi_i2d>
 800b16a:	a339      	add	r3, pc, #228	; (adr r3, 800b250 <__ieee754_exp+0x2b0>)
 800b16c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b170:	4680      	mov	r8, r0
 800b172:	4689      	mov	r9, r1
 800b174:	f7f5 fa44 	bl	8000600 <__aeabi_dmul>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	4620      	mov	r0, r4
 800b17e:	4629      	mov	r1, r5
 800b180:	f7f5 f88a 	bl	8000298 <__aeabi_dsub>
 800b184:	a334      	add	r3, pc, #208	; (adr r3, 800b258 <__ieee754_exp+0x2b8>)
 800b186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18a:	4682      	mov	sl, r0
 800b18c:	468b      	mov	fp, r1
 800b18e:	4640      	mov	r0, r8
 800b190:	4649      	mov	r1, r9
 800b192:	f7f5 fa35 	bl	8000600 <__aeabi_dmul>
 800b196:	e9cd 0100 	strd	r0, r1, [sp]
 800b19a:	e759      	b.n	800b050 <__ieee754_exp+0xb0>
 800b19c:	2600      	movs	r6, #0
 800b19e:	e75f      	b.n	800b060 <__ieee754_exp+0xc0>
 800b1a0:	4606      	mov	r6, r0
 800b1a2:	e75d      	b.n	800b060 <__ieee754_exp+0xc0>
 800b1a4:	f7f5 fa2c 	bl	8000600 <__aeabi_dmul>
 800b1a8:	4642      	mov	r2, r8
 800b1aa:	4604      	mov	r4, r0
 800b1ac:	460d      	mov	r5, r1
 800b1ae:	464b      	mov	r3, r9
 800b1b0:	2000      	movs	r0, #0
 800b1b2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800b1b6:	f7f5 f86f 	bl	8000298 <__aeabi_dsub>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	460b      	mov	r3, r1
 800b1be:	4620      	mov	r0, r4
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	f7f5 fb47 	bl	8000854 <__aeabi_ddiv>
 800b1c6:	4602      	mov	r2, r0
 800b1c8:	460b      	mov	r3, r1
 800b1ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b1ce:	f7f5 f863 	bl	8000298 <__aeabi_dsub>
 800b1d2:	4652      	mov	r2, sl
 800b1d4:	465b      	mov	r3, fp
 800b1d6:	f7f5 f85f 	bl	8000298 <__aeabi_dsub>
 800b1da:	460b      	mov	r3, r1
 800b1dc:	4602      	mov	r2, r0
 800b1de:	4925      	ldr	r1, [pc, #148]	; (800b274 <__ieee754_exp+0x2d4>)
 800b1e0:	2000      	movs	r0, #0
 800b1e2:	f7f5 f859 	bl	8000298 <__aeabi_dsub>
 800b1e6:	f46f 737f 	mvn.w	r3, #1020	; 0x3fc
 800b1ea:	429e      	cmp	r6, r3
 800b1ec:	db02      	blt.n	800b1f4 <__ieee754_exp+0x254>
 800b1ee:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 800b1f2:	e6ef      	b.n	800afd4 <__ieee754_exp+0x34>
 800b1f4:	f506 767a 	add.w	r6, r6, #1000	; 0x3e8
 800b1f8:	eb01 5106 	add.w	r1, r1, r6, lsl #20
 800b1fc:	2200      	movs	r2, #0
 800b1fe:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 800b202:	e700      	b.n	800b006 <__ieee754_exp+0x66>
 800b204:	f3af 8000 	nop.w
 800b208:	fefa39ef 	.word	0xfefa39ef
 800b20c:	40862e42 	.word	0x40862e42
 800b210:	8800759c 	.word	0x8800759c
 800b214:	7e37e43c 	.word	0x7e37e43c
 800b218:	d52d3051 	.word	0xd52d3051
 800b21c:	c0874910 	.word	0xc0874910
 800b220:	72bea4d0 	.word	0x72bea4d0
 800b224:	3e663769 	.word	0x3e663769
 800b228:	c5d26bf1 	.word	0xc5d26bf1
 800b22c:	3ebbbd41 	.word	0x3ebbbd41
 800b230:	af25de2c 	.word	0xaf25de2c
 800b234:	3f11566a 	.word	0x3f11566a
 800b238:	16bebd93 	.word	0x16bebd93
 800b23c:	3f66c16c 	.word	0x3f66c16c
 800b240:	5555553e 	.word	0x5555553e
 800b244:	3fc55555 	.word	0x3fc55555
 800b248:	652b82fe 	.word	0x652b82fe
 800b24c:	3ff71547 	.word	0x3ff71547
 800b250:	fee00000 	.word	0xfee00000
 800b254:	3fe62e42 	.word	0x3fe62e42
 800b258:	35793c76 	.word	0x35793c76
 800b25c:	3dea39ef 	.word	0x3dea39ef
 800b260:	40862e41 	.word	0x40862e41
 800b264:	7fefffff 	.word	0x7fefffff
 800b268:	3ff0a2b1 	.word	0x3ff0a2b1
 800b26c:	0800bc60 	.word	0x0800bc60
 800b270:	0800bc70 	.word	0x0800bc70
 800b274:	3ff00000 	.word	0x3ff00000
 800b278:	3fd62e42 	.word	0x3fd62e42
 800b27c:	3e2fffff 	.word	0x3e2fffff
 800b280:	0800bc50 	.word	0x0800bc50

0800b284 <finite>:
 800b284:	ee10 3a90 	vmov	r3, s1
 800b288:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800b28c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800b290:	0fc0      	lsrs	r0, r0, #31
 800b292:	4770      	bx	lr

0800b294 <matherr>:
 800b294:	2000      	movs	r0, #0
 800b296:	4770      	bx	lr

0800b298 <_init>:
 800b298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29a:	bf00      	nop
 800b29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b29e:	bc08      	pop	{r3}
 800b2a0:	469e      	mov	lr, r3
 800b2a2:	4770      	bx	lr

0800b2a4 <_fini>:
 800b2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a6:	bf00      	nop
 800b2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2aa:	bc08      	pop	{r3}
 800b2ac:	469e      	mov	lr, r3
 800b2ae:	4770      	bx	lr
