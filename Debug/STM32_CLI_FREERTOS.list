
STM32_CLI_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e7c  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000770  08007020  08007020  00017020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007790  08007790  00017790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800779c  0800779c  0001779c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000690  20000000  080077a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003e0  20000690  08007e30  00020690  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a70  08007e30  00020a70  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020690  2**0
                  CONTENTS, READONLY
 10 .debug_info   000114db  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000025c1  00000000  00000000  00031b9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007f0  00000000  00000000  00034160  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006d8  00000000  00000000  00034950  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000456a  00000000  00000000  00035028  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002b10  00000000  00000000  00039592  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003c0a2  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002984  00000000  00000000  0003c120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000690 	.word	0x20000690
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007004 	.word	0x08007004

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000694 	.word	0x20000694
 80001dc:	08007004 	.word	0x08007004

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b97a 	b.w	8000ebc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	468c      	mov	ip, r1
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	9e08      	ldr	r6, [sp, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d151      	bne.n	8000c94 <__udivmoddi4+0xb4>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d96d      	bls.n	8000cd2 <__udivmoddi4+0xf2>
 8000bf6:	fab2 fe82 	clz	lr, r2
 8000bfa:	f1be 0f00 	cmp.w	lr, #0
 8000bfe:	d00b      	beq.n	8000c18 <__udivmoddi4+0x38>
 8000c00:	f1ce 0c20 	rsb	ip, lr, #32
 8000c04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c1c:	0c25      	lsrs	r5, r4, #16
 8000c1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c22:	fa1f f987 	uxth.w	r9, r7
 8000c26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c2e:	fb08 f309 	mul.w	r3, r8, r9
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x6c>
 8000c36:	19ed      	adds	r5, r5, r7
 8000c38:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8123 	bcs.w	8000e86 <__udivmoddi4+0x2a6>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	f240 8120 	bls.w	8000e86 <__udivmoddi4+0x2a6>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	443d      	add	r5, r7
 8000c4c:	1aed      	subs	r5, r5, r3
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb00 f909 	mul.w	r9, r0, r9
 8000c60:	45a1      	cmp	r9, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x98>
 8000c64:	19e4      	adds	r4, r4, r7
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 810a 	bcs.w	8000e82 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8107 	bls.w	8000e82 <__udivmoddi4+0x2a2>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	eba4 0409 	sub.w	r4, r4, r9
 8000c7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c80:	2100      	movs	r1, #0
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d061      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000c86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6034      	str	r4, [r6, #0]
 8000c8e:	6073      	str	r3, [r6, #4]
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xc8>
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d054      	beq.n	8000d46 <__udivmoddi4+0x166>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	f040 808e 	bne.w	8000dce <__udivmoddi4+0x1ee>
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xdc>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2d0>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	46ac      	mov	ip, r5
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d03f      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000cca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b912      	cbnz	r2, 8000cda <__udivmoddi4+0xfa>
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cda:	fab7 fe87 	clz	lr, r7
 8000cde:	f1be 0f00 	cmp.w	lr, #0
 8000ce2:	d134      	bne.n	8000d4e <__udivmoddi4+0x16e>
 8000ce4:	1beb      	subs	r3, r5, r7
 8000ce6:	0c3a      	lsrs	r2, r7, #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cf2:	0c25      	lsrs	r5, r4, #16
 8000cf4:	fb02 3318 	mls	r3, r2, r8, r3
 8000cf8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfc:	fb0c f308 	mul.w	r3, ip, r8
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x134>
 8000d04:	19ed      	adds	r5, r5, r7
 8000d06:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x132>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	f200 80d1 	bhi.w	8000eb4 <__udivmoddi4+0x2d4>
 8000d12:	4680      	mov	r8, r0
 8000d14:	1aed      	subs	r5, r5, r3
 8000d16:	b2a3      	uxth	r3, r4
 8000d18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d24:	fb0c fc00 	mul.w	ip, ip, r0
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x15c>
 8000d2c:	19e4      	adds	r4, r4, r7
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x15a>
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	f200 80b8 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d44:	e79d      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1ce 0420 	rsb	r4, lr, #32
 8000d52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d5e:	0c3a      	lsrs	r2, r7, #16
 8000d60:	fa25 f404 	lsr.w	r4, r5, r4
 8000d64:	ea48 0803 	orr.w	r8, r8, r3
 8000d68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d70:	fb02 4411 	mls	r4, r2, r1, r4
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x1bc>
 8000d88:	19ed      	adds	r5, r5, r7
 8000d8a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d8e:	f080 808a 	bcs.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	f240 8087 	bls.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d98:	3902      	subs	r1, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aeb      	subs	r3, r5, r3
 8000d9e:	fa1f f588 	uxth.w	r5, r8
 8000da2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000da6:	fb02 3310 	mls	r3, r2, r0, r3
 8000daa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dae:	fb00 f30c 	mul.w	r3, r0, ip
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1e6>
 8000db6:	19ed      	adds	r5, r5, r7
 8000db8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dbc:	d26f      	bcs.n	8000e9e <__udivmoddi4+0x2be>
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d96d      	bls.n	8000e9e <__udivmoddi4+0x2be>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	1aeb      	subs	r3, r5, r3
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	e78f      	b.n	8000cee <__udivmoddi4+0x10e>
 8000dce:	f1c1 0720 	rsb	r7, r1, #32
 8000dd2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dd6:	408b      	lsls	r3, r1
 8000dd8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ddc:	ea48 0303 	orr.w	r3, r8, r3
 8000de0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000de4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000df2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000df6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dfa:	fa1f f883 	uxth.w	r8, r3
 8000dfe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e02:	fb09 f408 	mul.w	r4, r9, r8
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x244>
 8000e12:	18ed      	adds	r5, r5, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	d243      	bcs.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	d941      	bls.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e22:	441d      	add	r5, r3
 8000e24:	1b2d      	subs	r5, r5, r4
 8000e26:	fa1f fe8e 	uxth.w	lr, lr
 8000e2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e36:	fb00 f808 	mul.w	r8, r0, r8
 8000e3a:	45a0      	cmp	r8, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x26e>
 8000e3e:	18e4      	adds	r4, r4, r3
 8000e40:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e44:	d229      	bcs.n	8000e9a <__udivmoddi4+0x2ba>
 8000e46:	45a0      	cmp	r8, r4
 8000e48:	d927      	bls.n	8000e9a <__udivmoddi4+0x2ba>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	441c      	add	r4, r3
 8000e4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e52:	eba4 0408 	sub.w	r4, r4, r8
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	454c      	cmp	r4, r9
 8000e5c:	46c6      	mov	lr, r8
 8000e5e:	464d      	mov	r5, r9
 8000e60:	d315      	bcc.n	8000e8e <__udivmoddi4+0x2ae>
 8000e62:	d012      	beq.n	8000e8a <__udivmoddi4+0x2aa>
 8000e64:	b156      	cbz	r6, 8000e7c <__udivmoddi4+0x29c>
 8000e66:	ebba 030e 	subs.w	r3, sl, lr
 8000e6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431f      	orrs	r7, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	6037      	str	r7, [r6, #0]
 8000e7a:	6074      	str	r4, [r6, #4]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	4618      	mov	r0, r3
 8000e84:	e6f8      	b.n	8000c78 <__udivmoddi4+0x98>
 8000e86:	4690      	mov	r8, r2
 8000e88:	e6e0      	b.n	8000c4c <__udivmoddi4+0x6c>
 8000e8a:	45c2      	cmp	sl, r8
 8000e8c:	d2ea      	bcs.n	8000e64 <__udivmoddi4+0x284>
 8000e8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e92:	eb69 0503 	sbc.w	r5, r9, r3
 8000e96:	3801      	subs	r0, #1
 8000e98:	e7e4      	b.n	8000e64 <__udivmoddi4+0x284>
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	e7d7      	b.n	8000e4e <__udivmoddi4+0x26e>
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	e791      	b.n	8000dc6 <__udivmoddi4+0x1e6>
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	e7be      	b.n	8000e24 <__udivmoddi4+0x244>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	e778      	b.n	8000d9c <__udivmoddi4+0x1bc>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	e745      	b.n	8000d3c <__udivmoddi4+0x15c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xe6>
 8000eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb8:	443d      	add	r5, r7
 8000eba:	e72b      	b.n	8000d14 <__udivmoddi4+0x134>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_Init+0x40>)
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_Init+0x40>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_Init+0x40>)
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_Init+0x40>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <HAL_Init+0x40>)
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x40>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f925 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f002 fdb8 	bl	8003a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f93d 	bl	80011a2 <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f40:	f000 f905 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000014 	.word	0x20000014
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	20000000 	.word	0x20000000

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000004 	.word	0x20000004
 8000f88:	200009bc 	.word	0x200009bc

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	200009bc 	.word	0x200009bc

08000fa4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001012:	4909      	ldr	r1, [pc, #36]	; (8001038 <NVIC_EnableIRQ+0x30>)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	095b      	lsrs	r3, r3, #5
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	f002 021f 	and.w	r2, r2, #31
 8001020:	2001      	movs	r0, #1
 8001022:	fa00 f202 	lsl.w	r2, r0, r2
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100

0800103c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	da0b      	bge.n	8001068 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	490d      	ldr	r1, [pc, #52]	; (8001088 <NVIC_SetPriority+0x4c>)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	3b04      	subs	r3, #4
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001066:	e009      	b.n	800107c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	4908      	ldr	r1, [pc, #32]	; (800108c <NVIC_SetPriority+0x50>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	e000e100 	.word	0xe000e100

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	2201      	movs	r2, #1
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	401a      	ands	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d6:	2101      	movs	r1, #1
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	1e59      	subs	r1, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001118:	f7ff ff90 	bl	800103c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff2f 	bl	8000fa4 <NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff44 	bl	8000fec <NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff90 	bl	8001090 <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5f 	bl	800103c <NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff37 	bl	8001008 <NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffa2 	bl	80010f4 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d106      	bne.n	80011d8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80011d6:	e005      	b.n	80011e4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 0304 	bic.w	r3, r3, #4
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80011f8:	f002 fb14 	bl	8003824 <HAL_SYSTICK_Callback>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff febe 	bl	8000f8c <HAL_GetTick>
 8001210:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d101      	bne.n	800121c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001218:	2301      	movs	r3, #1
 800121a:	e099      	b.n	8001350 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2202      	movs	r2, #2
 8001228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	6812      	ldr	r2, [r2, #0]
 8001236:	f022 0201 	bic.w	r2, r2, #1
 800123a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800123c:	e00f      	b.n	800125e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800123e:	f7ff fea5 	bl	8000f8c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b05      	cmp	r3, #5
 800124a:	d908      	bls.n	800125e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2220      	movs	r2, #32
 8001250:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2203      	movs	r2, #3
 8001256:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e078      	b.n	8001350 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1e8      	bne.n	800123e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	4b38      	ldr	r3, [pc, #224]	; (8001358 <HAL_DMA_Init+0x158>)
 8001278:	4013      	ands	r3, r2
 800127a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685a      	ldr	r2, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800128a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	691b      	ldr	r3, [r3, #16]
 8001290:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001296:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012aa:	697a      	ldr	r2, [r7, #20]
 80012ac:	4313      	orrs	r3, r2
 80012ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d107      	bne.n	80012c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	4313      	orrs	r3, r2
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	697a      	ldr	r2, [r7, #20]
 80012ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	f023 0307 	bic.w	r3, r3, #7
 80012de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	697a      	ldr	r2, [r7, #20]
 80012e6:	4313      	orrs	r3, r2
 80012e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	d117      	bne.n	8001322 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f6:	697a      	ldr	r2, [r7, #20]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001300:	2b00      	cmp	r3, #0
 8001302:	d00e      	beq.n	8001322 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f000 fa77 	bl	80017f8 <DMA_CheckFifoParam>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d008      	beq.n	8001322 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2240      	movs	r2, #64	; 0x40
 8001314:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2201      	movs	r2, #1
 800131a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800131e:	2301      	movs	r3, #1
 8001320:	e016      	b.n	8001350 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	697a      	ldr	r2, [r7, #20]
 8001328:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f000 fa2e 	bl	800178c <DMA_CalcBaseAndBitshift>
 8001330:	4603      	mov	r3, r0
 8001332:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001338:	223f      	movs	r2, #63	; 0x3f
 800133a:	409a      	lsls	r2, r3
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2201      	movs	r2, #1
 800134a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3718      	adds	r7, #24
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	f010803f 	.word	0xf010803f

0800135c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
 8001362:	60f8      	str	r0, [r7, #12]
 8001364:	60b9      	str	r1, [r7, #8]
 8001366:	607a      	str	r2, [r7, #4]
 8001368:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800136a:	2300      	movs	r3, #0
 800136c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001372:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800137a:	2b01      	cmp	r3, #1
 800137c:	d101      	bne.n	8001382 <HAL_DMA_Start_IT+0x26>
 800137e:	2302      	movs	r3, #2
 8001380:	e048      	b.n	8001414 <HAL_DMA_Start_IT+0xb8>
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001390:	b2db      	uxtb	r3, r3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d137      	bne.n	8001406 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	2202      	movs	r2, #2
 800139a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2200      	movs	r2, #0
 80013a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	68b9      	ldr	r1, [r7, #8]
 80013aa:	68f8      	ldr	r0, [r7, #12]
 80013ac:	f000 f9c0 	bl	8001730 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013b4:	223f      	movs	r2, #63	; 0x3f
 80013b6:	409a      	lsls	r2, r3
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	68fa      	ldr	r2, [r7, #12]
 80013c2:	6812      	ldr	r2, [r2, #0]
 80013c4:	6812      	ldr	r2, [r2, #0]
 80013c6:	f042 0216 	orr.w	r2, r2, #22
 80013ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	6952      	ldr	r2, [r2, #20]
 80013d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013da:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d007      	beq.n	80013f4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	68fa      	ldr	r2, [r7, #12]
 80013ea:	6812      	ldr	r2, [r2, #0]
 80013ec:	6812      	ldr	r2, [r2, #0]
 80013ee:	f042 0208 	orr.w	r2, r2, #8
 80013f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	f042 0201 	orr.w	r2, r2, #1
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	e005      	b.n	8001412 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2200      	movs	r2, #0
 800140a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800140e:	2302      	movs	r3, #2
 8001410:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001412:	7dfb      	ldrb	r3, [r7, #23]
}
 8001414:	4618      	mov	r0, r3
 8001416:	3718      	adds	r7, #24
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001428:	4b92      	ldr	r3, [pc, #584]	; (8001674 <HAL_DMA_IRQHandler+0x258>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a92      	ldr	r2, [pc, #584]	; (8001678 <HAL_DMA_IRQHandler+0x25c>)
 800142e:	fba2 2303 	umull	r2, r3, r2, r3
 8001432:	0a9b      	lsrs	r3, r3, #10
 8001434:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001446:	2208      	movs	r2, #8
 8001448:	409a      	lsls	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	4013      	ands	r3, r2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d01a      	beq.n	8001488 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	d013      	beq.n	8001488 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6812      	ldr	r2, [r2, #0]
 8001468:	6812      	ldr	r2, [r2, #0]
 800146a:	f022 0204 	bic.w	r2, r2, #4
 800146e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001474:	2208      	movs	r2, #8
 8001476:	409a      	lsls	r2, r3
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001480:	f043 0201 	orr.w	r2, r3, #1
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800148c:	2201      	movs	r2, #1
 800148e:	409a      	lsls	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	4013      	ands	r3, r2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d012      	beq.n	80014be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	695b      	ldr	r3, [r3, #20]
 800149e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d00b      	beq.n	80014be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014aa:	2201      	movs	r2, #1
 80014ac:	409a      	lsls	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b6:	f043 0202 	orr.w	r2, r3, #2
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c2:	2204      	movs	r2, #4
 80014c4:	409a      	lsls	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d012      	beq.n	80014f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d00b      	beq.n	80014f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014e0:	2204      	movs	r2, #4
 80014e2:	409a      	lsls	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ec:	f043 0204 	orr.w	r2, r3, #4
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	2210      	movs	r2, #16
 80014fa:	409a      	lsls	r2, r3
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4013      	ands	r3, r2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d043      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	2b00      	cmp	r3, #0
 8001510:	d03c      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001516:	2210      	movs	r2, #16
 8001518:	409a      	lsls	r2, r3
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d018      	beq.n	800155e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d108      	bne.n	800154c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	2b00      	cmp	r3, #0
 8001540:	d024      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	4798      	blx	r3
 800154a:	e01f      	b.n	800158c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01b      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	4798      	blx	r3
 800155c:	e016      	b.n	800158c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001568:	2b00      	cmp	r3, #0
 800156a:	d107      	bne.n	800157c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	6812      	ldr	r2, [r2, #0]
 8001574:	6812      	ldr	r2, [r2, #0]
 8001576:	f022 0208 	bic.w	r2, r2, #8
 800157a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	2b00      	cmp	r3, #0
 8001582:	d003      	beq.n	800158c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001590:	2220      	movs	r2, #32
 8001592:	409a      	lsls	r2, r3
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4013      	ands	r3, r2
 8001598:	2b00      	cmp	r3, #0
 800159a:	f000 808e 	beq.w	80016ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 8086 	beq.w	80016ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015b2:	2220      	movs	r2, #32
 80015b4:	409a      	lsls	r2, r3
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b05      	cmp	r3, #5
 80015c4:	d136      	bne.n	8001634 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	6812      	ldr	r2, [r2, #0]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	f022 0216 	bic.w	r2, r2, #22
 80015d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	6952      	ldr	r2, [r2, #20]
 80015e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d103      	bne.n	80015f6 <HAL_DMA_IRQHandler+0x1da>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d007      	beq.n	8001606 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	6812      	ldr	r2, [r2, #0]
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	f022 0208 	bic.w	r2, r2, #8
 8001604:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	223f      	movs	r2, #63	; 0x3f
 800160c:	409a      	lsls	r2, r3
 800160e:	693b      	ldr	r3, [r7, #16]
 8001610:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2201      	movs	r2, #1
 800161e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001626:	2b00      	cmp	r3, #0
 8001628:	d07d      	beq.n	8001726 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800162e:	6878      	ldr	r0, [r7, #4]
 8001630:	4798      	blx	r3
        }
        return;
 8001632:	e078      	b.n	8001726 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d01c      	beq.n	800167c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164c:	2b00      	cmp	r3, #0
 800164e:	d108      	bne.n	8001662 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	2b00      	cmp	r3, #0
 8001656:	d030      	beq.n	80016ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	4798      	blx	r3
 8001660:	e02b      	b.n	80016ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001666:	2b00      	cmp	r3, #0
 8001668:	d027      	beq.n	80016ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	4798      	blx	r3
 8001672:	e022      	b.n	80016ba <HAL_DMA_IRQHandler+0x29e>
 8001674:	20000014 	.word	0x20000014
 8001678:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001686:	2b00      	cmp	r3, #0
 8001688:	d10f      	bne.n	80016aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	687a      	ldr	r2, [r7, #4]
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	f022 0210 	bic.w	r2, r2, #16
 8001698:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d003      	beq.n	80016ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d032      	beq.n	8001728 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d022      	beq.n	8001714 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2205      	movs	r2, #5
 80016d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	6812      	ldr	r2, [r2, #0]
 80016e0:	f022 0201 	bic.w	r2, r2, #1
 80016e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	3301      	adds	r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d807      	bhi.n	8001702 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0301 	and.w	r3, r3, #1
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1f2      	bne.n	80016e6 <HAL_DMA_IRQHandler+0x2ca>
 8001700:	e000      	b.n	8001704 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001702:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2201      	movs	r2, #1
 8001710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001718:	2b00      	cmp	r3, #0
 800171a:	d005      	beq.n	8001728 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001720:	6878      	ldr	r0, [r7, #4]
 8001722:	4798      	blx	r3
 8001724:	e000      	b.n	8001728 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001726:	bf00      	nop
    }
  }
}
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop

08001730 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	68fa      	ldr	r2, [r7, #12]
 8001744:	6812      	ldr	r2, [r2, #0]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800174c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	2b40      	cmp	r3, #64	; 0x40
 800175c:	d108      	bne.n	8001770 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68ba      	ldr	r2, [r7, #8]
 800176c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800176e:	e007      	b.n	8001780 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	687a      	ldr	r2, [r7, #4]
 800177e:	60da      	str	r2, [r3, #12]
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	3b10      	subs	r3, #16
 800179c:	4a14      	ldr	r2, [pc, #80]	; (80017f0 <DMA_CalcBaseAndBitshift+0x64>)
 800179e:	fba2 2303 	umull	r2, r3, r2, r3
 80017a2:	091b      	lsrs	r3, r3, #4
 80017a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017a6:	4a13      	ldr	r2, [pc, #76]	; (80017f4 <DMA_CalcBaseAndBitshift+0x68>)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4413      	add	r3, r2
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b03      	cmp	r3, #3
 80017b8:	d909      	bls.n	80017ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	1d1a      	adds	r2, r3, #4
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	659a      	str	r2, [r3, #88]	; 0x58
 80017cc:	e007      	b.n	80017de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017d6:	f023 0303 	bic.w	r3, r3, #3
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	aaaaaaab 	.word	0xaaaaaaab
 80017f4:	0800742c 	.word	0x0800742c

080017f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001800:	2300      	movs	r3, #0
 8001802:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001808:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d11f      	bne.n	8001852 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	2b03      	cmp	r3, #3
 8001816:	d855      	bhi.n	80018c4 <DMA_CheckFifoParam+0xcc>
 8001818:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <DMA_CheckFifoParam+0x28>)
 800181a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800181e:	bf00      	nop
 8001820:	08001831 	.word	0x08001831
 8001824:	08001843 	.word	0x08001843
 8001828:	08001831 	.word	0x08001831
 800182c:	080018c5 	.word	0x080018c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001834:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d045      	beq.n	80018c8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001840:	e042      	b.n	80018c8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001846:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800184a:	d13f      	bne.n	80018cc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001850:	e03c      	b.n	80018cc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	699b      	ldr	r3, [r3, #24]
 8001856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800185a:	d121      	bne.n	80018a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	2b03      	cmp	r3, #3
 8001860:	d836      	bhi.n	80018d0 <DMA_CheckFifoParam+0xd8>
 8001862:	a201      	add	r2, pc, #4	; (adr r2, 8001868 <DMA_CheckFifoParam+0x70>)
 8001864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001868:	08001879 	.word	0x08001879
 800186c:	0800187f 	.word	0x0800187f
 8001870:	08001879 	.word	0x08001879
 8001874:	08001891 	.word	0x08001891
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	73fb      	strb	r3, [r7, #15]
      break;
 800187c:	e02f      	b.n	80018de <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d024      	beq.n	80018d4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800188e:	e021      	b.n	80018d4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001894:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001898:	d11e      	bne.n	80018d8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800189e:	e01b      	b.n	80018d8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d902      	bls.n	80018ac <DMA_CheckFifoParam+0xb4>
 80018a6:	2b03      	cmp	r3, #3
 80018a8:	d003      	beq.n	80018b2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018aa:	e018      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	73fb      	strb	r3, [r7, #15]
      break;
 80018b0:	e015      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d00e      	beq.n	80018dc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	73fb      	strb	r3, [r7, #15]
      break;
 80018c2:	e00b      	b.n	80018dc <DMA_CheckFifoParam+0xe4>
      break;
 80018c4:	bf00      	nop
 80018c6:	e00a      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018c8:	bf00      	nop
 80018ca:	e008      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018cc:	bf00      	nop
 80018ce:	e006      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018d0:	bf00      	nop
 80018d2:	e004      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018d4:	bf00      	nop
 80018d6:	e002      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;   
 80018d8:	bf00      	nop
 80018da:	e000      	b.n	80018de <DMA_CheckFifoParam+0xe6>
      break;
 80018dc:	bf00      	nop
    }
  } 
  
  return status; 
 80018de:	7bfb      	ldrb	r3, [r7, #15]
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3714      	adds	r7, #20
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b089      	sub	sp, #36	; 0x24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018fa:	2300      	movs	r3, #0
 80018fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001902:	2300      	movs	r3, #0
 8001904:	61fb      	str	r3, [r7, #28]
 8001906:	e159      	b.n	8001bbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001908:	2201      	movs	r2, #1
 800190a:	69fb      	ldr	r3, [r7, #28]
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	429a      	cmp	r2, r3
 8001922:	f040 8148 	bne.w	8001bb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	2b02      	cmp	r3, #2
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x4a>
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	2b12      	cmp	r3, #18
 8001934:	d123      	bne.n	800197e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	08da      	lsrs	r2, r3, #3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	3208      	adds	r2, #8
 800193e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	220f      	movs	r2, #15
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	691a      	ldr	r2, [r3, #16]
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	009b      	lsls	r3, r3, #2
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4313      	orrs	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	08da      	lsrs	r2, r3, #3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3208      	adds	r2, #8
 8001978:	69b9      	ldr	r1, [r7, #24]
 800197a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	005b      	lsls	r3, r3, #1
 8001988:	2203      	movs	r2, #3
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f003 0203 	and.w	r2, r3, #3
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	005b      	lsls	r3, r3, #1
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d00b      	beq.n	80019d2 <HAL_GPIO_Init+0xe6>
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d007      	beq.n	80019d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c6:	2b11      	cmp	r3, #17
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b12      	cmp	r3, #18
 80019d0:	d130      	bne.n	8001a34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	005b      	lsls	r3, r3, #1
 80019dc:	2203      	movs	r2, #3
 80019de:	fa02 f303 	lsl.w	r3, r2, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	68da      	ldr	r2, [r3, #12]
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	69ba      	ldr	r2, [r7, #24]
 8001a14:	4013      	ands	r3, r2
 8001a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	091b      	lsrs	r3, r3, #4
 8001a1e:	f003 0201 	and.w	r2, r3, #1
 8001a22:	69fb      	ldr	r3, [r7, #28]
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	2203      	movs	r2, #3
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	43db      	mvns	r3, r3
 8001a46:	69ba      	ldr	r2, [r7, #24]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689a      	ldr	r2, [r3, #8]
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	005b      	lsls	r3, r3, #1
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	69ba      	ldr	r2, [r7, #24]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69ba      	ldr	r2, [r7, #24]
 8001a62:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f000 80a2 	beq.w	8001bb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4a56      	ldr	r2, [pc, #344]	; (8001bd0 <HAL_GPIO_Init+0x2e4>)
 8001a78:	4b55      	ldr	r3, [pc, #340]	; (8001bd0 <HAL_GPIO_Init+0x2e4>)
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b53      	ldr	r3, [pc, #332]	; (8001bd0 <HAL_GPIO_Init+0x2e4>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a8e:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_GPIO_Init+0x2e8>)
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	089b      	lsrs	r3, r3, #2
 8001a94:	3302      	adds	r3, #2
 8001a96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a9c:	69fb      	ldr	r3, [r7, #28]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	220f      	movs	r2, #15
 8001aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aaa:	43db      	mvns	r3, r3
 8001aac:	69ba      	ldr	r2, [r7, #24]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a48      	ldr	r2, [pc, #288]	; (8001bd8 <HAL_GPIO_Init+0x2ec>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d019      	beq.n	8001aee <HAL_GPIO_Init+0x202>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a47      	ldr	r2, [pc, #284]	; (8001bdc <HAL_GPIO_Init+0x2f0>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d013      	beq.n	8001aea <HAL_GPIO_Init+0x1fe>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a46      	ldr	r2, [pc, #280]	; (8001be0 <HAL_GPIO_Init+0x2f4>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d00d      	beq.n	8001ae6 <HAL_GPIO_Init+0x1fa>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a45      	ldr	r2, [pc, #276]	; (8001be4 <HAL_GPIO_Init+0x2f8>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d007      	beq.n	8001ae2 <HAL_GPIO_Init+0x1f6>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a44      	ldr	r2, [pc, #272]	; (8001be8 <HAL_GPIO_Init+0x2fc>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d101      	bne.n	8001ade <HAL_GPIO_Init+0x1f2>
 8001ada:	2304      	movs	r3, #4
 8001adc:	e008      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001ade:	2307      	movs	r3, #7
 8001ae0:	e006      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e004      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e002      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001aea:	2301      	movs	r3, #1
 8001aec:	e000      	b.n	8001af0 <HAL_GPIO_Init+0x204>
 8001aee:	2300      	movs	r3, #0
 8001af0:	69fa      	ldr	r2, [r7, #28]
 8001af2:	f002 0203 	and.w	r2, r2, #3
 8001af6:	0092      	lsls	r2, r2, #2
 8001af8:	4093      	lsls	r3, r2
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b00:	4934      	ldr	r1, [pc, #208]	; (8001bd4 <HAL_GPIO_Init+0x2e8>)
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	089b      	lsrs	r3, r3, #2
 8001b06:	3302      	adds	r3, #2
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b0e:	4b37      	ldr	r3, [pc, #220]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d003      	beq.n	8001b32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b32:	4a2e      	ldr	r2, [pc, #184]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b38:	4b2c      	ldr	r3, [pc, #176]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d003      	beq.n	8001b5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b5c:	4a23      	ldr	r2, [pc, #140]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b5e:	69bb      	ldr	r3, [r7, #24]
 8001b60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b62:	4b22      	ldr	r3, [pc, #136]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b86:	4a19      	ldr	r2, [pc, #100]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bb0:	4a0e      	ldr	r2, [pc, #56]	; (8001bec <HAL_GPIO_Init+0x300>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	2b0f      	cmp	r3, #15
 8001bc0:	f67f aea2 	bls.w	8001908 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bc4:	bf00      	nop
 8001bc6:	3724      	adds	r7, #36	; 0x24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40013800 	.word	0x40013800
 8001bd8:	40020000 	.word	0x40020000
 8001bdc:	40020400 	.word	0x40020400
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	40021000 	.word	0x40021000
 8001bec:	40013c00 	.word	0x40013c00

08001bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	460b      	mov	r3, r1
 8001bfa:	807b      	strh	r3, [r7, #2]
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c00:	787b      	ldrb	r3, [r7, #1]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c06:	887a      	ldrh	r2, [r7, #2]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c0c:	e003      	b.n	8001c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c0e:	887b      	ldrh	r3, [r7, #2]
 8001c10:	041a      	lsls	r2, r3, #16
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	619a      	str	r2, [r3, #24]
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b086      	sub	sp, #24
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d101      	bne.n	8001c36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e22d      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d075      	beq.n	8001d2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c42:	4ba3      	ldr	r3, [pc, #652]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b04      	cmp	r3, #4
 8001c4c:	d00c      	beq.n	8001c68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c4e:	4ba0      	ldr	r3, [pc, #640]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d112      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5a:	4b9d      	ldr	r3, [pc, #628]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c66:	d10b      	bne.n	8001c80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c68:	4b99      	ldr	r3, [pc, #612]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d05b      	beq.n	8001d2c <HAL_RCC_OscConfig+0x108>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d157      	bne.n	8001d2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e208      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c88:	d106      	bne.n	8001c98 <HAL_RCC_OscConfig+0x74>
 8001c8a:	4a91      	ldr	r2, [pc, #580]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001c8c:	4b90      	ldr	r3, [pc, #576]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c94:	6013      	str	r3, [r2, #0]
 8001c96:	e01d      	b.n	8001cd4 <HAL_RCC_OscConfig+0xb0>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ca0:	d10c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x98>
 8001ca2:	4a8b      	ldr	r2, [pc, #556]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001ca4:	4b8a      	ldr	r3, [pc, #552]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	4a88      	ldr	r2, [pc, #544]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001cb0:	4b87      	ldr	r3, [pc, #540]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6013      	str	r3, [r2, #0]
 8001cba:	e00b      	b.n	8001cd4 <HAL_RCC_OscConfig+0xb0>
 8001cbc:	4a84      	ldr	r2, [pc, #528]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001cbe:	4b84      	ldr	r3, [pc, #528]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4a81      	ldr	r2, [pc, #516]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001cca:	4b81      	ldr	r3, [pc, #516]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d013      	beq.n	8001d04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7ff f956 	bl	8000f8c <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ce4:	f7ff f952 	bl	8000f8c <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b64      	cmp	r3, #100	; 0x64
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e1cd      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf6:	4b76      	ldr	r3, [pc, #472]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0xc0>
 8001d02:	e014      	b.n	8001d2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d04:	f7ff f942 	bl	8000f8c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d0c:	f7ff f93e 	bl	8000f8c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b64      	cmp	r3, #100	; 0x64
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e1b9      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1e:	4b6c      	ldr	r3, [pc, #432]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1f0      	bne.n	8001d0c <HAL_RCC_OscConfig+0xe8>
 8001d2a:	e000      	b.n	8001d2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d063      	beq.n	8001e02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d3a:	4b65      	ldr	r3, [pc, #404]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00b      	beq.n	8001d5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d46:	4b62      	ldr	r3, [pc, #392]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d4e:	2b08      	cmp	r3, #8
 8001d50:	d11c      	bne.n	8001d8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d52:	4b5f      	ldr	r3, [pc, #380]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d116      	bne.n	8001d8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5e:	4b5c      	ldr	r3, [pc, #368]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d005      	beq.n	8001d76 <HAL_RCC_OscConfig+0x152>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	d001      	beq.n	8001d76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e18d      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d76:	4956      	ldr	r1, [pc, #344]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d78:	4b55      	ldr	r3, [pc, #340]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4313      	orrs	r3, r2
 8001d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d8a:	e03a      	b.n	8001e02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d020      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d94:	4b4f      	ldr	r3, [pc, #316]	; (8001ed4 <HAL_RCC_OscConfig+0x2b0>)
 8001d96:	2201      	movs	r2, #1
 8001d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7ff f8f7 	bl	8000f8c <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001da2:	f7ff f8f3 	bl	8000f8c <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e16e      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db4:	4b46      	ldr	r3, [pc, #280]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0302 	and.w	r3, r3, #2
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc0:	4943      	ldr	r1, [pc, #268]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001dc2:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	691b      	ldr	r3, [r3, #16]
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	600b      	str	r3, [r1, #0]
 8001dd4:	e015      	b.n	8001e02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dd6:	4b3f      	ldr	r3, [pc, #252]	; (8001ed4 <HAL_RCC_OscConfig+0x2b0>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ddc:	f7ff f8d6 	bl	8000f8c <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de4:	f7ff f8d2 	bl	8000f8c <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b02      	cmp	r3, #2
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e14d      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df6:	4b36      	ldr	r3, [pc, #216]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d030      	beq.n	8001e70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	695b      	ldr	r3, [r3, #20]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d016      	beq.n	8001e44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e16:	4b30      	ldr	r3, [pc, #192]	; (8001ed8 <HAL_RCC_OscConfig+0x2b4>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1c:	f7ff f8b6 	bl	8000f8c <HAL_GetTick>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e24:	f7ff f8b2 	bl	8000f8c <HAL_GetTick>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e12d      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e36:	4b26      	ldr	r3, [pc, #152]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0f0      	beq.n	8001e24 <HAL_RCC_OscConfig+0x200>
 8001e42:	e015      	b.n	8001e70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <HAL_RCC_OscConfig+0x2b4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7ff f89f 	bl	8000f8c <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e50:	e008      	b.n	8001e64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e52:	f7ff f89b 	bl	8000f8c <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d901      	bls.n	8001e64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e116      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e64:	4b1a      	ldr	r3, [pc, #104]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e68:	f003 0302 	and.w	r3, r3, #2
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f0      	bne.n	8001e52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0304 	and.w	r3, r3, #4
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80a0 	beq.w	8001fbe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e82:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10f      	bne.n	8001eae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	4a0f      	ldr	r2, [pc, #60]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	4b0e      	ldr	r3, [pc, #56]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea6:	60fb      	str	r3, [r7, #12]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eae:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_RCC_OscConfig+0x2b8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d121      	bne.n	8001efe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eba:	4a08      	ldr	r2, [pc, #32]	; (8001edc <HAL_RCC_OscConfig+0x2b8>)
 8001ebc:	4b07      	ldr	r3, [pc, #28]	; (8001edc <HAL_RCC_OscConfig+0x2b8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ec4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ec6:	f7ff f861 	bl	8000f8c <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ecc:	e011      	b.n	8001ef2 <HAL_RCC_OscConfig+0x2ce>
 8001ece:	bf00      	nop
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	42470000 	.word	0x42470000
 8001ed8:	42470e80 	.word	0x42470e80
 8001edc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee0:	f7ff f854 	bl	8000f8c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e0cf      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef2:	4b6a      	ldr	r3, [pc, #424]	; (800209c <HAL_RCC_OscConfig+0x478>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d106      	bne.n	8001f14 <HAL_RCC_OscConfig+0x2f0>
 8001f06:	4a66      	ldr	r2, [pc, #408]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001f08:	4b65      	ldr	r3, [pc, #404]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	6713      	str	r3, [r2, #112]	; 0x70
 8001f12:	e01c      	b.n	8001f4e <HAL_RCC_OscConfig+0x32a>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d10c      	bne.n	8001f36 <HAL_RCC_OscConfig+0x312>
 8001f1c:	4a60      	ldr	r2, [pc, #384]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001f1e:	4b60      	ldr	r3, [pc, #384]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6713      	str	r3, [r2, #112]	; 0x70
 8001f28:	4a5d      	ldr	r2, [pc, #372]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001f2a:	4b5d      	ldr	r3, [pc, #372]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6713      	str	r3, [r2, #112]	; 0x70
 8001f34:	e00b      	b.n	8001f4e <HAL_RCC_OscConfig+0x32a>
 8001f36:	4a5a      	ldr	r2, [pc, #360]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001f38:	4b59      	ldr	r3, [pc, #356]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3c:	f023 0301 	bic.w	r3, r3, #1
 8001f40:	6713      	str	r3, [r2, #112]	; 0x70
 8001f42:	4a57      	ldr	r2, [pc, #348]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001f44:	4b56      	ldr	r3, [pc, #344]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d015      	beq.n	8001f82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f56:	f7ff f819 	bl	8000f8c <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f5c:	e00a      	b.n	8001f74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5e:	f7ff f815 	bl	8000f8c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d901      	bls.n	8001f74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e08e      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f74:	4b4a      	ldr	r3, [pc, #296]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f78:	f003 0302 	and.w	r3, r3, #2
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d0ee      	beq.n	8001f5e <HAL_RCC_OscConfig+0x33a>
 8001f80:	e014      	b.n	8001fac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f82:	f7ff f803 	bl	8000f8c <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f8a:	f7fe ffff 	bl	8000f8c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e078      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa0:	4b3f      	ldr	r3, [pc, #252]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fa4:	f003 0302 	and.w	r3, r3, #2
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1ee      	bne.n	8001f8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fac:	7dfb      	ldrb	r3, [r7, #23]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d105      	bne.n	8001fbe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb2:	4a3b      	ldr	r2, [pc, #236]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001fb4:	4b3a      	ldr	r3, [pc, #232]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d064      	beq.n	8002090 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fc6:	4b36      	ldr	r3, [pc, #216]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f003 030c 	and.w	r3, r3, #12
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d05c      	beq.n	800208c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	699b      	ldr	r3, [r3, #24]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d141      	bne.n	800205e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fda:	4b32      	ldr	r3, [pc, #200]	; (80020a4 <HAL_RCC_OscConfig+0x480>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7fe ffd4 	bl	8000f8c <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7fe ffd0 	bl	8000f8c <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e04b      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ffa:	4b29      	ldr	r3, [pc, #164]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002006:	4926      	ldr	r1, [pc, #152]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69da      	ldr	r2, [r3, #28]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a1b      	ldr	r3, [r3, #32]
 8002010:	431a      	orrs	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002016:	019b      	lsls	r3, r3, #6
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201e:	085b      	lsrs	r3, r3, #1
 8002020:	3b01      	subs	r3, #1
 8002022:	041b      	lsls	r3, r3, #16
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202a:	061b      	lsls	r3, r3, #24
 800202c:	4313      	orrs	r3, r2
 800202e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002030:	4b1c      	ldr	r3, [pc, #112]	; (80020a4 <HAL_RCC_OscConfig+0x480>)
 8002032:	2201      	movs	r2, #1
 8002034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7fe ffa9 	bl	8000f8c <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800203e:	f7fe ffa5 	bl	8000f8c <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e020      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002050:	4b13      	ldr	r3, [pc, #76]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x41a>
 800205c:	e018      	b.n	8002090 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800205e:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <HAL_RCC_OscConfig+0x480>)
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002064:	f7fe ff92 	bl	8000f8c <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800206a:	e008      	b.n	800207e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800206c:	f7fe ff8e 	bl	8000f8c <HAL_GetTick>
 8002070:	4602      	mov	r2, r0
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d901      	bls.n	800207e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e009      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <HAL_RCC_OscConfig+0x47c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f0      	bne.n	800206c <HAL_RCC_OscConfig+0x448>
 800208a:	e001      	b.n	8002090 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e000      	b.n	8002092 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3718      	adds	r7, #24
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	40007000 	.word	0x40007000
 80020a0:	40023800 	.word	0x40023800
 80020a4:	42470060 	.word	0x42470060

080020a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
 80020b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0ca      	b.n	8002252 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020bc:	4b67      	ldr	r3, [pc, #412]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 020f 	and.w	r2, r3, #15
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	429a      	cmp	r2, r3
 80020c8:	d20c      	bcs.n	80020e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ca:	4b64      	ldr	r3, [pc, #400]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	b2d2      	uxtb	r2, r2
 80020d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020d2:	4b62      	ldr	r3, [pc, #392]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 020f 	and.w	r2, r3, #15
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e0b6      	b.n	8002252 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d020      	beq.n	8002132 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0304 	and.w	r3, r3, #4
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020fc:	4a58      	ldr	r2, [pc, #352]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80020fe:	4b58      	ldr	r3, [pc, #352]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002106:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002114:	4a52      	ldr	r2, [pc, #328]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 8002116:	4b52      	ldr	r3, [pc, #328]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800211e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002120:	494f      	ldr	r1, [pc, #316]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 8002122:	4b4f      	ldr	r3, [pc, #316]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	4313      	orrs	r3, r2
 8002130:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d044      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b01      	cmp	r3, #1
 8002144:	d107      	bne.n	8002156 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002146:	4b46      	ldr	r3, [pc, #280]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d119      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e07d      	b.n	8002252 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b02      	cmp	r3, #2
 800215c:	d003      	beq.n	8002166 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002162:	2b03      	cmp	r3, #3
 8002164:	d107      	bne.n	8002176 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002166:	4b3e      	ldr	r3, [pc, #248]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d109      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e06d      	b.n	8002252 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002176:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e065      	b.n	8002252 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002186:	4936      	ldr	r1, [pc, #216]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	4b35      	ldr	r3, [pc, #212]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f023 0203 	bic.w	r2, r3, #3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4313      	orrs	r3, r2
 8002196:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002198:	f7fe fef8 	bl	8000f8c <HAL_GetTick>
 800219c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800219e:	e00a      	b.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7fe fef4 	bl	8000f8c <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e04d      	b.n	8002252 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	4b2a      	ldr	r3, [pc, #168]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f003 020c 	and.w	r2, r3, #12
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1eb      	bne.n	80021a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c8:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 020f 	and.w	r2, r3, #15
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d90c      	bls.n	80021f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b21      	ldr	r3, [pc, #132]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 80021d8:	683a      	ldr	r2, [r7, #0]
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021de:	4b1f      	ldr	r3, [pc, #124]	; (800225c <HAL_RCC_ClockConfig+0x1b4>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 020f 	and.w	r2, r3, #15
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e030      	b.n	8002252 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0304 	and.w	r3, r3, #4
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d008      	beq.n	800220e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fc:	4918      	ldr	r1, [pc, #96]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 80021fe:	4b18      	ldr	r3, [pc, #96]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	4313      	orrs	r3, r2
 800220c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d009      	beq.n	800222e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800221a:	4911      	ldr	r1, [pc, #68]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	4b10      	ldr	r3, [pc, #64]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4313      	orrs	r3, r2
 800222c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800222e:	f000 f81d 	bl	800226c <HAL_RCC_GetSysClockFreq>
 8002232:	4601      	mov	r1, r0
 8002234:	4b0a      	ldr	r3, [pc, #40]	; (8002260 <HAL_RCC_ClockConfig+0x1b8>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	091b      	lsrs	r3, r3, #4
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	4a09      	ldr	r2, [pc, #36]	; (8002264 <HAL_RCC_ClockConfig+0x1bc>)
 8002240:	5cd3      	ldrb	r3, [r2, r3]
 8002242:	fa21 f303 	lsr.w	r3, r1, r3
 8002246:	4a08      	ldr	r2, [pc, #32]	; (8002268 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800224a:	2000      	movs	r0, #0
 800224c:	f7fe fe5a 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 8002250:	2300      	movs	r3, #0
}
 8002252:	4618      	mov	r0, r3
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023c00 	.word	0x40023c00
 8002260:	40023800 	.word	0x40023800
 8002264:	080074e4 	.word	0x080074e4
 8002268:	20000014 	.word	0x20000014

0800226c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800226c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002270:	b08f      	sub	sp, #60	; 0x3c
 8002272:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002274:	2300      	movs	r3, #0
 8002276:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002278:	2300      	movs	r3, #0
 800227a:	637b      	str	r3, [r7, #52]	; 0x34
 800227c:	2300      	movs	r3, #0
 800227e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002280:	2300      	movs	r3, #0
 8002282:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002284:	4b62      	ldr	r3, [pc, #392]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 030c 	and.w	r3, r3, #12
 800228c:	2b04      	cmp	r3, #4
 800228e:	d007      	beq.n	80022a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002290:	2b08      	cmp	r3, #8
 8002292:	d008      	beq.n	80022a6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002294:	2b00      	cmp	r3, #0
 8002296:	f040 80b2 	bne.w	80023fe <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800229a:	4b5e      	ldr	r3, [pc, #376]	; (8002414 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800229c:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 800229e:	e0b1      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022a0:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80022a2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022a4:	e0ae      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022a6:	4b5a      	ldr	r3, [pc, #360]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022b0:	4b57      	ldr	r3, [pc, #348]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d04e      	beq.n	800235a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022bc:	4b54      	ldr	r3, [pc, #336]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	099b      	lsrs	r3, r3, #6
 80022c2:	f04f 0400 	mov.w	r4, #0
 80022c6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022ca:	f04f 0200 	mov.w	r2, #0
 80022ce:	ea01 0103 	and.w	r1, r1, r3
 80022d2:	ea02 0204 	and.w	r2, r2, r4
 80022d6:	460b      	mov	r3, r1
 80022d8:	4614      	mov	r4, r2
 80022da:	0160      	lsls	r0, r4, #5
 80022dc:	6278      	str	r0, [r7, #36]	; 0x24
 80022de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022e0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80022e4:	6278      	str	r0, [r7, #36]	; 0x24
 80022e6:	015b      	lsls	r3, r3, #5
 80022e8:	623b      	str	r3, [r7, #32]
 80022ea:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80022ee:	1a5b      	subs	r3, r3, r1
 80022f0:	eb64 0402 	sbc.w	r4, r4, r2
 80022f4:	ea4f 1984 	mov.w	r9, r4, lsl #6
 80022f8:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 80022fc:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002300:	ebb8 0803 	subs.w	r8, r8, r3
 8002304:	eb69 0904 	sbc.w	r9, r9, r4
 8002308:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800230c:	61fb      	str	r3, [r7, #28]
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800231a:	61bb      	str	r3, [r7, #24]
 800231c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002320:	eb18 0801 	adds.w	r8, r8, r1
 8002324:	eb49 0902 	adc.w	r9, r9, r2
 8002328:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800232c:	617b      	str	r3, [r7, #20]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002340:	4640      	mov	r0, r8
 8002342:	4649      	mov	r1, r9
 8002344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002346:	f04f 0400 	mov.w	r4, #0
 800234a:	461a      	mov	r2, r3
 800234c:	4623      	mov	r3, r4
 800234e:	f7fe fc2f 	bl	8000bb0 <__aeabi_uldivmod>
 8002352:	4603      	mov	r3, r0
 8002354:	460c      	mov	r4, r1
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
 8002358:	e043      	b.n	80023e2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	099b      	lsrs	r3, r3, #6
 8002360:	f04f 0400 	mov.w	r4, #0
 8002364:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	ea01 0103 	and.w	r1, r1, r3
 8002370:	ea02 0204 	and.w	r2, r2, r4
 8002374:	460b      	mov	r3, r1
 8002376:	4614      	mov	r4, r2
 8002378:	0160      	lsls	r0, r4, #5
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	68f8      	ldr	r0, [r7, #12]
 800237e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	015b      	lsls	r3, r3, #5
 8002386:	60bb      	str	r3, [r7, #8]
 8002388:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800238c:	1a5b      	subs	r3, r3, r1
 800238e:	eb64 0402 	sbc.w	r4, r4, r2
 8002392:	01a6      	lsls	r6, r4, #6
 8002394:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 8002398:	019d      	lsls	r5, r3, #6
 800239a:	1aed      	subs	r5, r5, r3
 800239c:	eb66 0604 	sbc.w	r6, r6, r4
 80023a0:	00f3      	lsls	r3, r6, #3
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80023aa:	607b      	str	r3, [r7, #4]
 80023ac:	00eb      	lsls	r3, r5, #3
 80023ae:	603b      	str	r3, [r7, #0]
 80023b0:	e897 0060 	ldmia.w	r7, {r5, r6}
 80023b4:	186d      	adds	r5, r5, r1
 80023b6:	eb46 0602 	adc.w	r6, r6, r2
 80023ba:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80023be:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80023c2:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80023c6:	4655      	mov	r5, sl
 80023c8:	465e      	mov	r6, fp
 80023ca:	4628      	mov	r0, r5
 80023cc:	4631      	mov	r1, r6
 80023ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023d0:	f04f 0400 	mov.w	r4, #0
 80023d4:	461a      	mov	r2, r3
 80023d6:	4623      	mov	r3, r4
 80023d8:	f7fe fbea 	bl	8000bb0 <__aeabi_uldivmod>
 80023dc:	4603      	mov	r3, r0
 80023de:	460c      	mov	r4, r1
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023e2:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	0c1b      	lsrs	r3, r3, #16
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	3301      	adds	r3, #1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 80023f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80023fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80023fc:	e002      	b.n	8002404 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023fe:	4b05      	ldr	r3, [pc, #20]	; (8002414 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002400:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002402:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002406:	4618      	mov	r0, r3
 8002408:	373c      	adds	r7, #60	; 0x3c
 800240a:	46bd      	mov	sp, r7
 800240c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002410:	40023800 	.word	0x40023800
 8002414:	00f42400 	.word	0x00f42400
 8002418:	007a1200 	.word	0x007a1200

0800241c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002420:	4b03      	ldr	r3, [pc, #12]	; (8002430 <HAL_RCC_GetHCLKFreq+0x14>)
 8002422:	681b      	ldr	r3, [r3, #0]
}
 8002424:	4618      	mov	r0, r3
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	20000014 	.word	0x20000014

08002434 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002438:	f7ff fff0 	bl	800241c <HAL_RCC_GetHCLKFreq>
 800243c:	4601      	mov	r1, r0
 800243e:	4b05      	ldr	r3, [pc, #20]	; (8002454 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0a9b      	lsrs	r3, r3, #10
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4a03      	ldr	r2, [pc, #12]	; (8002458 <HAL_RCC_GetPCLK1Freq+0x24>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002450:	4618      	mov	r0, r3
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40023800 	.word	0x40023800
 8002458:	080074f4 	.word	0x080074f4

0800245c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002460:	f7ff ffdc 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8002464:	4601      	mov	r1, r0
 8002466:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	0b5b      	lsrs	r3, r3, #13
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	4a03      	ldr	r2, [pc, #12]	; (8002480 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002472:	5cd3      	ldrb	r3, [r2, r3]
 8002474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	080074f4 	.word	0x080074f4

08002484 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e03f      	b.n	8002516 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f001 fcbc 	bl	8003e28 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2224      	movs	r2, #36	; 0x24
 80024b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	68d2      	ldr	r2, [r2, #12]
 80024c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024c6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f987 	bl	80027dc <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6812      	ldr	r2, [r2, #0]
 80024d6:	6912      	ldr	r2, [r2, #16]
 80024d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	6952      	ldr	r2, [r2, #20]
 80024e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024ec:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	68d2      	ldr	r2, [r2, #12]
 80024f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024fc:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	60b9      	str	r1, [r7, #8]
 800252a:	4613      	mov	r3, r2
 800252c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b20      	cmp	r3, #32
 8002538:	d166      	bne.n	8002608 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d002      	beq.n	8002546 <HAL_UART_Receive_DMA+0x26>
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e05f      	b.n	800260a <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_UART_Receive_DMA+0x38>
 8002554:	2302      	movs	r3, #2
 8002556:	e058      	b.n	800260a <HAL_UART_Receive_DMA+0xea>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2201      	movs	r2, #1
 800255c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8002560:	68ba      	ldr	r2, [r7, #8]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	88fa      	ldrh	r2, [r7, #6]
 800256a:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2200      	movs	r2, #0
 8002570:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2222      	movs	r2, #34	; 0x22
 8002576:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800257e:	4a25      	ldr	r2, [pc, #148]	; (8002614 <HAL_UART_Receive_DMA+0xf4>)
 8002580:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002586:	4a24      	ldr	r2, [pc, #144]	; (8002618 <HAL_UART_Receive_DMA+0xf8>)
 8002588:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258e:	4a23      	ldr	r2, [pc, #140]	; (800261c <HAL_UART_Receive_DMA+0xfc>)
 8002590:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002596:	2200      	movs	r2, #0
 8002598:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 800259a:	f107 0308 	add.w	r3, r7, #8
 800259e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	3304      	adds	r3, #4
 80025aa:	4619      	mov	r1, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	88fb      	ldrh	r3, [r7, #6]
 80025b2:	f7fe fed3 	bl	800135c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	613b      	str	r3, [r7, #16]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	68d2      	ldr	r2, [r2, #12]
 80025de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	6952      	ldr	r2, [r2, #20]
 80025ee:	f042 0201 	orr.w	r2, r2, #1
 80025f2:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	6952      	ldr	r2, [r2, #20]
 80025fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002602:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	e000      	b.n	800260a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8002608:	2302      	movs	r3, #2
  }
}
 800260a:	4618      	mov	r0, r3
 800260c:	3718      	adds	r7, #24
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	0800265d 	.word	0x0800265d
 8002618:	080026c5 	.word	0x080026c5
 800261c:	080026e1 	.word	0x080026e1

08002620 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800263c:	bf00      	nop
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d11e      	bne.n	80026b6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	2200      	movs	r2, #0
 800267c:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	68d2      	ldr	r2, [r2, #12]
 8002688:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800268c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	6952      	ldr	r2, [r2, #20]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	6952      	ldr	r2, [r2, #20]
 80026a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ac:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2220      	movs	r2, #32
 80026b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f7ff ffb2 	bl	8002620 <HAL_UART_RxCpltCallback>
}
 80026bc:	bf00      	nop
 80026be:	3710      	adds	r7, #16
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d0:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7ff ffae 	bl	8002634 <HAL_UART_RxHalfCpltCallback>
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80026e8:	2300      	movs	r3, #0
 80026ea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	695b      	ldr	r3, [r3, #20]
 80026f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf14      	ite	ne
 8002700:	2301      	movne	r3, #1
 8002702:	2300      	moveq	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b21      	cmp	r3, #33	; 0x21
 8002712:	d108      	bne.n	8002726 <UART_DMAError+0x46>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d005      	beq.n	8002726 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2200      	movs	r2, #0
 800271e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002720:	68b8      	ldr	r0, [r7, #8]
 8002722:	f000 f827 	bl	8002774 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf14      	ite	ne
 8002734:	2301      	movne	r3, #1
 8002736:	2300      	moveq	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b22      	cmp	r3, #34	; 0x22
 8002746:	d108      	bne.n	800275a <UART_DMAError+0x7a>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d005      	beq.n	800275a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2200      	movs	r2, #0
 8002752:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002754:	68b8      	ldr	r0, [r7, #8]
 8002756:	f000 f823 	bl	80027a0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800275e:	f043 0210 	orr.w	r2, r3, #16
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002766:	68b8      	ldr	r0, [r7, #8]
 8002768:	f7ff ff6e 	bl	8002648 <HAL_UART_ErrorCallback>
}
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	687a      	ldr	r2, [r7, #4]
 8002782:	6812      	ldr	r2, [r2, #0]
 8002784:	68d2      	ldr	r2, [r2, #12]
 8002786:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800278a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2220      	movs	r2, #32
 8002790:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	68d2      	ldr	r2, [r2, #12]
 80027b2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027b6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	6952      	ldr	r2, [r2, #20]
 80027c2:	f022 0201 	bic.w	r2, r2, #1
 80027c6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027de:	b085      	sub	sp, #20
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	691b      	ldr	r3, [r3, #16]
 80027ee:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	4313      	orrs	r3, r2
 8002800:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002818:	f023 030c 	bic.w	r3, r3, #12
 800281c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	431a      	orrs	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69db      	ldr	r3, [r3, #28]
 8002832:	4313      	orrs	r3, r2
 8002834:	68fa      	ldr	r2, [r7, #12]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002850:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	699b      	ldr	r3, [r3, #24]
 8002856:	68fa      	ldr	r2, [r7, #12]
 8002858:	4313      	orrs	r3, r2
 800285a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	68fa      	ldr	r2, [r7, #12]
 8002862:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69db      	ldr	r3, [r3, #28]
 8002868:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800286c:	f040 80e4 	bne.w	8002a38 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4aab      	ldr	r2, [pc, #684]	; (8002b24 <UART_SetConfig+0x348>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d004      	beq.n	8002884 <UART_SetConfig+0xa8>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4aaa      	ldr	r2, [pc, #680]	; (8002b28 <UART_SetConfig+0x34c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d16c      	bne.n	800295e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681c      	ldr	r4, [r3, #0]
 8002888:	f7ff fde8 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 800288c:	4602      	mov	r2, r0
 800288e:	4613      	mov	r3, r2
 8002890:	009b      	lsls	r3, r3, #2
 8002892:	4413      	add	r3, r2
 8002894:	009a      	lsls	r2, r3, #2
 8002896:	441a      	add	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a2:	4aa2      	ldr	r2, [pc, #648]	; (8002b2c <UART_SetConfig+0x350>)
 80028a4:	fba2 2303 	umull	r2, r3, r2, r3
 80028a8:	095b      	lsrs	r3, r3, #5
 80028aa:	011d      	lsls	r5, r3, #4
 80028ac:	f7ff fdd6 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4613      	mov	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	4413      	add	r3, r2
 80028b8:	009a      	lsls	r2, r3, #2
 80028ba:	441a      	add	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80028c6:	f7ff fdc9 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 80028ca:	4602      	mov	r2, r0
 80028cc:	4613      	mov	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4413      	add	r3, r2
 80028d2:	009a      	lsls	r2, r3, #2
 80028d4:	441a      	add	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e0:	4a92      	ldr	r2, [pc, #584]	; (8002b2c <UART_SetConfig+0x350>)
 80028e2:	fba2 2303 	umull	r2, r3, r2, r3
 80028e6:	095b      	lsrs	r3, r3, #5
 80028e8:	2264      	movs	r2, #100	; 0x64
 80028ea:	fb02 f303 	mul.w	r3, r2, r3
 80028ee:	1af3      	subs	r3, r6, r3
 80028f0:	00db      	lsls	r3, r3, #3
 80028f2:	3332      	adds	r3, #50	; 0x32
 80028f4:	4a8d      	ldr	r2, [pc, #564]	; (8002b2c <UART_SetConfig+0x350>)
 80028f6:	fba2 2303 	umull	r2, r3, r2, r3
 80028fa:	095b      	lsrs	r3, r3, #5
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002902:	441d      	add	r5, r3
 8002904:	f7ff fdaa 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8002908:	4602      	mov	r2, r0
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	009a      	lsls	r2, r3, #2
 8002912:	441a      	add	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	fbb2 f6f3 	udiv	r6, r2, r3
 800291e:	f7ff fd9d 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8002922:	4602      	mov	r2, r0
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	009a      	lsls	r2, r3, #2
 800292c:	441a      	add	r2, r3
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	005b      	lsls	r3, r3, #1
 8002934:	fbb2 f3f3 	udiv	r3, r2, r3
 8002938:	4a7c      	ldr	r2, [pc, #496]	; (8002b2c <UART_SetConfig+0x350>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	095b      	lsrs	r3, r3, #5
 8002940:	2264      	movs	r2, #100	; 0x64
 8002942:	fb02 f303 	mul.w	r3, r2, r3
 8002946:	1af3      	subs	r3, r6, r3
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	3332      	adds	r3, #50	; 0x32
 800294c:	4a77      	ldr	r2, [pc, #476]	; (8002b2c <UART_SetConfig+0x350>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	f003 0307 	and.w	r3, r3, #7
 8002958:	442b      	add	r3, r5
 800295a:	60a3      	str	r3, [r4, #8]
 800295c:	e154      	b.n	8002c08 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681c      	ldr	r4, [r3, #0]
 8002962:	f7ff fd67 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8002966:	4602      	mov	r2, r0
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	009a      	lsls	r2, r3, #2
 8002970:	441a      	add	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fbb2 f3f3 	udiv	r3, r2, r3
 800297c:	4a6b      	ldr	r2, [pc, #428]	; (8002b2c <UART_SetConfig+0x350>)
 800297e:	fba2 2303 	umull	r2, r3, r2, r3
 8002982:	095b      	lsrs	r3, r3, #5
 8002984:	011d      	lsls	r5, r3, #4
 8002986:	f7ff fd55 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 800298a:	4602      	mov	r2, r0
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	009a      	lsls	r2, r3, #2
 8002994:	441a      	add	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fbb2 f6f3 	udiv	r6, r2, r3
 80029a0:	f7ff fd48 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	009a      	lsls	r2, r3, #2
 80029ae:	441a      	add	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	005b      	lsls	r3, r3, #1
 80029b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ba:	4a5c      	ldr	r2, [pc, #368]	; (8002b2c <UART_SetConfig+0x350>)
 80029bc:	fba2 2303 	umull	r2, r3, r2, r3
 80029c0:	095b      	lsrs	r3, r3, #5
 80029c2:	2264      	movs	r2, #100	; 0x64
 80029c4:	fb02 f303 	mul.w	r3, r2, r3
 80029c8:	1af3      	subs	r3, r6, r3
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	3332      	adds	r3, #50	; 0x32
 80029ce:	4a57      	ldr	r2, [pc, #348]	; (8002b2c <UART_SetConfig+0x350>)
 80029d0:	fba2 2303 	umull	r2, r3, r2, r3
 80029d4:	095b      	lsrs	r3, r3, #5
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029dc:	441d      	add	r5, r3
 80029de:	f7ff fd29 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 80029e2:	4602      	mov	r2, r0
 80029e4:	4613      	mov	r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	4413      	add	r3, r2
 80029ea:	009a      	lsls	r2, r3, #2
 80029ec:	441a      	add	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80029f8:	f7ff fd1c 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4613      	mov	r3, r2
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	009a      	lsls	r2, r3, #2
 8002a06:	441a      	add	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	4a46      	ldr	r2, [pc, #280]	; (8002b2c <UART_SetConfig+0x350>)
 8002a14:	fba2 2303 	umull	r2, r3, r2, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	2264      	movs	r2, #100	; 0x64
 8002a1c:	fb02 f303 	mul.w	r3, r2, r3
 8002a20:	1af3      	subs	r3, r6, r3
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	3332      	adds	r3, #50	; 0x32
 8002a26:	4a41      	ldr	r2, [pc, #260]	; (8002b2c <UART_SetConfig+0x350>)
 8002a28:	fba2 2303 	umull	r2, r3, r2, r3
 8002a2c:	095b      	lsrs	r3, r3, #5
 8002a2e:	f003 0307 	and.w	r3, r3, #7
 8002a32:	442b      	add	r3, r5
 8002a34:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002a36:	e0e7      	b.n	8002c08 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a39      	ldr	r2, [pc, #228]	; (8002b24 <UART_SetConfig+0x348>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <UART_SetConfig+0x270>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a38      	ldr	r2, [pc, #224]	; (8002b28 <UART_SetConfig+0x34c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d171      	bne.n	8002b30 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681c      	ldr	r4, [r3, #0]
 8002a50:	f7ff fd04 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4613      	mov	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009a      	lsls	r2, r3, #2
 8002a5e:	441a      	add	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6a:	4a30      	ldr	r2, [pc, #192]	; (8002b2c <UART_SetConfig+0x350>)
 8002a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a70:	095b      	lsrs	r3, r3, #5
 8002a72:	011d      	lsls	r5, r3, #4
 8002a74:	f7ff fcf2 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	4413      	add	r3, r2
 8002a80:	009a      	lsls	r2, r3, #2
 8002a82:	441a      	add	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a8e:	f7ff fce5 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8002a92:	4602      	mov	r2, r0
 8002a94:	4613      	mov	r3, r2
 8002a96:	009b      	lsls	r3, r3, #2
 8002a98:	4413      	add	r3, r2
 8002a9a:	009a      	lsls	r2, r3, #2
 8002a9c:	441a      	add	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa8:	4a20      	ldr	r2, [pc, #128]	; (8002b2c <UART_SetConfig+0x350>)
 8002aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2264      	movs	r2, #100	; 0x64
 8002ab2:	fb02 f303 	mul.w	r3, r2, r3
 8002ab6:	1af3      	subs	r3, r6, r3
 8002ab8:	011b      	lsls	r3, r3, #4
 8002aba:	3332      	adds	r3, #50	; 0x32
 8002abc:	4a1b      	ldr	r2, [pc, #108]	; (8002b2c <UART_SetConfig+0x350>)
 8002abe:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac2:	095b      	lsrs	r3, r3, #5
 8002ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ac8:	441d      	add	r5, r3
 8002aca:	f7ff fcc7 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009a      	lsls	r2, r3, #2
 8002ad8:	441a      	add	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	fbb2 f6f3 	udiv	r6, r2, r3
 8002ae4:	f7ff fcba 	bl	800245c <HAL_RCC_GetPCLK2Freq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	009a      	lsls	r2, r3, #2
 8002af2:	441a      	add	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002afe:	4a0b      	ldr	r2, [pc, #44]	; (8002b2c <UART_SetConfig+0x350>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	2264      	movs	r2, #100	; 0x64
 8002b08:	fb02 f303 	mul.w	r3, r2, r3
 8002b0c:	1af3      	subs	r3, r6, r3
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	3332      	adds	r3, #50	; 0x32
 8002b12:	4a06      	ldr	r2, [pc, #24]	; (8002b2c <UART_SetConfig+0x350>)
 8002b14:	fba2 2303 	umull	r2, r3, r2, r3
 8002b18:	095b      	lsrs	r3, r3, #5
 8002b1a:	f003 030f 	and.w	r3, r3, #15
 8002b1e:	442b      	add	r3, r5
 8002b20:	60a3      	str	r3, [r4, #8]
 8002b22:	e071      	b.n	8002c08 <UART_SetConfig+0x42c>
 8002b24:	40011000 	.word	0x40011000
 8002b28:	40011400 	.word	0x40011400
 8002b2c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681c      	ldr	r4, [r3, #0]
 8002b34:	f7ff fc7e 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	4413      	add	r3, r2
 8002b40:	009a      	lsls	r2, r3, #2
 8002b42:	441a      	add	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	4a30      	ldr	r2, [pc, #192]	; (8002c10 <UART_SetConfig+0x434>)
 8002b50:	fba2 2303 	umull	r2, r3, r2, r3
 8002b54:	095b      	lsrs	r3, r3, #5
 8002b56:	011d      	lsls	r5, r3, #4
 8002b58:	f7ff fc6c 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	009a      	lsls	r2, r3, #2
 8002b66:	441a      	add	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002b72:	f7ff fc5f 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8002b76:	4602      	mov	r2, r0
 8002b78:	4613      	mov	r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009a      	lsls	r2, r3, #2
 8002b80:	441a      	add	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	4a20      	ldr	r2, [pc, #128]	; (8002c10 <UART_SetConfig+0x434>)
 8002b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	2264      	movs	r2, #100	; 0x64
 8002b96:	fb02 f303 	mul.w	r3, r2, r3
 8002b9a:	1af3      	subs	r3, r6, r3
 8002b9c:	011b      	lsls	r3, r3, #4
 8002b9e:	3332      	adds	r3, #50	; 0x32
 8002ba0:	4a1b      	ldr	r2, [pc, #108]	; (8002c10 <UART_SetConfig+0x434>)
 8002ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bac:	441d      	add	r5, r3
 8002bae:	f7ff fc41 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	009a      	lsls	r2, r3, #2
 8002bbc:	441a      	add	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8002bc8:	f7ff fc34 	bl	8002434 <HAL_RCC_GetPCLK1Freq>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	4613      	mov	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	4413      	add	r3, r2
 8002bd4:	009a      	lsls	r2, r3, #2
 8002bd6:	441a      	add	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4a0b      	ldr	r2, [pc, #44]	; (8002c10 <UART_SetConfig+0x434>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	2264      	movs	r2, #100	; 0x64
 8002bec:	fb02 f303 	mul.w	r3, r2, r3
 8002bf0:	1af3      	subs	r3, r6, r3
 8002bf2:	011b      	lsls	r3, r3, #4
 8002bf4:	3332      	adds	r3, #50	; 0x32
 8002bf6:	4a06      	ldr	r2, [pc, #24]	; (8002c10 <UART_SetConfig+0x434>)
 8002bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfc:	095b      	lsrs	r3, r3, #5
 8002bfe:	f003 030f 	and.w	r3, r3, #15
 8002c02:	442b      	add	r3, r5
 8002c04:	60a3      	str	r3, [r4, #8]
}
 8002c06:	e7ff      	b.n	8002c08 <UART_SetConfig+0x42c>
 8002c08:	bf00      	nop
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c10:	51eb851f 	.word	0x51eb851f

08002c14 <str_to_int>:
extern uint32_t   millis1;
extern UART_HandleTypeDef huart2;


uint8_t str_to_int(const char *str, uint32_t* steps, uint8_t* direction) //return if success
    {
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	60f8      	str	r0, [r7, #12]
 8002c1c:	60b9      	str	r1, [r7, #8]
 8002c1e:	607a      	str	r2, [r7, #4]
    const char* str_copy = 0;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
    uint8_t xreturn = 1;
 8002c24:	2301      	movs	r3, #1
 8002c26:	74fb      	strb	r3, [r7, #19]
    str_copy = str;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	617b      	str	r3, [r7, #20]

    if(*str_copy == '-')
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b2d      	cmp	r3, #45	; 0x2d
 8002c32:	d108      	bne.n	8002c46 <str_to_int+0x32>
	{
	str_copy++;
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	3301      	adds	r3, #1
 8002c38:	617b      	str	r3, [r7, #20]
	str++;//skip sign
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
	*direction = 1; //reverse direction
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	701a      	strb	r2, [r3, #0]
	}
    if(*str_copy  == '\0' || *str_copy == ' ')//first char is null or space
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	781b      	ldrb	r3, [r3, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d003      	beq.n	8002c56 <str_to_int+0x42>
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b20      	cmp	r3, #32
 8002c54:	d10f      	bne.n	8002c76 <str_to_int+0x62>
	{
	xreturn = 0;//not number
 8002c56:	2300      	movs	r3, #0
 8002c58:	74fb      	strb	r3, [r7, #19]
	}
    while(*str_copy  != '\0' && *str_copy != ' ')
 8002c5a:	e00c      	b.n	8002c76 <str_to_int+0x62>
	{
	if(*str_copy < '0' || *str_copy > '9')
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b2f      	cmp	r3, #47	; 0x2f
 8002c62:	d903      	bls.n	8002c6c <str_to_int+0x58>
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b39      	cmp	r3, #57	; 0x39
 8002c6a:	d901      	bls.n	8002c70 <str_to_int+0x5c>
	    {
	    xreturn = 0;//not number
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	74fb      	strb	r3, [r7, #19]
	    }
	str_copy++;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	3301      	adds	r3, #1
 8002c74:	617b      	str	r3, [r7, #20]
    while(*str_copy  != '\0' && *str_copy != ' ')
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <str_to_int+0x72>
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	d1ea      	bne.n	8002c5c <str_to_int+0x48>
	}
    if(xreturn)
 8002c86:	7cfb      	ldrb	r3, [r7, #19]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d006      	beq.n	8002c9a <str_to_int+0x86>
	{
	*steps = atoi(str);
 8002c8c:	68f8      	ldr	r0, [r7, #12]
 8002c8e:	f001 f95e 	bl	8003f4e <atoi>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	601a      	str	r2, [r3, #0]
	}
    return xreturn;
 8002c9a:	7cfb      	ldrb	r3, [r7, #19]
    }
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3718      	adds	r7, #24
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}

08002ca4 <G28_callback>:


/*************************************************************************/
 BaseType_t G28_callback(char *pcWriteBuffer, size_t xWriteBufferLen,
	const char *pcCommandString)
    {
 8002ca4:	b480      	push	{r7}
 8002ca6:	b085      	sub	sp, #20
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	60f8      	str	r0, [r7, #12]
 8002cac:	60b9      	str	r1, [r7, #8]
 8002cae:	607a      	str	r2, [r7, #4]
    strcpy( pcWriteBuffer, "G28 OK\r\n" );
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	4907      	ldr	r1, [pc, #28]	; (8002cd0 <G28_callback+0x2c>)
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	cb03      	ldmia	r3!, {r0, r1}
 8002cba:	6010      	str	r0, [r2, #0]
 8002cbc:	6051      	str	r1, [r2, #4]
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	7213      	strb	r3, [r2, #8]
    return pdFALSE;
 8002cc2:	2300      	movs	r3, #0
    }
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	08007020 	.word	0x08007020

08002cd4 <G1_callback>:

/*************************************************************************/

BaseType_t G1_callback(char *pcWriteBuffer, size_t xWriteBufferLen,
	const char *pcCommandString)
    {
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
    strcpy( pcWriteBuffer, "G1 OK\r\n" );
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4906      	ldr	r1, [pc, #24]	; (8002cfc <G1_callback+0x28>)
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	cb03      	ldmia	r3!, {r0, r1}
 8002cea:	6010      	str	r0, [r2, #0]
 8002cec:	6051      	str	r1, [r2, #4]
    return pdFALSE;
 8002cee:	2300      	movs	r3, #0
    }
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	08007044 	.word	0x08007044

08002d00 <G0_callback>:


/*************************************************************************/

BaseType_t G0_callback(char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString)
    {
 8002d00:	b5b0      	push	{r4, r5, r7, lr}
 8002d02:	b08e      	sub	sp, #56	; 0x38
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]

    const char* invalid_parameter = "Invalid parameter ";
 8002d0c:	4bc1      	ldr	r3, [pc, #772]	; (8003014 <G0_callback+0x314>)
 8002d0e:	633b      	str	r3, [r7, #48]	; 0x30
    const char* pcParameter;
    BaseType_t xParameterStringLength;
    UBaseType_t uxParameterNumber = 1;
 8002d10:	2301      	movs	r3, #1
 8002d12:	86fb      	strh	r3, [r7, #54]	; 0x36
    uint32_t motor_steps[NO_OF_MOTORS] = {0};
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
    uint8_t  motor_direction[NO_OF_MOTORS] = {0};
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
    uint8_t is_command_valid = 1;  //reset if any param is invalid
 8002d26:	2301      	movs	r3, #1
 8002d28:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    uint8_t param_received = 0; //set if at least one param is valid
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
     write buffer length is adequate, so does not check for buffer overflows. */
    (void) pcCommandString;
    (void) xWriteBufferLen;

    // to make sure pcWriteBuffer is always null terminated.
    memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 8002d32:	68ba      	ldr	r2, [r7, #8]
 8002d34:	2100      	movs	r1, #0
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f001 fb62 	bl	8004400 <memset>

    sprintf(pcWriteBuffer, "G0 Ok:\r\n");
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	49b6      	ldr	r1, [pc, #728]	; (8003018 <G0_callback+0x318>)
 8002d40:	461a      	mov	r2, r3
 8002d42:	460b      	mov	r3, r1
 8002d44:	cb03      	ldmia	r3!, {r0, r1}
 8002d46:	6010      	str	r0, [r2, #0]
 8002d48:	6051      	str	r1, [r2, #4]
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	7213      	strb	r3, [r2, #8]

    do
	{
	/* Obtain the parameter string. */
	pcParameter = FreeRTOS_CLIGetParameter(pcCommandString, /* The command string itself. */
 8002d4e:	f107 0226 	add.w	r2, r7, #38	; 0x26
 8002d52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d54:	4619      	mov	r1, r3
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fc3a 	bl	80035d0 <FreeRTOS_CLIGetParameter>
 8002d5c:	62f8      	str	r0, [r7, #44]	; 0x2c
	uxParameterNumber, /* Return the next parameter. */
	&xParameterStringLength /* Store the parameter string length. */
	);

	if (pcParameter != NULL)
 8002d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 81d5 	beq.w	8003110 <G0_callback+0x410>
	    {

	    uxParameterNumber++;
 8002d66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002d68:	3301      	adds	r3, #1
 8002d6a:	86fb      	strh	r3, [r7, #54]	; 0x36

	    switch (*pcParameter)
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	3b4d      	subs	r3, #77	; 0x4d
 8002d72:	2b2d      	cmp	r3, #45	; 0x2d
 8002d74:	f200 81aa 	bhi.w	80030cc <G0_callback+0x3cc>
 8002d78:	a201      	add	r2, pc, #4	; (adr r2, 8002d80 <G0_callback+0x80>)
 8002d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7e:	bf00      	nop
 8002d80:	0800302d 	.word	0x0800302d
 8002d84:	080030cd 	.word	0x080030cd
 8002d88:	080030cd 	.word	0x080030cd
 8002d8c:	080030cd 	.word	0x080030cd
 8002d90:	080030cd 	.word	0x080030cd
 8002d94:	080030cd 	.word	0x080030cd
 8002d98:	080030cd 	.word	0x080030cd
 8002d9c:	080030cd 	.word	0x080030cd
 8002da0:	080030cd 	.word	0x080030cd
 8002da4:	080030cd 	.word	0x080030cd
 8002da8:	080030cd 	.word	0x080030cd
 8002dac:	08002e39 	.word	0x08002e39
 8002db0:	08002ed7 	.word	0x08002ed7
 8002db4:	08002f71 	.word	0x08002f71
 8002db8:	080030cd 	.word	0x080030cd
 8002dbc:	080030cd 	.word	0x080030cd
 8002dc0:	080030cd 	.word	0x080030cd
 8002dc4:	080030cd 	.word	0x080030cd
 8002dc8:	080030cd 	.word	0x080030cd
 8002dcc:	080030cd 	.word	0x080030cd
 8002dd0:	080030cd 	.word	0x080030cd
 8002dd4:	080030cd 	.word	0x080030cd
 8002dd8:	080030cd 	.word	0x080030cd
 8002ddc:	080030cd 	.word	0x080030cd
 8002de0:	080030cd 	.word	0x080030cd
 8002de4:	080030cd 	.word	0x080030cd
 8002de8:	080030cd 	.word	0x080030cd
 8002dec:	080030cd 	.word	0x080030cd
 8002df0:	080030cd 	.word	0x080030cd
 8002df4:	080030cd 	.word	0x080030cd
 8002df8:	080030cd 	.word	0x080030cd
 8002dfc:	080030cd 	.word	0x080030cd
 8002e00:	0800302d 	.word	0x0800302d
 8002e04:	080030cd 	.word	0x080030cd
 8002e08:	080030cd 	.word	0x080030cd
 8002e0c:	080030cd 	.word	0x080030cd
 8002e10:	080030cd 	.word	0x080030cd
 8002e14:	080030cd 	.word	0x080030cd
 8002e18:	080030cd 	.word	0x080030cd
 8002e1c:	080030cd 	.word	0x080030cd
 8002e20:	080030cd 	.word	0x080030cd
 8002e24:	080030cd 	.word	0x080030cd
 8002e28:	080030cd 	.word	0x080030cd
 8002e2c:	08002e39 	.word	0x08002e39
 8002e30:	08002ed7 	.word	0x08002ed7
 8002e34:	08002f71 	.word	0x08002f71
		{

	    case 'x':
	    case 'X':
		{
		if (str_to_int((pcParameter + 1), &motor_steps[0], &motor_direction[0]) == 1)
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	3301      	adds	r3, #1
 8002e3c:	f107 0210 	add.w	r2, r7, #16
 8002e40:	f107 0114 	add.w	r1, r7, #20
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7ff fee5 	bl	8002c14 <str_to_int>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d123      	bne.n	8002e98 <G0_callback+0x198>
		    {
		    // string to int success
		    param_received = 1;
 8002e50:	2301      	movs	r3, #1
 8002e52:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		    strncat(pcWriteBuffer, "X=",2);
 8002e56:	68f8      	ldr	r0, [r7, #12]
 8002e58:	f7fd f9c2 	bl	80001e0 <strlen>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	4a6d      	ldr	r2, [pc, #436]	; (800301c <G0_callback+0x31c>)
 8002e66:	8811      	ldrh	r1, [r2, #0]
 8002e68:	7892      	ldrb	r2, [r2, #2]
 8002e6a:	8019      	strh	r1, [r3, #0]
 8002e6c:	709a      	strb	r2, [r3, #2]
		    strncat(pcWriteBuffer, (pcParameter + 1), (size_t) (xParameterStringLength - 1));
 8002e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e70:	3301      	adds	r3, #1
 8002e72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002e74:	3a01      	subs	r2, #1
 8002e76:	4619      	mov	r1, r3
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f001 fb11 	bl	80044a0 <strncat>
		    strncat(pcWriteBuffer, "\r\n", 3);
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f7fd f9ae 	bl	80001e0 <strlen>
 8002e84:	4603      	mov	r3, r0
 8002e86:	461a      	mov	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	4a64      	ldr	r2, [pc, #400]	; (8003020 <G0_callback+0x320>)
 8002e8e:	8811      	ldrh	r1, [r2, #0]
 8002e90:	7892      	ldrb	r2, [r2, #2]
 8002e92:	8019      	strh	r1, [r3, #0]
 8002e94:	709a      	strb	r2, [r3, #2]
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
		    strncat(pcWriteBuffer, "\r\n", 3);
		    }

		}
		break;
 8002e96:	e165      	b.n	8003164 <G0_callback+0x464>
		    is_command_valid = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		    strncat(pcWriteBuffer, invalid_parameter, strlen(invalid_parameter));
 8002e9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ea0:	f7fd f99e 	bl	80001e0 <strlen>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eaa:	68f8      	ldr	r0, [r7, #12]
 8002eac:	f001 faf8 	bl	80044a0 <strncat>
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 8002eb0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f001 faf2 	bl	80044a0 <strncat>
		    strncat(pcWriteBuffer, "\r\n", 3);
 8002ebc:	68f8      	ldr	r0, [r7, #12]
 8002ebe:	f7fd f98f 	bl	80001e0 <strlen>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4413      	add	r3, r2
 8002eca:	4a55      	ldr	r2, [pc, #340]	; (8003020 <G0_callback+0x320>)
 8002ecc:	8811      	ldrh	r1, [r2, #0]
 8002ece:	7892      	ldrb	r2, [r2, #2]
 8002ed0:	8019      	strh	r1, [r3, #0]
 8002ed2:	709a      	strb	r2, [r3, #2]
		break;
 8002ed4:	e146      	b.n	8003164 <G0_callback+0x464>

	    case 'y':
	    case 'Y':
		{
		if (str_to_int((pcParameter + 1), &motor_steps[1], &motor_direction[1]) == 1)
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	1c58      	adds	r0, r3, #1
 8002eda:	f107 0310 	add.w	r3, r7, #16
 8002ede:	1c5a      	adds	r2, r3, #1
 8002ee0:	f107 0314 	add.w	r3, r7, #20
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	4619      	mov	r1, r3
 8002ee8:	f7ff fe94 	bl	8002c14 <str_to_int>
 8002eec:	4603      	mov	r3, r0
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d123      	bne.n	8002f3a <G0_callback+0x23a>
		    {
		    // string to int success
		    param_received = 1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		    strncat(pcWriteBuffer, "Y=",2);
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f7fd f971 	bl	80001e0 <strlen>
 8002efe:	4603      	mov	r3, r0
 8002f00:	461a      	mov	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4413      	add	r3, r2
 8002f06:	4a47      	ldr	r2, [pc, #284]	; (8003024 <G0_callback+0x324>)
 8002f08:	8811      	ldrh	r1, [r2, #0]
 8002f0a:	7892      	ldrb	r2, [r2, #2]
 8002f0c:	8019      	strh	r1, [r3, #0]
 8002f0e:	709a      	strb	r2, [r3, #2]
		    strncat(pcWriteBuffer, (pcParameter + 1), (size_t) (xParameterStringLength - 1));
 8002f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f12:	3301      	adds	r3, #1
 8002f14:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f16:	3a01      	subs	r2, #1
 8002f18:	4619      	mov	r1, r3
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f001 fac0 	bl	80044a0 <strncat>
		    strncat(pcWriteBuffer, "\r\n", 3);
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f7fd f95d 	bl	80001e0 <strlen>
 8002f26:	4603      	mov	r3, r0
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	4a3c      	ldr	r2, [pc, #240]	; (8003020 <G0_callback+0x320>)
 8002f30:	8811      	ldrh	r1, [r2, #0]
 8002f32:	7892      	ldrb	r2, [r2, #2]
 8002f34:	8019      	strh	r1, [r3, #0]
 8002f36:	709a      	strb	r2, [r3, #2]
		    strncat(pcWriteBuffer, invalid_parameter,3);
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
		    strncat(pcWriteBuffer, "\r\n", 3);
		    }
		}
		break;
 8002f38:	e114      	b.n	8003164 <G0_callback+0x464>
		    is_command_valid = 0;
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		    strncat(pcWriteBuffer, invalid_parameter,3);
 8002f40:	2203      	movs	r2, #3
 8002f42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f001 faab 	bl	80044a0 <strncat>
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 8002f4a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f001 faa5 	bl	80044a0 <strncat>
		    strncat(pcWriteBuffer, "\r\n", 3);
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	f7fd f942 	bl	80001e0 <strlen>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	461a      	mov	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	4a2e      	ldr	r2, [pc, #184]	; (8003020 <G0_callback+0x320>)
 8002f66:	8811      	ldrh	r1, [r2, #0]
 8002f68:	7892      	ldrb	r2, [r2, #2]
 8002f6a:	8019      	strh	r1, [r3, #0]
 8002f6c:	709a      	strb	r2, [r3, #2]
		break;
 8002f6e:	e0f9      	b.n	8003164 <G0_callback+0x464>

	    case 'z':
	    case 'Z':
		{
		if (str_to_int((pcParameter + 1), &motor_steps[2], &motor_direction[2]) == 1)
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f72:	1c58      	adds	r0, r3, #1
 8002f74:	f107 0310 	add.w	r3, r7, #16
 8002f78:	1c9a      	adds	r2, r3, #2
 8002f7a:	f107 0314 	add.w	r3, r7, #20
 8002f7e:	3308      	adds	r3, #8
 8002f80:	4619      	mov	r1, r3
 8002f82:	f7ff fe47 	bl	8002c14 <str_to_int>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d123      	bne.n	8002fd4 <G0_callback+0x2d4>
		    {
		    // success
		    param_received = 1;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		    strncat(pcWriteBuffer, "Z=",2);
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f7fd f924 	bl	80001e0 <strlen>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	461a      	mov	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	4a21      	ldr	r2, [pc, #132]	; (8003028 <G0_callback+0x328>)
 8002fa2:	8811      	ldrh	r1, [r2, #0]
 8002fa4:	7892      	ldrb	r2, [r2, #2]
 8002fa6:	8019      	strh	r1, [r3, #0]
 8002fa8:	709a      	strb	r2, [r3, #2]
		    strncat(pcWriteBuffer, (pcParameter + 1), (size_t) (xParameterStringLength - 1));
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	3301      	adds	r3, #1
 8002fae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	68f8      	ldr	r0, [r7, #12]
 8002fb6:	f001 fa73 	bl	80044a0 <strncat>
		    strncat(pcWriteBuffer, "\r\n", 3);
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f7fd f910 	bl	80001e0 <strlen>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	4a15      	ldr	r2, [pc, #84]	; (8003020 <G0_callback+0x320>)
 8002fca:	8811      	ldrh	r1, [r2, #0]
 8002fcc:	7892      	ldrb	r2, [r2, #2]
 8002fce:	8019      	strh	r1, [r3, #0]
 8002fd0:	709a      	strb	r2, [r3, #2]
		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
		    strncat(pcWriteBuffer, "\r\n", 3);
		    }
		}
		break;
 8002fd2:	e0c7      	b.n	8003164 <G0_callback+0x464>
		    is_command_valid = 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 8002fda:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002fdc:	f7fd f900 	bl	80001e0 <strlen>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f001 fa5a 	bl	80044a0 <strncat>
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 8002fec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8002fee:	461a      	mov	r2, r3
 8002ff0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ff2:	68f8      	ldr	r0, [r7, #12]
 8002ff4:	f001 fa54 	bl	80044a0 <strncat>
		    strncat(pcWriteBuffer, "\r\n", 3);
 8002ff8:	68f8      	ldr	r0, [r7, #12]
 8002ffa:	f7fd f8f1 	bl	80001e0 <strlen>
 8002ffe:	4603      	mov	r3, r0
 8003000:	461a      	mov	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	4413      	add	r3, r2
 8003006:	4a06      	ldr	r2, [pc, #24]	; (8003020 <G0_callback+0x320>)
 8003008:	8811      	ldrh	r1, [r2, #0]
 800300a:	7892      	ldrb	r2, [r2, #2]
 800300c:	8019      	strh	r1, [r3, #0]
 800300e:	709a      	strb	r2, [r3, #2]
		break;
 8003010:	e0a8      	b.n	8003164 <G0_callback+0x464>
 8003012:	bf00      	nop
 8003014:	08007064 	.word	0x08007064
 8003018:	08007078 	.word	0x08007078
 800301c:	08007084 	.word	0x08007084
 8003020:	08007088 	.word	0x08007088
 8003024:	0800708c 	.word	0x0800708c
 8003028:	08007090 	.word	0x08007090

	    case 'm':
	    case 'M':
		{
		if (str_to_int((pcParameter + 1), &motor_steps[3], &motor_direction[0]) == 1)
 800302c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800302e:	1c58      	adds	r0, r3, #1
 8003030:	f107 0210 	add.w	r2, r7, #16
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	330c      	adds	r3, #12
 800303a:	4619      	mov	r1, r3
 800303c:	f7ff fdea 	bl	8002c14 <str_to_int>
 8003040:	4603      	mov	r3, r0
 8003042:	2b01      	cmp	r3, #1
 8003044:	d123      	bne.n	800308e <G0_callback+0x38e>
		    {
		    // success
		    param_received = 1;
 8003046:	2301      	movs	r3, #1
 8003048:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		    strncat(pcWriteBuffer, "M=",2);
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7fd f8c7 	bl	80001e0 <strlen>
 8003052:	4603      	mov	r3, r0
 8003054:	461a      	mov	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4413      	add	r3, r2
 800305a:	4a56      	ldr	r2, [pc, #344]	; (80031b4 <G0_callback+0x4b4>)
 800305c:	8811      	ldrh	r1, [r2, #0]
 800305e:	7892      	ldrb	r2, [r2, #2]
 8003060:	8019      	strh	r1, [r3, #0]
 8003062:	709a      	strb	r2, [r3, #2]
		    strncat(pcWriteBuffer, (pcParameter + 1), (size_t) (xParameterStringLength - 1));
 8003064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003066:	3301      	adds	r3, #1
 8003068:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800306a:	3a01      	subs	r2, #1
 800306c:	4619      	mov	r1, r3
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f001 fa16 	bl	80044a0 <strncat>
		    strncat(pcWriteBuffer, "\r\n", 3);
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7fd f8b3 	bl	80001e0 <strlen>
 800307a:	4603      	mov	r3, r0
 800307c:	461a      	mov	r2, r3
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	4413      	add	r3, r2
 8003082:	4a4d      	ldr	r2, [pc, #308]	; (80031b8 <G0_callback+0x4b8>)
 8003084:	8811      	ldrh	r1, [r2, #0]
 8003086:	7892      	ldrb	r2, [r2, #2]
 8003088:	8019      	strh	r1, [r3, #0]
 800308a:	709a      	strb	r2, [r3, #2]
		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
		    strncat(pcWriteBuffer, "\r\n", 3);
		    }
		}
		break;
 800308c:	e06a      	b.n	8003164 <G0_callback+0x464>
		    is_command_valid = 0;
 800308e:	2300      	movs	r3, #0
 8003090:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		    strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 8003094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003096:	f7fd f8a3 	bl	80001e0 <strlen>
 800309a:	4603      	mov	r3, r0
 800309c:	461a      	mov	r2, r3
 800309e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f001 f9fd 	bl	80044a0 <strncat>
		    strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 80030a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030a8:	461a      	mov	r2, r3
 80030aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030ac:	68f8      	ldr	r0, [r7, #12]
 80030ae:	f001 f9f7 	bl	80044a0 <strncat>
		    strncat(pcWriteBuffer, "\r\n", 3);
 80030b2:	68f8      	ldr	r0, [r7, #12]
 80030b4:	f7fd f894 	bl	80001e0 <strlen>
 80030b8:	4603      	mov	r3, r0
 80030ba:	461a      	mov	r2, r3
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4413      	add	r3, r2
 80030c0:	4a3d      	ldr	r2, [pc, #244]	; (80031b8 <G0_callback+0x4b8>)
 80030c2:	8811      	ldrh	r1, [r2, #0]
 80030c4:	7892      	ldrb	r2, [r2, #2]
 80030c6:	8019      	strh	r1, [r3, #0]
 80030c8:	709a      	strb	r2, [r3, #2]
		break;
 80030ca:	e04b      	b.n	8003164 <G0_callback+0x464>

	    default:
		{
		//invalid parameter(s)
		param_received = 1; //received but invalid
 80030cc:	2301      	movs	r3, #1
 80030ce:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
		is_command_valid = 0;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		strncat(pcWriteBuffer, invalid_parameter,strlen(invalid_parameter));
 80030d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030da:	f7fd f881 	bl	80001e0 <strlen>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f001 f9db 	bl	80044a0 <strncat>
		strncat(pcWriteBuffer, pcParameter, (size_t) xParameterStringLength);
 80030ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80030ec:	461a      	mov	r2, r3
 80030ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f001 f9d5 	bl	80044a0 <strncat>
		strncat(pcWriteBuffer, "\r\n", strlen("\r\n"));
 80030f6:	68f8      	ldr	r0, [r7, #12]
 80030f8:	f7fd f872 	bl	80001e0 <strlen>
 80030fc:	4603      	mov	r3, r0
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	4a2c      	ldr	r2, [pc, #176]	; (80031b8 <G0_callback+0x4b8>)
 8003106:	8811      	ldrh	r1, [r2, #0]
 8003108:	7892      	ldrb	r2, [r2, #2]
 800310a:	8019      	strh	r1, [r3, #0]
 800310c:	709a      	strb	r2, [r3, #2]
 800310e:	e029      	b.n	8003164 <G0_callback+0x464>
		}

		}
	    }
	else if(param_received == 0 && is_command_valid == 1) //zero param entered
 8003110:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003114:	2b00      	cmp	r3, #0
 8003116:	d125      	bne.n	8003164 <G0_callback+0x464>
 8003118:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800311c:	2b01      	cmp	r3, #1
 800311e:	d121      	bne.n	8003164 <G0_callback+0x464>
	    {
		is_command_valid = 0;
 8003120:	2300      	movs	r3, #0
 8003122:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		strncat(pcWriteBuffer, "Parameter Not Entered",strlen("Parameter Not Entered"));
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f7fd f85a 	bl	80001e0 <strlen>
 800312c:	4603      	mov	r3, r0
 800312e:	461a      	mov	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	4413      	add	r3, r2
 8003134:	4a21      	ldr	r2, [pc, #132]	; (80031bc <G0_callback+0x4bc>)
 8003136:	461d      	mov	r5, r3
 8003138:	4614      	mov	r4, r2
 800313a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800313c:	6028      	str	r0, [r5, #0]
 800313e:	6069      	str	r1, [r5, #4]
 8003140:	60aa      	str	r2, [r5, #8]
 8003142:	60eb      	str	r3, [r5, #12]
 8003144:	6820      	ldr	r0, [r4, #0]
 8003146:	6128      	str	r0, [r5, #16]
 8003148:	88a3      	ldrh	r3, [r4, #4]
 800314a:	82ab      	strh	r3, [r5, #20]
		strncat(pcWriteBuffer, "\r\n", strlen("\r\n"));
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f7fd f847 	bl	80001e0 <strlen>
 8003152:	4603      	mov	r3, r0
 8003154:	461a      	mov	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	4413      	add	r3, r2
 800315a:	4a17      	ldr	r2, [pc, #92]	; (80031b8 <G0_callback+0x4b8>)
 800315c:	8811      	ldrh	r1, [r2, #0]
 800315e:	7892      	ldrb	r2, [r2, #2]
 8003160:	8019      	strh	r1, [r3, #0]
 8003162:	709a      	strb	r2, [r3, #2]
	    }


	}
    while (pcParameter != NULL);
 8003164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003166:	2b00      	cmp	r3, #0
 8003168:	f47f adf1 	bne.w	8002d4e <G0_callback+0x4e>

	    /*Execute command*/

	    if (is_command_valid == 1 && param_received == 1)
 800316c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003170:	2b01      	cmp	r3, #1
 8003172:	d11a      	bne.n	80031aa <G0_callback+0x4aa>
 8003174:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003178:	2b01      	cmp	r3, #1
 800317a:	d116      	bne.n	80031aa <G0_callback+0x4aa>
		{
		uint32_t millis = HAL_GetTick() - millis1;
 800317c:	f7fd ff06 	bl	8000f8c <HAL_GetTick>
 8003180:	4602      	mov	r2, r0
 8003182:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <G0_callback+0x4c0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
		itoa(millis, millis_int_to_str, 10); //base 10
 800318a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800318c:	220a      	movs	r2, #10
 800318e:	490d      	ldr	r1, [pc, #52]	; (80031c4 <G0_callback+0x4c4>)
 8003190:	4618      	mov	r0, r3
 8003192:	f000 ff1d 	bl	8003fd0 <itoa>
		vSerialPutString(&huart2, (uint8_t*) millis_int_to_str, strlen(millis_int_to_str));
 8003196:	480b      	ldr	r0, [pc, #44]	; (80031c4 <G0_callback+0x4c4>)
 8003198:	f7fd f822 	bl	80001e0 <strlen>
 800319c:	4603      	mov	r3, r0
 800319e:	b29b      	uxth	r3, r3
 80031a0:	461a      	mov	r2, r3
 80031a2:	4908      	ldr	r1, [pc, #32]	; (80031c4 <G0_callback+0x4c4>)
 80031a4:	4808      	ldr	r0, [pc, #32]	; (80031c8 <G0_callback+0x4c8>)
 80031a6:	f000 fd39 	bl	8003c1c <vSerialPutString>
		}

    return pdFALSE;
 80031aa:	2300      	movs	r3, #0

    }
 80031ac:	4618      	mov	r0, r3
 80031ae:	3738      	adds	r7, #56	; 0x38
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bdb0      	pop	{r4, r5, r7, pc}
 80031b4:	08007094 	.word	0x08007094
 80031b8:	08007088 	.word	0x08007088
 80031bc:	08007098 	.word	0x08007098
 80031c0:	2000090c 	.word	0x2000090c
 80031c4:	200006ac 	.word	0x200006ac
 80031c8:	20000a20 	.word	0x20000a20

080031cc <mconfig_callback>:

/*************************************************************************/

BaseType_t mconfig_callback(char *pcWriteBuffer, size_t xWriteBufferLen,
	const char *pcCommandString)
    {
 80031cc:	b490      	push	{r4, r7}
 80031ce:	b084      	sub	sp, #16
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
    strcpy( pcWriteBuffer, "mconfig OK\r\n" );
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <mconfig_callback+0x2c>)
 80031dc:	461c      	mov	r4, r3
 80031de:	4613      	mov	r3, r2
 80031e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80031e2:	6020      	str	r0, [r4, #0]
 80031e4:	6061      	str	r1, [r4, #4]
 80031e6:	60a2      	str	r2, [r4, #8]
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	7323      	strb	r3, [r4, #12]
    return pdFALSE;
 80031ec:	2300      	movs	r3, #0
    }
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc90      	pop	{r4, r7}
 80031f6:	4770      	bx	lr
 80031f8:	080070cc 	.word	0x080070cc

080031fc <yconfig_callback>:

/*************************************************************************/

BaseType_t yconfig_callback(char *pcWriteBuffer, size_t xWriteBufferLen,
	const char *pcCommandString)
    {
 80031fc:	b490      	push	{r4, r7}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
    strcpy( pcWriteBuffer, "yconfig OK\r\n" );
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4a07      	ldr	r2, [pc, #28]	; (8003228 <yconfig_callback+0x2c>)
 800320c:	461c      	mov	r4, r3
 800320e:	4613      	mov	r3, r2
 8003210:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003212:	6020      	str	r0, [r4, #0]
 8003214:	6061      	str	r1, [r4, #4]
 8003216:	60a2      	str	r2, [r4, #8]
 8003218:	781b      	ldrb	r3, [r3, #0]
 800321a:	7323      	strb	r3, [r4, #12]
    return pdFALSE;
 800321c:	2300      	movs	r3, #0
    }
 800321e:	4618      	mov	r0, r3
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bc90      	pop	{r4, r7}
 8003226:	4770      	bx	lr
 8003228:	08007100 	.word	0x08007100

0800322c <zconfig_callback>:

/*************************************************************************/

BaseType_t zconfig_callback(char *pcWriteBuffer, size_t xWriteBufferLen,
	const char *pcCommandString)
    {
 800322c:	b490      	push	{r4, r7}
 800322e:	b084      	sub	sp, #16
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
    strcpy( pcWriteBuffer, "zconfig OK\r\n" );
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a07      	ldr	r2, [pc, #28]	; (8003258 <zconfig_callback+0x2c>)
 800323c:	461c      	mov	r4, r3
 800323e:	4613      	mov	r3, r2
 8003240:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003242:	6020      	str	r0, [r4, #0]
 8003244:	6061      	str	r1, [r4, #4]
 8003246:	60a2      	str	r2, [r4, #8]
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	7323      	strb	r3, [r4, #12]
    return pdFALSE;
 800324c:	2300      	movs	r3, #0
    }
 800324e:	4618      	mov	r0, r3
 8003250:	3710      	adds	r7, #16
 8003252:	46bd      	mov	sp, r7
 8003254:	bc90      	pop	{r4, r7}
 8003256:	4770      	bx	lr
 8003258:	08007134 	.word	0x08007134

0800325c <prvThreeParameterEchoCommand>:


/*************************************************************************/

static BaseType_t prvThreeParameterEchoCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 800325c:	b5b0      	push	{r4, r5, r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	//configASSERT( pcWriteBuffer );

	if( uxParameterNumber == 0 )
 8003268:	4b2b      	ldr	r3, [pc, #172]	; (8003318 <prvThreeParameterEchoCommand+0xbc>)
 800326a:	881b      	ldrh	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d114      	bne.n	800329a <prvThreeParameterEchoCommand+0x3e>
	{
		/* The first time the function is called after the command has been
		entered just a header string is returned. */
		sprintf( pcWriteBuffer, "The three parameters were:\r\n" );
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	4a2a      	ldr	r2, [pc, #168]	; (800331c <prvThreeParameterEchoCommand+0xc0>)
 8003274:	461d      	mov	r5, r3
 8003276:	4614      	mov	r4, r2
 8003278:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800327a:	6028      	str	r0, [r5, #0]
 800327c:	6069      	str	r1, [r5, #4]
 800327e:	60aa      	str	r2, [r5, #8]
 8003280:	60eb      	str	r3, [r5, #12]
 8003282:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003284:	6128      	str	r0, [r5, #16]
 8003286:	6169      	str	r1, [r5, #20]
 8003288:	61aa      	str	r2, [r5, #24]
 800328a:	7823      	ldrb	r3, [r4, #0]
 800328c:	772b      	strb	r3, [r5, #28]

		/* Next time the function is called the first parameter will be echoed
		back. */
		uxParameterNumber = 1U;
 800328e:	4b22      	ldr	r3, [pc, #136]	; (8003318 <prvThreeParameterEchoCommand+0xbc>)
 8003290:	2201      	movs	r2, #1
 8003292:	801a      	strh	r2, [r3, #0]

		/* There is more data to be returned as no parameters have been echoed
		back yet. */
		xReturn = pdPASS;
 8003294:	2301      	movs	r3, #1
 8003296:	83fb      	strh	r3, [r7, #30]
 8003298:	e038      	b.n	800330c <prvThreeParameterEchoCommand+0xb0>
	}
	else
	{
		/* Obtain the parameter string. */
		pcParameter = FreeRTOS_CLIGetParameter
 800329a:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <prvThreeParameterEchoCommand+0xbc>)
 800329c:	881b      	ldrh	r3, [r3, #0]
 800329e:	f107 0216 	add.w	r2, r7, #22
 80032a2:	4619      	mov	r1, r3
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 f993 	bl	80035d0 <FreeRTOS_CLIGetParameter>
 80032aa:	61b8      	str	r0, [r7, #24]

		/* Sanity check something was returned. */
		//configASSERT( pcParameter );

		/* Return the parameter string. */
		memset( pcWriteBuffer, 0x00, xWriteBufferLen );
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	2100      	movs	r1, #0
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f001 f8a5 	bl	8004400 <memset>
		sprintf( pcWriteBuffer, "%d: ", ( int ) uxParameterNumber );
 80032b6:	4b18      	ldr	r3, [pc, #96]	; (8003318 <prvThreeParameterEchoCommand+0xbc>)
 80032b8:	881b      	ldrh	r3, [r3, #0]
 80032ba:	461a      	mov	r2, r3
 80032bc:	4918      	ldr	r1, [pc, #96]	; (8003320 <prvThreeParameterEchoCommand+0xc4>)
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f001 f8c2 	bl	8004448 <sprintf>
		strncat( pcWriteBuffer, pcParameter, ( size_t ) xParameterStringLength );
 80032c4:	8afb      	ldrh	r3, [r7, #22]
 80032c6:	461a      	mov	r2, r3
 80032c8:	69b9      	ldr	r1, [r7, #24]
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f001 f8e8 	bl	80044a0 <strncat>
		strncat( pcWriteBuffer, "\r\n", strlen( "\r\n" ) );
 80032d0:	68f8      	ldr	r0, [r7, #12]
 80032d2:	f7fc ff85 	bl	80001e0 <strlen>
 80032d6:	4603      	mov	r3, r0
 80032d8:	461a      	mov	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	4413      	add	r3, r2
 80032de:	4a11      	ldr	r2, [pc, #68]	; (8003324 <prvThreeParameterEchoCommand+0xc8>)
 80032e0:	8811      	ldrh	r1, [r2, #0]
 80032e2:	7892      	ldrb	r2, [r2, #2]
 80032e4:	8019      	strh	r1, [r3, #0]
 80032e6:	709a      	strb	r2, [r3, #2]

		/* If this is the last of the three parameters then there are no more
		strings to return after this one. */
		if( uxParameterNumber == 3U )
 80032e8:	4b0b      	ldr	r3, [pc, #44]	; (8003318 <prvThreeParameterEchoCommand+0xbc>)
 80032ea:	881b      	ldrh	r3, [r3, #0]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d105      	bne.n	80032fc <prvThreeParameterEchoCommand+0xa0>
		{
			/* If this is the last of the three parameters then there are no more
			strings to return after this one. */
			xReturn = pdFALSE;
 80032f0:	2300      	movs	r3, #0
 80032f2:	83fb      	strh	r3, [r7, #30]
			uxParameterNumber = 0;
 80032f4:	4b08      	ldr	r3, [pc, #32]	; (8003318 <prvThreeParameterEchoCommand+0xbc>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	801a      	strh	r2, [r3, #0]
 80032fa:	e007      	b.n	800330c <prvThreeParameterEchoCommand+0xb0>
		}
		else
		{
			/* There are more parameters to return after this one. */
			xReturn = pdTRUE;
 80032fc:	2301      	movs	r3, #1
 80032fe:	83fb      	strh	r3, [r7, #30]
			uxParameterNumber++;
 8003300:	4b05      	ldr	r3, [pc, #20]	; (8003318 <prvThreeParameterEchoCommand+0xbc>)
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	3301      	adds	r3, #1
 8003306:	b29a      	uxth	r2, r3
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <prvThreeParameterEchoCommand+0xbc>)
 800330a:	801a      	strh	r2, [r3, #0]
		}
	}

	return xReturn;
 800330c:	8bfb      	ldrh	r3, [r7, #30]
}
 800330e:	4618      	mov	r0, r3
 8003310:	3720      	adds	r7, #32
 8003312:	46bd      	mov	sp, r7
 8003314:	bdb0      	pop	{r4, r5, r7, pc}
 8003316:	bf00      	nop
 8003318:	200006b6 	.word	0x200006b6
 800331c:	0800719c 	.word	0x0800719c
 8003320:	080071bc 	.word	0x080071bc
 8003324:	08007088 	.word	0x08007088

08003328 <prvParameterEchoCommand>:


/*************************************************************************/

static BaseType_t prvParameterEchoCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8003328:	b5b0      	push	{r4, r5, r7, lr}
 800332a:	b088      	sub	sp, #32
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	//configASSERT( pcWriteBuffer );

	if( uxParameterNumber == 0 )
 8003334:	4b2c      	ldr	r3, [pc, #176]	; (80033e8 <prvParameterEchoCommand+0xc0>)
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d115      	bne.n	8003368 <prvParameterEchoCommand+0x40>
	{
		/* The first time the function is called after the command has been
		entered just a header string is returned. */
		sprintf( pcWriteBuffer, "The parameters were:\r\n" );
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a2b      	ldr	r2, [pc, #172]	; (80033ec <prvParameterEchoCommand+0xc4>)
 8003340:	461c      	mov	r4, r3
 8003342:	4615      	mov	r5, r2
 8003344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003346:	6020      	str	r0, [r4, #0]
 8003348:	6061      	str	r1, [r4, #4]
 800334a:	60a2      	str	r2, [r4, #8]
 800334c:	60e3      	str	r3, [r4, #12]
 800334e:	6828      	ldr	r0, [r5, #0]
 8003350:	6120      	str	r0, [r4, #16]
 8003352:	88ab      	ldrh	r3, [r5, #4]
 8003354:	79aa      	ldrb	r2, [r5, #6]
 8003356:	82a3      	strh	r3, [r4, #20]
 8003358:	4613      	mov	r3, r2
 800335a:	75a3      	strb	r3, [r4, #22]

		/* Next time the function is called the first parameter will be echoed
		back. */
		uxParameterNumber = 1U;
 800335c:	4b22      	ldr	r3, [pc, #136]	; (80033e8 <prvParameterEchoCommand+0xc0>)
 800335e:	2201      	movs	r2, #1
 8003360:	801a      	strh	r2, [r3, #0]

		/* There is more data to be returned as no parameters have been echoed
		back yet. */
		xReturn = pdPASS;
 8003362:	2301      	movs	r3, #1
 8003364:	83fb      	strh	r3, [r7, #30]
 8003366:	e03a      	b.n	80033de <prvParameterEchoCommand+0xb6>
	}
	else
	{
		/* Obtain the parameter string. */
		pcParameter = FreeRTOS_CLIGetParameter
 8003368:	4b1f      	ldr	r3, [pc, #124]	; (80033e8 <prvParameterEchoCommand+0xc0>)
 800336a:	881b      	ldrh	r3, [r3, #0]
 800336c:	f107 0216 	add.w	r2, r7, #22
 8003370:	4619      	mov	r1, r3
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f92c 	bl	80035d0 <FreeRTOS_CLIGetParameter>
 8003378:	61b8      	str	r0, [r7, #24]
							pcCommandString,		/* The command string itself. */
							uxParameterNumber,		/* Return the next parameter. */
							&xParameterStringLength	/* Store the parameter string length. */
						);

		if( pcParameter != NULL )
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d026      	beq.n	80033ce <prvParameterEchoCommand+0xa6>
		{
			/* Return the parameter string. */
			memset( pcWriteBuffer, 0x00, xWriteBufferLen );
 8003380:	68ba      	ldr	r2, [r7, #8]
 8003382:	2100      	movs	r1, #0
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f001 f83b 	bl	8004400 <memset>
			sprintf( pcWriteBuffer, "%d: ", ( int ) uxParameterNumber );
 800338a:	4b17      	ldr	r3, [pc, #92]	; (80033e8 <prvParameterEchoCommand+0xc0>)
 800338c:	881b      	ldrh	r3, [r3, #0]
 800338e:	461a      	mov	r2, r3
 8003390:	4917      	ldr	r1, [pc, #92]	; (80033f0 <prvParameterEchoCommand+0xc8>)
 8003392:	68f8      	ldr	r0, [r7, #12]
 8003394:	f001 f858 	bl	8004448 <sprintf>
			strncat( pcWriteBuffer, ( char * ) pcParameter, ( size_t ) xParameterStringLength );
 8003398:	8afb      	ldrh	r3, [r7, #22]
 800339a:	461a      	mov	r2, r3
 800339c:	69b9      	ldr	r1, [r7, #24]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f001 f87e 	bl	80044a0 <strncat>
			strncat( pcWriteBuffer, "\r\n", strlen( "\r\n" ) );
 80033a4:	68f8      	ldr	r0, [r7, #12]
 80033a6:	f7fc ff1b 	bl	80001e0 <strlen>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4413      	add	r3, r2
 80033b2:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <prvParameterEchoCommand+0xcc>)
 80033b4:	8811      	ldrh	r1, [r2, #0]
 80033b6:	7892      	ldrb	r2, [r2, #2]
 80033b8:	8019      	strh	r1, [r3, #0]
 80033ba:	709a      	strb	r2, [r3, #2]

			/* There might be more parameters to return after this one. */
			xReturn = pdTRUE;
 80033bc:	2301      	movs	r3, #1
 80033be:	83fb      	strh	r3, [r7, #30]
			uxParameterNumber++;
 80033c0:	4b09      	ldr	r3, [pc, #36]	; (80033e8 <prvParameterEchoCommand+0xc0>)
 80033c2:	881b      	ldrh	r3, [r3, #0]
 80033c4:	3301      	adds	r3, #1
 80033c6:	b29a      	uxth	r2, r3
 80033c8:	4b07      	ldr	r3, [pc, #28]	; (80033e8 <prvParameterEchoCommand+0xc0>)
 80033ca:	801a      	strh	r2, [r3, #0]
 80033cc:	e007      	b.n	80033de <prvParameterEchoCommand+0xb6>
		}
		else
		{
			/* No more parameters were found.  Make sure the write buffer does
			not contain a valid string. */
			pcWriteBuffer[ 0 ] = 0x00;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]

			/* No more data to return. */
			xReturn = pdFALSE;
 80033d4:	2300      	movs	r3, #0
 80033d6:	83fb      	strh	r3, [r7, #30]

			/* Start over the next time this command is executed. */
			uxParameterNumber = 0;
 80033d8:	4b03      	ldr	r3, [pc, #12]	; (80033e8 <prvParameterEchoCommand+0xc0>)
 80033da:	2200      	movs	r2, #0
 80033dc:	801a      	strh	r2, [r3, #0]
		}
	}

	return xReturn;
 80033de:	8bfb      	ldrh	r3, [r7, #30]
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3720      	adds	r7, #32
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bdb0      	pop	{r4, r5, r7, pc}
 80033e8:	200006b8 	.word	0x200006b8
 80033ec:	0800723c 	.word	0x0800723c
 80033f0:	080071bc 	.word	0x080071bc
 80033f4:	08007088 	.word	0x08007088

080033f8 <CLI_Commands_Register>:




void CLI_Commands_Register()
    {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
    FreeRTOS_CLIRegisterCommand(&G28_defination);
 80033fc:	480f      	ldr	r0, [pc, #60]	; (800343c <CLI_Commands_Register+0x44>)
 80033fe:	f000 f831 	bl	8003464 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&G1_defination);
 8003402:	480f      	ldr	r0, [pc, #60]	; (8003440 <CLI_Commands_Register+0x48>)
 8003404:	f000 f82e 	bl	8003464 <FreeRTOS_CLIRegisterCommand>

    FreeRTOS_CLIRegisterCommand(&G0_defination);
 8003408:	480e      	ldr	r0, [pc, #56]	; (8003444 <CLI_Commands_Register+0x4c>)
 800340a:	f000 f82b 	bl	8003464 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&g0_defination);
 800340e:	480e      	ldr	r0, [pc, #56]	; (8003448 <CLI_Commands_Register+0x50>)
 8003410:	f000 f828 	bl	8003464 <FreeRTOS_CLIRegisterCommand>

    FreeRTOS_CLIRegisterCommand(&xParameterEcho);
 8003414:	480d      	ldr	r0, [pc, #52]	; (800344c <CLI_Commands_Register+0x54>)
 8003416:	f000 f825 	bl	8003464 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xThreeParameterEcho);
 800341a:	480d      	ldr	r0, [pc, #52]	; (8003450 <CLI_Commands_Register+0x58>)
 800341c:	f000 f822 	bl	8003464 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&xconfig_defination);
 8003420:	480c      	ldr	r0, [pc, #48]	; (8003454 <CLI_Commands_Register+0x5c>)
 8003422:	f000 f81f 	bl	8003464 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&zconfig_defination);
 8003426:	480c      	ldr	r0, [pc, #48]	; (8003458 <CLI_Commands_Register+0x60>)
 8003428:	f000 f81c 	bl	8003464 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&yconfig_defination);
 800342c:	480b      	ldr	r0, [pc, #44]	; (800345c <CLI_Commands_Register+0x64>)
 800342e:	f000 f819 	bl	8003464 <FreeRTOS_CLIRegisterCommand>
    FreeRTOS_CLIRegisterCommand(&mconfig_defination);
 8003432:	480b      	ldr	r0, [pc, #44]	; (8003460 <CLI_Commands_Register+0x68>)
 8003434:	f000 f816 	bl	8003464 <FreeRTOS_CLIRegisterCommand>

    }
 8003438:	bf00      	nop
 800343a:	bd80      	pop	{r7, pc}
 800343c:	08007434 	.word	0x08007434
 8003440:	08007444 	.word	0x08007444
 8003444:	08007454 	.word	0x08007454
 8003448:	08007464 	.word	0x08007464
 800344c:	080074c4 	.word	0x080074c4
 8003450:	080074b4 	.word	0x080074b4
 8003454:	080074a4 	.word	0x080074a4
 8003458:	08007494 	.word	0x08007494
 800345c:	08007484 	.word	0x08007484
 8003460:	08007474 	.word	0x08007474

08003464 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand(const CLI_Command_Definition_t * const pxCommandToRegister)
    {
 8003464:	b580      	push	{r7, lr}
 8003466:	b084      	sub	sp, #16
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
    static CLI_Definition_List_Item_t *pxLastCommandInList =  &xRegisteredCommands;
    CLI_Definition_List_Item_t *pxNewListItem;
    BaseType_t xReturn = pdFAIL;
 800346c:	2300      	movs	r3, #0
 800346e:	81fb      	strh	r3, [r7, #14]

    /* Check the parameter is not NULL. */

    /* Create a new list item that will reference the command being registered. */
    pxNewListItem = (CLI_Definition_List_Item_t *)malloc(sizeof(CLI_Definition_List_Item_t));
 8003470:	2008      	movs	r0, #8
 8003472:	f000 fdaf 	bl	8003fd4 <malloc>
 8003476:	4603      	mov	r3, r0
 8003478:	60bb      	str	r3, [r7, #8]

    if (pxNewListItem != NULL)
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00e      	beq.n	800349e <FreeRTOS_CLIRegisterCommand+0x3a>
	{
	    {
	    /* Reference the command being registered from the newly created
	     list item. */
	    pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	601a      	str	r2, [r3, #0]

	    /* The new list item will get added to the end of the list, so
	     pxNext has nowhere to point. */
	    pxNewListItem->pxNext = NULL;
 8003486:	68bb      	ldr	r3, [r7, #8]
 8003488:	2200      	movs	r2, #0
 800348a:	605a      	str	r2, [r3, #4]

	    /* Add the newly created list item to the end of the already existing
	     list. */
	    pxLastCommandInList->pxNext = pxNewListItem;
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <FreeRTOS_CLIRegisterCommand+0x44>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	605a      	str	r2, [r3, #4]

	    /* Set the end of list marker to the new list item. */
	    pxLastCommandInList = pxNewListItem;
 8003494:	4a04      	ldr	r2, [pc, #16]	; (80034a8 <FreeRTOS_CLIRegisterCommand+0x44>)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	6013      	str	r3, [r2, #0]
	    }

	xReturn = pdPASS;
 800349a:	2301      	movs	r3, #1
 800349c:	81fb      	strh	r3, [r7, #14]
	}

    return xReturn;
 800349e:	89fb      	ldrh	r3, [r7, #14]
    }
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}
 80034a8:	20000010 	.word	0x20000010

080034ac <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b088      	sub	sp, #32
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 80034b8:	2301      	movs	r3, #1
 80034ba:	83fb      	strh	r3, [r7, #30]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 80034bc:	4b3b      	ldr	r3, [pc, #236]	; (80035ac <FreeRTOS_CLIProcessCommand+0x100>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d141      	bne.n	8003548 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80034c4:	4b39      	ldr	r3, [pc, #228]	; (80035ac <FreeRTOS_CLIProcessCommand+0x100>)
 80034c6:	4a3a      	ldr	r2, [pc, #232]	; (80035b0 <FreeRTOS_CLIProcessCommand+0x104>)
 80034c8:	601a      	str	r2, [r3, #0]
 80034ca:	e037      	b.n	800353c <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 80034cc:	4b37      	ldr	r3, [pc, #220]	; (80035ac <FreeRTOS_CLIProcessCommand+0x100>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 80034d6:	69b8      	ldr	r0, [r7, #24]
 80034d8:	f7fc fe82 	bl	80001e0 <strlen>
 80034dc:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	4413      	add	r3, r2
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d005      	beq.n	80034f6 <FreeRTOS_CLIProcessCommand+0x4a>
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	4413      	add	r3, r2
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d11d      	bne.n	8003532 <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	69b9      	ldr	r1, [r7, #24]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 ffe4 	bl	80044c8 <strncmp>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d115      	bne.n	8003532 <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8003506:	4b29      	ldr	r3, [pc, #164]	; (80035ac <FreeRTOS_CLIProcessCommand+0x100>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003510:	2b00      	cmp	r3, #0
 8003512:	db18      	blt.n	8003546 <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f000 f8e5 	bl	80036e4 <prvGetNumberOfParameters>
 800351a:	4603      	mov	r3, r0
 800351c:	461a      	mov	r2, r3
 800351e:	4b23      	ldr	r3, [pc, #140]	; (80035ac <FreeRTOS_CLIProcessCommand+0x100>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003528:	429a      	cmp	r2, r3
 800352a:	d00c      	beq.n	8003546 <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 800352c:	2300      	movs	r3, #0
 800352e:	83fb      	strh	r3, [r7, #30]
						}
					}

					break;
 8003530:	e009      	b.n	8003546 <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8003532:	4b1e      	ldr	r3, [pc, #120]	; (80035ac <FreeRTOS_CLIProcessCommand+0x100>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4a1c      	ldr	r2, [pc, #112]	; (80035ac <FreeRTOS_CLIProcessCommand+0x100>)
 800353a:	6013      	str	r3, [r2, #0]
 800353c:	4b1b      	ldr	r3, [pc, #108]	; (80035ac <FreeRTOS_CLIProcessCommand+0x100>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1c3      	bne.n	80034cc <FreeRTOS_CLIProcessCommand+0x20>
 8003544:	e000      	b.n	8003548 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 8003546:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8003548:	4b18      	ldr	r3, [pc, #96]	; (80035ac <FreeRTOS_CLIProcessCommand+0x100>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <FreeRTOS_CLIProcessCommand+0xbc>
 8003550:	8bfb      	ldrh	r3, [r7, #30]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d108      	bne.n	8003568 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n", xWriteBufferLen );
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4916      	ldr	r1, [pc, #88]	; (80035b4 <FreeRTOS_CLIProcessCommand+0x108>)
 800355a:	68b8      	ldr	r0, [r7, #8]
 800355c:	f000 ffc6 	bl	80044ec <strncpy>
		pxCommand = NULL;
 8003560:	4b12      	ldr	r3, [pc, #72]	; (80035ac <FreeRTOS_CLIProcessCommand+0x100>)
 8003562:	2200      	movs	r2, #0
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e01b      	b.n	80035a0 <FreeRTOS_CLIProcessCommand+0xf4>
	}
	else if( pxCommand != NULL )
 8003568:	4b10      	ldr	r3, [pc, #64]	; (80035ac <FreeRTOS_CLIProcessCommand+0x100>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d010      	beq.n	8003592 <FreeRTOS_CLIProcessCommand+0xe6>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8003570:	4b0e      	ldr	r3, [pc, #56]	; (80035ac <FreeRTOS_CLIProcessCommand+0x100>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	68b8      	ldr	r0, [r7, #8]
 800357e:	4798      	blx	r3
 8003580:	4603      	mov	r3, r0
 8003582:	83fb      	strh	r3, [r7, #30]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 8003584:	8bfb      	ldrh	r3, [r7, #30]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d10a      	bne.n	80035a0 <FreeRTOS_CLIProcessCommand+0xf4>
		{
			pxCommand = NULL;
 800358a:	4b08      	ldr	r3, [pc, #32]	; (80035ac <FreeRTOS_CLIProcessCommand+0x100>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	e006      	b.n	80035a0 <FreeRTOS_CLIProcessCommand+0xf4>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n", xWriteBufferLen );
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	4908      	ldr	r1, [pc, #32]	; (80035b8 <FreeRTOS_CLIProcessCommand+0x10c>)
 8003596:	68b8      	ldr	r0, [r7, #8]
 8003598:	f000 ffa8 	bl	80044ec <strncpy>
		xReturn = pdFALSE;
 800359c:	2300      	movs	r3, #0
 800359e:	83fb      	strh	r3, [r7, #30]
	}

	return xReturn;
 80035a0:	8bfb      	ldrh	r3, [r7, #30]
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3720      	adds	r7, #32
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	200008bc 	.word	0x200008bc
 80035b0:	20000008 	.word	0x20000008
 80035b4:	080072ec 	.word	0x080072ec
 80035b8:	08007344 	.word	0x08007344

080035bc <FreeRTOS_CLIGetOutputBuffer>:
/*-----------------------------------------------------------*/

char *FreeRTOS_CLIGetOutputBuffer( void )
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
	return cOutputBuffer;
 80035c0:	4b02      	ldr	r3, [pc, #8]	; (80035cc <FreeRTOS_CLIGetOutputBuffer+0x10>)
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr
 80035cc:	200006bc 	.word	0x200006bc

080035d0 <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 80035d0:	b480      	push	{r7}
 80035d2:	b087      	sub	sp, #28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	460b      	mov	r3, r1
 80035da:	607a      	str	r2, [r7, #4]
 80035dc:	817b      	strh	r3, [r7, #10]
UBaseType_t uxParametersFound = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	82fb      	strh	r3, [r7, #22]
const char *pcReturn = NULL;
 80035e2:	2300      	movs	r3, #0
 80035e4:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	801a      	strh	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 80035ec:	e03c      	b.n	8003668 <FreeRTOS_CLIGetParameter+0x98>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3301      	adds	r3, #1
 80035f2:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <FreeRTOS_CLIGetParameter+0x3c>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b20      	cmp	r3, #32
 8003602:	d1f4      	bne.n	80035ee <FreeRTOS_CLIGetParameter+0x1e>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8003604:	e002      	b.n	800360c <FreeRTOS_CLIGetParameter+0x3c>
		{
			pcCommandString++;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	3301      	adds	r3, #1
 800360a:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d003      	beq.n	800361c <FreeRTOS_CLIGetParameter+0x4c>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b20      	cmp	r3, #32
 800361a:	d0f4      	beq.n	8003606 <FreeRTOS_CLIGetParameter+0x36>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d026      	beq.n	8003672 <FreeRTOS_CLIGetParameter+0xa2>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8003624:	8afb      	ldrh	r3, [r7, #22]
 8003626:	3301      	adds	r3, #1
 8003628:	82fb      	strh	r3, [r7, #22]

			if( uxParametersFound == uxWantedParameter )
 800362a:	8afa      	ldrh	r2, [r7, #22]
 800362c:	897b      	ldrh	r3, [r7, #10]
 800362e:	429a      	cmp	r2, r3
 8003630:	d11a      	bne.n	8003668 <FreeRTOS_CLIGetParameter+0x98>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8003636:	e008      	b.n	800364a <FreeRTOS_CLIGetParameter+0x7a>
				{
					( *pxParameterStringLength )++;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	881b      	ldrh	r3, [r3, #0]
 800363c:	3301      	adds	r3, #1
 800363e:	b29a      	uxth	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	801a      	strh	r2, [r3, #0]
					pcCommandString++;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	3301      	adds	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <FreeRTOS_CLIGetParameter+0x8a>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b20      	cmp	r3, #32
 8003658:	d1ee      	bne.n	8003638 <FreeRTOS_CLIGetParameter+0x68>
				}

				if( *pxParameterStringLength == 0 )
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	881b      	ldrh	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <FreeRTOS_CLIGetParameter+0xa6>
				{
					pcReturn = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	613b      	str	r3, [r7, #16]
				}

				break;
 8003666:	e006      	b.n	8003676 <FreeRTOS_CLIGetParameter+0xa6>
	while( uxParametersFound < uxWantedParameter )
 8003668:	8afa      	ldrh	r2, [r7, #22]
 800366a:	897b      	ldrh	r3, [r7, #10]
 800366c:	429a      	cmp	r2, r3
 800366e:	d3c1      	bcc.n	80035f4 <FreeRTOS_CLIGetParameter+0x24>
 8003670:	e002      	b.n	8003678 <FreeRTOS_CLIGetParameter+0xa8>
			}
		}
		else
		{
			break;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <FreeRTOS_CLIGetParameter+0xa8>
				break;
 8003676:	bf00      	nop
		}
	}

	return pcReturn;
 8003678:	693b      	ldr	r3, [r7, #16]
}
 800367a:	4618      	mov	r0, r3
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
	...

08003688 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b086      	sub	sp, #24
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8003694:	4b11      	ldr	r3, [pc, #68]	; (80036dc <prvHelpCommand+0x54>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d102      	bne.n	80036a2 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 800369c:	4b0f      	ldr	r3, [pc, #60]	; (80036dc <prvHelpCommand+0x54>)
 800369e:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <prvHelpCommand+0x58>)
 80036a0:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 80036a2:	4b0e      	ldr	r3, [pc, #56]	; (80036dc <prvHelpCommand+0x54>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	4619      	mov	r1, r3
 80036ae:	68f8      	ldr	r0, [r7, #12]
 80036b0:	f000 ff1c 	bl	80044ec <strncpy>
	pxCommand = pxCommand->pxNext;
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <prvHelpCommand+0x54>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	4a08      	ldr	r2, [pc, #32]	; (80036dc <prvHelpCommand+0x54>)
 80036bc:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 80036be:	4b07      	ldr	r3, [pc, #28]	; (80036dc <prvHelpCommand+0x54>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d102      	bne.n	80036cc <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	82fb      	strh	r3, [r7, #22]
 80036ca:	e001      	b.n	80036d0 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 80036cc:	2301      	movs	r3, #1
 80036ce:	82fb      	strh	r3, [r7, #22]
	}

	return xReturn;
 80036d0:	8afb      	ldrh	r3, [r7, #22]
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	200008c0 	.word	0x200008c0
 80036e0:	20000008 	.word	0x20000008

080036e4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 80036e4:	b480      	push	{r7}
 80036e6:	b085      	sub	sp, #20
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 80036f0:	2300      	movs	r3, #0
 80036f2:	81bb      	strh	r3, [r7, #12]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 80036f4:	e014      	b.n	8003720 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	d10b      	bne.n	8003716 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 80036fe:	89bb      	ldrh	r3, [r7, #12]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d00a      	beq.n	800371a <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8003704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	3301      	adds	r3, #1
 800370c:	b2db      	uxtb	r3, r3
 800370e:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8003710:	2301      	movs	r3, #1
 8003712:	81bb      	strh	r3, [r7, #12]
 8003714:	e001      	b.n	800371a <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8003716:	2300      	movs	r3, #0
 8003718:	81bb      	strh	r3, [r7, #12]
		}

		pcCommandString++;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	3301      	adds	r3, #1
 800371e:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d1e6      	bne.n	80036f6 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8003728:	89bb      	ldrh	r3, [r7, #12]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d105      	bne.n	800373a <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 800372e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003732:	b2db      	uxtb	r3, r3
 8003734:	3b01      	subs	r3, #1
 8003736:	b2db      	uxtb	r3, r3
 8003738:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 800373a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800373e:	4618      	mov	r0, r3
 8003740:	3714      	adds	r7, #20
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
	...

0800374c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003752:	2300      	movs	r3, #0
 8003754:	607b      	str	r3, [r7, #4]
 8003756:	4a0c      	ldr	r2, [pc, #48]	; (8003788 <MX_DMA_Init+0x3c>)
 8003758:	4b0b      	ldr	r3, [pc, #44]	; (8003788 <MX_DMA_Init+0x3c>)
 800375a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003760:	6313      	str	r3, [r2, #48]	; 0x30
 8003762:	4b09      	ldr	r3, [pc, #36]	; (8003788 <MX_DMA_Init+0x3c>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800376a:	607b      	str	r3, [r7, #4]
 800376c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800376e:	2200      	movs	r2, #0
 8003770:	2100      	movs	r1, #0
 8003772:	2010      	movs	r0, #16
 8003774:	f7fd fceb 	bl	800114e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003778:	2010      	movs	r0, #16
 800377a:	f7fd fd04 	bl	8001186 <HAL_NVIC_EnableIRQ>

}
 800377e:	bf00      	nop
 8003780:	3708      	adds	r7, #8
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	40023800 	.word	0x40023800

0800378c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003792:	2300      	movs	r3, #0
 8003794:	60bb      	str	r3, [r7, #8]
 8003796:	4a1f      	ldr	r2, [pc, #124]	; (8003814 <MX_GPIO_Init+0x88>)
 8003798:	4b1e      	ldr	r3, [pc, #120]	; (8003814 <MX_GPIO_Init+0x88>)
 800379a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379c:	f043 0304 	orr.w	r3, r3, #4
 80037a0:	6313      	str	r3, [r2, #48]	; 0x30
 80037a2:	4b1c      	ldr	r3, [pc, #112]	; (8003814 <MX_GPIO_Init+0x88>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	f003 0304 	and.w	r3, r3, #4
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037ae:	2300      	movs	r3, #0
 80037b0:	607b      	str	r3, [r7, #4]
 80037b2:	4a18      	ldr	r2, [pc, #96]	; (8003814 <MX_GPIO_Init+0x88>)
 80037b4:	4b17      	ldr	r3, [pc, #92]	; (8003814 <MX_GPIO_Init+0x88>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	6313      	str	r3, [r2, #48]	; 0x30
 80037be:	4b15      	ldr	r3, [pc, #84]	; (8003814 <MX_GPIO_Init+0x88>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	607b      	str	r3, [r7, #4]
 80037c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80037ca:	2200      	movs	r2, #0
 80037cc:	2120      	movs	r1, #32
 80037ce:	4812      	ldr	r0, [pc, #72]	; (8003818 <MX_GPIO_Init+0x8c>)
 80037d0:	f7fe fa0e 	bl	8001bf0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80037d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80037d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80037da:	4b10      	ldr	r3, [pc, #64]	; (800381c <MX_GPIO_Init+0x90>)
 80037dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80037e2:	f107 030c 	add.w	r3, r7, #12
 80037e6:	4619      	mov	r1, r3
 80037e8:	480d      	ldr	r0, [pc, #52]	; (8003820 <MX_GPIO_Init+0x94>)
 80037ea:	f7fe f87f 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80037ee:	2320      	movs	r3, #32
 80037f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f2:	2301      	movs	r3, #1
 80037f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037fa:	2300      	movs	r3, #0
 80037fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80037fe:	f107 030c 	add.w	r3, r7, #12
 8003802:	4619      	mov	r1, r3
 8003804:	4804      	ldr	r0, [pc, #16]	; (8003818 <MX_GPIO_Init+0x8c>)
 8003806:	f7fe f871 	bl	80018ec <HAL_GPIO_Init>

}
 800380a:	bf00      	nop
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
 8003812:	bf00      	nop
 8003814:	40023800 	.word	0x40023800
 8003818:	40020000 	.word	0x40020000
 800381c:	10210000 	.word	0x10210000
 8003820:	40020800 	.word	0x40020800

08003824 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 0 */


void HAL_SYSTICK_Callback(void)
    {
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
    }
 8003828:	bf00      	nop
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
	...

08003834 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003838:	f7fd fb42 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800383c:	f000 f810 	bl	8003860 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003840:	f7ff ffa4 	bl	800378c <MX_GPIO_Init>
  MX_DMA_Init();
 8003844:	f7ff ff82 	bl	800374c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003848:	f000 fac0 	bl	8003dcc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  Ring_Buffer_Init(&huart2);
 800384c:	4803      	ldr	r0, [pc, #12]	; (800385c <main+0x28>)
 800384e:	f000 f883 	bl	8003958 <Ring_Buffer_Init>

  CLI_Commands_Register();
 8003852:	f7ff fdd1 	bl	80033f8 <CLI_Commands_Register>
	{

	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
        UARTCommandConsoleLoop();
 8003856:	f000 f9fb 	bl	8003c50 <UARTCommandConsoleLoop>
 800385a:	e7fc      	b.n	8003856 <main+0x22>
 800385c:	20000a20 	.word	0x20000a20

08003860 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b094      	sub	sp, #80	; 0x50
 8003864:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003866:	2300      	movs	r3, #0
 8003868:	60bb      	str	r3, [r7, #8]
 800386a:	4a34      	ldr	r2, [pc, #208]	; (800393c <SystemClock_Config+0xdc>)
 800386c:	4b33      	ldr	r3, [pc, #204]	; (800393c <SystemClock_Config+0xdc>)
 800386e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003874:	6413      	str	r3, [r2, #64]	; 0x40
 8003876:	4b31      	ldr	r3, [pc, #196]	; (800393c <SystemClock_Config+0xdc>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	4a2e      	ldr	r2, [pc, #184]	; (8003940 <SystemClock_Config+0xe0>)
 8003888:	4b2d      	ldr	r3, [pc, #180]	; (8003940 <SystemClock_Config+0xe0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003890:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003894:	6013      	str	r3, [r2, #0]
 8003896:	4b2a      	ldr	r3, [pc, #168]	; (8003940 <SystemClock_Config+0xe0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800389e:	607b      	str	r3, [r7, #4]
 80038a0:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80038a2:	2302      	movs	r3, #2
 80038a4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80038a6:	2301      	movs	r3, #1
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 80038aa:	2310      	movs	r3, #16
 80038ac:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038ae:	2302      	movs	r3, #2
 80038b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80038b2:	2300      	movs	r3, #0
 80038b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80038b6:	2308      	movs	r3, #8
 80038b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80038ba:	2354      	movs	r3, #84	; 0x54
 80038bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038be:	2302      	movs	r3, #2
 80038c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80038c2:	2307      	movs	r3, #7
 80038c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038c6:	f107 0320 	add.w	r3, r7, #32
 80038ca:	4618      	mov	r0, r3
 80038cc:	f7fe f9aa 	bl	8001c24 <HAL_RCC_OscConfig>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d003      	beq.n	80038de <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038d6:	21a4      	movs	r1, #164	; 0xa4
 80038d8:	481a      	ldr	r0, [pc, #104]	; (8003944 <SystemClock_Config+0xe4>)
 80038da:	f000 f837 	bl	800394c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038de:	230f      	movs	r3, #15
 80038e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038e2:	2302      	movs	r3, #2
 80038e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80038ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80038f0:	2300      	movs	r3, #0
 80038f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80038f4:	f107 030c 	add.w	r3, r7, #12
 80038f8:	2102      	movs	r1, #2
 80038fa:	4618      	mov	r0, r3
 80038fc:	f7fe fbd4 	bl	80020a8 <HAL_RCC_ClockConfig>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <SystemClock_Config+0xae>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003906:	21b2      	movs	r1, #178	; 0xb2
 8003908:	480e      	ldr	r0, [pc, #56]	; (8003944 <SystemClock_Config+0xe4>)
 800390a:	f000 f81f 	bl	800394c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 800390e:	f7fe fd85 	bl	800241c <HAL_RCC_GetHCLKFreq>
 8003912:	4602      	mov	r2, r0
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <SystemClock_Config+0xe8>)
 8003916:	fba3 2302 	umull	r2, r3, r3, r2
 800391a:	099b      	lsrs	r3, r3, #6
 800391c:	4618      	mov	r0, r3
 800391e:	f7fd fc40 	bl	80011a2 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003922:	2004      	movs	r0, #4
 8003924:	f7fd fc4a 	bl	80011bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003928:	2200      	movs	r2, #0
 800392a:	2100      	movs	r1, #0
 800392c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003930:	f7fd fc0d 	bl	800114e <HAL_NVIC_SetPriority>
}
 8003934:	bf00      	nop
 8003936:	3750      	adds	r7, #80	; 0x50
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	40007000 	.word	0x40007000
 8003944:	08007394 	.word	0x08007394
 8003948:	10624dd3 	.word	0x10624dd3

0800394c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8003956:	e7fe      	b.n	8003956 <_Error_Handler+0xa>

08003958 <Ring_Buffer_Init>:
static uint32_t Read_PTR;

#define WRITE_PTR (uint32_t)( BUFFER_SIZE - (huart->hdmarx->Instance->NDTR))

void Ring_Buffer_Init(UART_HandleTypeDef *_huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b082      	sub	sp, #8
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
	huart = _huart;
 8003960:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <Ring_Buffer_Init+0x38>)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6013      	str	r3, [r2, #0]
	huart->hdmarx->Instance->NDTR = BUFFER_SIZE;
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <Ring_Buffer_Init+0x38>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2240      	movs	r2, #64	; 0x40
 8003970:	605a      	str	r2, [r3, #4]
	Read_PTR = 0;
 8003972:	4b08      	ldr	r3, [pc, #32]	; (8003994 <Ring_Buffer_Init+0x3c>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(huart, RX_DMA_Buffer, BUFFER_SIZE);
 8003978:	4b05      	ldr	r3, [pc, #20]	; (8003990 <Ring_Buffer_Init+0x38>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2240      	movs	r2, #64	; 0x40
 800397e:	4906      	ldr	r1, [pc, #24]	; (8003998 <Ring_Buffer_Init+0x40>)
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe fdcd 	bl	8002520 <HAL_UART_Receive_DMA>

}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000904 	.word	0x20000904
 8003994:	20000908 	.word	0x20000908
 8003998:	200008c4 	.word	0x200008c4

0800399c <Ring_Buffer_Get_Char>:

	return (Read_PTR == WRITE_PTR)?1:0;
}

uint8_t Ring_Buffer_Get_Char(uint8_t* data)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
	if (WRITE_PTR == Read_PTR)
 80039a4:	4b12      	ldr	r3, [pc, #72]	; (80039f0 <Ring_Buffer_Get_Char+0x54>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80039b2:	4b10      	ldr	r3, [pc, #64]	; (80039f4 <Ring_Buffer_Get_Char+0x58>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d101      	bne.n	80039be <Ring_Buffer_Get_Char+0x22>
	{
		return 0;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e012      	b.n	80039e4 <Ring_Buffer_Get_Char+0x48>
	}
	else
	{
		*data = RX_DMA_Buffer[Read_PTR];
 80039be:	4b0d      	ldr	r3, [pc, #52]	; (80039f4 <Ring_Buffer_Get_Char+0x58>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a0d      	ldr	r2, [pc, #52]	; (80039f8 <Ring_Buffer_Get_Char+0x5c>)
 80039c4:	5cd2      	ldrb	r2, [r2, r3]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	701a      	strb	r2, [r3, #0]

		Read_PTR++;
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <Ring_Buffer_Get_Char+0x58>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3301      	adds	r3, #1
 80039d0:	4a08      	ldr	r2, [pc, #32]	; (80039f4 <Ring_Buffer_Get_Char+0x58>)
 80039d2:	6013      	str	r3, [r2, #0]

		if (Read_PTR == BUFFER_SIZE)
 80039d4:	4b07      	ldr	r3, [pc, #28]	; (80039f4 <Ring_Buffer_Get_Char+0x58>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2b40      	cmp	r3, #64	; 0x40
 80039da:	d102      	bne.n	80039e2 <Ring_Buffer_Get_Char+0x46>
		{
			Read_PTR = 0;
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <Ring_Buffer_Get_Char+0x58>)
 80039de:	2200      	movs	r2, #0
 80039e0:	601a      	str	r2, [r3, #0]
		}

		return 1;
 80039e2:	2301      	movs	r3, #1
	}
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	20000904 	.word	0x20000904
 80039f4:	20000908 	.word	0x20000908
 80039f8:	200008c4 	.word	0x200008c4

080039fc <Ring_Buffer_Get_Count>:

uint8_t Ring_Buffer_Get_Count(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
	if (WRITE_PTR >= Read_PTR)
 8003a00:	4b17      	ldr	r3, [pc, #92]	; (8003a60 <Ring_Buffer_Get_Count+0x64>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8003a0e:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <Ring_Buffer_Get_Count+0x68>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	d30f      	bcc.n	8003a36 <Ring_Buffer_Get_Count+0x3a>
	{
		return (WRITE_PTR - Read_PTR);
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <Ring_Buffer_Get_Count+0x64>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	425b      	negs	r3, r3
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	4b0f      	ldr	r3, [pc, #60]	; (8003a64 <Ring_Buffer_Get_Count+0x68>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	3340      	adds	r3, #64	; 0x40
 8003a32:	b2db      	uxtb	r3, r3
 8003a34:	e00e      	b.n	8003a54 <Ring_Buffer_Get_Count+0x58>
	}
	return (BUFFER_SIZE - (Read_PTR - WRITE_PTR));
 8003a36:	4b0a      	ldr	r3, [pc, #40]	; (8003a60 <Ring_Buffer_Get_Count+0x64>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	4b08      	ldr	r3, [pc, #32]	; (8003a64 <Ring_Buffer_Get_Count+0x68>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	4413      	add	r3, r2
 8003a4a:	b2da      	uxtb	r2, r3
 8003a4c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	b2db      	uxtb	r3, r3
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	46bd      	mov	sp, r7
 8003a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	20000904 	.word	0x20000904
 8003a64:	20000908 	.word	0x20000908

08003a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b082      	sub	sp, #8
 8003a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a6e:	2300      	movs	r3, #0
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	4a25      	ldr	r2, [pc, #148]	; (8003b08 <HAL_MspInit+0xa0>)
 8003a74:	4b24      	ldr	r3, [pc, #144]	; (8003b08 <HAL_MspInit+0xa0>)
 8003a76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a7c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <HAL_MspInit+0xa0>)
 8003a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a86:	607b      	str	r3, [r7, #4]
 8003a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	603b      	str	r3, [r7, #0]
 8003a8e:	4a1e      	ldr	r2, [pc, #120]	; (8003b08 <HAL_MspInit+0xa0>)
 8003a90:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <HAL_MspInit+0xa0>)
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a98:	6413      	str	r3, [r2, #64]	; 0x40
 8003a9a:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_MspInit+0xa0>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003aa6:	2007      	movs	r0, #7
 8003aa8:	f7fd fb46 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003aac:	2200      	movs	r2, #0
 8003aae:	2100      	movs	r1, #0
 8003ab0:	f06f 000b 	mvn.w	r0, #11
 8003ab4:	f7fd fb4b 	bl	800114e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003ab8:	2200      	movs	r2, #0
 8003aba:	2100      	movs	r1, #0
 8003abc:	f06f 000a 	mvn.w	r0, #10
 8003ac0:	f7fd fb45 	bl	800114e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	f06f 0009 	mvn.w	r0, #9
 8003acc:	f7fd fb3f 	bl	800114e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	2100      	movs	r1, #0
 8003ad4:	f06f 0004 	mvn.w	r0, #4
 8003ad8:	f7fd fb39 	bl	800114e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003adc:	2200      	movs	r2, #0
 8003ade:	2100      	movs	r1, #0
 8003ae0:	f06f 0003 	mvn.w	r0, #3
 8003ae4:	f7fd fb33 	bl	800114e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003ae8:	2200      	movs	r2, #0
 8003aea:	2100      	movs	r1, #0
 8003aec:	f06f 0001 	mvn.w	r0, #1
 8003af0:	f7fd fb2d 	bl	800114e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003af4:	2200      	movs	r2, #0
 8003af6:	2100      	movs	r1, #0
 8003af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003afc:	f7fd fb27 	bl	800114e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b00:	bf00      	nop
 8003b02:	3708      	adds	r7, #8
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	40023800 	.word	0x40023800

08003b0c <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003b10:	bf00      	nop
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr

08003b1a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003b1a:	b480      	push	{r7}
 8003b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b1e:	e7fe      	b.n	8003b1e <HardFault_Handler+0x4>

08003b20 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b24:	e7fe      	b.n	8003b24 <MemManage_Handler+0x4>

08003b26 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003b26:	b480      	push	{r7}
 8003b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b2a:	e7fe      	b.n	8003b2a <BusFault_Handler+0x4>

08003b2c <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b30:	e7fe      	b.n	8003b30 <UsageFault_Handler+0x4>

08003b32 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 8003b32:	b480      	push	{r7}
 8003b34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b36:	bf00      	nop
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b44:	bf00      	nop
 8003b46:	46bd      	mov	sp, r7
 8003b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4c:	4770      	bx	lr

08003b4e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b60:	f7fd fa00 	bl	8000f64 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003b64:	f7fd fb46 	bl	80011f4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b68:	bf00      	nop
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <DMA1_Stream5_IRQHandler>:

/**
* @brief This function handles DMA1 stream5 global interrupt.
*/
void DMA1_Stream5_IRQHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003b70:	4802      	ldr	r0, [pc, #8]	; (8003b7c <DMA1_Stream5_IRQHandler+0x10>)
 8003b72:	f7fd fc53 	bl	800141c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200009c0 	.word	0x200009c0

08003b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b84:	4a16      	ldr	r2, [pc, #88]	; (8003be0 <SystemInit+0x60>)
 8003b86:	4b16      	ldr	r3, [pc, #88]	; (8003be0 <SystemInit+0x60>)
 8003b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003b94:	4a13      	ldr	r2, [pc, #76]	; (8003be4 <SystemInit+0x64>)
 8003b96:	4b13      	ldr	r3, [pc, #76]	; (8003be4 <SystemInit+0x64>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f043 0301 	orr.w	r3, r3, #1
 8003b9e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003ba0:	4b10      	ldr	r3, [pc, #64]	; (8003be4 <SystemInit+0x64>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003ba6:	4a0f      	ldr	r2, [pc, #60]	; (8003be4 <SystemInit+0x64>)
 8003ba8:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <SystemInit+0x64>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003bb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bb4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003bb6:	4b0b      	ldr	r3, [pc, #44]	; (8003be4 <SystemInit+0x64>)
 8003bb8:	4a0b      	ldr	r2, [pc, #44]	; (8003be8 <SystemInit+0x68>)
 8003bba:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003bbc:	4a09      	ldr	r2, [pc, #36]	; (8003be4 <SystemInit+0x64>)
 8003bbe:	4b09      	ldr	r3, [pc, #36]	; (8003be4 <SystemInit+0x64>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bc6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003bc8:	4b06      	ldr	r3, [pc, #24]	; (8003be4 <SystemInit+0x64>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003bce:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <SystemInit+0x60>)
 8003bd0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003bd4:	609a      	str	r2, [r3, #8]
#endif
}
 8003bd6:	bf00      	nop
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000ed00 	.word	0xe000ed00
 8003be4:	40023800 	.word	0x40023800
 8003be8:	24003010 	.word	0x24003010

08003bec <xSerialPutChar>:
/* DEL acts as a backspace. */
#define cmdASCII_DEL		( 0x7F )


void xSerialPutChar(UART_HandleTypeDef *huart, uint8_t pData)
    {
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	6078      	str	r0, [r7, #4]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	70fb      	strb	r3, [r7, #3]
    huart->Instance->DR = (pData);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	78fa      	ldrb	r2, [r7, #3]
 8003bfe:	605a      	str	r2, [r3, #4]
    while (__HAL_UART_GET_FLAG(huart,UART_FLAG_TC) == 0);
 8003c00:	bf00      	nop
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c0c:	2b40      	cmp	r3, #64	; 0x40
 8003c0e:	d1f8      	bne.n	8003c02 <xSerialPutChar+0x16>
    }
 8003c10:	bf00      	nop
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <vSerialPutString>:

void vSerialPutString(UART_HandleTypeDef *huart, uint8_t* pData, uint16_t Size)
    {
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	4613      	mov	r3, r2
 8003c28:	80fb      	strh	r3, [r7, #6]
    while (Size--)
 8003c2a:	e007      	b.n	8003c3c <vSerialPutString+0x20>
	{
	xSerialPutChar(huart, *pData++);
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	1c5a      	adds	r2, r3, #1
 8003c30:	60ba      	str	r2, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	4619      	mov	r1, r3
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f7ff ffd8 	bl	8003bec <xSerialPutChar>
    while (Size--)
 8003c3c:	88fb      	ldrh	r3, [r7, #6]
 8003c3e:	1e5a      	subs	r2, r3, #1
 8003c40:	80fa      	strh	r2, [r7, #6]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1f2      	bne.n	8003c2c <vSerialPutString+0x10>
	}
    }
 8003c46:	bf00      	nop
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <UARTCommandConsoleLoop>:

void UARTCommandConsoleLoop()
    {
 8003c50:	b598      	push	{r3, r4, r7, lr}
 8003c52:	af00      	add	r7, sp, #0
     exclusion on this buffer as it is assumed only one command console interface
     will be used at any one time. */

    /* Send the welcome message. */
    static uint8_t first_flag = 0;
    if (first_flag == 0)
 8003c54:	4b52      	ldr	r3, [pc, #328]	; (8003da0 <UARTCommandConsoleLoop+0x150>)
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d115      	bne.n	8003c88 <UARTCommandConsoleLoop+0x38>
	{
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 8003c5c:	f7ff fcae 	bl	80035bc <FreeRTOS_CLIGetOutputBuffer>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b50      	ldr	r3, [pc, #320]	; (8003da4 <UARTCommandConsoleLoop+0x154>)
 8003c64:	601a      	str	r2, [r3, #0]
	first_flag = 1;
 8003c66:	4b4e      	ldr	r3, [pc, #312]	; (8003da0 <UARTCommandConsoleLoop+0x150>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	701a      	strb	r2, [r3, #0]
	vSerialPutString(&huart2, (uint8_t* ) pcWelcomeMessage, (unsigned short ) strlen(pcWelcomeMessage));
 8003c6c:	4b4e      	ldr	r3, [pc, #312]	; (8003da8 <UARTCommandConsoleLoop+0x158>)
 8003c6e:	681c      	ldr	r4, [r3, #0]
 8003c70:	4b4d      	ldr	r3, [pc, #308]	; (8003da8 <UARTCommandConsoleLoop+0x158>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4618      	mov	r0, r3
 8003c76:	f7fc fab3 	bl	80001e0 <strlen>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4621      	mov	r1, r4
 8003c82:	484a      	ldr	r0, [pc, #296]	; (8003dac <UARTCommandConsoleLoop+0x15c>)
 8003c84:	f7ff ffca 	bl	8003c1c <vSerialPutString>
	}

    if (Ring_Buffer_Get_Count() > 0)
 8003c88:	f7ff feb8 	bl	80039fc <Ring_Buffer_Get_Count>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	f000 8084 	beq.w	8003d9c <UARTCommandConsoleLoop+0x14c>
	{
	Ring_Buffer_Get_Char(&cRxedChar);
 8003c94:	4846      	ldr	r0, [pc, #280]	; (8003db0 <UARTCommandConsoleLoop+0x160>)
 8003c96:	f7ff fe81 	bl	800399c <Ring_Buffer_Get_Char>
	/* Echo the character back. */
	   //xSerialPutChar(&huart2, cRxedChar);
	/* Was it the end of the line? */
	if (cRxedChar == '\n')
 8003c9a:	4b45      	ldr	r3, [pc, #276]	; (8003db0 <UARTCommandConsoleLoop+0x160>)
 8003c9c:	781b      	ldrb	r3, [r3, #0]
 8003c9e:	2b0a      	cmp	r3, #10
 8003ca0:	d145      	bne.n	8003d2e <UARTCommandConsoleLoop+0xde>
	    {

	    millis1 = HAL_GetTick(); //time stamp
 8003ca2:	f7fd f973 	bl	8000f8c <HAL_GetTick>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	4b42      	ldr	r3, [pc, #264]	; (8003db4 <UARTCommandConsoleLoop+0x164>)
 8003caa:	601a      	str	r2, [r3, #0]
	    /* Just to space the output from the input. */
	    //vSerialPutString(&huart2, (uint8_t * ) pcNewLine, (unsigned short ) strlen(pcNewLine));
	    /* See if the command is empty, indicating that the last command
	     is to be executed again. */
	    if (ucInputIndex == 0)
 8003cac:	4b42      	ldr	r3, [pc, #264]	; (8003db8 <UARTCommandConsoleLoop+0x168>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d103      	bne.n	8003cbc <UARTCommandConsoleLoop+0x6c>
		{
		/* Copy the last command back into the input string. */
		strcpy(cInputString, cLastInputString);
 8003cb4:	4941      	ldr	r1, [pc, #260]	; (8003dbc <UARTCommandConsoleLoop+0x16c>)
 8003cb6:	4842      	ldr	r0, [pc, #264]	; (8003dc0 <UARTCommandConsoleLoop+0x170>)
 8003cb8:	f000 fbea 	bl	8004490 <strcpy>
	     pdFALSE	(indicating there is no more output) as it might
	     generate more than one string. */
	    do
		{
		/* Get the next output string from the command interpreter. */
		xReturned = FreeRTOS_CLIProcessCommand(cInputString,
 8003cbc:	4b39      	ldr	r3, [pc, #228]	; (8003da4 <UARTCommandConsoleLoop+0x154>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	483e      	ldr	r0, [pc, #248]	; (8003dc0 <UARTCommandConsoleLoop+0x170>)
 8003cc8:	f7ff fbf0 	bl	80034ac <FreeRTOS_CLIProcessCommand>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4b3c      	ldr	r3, [pc, #240]	; (8003dc4 <UARTCommandConsoleLoop+0x174>)
 8003cd2:	801a      	strh	r2, [r3, #0]
			pcOutputString, configCOMMAND_INT_MAX_OUTPUT_SIZE);

		/* Write the generated string to the UART. */
		   vSerialPutString(&huart2, (uint8_t *) pcOutputString,(unsigned short) strlen(pcOutputString));
 8003cd4:	4b33      	ldr	r3, [pc, #204]	; (8003da4 <UARTCommandConsoleLoop+0x154>)
 8003cd6:	681c      	ldr	r4, [r3, #0]
 8003cd8:	4b32      	ldr	r3, [pc, #200]	; (8003da4 <UARTCommandConsoleLoop+0x154>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f7fc fa7f 	bl	80001e0 <strlen>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4621      	mov	r1, r4
 8003cea:	4830      	ldr	r0, [pc, #192]	; (8003dac <UARTCommandConsoleLoop+0x15c>)
 8003cec:	f7ff ff96 	bl	8003c1c <vSerialPutString>

		}
	    while (xReturned != pdFALSE);
 8003cf0:	4b34      	ldr	r3, [pc, #208]	; (8003dc4 <UARTCommandConsoleLoop+0x174>)
 8003cf2:	881b      	ldrh	r3, [r3, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e1      	bne.n	8003cbc <UARTCommandConsoleLoop+0x6c>

	    /* All the strings generated by the input command have been
	     sent.  Clear the input string ready to receive the next command.
	     Remember the command that was just processed first in case it is
	     to be processed again. */
	    strcpy(cLastInputString, cInputString);
 8003cf8:	4931      	ldr	r1, [pc, #196]	; (8003dc0 <UARTCommandConsoleLoop+0x170>)
 8003cfa:	4830      	ldr	r0, [pc, #192]	; (8003dbc <UARTCommandConsoleLoop+0x16c>)
 8003cfc:	f000 fbc8 	bl	8004490 <strcpy>
	    ucInputIndex = 0;
 8003d00:	4b2d      	ldr	r3, [pc, #180]	; (8003db8 <UARTCommandConsoleLoop+0x168>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	701a      	strb	r2, [r3, #0]
	    memset(cInputString, 0x00, cmdMAX_INPUT_SIZE);
 8003d06:	2232      	movs	r2, #50	; 0x32
 8003d08:	2100      	movs	r1, #0
 8003d0a:	482d      	ldr	r0, [pc, #180]	; (8003dc0 <UARTCommandConsoleLoop+0x170>)
 8003d0c:	f000 fb78 	bl	8004400 <memset>

	          vSerialPutString(&huart2, (uint8_t *) pcEndOfOutputMessage, (unsigned short) strlen(pcEndOfOutputMessage));
 8003d10:	4b2d      	ldr	r3, [pc, #180]	; (8003dc8 <UARTCommandConsoleLoop+0x178>)
 8003d12:	681c      	ldr	r4, [r3, #0]
 8003d14:	4b2c      	ldr	r3, [pc, #176]	; (8003dc8 <UARTCommandConsoleLoop+0x178>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fc fa61 	bl	80001e0 <strlen>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	4621      	mov	r1, r4
 8003d26:	4821      	ldr	r0, [pc, #132]	; (8003dac <UARTCommandConsoleLoop+0x15c>)
 8003d28:	f7ff ff78 	bl	8003c1c <vSerialPutString>
		    }
		}
	    }

	}
    }
 8003d2c:	e036      	b.n	8003d9c <UARTCommandConsoleLoop+0x14c>
	    if (cRxedChar == '\r')
 8003d2e:	4b20      	ldr	r3, [pc, #128]	; (8003db0 <UARTCommandConsoleLoop+0x160>)
 8003d30:	781b      	ldrb	r3, [r3, #0]
 8003d32:	2b0d      	cmp	r3, #13
 8003d34:	d032      	beq.n	8003d9c <UARTCommandConsoleLoop+0x14c>
	    else if ((cRxedChar == '\b') || (cRxedChar == cmdASCII_DEL))
 8003d36:	4b1e      	ldr	r3, [pc, #120]	; (8003db0 <UARTCommandConsoleLoop+0x160>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b08      	cmp	r3, #8
 8003d3c:	d003      	beq.n	8003d46 <UARTCommandConsoleLoop+0xf6>
 8003d3e:	4b1c      	ldr	r3, [pc, #112]	; (8003db0 <UARTCommandConsoleLoop+0x160>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b7f      	cmp	r3, #127	; 0x7f
 8003d44:	d110      	bne.n	8003d68 <UARTCommandConsoleLoop+0x118>
		if (ucInputIndex > 0)
 8003d46:	4b1c      	ldr	r3, [pc, #112]	; (8003db8 <UARTCommandConsoleLoop+0x168>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d026      	beq.n	8003d9c <UARTCommandConsoleLoop+0x14c>
		    ucInputIndex--;
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <UARTCommandConsoleLoop+0x168>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <UARTCommandConsoleLoop+0x168>)
 8003d58:	701a      	strb	r2, [r3, #0]
		    cInputString[ucInputIndex] = '\0';
 8003d5a:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <UARTCommandConsoleLoop+0x168>)
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	461a      	mov	r2, r3
 8003d60:	4b17      	ldr	r3, [pc, #92]	; (8003dc0 <UARTCommandConsoleLoop+0x170>)
 8003d62:	2100      	movs	r1, #0
 8003d64:	5499      	strb	r1, [r3, r2]
		if (ucInputIndex > 0)
 8003d66:	e019      	b.n	8003d9c <UARTCommandConsoleLoop+0x14c>
		if ((cRxedChar >= ' ') && (cRxedChar <= '~'))
 8003d68:	4b11      	ldr	r3, [pc, #68]	; (8003db0 <UARTCommandConsoleLoop+0x160>)
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	2b1f      	cmp	r3, #31
 8003d6e:	d915      	bls.n	8003d9c <UARTCommandConsoleLoop+0x14c>
 8003d70:	4b0f      	ldr	r3, [pc, #60]	; (8003db0 <UARTCommandConsoleLoop+0x160>)
 8003d72:	781b      	ldrb	r3, [r3, #0]
 8003d74:	2b7e      	cmp	r3, #126	; 0x7e
 8003d76:	d811      	bhi.n	8003d9c <UARTCommandConsoleLoop+0x14c>
		    if (ucInputIndex < cmdMAX_INPUT_SIZE)
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <UARTCommandConsoleLoop+0x168>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b31      	cmp	r3, #49	; 0x31
 8003d7e:	d80d      	bhi.n	8003d9c <UARTCommandConsoleLoop+0x14c>
			cInputString[ucInputIndex] = cRxedChar;
 8003d80:	4b0d      	ldr	r3, [pc, #52]	; (8003db8 <UARTCommandConsoleLoop+0x168>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	461a      	mov	r2, r3
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <UARTCommandConsoleLoop+0x160>)
 8003d88:	7819      	ldrb	r1, [r3, #0]
 8003d8a:	4b0d      	ldr	r3, [pc, #52]	; (8003dc0 <UARTCommandConsoleLoop+0x170>)
 8003d8c:	5499      	strb	r1, [r3, r2]
			ucInputIndex++;
 8003d8e:	4b0a      	ldr	r3, [pc, #40]	; (8003db8 <UARTCommandConsoleLoop+0x168>)
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	3301      	adds	r3, #1
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	4b08      	ldr	r3, [pc, #32]	; (8003db8 <UARTCommandConsoleLoop+0x168>)
 8003d98:	701a      	strb	r2, [r3, #0]
    }
 8003d9a:	e7ff      	b.n	8003d9c <UARTCommandConsoleLoop+0x14c>
 8003d9c:	bf00      	nop
 8003d9e:	bd98      	pop	{r3, r4, r7, pc}
 8003da0:	20000910 	.word	0x20000910
 8003da4:	20000914 	.word	0x20000914
 8003da8:	20000018 	.word	0x20000018
 8003dac:	20000a20 	.word	0x20000a20
 8003db0:	20000918 	.word	0x20000918
 8003db4:	2000090c 	.word	0x2000090c
 8003db8:	20000919 	.word	0x20000919
 8003dbc:	20000950 	.word	0x20000950
 8003dc0:	2000091c 	.word	0x2000091c
 8003dc4:	20000982 	.word	0x20000982
 8003dc8:	2000001c 	.word	0x2000001c

08003dcc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003dd0:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <MX_USART2_UART_Init+0x50>)
 8003dd2:	4a13      	ldr	r2, [pc, #76]	; (8003e20 <MX_USART2_UART_Init+0x54>)
 8003dd4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003dd6:	4b11      	ldr	r3, [pc, #68]	; (8003e1c <MX_USART2_UART_Init+0x50>)
 8003dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003ddc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003dde:	4b0f      	ldr	r3, [pc, #60]	; (8003e1c <MX_USART2_UART_Init+0x50>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003de4:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <MX_USART2_UART_Init+0x50>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003dea:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <MX_USART2_UART_Init+0x50>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003df0:	4b0a      	ldr	r3, [pc, #40]	; (8003e1c <MX_USART2_UART_Init+0x50>)
 8003df2:	220c      	movs	r2, #12
 8003df4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003df6:	4b09      	ldr	r3, [pc, #36]	; (8003e1c <MX_USART2_UART_Init+0x50>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dfc:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <MX_USART2_UART_Init+0x50>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003e02:	4806      	ldr	r0, [pc, #24]	; (8003e1c <MX_USART2_UART_Init+0x50>)
 8003e04:	f7fe fb3e 	bl	8002484 <HAL_UART_Init>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003e0e:	2144      	movs	r1, #68	; 0x44
 8003e10:	4804      	ldr	r0, [pc, #16]	; (8003e24 <MX_USART2_UART_Init+0x58>)
 8003e12:	f7ff fd9b 	bl	800394c <_Error_Handler>
  }

}
 8003e16:	bf00      	nop
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	bf00      	nop
 8003e1c:	20000a20 	.word	0x20000a20
 8003e20:	40004400 	.word	0x40004400
 8003e24:	0800741c 	.word	0x0800741c

08003e28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b088      	sub	sp, #32
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2b      	ldr	r2, [pc, #172]	; (8003ee4 <HAL_UART_MspInit+0xbc>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d14f      	bne.n	8003eda <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60bb      	str	r3, [r7, #8]
 8003e3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ee8 <HAL_UART_MspInit+0xc0>)
 8003e40:	4b29      	ldr	r3, [pc, #164]	; (8003ee8 <HAL_UART_MspInit+0xc0>)
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e48:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4a:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <HAL_UART_MspInit+0xc0>)
 8003e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003e56:	230c      	movs	r3, #12
 8003e58:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e66:	2307      	movs	r3, #7
 8003e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e6a:	f107 030c 	add.w	r3, r7, #12
 8003e6e:	4619      	mov	r1, r3
 8003e70:	481e      	ldr	r0, [pc, #120]	; (8003eec <HAL_UART_MspInit+0xc4>)
 8003e72:	f7fd fd3b 	bl	80018ec <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003e76:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <HAL_UART_MspInit+0xc8>)
 8003e78:	4a1e      	ldr	r2, [pc, #120]	; (8003ef4 <HAL_UART_MspInit+0xcc>)
 8003e7a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003e7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <HAL_UART_MspInit+0xc8>)
 8003e7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003e82:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e84:	4b1a      	ldr	r3, [pc, #104]	; (8003ef0 <HAL_UART_MspInit+0xc8>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e8a:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_UART_MspInit+0xc8>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e90:	4b17      	ldr	r3, [pc, #92]	; (8003ef0 <HAL_UART_MspInit+0xc8>)
 8003e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e96:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e98:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <HAL_UART_MspInit+0xc8>)
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e9e:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <HAL_UART_MspInit+0xc8>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003ea4:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <HAL_UART_MspInit+0xc8>)
 8003ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003eaa:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_UART_MspInit+0xc8>)
 8003eae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003eb2:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003eb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <HAL_UART_MspInit+0xc8>)
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003eba:	480d      	ldr	r0, [pc, #52]	; (8003ef0 <HAL_UART_MspInit+0xc8>)
 8003ebc:	f7fd f9a0 	bl	8001200 <HAL_DMA_Init>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d003      	beq.n	8003ece <HAL_UART_MspInit+0xa6>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003ec6:	216e      	movs	r1, #110	; 0x6e
 8003ec8:	480b      	ldr	r0, [pc, #44]	; (8003ef8 <HAL_UART_MspInit+0xd0>)
 8003eca:	f7ff fd3f 	bl	800394c <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a07      	ldr	r2, [pc, #28]	; (8003ef0 <HAL_UART_MspInit+0xc8>)
 8003ed2:	635a      	str	r2, [r3, #52]	; 0x34
 8003ed4:	4a06      	ldr	r2, [pc, #24]	; (8003ef0 <HAL_UART_MspInit+0xc8>)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003eda:	bf00      	nop
 8003edc:	3720      	adds	r7, #32
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	40004400 	.word	0x40004400
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40020000 	.word	0x40020000
 8003ef0:	200009c0 	.word	0x200009c0
 8003ef4:	40026088 	.word	0x40026088
 8003ef8:	0800741c 	.word	0x0800741c

08003efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f34 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003f00:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003f02:	e003      	b.n	8003f0c <LoopCopyDataInit>

08003f04 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003f04:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003f06:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003f08:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003f0a:	3104      	adds	r1, #4

08003f0c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003f0c:	480b      	ldr	r0, [pc, #44]	; (8003f3c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003f0e:	4b0c      	ldr	r3, [pc, #48]	; (8003f40 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003f10:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003f12:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003f14:	d3f6      	bcc.n	8003f04 <CopyDataInit>
  ldr  r2, =_sbss
 8003f16:	4a0b      	ldr	r2, [pc, #44]	; (8003f44 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003f18:	e002      	b.n	8003f20 <LoopFillZerobss>

08003f1a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003f1a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003f1c:	f842 3b04 	str.w	r3, [r2], #4

08003f20 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003f22:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003f24:	d3f9      	bcc.n	8003f1a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003f26:	f7ff fe2b 	bl	8003b80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003f2a:	f000 f815 	bl	8003f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f2e:	f7ff fc81 	bl	8003834 <main>
  bx  lr    
 8003f32:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f34:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8003f38:	080077a0 	.word	0x080077a0
  ldr  r0, =_sdata
 8003f3c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003f40:	20000690 	.word	0x20000690
  ldr  r2, =_sbss
 8003f44:	20000690 	.word	0x20000690
  ldr  r3, = _ebss
 8003f48:	20000a70 	.word	0x20000a70

08003f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f4c:	e7fe      	b.n	8003f4c <ADC_IRQHandler>

08003f4e <atoi>:
 8003f4e:	220a      	movs	r2, #10
 8003f50:	2100      	movs	r1, #0
 8003f52:	f000 bb61 	b.w	8004618 <strtol>
	...

08003f58 <__libc_init_array>:
 8003f58:	b570      	push	{r4, r5, r6, lr}
 8003f5a:	4e0d      	ldr	r6, [pc, #52]	; (8003f90 <__libc_init_array+0x38>)
 8003f5c:	4c0d      	ldr	r4, [pc, #52]	; (8003f94 <__libc_init_array+0x3c>)
 8003f5e:	1ba4      	subs	r4, r4, r6
 8003f60:	10a4      	asrs	r4, r4, #2
 8003f62:	2500      	movs	r5, #0
 8003f64:	42a5      	cmp	r5, r4
 8003f66:	d109      	bne.n	8003f7c <__libc_init_array+0x24>
 8003f68:	4e0b      	ldr	r6, [pc, #44]	; (8003f98 <__libc_init_array+0x40>)
 8003f6a:	4c0c      	ldr	r4, [pc, #48]	; (8003f9c <__libc_init_array+0x44>)
 8003f6c:	f003 f84a 	bl	8007004 <_init>
 8003f70:	1ba4      	subs	r4, r4, r6
 8003f72:	10a4      	asrs	r4, r4, #2
 8003f74:	2500      	movs	r5, #0
 8003f76:	42a5      	cmp	r5, r4
 8003f78:	d105      	bne.n	8003f86 <__libc_init_array+0x2e>
 8003f7a:	bd70      	pop	{r4, r5, r6, pc}
 8003f7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f80:	4798      	blx	r3
 8003f82:	3501      	adds	r5, #1
 8003f84:	e7ee      	b.n	8003f64 <__libc_init_array+0xc>
 8003f86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f8a:	4798      	blx	r3
 8003f8c:	3501      	adds	r5, #1
 8003f8e:	e7f2      	b.n	8003f76 <__libc_init_array+0x1e>
 8003f90:	08007798 	.word	0x08007798
 8003f94:	08007798 	.word	0x08007798
 8003f98:	08007798 	.word	0x08007798
 8003f9c:	0800779c 	.word	0x0800779c

08003fa0 <__itoa>:
 8003fa0:	1e93      	subs	r3, r2, #2
 8003fa2:	2b22      	cmp	r3, #34	; 0x22
 8003fa4:	b510      	push	{r4, lr}
 8003fa6:	460c      	mov	r4, r1
 8003fa8:	d904      	bls.n	8003fb4 <__itoa+0x14>
 8003faa:	2300      	movs	r3, #0
 8003fac:	700b      	strb	r3, [r1, #0]
 8003fae:	461c      	mov	r4, r3
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	bd10      	pop	{r4, pc}
 8003fb4:	2a0a      	cmp	r2, #10
 8003fb6:	d109      	bne.n	8003fcc <__itoa+0x2c>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	da07      	bge.n	8003fcc <__itoa+0x2c>
 8003fbc:	232d      	movs	r3, #45	; 0x2d
 8003fbe:	700b      	strb	r3, [r1, #0]
 8003fc0:	4240      	negs	r0, r0
 8003fc2:	2101      	movs	r1, #1
 8003fc4:	4421      	add	r1, r4
 8003fc6:	f001 fb13 	bl	80055f0 <__utoa>
 8003fca:	e7f1      	b.n	8003fb0 <__itoa+0x10>
 8003fcc:	2100      	movs	r1, #0
 8003fce:	e7f9      	b.n	8003fc4 <__itoa+0x24>

08003fd0 <itoa>:
 8003fd0:	f7ff bfe6 	b.w	8003fa0 <__itoa>

08003fd4 <malloc>:
 8003fd4:	4b02      	ldr	r3, [pc, #8]	; (8003fe0 <malloc+0xc>)
 8003fd6:	4601      	mov	r1, r0
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	f000 b803 	b.w	8003fe4 <_malloc_r>
 8003fde:	bf00      	nop
 8003fe0:	20000430 	.word	0x20000430

08003fe4 <_malloc_r>:
 8003fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fe8:	f101 040b 	add.w	r4, r1, #11
 8003fec:	2c16      	cmp	r4, #22
 8003fee:	4681      	mov	r9, r0
 8003ff0:	d907      	bls.n	8004002 <_malloc_r+0x1e>
 8003ff2:	f034 0407 	bics.w	r4, r4, #7
 8003ff6:	d505      	bpl.n	8004004 <_malloc_r+0x20>
 8003ff8:	230c      	movs	r3, #12
 8003ffa:	f8c9 3000 	str.w	r3, [r9]
 8003ffe:	2600      	movs	r6, #0
 8004000:	e131      	b.n	8004266 <_malloc_r+0x282>
 8004002:	2410      	movs	r4, #16
 8004004:	428c      	cmp	r4, r1
 8004006:	d3f7      	bcc.n	8003ff8 <_malloc_r+0x14>
 8004008:	4648      	mov	r0, r9
 800400a:	f000 fa01 	bl	8004410 <__malloc_lock>
 800400e:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8004012:	4d9c      	ldr	r5, [pc, #624]	; (8004284 <_malloc_r+0x2a0>)
 8004014:	d236      	bcs.n	8004084 <_malloc_r+0xa0>
 8004016:	f104 0208 	add.w	r2, r4, #8
 800401a:	442a      	add	r2, r5
 800401c:	f1a2 0108 	sub.w	r1, r2, #8
 8004020:	6856      	ldr	r6, [r2, #4]
 8004022:	428e      	cmp	r6, r1
 8004024:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8004028:	d102      	bne.n	8004030 <_malloc_r+0x4c>
 800402a:	68d6      	ldr	r6, [r2, #12]
 800402c:	42b2      	cmp	r2, r6
 800402e:	d010      	beq.n	8004052 <_malloc_r+0x6e>
 8004030:	6873      	ldr	r3, [r6, #4]
 8004032:	68f2      	ldr	r2, [r6, #12]
 8004034:	68b1      	ldr	r1, [r6, #8]
 8004036:	f023 0303 	bic.w	r3, r3, #3
 800403a:	60ca      	str	r2, [r1, #12]
 800403c:	4433      	add	r3, r6
 800403e:	6091      	str	r1, [r2, #8]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	f042 0201 	orr.w	r2, r2, #1
 8004046:	605a      	str	r2, [r3, #4]
 8004048:	4648      	mov	r0, r9
 800404a:	f000 f9e7 	bl	800441c <__malloc_unlock>
 800404e:	3608      	adds	r6, #8
 8004050:	e109      	b.n	8004266 <_malloc_r+0x282>
 8004052:	3302      	adds	r3, #2
 8004054:	4a8c      	ldr	r2, [pc, #560]	; (8004288 <_malloc_r+0x2a4>)
 8004056:	692e      	ldr	r6, [r5, #16]
 8004058:	4296      	cmp	r6, r2
 800405a:	4611      	mov	r1, r2
 800405c:	d06d      	beq.n	800413a <_malloc_r+0x156>
 800405e:	6870      	ldr	r0, [r6, #4]
 8004060:	f020 0003 	bic.w	r0, r0, #3
 8004064:	1b07      	subs	r7, r0, r4
 8004066:	2f0f      	cmp	r7, #15
 8004068:	dd47      	ble.n	80040fa <_malloc_r+0x116>
 800406a:	1933      	adds	r3, r6, r4
 800406c:	f044 0401 	orr.w	r4, r4, #1
 8004070:	6074      	str	r4, [r6, #4]
 8004072:	616b      	str	r3, [r5, #20]
 8004074:	612b      	str	r3, [r5, #16]
 8004076:	60da      	str	r2, [r3, #12]
 8004078:	609a      	str	r2, [r3, #8]
 800407a:	f047 0201 	orr.w	r2, r7, #1
 800407e:	605a      	str	r2, [r3, #4]
 8004080:	5037      	str	r7, [r6, r0]
 8004082:	e7e1      	b.n	8004048 <_malloc_r+0x64>
 8004084:	0a63      	lsrs	r3, r4, #9
 8004086:	d02a      	beq.n	80040de <_malloc_r+0xfa>
 8004088:	2b04      	cmp	r3, #4
 800408a:	d812      	bhi.n	80040b2 <_malloc_r+0xce>
 800408c:	09a3      	lsrs	r3, r4, #6
 800408e:	3338      	adds	r3, #56	; 0x38
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8004096:	f1a2 0008 	sub.w	r0, r2, #8
 800409a:	6856      	ldr	r6, [r2, #4]
 800409c:	4286      	cmp	r6, r0
 800409e:	d006      	beq.n	80040ae <_malloc_r+0xca>
 80040a0:	6872      	ldr	r2, [r6, #4]
 80040a2:	f022 0203 	bic.w	r2, r2, #3
 80040a6:	1b11      	subs	r1, r2, r4
 80040a8:	290f      	cmp	r1, #15
 80040aa:	dd1c      	ble.n	80040e6 <_malloc_r+0x102>
 80040ac:	3b01      	subs	r3, #1
 80040ae:	3301      	adds	r3, #1
 80040b0:	e7d0      	b.n	8004054 <_malloc_r+0x70>
 80040b2:	2b14      	cmp	r3, #20
 80040b4:	d801      	bhi.n	80040ba <_malloc_r+0xd6>
 80040b6:	335b      	adds	r3, #91	; 0x5b
 80040b8:	e7ea      	b.n	8004090 <_malloc_r+0xac>
 80040ba:	2b54      	cmp	r3, #84	; 0x54
 80040bc:	d802      	bhi.n	80040c4 <_malloc_r+0xe0>
 80040be:	0b23      	lsrs	r3, r4, #12
 80040c0:	336e      	adds	r3, #110	; 0x6e
 80040c2:	e7e5      	b.n	8004090 <_malloc_r+0xac>
 80040c4:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 80040c8:	d802      	bhi.n	80040d0 <_malloc_r+0xec>
 80040ca:	0be3      	lsrs	r3, r4, #15
 80040cc:	3377      	adds	r3, #119	; 0x77
 80040ce:	e7df      	b.n	8004090 <_malloc_r+0xac>
 80040d0:	f240 5254 	movw	r2, #1364	; 0x554
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d804      	bhi.n	80040e2 <_malloc_r+0xfe>
 80040d8:	0ca3      	lsrs	r3, r4, #18
 80040da:	337c      	adds	r3, #124	; 0x7c
 80040dc:	e7d8      	b.n	8004090 <_malloc_r+0xac>
 80040de:	233f      	movs	r3, #63	; 0x3f
 80040e0:	e7d6      	b.n	8004090 <_malloc_r+0xac>
 80040e2:	237e      	movs	r3, #126	; 0x7e
 80040e4:	e7d4      	b.n	8004090 <_malloc_r+0xac>
 80040e6:	2900      	cmp	r1, #0
 80040e8:	68f1      	ldr	r1, [r6, #12]
 80040ea:	db04      	blt.n	80040f6 <_malloc_r+0x112>
 80040ec:	68b3      	ldr	r3, [r6, #8]
 80040ee:	60d9      	str	r1, [r3, #12]
 80040f0:	608b      	str	r3, [r1, #8]
 80040f2:	18b3      	adds	r3, r6, r2
 80040f4:	e7a4      	b.n	8004040 <_malloc_r+0x5c>
 80040f6:	460e      	mov	r6, r1
 80040f8:	e7d0      	b.n	800409c <_malloc_r+0xb8>
 80040fa:	2f00      	cmp	r7, #0
 80040fc:	616a      	str	r2, [r5, #20]
 80040fe:	612a      	str	r2, [r5, #16]
 8004100:	db05      	blt.n	800410e <_malloc_r+0x12a>
 8004102:	4430      	add	r0, r6
 8004104:	6843      	ldr	r3, [r0, #4]
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	6043      	str	r3, [r0, #4]
 800410c:	e79c      	b.n	8004048 <_malloc_r+0x64>
 800410e:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004112:	d244      	bcs.n	800419e <_malloc_r+0x1ba>
 8004114:	08c0      	lsrs	r0, r0, #3
 8004116:	1087      	asrs	r7, r0, #2
 8004118:	2201      	movs	r2, #1
 800411a:	fa02 f707 	lsl.w	r7, r2, r7
 800411e:	686a      	ldr	r2, [r5, #4]
 8004120:	3001      	adds	r0, #1
 8004122:	433a      	orrs	r2, r7
 8004124:	606a      	str	r2, [r5, #4]
 8004126:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 800412a:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 800412e:	60b7      	str	r7, [r6, #8]
 8004130:	3a08      	subs	r2, #8
 8004132:	60f2      	str	r2, [r6, #12]
 8004134:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8004138:	60fe      	str	r6, [r7, #12]
 800413a:	2001      	movs	r0, #1
 800413c:	109a      	asrs	r2, r3, #2
 800413e:	fa00 f202 	lsl.w	r2, r0, r2
 8004142:	6868      	ldr	r0, [r5, #4]
 8004144:	4282      	cmp	r2, r0
 8004146:	f200 80a1 	bhi.w	800428c <_malloc_r+0x2a8>
 800414a:	4202      	tst	r2, r0
 800414c:	d106      	bne.n	800415c <_malloc_r+0x178>
 800414e:	f023 0303 	bic.w	r3, r3, #3
 8004152:	0052      	lsls	r2, r2, #1
 8004154:	4202      	tst	r2, r0
 8004156:	f103 0304 	add.w	r3, r3, #4
 800415a:	d0fa      	beq.n	8004152 <_malloc_r+0x16e>
 800415c:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8004160:	46e0      	mov	r8, ip
 8004162:	469e      	mov	lr, r3
 8004164:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8004168:	4546      	cmp	r6, r8
 800416a:	d153      	bne.n	8004214 <_malloc_r+0x230>
 800416c:	f10e 0e01 	add.w	lr, lr, #1
 8004170:	f01e 0f03 	tst.w	lr, #3
 8004174:	f108 0808 	add.w	r8, r8, #8
 8004178:	d1f4      	bne.n	8004164 <_malloc_r+0x180>
 800417a:	0798      	lsls	r0, r3, #30
 800417c:	d179      	bne.n	8004272 <_malloc_r+0x28e>
 800417e:	686b      	ldr	r3, [r5, #4]
 8004180:	ea23 0302 	bic.w	r3, r3, r2
 8004184:	606b      	str	r3, [r5, #4]
 8004186:	6868      	ldr	r0, [r5, #4]
 8004188:	0052      	lsls	r2, r2, #1
 800418a:	4282      	cmp	r2, r0
 800418c:	d87e      	bhi.n	800428c <_malloc_r+0x2a8>
 800418e:	2a00      	cmp	r2, #0
 8004190:	d07c      	beq.n	800428c <_malloc_r+0x2a8>
 8004192:	4673      	mov	r3, lr
 8004194:	4202      	tst	r2, r0
 8004196:	d1e1      	bne.n	800415c <_malloc_r+0x178>
 8004198:	3304      	adds	r3, #4
 800419a:	0052      	lsls	r2, r2, #1
 800419c:	e7fa      	b.n	8004194 <_malloc_r+0x1b0>
 800419e:	0a42      	lsrs	r2, r0, #9
 80041a0:	2a04      	cmp	r2, #4
 80041a2:	d815      	bhi.n	80041d0 <_malloc_r+0x1ec>
 80041a4:	0982      	lsrs	r2, r0, #6
 80041a6:	3238      	adds	r2, #56	; 0x38
 80041a8:	1c57      	adds	r7, r2, #1
 80041aa:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 80041ae:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 80041b2:	45be      	cmp	lr, r7
 80041b4:	d126      	bne.n	8004204 <_malloc_r+0x220>
 80041b6:	2001      	movs	r0, #1
 80041b8:	1092      	asrs	r2, r2, #2
 80041ba:	fa00 f202 	lsl.w	r2, r0, r2
 80041be:	6868      	ldr	r0, [r5, #4]
 80041c0:	4310      	orrs	r0, r2
 80041c2:	6068      	str	r0, [r5, #4]
 80041c4:	f8c6 e00c 	str.w	lr, [r6, #12]
 80041c8:	60b7      	str	r7, [r6, #8]
 80041ca:	f8ce 6008 	str.w	r6, [lr, #8]
 80041ce:	e7b3      	b.n	8004138 <_malloc_r+0x154>
 80041d0:	2a14      	cmp	r2, #20
 80041d2:	d801      	bhi.n	80041d8 <_malloc_r+0x1f4>
 80041d4:	325b      	adds	r2, #91	; 0x5b
 80041d6:	e7e7      	b.n	80041a8 <_malloc_r+0x1c4>
 80041d8:	2a54      	cmp	r2, #84	; 0x54
 80041da:	d802      	bhi.n	80041e2 <_malloc_r+0x1fe>
 80041dc:	0b02      	lsrs	r2, r0, #12
 80041de:	326e      	adds	r2, #110	; 0x6e
 80041e0:	e7e2      	b.n	80041a8 <_malloc_r+0x1c4>
 80041e2:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 80041e6:	d802      	bhi.n	80041ee <_malloc_r+0x20a>
 80041e8:	0bc2      	lsrs	r2, r0, #15
 80041ea:	3277      	adds	r2, #119	; 0x77
 80041ec:	e7dc      	b.n	80041a8 <_malloc_r+0x1c4>
 80041ee:	f240 5754 	movw	r7, #1364	; 0x554
 80041f2:	42ba      	cmp	r2, r7
 80041f4:	bf9a      	itte	ls
 80041f6:	0c82      	lsrls	r2, r0, #18
 80041f8:	327c      	addls	r2, #124	; 0x7c
 80041fa:	227e      	movhi	r2, #126	; 0x7e
 80041fc:	e7d4      	b.n	80041a8 <_malloc_r+0x1c4>
 80041fe:	68bf      	ldr	r7, [r7, #8]
 8004200:	45be      	cmp	lr, r7
 8004202:	d004      	beq.n	800420e <_malloc_r+0x22a>
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	f022 0203 	bic.w	r2, r2, #3
 800420a:	4290      	cmp	r0, r2
 800420c:	d3f7      	bcc.n	80041fe <_malloc_r+0x21a>
 800420e:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8004212:	e7d7      	b.n	80041c4 <_malloc_r+0x1e0>
 8004214:	6870      	ldr	r0, [r6, #4]
 8004216:	68f7      	ldr	r7, [r6, #12]
 8004218:	f020 0003 	bic.w	r0, r0, #3
 800421c:	eba0 0a04 	sub.w	sl, r0, r4
 8004220:	f1ba 0f0f 	cmp.w	sl, #15
 8004224:	dd10      	ble.n	8004248 <_malloc_r+0x264>
 8004226:	68b2      	ldr	r2, [r6, #8]
 8004228:	1933      	adds	r3, r6, r4
 800422a:	f044 0401 	orr.w	r4, r4, #1
 800422e:	6074      	str	r4, [r6, #4]
 8004230:	60d7      	str	r7, [r2, #12]
 8004232:	60ba      	str	r2, [r7, #8]
 8004234:	f04a 0201 	orr.w	r2, sl, #1
 8004238:	616b      	str	r3, [r5, #20]
 800423a:	612b      	str	r3, [r5, #16]
 800423c:	60d9      	str	r1, [r3, #12]
 800423e:	6099      	str	r1, [r3, #8]
 8004240:	605a      	str	r2, [r3, #4]
 8004242:	f846 a000 	str.w	sl, [r6, r0]
 8004246:	e6ff      	b.n	8004048 <_malloc_r+0x64>
 8004248:	f1ba 0f00 	cmp.w	sl, #0
 800424c:	db0f      	blt.n	800426e <_malloc_r+0x28a>
 800424e:	4430      	add	r0, r6
 8004250:	6843      	ldr	r3, [r0, #4]
 8004252:	f043 0301 	orr.w	r3, r3, #1
 8004256:	6043      	str	r3, [r0, #4]
 8004258:	f856 3f08 	ldr.w	r3, [r6, #8]!
 800425c:	4648      	mov	r0, r9
 800425e:	60df      	str	r7, [r3, #12]
 8004260:	60bb      	str	r3, [r7, #8]
 8004262:	f000 f8db 	bl	800441c <__malloc_unlock>
 8004266:	4630      	mov	r0, r6
 8004268:	b003      	add	sp, #12
 800426a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800426e:	463e      	mov	r6, r7
 8004270:	e77a      	b.n	8004168 <_malloc_r+0x184>
 8004272:	f85c 0908 	ldr.w	r0, [ip], #-8
 8004276:	4584      	cmp	ip, r0
 8004278:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 800427c:	f43f af7d 	beq.w	800417a <_malloc_r+0x196>
 8004280:	e781      	b.n	8004186 <_malloc_r+0x1a2>
 8004282:	bf00      	nop
 8004284:	20000020 	.word	0x20000020
 8004288:	20000028 	.word	0x20000028
 800428c:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8004290:	f8db 6004 	ldr.w	r6, [fp, #4]
 8004294:	f026 0603 	bic.w	r6, r6, #3
 8004298:	42b4      	cmp	r4, r6
 800429a:	d803      	bhi.n	80042a4 <_malloc_r+0x2c0>
 800429c:	1b33      	subs	r3, r6, r4
 800429e:	2b0f      	cmp	r3, #15
 80042a0:	f300 8096 	bgt.w	80043d0 <_malloc_r+0x3ec>
 80042a4:	4a4f      	ldr	r2, [pc, #316]	; (80043e4 <_malloc_r+0x400>)
 80042a6:	6817      	ldr	r7, [r2, #0]
 80042a8:	4a4f      	ldr	r2, [pc, #316]	; (80043e8 <_malloc_r+0x404>)
 80042aa:	6811      	ldr	r1, [r2, #0]
 80042ac:	3710      	adds	r7, #16
 80042ae:	3101      	adds	r1, #1
 80042b0:	eb0b 0306 	add.w	r3, fp, r6
 80042b4:	4427      	add	r7, r4
 80042b6:	d005      	beq.n	80042c4 <_malloc_r+0x2e0>
 80042b8:	494c      	ldr	r1, [pc, #304]	; (80043ec <_malloc_r+0x408>)
 80042ba:	3901      	subs	r1, #1
 80042bc:	440f      	add	r7, r1
 80042be:	3101      	adds	r1, #1
 80042c0:	4249      	negs	r1, r1
 80042c2:	400f      	ands	r7, r1
 80042c4:	4639      	mov	r1, r7
 80042c6:	4648      	mov	r0, r9
 80042c8:	9201      	str	r2, [sp, #4]
 80042ca:	9300      	str	r3, [sp, #0]
 80042cc:	f000 f8ac 	bl	8004428 <_sbrk_r>
 80042d0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80042d4:	4680      	mov	r8, r0
 80042d6:	d056      	beq.n	8004386 <_malloc_r+0x3a2>
 80042d8:	9b00      	ldr	r3, [sp, #0]
 80042da:	9a01      	ldr	r2, [sp, #4]
 80042dc:	4283      	cmp	r3, r0
 80042de:	d901      	bls.n	80042e4 <_malloc_r+0x300>
 80042e0:	45ab      	cmp	fp, r5
 80042e2:	d150      	bne.n	8004386 <_malloc_r+0x3a2>
 80042e4:	4842      	ldr	r0, [pc, #264]	; (80043f0 <_malloc_r+0x40c>)
 80042e6:	6801      	ldr	r1, [r0, #0]
 80042e8:	4543      	cmp	r3, r8
 80042ea:	eb07 0e01 	add.w	lr, r7, r1
 80042ee:	f8c0 e000 	str.w	lr, [r0]
 80042f2:	4940      	ldr	r1, [pc, #256]	; (80043f4 <_malloc_r+0x410>)
 80042f4:	4682      	mov	sl, r0
 80042f6:	d113      	bne.n	8004320 <_malloc_r+0x33c>
 80042f8:	420b      	tst	r3, r1
 80042fa:	d111      	bne.n	8004320 <_malloc_r+0x33c>
 80042fc:	68ab      	ldr	r3, [r5, #8]
 80042fe:	443e      	add	r6, r7
 8004300:	f046 0601 	orr.w	r6, r6, #1
 8004304:	605e      	str	r6, [r3, #4]
 8004306:	4a3c      	ldr	r2, [pc, #240]	; (80043f8 <_malloc_r+0x414>)
 8004308:	f8da 3000 	ldr.w	r3, [sl]
 800430c:	6811      	ldr	r1, [r2, #0]
 800430e:	428b      	cmp	r3, r1
 8004310:	bf88      	it	hi
 8004312:	6013      	strhi	r3, [r2, #0]
 8004314:	4a39      	ldr	r2, [pc, #228]	; (80043fc <_malloc_r+0x418>)
 8004316:	6811      	ldr	r1, [r2, #0]
 8004318:	428b      	cmp	r3, r1
 800431a:	bf88      	it	hi
 800431c:	6013      	strhi	r3, [r2, #0]
 800431e:	e032      	b.n	8004386 <_malloc_r+0x3a2>
 8004320:	6810      	ldr	r0, [r2, #0]
 8004322:	3001      	adds	r0, #1
 8004324:	bf1b      	ittet	ne
 8004326:	eba8 0303 	subne.w	r3, r8, r3
 800432a:	4473      	addne	r3, lr
 800432c:	f8c2 8000 	streq.w	r8, [r2]
 8004330:	f8ca 3000 	strne.w	r3, [sl]
 8004334:	f018 0007 	ands.w	r0, r8, #7
 8004338:	bf1c      	itt	ne
 800433a:	f1c0 0008 	rsbne	r0, r0, #8
 800433e:	4480      	addne	r8, r0
 8004340:	4b2a      	ldr	r3, [pc, #168]	; (80043ec <_malloc_r+0x408>)
 8004342:	4447      	add	r7, r8
 8004344:	4418      	add	r0, r3
 8004346:	400f      	ands	r7, r1
 8004348:	1bc7      	subs	r7, r0, r7
 800434a:	4639      	mov	r1, r7
 800434c:	4648      	mov	r0, r9
 800434e:	f000 f86b 	bl	8004428 <_sbrk_r>
 8004352:	1c43      	adds	r3, r0, #1
 8004354:	bf08      	it	eq
 8004356:	4640      	moveq	r0, r8
 8004358:	f8da 3000 	ldr.w	r3, [sl]
 800435c:	f8c5 8008 	str.w	r8, [r5, #8]
 8004360:	bf08      	it	eq
 8004362:	2700      	moveq	r7, #0
 8004364:	eba0 0008 	sub.w	r0, r0, r8
 8004368:	443b      	add	r3, r7
 800436a:	4407      	add	r7, r0
 800436c:	f047 0701 	orr.w	r7, r7, #1
 8004370:	45ab      	cmp	fp, r5
 8004372:	f8ca 3000 	str.w	r3, [sl]
 8004376:	f8c8 7004 	str.w	r7, [r8, #4]
 800437a:	d0c4      	beq.n	8004306 <_malloc_r+0x322>
 800437c:	2e0f      	cmp	r6, #15
 800437e:	d810      	bhi.n	80043a2 <_malloc_r+0x3be>
 8004380:	2301      	movs	r3, #1
 8004382:	f8c8 3004 	str.w	r3, [r8, #4]
 8004386:	68ab      	ldr	r3, [r5, #8]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	f022 0203 	bic.w	r2, r2, #3
 800438e:	4294      	cmp	r4, r2
 8004390:	eba2 0304 	sub.w	r3, r2, r4
 8004394:	d801      	bhi.n	800439a <_malloc_r+0x3b6>
 8004396:	2b0f      	cmp	r3, #15
 8004398:	dc1a      	bgt.n	80043d0 <_malloc_r+0x3ec>
 800439a:	4648      	mov	r0, r9
 800439c:	f000 f83e 	bl	800441c <__malloc_unlock>
 80043a0:	e62d      	b.n	8003ffe <_malloc_r+0x1a>
 80043a2:	f8db 3004 	ldr.w	r3, [fp, #4]
 80043a6:	3e0c      	subs	r6, #12
 80043a8:	f026 0607 	bic.w	r6, r6, #7
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	4333      	orrs	r3, r6
 80043b2:	f8cb 3004 	str.w	r3, [fp, #4]
 80043b6:	eb0b 0306 	add.w	r3, fp, r6
 80043ba:	2205      	movs	r2, #5
 80043bc:	2e0f      	cmp	r6, #15
 80043be:	605a      	str	r2, [r3, #4]
 80043c0:	609a      	str	r2, [r3, #8]
 80043c2:	d9a0      	bls.n	8004306 <_malloc_r+0x322>
 80043c4:	f10b 0108 	add.w	r1, fp, #8
 80043c8:	4648      	mov	r0, r9
 80043ca:	f002 f801 	bl	80063d0 <_free_r>
 80043ce:	e79a      	b.n	8004306 <_malloc_r+0x322>
 80043d0:	68ae      	ldr	r6, [r5, #8]
 80043d2:	f044 0201 	orr.w	r2, r4, #1
 80043d6:	4434      	add	r4, r6
 80043d8:	f043 0301 	orr.w	r3, r3, #1
 80043dc:	6072      	str	r2, [r6, #4]
 80043de:	60ac      	str	r4, [r5, #8]
 80043e0:	6063      	str	r3, [r4, #4]
 80043e2:	e631      	b.n	8004048 <_malloc_r+0x64>
 80043e4:	200009b4 	.word	0x200009b4
 80043e8:	20000428 	.word	0x20000428
 80043ec:	00000080 	.word	0x00000080
 80043f0:	20000984 	.word	0x20000984
 80043f4:	0000007f 	.word	0x0000007f
 80043f8:	200009ac 	.word	0x200009ac
 80043fc:	200009b0 	.word	0x200009b0

08004400 <memset>:
 8004400:	4402      	add	r2, r0
 8004402:	4603      	mov	r3, r0
 8004404:	4293      	cmp	r3, r2
 8004406:	d100      	bne.n	800440a <memset+0xa>
 8004408:	4770      	bx	lr
 800440a:	f803 1b01 	strb.w	r1, [r3], #1
 800440e:	e7f9      	b.n	8004404 <memset+0x4>

08004410 <__malloc_lock>:
 8004410:	4801      	ldr	r0, [pc, #4]	; (8004418 <__malloc_lock+0x8>)
 8004412:	f002 b8ab 	b.w	800656c <__retarget_lock_acquire_recursive>
 8004416:	bf00      	nop
 8004418:	20000a64 	.word	0x20000a64

0800441c <__malloc_unlock>:
 800441c:	4801      	ldr	r0, [pc, #4]	; (8004424 <__malloc_unlock+0x8>)
 800441e:	f002 b8a6 	b.w	800656e <__retarget_lock_release_recursive>
 8004422:	bf00      	nop
 8004424:	20000a64 	.word	0x20000a64

08004428 <_sbrk_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4c06      	ldr	r4, [pc, #24]	; (8004444 <_sbrk_r+0x1c>)
 800442c:	2300      	movs	r3, #0
 800442e:	4605      	mov	r5, r0
 8004430:	4608      	mov	r0, r1
 8004432:	6023      	str	r3, [r4, #0]
 8004434:	f002 fdd8 	bl	8006fe8 <_sbrk>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d102      	bne.n	8004442 <_sbrk_r+0x1a>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	b103      	cbz	r3, 8004442 <_sbrk_r+0x1a>
 8004440:	602b      	str	r3, [r5, #0]
 8004442:	bd38      	pop	{r3, r4, r5, pc}
 8004444:	20000a6c 	.word	0x20000a6c

08004448 <sprintf>:
 8004448:	b40e      	push	{r1, r2, r3}
 800444a:	b500      	push	{lr}
 800444c:	b09c      	sub	sp, #112	; 0x70
 800444e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004452:	ab1d      	add	r3, sp, #116	; 0x74
 8004454:	f8ad 1014 	strh.w	r1, [sp, #20]
 8004458:	9002      	str	r0, [sp, #8]
 800445a:	9006      	str	r0, [sp, #24]
 800445c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004460:	480a      	ldr	r0, [pc, #40]	; (800448c <sprintf+0x44>)
 8004462:	9104      	str	r1, [sp, #16]
 8004464:	9107      	str	r1, [sp, #28]
 8004466:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800446a:	f853 2b04 	ldr.w	r2, [r3], #4
 800446e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8004472:	6800      	ldr	r0, [r0, #0]
 8004474:	9301      	str	r3, [sp, #4]
 8004476:	a902      	add	r1, sp, #8
 8004478:	f000 f8e6 	bl	8004648 <_svfprintf_r>
 800447c:	9b02      	ldr	r3, [sp, #8]
 800447e:	2200      	movs	r2, #0
 8004480:	701a      	strb	r2, [r3, #0]
 8004482:	b01c      	add	sp, #112	; 0x70
 8004484:	f85d eb04 	ldr.w	lr, [sp], #4
 8004488:	b003      	add	sp, #12
 800448a:	4770      	bx	lr
 800448c:	20000430 	.word	0x20000430

08004490 <strcpy>:
 8004490:	4603      	mov	r3, r0
 8004492:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004496:	f803 2b01 	strb.w	r2, [r3], #1
 800449a:	2a00      	cmp	r2, #0
 800449c:	d1f9      	bne.n	8004492 <strcpy+0x2>
 800449e:	4770      	bx	lr

080044a0 <strncat>:
 80044a0:	b530      	push	{r4, r5, lr}
 80044a2:	4603      	mov	r3, r0
 80044a4:	781c      	ldrb	r4, [r3, #0]
 80044a6:	1c5d      	adds	r5, r3, #1
 80044a8:	b944      	cbnz	r4, 80044bc <strncat+0x1c>
 80044aa:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 80044ae:	d304      	bcc.n	80044ba <strncat+0x1a>
 80044b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80044b4:	f803 4b01 	strb.w	r4, [r3], #1
 80044b8:	b914      	cbnz	r4, 80044c0 <strncat+0x20>
 80044ba:	bd30      	pop	{r4, r5, pc}
 80044bc:	462b      	mov	r3, r5
 80044be:	e7f1      	b.n	80044a4 <strncat+0x4>
 80044c0:	2a00      	cmp	r2, #0
 80044c2:	d1f2      	bne.n	80044aa <strncat+0xa>
 80044c4:	701a      	strb	r2, [r3, #0]
 80044c6:	e7f0      	b.n	80044aa <strncat+0xa>

080044c8 <strncmp>:
 80044c8:	b510      	push	{r4, lr}
 80044ca:	b16a      	cbz	r2, 80044e8 <strncmp+0x20>
 80044cc:	3901      	subs	r1, #1
 80044ce:	1884      	adds	r4, r0, r2
 80044d0:	f810 3b01 	ldrb.w	r3, [r0], #1
 80044d4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80044d8:	4293      	cmp	r3, r2
 80044da:	d103      	bne.n	80044e4 <strncmp+0x1c>
 80044dc:	42a0      	cmp	r0, r4
 80044de:	d001      	beq.n	80044e4 <strncmp+0x1c>
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d1f5      	bne.n	80044d0 <strncmp+0x8>
 80044e4:	1a98      	subs	r0, r3, r2
 80044e6:	bd10      	pop	{r4, pc}
 80044e8:	4610      	mov	r0, r2
 80044ea:	bd10      	pop	{r4, pc}

080044ec <strncpy>:
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	4604      	mov	r4, r0
 80044f0:	b902      	cbnz	r2, 80044f4 <strncpy+0x8>
 80044f2:	bd70      	pop	{r4, r5, r6, pc}
 80044f4:	4623      	mov	r3, r4
 80044f6:	f811 5b01 	ldrb.w	r5, [r1], #1
 80044fa:	f803 5b01 	strb.w	r5, [r3], #1
 80044fe:	1e56      	subs	r6, r2, #1
 8004500:	b91d      	cbnz	r5, 800450a <strncpy+0x1e>
 8004502:	4414      	add	r4, r2
 8004504:	42a3      	cmp	r3, r4
 8004506:	d103      	bne.n	8004510 <strncpy+0x24>
 8004508:	bd70      	pop	{r4, r5, r6, pc}
 800450a:	461c      	mov	r4, r3
 800450c:	4632      	mov	r2, r6
 800450e:	e7ef      	b.n	80044f0 <strncpy+0x4>
 8004510:	f803 5b01 	strb.w	r5, [r3], #1
 8004514:	e7f6      	b.n	8004504 <strncpy+0x18>

08004516 <_strtol_l.isra.0>:
 8004516:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800451a:	4680      	mov	r8, r0
 800451c:	4689      	mov	r9, r1
 800451e:	4692      	mov	sl, r2
 8004520:	461f      	mov	r7, r3
 8004522:	468b      	mov	fp, r1
 8004524:	465d      	mov	r5, fp
 8004526:	980a      	ldr	r0, [sp, #40]	; 0x28
 8004528:	f815 4b01 	ldrb.w	r4, [r5], #1
 800452c:	f002 f80c 	bl	8006548 <__locale_ctype_ptr_l>
 8004530:	4420      	add	r0, r4
 8004532:	7846      	ldrb	r6, [r0, #1]
 8004534:	f016 0608 	ands.w	r6, r6, #8
 8004538:	d10b      	bne.n	8004552 <_strtol_l.isra.0+0x3c>
 800453a:	2c2d      	cmp	r4, #45	; 0x2d
 800453c:	d10b      	bne.n	8004556 <_strtol_l.isra.0+0x40>
 800453e:	782c      	ldrb	r4, [r5, #0]
 8004540:	2601      	movs	r6, #1
 8004542:	f10b 0502 	add.w	r5, fp, #2
 8004546:	b167      	cbz	r7, 8004562 <_strtol_l.isra.0+0x4c>
 8004548:	2f10      	cmp	r7, #16
 800454a:	d114      	bne.n	8004576 <_strtol_l.isra.0+0x60>
 800454c:	2c30      	cmp	r4, #48	; 0x30
 800454e:	d00a      	beq.n	8004566 <_strtol_l.isra.0+0x50>
 8004550:	e011      	b.n	8004576 <_strtol_l.isra.0+0x60>
 8004552:	46ab      	mov	fp, r5
 8004554:	e7e6      	b.n	8004524 <_strtol_l.isra.0+0xe>
 8004556:	2c2b      	cmp	r4, #43	; 0x2b
 8004558:	bf04      	itt	eq
 800455a:	782c      	ldrbeq	r4, [r5, #0]
 800455c:	f10b 0502 	addeq.w	r5, fp, #2
 8004560:	e7f1      	b.n	8004546 <_strtol_l.isra.0+0x30>
 8004562:	2c30      	cmp	r4, #48	; 0x30
 8004564:	d127      	bne.n	80045b6 <_strtol_l.isra.0+0xa0>
 8004566:	782b      	ldrb	r3, [r5, #0]
 8004568:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800456c:	2b58      	cmp	r3, #88	; 0x58
 800456e:	d14b      	bne.n	8004608 <_strtol_l.isra.0+0xf2>
 8004570:	786c      	ldrb	r4, [r5, #1]
 8004572:	2710      	movs	r7, #16
 8004574:	3502      	adds	r5, #2
 8004576:	2e00      	cmp	r6, #0
 8004578:	bf0c      	ite	eq
 800457a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800457e:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8004582:	2200      	movs	r2, #0
 8004584:	fbb1 fef7 	udiv	lr, r1, r7
 8004588:	4610      	mov	r0, r2
 800458a:	fb07 1c1e 	mls	ip, r7, lr, r1
 800458e:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8004592:	2b09      	cmp	r3, #9
 8004594:	d811      	bhi.n	80045ba <_strtol_l.isra.0+0xa4>
 8004596:	461c      	mov	r4, r3
 8004598:	42a7      	cmp	r7, r4
 800459a:	dd1d      	ble.n	80045d8 <_strtol_l.isra.0+0xc2>
 800459c:	1c53      	adds	r3, r2, #1
 800459e:	d007      	beq.n	80045b0 <_strtol_l.isra.0+0x9a>
 80045a0:	4586      	cmp	lr, r0
 80045a2:	d316      	bcc.n	80045d2 <_strtol_l.isra.0+0xbc>
 80045a4:	d101      	bne.n	80045aa <_strtol_l.isra.0+0x94>
 80045a6:	45a4      	cmp	ip, r4
 80045a8:	db13      	blt.n	80045d2 <_strtol_l.isra.0+0xbc>
 80045aa:	fb00 4007 	mla	r0, r0, r7, r4
 80045ae:	2201      	movs	r2, #1
 80045b0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80045b4:	e7eb      	b.n	800458e <_strtol_l.isra.0+0x78>
 80045b6:	270a      	movs	r7, #10
 80045b8:	e7dd      	b.n	8004576 <_strtol_l.isra.0+0x60>
 80045ba:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80045be:	2b19      	cmp	r3, #25
 80045c0:	d801      	bhi.n	80045c6 <_strtol_l.isra.0+0xb0>
 80045c2:	3c37      	subs	r4, #55	; 0x37
 80045c4:	e7e8      	b.n	8004598 <_strtol_l.isra.0+0x82>
 80045c6:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80045ca:	2b19      	cmp	r3, #25
 80045cc:	d804      	bhi.n	80045d8 <_strtol_l.isra.0+0xc2>
 80045ce:	3c57      	subs	r4, #87	; 0x57
 80045d0:	e7e2      	b.n	8004598 <_strtol_l.isra.0+0x82>
 80045d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80045d6:	e7eb      	b.n	80045b0 <_strtol_l.isra.0+0x9a>
 80045d8:	1c53      	adds	r3, r2, #1
 80045da:	d108      	bne.n	80045ee <_strtol_l.isra.0+0xd8>
 80045dc:	2322      	movs	r3, #34	; 0x22
 80045de:	f8c8 3000 	str.w	r3, [r8]
 80045e2:	4608      	mov	r0, r1
 80045e4:	f1ba 0f00 	cmp.w	sl, #0
 80045e8:	d107      	bne.n	80045fa <_strtol_l.isra.0+0xe4>
 80045ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ee:	b106      	cbz	r6, 80045f2 <_strtol_l.isra.0+0xdc>
 80045f0:	4240      	negs	r0, r0
 80045f2:	f1ba 0f00 	cmp.w	sl, #0
 80045f6:	d00c      	beq.n	8004612 <_strtol_l.isra.0+0xfc>
 80045f8:	b122      	cbz	r2, 8004604 <_strtol_l.isra.0+0xee>
 80045fa:	3d01      	subs	r5, #1
 80045fc:	f8ca 5000 	str.w	r5, [sl]
 8004600:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004604:	464d      	mov	r5, r9
 8004606:	e7f9      	b.n	80045fc <_strtol_l.isra.0+0xe6>
 8004608:	2430      	movs	r4, #48	; 0x30
 800460a:	2f00      	cmp	r7, #0
 800460c:	d1b3      	bne.n	8004576 <_strtol_l.isra.0+0x60>
 800460e:	2708      	movs	r7, #8
 8004610:	e7b1      	b.n	8004576 <_strtol_l.isra.0+0x60>
 8004612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004618 <strtol>:
 8004618:	4b08      	ldr	r3, [pc, #32]	; (800463c <strtol+0x24>)
 800461a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800461c:	681c      	ldr	r4, [r3, #0]
 800461e:	4d08      	ldr	r5, [pc, #32]	; (8004640 <strtol+0x28>)
 8004620:	6a23      	ldr	r3, [r4, #32]
 8004622:	2b00      	cmp	r3, #0
 8004624:	bf08      	it	eq
 8004626:	462b      	moveq	r3, r5
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	4613      	mov	r3, r2
 800462c:	460a      	mov	r2, r1
 800462e:	4601      	mov	r1, r0
 8004630:	4620      	mov	r0, r4
 8004632:	f7ff ff70 	bl	8004516 <_strtol_l.isra.0>
 8004636:	b003      	add	sp, #12
 8004638:	bd30      	pop	{r4, r5, pc}
 800463a:	bf00      	nop
 800463c:	20000430 	.word	0x20000430
 8004640:	20000524 	.word	0x20000524
 8004644:	00000000 	.word	0x00000000

08004648 <_svfprintf_r>:
 8004648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800464c:	b0bd      	sub	sp, #244	; 0xf4
 800464e:	468a      	mov	sl, r1
 8004650:	4615      	mov	r5, r2
 8004652:	461f      	mov	r7, r3
 8004654:	4683      	mov	fp, r0
 8004656:	f001 ff7b 	bl	8006550 <_localeconv_r>
 800465a:	6803      	ldr	r3, [r0, #0]
 800465c:	930d      	str	r3, [sp, #52]	; 0x34
 800465e:	4618      	mov	r0, r3
 8004660:	f7fb fdbe 	bl	80001e0 <strlen>
 8004664:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004668:	9008      	str	r0, [sp, #32]
 800466a:	061b      	lsls	r3, r3, #24
 800466c:	d518      	bpl.n	80046a0 <_svfprintf_r+0x58>
 800466e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004672:	b9ab      	cbnz	r3, 80046a0 <_svfprintf_r+0x58>
 8004674:	2140      	movs	r1, #64	; 0x40
 8004676:	4658      	mov	r0, fp
 8004678:	f7ff fcb4 	bl	8003fe4 <_malloc_r>
 800467c:	f8ca 0000 	str.w	r0, [sl]
 8004680:	f8ca 0010 	str.w	r0, [sl, #16]
 8004684:	b948      	cbnz	r0, 800469a <_svfprintf_r+0x52>
 8004686:	230c      	movs	r3, #12
 8004688:	f8cb 3000 	str.w	r3, [fp]
 800468c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004690:	9309      	str	r3, [sp, #36]	; 0x24
 8004692:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004694:	b03d      	add	sp, #244	; 0xf4
 8004696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469a:	2340      	movs	r3, #64	; 0x40
 800469c:	f8ca 3014 	str.w	r3, [sl, #20]
 80046a0:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8004908 <_svfprintf_r+0x2c0>
 80046a4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80046a8:	2300      	movs	r3, #0
 80046aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80046ac:	941f      	str	r4, [sp, #124]	; 0x7c
 80046ae:	9321      	str	r3, [sp, #132]	; 0x84
 80046b0:	9320      	str	r3, [sp, #128]	; 0x80
 80046b2:	9505      	str	r5, [sp, #20]
 80046b4:	9303      	str	r3, [sp, #12]
 80046b6:	9311      	str	r3, [sp, #68]	; 0x44
 80046b8:	9310      	str	r3, [sp, #64]	; 0x40
 80046ba:	9309      	str	r3, [sp, #36]	; 0x24
 80046bc:	9d05      	ldr	r5, [sp, #20]
 80046be:	462b      	mov	r3, r5
 80046c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046c4:	b112      	cbz	r2, 80046cc <_svfprintf_r+0x84>
 80046c6:	2a25      	cmp	r2, #37	; 0x25
 80046c8:	f040 8083 	bne.w	80047d2 <_svfprintf_r+0x18a>
 80046cc:	9b05      	ldr	r3, [sp, #20]
 80046ce:	1aee      	subs	r6, r5, r3
 80046d0:	d00d      	beq.n	80046ee <_svfprintf_r+0xa6>
 80046d2:	e884 0048 	stmia.w	r4, {r3, r6}
 80046d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80046d8:	4433      	add	r3, r6
 80046da:	9321      	str	r3, [sp, #132]	; 0x84
 80046dc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80046de:	3301      	adds	r3, #1
 80046e0:	2b07      	cmp	r3, #7
 80046e2:	9320      	str	r3, [sp, #128]	; 0x80
 80046e4:	dc77      	bgt.n	80047d6 <_svfprintf_r+0x18e>
 80046e6:	3408      	adds	r4, #8
 80046e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046ea:	4433      	add	r3, r6
 80046ec:	9309      	str	r3, [sp, #36]	; 0x24
 80046ee:	782b      	ldrb	r3, [r5, #0]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 8729 	beq.w	8005548 <_svfprintf_r+0xf00>
 80046f6:	2300      	movs	r3, #0
 80046f8:	1c69      	adds	r1, r5, #1
 80046fa:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80046fe:	461a      	mov	r2, r3
 8004700:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004704:	930a      	str	r3, [sp, #40]	; 0x28
 8004706:	461d      	mov	r5, r3
 8004708:	200a      	movs	r0, #10
 800470a:	1c4e      	adds	r6, r1, #1
 800470c:	7809      	ldrb	r1, [r1, #0]
 800470e:	9605      	str	r6, [sp, #20]
 8004710:	9102      	str	r1, [sp, #8]
 8004712:	9902      	ldr	r1, [sp, #8]
 8004714:	3920      	subs	r1, #32
 8004716:	2958      	cmp	r1, #88	; 0x58
 8004718:	f200 8418 	bhi.w	8004f4c <_svfprintf_r+0x904>
 800471c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004720:	041600a6 	.word	0x041600a6
 8004724:	00ab0416 	.word	0x00ab0416
 8004728:	04160416 	.word	0x04160416
 800472c:	04160416 	.word	0x04160416
 8004730:	04160416 	.word	0x04160416
 8004734:	006500ae 	.word	0x006500ae
 8004738:	00b70416 	.word	0x00b70416
 800473c:	041600ba 	.word	0x041600ba
 8004740:	00da00d7 	.word	0x00da00d7
 8004744:	00da00da 	.word	0x00da00da
 8004748:	00da00da 	.word	0x00da00da
 800474c:	00da00da 	.word	0x00da00da
 8004750:	00da00da 	.word	0x00da00da
 8004754:	04160416 	.word	0x04160416
 8004758:	04160416 	.word	0x04160416
 800475c:	04160416 	.word	0x04160416
 8004760:	04160416 	.word	0x04160416
 8004764:	04160416 	.word	0x04160416
 8004768:	012b0115 	.word	0x012b0115
 800476c:	012b0416 	.word	0x012b0416
 8004770:	04160416 	.word	0x04160416
 8004774:	04160416 	.word	0x04160416
 8004778:	041600ed 	.word	0x041600ed
 800477c:	03400416 	.word	0x03400416
 8004780:	04160416 	.word	0x04160416
 8004784:	04160416 	.word	0x04160416
 8004788:	03a80416 	.word	0x03a80416
 800478c:	04160416 	.word	0x04160416
 8004790:	04160086 	.word	0x04160086
 8004794:	04160416 	.word	0x04160416
 8004798:	04160416 	.word	0x04160416
 800479c:	04160416 	.word	0x04160416
 80047a0:	04160416 	.word	0x04160416
 80047a4:	01070416 	.word	0x01070416
 80047a8:	012b006b 	.word	0x012b006b
 80047ac:	012b012b 	.word	0x012b012b
 80047b0:	006b00f0 	.word	0x006b00f0
 80047b4:	04160416 	.word	0x04160416
 80047b8:	041600fa 	.word	0x041600fa
 80047bc:	03420322 	.word	0x03420322
 80047c0:	01010376 	.word	0x01010376
 80047c4:	03870416 	.word	0x03870416
 80047c8:	03aa0416 	.word	0x03aa0416
 80047cc:	04160416 	.word	0x04160416
 80047d0:	03c2      	.short	0x03c2
 80047d2:	461d      	mov	r5, r3
 80047d4:	e773      	b.n	80046be <_svfprintf_r+0x76>
 80047d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80047d8:	4651      	mov	r1, sl
 80047da:	4658      	mov	r0, fp
 80047dc:	f002 f9b6 	bl	8006b4c <__ssprint_r>
 80047e0:	2800      	cmp	r0, #0
 80047e2:	f040 8692 	bne.w	800550a <_svfprintf_r+0xec2>
 80047e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80047e8:	e77e      	b.n	80046e8 <_svfprintf_r+0xa0>
 80047ea:	2301      	movs	r3, #1
 80047ec:	222b      	movs	r2, #43	; 0x2b
 80047ee:	9905      	ldr	r1, [sp, #20]
 80047f0:	e78b      	b.n	800470a <_svfprintf_r+0xc2>
 80047f2:	460f      	mov	r7, r1
 80047f4:	e7fb      	b.n	80047ee <_svfprintf_r+0x1a6>
 80047f6:	b10b      	cbz	r3, 80047fc <_svfprintf_r+0x1b4>
 80047f8:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80047fc:	06ae      	lsls	r6, r5, #26
 80047fe:	f140 80aa 	bpl.w	8004956 <_svfprintf_r+0x30e>
 8004802:	3707      	adds	r7, #7
 8004804:	f027 0707 	bic.w	r7, r7, #7
 8004808:	f107 0308 	add.w	r3, r7, #8
 800480c:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004810:	9304      	str	r3, [sp, #16]
 8004812:	2e00      	cmp	r6, #0
 8004814:	f177 0300 	sbcs.w	r3, r7, #0
 8004818:	da06      	bge.n	8004828 <_svfprintf_r+0x1e0>
 800481a:	4276      	negs	r6, r6
 800481c:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8004820:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8004824:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004828:	2301      	movs	r3, #1
 800482a:	e2ca      	b.n	8004dc2 <_svfprintf_r+0x77a>
 800482c:	b10b      	cbz	r3, 8004832 <_svfprintf_r+0x1ea>
 800482e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004832:	4b37      	ldr	r3, [pc, #220]	; (8004910 <_svfprintf_r+0x2c8>)
 8004834:	9311      	str	r3, [sp, #68]	; 0x44
 8004836:	06ab      	lsls	r3, r5, #26
 8004838:	f140 8339 	bpl.w	8004eae <_svfprintf_r+0x866>
 800483c:	3707      	adds	r7, #7
 800483e:	f027 0707 	bic.w	r7, r7, #7
 8004842:	f107 0308 	add.w	r3, r7, #8
 8004846:	e9d7 6700 	ldrd	r6, r7, [r7]
 800484a:	9304      	str	r3, [sp, #16]
 800484c:	07e8      	lsls	r0, r5, #31
 800484e:	d50b      	bpl.n	8004868 <_svfprintf_r+0x220>
 8004850:	ea56 0307 	orrs.w	r3, r6, r7
 8004854:	d008      	beq.n	8004868 <_svfprintf_r+0x220>
 8004856:	2330      	movs	r3, #48	; 0x30
 8004858:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800485c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004860:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8004864:	f045 0502 	orr.w	r5, r5, #2
 8004868:	2302      	movs	r3, #2
 800486a:	e2a7      	b.n	8004dbc <_svfprintf_r+0x774>
 800486c:	2a00      	cmp	r2, #0
 800486e:	d1be      	bne.n	80047ee <_svfprintf_r+0x1a6>
 8004870:	2301      	movs	r3, #1
 8004872:	2220      	movs	r2, #32
 8004874:	e7bb      	b.n	80047ee <_svfprintf_r+0x1a6>
 8004876:	f045 0501 	orr.w	r5, r5, #1
 800487a:	e7b8      	b.n	80047ee <_svfprintf_r+0x1a6>
 800487c:	683e      	ldr	r6, [r7, #0]
 800487e:	960a      	str	r6, [sp, #40]	; 0x28
 8004880:	2e00      	cmp	r6, #0
 8004882:	f107 0104 	add.w	r1, r7, #4
 8004886:	dab4      	bge.n	80047f2 <_svfprintf_r+0x1aa>
 8004888:	4276      	negs	r6, r6
 800488a:	960a      	str	r6, [sp, #40]	; 0x28
 800488c:	460f      	mov	r7, r1
 800488e:	f045 0504 	orr.w	r5, r5, #4
 8004892:	e7ac      	b.n	80047ee <_svfprintf_r+0x1a6>
 8004894:	9905      	ldr	r1, [sp, #20]
 8004896:	1c4e      	adds	r6, r1, #1
 8004898:	7809      	ldrb	r1, [r1, #0]
 800489a:	9102      	str	r1, [sp, #8]
 800489c:	292a      	cmp	r1, #42	; 0x2a
 800489e:	d010      	beq.n	80048c2 <_svfprintf_r+0x27a>
 80048a0:	f04f 0900 	mov.w	r9, #0
 80048a4:	9605      	str	r6, [sp, #20]
 80048a6:	9902      	ldr	r1, [sp, #8]
 80048a8:	3930      	subs	r1, #48	; 0x30
 80048aa:	2909      	cmp	r1, #9
 80048ac:	f63f af31 	bhi.w	8004712 <_svfprintf_r+0xca>
 80048b0:	fb00 1909 	mla	r9, r0, r9, r1
 80048b4:	9905      	ldr	r1, [sp, #20]
 80048b6:	460e      	mov	r6, r1
 80048b8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80048bc:	9102      	str	r1, [sp, #8]
 80048be:	9605      	str	r6, [sp, #20]
 80048c0:	e7f1      	b.n	80048a6 <_svfprintf_r+0x25e>
 80048c2:	6839      	ldr	r1, [r7, #0]
 80048c4:	9605      	str	r6, [sp, #20]
 80048c6:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 80048ca:	3704      	adds	r7, #4
 80048cc:	e78f      	b.n	80047ee <_svfprintf_r+0x1a6>
 80048ce:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80048d2:	e78c      	b.n	80047ee <_svfprintf_r+0x1a6>
 80048d4:	2100      	movs	r1, #0
 80048d6:	910a      	str	r1, [sp, #40]	; 0x28
 80048d8:	9902      	ldr	r1, [sp, #8]
 80048da:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80048dc:	3930      	subs	r1, #48	; 0x30
 80048de:	fb00 1106 	mla	r1, r0, r6, r1
 80048e2:	910a      	str	r1, [sp, #40]	; 0x28
 80048e4:	9905      	ldr	r1, [sp, #20]
 80048e6:	460e      	mov	r6, r1
 80048e8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80048ec:	9102      	str	r1, [sp, #8]
 80048ee:	9902      	ldr	r1, [sp, #8]
 80048f0:	9605      	str	r6, [sp, #20]
 80048f2:	3930      	subs	r1, #48	; 0x30
 80048f4:	2909      	cmp	r1, #9
 80048f6:	d9ef      	bls.n	80048d8 <_svfprintf_r+0x290>
 80048f8:	e70b      	b.n	8004712 <_svfprintf_r+0xca>
 80048fa:	f045 0508 	orr.w	r5, r5, #8
 80048fe:	e776      	b.n	80047ee <_svfprintf_r+0x1a6>
 8004900:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8004904:	e773      	b.n	80047ee <_svfprintf_r+0x1a6>
 8004906:	bf00      	nop
	...
 8004910:	0800750c 	.word	0x0800750c
 8004914:	9905      	ldr	r1, [sp, #20]
 8004916:	7809      	ldrb	r1, [r1, #0]
 8004918:	296c      	cmp	r1, #108	; 0x6c
 800491a:	d105      	bne.n	8004928 <_svfprintf_r+0x2e0>
 800491c:	9905      	ldr	r1, [sp, #20]
 800491e:	3101      	adds	r1, #1
 8004920:	9105      	str	r1, [sp, #20]
 8004922:	f045 0520 	orr.w	r5, r5, #32
 8004926:	e762      	b.n	80047ee <_svfprintf_r+0x1a6>
 8004928:	f045 0510 	orr.w	r5, r5, #16
 800492c:	e75f      	b.n	80047ee <_svfprintf_r+0x1a6>
 800492e:	1d3b      	adds	r3, r7, #4
 8004930:	9304      	str	r3, [sp, #16]
 8004932:	2600      	movs	r6, #0
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 800493a:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 800493e:	f04f 0901 	mov.w	r9, #1
 8004942:	4637      	mov	r7, r6
 8004944:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8004948:	e11b      	b.n	8004b82 <_svfprintf_r+0x53a>
 800494a:	b10b      	cbz	r3, 8004950 <_svfprintf_r+0x308>
 800494c:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004950:	f045 0510 	orr.w	r5, r5, #16
 8004954:	e752      	b.n	80047fc <_svfprintf_r+0x1b4>
 8004956:	f015 0f10 	tst.w	r5, #16
 800495a:	f107 0304 	add.w	r3, r7, #4
 800495e:	d003      	beq.n	8004968 <_svfprintf_r+0x320>
 8004960:	683e      	ldr	r6, [r7, #0]
 8004962:	9304      	str	r3, [sp, #16]
 8004964:	17f7      	asrs	r7, r6, #31
 8004966:	e754      	b.n	8004812 <_svfprintf_r+0x1ca>
 8004968:	683e      	ldr	r6, [r7, #0]
 800496a:	9304      	str	r3, [sp, #16]
 800496c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004970:	bf18      	it	ne
 8004972:	b236      	sxthne	r6, r6
 8004974:	e7f6      	b.n	8004964 <_svfprintf_r+0x31c>
 8004976:	b10b      	cbz	r3, 800497c <_svfprintf_r+0x334>
 8004978:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800497c:	3707      	adds	r7, #7
 800497e:	f027 0707 	bic.w	r7, r7, #7
 8004982:	f107 0308 	add.w	r3, r7, #8
 8004986:	9304      	str	r3, [sp, #16]
 8004988:	ed97 7b00 	vldr	d7, [r7]
 800498c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004990:	9b06      	ldr	r3, [sp, #24]
 8004992:	9312      	str	r3, [sp, #72]	; 0x48
 8004994:	9b07      	ldr	r3, [sp, #28]
 8004996:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800499a:	9313      	str	r3, [sp, #76]	; 0x4c
 800499c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049a0:	4b4a      	ldr	r3, [pc, #296]	; (8004acc <_svfprintf_r+0x484>)
 80049a2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80049a6:	f7fc f8c5 	bl	8000b34 <__aeabi_dcmpun>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	f040 85d5 	bne.w	800555a <_svfprintf_r+0xf12>
 80049b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049b4:	4b45      	ldr	r3, [pc, #276]	; (8004acc <_svfprintf_r+0x484>)
 80049b6:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80049ba:	f7fc f89d 	bl	8000af8 <__aeabi_dcmple>
 80049be:	2800      	cmp	r0, #0
 80049c0:	f040 85cb 	bne.w	800555a <_svfprintf_r+0xf12>
 80049c4:	2200      	movs	r2, #0
 80049c6:	2300      	movs	r3, #0
 80049c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049cc:	f7fc f88a 	bl	8000ae4 <__aeabi_dcmplt>
 80049d0:	b110      	cbz	r0, 80049d8 <_svfprintf_r+0x390>
 80049d2:	232d      	movs	r3, #45	; 0x2d
 80049d4:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80049d8:	4b3d      	ldr	r3, [pc, #244]	; (8004ad0 <_svfprintf_r+0x488>)
 80049da:	4a3e      	ldr	r2, [pc, #248]	; (8004ad4 <_svfprintf_r+0x48c>)
 80049dc:	9902      	ldr	r1, [sp, #8]
 80049de:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80049e2:	2947      	cmp	r1, #71	; 0x47
 80049e4:	bfcc      	ite	gt
 80049e6:	4690      	movgt	r8, r2
 80049e8:	4698      	movle	r8, r3
 80049ea:	f04f 0903 	mov.w	r9, #3
 80049ee:	2600      	movs	r6, #0
 80049f0:	4637      	mov	r7, r6
 80049f2:	e0c6      	b.n	8004b82 <_svfprintf_r+0x53a>
 80049f4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 80049f8:	d022      	beq.n	8004a40 <_svfprintf_r+0x3f8>
 80049fa:	9b02      	ldr	r3, [sp, #8]
 80049fc:	f023 0320 	bic.w	r3, r3, #32
 8004a00:	2b47      	cmp	r3, #71	; 0x47
 8004a02:	d104      	bne.n	8004a0e <_svfprintf_r+0x3c6>
 8004a04:	f1b9 0f00 	cmp.w	r9, #0
 8004a08:	bf08      	it	eq
 8004a0a:	f04f 0901 	moveq.w	r9, #1
 8004a0e:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 8004a12:	930c      	str	r3, [sp, #48]	; 0x30
 8004a14:	9b07      	ldr	r3, [sp, #28]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	da15      	bge.n	8004a46 <_svfprintf_r+0x3fe>
 8004a1a:	9b06      	ldr	r3, [sp, #24]
 8004a1c:	930e      	str	r3, [sp, #56]	; 0x38
 8004a1e:	9b07      	ldr	r3, [sp, #28]
 8004a20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a24:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a26:	232d      	movs	r3, #45	; 0x2d
 8004a28:	930b      	str	r3, [sp, #44]	; 0x2c
 8004a2a:	9b02      	ldr	r3, [sp, #8]
 8004a2c:	f023 0720 	bic.w	r7, r3, #32
 8004a30:	2f46      	cmp	r7, #70	; 0x46
 8004a32:	d00e      	beq.n	8004a52 <_svfprintf_r+0x40a>
 8004a34:	2f45      	cmp	r7, #69	; 0x45
 8004a36:	d146      	bne.n	8004ac6 <_svfprintf_r+0x47e>
 8004a38:	f109 0601 	add.w	r6, r9, #1
 8004a3c:	2102      	movs	r1, #2
 8004a3e:	e00a      	b.n	8004a56 <_svfprintf_r+0x40e>
 8004a40:	f04f 0906 	mov.w	r9, #6
 8004a44:	e7e3      	b.n	8004a0e <_svfprintf_r+0x3c6>
 8004a46:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004a50:	e7ea      	b.n	8004a28 <_svfprintf_r+0x3e0>
 8004a52:	464e      	mov	r6, r9
 8004a54:	2103      	movs	r1, #3
 8004a56:	ab1d      	add	r3, sp, #116	; 0x74
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	ab1a      	add	r3, sp, #104	; 0x68
 8004a5c:	9300      	str	r3, [sp, #0]
 8004a5e:	4632      	mov	r2, r6
 8004a60:	ab19      	add	r3, sp, #100	; 0x64
 8004a62:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8004a66:	4658      	mov	r0, fp
 8004a68:	f000 fe8e 	bl	8005788 <_dtoa_r>
 8004a6c:	2f47      	cmp	r7, #71	; 0x47
 8004a6e:	4680      	mov	r8, r0
 8004a70:	d102      	bne.n	8004a78 <_svfprintf_r+0x430>
 8004a72:	07e8      	lsls	r0, r5, #31
 8004a74:	f140 857e 	bpl.w	8005574 <_svfprintf_r+0xf2c>
 8004a78:	eb08 0306 	add.w	r3, r8, r6
 8004a7c:	2f46      	cmp	r7, #70	; 0x46
 8004a7e:	9303      	str	r3, [sp, #12]
 8004a80:	d111      	bne.n	8004aa6 <_svfprintf_r+0x45e>
 8004a82:	f898 3000 	ldrb.w	r3, [r8]
 8004a86:	2b30      	cmp	r3, #48	; 0x30
 8004a88:	d109      	bne.n	8004a9e <_svfprintf_r+0x456>
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004a92:	f7fc f81d 	bl	8000ad0 <__aeabi_dcmpeq>
 8004a96:	b910      	cbnz	r0, 8004a9e <_svfprintf_r+0x456>
 8004a98:	f1c6 0601 	rsb	r6, r6, #1
 8004a9c:	9619      	str	r6, [sp, #100]	; 0x64
 8004a9e:	9a03      	ldr	r2, [sp, #12]
 8004aa0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004aa2:	441a      	add	r2, r3
 8004aa4:	9203      	str	r2, [sp, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004aae:	f7fc f80f 	bl	8000ad0 <__aeabi_dcmpeq>
 8004ab2:	b988      	cbnz	r0, 8004ad8 <_svfprintf_r+0x490>
 8004ab4:	2230      	movs	r2, #48	; 0x30
 8004ab6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ab8:	9903      	ldr	r1, [sp, #12]
 8004aba:	4299      	cmp	r1, r3
 8004abc:	d90e      	bls.n	8004adc <_svfprintf_r+0x494>
 8004abe:	1c59      	adds	r1, r3, #1
 8004ac0:	911d      	str	r1, [sp, #116]	; 0x74
 8004ac2:	701a      	strb	r2, [r3, #0]
 8004ac4:	e7f7      	b.n	8004ab6 <_svfprintf_r+0x46e>
 8004ac6:	464e      	mov	r6, r9
 8004ac8:	e7b8      	b.n	8004a3c <_svfprintf_r+0x3f4>
 8004aca:	bf00      	nop
 8004acc:	7fefffff 	.word	0x7fefffff
 8004ad0:	080074fc 	.word	0x080074fc
 8004ad4:	08007500 	.word	0x08007500
 8004ad8:	9b03      	ldr	r3, [sp, #12]
 8004ada:	931d      	str	r3, [sp, #116]	; 0x74
 8004adc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ade:	2f47      	cmp	r7, #71	; 0x47
 8004ae0:	eba3 0308 	sub.w	r3, r3, r8
 8004ae4:	9303      	str	r3, [sp, #12]
 8004ae6:	f040 80fa 	bne.w	8004cde <_svfprintf_r+0x696>
 8004aea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004aec:	1cd9      	adds	r1, r3, #3
 8004aee:	db02      	blt.n	8004af6 <_svfprintf_r+0x4ae>
 8004af0:	4599      	cmp	r9, r3
 8004af2:	f280 8120 	bge.w	8004d36 <_svfprintf_r+0x6ee>
 8004af6:	9b02      	ldr	r3, [sp, #8]
 8004af8:	3b02      	subs	r3, #2
 8004afa:	9302      	str	r3, [sp, #8]
 8004afc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004afe:	f89d 1008 	ldrb.w	r1, [sp, #8]
 8004b02:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 8004b06:	1e53      	subs	r3, r2, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	9319      	str	r3, [sp, #100]	; 0x64
 8004b0c:	bfb6      	itet	lt
 8004b0e:	f1c2 0301 	rsblt	r3, r2, #1
 8004b12:	222b      	movge	r2, #43	; 0x2b
 8004b14:	222d      	movlt	r2, #45	; 0x2d
 8004b16:	2b09      	cmp	r3, #9
 8004b18:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8004b1c:	f340 80fb 	ble.w	8004d16 <_svfprintf_r+0x6ce>
 8004b20:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 8004b24:	260a      	movs	r6, #10
 8004b26:	fb93 f0f6 	sdiv	r0, r3, r6
 8004b2a:	fb06 3310 	mls	r3, r6, r0, r3
 8004b2e:	3330      	adds	r3, #48	; 0x30
 8004b30:	2809      	cmp	r0, #9
 8004b32:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004b36:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	f300 80e4 	bgt.w	8004d08 <_svfprintf_r+0x6c0>
 8004b40:	3330      	adds	r3, #48	; 0x30
 8004b42:	f801 3c01 	strb.w	r3, [r1, #-1]
 8004b46:	3a02      	subs	r2, #2
 8004b48:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8004b4c:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8004b50:	4282      	cmp	r2, r0
 8004b52:	4619      	mov	r1, r3
 8004b54:	f0c0 80da 	bcc.w	8004d0c <_svfprintf_r+0x6c4>
 8004b58:	9a03      	ldr	r2, [sp, #12]
 8004b5a:	ab1b      	add	r3, sp, #108	; 0x6c
 8004b5c:	1acb      	subs	r3, r1, r3
 8004b5e:	2a01      	cmp	r2, #1
 8004b60:	9310      	str	r3, [sp, #64]	; 0x40
 8004b62:	eb03 0902 	add.w	r9, r3, r2
 8004b66:	dc02      	bgt.n	8004b6e <_svfprintf_r+0x526>
 8004b68:	f015 0701 	ands.w	r7, r5, #1
 8004b6c:	d002      	beq.n	8004b74 <_svfprintf_r+0x52c>
 8004b6e:	9b08      	ldr	r3, [sp, #32]
 8004b70:	2700      	movs	r7, #0
 8004b72:	4499      	add	r9, r3
 8004b74:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b76:	b113      	cbz	r3, 8004b7e <_svfprintf_r+0x536>
 8004b78:	232d      	movs	r3, #45	; 0x2d
 8004b7a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004b7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b80:	2600      	movs	r6, #0
 8004b82:	454e      	cmp	r6, r9
 8004b84:	4633      	mov	r3, r6
 8004b86:	bfb8      	it	lt
 8004b88:	464b      	movlt	r3, r9
 8004b8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b8c:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8004b90:	b113      	cbz	r3, 8004b98 <_svfprintf_r+0x550>
 8004b92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b94:	3301      	adds	r3, #1
 8004b96:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b98:	f015 0302 	ands.w	r3, r5, #2
 8004b9c:	9314      	str	r3, [sp, #80]	; 0x50
 8004b9e:	bf1e      	ittt	ne
 8004ba0:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8004ba2:	3302      	addne	r3, #2
 8004ba4:	930b      	strne	r3, [sp, #44]	; 0x2c
 8004ba6:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8004baa:	9315      	str	r3, [sp, #84]	; 0x54
 8004bac:	d118      	bne.n	8004be0 <_svfprintf_r+0x598>
 8004bae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	930c      	str	r3, [sp, #48]	; 0x30
 8004bb8:	dd12      	ble.n	8004be0 <_svfprintf_r+0x598>
 8004bba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	4ba9      	ldr	r3, [pc, #676]	; (8004e64 <_svfprintf_r+0x81c>)
 8004bc0:	6023      	str	r3, [r4, #0]
 8004bc2:	f300 81d5 	bgt.w	8004f70 <_svfprintf_r+0x928>
 8004bc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004bc8:	6063      	str	r3, [r4, #4]
 8004bca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004bcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bce:	4413      	add	r3, r2
 8004bd0:	9321      	str	r3, [sp, #132]	; 0x84
 8004bd2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	2b07      	cmp	r3, #7
 8004bd8:	9320      	str	r3, [sp, #128]	; 0x80
 8004bda:	f300 81e2 	bgt.w	8004fa2 <_svfprintf_r+0x95a>
 8004bde:	3408      	adds	r4, #8
 8004be0:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8004be4:	b173      	cbz	r3, 8004c04 <_svfprintf_r+0x5bc>
 8004be6:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8004bea:	6023      	str	r3, [r4, #0]
 8004bec:	2301      	movs	r3, #1
 8004bee:	6063      	str	r3, [r4, #4]
 8004bf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	9321      	str	r3, [sp, #132]	; 0x84
 8004bf6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	2b07      	cmp	r3, #7
 8004bfc:	9320      	str	r3, [sp, #128]	; 0x80
 8004bfe:	f300 81da 	bgt.w	8004fb6 <_svfprintf_r+0x96e>
 8004c02:	3408      	adds	r4, #8
 8004c04:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c06:	b16b      	cbz	r3, 8004c24 <_svfprintf_r+0x5dc>
 8004c08:	ab18      	add	r3, sp, #96	; 0x60
 8004c0a:	6023      	str	r3, [r4, #0]
 8004c0c:	2302      	movs	r3, #2
 8004c0e:	6063      	str	r3, [r4, #4]
 8004c10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c12:	3302      	adds	r3, #2
 8004c14:	9321      	str	r3, [sp, #132]	; 0x84
 8004c16:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c18:	3301      	adds	r3, #1
 8004c1a:	2b07      	cmp	r3, #7
 8004c1c:	9320      	str	r3, [sp, #128]	; 0x80
 8004c1e:	f300 81d4 	bgt.w	8004fca <_svfprintf_r+0x982>
 8004c22:	3408      	adds	r4, #8
 8004c24:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004c26:	2b80      	cmp	r3, #128	; 0x80
 8004c28:	d114      	bne.n	8004c54 <_svfprintf_r+0x60c>
 8004c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c2c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	dd0f      	ble.n	8004c54 <_svfprintf_r+0x60c>
 8004c34:	4a8c      	ldr	r2, [pc, #560]	; (8004e68 <_svfprintf_r+0x820>)
 8004c36:	6022      	str	r2, [r4, #0]
 8004c38:	2b10      	cmp	r3, #16
 8004c3a:	f300 81d0 	bgt.w	8004fde <_svfprintf_r+0x996>
 8004c3e:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004c40:	6063      	str	r3, [r4, #4]
 8004c42:	4413      	add	r3, r2
 8004c44:	9321      	str	r3, [sp, #132]	; 0x84
 8004c46:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c48:	3301      	adds	r3, #1
 8004c4a:	2b07      	cmp	r3, #7
 8004c4c:	9320      	str	r3, [sp, #128]	; 0x80
 8004c4e:	f300 81df 	bgt.w	8005010 <_svfprintf_r+0x9c8>
 8004c52:	3408      	adds	r4, #8
 8004c54:	eba6 0609 	sub.w	r6, r6, r9
 8004c58:	2e00      	cmp	r6, #0
 8004c5a:	dd0f      	ble.n	8004c7c <_svfprintf_r+0x634>
 8004c5c:	4b82      	ldr	r3, [pc, #520]	; (8004e68 <_svfprintf_r+0x820>)
 8004c5e:	6023      	str	r3, [r4, #0]
 8004c60:	2e10      	cmp	r6, #16
 8004c62:	f300 81df 	bgt.w	8005024 <_svfprintf_r+0x9dc>
 8004c66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c68:	9821      	ldr	r0, [sp, #132]	; 0x84
 8004c6a:	6066      	str	r6, [r4, #4]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	4406      	add	r6, r0
 8004c70:	2b07      	cmp	r3, #7
 8004c72:	9621      	str	r6, [sp, #132]	; 0x84
 8004c74:	9320      	str	r3, [sp, #128]	; 0x80
 8004c76:	f300 81ec 	bgt.w	8005052 <_svfprintf_r+0xa0a>
 8004c7a:	3408      	adds	r4, #8
 8004c7c:	05eb      	lsls	r3, r5, #23
 8004c7e:	f100 81f2 	bmi.w	8005066 <_svfprintf_r+0xa1e>
 8004c82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c84:	e884 0300 	stmia.w	r4, {r8, r9}
 8004c88:	444b      	add	r3, r9
 8004c8a:	9321      	str	r3, [sp, #132]	; 0x84
 8004c8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c8e:	3301      	adds	r3, #1
 8004c90:	2b07      	cmp	r3, #7
 8004c92:	9320      	str	r3, [sp, #128]	; 0x80
 8004c94:	f340 8419 	ble.w	80054ca <_svfprintf_r+0xe82>
 8004c98:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c9a:	4651      	mov	r1, sl
 8004c9c:	4658      	mov	r0, fp
 8004c9e:	f001 ff55 	bl	8006b4c <__ssprint_r>
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	f040 8431 	bne.w	800550a <_svfprintf_r+0xec2>
 8004ca8:	ac2c      	add	r4, sp, #176	; 0xb0
 8004caa:	076b      	lsls	r3, r5, #29
 8004cac:	f100 8410 	bmi.w	80054d0 <_svfprintf_r+0xe88>
 8004cb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cb2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004cb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004cb6:	428a      	cmp	r2, r1
 8004cb8:	bfac      	ite	ge
 8004cba:	189b      	addge	r3, r3, r2
 8004cbc:	185b      	addlt	r3, r3, r1
 8004cbe:	9309      	str	r3, [sp, #36]	; 0x24
 8004cc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cc2:	b13b      	cbz	r3, 8004cd4 <_svfprintf_r+0x68c>
 8004cc4:	aa1f      	add	r2, sp, #124	; 0x7c
 8004cc6:	4651      	mov	r1, sl
 8004cc8:	4658      	mov	r0, fp
 8004cca:	f001 ff3f 	bl	8006b4c <__ssprint_r>
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	f040 841b 	bne.w	800550a <_svfprintf_r+0xec2>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	9320      	str	r3, [sp, #128]	; 0x80
 8004cd8:	9f04      	ldr	r7, [sp, #16]
 8004cda:	ac2c      	add	r4, sp, #176	; 0xb0
 8004cdc:	e4ee      	b.n	80046bc <_svfprintf_r+0x74>
 8004cde:	9b02      	ldr	r3, [sp, #8]
 8004ce0:	2b65      	cmp	r3, #101	; 0x65
 8004ce2:	f77f af0b 	ble.w	8004afc <_svfprintf_r+0x4b4>
 8004ce6:	9b02      	ldr	r3, [sp, #8]
 8004ce8:	2b66      	cmp	r3, #102	; 0x66
 8004cea:	d124      	bne.n	8004d36 <_svfprintf_r+0x6ee>
 8004cec:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	dd19      	ble.n	8004d26 <_svfprintf_r+0x6de>
 8004cf2:	f1b9 0f00 	cmp.w	r9, #0
 8004cf6:	d101      	bne.n	8004cfc <_svfprintf_r+0x6b4>
 8004cf8:	07ea      	lsls	r2, r5, #31
 8004cfa:	d502      	bpl.n	8004d02 <_svfprintf_r+0x6ba>
 8004cfc:	9a08      	ldr	r2, [sp, #32]
 8004cfe:	4413      	add	r3, r2
 8004d00:	444b      	add	r3, r9
 8004d02:	9f19      	ldr	r7, [sp, #100]	; 0x64
 8004d04:	4699      	mov	r9, r3
 8004d06:	e735      	b.n	8004b74 <_svfprintf_r+0x52c>
 8004d08:	460a      	mov	r2, r1
 8004d0a:	e70c      	b.n	8004b26 <_svfprintf_r+0x4de>
 8004d0c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004d10:	f803 1b01 	strb.w	r1, [r3], #1
 8004d14:	e71c      	b.n	8004b50 <_svfprintf_r+0x508>
 8004d16:	2230      	movs	r2, #48	; 0x30
 8004d18:	4413      	add	r3, r2
 8004d1a:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8004d1e:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8004d22:	a91c      	add	r1, sp, #112	; 0x70
 8004d24:	e718      	b.n	8004b58 <_svfprintf_r+0x510>
 8004d26:	f1b9 0f00 	cmp.w	r9, #0
 8004d2a:	d101      	bne.n	8004d30 <_svfprintf_r+0x6e8>
 8004d2c:	07eb      	lsls	r3, r5, #31
 8004d2e:	d515      	bpl.n	8004d5c <_svfprintf_r+0x714>
 8004d30:	9b08      	ldr	r3, [sp, #32]
 8004d32:	3301      	adds	r3, #1
 8004d34:	e7e4      	b.n	8004d00 <_svfprintf_r+0x6b8>
 8004d36:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004d38:	9b03      	ldr	r3, [sp, #12]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	db06      	blt.n	8004d4c <_svfprintf_r+0x704>
 8004d3e:	07ef      	lsls	r7, r5, #31
 8004d40:	d50e      	bpl.n	8004d60 <_svfprintf_r+0x718>
 8004d42:	9b08      	ldr	r3, [sp, #32]
 8004d44:	4413      	add	r3, r2
 8004d46:	2267      	movs	r2, #103	; 0x67
 8004d48:	9202      	str	r2, [sp, #8]
 8004d4a:	e7da      	b.n	8004d02 <_svfprintf_r+0x6ba>
 8004d4c:	9b03      	ldr	r3, [sp, #12]
 8004d4e:	9908      	ldr	r1, [sp, #32]
 8004d50:	2a00      	cmp	r2, #0
 8004d52:	440b      	add	r3, r1
 8004d54:	dcf7      	bgt.n	8004d46 <_svfprintf_r+0x6fe>
 8004d56:	f1c2 0201 	rsb	r2, r2, #1
 8004d5a:	e7f3      	b.n	8004d44 <_svfprintf_r+0x6fc>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e7d0      	b.n	8004d02 <_svfprintf_r+0x6ba>
 8004d60:	4613      	mov	r3, r2
 8004d62:	e7f0      	b.n	8004d46 <_svfprintf_r+0x6fe>
 8004d64:	b10b      	cbz	r3, 8004d6a <_svfprintf_r+0x722>
 8004d66:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004d6a:	f015 0f20 	tst.w	r5, #32
 8004d6e:	f107 0304 	add.w	r3, r7, #4
 8004d72:	d008      	beq.n	8004d86 <_svfprintf_r+0x73e>
 8004d74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	17ce      	asrs	r6, r1, #31
 8004d7a:	4608      	mov	r0, r1
 8004d7c:	4631      	mov	r1, r6
 8004d7e:	e9c2 0100 	strd	r0, r1, [r2]
 8004d82:	461f      	mov	r7, r3
 8004d84:	e49a      	b.n	80046bc <_svfprintf_r+0x74>
 8004d86:	06ee      	lsls	r6, r5, #27
 8004d88:	d503      	bpl.n	8004d92 <_svfprintf_r+0x74a>
 8004d8a:	683a      	ldr	r2, [r7, #0]
 8004d8c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d8e:	6011      	str	r1, [r2, #0]
 8004d90:	e7f7      	b.n	8004d82 <_svfprintf_r+0x73a>
 8004d92:	0668      	lsls	r0, r5, #25
 8004d94:	d5f9      	bpl.n	8004d8a <_svfprintf_r+0x742>
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8004d9c:	8011      	strh	r1, [r2, #0]
 8004d9e:	e7f0      	b.n	8004d82 <_svfprintf_r+0x73a>
 8004da0:	f045 0510 	orr.w	r5, r5, #16
 8004da4:	f015 0320 	ands.w	r3, r5, #32
 8004da8:	d022      	beq.n	8004df0 <_svfprintf_r+0x7a8>
 8004daa:	3707      	adds	r7, #7
 8004dac:	f027 0707 	bic.w	r7, r7, #7
 8004db0:	f107 0308 	add.w	r3, r7, #8
 8004db4:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004db8:	9304      	str	r3, [sp, #16]
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004dc2:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004dc6:	f000 83db 	beq.w	8005580 <_svfprintf_r+0xf38>
 8004dca:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8004dce:	920b      	str	r2, [sp, #44]	; 0x2c
 8004dd0:	ea56 0207 	orrs.w	r2, r6, r7
 8004dd4:	f040 83d9 	bne.w	800558a <_svfprintf_r+0xf42>
 8004dd8:	f1b9 0f00 	cmp.w	r9, #0
 8004ddc:	f000 80aa 	beq.w	8004f34 <_svfprintf_r+0x8ec>
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d076      	beq.n	8004ed2 <_svfprintf_r+0x88a>
 8004de4:	2b02      	cmp	r3, #2
 8004de6:	f000 8091 	beq.w	8004f0c <_svfprintf_r+0x8c4>
 8004dea:	2600      	movs	r6, #0
 8004dec:	2700      	movs	r7, #0
 8004dee:	e3d2      	b.n	8005596 <_svfprintf_r+0xf4e>
 8004df0:	1d3a      	adds	r2, r7, #4
 8004df2:	f015 0110 	ands.w	r1, r5, #16
 8004df6:	9204      	str	r2, [sp, #16]
 8004df8:	d002      	beq.n	8004e00 <_svfprintf_r+0x7b8>
 8004dfa:	683e      	ldr	r6, [r7, #0]
 8004dfc:	2700      	movs	r7, #0
 8004dfe:	e7dd      	b.n	8004dbc <_svfprintf_r+0x774>
 8004e00:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8004e04:	d0f9      	beq.n	8004dfa <_svfprintf_r+0x7b2>
 8004e06:	883e      	ldrh	r6, [r7, #0]
 8004e08:	2700      	movs	r7, #0
 8004e0a:	e7d6      	b.n	8004dba <_svfprintf_r+0x772>
 8004e0c:	1d3b      	adds	r3, r7, #4
 8004e0e:	9304      	str	r3, [sp, #16]
 8004e10:	2330      	movs	r3, #48	; 0x30
 8004e12:	2278      	movs	r2, #120	; 0x78
 8004e14:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004e18:	4b14      	ldr	r3, [pc, #80]	; (8004e6c <_svfprintf_r+0x824>)
 8004e1a:	683e      	ldr	r6, [r7, #0]
 8004e1c:	9311      	str	r3, [sp, #68]	; 0x44
 8004e1e:	2700      	movs	r7, #0
 8004e20:	f045 0502 	orr.w	r5, r5, #2
 8004e24:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8004e28:	2302      	movs	r3, #2
 8004e2a:	9202      	str	r2, [sp, #8]
 8004e2c:	e7c6      	b.n	8004dbc <_svfprintf_r+0x774>
 8004e2e:	1d3b      	adds	r3, r7, #4
 8004e30:	2600      	movs	r6, #0
 8004e32:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004e36:	9304      	str	r3, [sp, #16]
 8004e38:	f8d7 8000 	ldr.w	r8, [r7]
 8004e3c:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004e40:	d00a      	beq.n	8004e58 <_svfprintf_r+0x810>
 8004e42:	464a      	mov	r2, r9
 8004e44:	4631      	mov	r1, r6
 8004e46:	4640      	mov	r0, r8
 8004e48:	f7fb f9d2 	bl	80001f0 <memchr>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	f000 808d 	beq.w	8004f6c <_svfprintf_r+0x924>
 8004e52:	eba0 0908 	sub.w	r9, r0, r8
 8004e56:	e5cb      	b.n	80049f0 <_svfprintf_r+0x3a8>
 8004e58:	4640      	mov	r0, r8
 8004e5a:	f7fb f9c1 	bl	80001e0 <strlen>
 8004e5e:	4681      	mov	r9, r0
 8004e60:	e5c6      	b.n	80049f0 <_svfprintf_r+0x3a8>
 8004e62:	bf00      	nop
 8004e64:	08007530 	.word	0x08007530
 8004e68:	08007540 	.word	0x08007540
 8004e6c:	0800751d 	.word	0x0800751d
 8004e70:	f045 0510 	orr.w	r5, r5, #16
 8004e74:	06a9      	lsls	r1, r5, #26
 8004e76:	d509      	bpl.n	8004e8c <_svfprintf_r+0x844>
 8004e78:	3707      	adds	r7, #7
 8004e7a:	f027 0707 	bic.w	r7, r7, #7
 8004e7e:	f107 0308 	add.w	r3, r7, #8
 8004e82:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004e86:	9304      	str	r3, [sp, #16]
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e797      	b.n	8004dbc <_svfprintf_r+0x774>
 8004e8c:	1d3b      	adds	r3, r7, #4
 8004e8e:	f015 0f10 	tst.w	r5, #16
 8004e92:	9304      	str	r3, [sp, #16]
 8004e94:	d001      	beq.n	8004e9a <_svfprintf_r+0x852>
 8004e96:	683e      	ldr	r6, [r7, #0]
 8004e98:	e002      	b.n	8004ea0 <_svfprintf_r+0x858>
 8004e9a:	066a      	lsls	r2, r5, #25
 8004e9c:	d5fb      	bpl.n	8004e96 <_svfprintf_r+0x84e>
 8004e9e:	883e      	ldrh	r6, [r7, #0]
 8004ea0:	2700      	movs	r7, #0
 8004ea2:	e7f1      	b.n	8004e88 <_svfprintf_r+0x840>
 8004ea4:	b10b      	cbz	r3, 8004eaa <_svfprintf_r+0x862>
 8004ea6:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004eaa:	4ba3      	ldr	r3, [pc, #652]	; (8005138 <_svfprintf_r+0xaf0>)
 8004eac:	e4c2      	b.n	8004834 <_svfprintf_r+0x1ec>
 8004eae:	1d3b      	adds	r3, r7, #4
 8004eb0:	f015 0f10 	tst.w	r5, #16
 8004eb4:	9304      	str	r3, [sp, #16]
 8004eb6:	d001      	beq.n	8004ebc <_svfprintf_r+0x874>
 8004eb8:	683e      	ldr	r6, [r7, #0]
 8004eba:	e002      	b.n	8004ec2 <_svfprintf_r+0x87a>
 8004ebc:	066e      	lsls	r6, r5, #25
 8004ebe:	d5fb      	bpl.n	8004eb8 <_svfprintf_r+0x870>
 8004ec0:	883e      	ldrh	r6, [r7, #0]
 8004ec2:	2700      	movs	r7, #0
 8004ec4:	e4c2      	b.n	800484c <_svfprintf_r+0x204>
 8004ec6:	4643      	mov	r3, r8
 8004ec8:	e366      	b.n	8005598 <_svfprintf_r+0xf50>
 8004eca:	2f00      	cmp	r7, #0
 8004ecc:	bf08      	it	eq
 8004ece:	2e0a      	cmpeq	r6, #10
 8004ed0:	d205      	bcs.n	8004ede <_svfprintf_r+0x896>
 8004ed2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8004ed6:	3630      	adds	r6, #48	; 0x30
 8004ed8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8004edc:	e377      	b.n	80055ce <_svfprintf_r+0xf86>
 8004ede:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004ee2:	4630      	mov	r0, r6
 8004ee4:	4639      	mov	r1, r7
 8004ee6:	220a      	movs	r2, #10
 8004ee8:	2300      	movs	r3, #0
 8004eea:	f7fb fe61 	bl	8000bb0 <__aeabi_uldivmod>
 8004eee:	3230      	adds	r2, #48	; 0x30
 8004ef0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	4639      	mov	r1, r7
 8004efa:	220a      	movs	r2, #10
 8004efc:	f7fb fe58 	bl	8000bb0 <__aeabi_uldivmod>
 8004f00:	4606      	mov	r6, r0
 8004f02:	460f      	mov	r7, r1
 8004f04:	ea56 0307 	orrs.w	r3, r6, r7
 8004f08:	d1eb      	bne.n	8004ee2 <_svfprintf_r+0x89a>
 8004f0a:	e360      	b.n	80055ce <_svfprintf_r+0xf86>
 8004f0c:	2600      	movs	r6, #0
 8004f0e:	2700      	movs	r7, #0
 8004f10:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004f14:	f006 030f 	and.w	r3, r6, #15
 8004f18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004f1a:	5cd3      	ldrb	r3, [r2, r3]
 8004f1c:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8004f20:	0933      	lsrs	r3, r6, #4
 8004f22:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8004f26:	093a      	lsrs	r2, r7, #4
 8004f28:	461e      	mov	r6, r3
 8004f2a:	4617      	mov	r7, r2
 8004f2c:	ea56 0307 	orrs.w	r3, r6, r7
 8004f30:	d1f0      	bne.n	8004f14 <_svfprintf_r+0x8cc>
 8004f32:	e34c      	b.n	80055ce <_svfprintf_r+0xf86>
 8004f34:	b93b      	cbnz	r3, 8004f46 <_svfprintf_r+0x8fe>
 8004f36:	07ea      	lsls	r2, r5, #31
 8004f38:	d505      	bpl.n	8004f46 <_svfprintf_r+0x8fe>
 8004f3a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8004f3e:	2330      	movs	r3, #48	; 0x30
 8004f40:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8004f44:	e343      	b.n	80055ce <_svfprintf_r+0xf86>
 8004f46:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004f4a:	e340      	b.n	80055ce <_svfprintf_r+0xf86>
 8004f4c:	b10b      	cbz	r3, 8004f52 <_svfprintf_r+0x90a>
 8004f4e:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004f52:	9b02      	ldr	r3, [sp, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 82f7 	beq.w	8005548 <_svfprintf_r+0xf00>
 8004f5a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004f5e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004f62:	2600      	movs	r6, #0
 8004f64:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004f68:	9704      	str	r7, [sp, #16]
 8004f6a:	e4e8      	b.n	800493e <_svfprintf_r+0x2f6>
 8004f6c:	4606      	mov	r6, r0
 8004f6e:	e53f      	b.n	80049f0 <_svfprintf_r+0x3a8>
 8004f70:	2310      	movs	r3, #16
 8004f72:	6063      	str	r3, [r4, #4]
 8004f74:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004f76:	3310      	adds	r3, #16
 8004f78:	9321      	str	r3, [sp, #132]	; 0x84
 8004f7a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	2b07      	cmp	r3, #7
 8004f80:	9320      	str	r3, [sp, #128]	; 0x80
 8004f82:	dc04      	bgt.n	8004f8e <_svfprintf_r+0x946>
 8004f84:	3408      	adds	r4, #8
 8004f86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004f88:	3b10      	subs	r3, #16
 8004f8a:	930c      	str	r3, [sp, #48]	; 0x30
 8004f8c:	e615      	b.n	8004bba <_svfprintf_r+0x572>
 8004f8e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004f90:	4651      	mov	r1, sl
 8004f92:	4658      	mov	r0, fp
 8004f94:	f001 fdda 	bl	8006b4c <__ssprint_r>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	f040 82b6 	bne.w	800550a <_svfprintf_r+0xec2>
 8004f9e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fa0:	e7f1      	b.n	8004f86 <_svfprintf_r+0x93e>
 8004fa2:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fa4:	4651      	mov	r1, sl
 8004fa6:	4658      	mov	r0, fp
 8004fa8:	f001 fdd0 	bl	8006b4c <__ssprint_r>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f040 82ac 	bne.w	800550a <_svfprintf_r+0xec2>
 8004fb2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fb4:	e614      	b.n	8004be0 <_svfprintf_r+0x598>
 8004fb6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fb8:	4651      	mov	r1, sl
 8004fba:	4658      	mov	r0, fp
 8004fbc:	f001 fdc6 	bl	8006b4c <__ssprint_r>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	f040 82a2 	bne.w	800550a <_svfprintf_r+0xec2>
 8004fc6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fc8:	e61c      	b.n	8004c04 <_svfprintf_r+0x5bc>
 8004fca:	aa1f      	add	r2, sp, #124	; 0x7c
 8004fcc:	4651      	mov	r1, sl
 8004fce:	4658      	mov	r0, fp
 8004fd0:	f001 fdbc 	bl	8006b4c <__ssprint_r>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	f040 8298 	bne.w	800550a <_svfprintf_r+0xec2>
 8004fda:	ac2c      	add	r4, sp, #176	; 0xb0
 8004fdc:	e622      	b.n	8004c24 <_svfprintf_r+0x5dc>
 8004fde:	2210      	movs	r2, #16
 8004fe0:	6062      	str	r2, [r4, #4]
 8004fe2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004fe4:	3210      	adds	r2, #16
 8004fe6:	9221      	str	r2, [sp, #132]	; 0x84
 8004fe8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004fea:	3201      	adds	r2, #1
 8004fec:	2a07      	cmp	r2, #7
 8004fee:	9220      	str	r2, [sp, #128]	; 0x80
 8004ff0:	dc02      	bgt.n	8004ff8 <_svfprintf_r+0x9b0>
 8004ff2:	3408      	adds	r4, #8
 8004ff4:	3b10      	subs	r3, #16
 8004ff6:	e61d      	b.n	8004c34 <_svfprintf_r+0x5ec>
 8004ff8:	aa1f      	add	r2, sp, #124	; 0x7c
 8004ffa:	4651      	mov	r1, sl
 8004ffc:	4658      	mov	r0, fp
 8004ffe:	930c      	str	r3, [sp, #48]	; 0x30
 8005000:	f001 fda4 	bl	8006b4c <__ssprint_r>
 8005004:	2800      	cmp	r0, #0
 8005006:	f040 8280 	bne.w	800550a <_svfprintf_r+0xec2>
 800500a:	ac2c      	add	r4, sp, #176	; 0xb0
 800500c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800500e:	e7f1      	b.n	8004ff4 <_svfprintf_r+0x9ac>
 8005010:	aa1f      	add	r2, sp, #124	; 0x7c
 8005012:	4651      	mov	r1, sl
 8005014:	4658      	mov	r0, fp
 8005016:	f001 fd99 	bl	8006b4c <__ssprint_r>
 800501a:	2800      	cmp	r0, #0
 800501c:	f040 8275 	bne.w	800550a <_svfprintf_r+0xec2>
 8005020:	ac2c      	add	r4, sp, #176	; 0xb0
 8005022:	e617      	b.n	8004c54 <_svfprintf_r+0x60c>
 8005024:	2310      	movs	r3, #16
 8005026:	6063      	str	r3, [r4, #4]
 8005028:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800502a:	3310      	adds	r3, #16
 800502c:	9321      	str	r3, [sp, #132]	; 0x84
 800502e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005030:	3301      	adds	r3, #1
 8005032:	2b07      	cmp	r3, #7
 8005034:	9320      	str	r3, [sp, #128]	; 0x80
 8005036:	dc02      	bgt.n	800503e <_svfprintf_r+0x9f6>
 8005038:	3408      	adds	r4, #8
 800503a:	3e10      	subs	r6, #16
 800503c:	e60e      	b.n	8004c5c <_svfprintf_r+0x614>
 800503e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005040:	4651      	mov	r1, sl
 8005042:	4658      	mov	r0, fp
 8005044:	f001 fd82 	bl	8006b4c <__ssprint_r>
 8005048:	2800      	cmp	r0, #0
 800504a:	f040 825e 	bne.w	800550a <_svfprintf_r+0xec2>
 800504e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005050:	e7f3      	b.n	800503a <_svfprintf_r+0x9f2>
 8005052:	aa1f      	add	r2, sp, #124	; 0x7c
 8005054:	4651      	mov	r1, sl
 8005056:	4658      	mov	r0, fp
 8005058:	f001 fd78 	bl	8006b4c <__ssprint_r>
 800505c:	2800      	cmp	r0, #0
 800505e:	f040 8254 	bne.w	800550a <_svfprintf_r+0xec2>
 8005062:	ac2c      	add	r4, sp, #176	; 0xb0
 8005064:	e60a      	b.n	8004c7c <_svfprintf_r+0x634>
 8005066:	9b02      	ldr	r3, [sp, #8]
 8005068:	2b65      	cmp	r3, #101	; 0x65
 800506a:	f340 81a9 	ble.w	80053c0 <_svfprintf_r+0xd78>
 800506e:	2200      	movs	r2, #0
 8005070:	2300      	movs	r3, #0
 8005072:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005076:	f7fb fd2b 	bl	8000ad0 <__aeabi_dcmpeq>
 800507a:	2800      	cmp	r0, #0
 800507c:	d062      	beq.n	8005144 <_svfprintf_r+0xafc>
 800507e:	4b2f      	ldr	r3, [pc, #188]	; (800513c <_svfprintf_r+0xaf4>)
 8005080:	6023      	str	r3, [r4, #0]
 8005082:	2301      	movs	r3, #1
 8005084:	6063      	str	r3, [r4, #4]
 8005086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005088:	3301      	adds	r3, #1
 800508a:	9321      	str	r3, [sp, #132]	; 0x84
 800508c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800508e:	3301      	adds	r3, #1
 8005090:	2b07      	cmp	r3, #7
 8005092:	9320      	str	r3, [sp, #128]	; 0x80
 8005094:	dc25      	bgt.n	80050e2 <_svfprintf_r+0xa9a>
 8005096:	3408      	adds	r4, #8
 8005098:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800509a:	9a03      	ldr	r2, [sp, #12]
 800509c:	4293      	cmp	r3, r2
 800509e:	db02      	blt.n	80050a6 <_svfprintf_r+0xa5e>
 80050a0:	07ee      	lsls	r6, r5, #31
 80050a2:	f57f ae02 	bpl.w	8004caa <_svfprintf_r+0x662>
 80050a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	9b08      	ldr	r3, [sp, #32]
 80050ac:	6063      	str	r3, [r4, #4]
 80050ae:	9a08      	ldr	r2, [sp, #32]
 80050b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050b2:	4413      	add	r3, r2
 80050b4:	9321      	str	r3, [sp, #132]	; 0x84
 80050b6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80050b8:	3301      	adds	r3, #1
 80050ba:	2b07      	cmp	r3, #7
 80050bc:	9320      	str	r3, [sp, #128]	; 0x80
 80050be:	dc1a      	bgt.n	80050f6 <_svfprintf_r+0xaae>
 80050c0:	3408      	adds	r4, #8
 80050c2:	9b03      	ldr	r3, [sp, #12]
 80050c4:	1e5e      	subs	r6, r3, #1
 80050c6:	2e00      	cmp	r6, #0
 80050c8:	f77f adef 	ble.w	8004caa <_svfprintf_r+0x662>
 80050cc:	4f1c      	ldr	r7, [pc, #112]	; (8005140 <_svfprintf_r+0xaf8>)
 80050ce:	f04f 0810 	mov.w	r8, #16
 80050d2:	2e10      	cmp	r6, #16
 80050d4:	6027      	str	r7, [r4, #0]
 80050d6:	dc18      	bgt.n	800510a <_svfprintf_r+0xac2>
 80050d8:	6066      	str	r6, [r4, #4]
 80050da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050dc:	441e      	add	r6, r3
 80050de:	9621      	str	r6, [sp, #132]	; 0x84
 80050e0:	e5d4      	b.n	8004c8c <_svfprintf_r+0x644>
 80050e2:	aa1f      	add	r2, sp, #124	; 0x7c
 80050e4:	4651      	mov	r1, sl
 80050e6:	4658      	mov	r0, fp
 80050e8:	f001 fd30 	bl	8006b4c <__ssprint_r>
 80050ec:	2800      	cmp	r0, #0
 80050ee:	f040 820c 	bne.w	800550a <_svfprintf_r+0xec2>
 80050f2:	ac2c      	add	r4, sp, #176	; 0xb0
 80050f4:	e7d0      	b.n	8005098 <_svfprintf_r+0xa50>
 80050f6:	aa1f      	add	r2, sp, #124	; 0x7c
 80050f8:	4651      	mov	r1, sl
 80050fa:	4658      	mov	r0, fp
 80050fc:	f001 fd26 	bl	8006b4c <__ssprint_r>
 8005100:	2800      	cmp	r0, #0
 8005102:	f040 8202 	bne.w	800550a <_svfprintf_r+0xec2>
 8005106:	ac2c      	add	r4, sp, #176	; 0xb0
 8005108:	e7db      	b.n	80050c2 <_svfprintf_r+0xa7a>
 800510a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800510c:	f8c4 8004 	str.w	r8, [r4, #4]
 8005110:	3310      	adds	r3, #16
 8005112:	9321      	str	r3, [sp, #132]	; 0x84
 8005114:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005116:	3301      	adds	r3, #1
 8005118:	2b07      	cmp	r3, #7
 800511a:	9320      	str	r3, [sp, #128]	; 0x80
 800511c:	dc02      	bgt.n	8005124 <_svfprintf_r+0xadc>
 800511e:	3408      	adds	r4, #8
 8005120:	3e10      	subs	r6, #16
 8005122:	e7d6      	b.n	80050d2 <_svfprintf_r+0xa8a>
 8005124:	aa1f      	add	r2, sp, #124	; 0x7c
 8005126:	4651      	mov	r1, sl
 8005128:	4658      	mov	r0, fp
 800512a:	f001 fd0f 	bl	8006b4c <__ssprint_r>
 800512e:	2800      	cmp	r0, #0
 8005130:	f040 81eb 	bne.w	800550a <_svfprintf_r+0xec2>
 8005134:	ac2c      	add	r4, sp, #176	; 0xb0
 8005136:	e7f3      	b.n	8005120 <_svfprintf_r+0xad8>
 8005138:	0800751d 	.word	0x0800751d
 800513c:	0800752e 	.word	0x0800752e
 8005140:	08007540 	.word	0x08007540
 8005144:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005146:	2b00      	cmp	r3, #0
 8005148:	dc7a      	bgt.n	8005240 <_svfprintf_r+0xbf8>
 800514a:	4b9b      	ldr	r3, [pc, #620]	; (80053b8 <_svfprintf_r+0xd70>)
 800514c:	6023      	str	r3, [r4, #0]
 800514e:	2301      	movs	r3, #1
 8005150:	6063      	str	r3, [r4, #4]
 8005152:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005154:	3301      	adds	r3, #1
 8005156:	9321      	str	r3, [sp, #132]	; 0x84
 8005158:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800515a:	3301      	adds	r3, #1
 800515c:	2b07      	cmp	r3, #7
 800515e:	9320      	str	r3, [sp, #128]	; 0x80
 8005160:	dc44      	bgt.n	80051ec <_svfprintf_r+0xba4>
 8005162:	3408      	adds	r4, #8
 8005164:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005166:	b923      	cbnz	r3, 8005172 <_svfprintf_r+0xb2a>
 8005168:	9b03      	ldr	r3, [sp, #12]
 800516a:	b913      	cbnz	r3, 8005172 <_svfprintf_r+0xb2a>
 800516c:	07e8      	lsls	r0, r5, #31
 800516e:	f57f ad9c 	bpl.w	8004caa <_svfprintf_r+0x662>
 8005172:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005174:	6023      	str	r3, [r4, #0]
 8005176:	9b08      	ldr	r3, [sp, #32]
 8005178:	6063      	str	r3, [r4, #4]
 800517a:	9a08      	ldr	r2, [sp, #32]
 800517c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800517e:	4413      	add	r3, r2
 8005180:	9321      	str	r3, [sp, #132]	; 0x84
 8005182:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005184:	3301      	adds	r3, #1
 8005186:	2b07      	cmp	r3, #7
 8005188:	9320      	str	r3, [sp, #128]	; 0x80
 800518a:	dc39      	bgt.n	8005200 <_svfprintf_r+0xbb8>
 800518c:	f104 0308 	add.w	r3, r4, #8
 8005190:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8005192:	2e00      	cmp	r6, #0
 8005194:	da19      	bge.n	80051ca <_svfprintf_r+0xb82>
 8005196:	4f89      	ldr	r7, [pc, #548]	; (80053bc <_svfprintf_r+0xd74>)
 8005198:	4276      	negs	r6, r6
 800519a:	2410      	movs	r4, #16
 800519c:	2e10      	cmp	r6, #16
 800519e:	601f      	str	r7, [r3, #0]
 80051a0:	dc38      	bgt.n	8005214 <_svfprintf_r+0xbcc>
 80051a2:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80051a4:	605e      	str	r6, [r3, #4]
 80051a6:	4416      	add	r6, r2
 80051a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051aa:	9621      	str	r6, [sp, #132]	; 0x84
 80051ac:	3201      	adds	r2, #1
 80051ae:	2a07      	cmp	r2, #7
 80051b0:	f103 0308 	add.w	r3, r3, #8
 80051b4:	9220      	str	r2, [sp, #128]	; 0x80
 80051b6:	dd08      	ble.n	80051ca <_svfprintf_r+0xb82>
 80051b8:	aa1f      	add	r2, sp, #124	; 0x7c
 80051ba:	4651      	mov	r1, sl
 80051bc:	4658      	mov	r0, fp
 80051be:	f001 fcc5 	bl	8006b4c <__ssprint_r>
 80051c2:	2800      	cmp	r0, #0
 80051c4:	f040 81a1 	bne.w	800550a <_svfprintf_r+0xec2>
 80051c8:	ab2c      	add	r3, sp, #176	; 0xb0
 80051ca:	9a03      	ldr	r2, [sp, #12]
 80051cc:	605a      	str	r2, [r3, #4]
 80051ce:	9903      	ldr	r1, [sp, #12]
 80051d0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80051d2:	f8c3 8000 	str.w	r8, [r3]
 80051d6:	440a      	add	r2, r1
 80051d8:	9221      	str	r2, [sp, #132]	; 0x84
 80051da:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80051dc:	3201      	adds	r2, #1
 80051de:	2a07      	cmp	r2, #7
 80051e0:	9220      	str	r2, [sp, #128]	; 0x80
 80051e2:	f73f ad59 	bgt.w	8004c98 <_svfprintf_r+0x650>
 80051e6:	f103 0408 	add.w	r4, r3, #8
 80051ea:	e55e      	b.n	8004caa <_svfprintf_r+0x662>
 80051ec:	aa1f      	add	r2, sp, #124	; 0x7c
 80051ee:	4651      	mov	r1, sl
 80051f0:	4658      	mov	r0, fp
 80051f2:	f001 fcab 	bl	8006b4c <__ssprint_r>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	f040 8187 	bne.w	800550a <_svfprintf_r+0xec2>
 80051fc:	ac2c      	add	r4, sp, #176	; 0xb0
 80051fe:	e7b1      	b.n	8005164 <_svfprintf_r+0xb1c>
 8005200:	aa1f      	add	r2, sp, #124	; 0x7c
 8005202:	4651      	mov	r1, sl
 8005204:	4658      	mov	r0, fp
 8005206:	f001 fca1 	bl	8006b4c <__ssprint_r>
 800520a:	2800      	cmp	r0, #0
 800520c:	f040 817d 	bne.w	800550a <_svfprintf_r+0xec2>
 8005210:	ab2c      	add	r3, sp, #176	; 0xb0
 8005212:	e7bd      	b.n	8005190 <_svfprintf_r+0xb48>
 8005214:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005216:	605c      	str	r4, [r3, #4]
 8005218:	3210      	adds	r2, #16
 800521a:	9221      	str	r2, [sp, #132]	; 0x84
 800521c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800521e:	3201      	adds	r2, #1
 8005220:	2a07      	cmp	r2, #7
 8005222:	9220      	str	r2, [sp, #128]	; 0x80
 8005224:	dc02      	bgt.n	800522c <_svfprintf_r+0xbe4>
 8005226:	3308      	adds	r3, #8
 8005228:	3e10      	subs	r6, #16
 800522a:	e7b7      	b.n	800519c <_svfprintf_r+0xb54>
 800522c:	aa1f      	add	r2, sp, #124	; 0x7c
 800522e:	4651      	mov	r1, sl
 8005230:	4658      	mov	r0, fp
 8005232:	f001 fc8b 	bl	8006b4c <__ssprint_r>
 8005236:	2800      	cmp	r0, #0
 8005238:	f040 8167 	bne.w	800550a <_svfprintf_r+0xec2>
 800523c:	ab2c      	add	r3, sp, #176	; 0xb0
 800523e:	e7f3      	b.n	8005228 <_svfprintf_r+0xbe0>
 8005240:	9b03      	ldr	r3, [sp, #12]
 8005242:	42bb      	cmp	r3, r7
 8005244:	bfa8      	it	ge
 8005246:	463b      	movge	r3, r7
 8005248:	2b00      	cmp	r3, #0
 800524a:	461e      	mov	r6, r3
 800524c:	dd0b      	ble.n	8005266 <_svfprintf_r+0xc1e>
 800524e:	6063      	str	r3, [r4, #4]
 8005250:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005252:	f8c4 8000 	str.w	r8, [r4]
 8005256:	4433      	add	r3, r6
 8005258:	9321      	str	r3, [sp, #132]	; 0x84
 800525a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800525c:	3301      	adds	r3, #1
 800525e:	2b07      	cmp	r3, #7
 8005260:	9320      	str	r3, [sp, #128]	; 0x80
 8005262:	dc5f      	bgt.n	8005324 <_svfprintf_r+0xcdc>
 8005264:	3408      	adds	r4, #8
 8005266:	2e00      	cmp	r6, #0
 8005268:	bfac      	ite	ge
 800526a:	1bbe      	subge	r6, r7, r6
 800526c:	463e      	movlt	r6, r7
 800526e:	2e00      	cmp	r6, #0
 8005270:	dd0f      	ble.n	8005292 <_svfprintf_r+0xc4a>
 8005272:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80053bc <_svfprintf_r+0xd74>
 8005276:	f8c4 9000 	str.w	r9, [r4]
 800527a:	2e10      	cmp	r6, #16
 800527c:	dc5c      	bgt.n	8005338 <_svfprintf_r+0xcf0>
 800527e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005280:	6066      	str	r6, [r4, #4]
 8005282:	441e      	add	r6, r3
 8005284:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005286:	9621      	str	r6, [sp, #132]	; 0x84
 8005288:	3301      	adds	r3, #1
 800528a:	2b07      	cmp	r3, #7
 800528c:	9320      	str	r3, [sp, #128]	; 0x80
 800528e:	dc6a      	bgt.n	8005366 <_svfprintf_r+0xd1e>
 8005290:	3408      	adds	r4, #8
 8005292:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8005294:	9a03      	ldr	r2, [sp, #12]
 8005296:	4293      	cmp	r3, r2
 8005298:	db01      	blt.n	800529e <_svfprintf_r+0xc56>
 800529a:	07e9      	lsls	r1, r5, #31
 800529c:	d50d      	bpl.n	80052ba <_svfprintf_r+0xc72>
 800529e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	9b08      	ldr	r3, [sp, #32]
 80052a4:	6063      	str	r3, [r4, #4]
 80052a6:	9a08      	ldr	r2, [sp, #32]
 80052a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052aa:	4413      	add	r3, r2
 80052ac:	9321      	str	r3, [sp, #132]	; 0x84
 80052ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80052b0:	3301      	adds	r3, #1
 80052b2:	2b07      	cmp	r3, #7
 80052b4:	9320      	str	r3, [sp, #128]	; 0x80
 80052b6:	dc60      	bgt.n	800537a <_svfprintf_r+0xd32>
 80052b8:	3408      	adds	r4, #8
 80052ba:	9b03      	ldr	r3, [sp, #12]
 80052bc:	9a03      	ldr	r2, [sp, #12]
 80052be:	1bde      	subs	r6, r3, r7
 80052c0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	429e      	cmp	r6, r3
 80052c6:	bfa8      	it	ge
 80052c8:	461e      	movge	r6, r3
 80052ca:	2e00      	cmp	r6, #0
 80052cc:	dd0b      	ble.n	80052e6 <_svfprintf_r+0xc9e>
 80052ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80052d0:	6066      	str	r6, [r4, #4]
 80052d2:	4433      	add	r3, r6
 80052d4:	9321      	str	r3, [sp, #132]	; 0x84
 80052d6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80052d8:	3301      	adds	r3, #1
 80052da:	4447      	add	r7, r8
 80052dc:	2b07      	cmp	r3, #7
 80052de:	6027      	str	r7, [r4, #0]
 80052e0:	9320      	str	r3, [sp, #128]	; 0x80
 80052e2:	dc54      	bgt.n	800538e <_svfprintf_r+0xd46>
 80052e4:	3408      	adds	r4, #8
 80052e6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80052e8:	9a03      	ldr	r2, [sp, #12]
 80052ea:	2e00      	cmp	r6, #0
 80052ec:	eba2 0303 	sub.w	r3, r2, r3
 80052f0:	bfac      	ite	ge
 80052f2:	1b9e      	subge	r6, r3, r6
 80052f4:	461e      	movlt	r6, r3
 80052f6:	2e00      	cmp	r6, #0
 80052f8:	f77f acd7 	ble.w	8004caa <_svfprintf_r+0x662>
 80052fc:	4f2f      	ldr	r7, [pc, #188]	; (80053bc <_svfprintf_r+0xd74>)
 80052fe:	f04f 0810 	mov.w	r8, #16
 8005302:	2e10      	cmp	r6, #16
 8005304:	6027      	str	r7, [r4, #0]
 8005306:	f77f aee7 	ble.w	80050d8 <_svfprintf_r+0xa90>
 800530a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800530c:	f8c4 8004 	str.w	r8, [r4, #4]
 8005310:	3310      	adds	r3, #16
 8005312:	9321      	str	r3, [sp, #132]	; 0x84
 8005314:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005316:	3301      	adds	r3, #1
 8005318:	2b07      	cmp	r3, #7
 800531a:	9320      	str	r3, [sp, #128]	; 0x80
 800531c:	dc41      	bgt.n	80053a2 <_svfprintf_r+0xd5a>
 800531e:	3408      	adds	r4, #8
 8005320:	3e10      	subs	r6, #16
 8005322:	e7ee      	b.n	8005302 <_svfprintf_r+0xcba>
 8005324:	aa1f      	add	r2, sp, #124	; 0x7c
 8005326:	4651      	mov	r1, sl
 8005328:	4658      	mov	r0, fp
 800532a:	f001 fc0f 	bl	8006b4c <__ssprint_r>
 800532e:	2800      	cmp	r0, #0
 8005330:	f040 80eb 	bne.w	800550a <_svfprintf_r+0xec2>
 8005334:	ac2c      	add	r4, sp, #176	; 0xb0
 8005336:	e796      	b.n	8005266 <_svfprintf_r+0xc1e>
 8005338:	2310      	movs	r3, #16
 800533a:	6063      	str	r3, [r4, #4]
 800533c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800533e:	3310      	adds	r3, #16
 8005340:	9321      	str	r3, [sp, #132]	; 0x84
 8005342:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005344:	3301      	adds	r3, #1
 8005346:	2b07      	cmp	r3, #7
 8005348:	9320      	str	r3, [sp, #128]	; 0x80
 800534a:	dc02      	bgt.n	8005352 <_svfprintf_r+0xd0a>
 800534c:	3408      	adds	r4, #8
 800534e:	3e10      	subs	r6, #16
 8005350:	e791      	b.n	8005276 <_svfprintf_r+0xc2e>
 8005352:	aa1f      	add	r2, sp, #124	; 0x7c
 8005354:	4651      	mov	r1, sl
 8005356:	4658      	mov	r0, fp
 8005358:	f001 fbf8 	bl	8006b4c <__ssprint_r>
 800535c:	2800      	cmp	r0, #0
 800535e:	f040 80d4 	bne.w	800550a <_svfprintf_r+0xec2>
 8005362:	ac2c      	add	r4, sp, #176	; 0xb0
 8005364:	e7f3      	b.n	800534e <_svfprintf_r+0xd06>
 8005366:	aa1f      	add	r2, sp, #124	; 0x7c
 8005368:	4651      	mov	r1, sl
 800536a:	4658      	mov	r0, fp
 800536c:	f001 fbee 	bl	8006b4c <__ssprint_r>
 8005370:	2800      	cmp	r0, #0
 8005372:	f040 80ca 	bne.w	800550a <_svfprintf_r+0xec2>
 8005376:	ac2c      	add	r4, sp, #176	; 0xb0
 8005378:	e78b      	b.n	8005292 <_svfprintf_r+0xc4a>
 800537a:	aa1f      	add	r2, sp, #124	; 0x7c
 800537c:	4651      	mov	r1, sl
 800537e:	4658      	mov	r0, fp
 8005380:	f001 fbe4 	bl	8006b4c <__ssprint_r>
 8005384:	2800      	cmp	r0, #0
 8005386:	f040 80c0 	bne.w	800550a <_svfprintf_r+0xec2>
 800538a:	ac2c      	add	r4, sp, #176	; 0xb0
 800538c:	e795      	b.n	80052ba <_svfprintf_r+0xc72>
 800538e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005390:	4651      	mov	r1, sl
 8005392:	4658      	mov	r0, fp
 8005394:	f001 fbda 	bl	8006b4c <__ssprint_r>
 8005398:	2800      	cmp	r0, #0
 800539a:	f040 80b6 	bne.w	800550a <_svfprintf_r+0xec2>
 800539e:	ac2c      	add	r4, sp, #176	; 0xb0
 80053a0:	e7a1      	b.n	80052e6 <_svfprintf_r+0xc9e>
 80053a2:	aa1f      	add	r2, sp, #124	; 0x7c
 80053a4:	4651      	mov	r1, sl
 80053a6:	4658      	mov	r0, fp
 80053a8:	f001 fbd0 	bl	8006b4c <__ssprint_r>
 80053ac:	2800      	cmp	r0, #0
 80053ae:	f040 80ac 	bne.w	800550a <_svfprintf_r+0xec2>
 80053b2:	ac2c      	add	r4, sp, #176	; 0xb0
 80053b4:	e7b4      	b.n	8005320 <_svfprintf_r+0xcd8>
 80053b6:	bf00      	nop
 80053b8:	0800752e 	.word	0x0800752e
 80053bc:	08007540 	.word	0x08007540
 80053c0:	9b03      	ldr	r3, [sp, #12]
 80053c2:	2b01      	cmp	r3, #1
 80053c4:	dc01      	bgt.n	80053ca <_svfprintf_r+0xd82>
 80053c6:	07ea      	lsls	r2, r5, #31
 80053c8:	d576      	bpl.n	80054b8 <_svfprintf_r+0xe70>
 80053ca:	2301      	movs	r3, #1
 80053cc:	6063      	str	r3, [r4, #4]
 80053ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053d0:	f8c4 8000 	str.w	r8, [r4]
 80053d4:	3301      	adds	r3, #1
 80053d6:	9321      	str	r3, [sp, #132]	; 0x84
 80053d8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80053da:	3301      	adds	r3, #1
 80053dc:	2b07      	cmp	r3, #7
 80053de:	9320      	str	r3, [sp, #128]	; 0x80
 80053e0:	dc36      	bgt.n	8005450 <_svfprintf_r+0xe08>
 80053e2:	3408      	adds	r4, #8
 80053e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053e6:	6023      	str	r3, [r4, #0]
 80053e8:	9b08      	ldr	r3, [sp, #32]
 80053ea:	6063      	str	r3, [r4, #4]
 80053ec:	9a08      	ldr	r2, [sp, #32]
 80053ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80053f0:	4413      	add	r3, r2
 80053f2:	9321      	str	r3, [sp, #132]	; 0x84
 80053f4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80053f6:	3301      	adds	r3, #1
 80053f8:	2b07      	cmp	r3, #7
 80053fa:	9320      	str	r3, [sp, #128]	; 0x80
 80053fc:	dc31      	bgt.n	8005462 <_svfprintf_r+0xe1a>
 80053fe:	3408      	adds	r4, #8
 8005400:	2300      	movs	r3, #0
 8005402:	2200      	movs	r2, #0
 8005404:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005408:	f7fb fb62 	bl	8000ad0 <__aeabi_dcmpeq>
 800540c:	9b03      	ldr	r3, [sp, #12]
 800540e:	1e5e      	subs	r6, r3, #1
 8005410:	2800      	cmp	r0, #0
 8005412:	d12f      	bne.n	8005474 <_svfprintf_r+0xe2c>
 8005414:	f108 0301 	add.w	r3, r8, #1
 8005418:	e884 0048 	stmia.w	r4, {r3, r6}
 800541c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800541e:	9a03      	ldr	r2, [sp, #12]
 8005420:	3b01      	subs	r3, #1
 8005422:	4413      	add	r3, r2
 8005424:	9321      	str	r3, [sp, #132]	; 0x84
 8005426:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005428:	3301      	adds	r3, #1
 800542a:	2b07      	cmp	r3, #7
 800542c:	9320      	str	r3, [sp, #128]	; 0x80
 800542e:	dd4a      	ble.n	80054c6 <_svfprintf_r+0xe7e>
 8005430:	aa1f      	add	r2, sp, #124	; 0x7c
 8005432:	4651      	mov	r1, sl
 8005434:	4658      	mov	r0, fp
 8005436:	f001 fb89 	bl	8006b4c <__ssprint_r>
 800543a:	2800      	cmp	r0, #0
 800543c:	d165      	bne.n	800550a <_svfprintf_r+0xec2>
 800543e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005440:	ab1b      	add	r3, sp, #108	; 0x6c
 8005442:	6023      	str	r3, [r4, #0]
 8005444:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005446:	6063      	str	r3, [r4, #4]
 8005448:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800544a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800544c:	4413      	add	r3, r2
 800544e:	e41c      	b.n	8004c8a <_svfprintf_r+0x642>
 8005450:	aa1f      	add	r2, sp, #124	; 0x7c
 8005452:	4651      	mov	r1, sl
 8005454:	4658      	mov	r0, fp
 8005456:	f001 fb79 	bl	8006b4c <__ssprint_r>
 800545a:	2800      	cmp	r0, #0
 800545c:	d155      	bne.n	800550a <_svfprintf_r+0xec2>
 800545e:	ac2c      	add	r4, sp, #176	; 0xb0
 8005460:	e7c0      	b.n	80053e4 <_svfprintf_r+0xd9c>
 8005462:	aa1f      	add	r2, sp, #124	; 0x7c
 8005464:	4651      	mov	r1, sl
 8005466:	4658      	mov	r0, fp
 8005468:	f001 fb70 	bl	8006b4c <__ssprint_r>
 800546c:	2800      	cmp	r0, #0
 800546e:	d14c      	bne.n	800550a <_svfprintf_r+0xec2>
 8005470:	ac2c      	add	r4, sp, #176	; 0xb0
 8005472:	e7c5      	b.n	8005400 <_svfprintf_r+0xdb8>
 8005474:	2e00      	cmp	r6, #0
 8005476:	dde3      	ble.n	8005440 <_svfprintf_r+0xdf8>
 8005478:	4f59      	ldr	r7, [pc, #356]	; (80055e0 <_svfprintf_r+0xf98>)
 800547a:	f04f 0810 	mov.w	r8, #16
 800547e:	2e10      	cmp	r6, #16
 8005480:	6027      	str	r7, [r4, #0]
 8005482:	dc04      	bgt.n	800548e <_svfprintf_r+0xe46>
 8005484:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005486:	6066      	str	r6, [r4, #4]
 8005488:	441e      	add	r6, r3
 800548a:	9621      	str	r6, [sp, #132]	; 0x84
 800548c:	e7cb      	b.n	8005426 <_svfprintf_r+0xdde>
 800548e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005490:	f8c4 8004 	str.w	r8, [r4, #4]
 8005494:	3310      	adds	r3, #16
 8005496:	9321      	str	r3, [sp, #132]	; 0x84
 8005498:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800549a:	3301      	adds	r3, #1
 800549c:	2b07      	cmp	r3, #7
 800549e:	9320      	str	r3, [sp, #128]	; 0x80
 80054a0:	dc02      	bgt.n	80054a8 <_svfprintf_r+0xe60>
 80054a2:	3408      	adds	r4, #8
 80054a4:	3e10      	subs	r6, #16
 80054a6:	e7ea      	b.n	800547e <_svfprintf_r+0xe36>
 80054a8:	aa1f      	add	r2, sp, #124	; 0x7c
 80054aa:	4651      	mov	r1, sl
 80054ac:	4658      	mov	r0, fp
 80054ae:	f001 fb4d 	bl	8006b4c <__ssprint_r>
 80054b2:	bb50      	cbnz	r0, 800550a <_svfprintf_r+0xec2>
 80054b4:	ac2c      	add	r4, sp, #176	; 0xb0
 80054b6:	e7f5      	b.n	80054a4 <_svfprintf_r+0xe5c>
 80054b8:	2301      	movs	r3, #1
 80054ba:	6063      	str	r3, [r4, #4]
 80054bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054be:	f8c4 8000 	str.w	r8, [r4]
 80054c2:	3301      	adds	r3, #1
 80054c4:	e7ae      	b.n	8005424 <_svfprintf_r+0xddc>
 80054c6:	3408      	adds	r4, #8
 80054c8:	e7ba      	b.n	8005440 <_svfprintf_r+0xdf8>
 80054ca:	3408      	adds	r4, #8
 80054cc:	f7ff bbed 	b.w	8004caa <_svfprintf_r+0x662>
 80054d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054d4:	1a9d      	subs	r5, r3, r2
 80054d6:	2d00      	cmp	r5, #0
 80054d8:	f77f abea 	ble.w	8004cb0 <_svfprintf_r+0x668>
 80054dc:	2610      	movs	r6, #16
 80054de:	4b41      	ldr	r3, [pc, #260]	; (80055e4 <_svfprintf_r+0xf9c>)
 80054e0:	6023      	str	r3, [r4, #0]
 80054e2:	2d10      	cmp	r5, #16
 80054e4:	dc1b      	bgt.n	800551e <_svfprintf_r+0xed6>
 80054e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80054e8:	6065      	str	r5, [r4, #4]
 80054ea:	441d      	add	r5, r3
 80054ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80054ee:	9521      	str	r5, [sp, #132]	; 0x84
 80054f0:	3301      	adds	r3, #1
 80054f2:	2b07      	cmp	r3, #7
 80054f4:	9320      	str	r3, [sp, #128]	; 0x80
 80054f6:	f77f abdb 	ble.w	8004cb0 <_svfprintf_r+0x668>
 80054fa:	aa1f      	add	r2, sp, #124	; 0x7c
 80054fc:	4651      	mov	r1, sl
 80054fe:	4658      	mov	r0, fp
 8005500:	f001 fb24 	bl	8006b4c <__ssprint_r>
 8005504:	2800      	cmp	r0, #0
 8005506:	f43f abd3 	beq.w	8004cb0 <_svfprintf_r+0x668>
 800550a:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 800550e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005514:	bf18      	it	ne
 8005516:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 800551a:	f7ff b8b9 	b.w	8004690 <_svfprintf_r+0x48>
 800551e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005520:	6066      	str	r6, [r4, #4]
 8005522:	3310      	adds	r3, #16
 8005524:	9321      	str	r3, [sp, #132]	; 0x84
 8005526:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8005528:	3301      	adds	r3, #1
 800552a:	2b07      	cmp	r3, #7
 800552c:	9320      	str	r3, [sp, #128]	; 0x80
 800552e:	dc02      	bgt.n	8005536 <_svfprintf_r+0xeee>
 8005530:	3408      	adds	r4, #8
 8005532:	3d10      	subs	r5, #16
 8005534:	e7d3      	b.n	80054de <_svfprintf_r+0xe96>
 8005536:	aa1f      	add	r2, sp, #124	; 0x7c
 8005538:	4651      	mov	r1, sl
 800553a:	4658      	mov	r0, fp
 800553c:	f001 fb06 	bl	8006b4c <__ssprint_r>
 8005540:	2800      	cmp	r0, #0
 8005542:	d1e2      	bne.n	800550a <_svfprintf_r+0xec2>
 8005544:	ac2c      	add	r4, sp, #176	; 0xb0
 8005546:	e7f4      	b.n	8005532 <_svfprintf_r+0xeea>
 8005548:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800554a:	2b00      	cmp	r3, #0
 800554c:	d0dd      	beq.n	800550a <_svfprintf_r+0xec2>
 800554e:	aa1f      	add	r2, sp, #124	; 0x7c
 8005550:	4651      	mov	r1, sl
 8005552:	4658      	mov	r0, fp
 8005554:	f001 fafa 	bl	8006b4c <__ssprint_r>
 8005558:	e7d7      	b.n	800550a <_svfprintf_r+0xec2>
 800555a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800555e:	4610      	mov	r0, r2
 8005560:	4619      	mov	r1, r3
 8005562:	f7fb fae7 	bl	8000b34 <__aeabi_dcmpun>
 8005566:	2800      	cmp	r0, #0
 8005568:	f43f aa44 	beq.w	80049f4 <_svfprintf_r+0x3ac>
 800556c:	4b1e      	ldr	r3, [pc, #120]	; (80055e8 <_svfprintf_r+0xfa0>)
 800556e:	4a1f      	ldr	r2, [pc, #124]	; (80055ec <_svfprintf_r+0xfa4>)
 8005570:	f7ff ba34 	b.w	80049dc <_svfprintf_r+0x394>
 8005574:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8005576:	eba3 0308 	sub.w	r3, r3, r8
 800557a:	9303      	str	r3, [sp, #12]
 800557c:	f7ff bab5 	b.w	8004aea <_svfprintf_r+0x4a2>
 8005580:	ea56 0207 	orrs.w	r2, r6, r7
 8005584:	950b      	str	r5, [sp, #44]	; 0x2c
 8005586:	f43f ac2b 	beq.w	8004de0 <_svfprintf_r+0x798>
 800558a:	2b01      	cmp	r3, #1
 800558c:	f43f ac9d 	beq.w	8004eca <_svfprintf_r+0x882>
 8005590:	2b02      	cmp	r3, #2
 8005592:	f43f acbd 	beq.w	8004f10 <_svfprintf_r+0x8c8>
 8005596:	ab2c      	add	r3, sp, #176	; 0xb0
 8005598:	08f1      	lsrs	r1, r6, #3
 800559a:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 800559e:	08f8      	lsrs	r0, r7, #3
 80055a0:	f006 0207 	and.w	r2, r6, #7
 80055a4:	4607      	mov	r7, r0
 80055a6:	460e      	mov	r6, r1
 80055a8:	3230      	adds	r2, #48	; 0x30
 80055aa:	ea56 0107 	orrs.w	r1, r6, r7
 80055ae:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80055b2:	f803 2c01 	strb.w	r2, [r3, #-1]
 80055b6:	f47f ac86 	bne.w	8004ec6 <_svfprintf_r+0x87e>
 80055ba:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80055bc:	07c9      	lsls	r1, r1, #31
 80055be:	d506      	bpl.n	80055ce <_svfprintf_r+0xf86>
 80055c0:	2a30      	cmp	r2, #48	; 0x30
 80055c2:	d004      	beq.n	80055ce <_svfprintf_r+0xf86>
 80055c4:	2230      	movs	r2, #48	; 0x30
 80055c6:	f808 2c01 	strb.w	r2, [r8, #-1]
 80055ca:	f1a3 0802 	sub.w	r8, r3, #2
 80055ce:	464e      	mov	r6, r9
 80055d0:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 80055d4:	eba9 0908 	sub.w	r9, r9, r8
 80055d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80055da:	2700      	movs	r7, #0
 80055dc:	f7ff bad1 	b.w	8004b82 <_svfprintf_r+0x53a>
 80055e0:	08007540 	.word	0x08007540
 80055e4:	08007530 	.word	0x08007530
 80055e8:	08007504 	.word	0x08007504
 80055ec:	08007508 	.word	0x08007508

080055f0 <__utoa>:
 80055f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055f2:	4c1e      	ldr	r4, [pc, #120]	; (800566c <__utoa+0x7c>)
 80055f4:	b08b      	sub	sp, #44	; 0x2c
 80055f6:	4603      	mov	r3, r0
 80055f8:	460f      	mov	r7, r1
 80055fa:	466d      	mov	r5, sp
 80055fc:	f104 0e20 	add.w	lr, r4, #32
 8005600:	6820      	ldr	r0, [r4, #0]
 8005602:	6861      	ldr	r1, [r4, #4]
 8005604:	462e      	mov	r6, r5
 8005606:	c603      	stmia	r6!, {r0, r1}
 8005608:	3408      	adds	r4, #8
 800560a:	4574      	cmp	r4, lr
 800560c:	4635      	mov	r5, r6
 800560e:	d1f7      	bne.n	8005600 <__utoa+0x10>
 8005610:	7921      	ldrb	r1, [r4, #4]
 8005612:	7131      	strb	r1, [r6, #4]
 8005614:	1e91      	subs	r1, r2, #2
 8005616:	6820      	ldr	r0, [r4, #0]
 8005618:	6030      	str	r0, [r6, #0]
 800561a:	2922      	cmp	r1, #34	; 0x22
 800561c:	f04f 0100 	mov.w	r1, #0
 8005620:	d904      	bls.n	800562c <__utoa+0x3c>
 8005622:	7039      	strb	r1, [r7, #0]
 8005624:	460f      	mov	r7, r1
 8005626:	4638      	mov	r0, r7
 8005628:	b00b      	add	sp, #44	; 0x2c
 800562a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800562c:	1e78      	subs	r0, r7, #1
 800562e:	4606      	mov	r6, r0
 8005630:	fbb3 f5f2 	udiv	r5, r3, r2
 8005634:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8005638:	fb02 3315 	mls	r3, r2, r5, r3
 800563c:	4473      	add	r3, lr
 800563e:	1c4c      	adds	r4, r1, #1
 8005640:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8005644:	f806 3f01 	strb.w	r3, [r6, #1]!
 8005648:	462b      	mov	r3, r5
 800564a:	b965      	cbnz	r5, 8005666 <__utoa+0x76>
 800564c:	553d      	strb	r5, [r7, r4]
 800564e:	187a      	adds	r2, r7, r1
 8005650:	1acc      	subs	r4, r1, r3
 8005652:	42a3      	cmp	r3, r4
 8005654:	dae7      	bge.n	8005626 <__utoa+0x36>
 8005656:	7844      	ldrb	r4, [r0, #1]
 8005658:	7815      	ldrb	r5, [r2, #0]
 800565a:	f800 5f01 	strb.w	r5, [r0, #1]!
 800565e:	3301      	adds	r3, #1
 8005660:	f802 4901 	strb.w	r4, [r2], #-1
 8005664:	e7f4      	b.n	8005650 <__utoa+0x60>
 8005666:	4621      	mov	r1, r4
 8005668:	e7e2      	b.n	8005630 <__utoa+0x40>
 800566a:	bf00      	nop
 800566c:	08007550 	.word	0x08007550

08005670 <quorem>:
 8005670:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	6903      	ldr	r3, [r0, #16]
 8005676:	690c      	ldr	r4, [r1, #16]
 8005678:	429c      	cmp	r4, r3
 800567a:	4680      	mov	r8, r0
 800567c:	f300 8082 	bgt.w	8005784 <quorem+0x114>
 8005680:	3c01      	subs	r4, #1
 8005682:	f101 0714 	add.w	r7, r1, #20
 8005686:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800568a:	f100 0614 	add.w	r6, r0, #20
 800568e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005692:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005696:	eb06 030e 	add.w	r3, r6, lr
 800569a:	3501      	adds	r5, #1
 800569c:	eb07 090e 	add.w	r9, r7, lr
 80056a0:	9301      	str	r3, [sp, #4]
 80056a2:	fbb0 f5f5 	udiv	r5, r0, r5
 80056a6:	b395      	cbz	r5, 800570e <quorem+0x9e>
 80056a8:	f04f 0a00 	mov.w	sl, #0
 80056ac:	4638      	mov	r0, r7
 80056ae:	46b4      	mov	ip, r6
 80056b0:	46d3      	mov	fp, sl
 80056b2:	f850 2b04 	ldr.w	r2, [r0], #4
 80056b6:	b293      	uxth	r3, r2
 80056b8:	fb05 a303 	mla	r3, r5, r3, sl
 80056bc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	ebab 0303 	sub.w	r3, fp, r3
 80056c6:	0c12      	lsrs	r2, r2, #16
 80056c8:	f8bc b000 	ldrh.w	fp, [ip]
 80056cc:	fb05 a202 	mla	r2, r5, r2, sl
 80056d0:	fa13 f38b 	uxtah	r3, r3, fp
 80056d4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80056d8:	fa1f fb82 	uxth.w	fp, r2
 80056dc:	f8dc 2000 	ldr.w	r2, [ip]
 80056e0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80056e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056e8:	b29b      	uxth	r3, r3
 80056ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056ee:	4581      	cmp	r9, r0
 80056f0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80056f4:	f84c 3b04 	str.w	r3, [ip], #4
 80056f8:	d2db      	bcs.n	80056b2 <quorem+0x42>
 80056fa:	f856 300e 	ldr.w	r3, [r6, lr]
 80056fe:	b933      	cbnz	r3, 800570e <quorem+0x9e>
 8005700:	9b01      	ldr	r3, [sp, #4]
 8005702:	3b04      	subs	r3, #4
 8005704:	429e      	cmp	r6, r3
 8005706:	461a      	mov	r2, r3
 8005708:	d330      	bcc.n	800576c <quorem+0xfc>
 800570a:	f8c8 4010 	str.w	r4, [r8, #16]
 800570e:	4640      	mov	r0, r8
 8005710:	f001 f955 	bl	80069be <__mcmp>
 8005714:	2800      	cmp	r0, #0
 8005716:	db25      	blt.n	8005764 <quorem+0xf4>
 8005718:	3501      	adds	r5, #1
 800571a:	4630      	mov	r0, r6
 800571c:	f04f 0e00 	mov.w	lr, #0
 8005720:	f857 2b04 	ldr.w	r2, [r7], #4
 8005724:	f8d0 c000 	ldr.w	ip, [r0]
 8005728:	b293      	uxth	r3, r2
 800572a:	ebae 0303 	sub.w	r3, lr, r3
 800572e:	0c12      	lsrs	r2, r2, #16
 8005730:	fa13 f38c 	uxtah	r3, r3, ip
 8005734:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005738:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800573c:	b29b      	uxth	r3, r3
 800573e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005742:	45b9      	cmp	r9, r7
 8005744:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005748:	f840 3b04 	str.w	r3, [r0], #4
 800574c:	d2e8      	bcs.n	8005720 <quorem+0xb0>
 800574e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005752:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005756:	b92a      	cbnz	r2, 8005764 <quorem+0xf4>
 8005758:	3b04      	subs	r3, #4
 800575a:	429e      	cmp	r6, r3
 800575c:	461a      	mov	r2, r3
 800575e:	d30b      	bcc.n	8005778 <quorem+0x108>
 8005760:	f8c8 4010 	str.w	r4, [r8, #16]
 8005764:	4628      	mov	r0, r5
 8005766:	b003      	add	sp, #12
 8005768:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800576c:	6812      	ldr	r2, [r2, #0]
 800576e:	3b04      	subs	r3, #4
 8005770:	2a00      	cmp	r2, #0
 8005772:	d1ca      	bne.n	800570a <quorem+0x9a>
 8005774:	3c01      	subs	r4, #1
 8005776:	e7c5      	b.n	8005704 <quorem+0x94>
 8005778:	6812      	ldr	r2, [r2, #0]
 800577a:	3b04      	subs	r3, #4
 800577c:	2a00      	cmp	r2, #0
 800577e:	d1ef      	bne.n	8005760 <quorem+0xf0>
 8005780:	3c01      	subs	r4, #1
 8005782:	e7ea      	b.n	800575a <quorem+0xea>
 8005784:	2000      	movs	r0, #0
 8005786:	e7ee      	b.n	8005766 <quorem+0xf6>

08005788 <_dtoa_r>:
 8005788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800578c:	ec57 6b10 	vmov	r6, r7, d0
 8005790:	b097      	sub	sp, #92	; 0x5c
 8005792:	e9cd 6700 	strd	r6, r7, [sp]
 8005796:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005798:	9107      	str	r1, [sp, #28]
 800579a:	4604      	mov	r4, r0
 800579c:	920a      	str	r2, [sp, #40]	; 0x28
 800579e:	930f      	str	r3, [sp, #60]	; 0x3c
 80057a0:	9d20      	ldr	r5, [sp, #128]	; 0x80
 80057a2:	b93e      	cbnz	r6, 80057b4 <_dtoa_r+0x2c>
 80057a4:	2010      	movs	r0, #16
 80057a6:	f7fe fc15 	bl	8003fd4 <malloc>
 80057aa:	6260      	str	r0, [r4, #36]	; 0x24
 80057ac:	6046      	str	r6, [r0, #4]
 80057ae:	6086      	str	r6, [r0, #8]
 80057b0:	6006      	str	r6, [r0, #0]
 80057b2:	60c6      	str	r6, [r0, #12]
 80057b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057b6:	6819      	ldr	r1, [r3, #0]
 80057b8:	b151      	cbz	r1, 80057d0 <_dtoa_r+0x48>
 80057ba:	685a      	ldr	r2, [r3, #4]
 80057bc:	604a      	str	r2, [r1, #4]
 80057be:	2301      	movs	r3, #1
 80057c0:	4093      	lsls	r3, r2
 80057c2:	608b      	str	r3, [r1, #8]
 80057c4:	4620      	mov	r0, r4
 80057c6:	f000 ff24 	bl	8006612 <_Bfree>
 80057ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	9b01      	ldr	r3, [sp, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	bfbf      	itttt	lt
 80057d6:	2301      	movlt	r3, #1
 80057d8:	602b      	strlt	r3, [r5, #0]
 80057da:	9b01      	ldrlt	r3, [sp, #4]
 80057dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80057e0:	bfb2      	itee	lt
 80057e2:	9301      	strlt	r3, [sp, #4]
 80057e4:	2300      	movge	r3, #0
 80057e6:	602b      	strge	r3, [r5, #0]
 80057e8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80057ec:	4ba8      	ldr	r3, [pc, #672]	; (8005a90 <_dtoa_r+0x308>)
 80057ee:	ea33 0308 	bics.w	r3, r3, r8
 80057f2:	d11b      	bne.n	800582c <_dtoa_r+0xa4>
 80057f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80057f6:	f242 730f 	movw	r3, #9999	; 0x270f
 80057fa:	6013      	str	r3, [r2, #0]
 80057fc:	9b00      	ldr	r3, [sp, #0]
 80057fe:	b923      	cbnz	r3, 800580a <_dtoa_r+0x82>
 8005800:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005804:	2800      	cmp	r0, #0
 8005806:	f000 8578 	beq.w	80062fa <_dtoa_r+0xb72>
 800580a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800580c:	b953      	cbnz	r3, 8005824 <_dtoa_r+0x9c>
 800580e:	4ba1      	ldr	r3, [pc, #644]	; (8005a94 <_dtoa_r+0x30c>)
 8005810:	e021      	b.n	8005856 <_dtoa_r+0xce>
 8005812:	4ba1      	ldr	r3, [pc, #644]	; (8005a98 <_dtoa_r+0x310>)
 8005814:	9302      	str	r3, [sp, #8]
 8005816:	3308      	adds	r3, #8
 8005818:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800581a:	6013      	str	r3, [r2, #0]
 800581c:	9802      	ldr	r0, [sp, #8]
 800581e:	b017      	add	sp, #92	; 0x5c
 8005820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005824:	4b9b      	ldr	r3, [pc, #620]	; (8005a94 <_dtoa_r+0x30c>)
 8005826:	9302      	str	r3, [sp, #8]
 8005828:	3303      	adds	r3, #3
 800582a:	e7f5      	b.n	8005818 <_dtoa_r+0x90>
 800582c:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005830:	2200      	movs	r2, #0
 8005832:	2300      	movs	r3, #0
 8005834:	4630      	mov	r0, r6
 8005836:	4639      	mov	r1, r7
 8005838:	f7fb f94a 	bl	8000ad0 <__aeabi_dcmpeq>
 800583c:	4681      	mov	r9, r0
 800583e:	b160      	cbz	r0, 800585a <_dtoa_r+0xd2>
 8005840:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005842:	2301      	movs	r3, #1
 8005844:	6013      	str	r3, [r2, #0]
 8005846:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 8553 	beq.w	80062f4 <_dtoa_r+0xb6c>
 800584e:	4b93      	ldr	r3, [pc, #588]	; (8005a9c <_dtoa_r+0x314>)
 8005850:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005852:	6013      	str	r3, [r2, #0]
 8005854:	3b01      	subs	r3, #1
 8005856:	9302      	str	r3, [sp, #8]
 8005858:	e7e0      	b.n	800581c <_dtoa_r+0x94>
 800585a:	aa14      	add	r2, sp, #80	; 0x50
 800585c:	a915      	add	r1, sp, #84	; 0x54
 800585e:	ec47 6b10 	vmov	d0, r6, r7
 8005862:	4620      	mov	r0, r4
 8005864:	f001 f923 	bl	8006aae <__d2b>
 8005868:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800586c:	4682      	mov	sl, r0
 800586e:	2d00      	cmp	r5, #0
 8005870:	d07e      	beq.n	8005970 <_dtoa_r+0x1e8>
 8005872:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005876:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800587a:	4630      	mov	r0, r6
 800587c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005880:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005884:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8005888:	2200      	movs	r2, #0
 800588a:	4b85      	ldr	r3, [pc, #532]	; (8005aa0 <_dtoa_r+0x318>)
 800588c:	f7fa fd04 	bl	8000298 <__aeabi_dsub>
 8005890:	a379      	add	r3, pc, #484	; (adr r3, 8005a78 <_dtoa_r+0x2f0>)
 8005892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005896:	f7fa feb3 	bl	8000600 <__aeabi_dmul>
 800589a:	a379      	add	r3, pc, #484	; (adr r3, 8005a80 <_dtoa_r+0x2f8>)
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	f7fa fcfc 	bl	800029c <__adddf3>
 80058a4:	4606      	mov	r6, r0
 80058a6:	4628      	mov	r0, r5
 80058a8:	460f      	mov	r7, r1
 80058aa:	f7fa fe43 	bl	8000534 <__aeabi_i2d>
 80058ae:	a376      	add	r3, pc, #472	; (adr r3, 8005a88 <_dtoa_r+0x300>)
 80058b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b4:	f7fa fea4 	bl	8000600 <__aeabi_dmul>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4630      	mov	r0, r6
 80058be:	4639      	mov	r1, r7
 80058c0:	f7fa fcec 	bl	800029c <__adddf3>
 80058c4:	4606      	mov	r6, r0
 80058c6:	460f      	mov	r7, r1
 80058c8:	f7fb f94a 	bl	8000b60 <__aeabi_d2iz>
 80058cc:	2200      	movs	r2, #0
 80058ce:	4683      	mov	fp, r0
 80058d0:	2300      	movs	r3, #0
 80058d2:	4630      	mov	r0, r6
 80058d4:	4639      	mov	r1, r7
 80058d6:	f7fb f905 	bl	8000ae4 <__aeabi_dcmplt>
 80058da:	b158      	cbz	r0, 80058f4 <_dtoa_r+0x16c>
 80058dc:	4658      	mov	r0, fp
 80058de:	f7fa fe29 	bl	8000534 <__aeabi_i2d>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4630      	mov	r0, r6
 80058e8:	4639      	mov	r1, r7
 80058ea:	f7fb f8f1 	bl	8000ad0 <__aeabi_dcmpeq>
 80058ee:	b908      	cbnz	r0, 80058f4 <_dtoa_r+0x16c>
 80058f0:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80058f4:	f1bb 0f16 	cmp.w	fp, #22
 80058f8:	d859      	bhi.n	80059ae <_dtoa_r+0x226>
 80058fa:	496a      	ldr	r1, [pc, #424]	; (8005aa4 <_dtoa_r+0x31c>)
 80058fc:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8005900:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005904:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005908:	f7fb f90a 	bl	8000b20 <__aeabi_dcmpgt>
 800590c:	2800      	cmp	r0, #0
 800590e:	d050      	beq.n	80059b2 <_dtoa_r+0x22a>
 8005910:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005914:	2300      	movs	r3, #0
 8005916:	930e      	str	r3, [sp, #56]	; 0x38
 8005918:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800591a:	1b5d      	subs	r5, r3, r5
 800591c:	1e6b      	subs	r3, r5, #1
 800591e:	9306      	str	r3, [sp, #24]
 8005920:	bf45      	ittet	mi
 8005922:	f1c5 0301 	rsbmi	r3, r5, #1
 8005926:	9305      	strmi	r3, [sp, #20]
 8005928:	2300      	movpl	r3, #0
 800592a:	2300      	movmi	r3, #0
 800592c:	bf4c      	ite	mi
 800592e:	9306      	strmi	r3, [sp, #24]
 8005930:	9305      	strpl	r3, [sp, #20]
 8005932:	f1bb 0f00 	cmp.w	fp, #0
 8005936:	db3e      	blt.n	80059b6 <_dtoa_r+0x22e>
 8005938:	9b06      	ldr	r3, [sp, #24]
 800593a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800593e:	445b      	add	r3, fp
 8005940:	9306      	str	r3, [sp, #24]
 8005942:	2300      	movs	r3, #0
 8005944:	9308      	str	r3, [sp, #32]
 8005946:	9b07      	ldr	r3, [sp, #28]
 8005948:	2b09      	cmp	r3, #9
 800594a:	f200 80af 	bhi.w	8005aac <_dtoa_r+0x324>
 800594e:	2b05      	cmp	r3, #5
 8005950:	bfc4      	itt	gt
 8005952:	3b04      	subgt	r3, #4
 8005954:	9307      	strgt	r3, [sp, #28]
 8005956:	9b07      	ldr	r3, [sp, #28]
 8005958:	f1a3 0302 	sub.w	r3, r3, #2
 800595c:	bfcc      	ite	gt
 800595e:	2600      	movgt	r6, #0
 8005960:	2601      	movle	r6, #1
 8005962:	2b03      	cmp	r3, #3
 8005964:	f200 80ae 	bhi.w	8005ac4 <_dtoa_r+0x33c>
 8005968:	e8df f003 	tbb	[pc, r3]
 800596c:	772f8482 	.word	0x772f8482
 8005970:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005972:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8005974:	441d      	add	r5, r3
 8005976:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800597a:	2b20      	cmp	r3, #32
 800597c:	dd11      	ble.n	80059a2 <_dtoa_r+0x21a>
 800597e:	9a00      	ldr	r2, [sp, #0]
 8005980:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8005984:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005988:	fa22 f000 	lsr.w	r0, r2, r0
 800598c:	fa08 f303 	lsl.w	r3, r8, r3
 8005990:	4318      	orrs	r0, r3
 8005992:	f7fa fdbf 	bl	8000514 <__aeabi_ui2d>
 8005996:	2301      	movs	r3, #1
 8005998:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800599c:	3d01      	subs	r5, #1
 800599e:	9312      	str	r3, [sp, #72]	; 0x48
 80059a0:	e772      	b.n	8005888 <_dtoa_r+0x100>
 80059a2:	f1c3 0020 	rsb	r0, r3, #32
 80059a6:	9b00      	ldr	r3, [sp, #0]
 80059a8:	fa03 f000 	lsl.w	r0, r3, r0
 80059ac:	e7f1      	b.n	8005992 <_dtoa_r+0x20a>
 80059ae:	2301      	movs	r3, #1
 80059b0:	e7b1      	b.n	8005916 <_dtoa_r+0x18e>
 80059b2:	900e      	str	r0, [sp, #56]	; 0x38
 80059b4:	e7b0      	b.n	8005918 <_dtoa_r+0x190>
 80059b6:	9b05      	ldr	r3, [sp, #20]
 80059b8:	eba3 030b 	sub.w	r3, r3, fp
 80059bc:	9305      	str	r3, [sp, #20]
 80059be:	f1cb 0300 	rsb	r3, fp, #0
 80059c2:	9308      	str	r3, [sp, #32]
 80059c4:	2300      	movs	r3, #0
 80059c6:	930b      	str	r3, [sp, #44]	; 0x2c
 80059c8:	e7bd      	b.n	8005946 <_dtoa_r+0x1be>
 80059ca:	2301      	movs	r3, #1
 80059cc:	9309      	str	r3, [sp, #36]	; 0x24
 80059ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	dd7a      	ble.n	8005aca <_dtoa_r+0x342>
 80059d4:	9304      	str	r3, [sp, #16]
 80059d6:	9303      	str	r3, [sp, #12]
 80059d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80059da:	2200      	movs	r2, #0
 80059dc:	606a      	str	r2, [r5, #4]
 80059de:	2104      	movs	r1, #4
 80059e0:	f101 0214 	add.w	r2, r1, #20
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d975      	bls.n	8005ad4 <_dtoa_r+0x34c>
 80059e8:	6869      	ldr	r1, [r5, #4]
 80059ea:	4620      	mov	r0, r4
 80059ec:	f000 fddd 	bl	80065aa <_Balloc>
 80059f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059f2:	6028      	str	r0, [r5, #0]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	9302      	str	r3, [sp, #8]
 80059f8:	9b03      	ldr	r3, [sp, #12]
 80059fa:	2b0e      	cmp	r3, #14
 80059fc:	f200 80e5 	bhi.w	8005bca <_dtoa_r+0x442>
 8005a00:	2e00      	cmp	r6, #0
 8005a02:	f000 80e2 	beq.w	8005bca <_dtoa_r+0x442>
 8005a06:	ed9d 7b00 	vldr	d7, [sp]
 8005a0a:	f1bb 0f00 	cmp.w	fp, #0
 8005a0e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8005a12:	dd74      	ble.n	8005afe <_dtoa_r+0x376>
 8005a14:	4a23      	ldr	r2, [pc, #140]	; (8005aa4 <_dtoa_r+0x31c>)
 8005a16:	f00b 030f 	and.w	r3, fp, #15
 8005a1a:	ea4f 162b 	mov.w	r6, fp, asr #4
 8005a1e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a22:	06f0      	lsls	r0, r6, #27
 8005a24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a28:	d559      	bpl.n	8005ade <_dtoa_r+0x356>
 8005a2a:	4b1f      	ldr	r3, [pc, #124]	; (8005aa8 <_dtoa_r+0x320>)
 8005a2c:	ec51 0b17 	vmov	r0, r1, d7
 8005a30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a34:	f7fa ff0e 	bl	8000854 <__aeabi_ddiv>
 8005a38:	e9cd 0100 	strd	r0, r1, [sp]
 8005a3c:	f006 060f 	and.w	r6, r6, #15
 8005a40:	2503      	movs	r5, #3
 8005a42:	4f19      	ldr	r7, [pc, #100]	; (8005aa8 <_dtoa_r+0x320>)
 8005a44:	2e00      	cmp	r6, #0
 8005a46:	d14c      	bne.n	8005ae2 <_dtoa_r+0x35a>
 8005a48:	4642      	mov	r2, r8
 8005a4a:	464b      	mov	r3, r9
 8005a4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a50:	f7fa ff00 	bl	8000854 <__aeabi_ddiv>
 8005a54:	e9cd 0100 	strd	r0, r1, [sp]
 8005a58:	e06a      	b.n	8005b30 <_dtoa_r+0x3a8>
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8005a5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a60:	445b      	add	r3, fp
 8005a62:	9304      	str	r3, [sp, #16]
 8005a64:	3301      	adds	r3, #1
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	9303      	str	r3, [sp, #12]
 8005a6a:	bfb8      	it	lt
 8005a6c:	2301      	movlt	r3, #1
 8005a6e:	e7b3      	b.n	80059d8 <_dtoa_r+0x250>
 8005a70:	2300      	movs	r3, #0
 8005a72:	e7ab      	b.n	80059cc <_dtoa_r+0x244>
 8005a74:	2300      	movs	r3, #0
 8005a76:	e7f1      	b.n	8005a5c <_dtoa_r+0x2d4>
 8005a78:	636f4361 	.word	0x636f4361
 8005a7c:	3fd287a7 	.word	0x3fd287a7
 8005a80:	8b60c8b3 	.word	0x8b60c8b3
 8005a84:	3fc68a28 	.word	0x3fc68a28
 8005a88:	509f79fb 	.word	0x509f79fb
 8005a8c:	3fd34413 	.word	0x3fd34413
 8005a90:	7ff00000 	.word	0x7ff00000
 8005a94:	0800757e 	.word	0x0800757e
 8005a98:	08007575 	.word	0x08007575
 8005a9c:	0800752f 	.word	0x0800752f
 8005aa0:	3ff80000 	.word	0x3ff80000
 8005aa4:	080075b8 	.word	0x080075b8
 8005aa8:	08007590 	.word	0x08007590
 8005aac:	2601      	movs	r6, #1
 8005aae:	2300      	movs	r3, #0
 8005ab0:	9307      	str	r3, [sp, #28]
 8005ab2:	9609      	str	r6, [sp, #36]	; 0x24
 8005ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ab8:	9304      	str	r3, [sp, #16]
 8005aba:	9303      	str	r3, [sp, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	2312      	movs	r3, #18
 8005ac0:	920a      	str	r2, [sp, #40]	; 0x28
 8005ac2:	e789      	b.n	80059d8 <_dtoa_r+0x250>
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8005ac8:	e7f4      	b.n	8005ab4 <_dtoa_r+0x32c>
 8005aca:	2301      	movs	r3, #1
 8005acc:	9304      	str	r3, [sp, #16]
 8005ace:	9303      	str	r3, [sp, #12]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	e7f5      	b.n	8005ac0 <_dtoa_r+0x338>
 8005ad4:	686a      	ldr	r2, [r5, #4]
 8005ad6:	3201      	adds	r2, #1
 8005ad8:	606a      	str	r2, [r5, #4]
 8005ada:	0049      	lsls	r1, r1, #1
 8005adc:	e780      	b.n	80059e0 <_dtoa_r+0x258>
 8005ade:	2502      	movs	r5, #2
 8005ae0:	e7af      	b.n	8005a42 <_dtoa_r+0x2ba>
 8005ae2:	07f1      	lsls	r1, r6, #31
 8005ae4:	d508      	bpl.n	8005af8 <_dtoa_r+0x370>
 8005ae6:	4640      	mov	r0, r8
 8005ae8:	4649      	mov	r1, r9
 8005aea:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aee:	f7fa fd87 	bl	8000600 <__aeabi_dmul>
 8005af2:	3501      	adds	r5, #1
 8005af4:	4680      	mov	r8, r0
 8005af6:	4689      	mov	r9, r1
 8005af8:	1076      	asrs	r6, r6, #1
 8005afa:	3708      	adds	r7, #8
 8005afc:	e7a2      	b.n	8005a44 <_dtoa_r+0x2bc>
 8005afe:	f000 809d 	beq.w	8005c3c <_dtoa_r+0x4b4>
 8005b02:	f1cb 0600 	rsb	r6, fp, #0
 8005b06:	4b9f      	ldr	r3, [pc, #636]	; (8005d84 <_dtoa_r+0x5fc>)
 8005b08:	4f9f      	ldr	r7, [pc, #636]	; (8005d88 <_dtoa_r+0x600>)
 8005b0a:	f006 020f 	and.w	r2, r6, #15
 8005b0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b16:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005b1a:	f7fa fd71 	bl	8000600 <__aeabi_dmul>
 8005b1e:	e9cd 0100 	strd	r0, r1, [sp]
 8005b22:	1136      	asrs	r6, r6, #4
 8005b24:	2300      	movs	r3, #0
 8005b26:	2502      	movs	r5, #2
 8005b28:	2e00      	cmp	r6, #0
 8005b2a:	d17c      	bne.n	8005c26 <_dtoa_r+0x49e>
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d191      	bne.n	8005a54 <_dtoa_r+0x2cc>
 8005b30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f000 8084 	beq.w	8005c40 <_dtoa_r+0x4b8>
 8005b38:	e9dd 8900 	ldrd	r8, r9, [sp]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	4b93      	ldr	r3, [pc, #588]	; (8005d8c <_dtoa_r+0x604>)
 8005b40:	4640      	mov	r0, r8
 8005b42:	4649      	mov	r1, r9
 8005b44:	f7fa ffce 	bl	8000ae4 <__aeabi_dcmplt>
 8005b48:	2800      	cmp	r0, #0
 8005b4a:	d079      	beq.n	8005c40 <_dtoa_r+0x4b8>
 8005b4c:	9b03      	ldr	r3, [sp, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d076      	beq.n	8005c40 <_dtoa_r+0x4b8>
 8005b52:	9b04      	ldr	r3, [sp, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	dd34      	ble.n	8005bc2 <_dtoa_r+0x43a>
 8005b58:	2200      	movs	r2, #0
 8005b5a:	4b8d      	ldr	r3, [pc, #564]	; (8005d90 <_dtoa_r+0x608>)
 8005b5c:	4640      	mov	r0, r8
 8005b5e:	4649      	mov	r1, r9
 8005b60:	f7fa fd4e 	bl	8000600 <__aeabi_dmul>
 8005b64:	e9cd 0100 	strd	r0, r1, [sp]
 8005b68:	9e04      	ldr	r6, [sp, #16]
 8005b6a:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005b6e:	3501      	adds	r5, #1
 8005b70:	4628      	mov	r0, r5
 8005b72:	f7fa fcdf 	bl	8000534 <__aeabi_i2d>
 8005b76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b7a:	f7fa fd41 	bl	8000600 <__aeabi_dmul>
 8005b7e:	2200      	movs	r2, #0
 8005b80:	4b84      	ldr	r3, [pc, #528]	; (8005d94 <_dtoa_r+0x60c>)
 8005b82:	f7fa fb8b 	bl	800029c <__adddf3>
 8005b86:	4680      	mov	r8, r0
 8005b88:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8005b8c:	2e00      	cmp	r6, #0
 8005b8e:	d15a      	bne.n	8005c46 <_dtoa_r+0x4be>
 8005b90:	2200      	movs	r2, #0
 8005b92:	4b81      	ldr	r3, [pc, #516]	; (8005d98 <_dtoa_r+0x610>)
 8005b94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b98:	f7fa fb7e 	bl	8000298 <__aeabi_dsub>
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	e9cd 0100 	strd	r0, r1, [sp]
 8005ba4:	f7fa ffbc 	bl	8000b20 <__aeabi_dcmpgt>
 8005ba8:	2800      	cmp	r0, #0
 8005baa:	f040 829b 	bne.w	80060e4 <_dtoa_r+0x95c>
 8005bae:	4642      	mov	r2, r8
 8005bb0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005bb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005bb8:	f7fa ff94 	bl	8000ae4 <__aeabi_dcmplt>
 8005bbc:	2800      	cmp	r0, #0
 8005bbe:	f040 828f 	bne.w	80060e0 <_dtoa_r+0x958>
 8005bc2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005bc6:	e9cd 2300 	strd	r2, r3, [sp]
 8005bca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f2c0 8150 	blt.w	8005e72 <_dtoa_r+0x6ea>
 8005bd2:	f1bb 0f0e 	cmp.w	fp, #14
 8005bd6:	f300 814c 	bgt.w	8005e72 <_dtoa_r+0x6ea>
 8005bda:	4b6a      	ldr	r3, [pc, #424]	; (8005d84 <_dtoa_r+0x5fc>)
 8005bdc:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005be0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005be4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	f280 80da 	bge.w	8005da0 <_dtoa_r+0x618>
 8005bec:	9b03      	ldr	r3, [sp, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f300 80d6 	bgt.w	8005da0 <_dtoa_r+0x618>
 8005bf4:	f040 8273 	bne.w	80060de <_dtoa_r+0x956>
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	4b67      	ldr	r3, [pc, #412]	; (8005d98 <_dtoa_r+0x610>)
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	4649      	mov	r1, r9
 8005c00:	f7fa fcfe 	bl	8000600 <__aeabi_dmul>
 8005c04:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c08:	f7fa ff80 	bl	8000b0c <__aeabi_dcmpge>
 8005c0c:	9e03      	ldr	r6, [sp, #12]
 8005c0e:	4637      	mov	r7, r6
 8005c10:	2800      	cmp	r0, #0
 8005c12:	f040 824a 	bne.w	80060aa <_dtoa_r+0x922>
 8005c16:	9b02      	ldr	r3, [sp, #8]
 8005c18:	9a02      	ldr	r2, [sp, #8]
 8005c1a:	1c5d      	adds	r5, r3, #1
 8005c1c:	2331      	movs	r3, #49	; 0x31
 8005c1e:	7013      	strb	r3, [r2, #0]
 8005c20:	f10b 0b01 	add.w	fp, fp, #1
 8005c24:	e245      	b.n	80060b2 <_dtoa_r+0x92a>
 8005c26:	07f2      	lsls	r2, r6, #31
 8005c28:	d505      	bpl.n	8005c36 <_dtoa_r+0x4ae>
 8005c2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c2e:	f7fa fce7 	bl	8000600 <__aeabi_dmul>
 8005c32:	3501      	adds	r5, #1
 8005c34:	2301      	movs	r3, #1
 8005c36:	1076      	asrs	r6, r6, #1
 8005c38:	3708      	adds	r7, #8
 8005c3a:	e775      	b.n	8005b28 <_dtoa_r+0x3a0>
 8005c3c:	2502      	movs	r5, #2
 8005c3e:	e777      	b.n	8005b30 <_dtoa_r+0x3a8>
 8005c40:	465f      	mov	r7, fp
 8005c42:	9e03      	ldr	r6, [sp, #12]
 8005c44:	e794      	b.n	8005b70 <_dtoa_r+0x3e8>
 8005c46:	9a02      	ldr	r2, [sp, #8]
 8005c48:	4b4e      	ldr	r3, [pc, #312]	; (8005d84 <_dtoa_r+0x5fc>)
 8005c4a:	4432      	add	r2, r6
 8005c4c:	9213      	str	r2, [sp, #76]	; 0x4c
 8005c4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c50:	1e71      	subs	r1, r6, #1
 8005c52:	2a00      	cmp	r2, #0
 8005c54:	d048      	beq.n	8005ce8 <_dtoa_r+0x560>
 8005c56:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c5e:	2000      	movs	r0, #0
 8005c60:	494e      	ldr	r1, [pc, #312]	; (8005d9c <_dtoa_r+0x614>)
 8005c62:	f7fa fdf7 	bl	8000854 <__aeabi_ddiv>
 8005c66:	4642      	mov	r2, r8
 8005c68:	464b      	mov	r3, r9
 8005c6a:	f7fa fb15 	bl	8000298 <__aeabi_dsub>
 8005c6e:	9d02      	ldr	r5, [sp, #8]
 8005c70:	4680      	mov	r8, r0
 8005c72:	4689      	mov	r9, r1
 8005c74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c78:	f7fa ff72 	bl	8000b60 <__aeabi_d2iz>
 8005c7c:	4606      	mov	r6, r0
 8005c7e:	f7fa fc59 	bl	8000534 <__aeabi_i2d>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005c8a:	f7fa fb05 	bl	8000298 <__aeabi_dsub>
 8005c8e:	3630      	adds	r6, #48	; 0x30
 8005c90:	f805 6b01 	strb.w	r6, [r5], #1
 8005c94:	4642      	mov	r2, r8
 8005c96:	464b      	mov	r3, r9
 8005c98:	e9cd 0100 	strd	r0, r1, [sp]
 8005c9c:	f7fa ff22 	bl	8000ae4 <__aeabi_dcmplt>
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	d165      	bne.n	8005d70 <_dtoa_r+0x5e8>
 8005ca4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ca8:	2000      	movs	r0, #0
 8005caa:	4938      	ldr	r1, [pc, #224]	; (8005d8c <_dtoa_r+0x604>)
 8005cac:	f7fa faf4 	bl	8000298 <__aeabi_dsub>
 8005cb0:	4642      	mov	r2, r8
 8005cb2:	464b      	mov	r3, r9
 8005cb4:	f7fa ff16 	bl	8000ae4 <__aeabi_dcmplt>
 8005cb8:	2800      	cmp	r0, #0
 8005cba:	f040 80ba 	bne.w	8005e32 <_dtoa_r+0x6aa>
 8005cbe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005cc0:	429d      	cmp	r5, r3
 8005cc2:	f43f af7e 	beq.w	8005bc2 <_dtoa_r+0x43a>
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	4b31      	ldr	r3, [pc, #196]	; (8005d90 <_dtoa_r+0x608>)
 8005cca:	4640      	mov	r0, r8
 8005ccc:	4649      	mov	r1, r9
 8005cce:	f7fa fc97 	bl	8000600 <__aeabi_dmul>
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	4680      	mov	r8, r0
 8005cd6:	4689      	mov	r9, r1
 8005cd8:	4b2d      	ldr	r3, [pc, #180]	; (8005d90 <_dtoa_r+0x608>)
 8005cda:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005cde:	f7fa fc8f 	bl	8000600 <__aeabi_dmul>
 8005ce2:	e9cd 0100 	strd	r0, r1, [sp]
 8005ce6:	e7c5      	b.n	8005c74 <_dtoa_r+0x4ec>
 8005ce8:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005cec:	4642      	mov	r2, r8
 8005cee:	464b      	mov	r3, r9
 8005cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005cf4:	f7fa fc84 	bl	8000600 <__aeabi_dmul>
 8005cf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005cfc:	9d02      	ldr	r5, [sp, #8]
 8005cfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d02:	f7fa ff2d 	bl	8000b60 <__aeabi_d2iz>
 8005d06:	4606      	mov	r6, r0
 8005d08:	f7fa fc14 	bl	8000534 <__aeabi_i2d>
 8005d0c:	3630      	adds	r6, #48	; 0x30
 8005d0e:	4602      	mov	r2, r0
 8005d10:	460b      	mov	r3, r1
 8005d12:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d16:	f7fa fabf 	bl	8000298 <__aeabi_dsub>
 8005d1a:	f805 6b01 	strb.w	r6, [r5], #1
 8005d1e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005d20:	42ab      	cmp	r3, r5
 8005d22:	4680      	mov	r8, r0
 8005d24:	4689      	mov	r9, r1
 8005d26:	f04f 0200 	mov.w	r2, #0
 8005d2a:	d125      	bne.n	8005d78 <_dtoa_r+0x5f0>
 8005d2c:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <_dtoa_r+0x614>)
 8005d2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005d32:	f7fa fab3 	bl	800029c <__adddf3>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4640      	mov	r0, r8
 8005d3c:	4649      	mov	r1, r9
 8005d3e:	f7fa feef 	bl	8000b20 <__aeabi_dcmpgt>
 8005d42:	2800      	cmp	r0, #0
 8005d44:	d175      	bne.n	8005e32 <_dtoa_r+0x6aa>
 8005d46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	4913      	ldr	r1, [pc, #76]	; (8005d9c <_dtoa_r+0x614>)
 8005d4e:	f7fa faa3 	bl	8000298 <__aeabi_dsub>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4640      	mov	r0, r8
 8005d58:	4649      	mov	r1, r9
 8005d5a:	f7fa fec3 	bl	8000ae4 <__aeabi_dcmplt>
 8005d5e:	2800      	cmp	r0, #0
 8005d60:	f43f af2f 	beq.w	8005bc2 <_dtoa_r+0x43a>
 8005d64:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d68:	2b30      	cmp	r3, #48	; 0x30
 8005d6a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005d6e:	d001      	beq.n	8005d74 <_dtoa_r+0x5ec>
 8005d70:	46bb      	mov	fp, r7
 8005d72:	e04d      	b.n	8005e10 <_dtoa_r+0x688>
 8005d74:	4615      	mov	r5, r2
 8005d76:	e7f5      	b.n	8005d64 <_dtoa_r+0x5dc>
 8005d78:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <_dtoa_r+0x608>)
 8005d7a:	f7fa fc41 	bl	8000600 <__aeabi_dmul>
 8005d7e:	e9cd 0100 	strd	r0, r1, [sp]
 8005d82:	e7bc      	b.n	8005cfe <_dtoa_r+0x576>
 8005d84:	080075b8 	.word	0x080075b8
 8005d88:	08007590 	.word	0x08007590
 8005d8c:	3ff00000 	.word	0x3ff00000
 8005d90:	40240000 	.word	0x40240000
 8005d94:	401c0000 	.word	0x401c0000
 8005d98:	40140000 	.word	0x40140000
 8005d9c:	3fe00000 	.word	0x3fe00000
 8005da0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005da4:	9d02      	ldr	r5, [sp, #8]
 8005da6:	4642      	mov	r2, r8
 8005da8:	464b      	mov	r3, r9
 8005daa:	4630      	mov	r0, r6
 8005dac:	4639      	mov	r1, r7
 8005dae:	f7fa fd51 	bl	8000854 <__aeabi_ddiv>
 8005db2:	f7fa fed5 	bl	8000b60 <__aeabi_d2iz>
 8005db6:	9000      	str	r0, [sp, #0]
 8005db8:	f7fa fbbc 	bl	8000534 <__aeabi_i2d>
 8005dbc:	4642      	mov	r2, r8
 8005dbe:	464b      	mov	r3, r9
 8005dc0:	f7fa fc1e 	bl	8000600 <__aeabi_dmul>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	460b      	mov	r3, r1
 8005dc8:	4630      	mov	r0, r6
 8005dca:	4639      	mov	r1, r7
 8005dcc:	f7fa fa64 	bl	8000298 <__aeabi_dsub>
 8005dd0:	9e00      	ldr	r6, [sp, #0]
 8005dd2:	9f03      	ldr	r7, [sp, #12]
 8005dd4:	3630      	adds	r6, #48	; 0x30
 8005dd6:	f805 6b01 	strb.w	r6, [r5], #1
 8005dda:	9e02      	ldr	r6, [sp, #8]
 8005ddc:	1bae      	subs	r6, r5, r6
 8005dde:	42b7      	cmp	r7, r6
 8005de0:	4602      	mov	r2, r0
 8005de2:	460b      	mov	r3, r1
 8005de4:	d138      	bne.n	8005e58 <_dtoa_r+0x6d0>
 8005de6:	f7fa fa59 	bl	800029c <__adddf3>
 8005dea:	4606      	mov	r6, r0
 8005dec:	460f      	mov	r7, r1
 8005dee:	4602      	mov	r2, r0
 8005df0:	460b      	mov	r3, r1
 8005df2:	4640      	mov	r0, r8
 8005df4:	4649      	mov	r1, r9
 8005df6:	f7fa fe75 	bl	8000ae4 <__aeabi_dcmplt>
 8005dfa:	b9c8      	cbnz	r0, 8005e30 <_dtoa_r+0x6a8>
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	463b      	mov	r3, r7
 8005e00:	4640      	mov	r0, r8
 8005e02:	4649      	mov	r1, r9
 8005e04:	f7fa fe64 	bl	8000ad0 <__aeabi_dcmpeq>
 8005e08:	b110      	cbz	r0, 8005e10 <_dtoa_r+0x688>
 8005e0a:	9b00      	ldr	r3, [sp, #0]
 8005e0c:	07db      	lsls	r3, r3, #31
 8005e0e:	d40f      	bmi.n	8005e30 <_dtoa_r+0x6a8>
 8005e10:	4651      	mov	r1, sl
 8005e12:	4620      	mov	r0, r4
 8005e14:	f000 fbfd 	bl	8006612 <_Bfree>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005e1c:	702b      	strb	r3, [r5, #0]
 8005e1e:	f10b 0301 	add.w	r3, fp, #1
 8005e22:	6013      	str	r3, [r2, #0]
 8005e24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f43f acf8 	beq.w	800581c <_dtoa_r+0x94>
 8005e2c:	601d      	str	r5, [r3, #0]
 8005e2e:	e4f5      	b.n	800581c <_dtoa_r+0x94>
 8005e30:	465f      	mov	r7, fp
 8005e32:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e36:	2a39      	cmp	r2, #57	; 0x39
 8005e38:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005e3c:	d106      	bne.n	8005e4c <_dtoa_r+0x6c4>
 8005e3e:	9a02      	ldr	r2, [sp, #8]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d107      	bne.n	8005e54 <_dtoa_r+0x6cc>
 8005e44:	2330      	movs	r3, #48	; 0x30
 8005e46:	7013      	strb	r3, [r2, #0]
 8005e48:	3701      	adds	r7, #1
 8005e4a:	4613      	mov	r3, r2
 8005e4c:	781a      	ldrb	r2, [r3, #0]
 8005e4e:	3201      	adds	r2, #1
 8005e50:	701a      	strb	r2, [r3, #0]
 8005e52:	e78d      	b.n	8005d70 <_dtoa_r+0x5e8>
 8005e54:	461d      	mov	r5, r3
 8005e56:	e7ec      	b.n	8005e32 <_dtoa_r+0x6aa>
 8005e58:	2200      	movs	r2, #0
 8005e5a:	4ba4      	ldr	r3, [pc, #656]	; (80060ec <_dtoa_r+0x964>)
 8005e5c:	f7fa fbd0 	bl	8000600 <__aeabi_dmul>
 8005e60:	2200      	movs	r2, #0
 8005e62:	2300      	movs	r3, #0
 8005e64:	4606      	mov	r6, r0
 8005e66:	460f      	mov	r7, r1
 8005e68:	f7fa fe32 	bl	8000ad0 <__aeabi_dcmpeq>
 8005e6c:	2800      	cmp	r0, #0
 8005e6e:	d09a      	beq.n	8005da6 <_dtoa_r+0x61e>
 8005e70:	e7ce      	b.n	8005e10 <_dtoa_r+0x688>
 8005e72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	f000 80cd 	beq.w	8006014 <_dtoa_r+0x88c>
 8005e7a:	9a07      	ldr	r2, [sp, #28]
 8005e7c:	2a01      	cmp	r2, #1
 8005e7e:	f300 80af 	bgt.w	8005fe0 <_dtoa_r+0x858>
 8005e82:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e84:	2a00      	cmp	r2, #0
 8005e86:	f000 80a7 	beq.w	8005fd8 <_dtoa_r+0x850>
 8005e8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e8e:	9e08      	ldr	r6, [sp, #32]
 8005e90:	9d05      	ldr	r5, [sp, #20]
 8005e92:	9a05      	ldr	r2, [sp, #20]
 8005e94:	441a      	add	r2, r3
 8005e96:	9205      	str	r2, [sp, #20]
 8005e98:	9a06      	ldr	r2, [sp, #24]
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	441a      	add	r2, r3
 8005e9e:	4620      	mov	r0, r4
 8005ea0:	9206      	str	r2, [sp, #24]
 8005ea2:	f000 fc56 	bl	8006752 <__i2b>
 8005ea6:	4607      	mov	r7, r0
 8005ea8:	2d00      	cmp	r5, #0
 8005eaa:	dd0c      	ble.n	8005ec6 <_dtoa_r+0x73e>
 8005eac:	9b06      	ldr	r3, [sp, #24]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	dd09      	ble.n	8005ec6 <_dtoa_r+0x73e>
 8005eb2:	42ab      	cmp	r3, r5
 8005eb4:	9a05      	ldr	r2, [sp, #20]
 8005eb6:	bfa8      	it	ge
 8005eb8:	462b      	movge	r3, r5
 8005eba:	1ad2      	subs	r2, r2, r3
 8005ebc:	9205      	str	r2, [sp, #20]
 8005ebe:	9a06      	ldr	r2, [sp, #24]
 8005ec0:	1aed      	subs	r5, r5, r3
 8005ec2:	1ad3      	subs	r3, r2, r3
 8005ec4:	9306      	str	r3, [sp, #24]
 8005ec6:	9b08      	ldr	r3, [sp, #32]
 8005ec8:	b1f3      	cbz	r3, 8005f08 <_dtoa_r+0x780>
 8005eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 80a5 	beq.w	800601c <_dtoa_r+0x894>
 8005ed2:	2e00      	cmp	r6, #0
 8005ed4:	dd10      	ble.n	8005ef8 <_dtoa_r+0x770>
 8005ed6:	4639      	mov	r1, r7
 8005ed8:	4632      	mov	r2, r6
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 fcd0 	bl	8006880 <__pow5mult>
 8005ee0:	4652      	mov	r2, sl
 8005ee2:	4601      	mov	r1, r0
 8005ee4:	4607      	mov	r7, r0
 8005ee6:	4620      	mov	r0, r4
 8005ee8:	f000 fc3c 	bl	8006764 <__multiply>
 8005eec:	4651      	mov	r1, sl
 8005eee:	4680      	mov	r8, r0
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f000 fb8e 	bl	8006612 <_Bfree>
 8005ef6:	46c2      	mov	sl, r8
 8005ef8:	9b08      	ldr	r3, [sp, #32]
 8005efa:	1b9a      	subs	r2, r3, r6
 8005efc:	d004      	beq.n	8005f08 <_dtoa_r+0x780>
 8005efe:	4651      	mov	r1, sl
 8005f00:	4620      	mov	r0, r4
 8005f02:	f000 fcbd 	bl	8006880 <__pow5mult>
 8005f06:	4682      	mov	sl, r0
 8005f08:	2101      	movs	r1, #1
 8005f0a:	4620      	mov	r0, r4
 8005f0c:	f000 fc21 	bl	8006752 <__i2b>
 8005f10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	4606      	mov	r6, r0
 8005f16:	f340 8083 	ble.w	8006020 <_dtoa_r+0x898>
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	4601      	mov	r1, r0
 8005f1e:	4620      	mov	r0, r4
 8005f20:	f000 fcae 	bl	8006880 <__pow5mult>
 8005f24:	9b07      	ldr	r3, [sp, #28]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	4606      	mov	r6, r0
 8005f2a:	dd7c      	ble.n	8006026 <_dtoa_r+0x89e>
 8005f2c:	f04f 0800 	mov.w	r8, #0
 8005f30:	6933      	ldr	r3, [r6, #16]
 8005f32:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f36:	6918      	ldr	r0, [r3, #16]
 8005f38:	f000 fbbd 	bl	80066b6 <__hi0bits>
 8005f3c:	f1c0 0020 	rsb	r0, r0, #32
 8005f40:	9b06      	ldr	r3, [sp, #24]
 8005f42:	4418      	add	r0, r3
 8005f44:	f010 001f 	ands.w	r0, r0, #31
 8005f48:	f000 8096 	beq.w	8006078 <_dtoa_r+0x8f0>
 8005f4c:	f1c0 0320 	rsb	r3, r0, #32
 8005f50:	2b04      	cmp	r3, #4
 8005f52:	f340 8087 	ble.w	8006064 <_dtoa_r+0x8dc>
 8005f56:	9b05      	ldr	r3, [sp, #20]
 8005f58:	f1c0 001c 	rsb	r0, r0, #28
 8005f5c:	4403      	add	r3, r0
 8005f5e:	9305      	str	r3, [sp, #20]
 8005f60:	9b06      	ldr	r3, [sp, #24]
 8005f62:	4405      	add	r5, r0
 8005f64:	4403      	add	r3, r0
 8005f66:	9306      	str	r3, [sp, #24]
 8005f68:	9b05      	ldr	r3, [sp, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	dd05      	ble.n	8005f7a <_dtoa_r+0x7f2>
 8005f6e:	4651      	mov	r1, sl
 8005f70:	461a      	mov	r2, r3
 8005f72:	4620      	mov	r0, r4
 8005f74:	f000 fcd2 	bl	800691c <__lshift>
 8005f78:	4682      	mov	sl, r0
 8005f7a:	9b06      	ldr	r3, [sp, #24]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	dd05      	ble.n	8005f8c <_dtoa_r+0x804>
 8005f80:	4631      	mov	r1, r6
 8005f82:	461a      	mov	r2, r3
 8005f84:	4620      	mov	r0, r4
 8005f86:	f000 fcc9 	bl	800691c <__lshift>
 8005f8a:	4606      	mov	r6, r0
 8005f8c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d074      	beq.n	800607c <_dtoa_r+0x8f4>
 8005f92:	4631      	mov	r1, r6
 8005f94:	4650      	mov	r0, sl
 8005f96:	f000 fd12 	bl	80069be <__mcmp>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	da6e      	bge.n	800607c <_dtoa_r+0x8f4>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	4651      	mov	r1, sl
 8005fa2:	220a      	movs	r2, #10
 8005fa4:	4620      	mov	r0, r4
 8005fa6:	f000 fb4b 	bl	8006640 <__multadd>
 8005faa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fac:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005fb0:	4682      	mov	sl, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 81a8 	beq.w	8006308 <_dtoa_r+0xb80>
 8005fb8:	2300      	movs	r3, #0
 8005fba:	4639      	mov	r1, r7
 8005fbc:	220a      	movs	r2, #10
 8005fbe:	4620      	mov	r0, r4
 8005fc0:	f000 fb3e 	bl	8006640 <__multadd>
 8005fc4:	9b04      	ldr	r3, [sp, #16]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	4607      	mov	r7, r0
 8005fca:	f300 80c8 	bgt.w	800615e <_dtoa_r+0x9d6>
 8005fce:	9b07      	ldr	r3, [sp, #28]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	f340 80c4 	ble.w	800615e <_dtoa_r+0x9d6>
 8005fd6:	e059      	b.n	800608c <_dtoa_r+0x904>
 8005fd8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005fda:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fde:	e756      	b.n	8005e8e <_dtoa_r+0x706>
 8005fe0:	9b03      	ldr	r3, [sp, #12]
 8005fe2:	1e5e      	subs	r6, r3, #1
 8005fe4:	9b08      	ldr	r3, [sp, #32]
 8005fe6:	42b3      	cmp	r3, r6
 8005fe8:	bfbf      	itttt	lt
 8005fea:	9b08      	ldrlt	r3, [sp, #32]
 8005fec:	9608      	strlt	r6, [sp, #32]
 8005fee:	1af2      	sublt	r2, r6, r3
 8005ff0:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8005ff2:	bfb6      	itet	lt
 8005ff4:	189b      	addlt	r3, r3, r2
 8005ff6:	1b9e      	subge	r6, r3, r6
 8005ff8:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8005ffa:	9b03      	ldr	r3, [sp, #12]
 8005ffc:	bfb8      	it	lt
 8005ffe:	2600      	movlt	r6, #0
 8006000:	2b00      	cmp	r3, #0
 8006002:	bfb9      	ittee	lt
 8006004:	9b05      	ldrlt	r3, [sp, #20]
 8006006:	9a03      	ldrlt	r2, [sp, #12]
 8006008:	9d05      	ldrge	r5, [sp, #20]
 800600a:	9b03      	ldrge	r3, [sp, #12]
 800600c:	bfbc      	itt	lt
 800600e:	1a9d      	sublt	r5, r3, r2
 8006010:	2300      	movlt	r3, #0
 8006012:	e73e      	b.n	8005e92 <_dtoa_r+0x70a>
 8006014:	9e08      	ldr	r6, [sp, #32]
 8006016:	9d05      	ldr	r5, [sp, #20]
 8006018:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800601a:	e745      	b.n	8005ea8 <_dtoa_r+0x720>
 800601c:	9a08      	ldr	r2, [sp, #32]
 800601e:	e76e      	b.n	8005efe <_dtoa_r+0x776>
 8006020:	9b07      	ldr	r3, [sp, #28]
 8006022:	2b01      	cmp	r3, #1
 8006024:	dc19      	bgt.n	800605a <_dtoa_r+0x8d2>
 8006026:	9b00      	ldr	r3, [sp, #0]
 8006028:	b9bb      	cbnz	r3, 800605a <_dtoa_r+0x8d2>
 800602a:	9b01      	ldr	r3, [sp, #4]
 800602c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006030:	b99b      	cbnz	r3, 800605a <_dtoa_r+0x8d2>
 8006032:	9b01      	ldr	r3, [sp, #4]
 8006034:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006038:	0d1b      	lsrs	r3, r3, #20
 800603a:	051b      	lsls	r3, r3, #20
 800603c:	b183      	cbz	r3, 8006060 <_dtoa_r+0x8d8>
 800603e:	9b05      	ldr	r3, [sp, #20]
 8006040:	3301      	adds	r3, #1
 8006042:	9305      	str	r3, [sp, #20]
 8006044:	9b06      	ldr	r3, [sp, #24]
 8006046:	3301      	adds	r3, #1
 8006048:	9306      	str	r3, [sp, #24]
 800604a:	f04f 0801 	mov.w	r8, #1
 800604e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006050:	2b00      	cmp	r3, #0
 8006052:	f47f af6d 	bne.w	8005f30 <_dtoa_r+0x7a8>
 8006056:	2001      	movs	r0, #1
 8006058:	e772      	b.n	8005f40 <_dtoa_r+0x7b8>
 800605a:	f04f 0800 	mov.w	r8, #0
 800605e:	e7f6      	b.n	800604e <_dtoa_r+0x8c6>
 8006060:	4698      	mov	r8, r3
 8006062:	e7f4      	b.n	800604e <_dtoa_r+0x8c6>
 8006064:	d080      	beq.n	8005f68 <_dtoa_r+0x7e0>
 8006066:	9a05      	ldr	r2, [sp, #20]
 8006068:	331c      	adds	r3, #28
 800606a:	441a      	add	r2, r3
 800606c:	9205      	str	r2, [sp, #20]
 800606e:	9a06      	ldr	r2, [sp, #24]
 8006070:	441a      	add	r2, r3
 8006072:	441d      	add	r5, r3
 8006074:	4613      	mov	r3, r2
 8006076:	e776      	b.n	8005f66 <_dtoa_r+0x7de>
 8006078:	4603      	mov	r3, r0
 800607a:	e7f4      	b.n	8006066 <_dtoa_r+0x8de>
 800607c:	9b03      	ldr	r3, [sp, #12]
 800607e:	2b00      	cmp	r3, #0
 8006080:	dc36      	bgt.n	80060f0 <_dtoa_r+0x968>
 8006082:	9b07      	ldr	r3, [sp, #28]
 8006084:	2b02      	cmp	r3, #2
 8006086:	dd33      	ble.n	80060f0 <_dtoa_r+0x968>
 8006088:	9b03      	ldr	r3, [sp, #12]
 800608a:	9304      	str	r3, [sp, #16]
 800608c:	9b04      	ldr	r3, [sp, #16]
 800608e:	b963      	cbnz	r3, 80060aa <_dtoa_r+0x922>
 8006090:	4631      	mov	r1, r6
 8006092:	2205      	movs	r2, #5
 8006094:	4620      	mov	r0, r4
 8006096:	f000 fad3 	bl	8006640 <__multadd>
 800609a:	4601      	mov	r1, r0
 800609c:	4606      	mov	r6, r0
 800609e:	4650      	mov	r0, sl
 80060a0:	f000 fc8d 	bl	80069be <__mcmp>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	f73f adb6 	bgt.w	8005c16 <_dtoa_r+0x48e>
 80060aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060ac:	9d02      	ldr	r5, [sp, #8]
 80060ae:	ea6f 0b03 	mvn.w	fp, r3
 80060b2:	2300      	movs	r3, #0
 80060b4:	9303      	str	r3, [sp, #12]
 80060b6:	4631      	mov	r1, r6
 80060b8:	4620      	mov	r0, r4
 80060ba:	f000 faaa 	bl	8006612 <_Bfree>
 80060be:	2f00      	cmp	r7, #0
 80060c0:	f43f aea6 	beq.w	8005e10 <_dtoa_r+0x688>
 80060c4:	9b03      	ldr	r3, [sp, #12]
 80060c6:	b12b      	cbz	r3, 80060d4 <_dtoa_r+0x94c>
 80060c8:	42bb      	cmp	r3, r7
 80060ca:	d003      	beq.n	80060d4 <_dtoa_r+0x94c>
 80060cc:	4619      	mov	r1, r3
 80060ce:	4620      	mov	r0, r4
 80060d0:	f000 fa9f 	bl	8006612 <_Bfree>
 80060d4:	4639      	mov	r1, r7
 80060d6:	4620      	mov	r0, r4
 80060d8:	f000 fa9b 	bl	8006612 <_Bfree>
 80060dc:	e698      	b.n	8005e10 <_dtoa_r+0x688>
 80060de:	2600      	movs	r6, #0
 80060e0:	4637      	mov	r7, r6
 80060e2:	e7e2      	b.n	80060aa <_dtoa_r+0x922>
 80060e4:	46bb      	mov	fp, r7
 80060e6:	4637      	mov	r7, r6
 80060e8:	e595      	b.n	8005c16 <_dtoa_r+0x48e>
 80060ea:	bf00      	nop
 80060ec:	40240000 	.word	0x40240000
 80060f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060f2:	bb93      	cbnz	r3, 800615a <_dtoa_r+0x9d2>
 80060f4:	9b03      	ldr	r3, [sp, #12]
 80060f6:	9304      	str	r3, [sp, #16]
 80060f8:	9d02      	ldr	r5, [sp, #8]
 80060fa:	4631      	mov	r1, r6
 80060fc:	4650      	mov	r0, sl
 80060fe:	f7ff fab7 	bl	8005670 <quorem>
 8006102:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006106:	f805 9b01 	strb.w	r9, [r5], #1
 800610a:	9b02      	ldr	r3, [sp, #8]
 800610c:	9a04      	ldr	r2, [sp, #16]
 800610e:	1aeb      	subs	r3, r5, r3
 8006110:	429a      	cmp	r2, r3
 8006112:	f300 80dc 	bgt.w	80062ce <_dtoa_r+0xb46>
 8006116:	9b02      	ldr	r3, [sp, #8]
 8006118:	2a01      	cmp	r2, #1
 800611a:	bfac      	ite	ge
 800611c:	189b      	addge	r3, r3, r2
 800611e:	3301      	addlt	r3, #1
 8006120:	4698      	mov	r8, r3
 8006122:	2300      	movs	r3, #0
 8006124:	9303      	str	r3, [sp, #12]
 8006126:	4651      	mov	r1, sl
 8006128:	2201      	movs	r2, #1
 800612a:	4620      	mov	r0, r4
 800612c:	f000 fbf6 	bl	800691c <__lshift>
 8006130:	4631      	mov	r1, r6
 8006132:	4682      	mov	sl, r0
 8006134:	f000 fc43 	bl	80069be <__mcmp>
 8006138:	2800      	cmp	r0, #0
 800613a:	f300 808d 	bgt.w	8006258 <_dtoa_r+0xad0>
 800613e:	d103      	bne.n	8006148 <_dtoa_r+0x9c0>
 8006140:	f019 0f01 	tst.w	r9, #1
 8006144:	f040 8088 	bne.w	8006258 <_dtoa_r+0xad0>
 8006148:	4645      	mov	r5, r8
 800614a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800614e:	2b30      	cmp	r3, #48	; 0x30
 8006150:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006154:	d1af      	bne.n	80060b6 <_dtoa_r+0x92e>
 8006156:	4615      	mov	r5, r2
 8006158:	e7f7      	b.n	800614a <_dtoa_r+0x9c2>
 800615a:	9b03      	ldr	r3, [sp, #12]
 800615c:	9304      	str	r3, [sp, #16]
 800615e:	2d00      	cmp	r5, #0
 8006160:	dd05      	ble.n	800616e <_dtoa_r+0x9e6>
 8006162:	4639      	mov	r1, r7
 8006164:	462a      	mov	r2, r5
 8006166:	4620      	mov	r0, r4
 8006168:	f000 fbd8 	bl	800691c <__lshift>
 800616c:	4607      	mov	r7, r0
 800616e:	f1b8 0f00 	cmp.w	r8, #0
 8006172:	d04c      	beq.n	800620e <_dtoa_r+0xa86>
 8006174:	6879      	ldr	r1, [r7, #4]
 8006176:	4620      	mov	r0, r4
 8006178:	f000 fa17 	bl	80065aa <_Balloc>
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	3202      	adds	r2, #2
 8006180:	4605      	mov	r5, r0
 8006182:	0092      	lsls	r2, r2, #2
 8006184:	f107 010c 	add.w	r1, r7, #12
 8006188:	300c      	adds	r0, #12
 800618a:	f000 fa03 	bl	8006594 <memcpy>
 800618e:	2201      	movs	r2, #1
 8006190:	4629      	mov	r1, r5
 8006192:	4620      	mov	r0, r4
 8006194:	f000 fbc2 	bl	800691c <__lshift>
 8006198:	9b00      	ldr	r3, [sp, #0]
 800619a:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800619e:	9703      	str	r7, [sp, #12]
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	4607      	mov	r7, r0
 80061a6:	9305      	str	r3, [sp, #20]
 80061a8:	4631      	mov	r1, r6
 80061aa:	4650      	mov	r0, sl
 80061ac:	f7ff fa60 	bl	8005670 <quorem>
 80061b0:	9903      	ldr	r1, [sp, #12]
 80061b2:	4605      	mov	r5, r0
 80061b4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80061b8:	4650      	mov	r0, sl
 80061ba:	f000 fc00 	bl	80069be <__mcmp>
 80061be:	463a      	mov	r2, r7
 80061c0:	9000      	str	r0, [sp, #0]
 80061c2:	4631      	mov	r1, r6
 80061c4:	4620      	mov	r0, r4
 80061c6:	f000 fc14 	bl	80069f2 <__mdiff>
 80061ca:	68c3      	ldr	r3, [r0, #12]
 80061cc:	4602      	mov	r2, r0
 80061ce:	bb03      	cbnz	r3, 8006212 <_dtoa_r+0xa8a>
 80061d0:	4601      	mov	r1, r0
 80061d2:	9006      	str	r0, [sp, #24]
 80061d4:	4650      	mov	r0, sl
 80061d6:	f000 fbf2 	bl	80069be <__mcmp>
 80061da:	9a06      	ldr	r2, [sp, #24]
 80061dc:	4603      	mov	r3, r0
 80061de:	4611      	mov	r1, r2
 80061e0:	4620      	mov	r0, r4
 80061e2:	9306      	str	r3, [sp, #24]
 80061e4:	f000 fa15 	bl	8006612 <_Bfree>
 80061e8:	9b06      	ldr	r3, [sp, #24]
 80061ea:	b9a3      	cbnz	r3, 8006216 <_dtoa_r+0xa8e>
 80061ec:	9a07      	ldr	r2, [sp, #28]
 80061ee:	b992      	cbnz	r2, 8006216 <_dtoa_r+0xa8e>
 80061f0:	9a05      	ldr	r2, [sp, #20]
 80061f2:	b982      	cbnz	r2, 8006216 <_dtoa_r+0xa8e>
 80061f4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80061f8:	d029      	beq.n	800624e <_dtoa_r+0xac6>
 80061fa:	9b00      	ldr	r3, [sp, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	dd01      	ble.n	8006204 <_dtoa_r+0xa7c>
 8006200:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8006204:	f108 0501 	add.w	r5, r8, #1
 8006208:	f888 9000 	strb.w	r9, [r8]
 800620c:	e753      	b.n	80060b6 <_dtoa_r+0x92e>
 800620e:	4638      	mov	r0, r7
 8006210:	e7c2      	b.n	8006198 <_dtoa_r+0xa10>
 8006212:	2301      	movs	r3, #1
 8006214:	e7e3      	b.n	80061de <_dtoa_r+0xa56>
 8006216:	9a00      	ldr	r2, [sp, #0]
 8006218:	2a00      	cmp	r2, #0
 800621a:	db04      	blt.n	8006226 <_dtoa_r+0xa9e>
 800621c:	d125      	bne.n	800626a <_dtoa_r+0xae2>
 800621e:	9a07      	ldr	r2, [sp, #28]
 8006220:	bb1a      	cbnz	r2, 800626a <_dtoa_r+0xae2>
 8006222:	9a05      	ldr	r2, [sp, #20]
 8006224:	bb0a      	cbnz	r2, 800626a <_dtoa_r+0xae2>
 8006226:	2b00      	cmp	r3, #0
 8006228:	ddec      	ble.n	8006204 <_dtoa_r+0xa7c>
 800622a:	4651      	mov	r1, sl
 800622c:	2201      	movs	r2, #1
 800622e:	4620      	mov	r0, r4
 8006230:	f000 fb74 	bl	800691c <__lshift>
 8006234:	4631      	mov	r1, r6
 8006236:	4682      	mov	sl, r0
 8006238:	f000 fbc1 	bl	80069be <__mcmp>
 800623c:	2800      	cmp	r0, #0
 800623e:	dc03      	bgt.n	8006248 <_dtoa_r+0xac0>
 8006240:	d1e0      	bne.n	8006204 <_dtoa_r+0xa7c>
 8006242:	f019 0f01 	tst.w	r9, #1
 8006246:	d0dd      	beq.n	8006204 <_dtoa_r+0xa7c>
 8006248:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800624c:	d1d8      	bne.n	8006200 <_dtoa_r+0xa78>
 800624e:	2339      	movs	r3, #57	; 0x39
 8006250:	f888 3000 	strb.w	r3, [r8]
 8006254:	f108 0801 	add.w	r8, r8, #1
 8006258:	4645      	mov	r5, r8
 800625a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800625e:	2b39      	cmp	r3, #57	; 0x39
 8006260:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8006264:	d03b      	beq.n	80062de <_dtoa_r+0xb56>
 8006266:	3301      	adds	r3, #1
 8006268:	e040      	b.n	80062ec <_dtoa_r+0xb64>
 800626a:	2b00      	cmp	r3, #0
 800626c:	f108 0501 	add.w	r5, r8, #1
 8006270:	dd05      	ble.n	800627e <_dtoa_r+0xaf6>
 8006272:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006276:	d0ea      	beq.n	800624e <_dtoa_r+0xac6>
 8006278:	f109 0901 	add.w	r9, r9, #1
 800627c:	e7c4      	b.n	8006208 <_dtoa_r+0xa80>
 800627e:	9b02      	ldr	r3, [sp, #8]
 8006280:	9a04      	ldr	r2, [sp, #16]
 8006282:	f805 9c01 	strb.w	r9, [r5, #-1]
 8006286:	1aeb      	subs	r3, r5, r3
 8006288:	4293      	cmp	r3, r2
 800628a:	46a8      	mov	r8, r5
 800628c:	f43f af4b 	beq.w	8006126 <_dtoa_r+0x99e>
 8006290:	4651      	mov	r1, sl
 8006292:	2300      	movs	r3, #0
 8006294:	220a      	movs	r2, #10
 8006296:	4620      	mov	r0, r4
 8006298:	f000 f9d2 	bl	8006640 <__multadd>
 800629c:	9b03      	ldr	r3, [sp, #12]
 800629e:	9903      	ldr	r1, [sp, #12]
 80062a0:	42bb      	cmp	r3, r7
 80062a2:	4682      	mov	sl, r0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	f04f 020a 	mov.w	r2, #10
 80062ac:	4620      	mov	r0, r4
 80062ae:	d104      	bne.n	80062ba <_dtoa_r+0xb32>
 80062b0:	f000 f9c6 	bl	8006640 <__multadd>
 80062b4:	9003      	str	r0, [sp, #12]
 80062b6:	4607      	mov	r7, r0
 80062b8:	e776      	b.n	80061a8 <_dtoa_r+0xa20>
 80062ba:	f000 f9c1 	bl	8006640 <__multadd>
 80062be:	2300      	movs	r3, #0
 80062c0:	9003      	str	r0, [sp, #12]
 80062c2:	220a      	movs	r2, #10
 80062c4:	4639      	mov	r1, r7
 80062c6:	4620      	mov	r0, r4
 80062c8:	f000 f9ba 	bl	8006640 <__multadd>
 80062cc:	e7f3      	b.n	80062b6 <_dtoa_r+0xb2e>
 80062ce:	4651      	mov	r1, sl
 80062d0:	2300      	movs	r3, #0
 80062d2:	220a      	movs	r2, #10
 80062d4:	4620      	mov	r0, r4
 80062d6:	f000 f9b3 	bl	8006640 <__multadd>
 80062da:	4682      	mov	sl, r0
 80062dc:	e70d      	b.n	80060fa <_dtoa_r+0x972>
 80062de:	9b02      	ldr	r3, [sp, #8]
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d105      	bne.n	80062f0 <_dtoa_r+0xb68>
 80062e4:	9a02      	ldr	r2, [sp, #8]
 80062e6:	f10b 0b01 	add.w	fp, fp, #1
 80062ea:	2331      	movs	r3, #49	; 0x31
 80062ec:	7013      	strb	r3, [r2, #0]
 80062ee:	e6e2      	b.n	80060b6 <_dtoa_r+0x92e>
 80062f0:	4615      	mov	r5, r2
 80062f2:	e7b2      	b.n	800625a <_dtoa_r+0xad2>
 80062f4:	4b09      	ldr	r3, [pc, #36]	; (800631c <_dtoa_r+0xb94>)
 80062f6:	f7ff baae 	b.w	8005856 <_dtoa_r+0xce>
 80062fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f47f aa88 	bne.w	8005812 <_dtoa_r+0x8a>
 8006302:	4b07      	ldr	r3, [pc, #28]	; (8006320 <_dtoa_r+0xb98>)
 8006304:	f7ff baa7 	b.w	8005856 <_dtoa_r+0xce>
 8006308:	9b04      	ldr	r3, [sp, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	f73f aef4 	bgt.w	80060f8 <_dtoa_r+0x970>
 8006310:	9b07      	ldr	r3, [sp, #28]
 8006312:	2b02      	cmp	r3, #2
 8006314:	f77f aef0 	ble.w	80060f8 <_dtoa_r+0x970>
 8006318:	e6b8      	b.n	800608c <_dtoa_r+0x904>
 800631a:	bf00      	nop
 800631c:	0800752e 	.word	0x0800752e
 8006320:	08007575 	.word	0x08007575

08006324 <_malloc_trim_r>:
 8006324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006328:	4f25      	ldr	r7, [pc, #148]	; (80063c0 <_malloc_trim_r+0x9c>)
 800632a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80063cc <_malloc_trim_r+0xa8>
 800632e:	4689      	mov	r9, r1
 8006330:	4606      	mov	r6, r0
 8006332:	f7fe f86d 	bl	8004410 <__malloc_lock>
 8006336:	68bb      	ldr	r3, [r7, #8]
 8006338:	685d      	ldr	r5, [r3, #4]
 800633a:	f1a8 0411 	sub.w	r4, r8, #17
 800633e:	f025 0503 	bic.w	r5, r5, #3
 8006342:	eba4 0409 	sub.w	r4, r4, r9
 8006346:	442c      	add	r4, r5
 8006348:	fbb4 f4f8 	udiv	r4, r4, r8
 800634c:	3c01      	subs	r4, #1
 800634e:	fb08 f404 	mul.w	r4, r8, r4
 8006352:	4544      	cmp	r4, r8
 8006354:	da05      	bge.n	8006362 <_malloc_trim_r+0x3e>
 8006356:	4630      	mov	r0, r6
 8006358:	f7fe f860 	bl	800441c <__malloc_unlock>
 800635c:	2000      	movs	r0, #0
 800635e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006362:	2100      	movs	r1, #0
 8006364:	4630      	mov	r0, r6
 8006366:	f7fe f85f 	bl	8004428 <_sbrk_r>
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	442b      	add	r3, r5
 800636e:	4298      	cmp	r0, r3
 8006370:	d1f1      	bne.n	8006356 <_malloc_trim_r+0x32>
 8006372:	4261      	negs	r1, r4
 8006374:	4630      	mov	r0, r6
 8006376:	f7fe f857 	bl	8004428 <_sbrk_r>
 800637a:	3001      	adds	r0, #1
 800637c:	d110      	bne.n	80063a0 <_malloc_trim_r+0x7c>
 800637e:	2100      	movs	r1, #0
 8006380:	4630      	mov	r0, r6
 8006382:	f7fe f851 	bl	8004428 <_sbrk_r>
 8006386:	68ba      	ldr	r2, [r7, #8]
 8006388:	1a83      	subs	r3, r0, r2
 800638a:	2b0f      	cmp	r3, #15
 800638c:	dde3      	ble.n	8006356 <_malloc_trim_r+0x32>
 800638e:	490d      	ldr	r1, [pc, #52]	; (80063c4 <_malloc_trim_r+0xa0>)
 8006390:	6809      	ldr	r1, [r1, #0]
 8006392:	1a40      	subs	r0, r0, r1
 8006394:	490c      	ldr	r1, [pc, #48]	; (80063c8 <_malloc_trim_r+0xa4>)
 8006396:	f043 0301 	orr.w	r3, r3, #1
 800639a:	6008      	str	r0, [r1, #0]
 800639c:	6053      	str	r3, [r2, #4]
 800639e:	e7da      	b.n	8006356 <_malloc_trim_r+0x32>
 80063a0:	68bb      	ldr	r3, [r7, #8]
 80063a2:	4a09      	ldr	r2, [pc, #36]	; (80063c8 <_malloc_trim_r+0xa4>)
 80063a4:	1b2d      	subs	r5, r5, r4
 80063a6:	f045 0501 	orr.w	r5, r5, #1
 80063aa:	605d      	str	r5, [r3, #4]
 80063ac:	6813      	ldr	r3, [r2, #0]
 80063ae:	4630      	mov	r0, r6
 80063b0:	1b1c      	subs	r4, r3, r4
 80063b2:	6014      	str	r4, [r2, #0]
 80063b4:	f7fe f832 	bl	800441c <__malloc_unlock>
 80063b8:	2001      	movs	r0, #1
 80063ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063be:	bf00      	nop
 80063c0:	20000020 	.word	0x20000020
 80063c4:	20000428 	.word	0x20000428
 80063c8:	20000984 	.word	0x20000984
 80063cc:	00000080 	.word	0x00000080

080063d0 <_free_r>:
 80063d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063d4:	4604      	mov	r4, r0
 80063d6:	4688      	mov	r8, r1
 80063d8:	2900      	cmp	r1, #0
 80063da:	f000 80ab 	beq.w	8006534 <_free_r+0x164>
 80063de:	f7fe f817 	bl	8004410 <__malloc_lock>
 80063e2:	f858 2c04 	ldr.w	r2, [r8, #-4]
 80063e6:	4d54      	ldr	r5, [pc, #336]	; (8006538 <_free_r+0x168>)
 80063e8:	f022 0001 	bic.w	r0, r2, #1
 80063ec:	f1a8 0308 	sub.w	r3, r8, #8
 80063f0:	181f      	adds	r7, r3, r0
 80063f2:	68a9      	ldr	r1, [r5, #8]
 80063f4:	687e      	ldr	r6, [r7, #4]
 80063f6:	428f      	cmp	r7, r1
 80063f8:	f026 0603 	bic.w	r6, r6, #3
 80063fc:	f002 0201 	and.w	r2, r2, #1
 8006400:	d11b      	bne.n	800643a <_free_r+0x6a>
 8006402:	4430      	add	r0, r6
 8006404:	b93a      	cbnz	r2, 8006416 <_free_r+0x46>
 8006406:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800640a:	1a9b      	subs	r3, r3, r2
 800640c:	4410      	add	r0, r2
 800640e:	6899      	ldr	r1, [r3, #8]
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	60ca      	str	r2, [r1, #12]
 8006414:	6091      	str	r1, [r2, #8]
 8006416:	f040 0201 	orr.w	r2, r0, #1
 800641a:	605a      	str	r2, [r3, #4]
 800641c:	60ab      	str	r3, [r5, #8]
 800641e:	4b47      	ldr	r3, [pc, #284]	; (800653c <_free_r+0x16c>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	4298      	cmp	r0, r3
 8006424:	d304      	bcc.n	8006430 <_free_r+0x60>
 8006426:	4b46      	ldr	r3, [pc, #280]	; (8006540 <_free_r+0x170>)
 8006428:	4620      	mov	r0, r4
 800642a:	6819      	ldr	r1, [r3, #0]
 800642c:	f7ff ff7a 	bl	8006324 <_malloc_trim_r>
 8006430:	4620      	mov	r0, r4
 8006432:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006436:	f7fd bff1 	b.w	800441c <__malloc_unlock>
 800643a:	607e      	str	r6, [r7, #4]
 800643c:	2a00      	cmp	r2, #0
 800643e:	d139      	bne.n	80064b4 <_free_r+0xe4>
 8006440:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8006444:	1a5b      	subs	r3, r3, r1
 8006446:	4408      	add	r0, r1
 8006448:	6899      	ldr	r1, [r3, #8]
 800644a:	f105 0e08 	add.w	lr, r5, #8
 800644e:	4571      	cmp	r1, lr
 8006450:	d032      	beq.n	80064b8 <_free_r+0xe8>
 8006452:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8006456:	f8c1 e00c 	str.w	lr, [r1, #12]
 800645a:	f8ce 1008 	str.w	r1, [lr, #8]
 800645e:	19b9      	adds	r1, r7, r6
 8006460:	6849      	ldr	r1, [r1, #4]
 8006462:	07c9      	lsls	r1, r1, #31
 8006464:	d40a      	bmi.n	800647c <_free_r+0xac>
 8006466:	4430      	add	r0, r6
 8006468:	68b9      	ldr	r1, [r7, #8]
 800646a:	bb3a      	cbnz	r2, 80064bc <_free_r+0xec>
 800646c:	4e35      	ldr	r6, [pc, #212]	; (8006544 <_free_r+0x174>)
 800646e:	42b1      	cmp	r1, r6
 8006470:	d124      	bne.n	80064bc <_free_r+0xec>
 8006472:	616b      	str	r3, [r5, #20]
 8006474:	612b      	str	r3, [r5, #16]
 8006476:	2201      	movs	r2, #1
 8006478:	60d9      	str	r1, [r3, #12]
 800647a:	6099      	str	r1, [r3, #8]
 800647c:	f040 0101 	orr.w	r1, r0, #1
 8006480:	6059      	str	r1, [r3, #4]
 8006482:	5018      	str	r0, [r3, r0]
 8006484:	2a00      	cmp	r2, #0
 8006486:	d1d3      	bne.n	8006430 <_free_r+0x60>
 8006488:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800648c:	d21a      	bcs.n	80064c4 <_free_r+0xf4>
 800648e:	08c0      	lsrs	r0, r0, #3
 8006490:	1081      	asrs	r1, r0, #2
 8006492:	2201      	movs	r2, #1
 8006494:	408a      	lsls	r2, r1
 8006496:	6869      	ldr	r1, [r5, #4]
 8006498:	3001      	adds	r0, #1
 800649a:	430a      	orrs	r2, r1
 800649c:	606a      	str	r2, [r5, #4]
 800649e:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 80064a2:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 80064a6:	6099      	str	r1, [r3, #8]
 80064a8:	3a08      	subs	r2, #8
 80064aa:	60da      	str	r2, [r3, #12]
 80064ac:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 80064b0:	60cb      	str	r3, [r1, #12]
 80064b2:	e7bd      	b.n	8006430 <_free_r+0x60>
 80064b4:	2200      	movs	r2, #0
 80064b6:	e7d2      	b.n	800645e <_free_r+0x8e>
 80064b8:	2201      	movs	r2, #1
 80064ba:	e7d0      	b.n	800645e <_free_r+0x8e>
 80064bc:	68fe      	ldr	r6, [r7, #12]
 80064be:	60ce      	str	r6, [r1, #12]
 80064c0:	60b1      	str	r1, [r6, #8]
 80064c2:	e7db      	b.n	800647c <_free_r+0xac>
 80064c4:	0a42      	lsrs	r2, r0, #9
 80064c6:	2a04      	cmp	r2, #4
 80064c8:	d813      	bhi.n	80064f2 <_free_r+0x122>
 80064ca:	0982      	lsrs	r2, r0, #6
 80064cc:	3238      	adds	r2, #56	; 0x38
 80064ce:	1c51      	adds	r1, r2, #1
 80064d0:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 80064d4:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 80064d8:	428e      	cmp	r6, r1
 80064da:	d124      	bne.n	8006526 <_free_r+0x156>
 80064dc:	2001      	movs	r0, #1
 80064de:	1092      	asrs	r2, r2, #2
 80064e0:	fa00 f202 	lsl.w	r2, r0, r2
 80064e4:	6868      	ldr	r0, [r5, #4]
 80064e6:	4302      	orrs	r2, r0
 80064e8:	606a      	str	r2, [r5, #4]
 80064ea:	60de      	str	r6, [r3, #12]
 80064ec:	6099      	str	r1, [r3, #8]
 80064ee:	60b3      	str	r3, [r6, #8]
 80064f0:	e7de      	b.n	80064b0 <_free_r+0xe0>
 80064f2:	2a14      	cmp	r2, #20
 80064f4:	d801      	bhi.n	80064fa <_free_r+0x12a>
 80064f6:	325b      	adds	r2, #91	; 0x5b
 80064f8:	e7e9      	b.n	80064ce <_free_r+0xfe>
 80064fa:	2a54      	cmp	r2, #84	; 0x54
 80064fc:	d802      	bhi.n	8006504 <_free_r+0x134>
 80064fe:	0b02      	lsrs	r2, r0, #12
 8006500:	326e      	adds	r2, #110	; 0x6e
 8006502:	e7e4      	b.n	80064ce <_free_r+0xfe>
 8006504:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8006508:	d802      	bhi.n	8006510 <_free_r+0x140>
 800650a:	0bc2      	lsrs	r2, r0, #15
 800650c:	3277      	adds	r2, #119	; 0x77
 800650e:	e7de      	b.n	80064ce <_free_r+0xfe>
 8006510:	f240 5154 	movw	r1, #1364	; 0x554
 8006514:	428a      	cmp	r2, r1
 8006516:	bf9a      	itte	ls
 8006518:	0c82      	lsrls	r2, r0, #18
 800651a:	327c      	addls	r2, #124	; 0x7c
 800651c:	227e      	movhi	r2, #126	; 0x7e
 800651e:	e7d6      	b.n	80064ce <_free_r+0xfe>
 8006520:	6889      	ldr	r1, [r1, #8]
 8006522:	428e      	cmp	r6, r1
 8006524:	d004      	beq.n	8006530 <_free_r+0x160>
 8006526:	684a      	ldr	r2, [r1, #4]
 8006528:	f022 0203 	bic.w	r2, r2, #3
 800652c:	4290      	cmp	r0, r2
 800652e:	d3f7      	bcc.n	8006520 <_free_r+0x150>
 8006530:	68ce      	ldr	r6, [r1, #12]
 8006532:	e7da      	b.n	80064ea <_free_r+0x11a>
 8006534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006538:	20000020 	.word	0x20000020
 800653c:	2000042c 	.word	0x2000042c
 8006540:	200009b4 	.word	0x200009b4
 8006544:	20000028 	.word	0x20000028

08006548 <__locale_ctype_ptr_l>:
 8006548:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800654c:	4770      	bx	lr
	...

08006550 <_localeconv_r>:
 8006550:	4b04      	ldr	r3, [pc, #16]	; (8006564 <_localeconv_r+0x14>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	6a18      	ldr	r0, [r3, #32]
 8006556:	4b04      	ldr	r3, [pc, #16]	; (8006568 <_localeconv_r+0x18>)
 8006558:	2800      	cmp	r0, #0
 800655a:	bf08      	it	eq
 800655c:	4618      	moveq	r0, r3
 800655e:	30f0      	adds	r0, #240	; 0xf0
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	20000430 	.word	0x20000430
 8006568:	20000524 	.word	0x20000524

0800656c <__retarget_lock_acquire_recursive>:
 800656c:	4770      	bx	lr

0800656e <__retarget_lock_release_recursive>:
 800656e:	4770      	bx	lr

08006570 <__ascii_mbtowc>:
 8006570:	b082      	sub	sp, #8
 8006572:	b901      	cbnz	r1, 8006576 <__ascii_mbtowc+0x6>
 8006574:	a901      	add	r1, sp, #4
 8006576:	b142      	cbz	r2, 800658a <__ascii_mbtowc+0x1a>
 8006578:	b14b      	cbz	r3, 800658e <__ascii_mbtowc+0x1e>
 800657a:	7813      	ldrb	r3, [r2, #0]
 800657c:	600b      	str	r3, [r1, #0]
 800657e:	7812      	ldrb	r2, [r2, #0]
 8006580:	1c10      	adds	r0, r2, #0
 8006582:	bf18      	it	ne
 8006584:	2001      	movne	r0, #1
 8006586:	b002      	add	sp, #8
 8006588:	4770      	bx	lr
 800658a:	4610      	mov	r0, r2
 800658c:	e7fb      	b.n	8006586 <__ascii_mbtowc+0x16>
 800658e:	f06f 0001 	mvn.w	r0, #1
 8006592:	e7f8      	b.n	8006586 <__ascii_mbtowc+0x16>

08006594 <memcpy>:
 8006594:	b510      	push	{r4, lr}
 8006596:	1e43      	subs	r3, r0, #1
 8006598:	440a      	add	r2, r1
 800659a:	4291      	cmp	r1, r2
 800659c:	d100      	bne.n	80065a0 <memcpy+0xc>
 800659e:	bd10      	pop	{r4, pc}
 80065a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065a8:	e7f7      	b.n	800659a <memcpy+0x6>

080065aa <_Balloc>:
 80065aa:	b570      	push	{r4, r5, r6, lr}
 80065ac:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80065ae:	4604      	mov	r4, r0
 80065b0:	460e      	mov	r6, r1
 80065b2:	b93d      	cbnz	r5, 80065c4 <_Balloc+0x1a>
 80065b4:	2010      	movs	r0, #16
 80065b6:	f7fd fd0d 	bl	8003fd4 <malloc>
 80065ba:	6260      	str	r0, [r4, #36]	; 0x24
 80065bc:	6045      	str	r5, [r0, #4]
 80065be:	6085      	str	r5, [r0, #8]
 80065c0:	6005      	str	r5, [r0, #0]
 80065c2:	60c5      	str	r5, [r0, #12]
 80065c4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80065c6:	68eb      	ldr	r3, [r5, #12]
 80065c8:	b183      	cbz	r3, 80065ec <_Balloc+0x42>
 80065ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80065d2:	b9b8      	cbnz	r0, 8006604 <_Balloc+0x5a>
 80065d4:	2101      	movs	r1, #1
 80065d6:	fa01 f506 	lsl.w	r5, r1, r6
 80065da:	1d6a      	adds	r2, r5, #5
 80065dc:	0092      	lsls	r2, r2, #2
 80065de:	4620      	mov	r0, r4
 80065e0:	f000 fb3b 	bl	8006c5a <_calloc_r>
 80065e4:	b160      	cbz	r0, 8006600 <_Balloc+0x56>
 80065e6:	6046      	str	r6, [r0, #4]
 80065e8:	6085      	str	r5, [r0, #8]
 80065ea:	e00e      	b.n	800660a <_Balloc+0x60>
 80065ec:	2221      	movs	r2, #33	; 0x21
 80065ee:	2104      	movs	r1, #4
 80065f0:	4620      	mov	r0, r4
 80065f2:	f000 fb32 	bl	8006c5a <_calloc_r>
 80065f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80065f8:	60e8      	str	r0, [r5, #12]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1e4      	bne.n	80065ca <_Balloc+0x20>
 8006600:	2000      	movs	r0, #0
 8006602:	bd70      	pop	{r4, r5, r6, pc}
 8006604:	6802      	ldr	r2, [r0, #0]
 8006606:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800660a:	2300      	movs	r3, #0
 800660c:	6103      	str	r3, [r0, #16]
 800660e:	60c3      	str	r3, [r0, #12]
 8006610:	bd70      	pop	{r4, r5, r6, pc}

08006612 <_Bfree>:
 8006612:	b570      	push	{r4, r5, r6, lr}
 8006614:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006616:	4606      	mov	r6, r0
 8006618:	460d      	mov	r5, r1
 800661a:	b93c      	cbnz	r4, 800662c <_Bfree+0x1a>
 800661c:	2010      	movs	r0, #16
 800661e:	f7fd fcd9 	bl	8003fd4 <malloc>
 8006622:	6270      	str	r0, [r6, #36]	; 0x24
 8006624:	6044      	str	r4, [r0, #4]
 8006626:	6084      	str	r4, [r0, #8]
 8006628:	6004      	str	r4, [r0, #0]
 800662a:	60c4      	str	r4, [r0, #12]
 800662c:	b13d      	cbz	r5, 800663e <_Bfree+0x2c>
 800662e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006630:	686a      	ldr	r2, [r5, #4]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006638:	6029      	str	r1, [r5, #0]
 800663a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800663e:	bd70      	pop	{r4, r5, r6, pc}

08006640 <__multadd>:
 8006640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006644:	690d      	ldr	r5, [r1, #16]
 8006646:	461f      	mov	r7, r3
 8006648:	4606      	mov	r6, r0
 800664a:	460c      	mov	r4, r1
 800664c:	f101 0e14 	add.w	lr, r1, #20
 8006650:	2300      	movs	r3, #0
 8006652:	f8de 0000 	ldr.w	r0, [lr]
 8006656:	b281      	uxth	r1, r0
 8006658:	fb02 7101 	mla	r1, r2, r1, r7
 800665c:	0c0f      	lsrs	r7, r1, #16
 800665e:	0c00      	lsrs	r0, r0, #16
 8006660:	fb02 7000 	mla	r0, r2, r0, r7
 8006664:	b289      	uxth	r1, r1
 8006666:	3301      	adds	r3, #1
 8006668:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800666c:	429d      	cmp	r5, r3
 800666e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006672:	f84e 1b04 	str.w	r1, [lr], #4
 8006676:	dcec      	bgt.n	8006652 <__multadd+0x12>
 8006678:	b1d7      	cbz	r7, 80066b0 <__multadd+0x70>
 800667a:	68a3      	ldr	r3, [r4, #8]
 800667c:	429d      	cmp	r5, r3
 800667e:	db12      	blt.n	80066a6 <__multadd+0x66>
 8006680:	6861      	ldr	r1, [r4, #4]
 8006682:	4630      	mov	r0, r6
 8006684:	3101      	adds	r1, #1
 8006686:	f7ff ff90 	bl	80065aa <_Balloc>
 800668a:	6922      	ldr	r2, [r4, #16]
 800668c:	3202      	adds	r2, #2
 800668e:	f104 010c 	add.w	r1, r4, #12
 8006692:	4680      	mov	r8, r0
 8006694:	0092      	lsls	r2, r2, #2
 8006696:	300c      	adds	r0, #12
 8006698:	f7ff ff7c 	bl	8006594 <memcpy>
 800669c:	4621      	mov	r1, r4
 800669e:	4630      	mov	r0, r6
 80066a0:	f7ff ffb7 	bl	8006612 <_Bfree>
 80066a4:	4644      	mov	r4, r8
 80066a6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066aa:	3501      	adds	r5, #1
 80066ac:	615f      	str	r7, [r3, #20]
 80066ae:	6125      	str	r5, [r4, #16]
 80066b0:	4620      	mov	r0, r4
 80066b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080066b6 <__hi0bits>:
 80066b6:	0c02      	lsrs	r2, r0, #16
 80066b8:	0412      	lsls	r2, r2, #16
 80066ba:	4603      	mov	r3, r0
 80066bc:	b9b2      	cbnz	r2, 80066ec <__hi0bits+0x36>
 80066be:	0403      	lsls	r3, r0, #16
 80066c0:	2010      	movs	r0, #16
 80066c2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80066c6:	bf04      	itt	eq
 80066c8:	021b      	lsleq	r3, r3, #8
 80066ca:	3008      	addeq	r0, #8
 80066cc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80066d0:	bf04      	itt	eq
 80066d2:	011b      	lsleq	r3, r3, #4
 80066d4:	3004      	addeq	r0, #4
 80066d6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80066da:	bf04      	itt	eq
 80066dc:	009b      	lsleq	r3, r3, #2
 80066de:	3002      	addeq	r0, #2
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	db06      	blt.n	80066f2 <__hi0bits+0x3c>
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	d503      	bpl.n	80066f0 <__hi0bits+0x3a>
 80066e8:	3001      	adds	r0, #1
 80066ea:	4770      	bx	lr
 80066ec:	2000      	movs	r0, #0
 80066ee:	e7e8      	b.n	80066c2 <__hi0bits+0xc>
 80066f0:	2020      	movs	r0, #32
 80066f2:	4770      	bx	lr

080066f4 <__lo0bits>:
 80066f4:	6803      	ldr	r3, [r0, #0]
 80066f6:	f013 0207 	ands.w	r2, r3, #7
 80066fa:	4601      	mov	r1, r0
 80066fc:	d00b      	beq.n	8006716 <__lo0bits+0x22>
 80066fe:	07da      	lsls	r2, r3, #31
 8006700:	d423      	bmi.n	800674a <__lo0bits+0x56>
 8006702:	0798      	lsls	r0, r3, #30
 8006704:	bf49      	itett	mi
 8006706:	085b      	lsrmi	r3, r3, #1
 8006708:	089b      	lsrpl	r3, r3, #2
 800670a:	2001      	movmi	r0, #1
 800670c:	600b      	strmi	r3, [r1, #0]
 800670e:	bf5c      	itt	pl
 8006710:	600b      	strpl	r3, [r1, #0]
 8006712:	2002      	movpl	r0, #2
 8006714:	4770      	bx	lr
 8006716:	b298      	uxth	r0, r3
 8006718:	b9a8      	cbnz	r0, 8006746 <__lo0bits+0x52>
 800671a:	0c1b      	lsrs	r3, r3, #16
 800671c:	2010      	movs	r0, #16
 800671e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006722:	bf04      	itt	eq
 8006724:	0a1b      	lsreq	r3, r3, #8
 8006726:	3008      	addeq	r0, #8
 8006728:	071a      	lsls	r2, r3, #28
 800672a:	bf04      	itt	eq
 800672c:	091b      	lsreq	r3, r3, #4
 800672e:	3004      	addeq	r0, #4
 8006730:	079a      	lsls	r2, r3, #30
 8006732:	bf04      	itt	eq
 8006734:	089b      	lsreq	r3, r3, #2
 8006736:	3002      	addeq	r0, #2
 8006738:	07da      	lsls	r2, r3, #31
 800673a:	d402      	bmi.n	8006742 <__lo0bits+0x4e>
 800673c:	085b      	lsrs	r3, r3, #1
 800673e:	d006      	beq.n	800674e <__lo0bits+0x5a>
 8006740:	3001      	adds	r0, #1
 8006742:	600b      	str	r3, [r1, #0]
 8006744:	4770      	bx	lr
 8006746:	4610      	mov	r0, r2
 8006748:	e7e9      	b.n	800671e <__lo0bits+0x2a>
 800674a:	2000      	movs	r0, #0
 800674c:	4770      	bx	lr
 800674e:	2020      	movs	r0, #32
 8006750:	4770      	bx	lr

08006752 <__i2b>:
 8006752:	b510      	push	{r4, lr}
 8006754:	460c      	mov	r4, r1
 8006756:	2101      	movs	r1, #1
 8006758:	f7ff ff27 	bl	80065aa <_Balloc>
 800675c:	2201      	movs	r2, #1
 800675e:	6144      	str	r4, [r0, #20]
 8006760:	6102      	str	r2, [r0, #16]
 8006762:	bd10      	pop	{r4, pc}

08006764 <__multiply>:
 8006764:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006768:	4614      	mov	r4, r2
 800676a:	690a      	ldr	r2, [r1, #16]
 800676c:	6923      	ldr	r3, [r4, #16]
 800676e:	429a      	cmp	r2, r3
 8006770:	bfb8      	it	lt
 8006772:	460b      	movlt	r3, r1
 8006774:	4689      	mov	r9, r1
 8006776:	bfbc      	itt	lt
 8006778:	46a1      	movlt	r9, r4
 800677a:	461c      	movlt	r4, r3
 800677c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006780:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006784:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006788:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800678c:	eb07 060a 	add.w	r6, r7, sl
 8006790:	429e      	cmp	r6, r3
 8006792:	bfc8      	it	gt
 8006794:	3101      	addgt	r1, #1
 8006796:	f7ff ff08 	bl	80065aa <_Balloc>
 800679a:	f100 0514 	add.w	r5, r0, #20
 800679e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067a2:	462b      	mov	r3, r5
 80067a4:	2200      	movs	r2, #0
 80067a6:	4543      	cmp	r3, r8
 80067a8:	d316      	bcc.n	80067d8 <__multiply+0x74>
 80067aa:	f104 0214 	add.w	r2, r4, #20
 80067ae:	f109 0114 	add.w	r1, r9, #20
 80067b2:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 80067b6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80067ba:	9301      	str	r3, [sp, #4]
 80067bc:	9c01      	ldr	r4, [sp, #4]
 80067be:	4294      	cmp	r4, r2
 80067c0:	4613      	mov	r3, r2
 80067c2:	d80c      	bhi.n	80067de <__multiply+0x7a>
 80067c4:	2e00      	cmp	r6, #0
 80067c6:	dd03      	ble.n	80067d0 <__multiply+0x6c>
 80067c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d054      	beq.n	800687a <__multiply+0x116>
 80067d0:	6106      	str	r6, [r0, #16]
 80067d2:	b003      	add	sp, #12
 80067d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d8:	f843 2b04 	str.w	r2, [r3], #4
 80067dc:	e7e3      	b.n	80067a6 <__multiply+0x42>
 80067de:	f8b3 a000 	ldrh.w	sl, [r3]
 80067e2:	3204      	adds	r2, #4
 80067e4:	f1ba 0f00 	cmp.w	sl, #0
 80067e8:	d020      	beq.n	800682c <__multiply+0xc8>
 80067ea:	46ae      	mov	lr, r5
 80067ec:	4689      	mov	r9, r1
 80067ee:	f04f 0c00 	mov.w	ip, #0
 80067f2:	f859 4b04 	ldr.w	r4, [r9], #4
 80067f6:	f8be b000 	ldrh.w	fp, [lr]
 80067fa:	b2a3      	uxth	r3, r4
 80067fc:	fb0a b303 	mla	r3, sl, r3, fp
 8006800:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006804:	f8de 4000 	ldr.w	r4, [lr]
 8006808:	4463      	add	r3, ip
 800680a:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 800680e:	fb0a c40b 	mla	r4, sl, fp, ip
 8006812:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006816:	b29b      	uxth	r3, r3
 8006818:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800681c:	454f      	cmp	r7, r9
 800681e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006822:	f84e 3b04 	str.w	r3, [lr], #4
 8006826:	d8e4      	bhi.n	80067f2 <__multiply+0x8e>
 8006828:	f8ce c000 	str.w	ip, [lr]
 800682c:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006830:	f1b9 0f00 	cmp.w	r9, #0
 8006834:	d01f      	beq.n	8006876 <__multiply+0x112>
 8006836:	682b      	ldr	r3, [r5, #0]
 8006838:	46ae      	mov	lr, r5
 800683a:	468c      	mov	ip, r1
 800683c:	f04f 0a00 	mov.w	sl, #0
 8006840:	f8bc 4000 	ldrh.w	r4, [ip]
 8006844:	f8be b002 	ldrh.w	fp, [lr, #2]
 8006848:	fb09 b404 	mla	r4, r9, r4, fp
 800684c:	44a2      	add	sl, r4
 800684e:	b29b      	uxth	r3, r3
 8006850:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8006854:	f84e 3b04 	str.w	r3, [lr], #4
 8006858:	f85c 3b04 	ldr.w	r3, [ip], #4
 800685c:	f8be 4000 	ldrh.w	r4, [lr]
 8006860:	0c1b      	lsrs	r3, r3, #16
 8006862:	fb09 4303 	mla	r3, r9, r3, r4
 8006866:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 800686a:	4567      	cmp	r7, ip
 800686c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006870:	d8e6      	bhi.n	8006840 <__multiply+0xdc>
 8006872:	f8ce 3000 	str.w	r3, [lr]
 8006876:	3504      	adds	r5, #4
 8006878:	e7a0      	b.n	80067bc <__multiply+0x58>
 800687a:	3e01      	subs	r6, #1
 800687c:	e7a2      	b.n	80067c4 <__multiply+0x60>
	...

08006880 <__pow5mult>:
 8006880:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006884:	4615      	mov	r5, r2
 8006886:	f012 0203 	ands.w	r2, r2, #3
 800688a:	4606      	mov	r6, r0
 800688c:	460f      	mov	r7, r1
 800688e:	d007      	beq.n	80068a0 <__pow5mult+0x20>
 8006890:	3a01      	subs	r2, #1
 8006892:	4c21      	ldr	r4, [pc, #132]	; (8006918 <__pow5mult+0x98>)
 8006894:	2300      	movs	r3, #0
 8006896:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800689a:	f7ff fed1 	bl	8006640 <__multadd>
 800689e:	4607      	mov	r7, r0
 80068a0:	10ad      	asrs	r5, r5, #2
 80068a2:	d035      	beq.n	8006910 <__pow5mult+0x90>
 80068a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80068a6:	b93c      	cbnz	r4, 80068b8 <__pow5mult+0x38>
 80068a8:	2010      	movs	r0, #16
 80068aa:	f7fd fb93 	bl	8003fd4 <malloc>
 80068ae:	6270      	str	r0, [r6, #36]	; 0x24
 80068b0:	6044      	str	r4, [r0, #4]
 80068b2:	6084      	str	r4, [r0, #8]
 80068b4:	6004      	str	r4, [r0, #0]
 80068b6:	60c4      	str	r4, [r0, #12]
 80068b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068c0:	b94c      	cbnz	r4, 80068d6 <__pow5mult+0x56>
 80068c2:	f240 2171 	movw	r1, #625	; 0x271
 80068c6:	4630      	mov	r0, r6
 80068c8:	f7ff ff43 	bl	8006752 <__i2b>
 80068cc:	2300      	movs	r3, #0
 80068ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80068d2:	4604      	mov	r4, r0
 80068d4:	6003      	str	r3, [r0, #0]
 80068d6:	f04f 0800 	mov.w	r8, #0
 80068da:	07eb      	lsls	r3, r5, #31
 80068dc:	d50a      	bpl.n	80068f4 <__pow5mult+0x74>
 80068de:	4639      	mov	r1, r7
 80068e0:	4622      	mov	r2, r4
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7ff ff3e 	bl	8006764 <__multiply>
 80068e8:	4639      	mov	r1, r7
 80068ea:	4681      	mov	r9, r0
 80068ec:	4630      	mov	r0, r6
 80068ee:	f7ff fe90 	bl	8006612 <_Bfree>
 80068f2:	464f      	mov	r7, r9
 80068f4:	106d      	asrs	r5, r5, #1
 80068f6:	d00b      	beq.n	8006910 <__pow5mult+0x90>
 80068f8:	6820      	ldr	r0, [r4, #0]
 80068fa:	b938      	cbnz	r0, 800690c <__pow5mult+0x8c>
 80068fc:	4622      	mov	r2, r4
 80068fe:	4621      	mov	r1, r4
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff ff2f 	bl	8006764 <__multiply>
 8006906:	6020      	str	r0, [r4, #0]
 8006908:	f8c0 8000 	str.w	r8, [r0]
 800690c:	4604      	mov	r4, r0
 800690e:	e7e4      	b.n	80068da <__pow5mult+0x5a>
 8006910:	4638      	mov	r0, r7
 8006912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006916:	bf00      	nop
 8006918:	08007680 	.word	0x08007680

0800691c <__lshift>:
 800691c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006920:	460c      	mov	r4, r1
 8006922:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006926:	6923      	ldr	r3, [r4, #16]
 8006928:	6849      	ldr	r1, [r1, #4]
 800692a:	eb0a 0903 	add.w	r9, sl, r3
 800692e:	68a3      	ldr	r3, [r4, #8]
 8006930:	4607      	mov	r7, r0
 8006932:	4616      	mov	r6, r2
 8006934:	f109 0501 	add.w	r5, r9, #1
 8006938:	42ab      	cmp	r3, r5
 800693a:	db31      	blt.n	80069a0 <__lshift+0x84>
 800693c:	4638      	mov	r0, r7
 800693e:	f7ff fe34 	bl	80065aa <_Balloc>
 8006942:	2200      	movs	r2, #0
 8006944:	4680      	mov	r8, r0
 8006946:	f100 0314 	add.w	r3, r0, #20
 800694a:	4611      	mov	r1, r2
 800694c:	4552      	cmp	r2, sl
 800694e:	db2a      	blt.n	80069a6 <__lshift+0x8a>
 8006950:	6920      	ldr	r0, [r4, #16]
 8006952:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006956:	f104 0114 	add.w	r1, r4, #20
 800695a:	f016 021f 	ands.w	r2, r6, #31
 800695e:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8006962:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006966:	d022      	beq.n	80069ae <__lshift+0x92>
 8006968:	f1c2 0c20 	rsb	ip, r2, #32
 800696c:	2000      	movs	r0, #0
 800696e:	680e      	ldr	r6, [r1, #0]
 8006970:	4096      	lsls	r6, r2
 8006972:	4330      	orrs	r0, r6
 8006974:	f843 0b04 	str.w	r0, [r3], #4
 8006978:	f851 0b04 	ldr.w	r0, [r1], #4
 800697c:	458e      	cmp	lr, r1
 800697e:	fa20 f00c 	lsr.w	r0, r0, ip
 8006982:	d8f4      	bhi.n	800696e <__lshift+0x52>
 8006984:	6018      	str	r0, [r3, #0]
 8006986:	b108      	cbz	r0, 800698c <__lshift+0x70>
 8006988:	f109 0502 	add.w	r5, r9, #2
 800698c:	3d01      	subs	r5, #1
 800698e:	4638      	mov	r0, r7
 8006990:	f8c8 5010 	str.w	r5, [r8, #16]
 8006994:	4621      	mov	r1, r4
 8006996:	f7ff fe3c 	bl	8006612 <_Bfree>
 800699a:	4640      	mov	r0, r8
 800699c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069a0:	3101      	adds	r1, #1
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	e7c8      	b.n	8006938 <__lshift+0x1c>
 80069a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80069aa:	3201      	adds	r2, #1
 80069ac:	e7ce      	b.n	800694c <__lshift+0x30>
 80069ae:	3b04      	subs	r3, #4
 80069b0:	f851 2b04 	ldr.w	r2, [r1], #4
 80069b4:	f843 2f04 	str.w	r2, [r3, #4]!
 80069b8:	458e      	cmp	lr, r1
 80069ba:	d8f9      	bhi.n	80069b0 <__lshift+0x94>
 80069bc:	e7e6      	b.n	800698c <__lshift+0x70>

080069be <__mcmp>:
 80069be:	6903      	ldr	r3, [r0, #16]
 80069c0:	690a      	ldr	r2, [r1, #16]
 80069c2:	1a9b      	subs	r3, r3, r2
 80069c4:	b530      	push	{r4, r5, lr}
 80069c6:	d10c      	bne.n	80069e2 <__mcmp+0x24>
 80069c8:	0092      	lsls	r2, r2, #2
 80069ca:	3014      	adds	r0, #20
 80069cc:	3114      	adds	r1, #20
 80069ce:	1884      	adds	r4, r0, r2
 80069d0:	4411      	add	r1, r2
 80069d2:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80069d6:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80069da:	4295      	cmp	r5, r2
 80069dc:	d003      	beq.n	80069e6 <__mcmp+0x28>
 80069de:	d305      	bcc.n	80069ec <__mcmp+0x2e>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4618      	mov	r0, r3
 80069e4:	bd30      	pop	{r4, r5, pc}
 80069e6:	42a0      	cmp	r0, r4
 80069e8:	d3f3      	bcc.n	80069d2 <__mcmp+0x14>
 80069ea:	e7fa      	b.n	80069e2 <__mcmp+0x24>
 80069ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069f0:	e7f7      	b.n	80069e2 <__mcmp+0x24>

080069f2 <__mdiff>:
 80069f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f6:	460d      	mov	r5, r1
 80069f8:	4607      	mov	r7, r0
 80069fa:	4611      	mov	r1, r2
 80069fc:	4628      	mov	r0, r5
 80069fe:	4614      	mov	r4, r2
 8006a00:	f7ff ffdd 	bl	80069be <__mcmp>
 8006a04:	1e06      	subs	r6, r0, #0
 8006a06:	d108      	bne.n	8006a1a <__mdiff+0x28>
 8006a08:	4631      	mov	r1, r6
 8006a0a:	4638      	mov	r0, r7
 8006a0c:	f7ff fdcd 	bl	80065aa <_Balloc>
 8006a10:	2301      	movs	r3, #1
 8006a12:	6103      	str	r3, [r0, #16]
 8006a14:	6146      	str	r6, [r0, #20]
 8006a16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a1a:	bfa4      	itt	ge
 8006a1c:	4623      	movge	r3, r4
 8006a1e:	462c      	movge	r4, r5
 8006a20:	4638      	mov	r0, r7
 8006a22:	6861      	ldr	r1, [r4, #4]
 8006a24:	bfa6      	itte	ge
 8006a26:	461d      	movge	r5, r3
 8006a28:	2600      	movge	r6, #0
 8006a2a:	2601      	movlt	r6, #1
 8006a2c:	f7ff fdbd 	bl	80065aa <_Balloc>
 8006a30:	692b      	ldr	r3, [r5, #16]
 8006a32:	60c6      	str	r6, [r0, #12]
 8006a34:	6926      	ldr	r6, [r4, #16]
 8006a36:	f105 0914 	add.w	r9, r5, #20
 8006a3a:	f104 0214 	add.w	r2, r4, #20
 8006a3e:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006a42:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006a46:	f100 0514 	add.w	r5, r0, #20
 8006a4a:	f04f 0c00 	mov.w	ip, #0
 8006a4e:	f852 ab04 	ldr.w	sl, [r2], #4
 8006a52:	f859 4b04 	ldr.w	r4, [r9], #4
 8006a56:	fa1c f18a 	uxtah	r1, ip, sl
 8006a5a:	b2a3      	uxth	r3, r4
 8006a5c:	1ac9      	subs	r1, r1, r3
 8006a5e:	0c23      	lsrs	r3, r4, #16
 8006a60:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006a64:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006a68:	b289      	uxth	r1, r1
 8006a6a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006a6e:	45c8      	cmp	r8, r9
 8006a70:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006a74:	4696      	mov	lr, r2
 8006a76:	f845 3b04 	str.w	r3, [r5], #4
 8006a7a:	d8e8      	bhi.n	8006a4e <__mdiff+0x5c>
 8006a7c:	45be      	cmp	lr, r7
 8006a7e:	d305      	bcc.n	8006a8c <__mdiff+0x9a>
 8006a80:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006a84:	b18b      	cbz	r3, 8006aaa <__mdiff+0xb8>
 8006a86:	6106      	str	r6, [r0, #16]
 8006a88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a8c:	f85e 1b04 	ldr.w	r1, [lr], #4
 8006a90:	fa1c f381 	uxtah	r3, ip, r1
 8006a94:	141a      	asrs	r2, r3, #16
 8006a96:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006aa4:	f845 3b04 	str.w	r3, [r5], #4
 8006aa8:	e7e8      	b.n	8006a7c <__mdiff+0x8a>
 8006aaa:	3e01      	subs	r6, #1
 8006aac:	e7e8      	b.n	8006a80 <__mdiff+0x8e>

08006aae <__d2b>:
 8006aae:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ab2:	460e      	mov	r6, r1
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	ec59 8b10 	vmov	r8, r9, d0
 8006aba:	4615      	mov	r5, r2
 8006abc:	f7ff fd75 	bl	80065aa <_Balloc>
 8006ac0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006aca:	bb34      	cbnz	r4, 8006b1a <__d2b+0x6c>
 8006acc:	9301      	str	r3, [sp, #4]
 8006ace:	f1b8 0f00 	cmp.w	r8, #0
 8006ad2:	d027      	beq.n	8006b24 <__d2b+0x76>
 8006ad4:	a802      	add	r0, sp, #8
 8006ad6:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006ada:	f7ff fe0b 	bl	80066f4 <__lo0bits>
 8006ade:	9900      	ldr	r1, [sp, #0]
 8006ae0:	b1f0      	cbz	r0, 8006b20 <__d2b+0x72>
 8006ae2:	9a01      	ldr	r2, [sp, #4]
 8006ae4:	f1c0 0320 	rsb	r3, r0, #32
 8006ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8006aec:	430b      	orrs	r3, r1
 8006aee:	40c2      	lsrs	r2, r0
 8006af0:	617b      	str	r3, [r7, #20]
 8006af2:	9201      	str	r2, [sp, #4]
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	61bb      	str	r3, [r7, #24]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	bf14      	ite	ne
 8006afc:	2102      	movne	r1, #2
 8006afe:	2101      	moveq	r1, #1
 8006b00:	6139      	str	r1, [r7, #16]
 8006b02:	b1c4      	cbz	r4, 8006b36 <__d2b+0x88>
 8006b04:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006b08:	4404      	add	r4, r0
 8006b0a:	6034      	str	r4, [r6, #0]
 8006b0c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b10:	6028      	str	r0, [r5, #0]
 8006b12:	4638      	mov	r0, r7
 8006b14:	b003      	add	sp, #12
 8006b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b1e:	e7d5      	b.n	8006acc <__d2b+0x1e>
 8006b20:	6179      	str	r1, [r7, #20]
 8006b22:	e7e7      	b.n	8006af4 <__d2b+0x46>
 8006b24:	a801      	add	r0, sp, #4
 8006b26:	f7ff fde5 	bl	80066f4 <__lo0bits>
 8006b2a:	9b01      	ldr	r3, [sp, #4]
 8006b2c:	617b      	str	r3, [r7, #20]
 8006b2e:	2101      	movs	r1, #1
 8006b30:	6139      	str	r1, [r7, #16]
 8006b32:	3020      	adds	r0, #32
 8006b34:	e7e5      	b.n	8006b02 <__d2b+0x54>
 8006b36:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006b3a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b3e:	6030      	str	r0, [r6, #0]
 8006b40:	6918      	ldr	r0, [r3, #16]
 8006b42:	f7ff fdb8 	bl	80066b6 <__hi0bits>
 8006b46:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006b4a:	e7e1      	b.n	8006b10 <__d2b+0x62>

08006b4c <__ssprint_r>:
 8006b4c:	6893      	ldr	r3, [r2, #8]
 8006b4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b52:	4681      	mov	r9, r0
 8006b54:	460c      	mov	r4, r1
 8006b56:	4617      	mov	r7, r2
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d060      	beq.n	8006c1e <__ssprint_r+0xd2>
 8006b5c:	f04f 0b00 	mov.w	fp, #0
 8006b60:	f8d2 a000 	ldr.w	sl, [r2]
 8006b64:	465e      	mov	r6, fp
 8006b66:	b356      	cbz	r6, 8006bbe <__ssprint_r+0x72>
 8006b68:	68a3      	ldr	r3, [r4, #8]
 8006b6a:	429e      	cmp	r6, r3
 8006b6c:	d344      	bcc.n	8006bf8 <__ssprint_r+0xac>
 8006b6e:	89a2      	ldrh	r2, [r4, #12]
 8006b70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b74:	d03e      	beq.n	8006bf4 <__ssprint_r+0xa8>
 8006b76:	6825      	ldr	r5, [r4, #0]
 8006b78:	6921      	ldr	r1, [r4, #16]
 8006b7a:	eba5 0801 	sub.w	r8, r5, r1
 8006b7e:	6965      	ldr	r5, [r4, #20]
 8006b80:	2302      	movs	r3, #2
 8006b82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b86:	fb95 f5f3 	sdiv	r5, r5, r3
 8006b8a:	f108 0301 	add.w	r3, r8, #1
 8006b8e:	4433      	add	r3, r6
 8006b90:	429d      	cmp	r5, r3
 8006b92:	bf38      	it	cc
 8006b94:	461d      	movcc	r5, r3
 8006b96:	0553      	lsls	r3, r2, #21
 8006b98:	d546      	bpl.n	8006c28 <__ssprint_r+0xdc>
 8006b9a:	4629      	mov	r1, r5
 8006b9c:	4648      	mov	r0, r9
 8006b9e:	f7fd fa21 	bl	8003fe4 <_malloc_r>
 8006ba2:	b998      	cbnz	r0, 8006bcc <__ssprint_r+0x80>
 8006ba4:	230c      	movs	r3, #12
 8006ba6:	f8c9 3000 	str.w	r3, [r9]
 8006baa:	89a3      	ldrh	r3, [r4, #12]
 8006bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb0:	81a3      	strh	r3, [r4, #12]
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	607b      	str	r3, [r7, #4]
 8006bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bbc:	e031      	b.n	8006c22 <__ssprint_r+0xd6>
 8006bbe:	f8da b000 	ldr.w	fp, [sl]
 8006bc2:	f8da 6004 	ldr.w	r6, [sl, #4]
 8006bc6:	f10a 0a08 	add.w	sl, sl, #8
 8006bca:	e7cc      	b.n	8006b66 <__ssprint_r+0x1a>
 8006bcc:	4642      	mov	r2, r8
 8006bce:	6921      	ldr	r1, [r4, #16]
 8006bd0:	9001      	str	r0, [sp, #4]
 8006bd2:	f7ff fcdf 	bl	8006594 <memcpy>
 8006bd6:	89a2      	ldrh	r2, [r4, #12]
 8006bd8:	9b01      	ldr	r3, [sp, #4]
 8006bda:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8006bde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006be2:	81a2      	strh	r2, [r4, #12]
 8006be4:	6123      	str	r3, [r4, #16]
 8006be6:	6165      	str	r5, [r4, #20]
 8006be8:	4443      	add	r3, r8
 8006bea:	eba5 0508 	sub.w	r5, r5, r8
 8006bee:	6023      	str	r3, [r4, #0]
 8006bf0:	60a5      	str	r5, [r4, #8]
 8006bf2:	4633      	mov	r3, r6
 8006bf4:	429e      	cmp	r6, r3
 8006bf6:	d200      	bcs.n	8006bfa <__ssprint_r+0xae>
 8006bf8:	4633      	mov	r3, r6
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	4659      	mov	r1, fp
 8006bfe:	6820      	ldr	r0, [r4, #0]
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	f000 f857 	bl	8006cb4 <memmove>
 8006c06:	68a2      	ldr	r2, [r4, #8]
 8006c08:	9b01      	ldr	r3, [sp, #4]
 8006c0a:	1ad2      	subs	r2, r2, r3
 8006c0c:	60a2      	str	r2, [r4, #8]
 8006c0e:	6822      	ldr	r2, [r4, #0]
 8006c10:	4413      	add	r3, r2
 8006c12:	6023      	str	r3, [r4, #0]
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	1b9e      	subs	r6, r3, r6
 8006c18:	60be      	str	r6, [r7, #8]
 8006c1a:	2e00      	cmp	r6, #0
 8006c1c:	d1cf      	bne.n	8006bbe <__ssprint_r+0x72>
 8006c1e:	2000      	movs	r0, #0
 8006c20:	6078      	str	r0, [r7, #4]
 8006c22:	b003      	add	sp, #12
 8006c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c28:	462a      	mov	r2, r5
 8006c2a:	4648      	mov	r0, r9
 8006c2c:	f000 f85c 	bl	8006ce8 <_realloc_r>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2800      	cmp	r0, #0
 8006c34:	d1d6      	bne.n	8006be4 <__ssprint_r+0x98>
 8006c36:	6921      	ldr	r1, [r4, #16]
 8006c38:	4648      	mov	r0, r9
 8006c3a:	f7ff fbc9 	bl	80063d0 <_free_r>
 8006c3e:	e7b1      	b.n	8006ba4 <__ssprint_r+0x58>

08006c40 <__ascii_wctomb>:
 8006c40:	b149      	cbz	r1, 8006c56 <__ascii_wctomb+0x16>
 8006c42:	2aff      	cmp	r2, #255	; 0xff
 8006c44:	bf85      	ittet	hi
 8006c46:	238a      	movhi	r3, #138	; 0x8a
 8006c48:	6003      	strhi	r3, [r0, #0]
 8006c4a:	700a      	strbls	r2, [r1, #0]
 8006c4c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8006c50:	bf98      	it	ls
 8006c52:	2001      	movls	r0, #1
 8006c54:	4770      	bx	lr
 8006c56:	4608      	mov	r0, r1
 8006c58:	4770      	bx	lr

08006c5a <_calloc_r>:
 8006c5a:	b510      	push	{r4, lr}
 8006c5c:	4351      	muls	r1, r2
 8006c5e:	f7fd f9c1 	bl	8003fe4 <_malloc_r>
 8006c62:	4604      	mov	r4, r0
 8006c64:	b198      	cbz	r0, 8006c8e <_calloc_r+0x34>
 8006c66:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006c6a:	f022 0203 	bic.w	r2, r2, #3
 8006c6e:	3a04      	subs	r2, #4
 8006c70:	2a24      	cmp	r2, #36	; 0x24
 8006c72:	d81b      	bhi.n	8006cac <_calloc_r+0x52>
 8006c74:	2a13      	cmp	r2, #19
 8006c76:	d917      	bls.n	8006ca8 <_calloc_r+0x4e>
 8006c78:	2100      	movs	r1, #0
 8006c7a:	2a1b      	cmp	r2, #27
 8006c7c:	6001      	str	r1, [r0, #0]
 8006c7e:	6041      	str	r1, [r0, #4]
 8006c80:	d807      	bhi.n	8006c92 <_calloc_r+0x38>
 8006c82:	f100 0308 	add.w	r3, r0, #8
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	605a      	str	r2, [r3, #4]
 8006c8c:	609a      	str	r2, [r3, #8]
 8006c8e:	4620      	mov	r0, r4
 8006c90:	bd10      	pop	{r4, pc}
 8006c92:	2a24      	cmp	r2, #36	; 0x24
 8006c94:	6081      	str	r1, [r0, #8]
 8006c96:	60c1      	str	r1, [r0, #12]
 8006c98:	bf11      	iteee	ne
 8006c9a:	f100 0310 	addne.w	r3, r0, #16
 8006c9e:	6101      	streq	r1, [r0, #16]
 8006ca0:	f100 0318 	addeq.w	r3, r0, #24
 8006ca4:	6141      	streq	r1, [r0, #20]
 8006ca6:	e7ee      	b.n	8006c86 <_calloc_r+0x2c>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	e7ec      	b.n	8006c86 <_calloc_r+0x2c>
 8006cac:	2100      	movs	r1, #0
 8006cae:	f7fd fba7 	bl	8004400 <memset>
 8006cb2:	e7ec      	b.n	8006c8e <_calloc_r+0x34>

08006cb4 <memmove>:
 8006cb4:	4288      	cmp	r0, r1
 8006cb6:	b510      	push	{r4, lr}
 8006cb8:	eb01 0302 	add.w	r3, r1, r2
 8006cbc:	d803      	bhi.n	8006cc6 <memmove+0x12>
 8006cbe:	1e42      	subs	r2, r0, #1
 8006cc0:	4299      	cmp	r1, r3
 8006cc2:	d10c      	bne.n	8006cde <memmove+0x2a>
 8006cc4:	bd10      	pop	{r4, pc}
 8006cc6:	4298      	cmp	r0, r3
 8006cc8:	d2f9      	bcs.n	8006cbe <memmove+0xa>
 8006cca:	1881      	adds	r1, r0, r2
 8006ccc:	1ad2      	subs	r2, r2, r3
 8006cce:	42d3      	cmn	r3, r2
 8006cd0:	d100      	bne.n	8006cd4 <memmove+0x20>
 8006cd2:	bd10      	pop	{r4, pc}
 8006cd4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cd8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006cdc:	e7f7      	b.n	8006cce <memmove+0x1a>
 8006cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ce2:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006ce6:	e7eb      	b.n	8006cc0 <memmove+0xc>

08006ce8 <_realloc_r>:
 8006ce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cec:	4682      	mov	sl, r0
 8006cee:	460c      	mov	r4, r1
 8006cf0:	b929      	cbnz	r1, 8006cfe <_realloc_r+0x16>
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	b003      	add	sp, #12
 8006cf6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cfa:	f7fd b973 	b.w	8003fe4 <_malloc_r>
 8006cfe:	9201      	str	r2, [sp, #4]
 8006d00:	f7fd fb86 	bl	8004410 <__malloc_lock>
 8006d04:	9a01      	ldr	r2, [sp, #4]
 8006d06:	f854 5c04 	ldr.w	r5, [r4, #-4]
 8006d0a:	f102 080b 	add.w	r8, r2, #11
 8006d0e:	f1b8 0f16 	cmp.w	r8, #22
 8006d12:	f1a4 0908 	sub.w	r9, r4, #8
 8006d16:	f025 0603 	bic.w	r6, r5, #3
 8006d1a:	d90a      	bls.n	8006d32 <_realloc_r+0x4a>
 8006d1c:	f038 0807 	bics.w	r8, r8, #7
 8006d20:	d509      	bpl.n	8006d36 <_realloc_r+0x4e>
 8006d22:	230c      	movs	r3, #12
 8006d24:	f8ca 3000 	str.w	r3, [sl]
 8006d28:	2700      	movs	r7, #0
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	b003      	add	sp, #12
 8006d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d32:	f04f 0810 	mov.w	r8, #16
 8006d36:	4590      	cmp	r8, r2
 8006d38:	d3f3      	bcc.n	8006d22 <_realloc_r+0x3a>
 8006d3a:	45b0      	cmp	r8, r6
 8006d3c:	f340 8145 	ble.w	8006fca <_realloc_r+0x2e2>
 8006d40:	4ba8      	ldr	r3, [pc, #672]	; (8006fe4 <_realloc_r+0x2fc>)
 8006d42:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8006d46:	eb09 0106 	add.w	r1, r9, r6
 8006d4a:	4571      	cmp	r1, lr
 8006d4c:	469b      	mov	fp, r3
 8006d4e:	684b      	ldr	r3, [r1, #4]
 8006d50:	d005      	beq.n	8006d5e <_realloc_r+0x76>
 8006d52:	f023 0001 	bic.w	r0, r3, #1
 8006d56:	4408      	add	r0, r1
 8006d58:	6840      	ldr	r0, [r0, #4]
 8006d5a:	07c7      	lsls	r7, r0, #31
 8006d5c:	d447      	bmi.n	8006dee <_realloc_r+0x106>
 8006d5e:	f023 0303 	bic.w	r3, r3, #3
 8006d62:	4571      	cmp	r1, lr
 8006d64:	eb06 0703 	add.w	r7, r6, r3
 8006d68:	d119      	bne.n	8006d9e <_realloc_r+0xb6>
 8006d6a:	f108 0010 	add.w	r0, r8, #16
 8006d6e:	4287      	cmp	r7, r0
 8006d70:	db3f      	blt.n	8006df2 <_realloc_r+0x10a>
 8006d72:	eb09 0308 	add.w	r3, r9, r8
 8006d76:	eba7 0708 	sub.w	r7, r7, r8
 8006d7a:	f047 0701 	orr.w	r7, r7, #1
 8006d7e:	f8cb 3008 	str.w	r3, [fp, #8]
 8006d82:	605f      	str	r7, [r3, #4]
 8006d84:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006d88:	f003 0301 	and.w	r3, r3, #1
 8006d8c:	ea43 0308 	orr.w	r3, r3, r8
 8006d90:	f844 3c04 	str.w	r3, [r4, #-4]
 8006d94:	4650      	mov	r0, sl
 8006d96:	f7fd fb41 	bl	800441c <__malloc_unlock>
 8006d9a:	4627      	mov	r7, r4
 8006d9c:	e7c5      	b.n	8006d2a <_realloc_r+0x42>
 8006d9e:	45b8      	cmp	r8, r7
 8006da0:	dc27      	bgt.n	8006df2 <_realloc_r+0x10a>
 8006da2:	68cb      	ldr	r3, [r1, #12]
 8006da4:	688a      	ldr	r2, [r1, #8]
 8006da6:	60d3      	str	r3, [r2, #12]
 8006da8:	609a      	str	r2, [r3, #8]
 8006daa:	eba7 0008 	sub.w	r0, r7, r8
 8006dae:	280f      	cmp	r0, #15
 8006db0:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006db4:	eb09 0207 	add.w	r2, r9, r7
 8006db8:	f240 8109 	bls.w	8006fce <_realloc_r+0x2e6>
 8006dbc:	eb09 0108 	add.w	r1, r9, r8
 8006dc0:	f003 0301 	and.w	r3, r3, #1
 8006dc4:	ea43 0308 	orr.w	r3, r3, r8
 8006dc8:	f040 0001 	orr.w	r0, r0, #1
 8006dcc:	f8c9 3004 	str.w	r3, [r9, #4]
 8006dd0:	6048      	str	r0, [r1, #4]
 8006dd2:	6853      	ldr	r3, [r2, #4]
 8006dd4:	f043 0301 	orr.w	r3, r3, #1
 8006dd8:	6053      	str	r3, [r2, #4]
 8006dda:	3108      	adds	r1, #8
 8006ddc:	4650      	mov	r0, sl
 8006dde:	f7ff faf7 	bl	80063d0 <_free_r>
 8006de2:	4650      	mov	r0, sl
 8006de4:	f7fd fb1a 	bl	800441c <__malloc_unlock>
 8006de8:	f109 0708 	add.w	r7, r9, #8
 8006dec:	e79d      	b.n	8006d2a <_realloc_r+0x42>
 8006dee:	2300      	movs	r3, #0
 8006df0:	4619      	mov	r1, r3
 8006df2:	07e8      	lsls	r0, r5, #31
 8006df4:	f100 8084 	bmi.w	8006f00 <_realloc_r+0x218>
 8006df8:	f854 5c08 	ldr.w	r5, [r4, #-8]
 8006dfc:	eba9 0505 	sub.w	r5, r9, r5
 8006e00:	6868      	ldr	r0, [r5, #4]
 8006e02:	f020 0003 	bic.w	r0, r0, #3
 8006e06:	4430      	add	r0, r6
 8006e08:	2900      	cmp	r1, #0
 8006e0a:	d076      	beq.n	8006efa <_realloc_r+0x212>
 8006e0c:	4571      	cmp	r1, lr
 8006e0e:	d150      	bne.n	8006eb2 <_realloc_r+0x1ca>
 8006e10:	4403      	add	r3, r0
 8006e12:	f108 0110 	add.w	r1, r8, #16
 8006e16:	428b      	cmp	r3, r1
 8006e18:	db6f      	blt.n	8006efa <_realloc_r+0x212>
 8006e1a:	462f      	mov	r7, r5
 8006e1c:	68ea      	ldr	r2, [r5, #12]
 8006e1e:	f857 1f08 	ldr.w	r1, [r7, #8]!
 8006e22:	60ca      	str	r2, [r1, #12]
 8006e24:	6091      	str	r1, [r2, #8]
 8006e26:	1f32      	subs	r2, r6, #4
 8006e28:	2a24      	cmp	r2, #36	; 0x24
 8006e2a:	d83b      	bhi.n	8006ea4 <_realloc_r+0x1bc>
 8006e2c:	2a13      	cmp	r2, #19
 8006e2e:	d936      	bls.n	8006e9e <_realloc_r+0x1b6>
 8006e30:	6821      	ldr	r1, [r4, #0]
 8006e32:	60a9      	str	r1, [r5, #8]
 8006e34:	6861      	ldr	r1, [r4, #4]
 8006e36:	60e9      	str	r1, [r5, #12]
 8006e38:	2a1b      	cmp	r2, #27
 8006e3a:	d81c      	bhi.n	8006e76 <_realloc_r+0x18e>
 8006e3c:	f105 0210 	add.w	r2, r5, #16
 8006e40:	f104 0108 	add.w	r1, r4, #8
 8006e44:	6808      	ldr	r0, [r1, #0]
 8006e46:	6010      	str	r0, [r2, #0]
 8006e48:	6848      	ldr	r0, [r1, #4]
 8006e4a:	6050      	str	r0, [r2, #4]
 8006e4c:	6889      	ldr	r1, [r1, #8]
 8006e4e:	6091      	str	r1, [r2, #8]
 8006e50:	eb05 0208 	add.w	r2, r5, r8
 8006e54:	eba3 0308 	sub.w	r3, r3, r8
 8006e58:	f043 0301 	orr.w	r3, r3, #1
 8006e5c:	f8cb 2008 	str.w	r2, [fp, #8]
 8006e60:	6053      	str	r3, [r2, #4]
 8006e62:	686b      	ldr	r3, [r5, #4]
 8006e64:	f003 0301 	and.w	r3, r3, #1
 8006e68:	ea43 0308 	orr.w	r3, r3, r8
 8006e6c:	606b      	str	r3, [r5, #4]
 8006e6e:	4650      	mov	r0, sl
 8006e70:	f7fd fad4 	bl	800441c <__malloc_unlock>
 8006e74:	e759      	b.n	8006d2a <_realloc_r+0x42>
 8006e76:	68a1      	ldr	r1, [r4, #8]
 8006e78:	6129      	str	r1, [r5, #16]
 8006e7a:	68e1      	ldr	r1, [r4, #12]
 8006e7c:	6169      	str	r1, [r5, #20]
 8006e7e:	2a24      	cmp	r2, #36	; 0x24
 8006e80:	bf01      	itttt	eq
 8006e82:	6922      	ldreq	r2, [r4, #16]
 8006e84:	61aa      	streq	r2, [r5, #24]
 8006e86:	6960      	ldreq	r0, [r4, #20]
 8006e88:	61e8      	streq	r0, [r5, #28]
 8006e8a:	bf19      	ittee	ne
 8006e8c:	f105 0218 	addne.w	r2, r5, #24
 8006e90:	f104 0110 	addne.w	r1, r4, #16
 8006e94:	f105 0220 	addeq.w	r2, r5, #32
 8006e98:	f104 0118 	addeq.w	r1, r4, #24
 8006e9c:	e7d2      	b.n	8006e44 <_realloc_r+0x15c>
 8006e9e:	463a      	mov	r2, r7
 8006ea0:	4621      	mov	r1, r4
 8006ea2:	e7cf      	b.n	8006e44 <_realloc_r+0x15c>
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	4638      	mov	r0, r7
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	f7ff ff03 	bl	8006cb4 <memmove>
 8006eae:	9b01      	ldr	r3, [sp, #4]
 8006eb0:	e7ce      	b.n	8006e50 <_realloc_r+0x168>
 8006eb2:	18c7      	adds	r7, r0, r3
 8006eb4:	45b8      	cmp	r8, r7
 8006eb6:	dc20      	bgt.n	8006efa <_realloc_r+0x212>
 8006eb8:	68cb      	ldr	r3, [r1, #12]
 8006eba:	688a      	ldr	r2, [r1, #8]
 8006ebc:	60d3      	str	r3, [r2, #12]
 8006ebe:	609a      	str	r2, [r3, #8]
 8006ec0:	4628      	mov	r0, r5
 8006ec2:	68eb      	ldr	r3, [r5, #12]
 8006ec4:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006ec8:	60d3      	str	r3, [r2, #12]
 8006eca:	609a      	str	r2, [r3, #8]
 8006ecc:	1f32      	subs	r2, r6, #4
 8006ece:	2a24      	cmp	r2, #36	; 0x24
 8006ed0:	d842      	bhi.n	8006f58 <_realloc_r+0x270>
 8006ed2:	2a13      	cmp	r2, #19
 8006ed4:	d93e      	bls.n	8006f54 <_realloc_r+0x26c>
 8006ed6:	6823      	ldr	r3, [r4, #0]
 8006ed8:	60ab      	str	r3, [r5, #8]
 8006eda:	6863      	ldr	r3, [r4, #4]
 8006edc:	60eb      	str	r3, [r5, #12]
 8006ede:	2a1b      	cmp	r2, #27
 8006ee0:	d824      	bhi.n	8006f2c <_realloc_r+0x244>
 8006ee2:	f105 0010 	add.w	r0, r5, #16
 8006ee6:	f104 0308 	add.w	r3, r4, #8
 8006eea:	681a      	ldr	r2, [r3, #0]
 8006eec:	6002      	str	r2, [r0, #0]
 8006eee:	685a      	ldr	r2, [r3, #4]
 8006ef0:	6042      	str	r2, [r0, #4]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	6083      	str	r3, [r0, #8]
 8006ef6:	46a9      	mov	r9, r5
 8006ef8:	e757      	b.n	8006daa <_realloc_r+0xc2>
 8006efa:	4580      	cmp	r8, r0
 8006efc:	4607      	mov	r7, r0
 8006efe:	dddf      	ble.n	8006ec0 <_realloc_r+0x1d8>
 8006f00:	4611      	mov	r1, r2
 8006f02:	4650      	mov	r0, sl
 8006f04:	f7fd f86e 	bl	8003fe4 <_malloc_r>
 8006f08:	4607      	mov	r7, r0
 8006f0a:	2800      	cmp	r0, #0
 8006f0c:	d0af      	beq.n	8006e6e <_realloc_r+0x186>
 8006f0e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006f12:	f023 0301 	bic.w	r3, r3, #1
 8006f16:	f1a0 0208 	sub.w	r2, r0, #8
 8006f1a:	444b      	add	r3, r9
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d11f      	bne.n	8006f60 <_realloc_r+0x278>
 8006f20:	f850 7c04 	ldr.w	r7, [r0, #-4]
 8006f24:	f027 0703 	bic.w	r7, r7, #3
 8006f28:	4437      	add	r7, r6
 8006f2a:	e73e      	b.n	8006daa <_realloc_r+0xc2>
 8006f2c:	68a3      	ldr	r3, [r4, #8]
 8006f2e:	612b      	str	r3, [r5, #16]
 8006f30:	68e3      	ldr	r3, [r4, #12]
 8006f32:	616b      	str	r3, [r5, #20]
 8006f34:	2a24      	cmp	r2, #36	; 0x24
 8006f36:	bf01      	itttt	eq
 8006f38:	6923      	ldreq	r3, [r4, #16]
 8006f3a:	61ab      	streq	r3, [r5, #24]
 8006f3c:	6962      	ldreq	r2, [r4, #20]
 8006f3e:	61ea      	streq	r2, [r5, #28]
 8006f40:	bf19      	ittee	ne
 8006f42:	f105 0018 	addne.w	r0, r5, #24
 8006f46:	f104 0310 	addne.w	r3, r4, #16
 8006f4a:	f105 0020 	addeq.w	r0, r5, #32
 8006f4e:	f104 0318 	addeq.w	r3, r4, #24
 8006f52:	e7ca      	b.n	8006eea <_realloc_r+0x202>
 8006f54:	4623      	mov	r3, r4
 8006f56:	e7c8      	b.n	8006eea <_realloc_r+0x202>
 8006f58:	4621      	mov	r1, r4
 8006f5a:	f7ff feab 	bl	8006cb4 <memmove>
 8006f5e:	e7ca      	b.n	8006ef6 <_realloc_r+0x20e>
 8006f60:	1f32      	subs	r2, r6, #4
 8006f62:	2a24      	cmp	r2, #36	; 0x24
 8006f64:	d82d      	bhi.n	8006fc2 <_realloc_r+0x2da>
 8006f66:	2a13      	cmp	r2, #19
 8006f68:	d928      	bls.n	8006fbc <_realloc_r+0x2d4>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	6003      	str	r3, [r0, #0]
 8006f6e:	6863      	ldr	r3, [r4, #4]
 8006f70:	6043      	str	r3, [r0, #4]
 8006f72:	2a1b      	cmp	r2, #27
 8006f74:	d80e      	bhi.n	8006f94 <_realloc_r+0x2ac>
 8006f76:	f100 0308 	add.w	r3, r0, #8
 8006f7a:	f104 0208 	add.w	r2, r4, #8
 8006f7e:	6811      	ldr	r1, [r2, #0]
 8006f80:	6019      	str	r1, [r3, #0]
 8006f82:	6851      	ldr	r1, [r2, #4]
 8006f84:	6059      	str	r1, [r3, #4]
 8006f86:	6892      	ldr	r2, [r2, #8]
 8006f88:	609a      	str	r2, [r3, #8]
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	4650      	mov	r0, sl
 8006f8e:	f7ff fa1f 	bl	80063d0 <_free_r>
 8006f92:	e76c      	b.n	8006e6e <_realloc_r+0x186>
 8006f94:	68a3      	ldr	r3, [r4, #8]
 8006f96:	6083      	str	r3, [r0, #8]
 8006f98:	68e3      	ldr	r3, [r4, #12]
 8006f9a:	60c3      	str	r3, [r0, #12]
 8006f9c:	2a24      	cmp	r2, #36	; 0x24
 8006f9e:	bf01      	itttt	eq
 8006fa0:	6923      	ldreq	r3, [r4, #16]
 8006fa2:	6103      	streq	r3, [r0, #16]
 8006fa4:	6961      	ldreq	r1, [r4, #20]
 8006fa6:	6141      	streq	r1, [r0, #20]
 8006fa8:	bf19      	ittee	ne
 8006faa:	f100 0310 	addne.w	r3, r0, #16
 8006fae:	f104 0210 	addne.w	r2, r4, #16
 8006fb2:	f100 0318 	addeq.w	r3, r0, #24
 8006fb6:	f104 0218 	addeq.w	r2, r4, #24
 8006fba:	e7e0      	b.n	8006f7e <_realloc_r+0x296>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	4622      	mov	r2, r4
 8006fc0:	e7dd      	b.n	8006f7e <_realloc_r+0x296>
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	f7ff fe76 	bl	8006cb4 <memmove>
 8006fc8:	e7df      	b.n	8006f8a <_realloc_r+0x2a2>
 8006fca:	4637      	mov	r7, r6
 8006fcc:	e6ed      	b.n	8006daa <_realloc_r+0xc2>
 8006fce:	f003 0301 	and.w	r3, r3, #1
 8006fd2:	431f      	orrs	r7, r3
 8006fd4:	f8c9 7004 	str.w	r7, [r9, #4]
 8006fd8:	6853      	ldr	r3, [r2, #4]
 8006fda:	f043 0301 	orr.w	r3, r3, #1
 8006fde:	6053      	str	r3, [r2, #4]
 8006fe0:	e6ff      	b.n	8006de2 <_realloc_r+0xfa>
 8006fe2:	bf00      	nop
 8006fe4:	20000020 	.word	0x20000020

08006fe8 <_sbrk>:
 8006fe8:	4b04      	ldr	r3, [pc, #16]	; (8006ffc <_sbrk+0x14>)
 8006fea:	6819      	ldr	r1, [r3, #0]
 8006fec:	4602      	mov	r2, r0
 8006fee:	b909      	cbnz	r1, 8006ff4 <_sbrk+0xc>
 8006ff0:	4903      	ldr	r1, [pc, #12]	; (8007000 <_sbrk+0x18>)
 8006ff2:	6019      	str	r1, [r3, #0]
 8006ff4:	6818      	ldr	r0, [r3, #0]
 8006ff6:	4402      	add	r2, r0
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	4770      	bx	lr
 8006ffc:	200009b8 	.word	0x200009b8
 8007000:	20000a70 	.word	0x20000a70

08007004 <_init>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	bf00      	nop
 8007008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700a:	bc08      	pop	{r3}
 800700c:	469e      	mov	lr, r3
 800700e:	4770      	bx	lr

08007010 <_fini>:
 8007010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007012:	bf00      	nop
 8007014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007016:	bc08      	pop	{r3}
 8007018:	469e      	mov	lr, r3
 800701a:	4770      	bx	lr
