
STM32_CLI_FREERTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006740  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  080068e0  080068e0  000168e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007008  08007008  00017008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800700c  0800700c  0001700c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000690  20000000  08007010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000003d0  20000690  080076a0  00020690  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000a60  080076a0  00020a60  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020690  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001055f  00000000  00000000  000206c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000023c3  00000000  00000000  00030c1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007c0  00000000  00000000  00032fe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000006b8  00000000  00000000  000337a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000041da  00000000  00000000  00033e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002a30  00000000  00000000  0003803a  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003aa6a  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000027d8  00000000  00000000  0003aae8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000690 	.word	0x20000690
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080068c8 	.word	0x080068c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000694 	.word	0x20000694
 80001dc:	080068c8 	.word	0x080068c8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ce:	f1a4 0401 	sub.w	r4, r4, #1
 80003d2:	d1e9      	bne.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f092 0f00 	teq	r2, #0
 800057a:	bf14      	ite	ne
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	4770      	bxeq	lr
 8000582:	b530      	push	{r4, r5, lr}
 8000584:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000588:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800058c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000590:	e720      	b.n	80003d4 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_ul2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	e00a      	b.n	80005ba <__aeabi_l2d+0x16>

080005a4 <__aeabi_l2d>:
 80005a4:	ea50 0201 	orrs.w	r2, r0, r1
 80005a8:	bf08      	it	eq
 80005aa:	4770      	bxeq	lr
 80005ac:	b530      	push	{r4, r5, lr}
 80005ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005b2:	d502      	bpl.n	80005ba <__aeabi_l2d+0x16>
 80005b4:	4240      	negs	r0, r0
 80005b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005c6:	f43f aedc 	beq.w	8000382 <__adddf3+0xe6>
 80005ca:	f04f 0203 	mov.w	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005e2:	f1c2 0320 	rsb	r3, r2, #32
 80005e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80005f2:	ea40 000e 	orr.w	r0, r0, lr
 80005f6:	fa21 f102 	lsr.w	r1, r1, r2
 80005fa:	4414      	add	r4, r2
 80005fc:	e6c1      	b.n	8000382 <__adddf3+0xe6>
 80005fe:	bf00      	nop

08000600 <__aeabi_dmul>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000606:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800060a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800060e:	bf1d      	ittte	ne
 8000610:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000614:	ea94 0f0c 	teqne	r4, ip
 8000618:	ea95 0f0c 	teqne	r5, ip
 800061c:	f000 f8de 	bleq	80007dc <__aeabi_dmul+0x1dc>
 8000620:	442c      	add	r4, r5
 8000622:	ea81 0603 	eor.w	r6, r1, r3
 8000626:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800062a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800062e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000632:	bf18      	it	ne
 8000634:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000640:	d038      	beq.n	80006b4 <__aeabi_dmul+0xb4>
 8000642:	fba0 ce02 	umull	ip, lr, r0, r2
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800064e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000652:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000656:	f04f 0600 	mov.w	r6, #0
 800065a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800065e:	f09c 0f00 	teq	ip, #0
 8000662:	bf18      	it	ne
 8000664:	f04e 0e01 	orrne.w	lr, lr, #1
 8000668:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800066c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000670:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000674:	d204      	bcs.n	8000680 <__aeabi_dmul+0x80>
 8000676:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800067a:	416d      	adcs	r5, r5
 800067c:	eb46 0606 	adc.w	r6, r6, r6
 8000680:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000684:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000688:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800068c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000690:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000694:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000698:	bf88      	it	hi
 800069a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800069e:	d81e      	bhi.n	80006de <__aeabi_dmul+0xde>
 80006a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006a4:	bf08      	it	eq
 80006a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006aa:	f150 0000 	adcs.w	r0, r0, #0
 80006ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b8:	ea46 0101 	orr.w	r1, r6, r1
 80006bc:	ea40 0002 	orr.w	r0, r0, r2
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c8:	bfc2      	ittt	gt
 80006ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006d2:	bd70      	popgt	{r4, r5, r6, pc}
 80006d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d8:	f04f 0e00 	mov.w	lr, #0
 80006dc:	3c01      	subs	r4, #1
 80006de:	f300 80ab 	bgt.w	8000838 <__aeabi_dmul+0x238>
 80006e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006e6:	bfde      	ittt	le
 80006e8:	2000      	movle	r0, #0
 80006ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ee:	bd70      	pople	{r4, r5, r6, pc}
 80006f0:	f1c4 0400 	rsb	r4, r4, #0
 80006f4:	3c20      	subs	r4, #32
 80006f6:	da35      	bge.n	8000764 <__aeabi_dmul+0x164>
 80006f8:	340c      	adds	r4, #12
 80006fa:	dc1b      	bgt.n	8000734 <__aeabi_dmul+0x134>
 80006fc:	f104 0414 	add.w	r4, r4, #20
 8000700:	f1c4 0520 	rsb	r5, r4, #32
 8000704:	fa00 f305 	lsl.w	r3, r0, r5
 8000708:	fa20 f004 	lsr.w	r0, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea40 0002 	orr.w	r0, r0, r2
 8000714:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000718:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800071c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000720:	fa21 f604 	lsr.w	r6, r1, r4
 8000724:	eb42 0106 	adc.w	r1, r2, r6
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f1c4 040c 	rsb	r4, r4, #12
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f304 	lsl.w	r3, r0, r4
 8000740:	fa20 f005 	lsr.w	r0, r0, r5
 8000744:	fa01 f204 	lsl.w	r2, r1, r4
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000754:	f141 0100 	adc.w	r1, r1, #0
 8000758:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800075c:	bf08      	it	eq
 800075e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000762:	bd70      	pop	{r4, r5, r6, pc}
 8000764:	f1c4 0520 	rsb	r5, r4, #32
 8000768:	fa00 f205 	lsl.w	r2, r0, r5
 800076c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000770:	fa20 f304 	lsr.w	r3, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea43 0302 	orr.w	r3, r3, r2
 800077c:	fa21 f004 	lsr.w	r0, r1, r4
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	fa21 f204 	lsr.w	r2, r1, r4
 8000788:	ea20 0002 	bic.w	r0, r0, r2
 800078c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f094 0f00 	teq	r4, #0
 80007a0:	d10f      	bne.n	80007c2 <__aeabi_dmul+0x1c2>
 80007a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007a6:	0040      	lsls	r0, r0, #1
 80007a8:	eb41 0101 	adc.w	r1, r1, r1
 80007ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3c01      	subeq	r4, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1a6>
 80007b6:	ea41 0106 	orr.w	r1, r1, r6
 80007ba:	f095 0f00 	teq	r5, #0
 80007be:	bf18      	it	ne
 80007c0:	4770      	bxne	lr
 80007c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007c6:	0052      	lsls	r2, r2, #1
 80007c8:	eb43 0303 	adc.w	r3, r3, r3
 80007cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d0:	bf08      	it	eq
 80007d2:	3d01      	subeq	r5, #1
 80007d4:	d0f7      	beq.n	80007c6 <__aeabi_dmul+0x1c6>
 80007d6:	ea43 0306 	orr.w	r3, r3, r6
 80007da:	4770      	bx	lr
 80007dc:	ea94 0f0c 	teq	r4, ip
 80007e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007e4:	bf18      	it	ne
 80007e6:	ea95 0f0c 	teqne	r5, ip
 80007ea:	d00c      	beq.n	8000806 <__aeabi_dmul+0x206>
 80007ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f0:	bf18      	it	ne
 80007f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f6:	d1d1      	bne.n	800079c <__aeabi_dmul+0x19c>
 80007f8:	ea81 0103 	eor.w	r1, r1, r3
 80007fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000800:	f04f 0000 	mov.w	r0, #0
 8000804:	bd70      	pop	{r4, r5, r6, pc}
 8000806:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800080a:	bf06      	itte	eq
 800080c:	4610      	moveq	r0, r2
 800080e:	4619      	moveq	r1, r3
 8000810:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000814:	d019      	beq.n	800084a <__aeabi_dmul+0x24a>
 8000816:	ea94 0f0c 	teq	r4, ip
 800081a:	d102      	bne.n	8000822 <__aeabi_dmul+0x222>
 800081c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000820:	d113      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000822:	ea95 0f0c 	teq	r5, ip
 8000826:	d105      	bne.n	8000834 <__aeabi_dmul+0x234>
 8000828:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800082c:	bf1c      	itt	ne
 800082e:	4610      	movne	r0, r2
 8000830:	4619      	movne	r1, r3
 8000832:	d10a      	bne.n	800084a <__aeabi_dmul+0x24a>
 8000834:	ea81 0103 	eor.w	r1, r1, r3
 8000838:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800083c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000840:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000844:	f04f 0000 	mov.w	r0, #0
 8000848:	bd70      	pop	{r4, r5, r6, pc}
 800084a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800084e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000852:	bd70      	pop	{r4, r5, r6, pc}

08000854 <__aeabi_ddiv>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800085a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800085e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000862:	bf1d      	ittte	ne
 8000864:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000868:	ea94 0f0c 	teqne	r4, ip
 800086c:	ea95 0f0c 	teqne	r5, ip
 8000870:	f000 f8a7 	bleq	80009c2 <__aeabi_ddiv+0x16e>
 8000874:	eba4 0405 	sub.w	r4, r4, r5
 8000878:	ea81 0e03 	eor.w	lr, r1, r3
 800087c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000880:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000884:	f000 8088 	beq.w	8000998 <__aeabi_ddiv+0x144>
 8000888:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800088c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000890:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000894:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000898:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800089c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ac:	429d      	cmp	r5, r3
 80008ae:	bf08      	it	eq
 80008b0:	4296      	cmpeq	r6, r2
 80008b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008ba:	d202      	bcs.n	80008c2 <__aeabi_ddiv+0x6e>
 80008bc:	085b      	lsrs	r3, r3, #1
 80008be:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c2:	1ab6      	subs	r6, r6, r2
 80008c4:	eb65 0503 	sbc.w	r5, r5, r3
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000930:	ea55 0e06 	orrs.w	lr, r5, r6
 8000934:	d018      	beq.n	8000968 <__aeabi_ddiv+0x114>
 8000936:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800093a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800093e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000942:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000946:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800094a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800094e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000952:	d1c0      	bne.n	80008d6 <__aeabi_ddiv+0x82>
 8000954:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000958:	d10b      	bne.n	8000972 <__aeabi_ddiv+0x11e>
 800095a:	ea41 0100 	orr.w	r1, r1, r0
 800095e:	f04f 0000 	mov.w	r0, #0
 8000962:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000966:	e7b6      	b.n	80008d6 <__aeabi_ddiv+0x82>
 8000968:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800096c:	bf04      	itt	eq
 800096e:	4301      	orreq	r1, r0
 8000970:	2000      	moveq	r0, #0
 8000972:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000976:	bf88      	it	hi
 8000978:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800097c:	f63f aeaf 	bhi.w	80006de <__aeabi_dmul+0xde>
 8000980:	ebb5 0c03 	subs.w	ip, r5, r3
 8000984:	bf04      	itt	eq
 8000986:	ebb6 0c02 	subseq.w	ip, r6, r2
 800098a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800098e:	f150 0000 	adcs.w	r0, r0, #0
 8000992:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000996:	bd70      	pop	{r4, r5, r6, pc}
 8000998:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800099c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009a4:	bfc2      	ittt	gt
 80009a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	popgt	{r4, r5, r6, pc}
 80009b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009b4:	f04f 0e00 	mov.w	lr, #0
 80009b8:	3c01      	subs	r4, #1
 80009ba:	e690      	b.n	80006de <__aeabi_dmul+0xde>
 80009bc:	ea45 0e06 	orr.w	lr, r5, r6
 80009c0:	e68d      	b.n	80006de <__aeabi_dmul+0xde>
 80009c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009c6:	ea94 0f0c 	teq	r4, ip
 80009ca:	bf08      	it	eq
 80009cc:	ea95 0f0c 	teqeq	r5, ip
 80009d0:	f43f af3b 	beq.w	800084a <__aeabi_dmul+0x24a>
 80009d4:	ea94 0f0c 	teq	r4, ip
 80009d8:	d10a      	bne.n	80009f0 <__aeabi_ddiv+0x19c>
 80009da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009de:	f47f af34 	bne.w	800084a <__aeabi_dmul+0x24a>
 80009e2:	ea95 0f0c 	teq	r5, ip
 80009e6:	f47f af25 	bne.w	8000834 <__aeabi_dmul+0x234>
 80009ea:	4610      	mov	r0, r2
 80009ec:	4619      	mov	r1, r3
 80009ee:	e72c      	b.n	800084a <__aeabi_dmul+0x24a>
 80009f0:	ea95 0f0c 	teq	r5, ip
 80009f4:	d106      	bne.n	8000a04 <__aeabi_ddiv+0x1b0>
 80009f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009fa:	f43f aefd 	beq.w	80007f8 <__aeabi_dmul+0x1f8>
 80009fe:	4610      	mov	r0, r2
 8000a00:	4619      	mov	r1, r3
 8000a02:	e722      	b.n	800084a <__aeabi_dmul+0x24a>
 8000a04:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a08:	bf18      	it	ne
 8000a0a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a0e:	f47f aec5 	bne.w	800079c <__aeabi_dmul+0x19c>
 8000a12:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a16:	f47f af0d 	bne.w	8000834 <__aeabi_dmul+0x234>
 8000a1a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a1e:	f47f aeeb 	bne.w	80007f8 <__aeabi_dmul+0x1f8>
 8000a22:	e712      	b.n	800084a <__aeabi_dmul+0x24a>

08000a24 <__gedf2>:
 8000a24:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a28:	e006      	b.n	8000a38 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__ledf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	e002      	b.n	8000a38 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__cmpdf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a4e:	d01b      	beq.n	8000a88 <__cmpdf2+0x54>
 8000a50:	b001      	add	sp, #4
 8000a52:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a56:	bf0c      	ite	eq
 8000a58:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a5c:	ea91 0f03 	teqne	r1, r3
 8000a60:	bf02      	ittt	eq
 8000a62:	ea90 0f02 	teqeq	r0, r2
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4770      	bxeq	lr
 8000a6a:	f110 0f00 	cmn.w	r0, #0
 8000a6e:	ea91 0f03 	teq	r1, r3
 8000a72:	bf58      	it	pl
 8000a74:	4299      	cmppl	r1, r3
 8000a76:	bf08      	it	eq
 8000a78:	4290      	cmpeq	r0, r2
 8000a7a:	bf2c      	ite	cs
 8000a7c:	17d8      	asrcs	r0, r3, #31
 8000a7e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a82:	f040 0001 	orr.w	r0, r0, #1
 8000a86:	4770      	bx	lr
 8000a88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d102      	bne.n	8000a98 <__cmpdf2+0x64>
 8000a92:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a96:	d107      	bne.n	8000aa8 <__cmpdf2+0x74>
 8000a98:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d1d6      	bne.n	8000a50 <__cmpdf2+0x1c>
 8000aa2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa6:	d0d3      	beq.n	8000a50 <__cmpdf2+0x1c>
 8000aa8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdrcmple>:
 8000ab0:	4684      	mov	ip, r0
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	4662      	mov	r2, ip
 8000ab6:	468c      	mov	ip, r1
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4663      	mov	r3, ip
 8000abc:	e000      	b.n	8000ac0 <__aeabi_cdcmpeq>
 8000abe:	bf00      	nop

08000ac0 <__aeabi_cdcmpeq>:
 8000ac0:	b501      	push	{r0, lr}
 8000ac2:	f7ff ffb7 	bl	8000a34 <__cmpdf2>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	bf48      	it	mi
 8000aca:	f110 0f00 	cmnmi.w	r0, #0
 8000ace:	bd01      	pop	{r0, pc}

08000ad0 <__aeabi_dcmpeq>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff fff4 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000ad8:	bf0c      	ite	eq
 8000ada:	2001      	moveq	r0, #1
 8000adc:	2000      	movne	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_dcmplt>:
 8000ae4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae8:	f7ff ffea 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000aec:	bf34      	ite	cc
 8000aee:	2001      	movcc	r0, #1
 8000af0:	2000      	movcs	r0, #0
 8000af2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af6:	bf00      	nop

08000af8 <__aeabi_dcmple>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff ffe0 	bl	8000ac0 <__aeabi_cdcmpeq>
 8000b00:	bf94      	ite	ls
 8000b02:	2001      	movls	r0, #1
 8000b04:	2000      	movhi	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmpge>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffce 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b14:	bf94      	ite	ls
 8000b16:	2001      	movls	r0, #1
 8000b18:	2000      	movhi	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmpgt>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffc4 	bl	8000ab0 <__aeabi_cdrcmple>
 8000b28:	bf34      	ite	cc
 8000b2a:	2001      	movcc	r0, #1
 8000b2c:	2000      	movcs	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpun>:
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x10>
 8000b3e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b42:	d10a      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b44:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b4c:	d102      	bne.n	8000b54 <__aeabi_dcmpun+0x20>
 8000b4e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b52:	d102      	bne.n	8000b5a <__aeabi_dcmpun+0x26>
 8000b54:	f04f 0000 	mov.w	r0, #0
 8000b58:	4770      	bx	lr
 8000b5a:	f04f 0001 	mov.w	r0, #1
 8000b5e:	4770      	bx	lr

08000b60 <__aeabi_d2iz>:
 8000b60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b64:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b68:	d215      	bcs.n	8000b96 <__aeabi_d2iz+0x36>
 8000b6a:	d511      	bpl.n	8000b90 <__aeabi_d2iz+0x30>
 8000b6c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b70:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b74:	d912      	bls.n	8000b9c <__aeabi_d2iz+0x3c>
 8000b76:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b82:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b86:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	4240      	negne	r0, r0
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d105      	bne.n	8000ba8 <__aeabi_d2iz+0x48>
 8000b9c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba0:	bf08      	it	eq
 8000ba2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop

08000bb0 <__aeabi_uldivmod>:
 8000bb0:	b953      	cbnz	r3, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb2:	b94a      	cbnz	r2, 8000bc8 <__aeabi_uldivmod+0x18>
 8000bb4:	2900      	cmp	r1, #0
 8000bb6:	bf08      	it	eq
 8000bb8:	2800      	cmpeq	r0, #0
 8000bba:	bf1c      	itt	ne
 8000bbc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bc0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bc4:	f000 b97a 	b.w	8000ebc <__aeabi_idiv0>
 8000bc8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bcc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd0:	f000 f806 	bl	8000be0 <__udivmoddi4>
 8000bd4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bdc:	b004      	add	sp, #16
 8000bde:	4770      	bx	lr

08000be0 <__udivmoddi4>:
 8000be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be4:	468c      	mov	ip, r1
 8000be6:	460d      	mov	r5, r1
 8000be8:	4604      	mov	r4, r0
 8000bea:	9e08      	ldr	r6, [sp, #32]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d151      	bne.n	8000c94 <__udivmoddi4+0xb4>
 8000bf0:	428a      	cmp	r2, r1
 8000bf2:	4617      	mov	r7, r2
 8000bf4:	d96d      	bls.n	8000cd2 <__udivmoddi4+0xf2>
 8000bf6:	fab2 fe82 	clz	lr, r2
 8000bfa:	f1be 0f00 	cmp.w	lr, #0
 8000bfe:	d00b      	beq.n	8000c18 <__udivmoddi4+0x38>
 8000c00:	f1ce 0c20 	rsb	ip, lr, #32
 8000c04:	fa01 f50e 	lsl.w	r5, r1, lr
 8000c08:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000c0c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c10:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c14:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c18:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c1c:	0c25      	lsrs	r5, r4, #16
 8000c1e:	fbbc f8fa 	udiv	r8, ip, sl
 8000c22:	fa1f f987 	uxth.w	r9, r7
 8000c26:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c2a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c2e:	fb08 f309 	mul.w	r3, r8, r9
 8000c32:	42ab      	cmp	r3, r5
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x6c>
 8000c36:	19ed      	adds	r5, r5, r7
 8000c38:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000c3c:	f080 8123 	bcs.w	8000e86 <__udivmoddi4+0x2a6>
 8000c40:	42ab      	cmp	r3, r5
 8000c42:	f240 8120 	bls.w	8000e86 <__udivmoddi4+0x2a6>
 8000c46:	f1a8 0802 	sub.w	r8, r8, #2
 8000c4a:	443d      	add	r5, r7
 8000c4c:	1aed      	subs	r5, r5, r3
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c54:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c58:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c5c:	fb00 f909 	mul.w	r9, r0, r9
 8000c60:	45a1      	cmp	r9, r4
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x98>
 8000c64:	19e4      	adds	r4, r4, r7
 8000c66:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c6a:	f080 810a 	bcs.w	8000e82 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8107 	bls.w	8000e82 <__udivmoddi4+0x2a2>
 8000c74:	3802      	subs	r0, #2
 8000c76:	443c      	add	r4, r7
 8000c78:	eba4 0409 	sub.w	r4, r4, r9
 8000c7c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c80:	2100      	movs	r1, #0
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	d061      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000c86:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	6034      	str	r4, [r6, #0]
 8000c8e:	6073      	str	r3, [r6, #4]
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0xc8>
 8000c98:	2e00      	cmp	r6, #0
 8000c9a:	d054      	beq.n	8000d46 <__udivmoddi4+0x166>
 8000c9c:	2100      	movs	r1, #0
 8000c9e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca8:	fab3 f183 	clz	r1, r3
 8000cac:	2900      	cmp	r1, #0
 8000cae:	f040 808e 	bne.w	8000dce <__udivmoddi4+0x1ee>
 8000cb2:	42ab      	cmp	r3, r5
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xdc>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80fa 	bhi.w	8000eb0 <__udivmoddi4+0x2d0>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb65 0503 	sbc.w	r5, r5, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	46ac      	mov	ip, r5
 8000cc6:	2e00      	cmp	r6, #0
 8000cc8:	d03f      	beq.n	8000d4a <__udivmoddi4+0x16a>
 8000cca:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	b912      	cbnz	r2, 8000cda <__udivmoddi4+0xfa>
 8000cd4:	2701      	movs	r7, #1
 8000cd6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cda:	fab7 fe87 	clz	lr, r7
 8000cde:	f1be 0f00 	cmp.w	lr, #0
 8000ce2:	d134      	bne.n	8000d4e <__udivmoddi4+0x16e>
 8000ce4:	1beb      	subs	r3, r5, r7
 8000ce6:	0c3a      	lsrs	r2, r7, #16
 8000ce8:	fa1f fc87 	uxth.w	ip, r7
 8000cec:	2101      	movs	r1, #1
 8000cee:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cf2:	0c25      	lsrs	r5, r4, #16
 8000cf4:	fb02 3318 	mls	r3, r2, r8, r3
 8000cf8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000cfc:	fb0c f308 	mul.w	r3, ip, r8
 8000d00:	42ab      	cmp	r3, r5
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x134>
 8000d04:	19ed      	adds	r5, r5, r7
 8000d06:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x132>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	f200 80d1 	bhi.w	8000eb4 <__udivmoddi4+0x2d4>
 8000d12:	4680      	mov	r8, r0
 8000d14:	1aed      	subs	r5, r5, r3
 8000d16:	b2a3      	uxth	r3, r4
 8000d18:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d1c:	fb02 5510 	mls	r5, r2, r0, r5
 8000d20:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d24:	fb0c fc00 	mul.w	ip, ip, r0
 8000d28:	45a4      	cmp	ip, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x15c>
 8000d2c:	19e4      	adds	r4, r4, r7
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x15a>
 8000d34:	45a4      	cmp	ip, r4
 8000d36:	f200 80b8 	bhi.w	8000eaa <__udivmoddi4+0x2ca>
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	eba4 040c 	sub.w	r4, r4, ip
 8000d40:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d44:	e79d      	b.n	8000c82 <__udivmoddi4+0xa2>
 8000d46:	4631      	mov	r1, r6
 8000d48:	4630      	mov	r0, r6
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	f1ce 0420 	rsb	r4, lr, #32
 8000d52:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d56:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d5a:	fa20 f804 	lsr.w	r8, r0, r4
 8000d5e:	0c3a      	lsrs	r2, r7, #16
 8000d60:	fa25 f404 	lsr.w	r4, r5, r4
 8000d64:	ea48 0803 	orr.w	r8, r8, r3
 8000d68:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d6c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d70:	fb02 4411 	mls	r4, r2, r1, r4
 8000d74:	fa1f fc87 	uxth.w	ip, r7
 8000d78:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d7c:	fb01 f30c 	mul.w	r3, r1, ip
 8000d80:	42ab      	cmp	r3, r5
 8000d82:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d86:	d909      	bls.n	8000d9c <__udivmoddi4+0x1bc>
 8000d88:	19ed      	adds	r5, r5, r7
 8000d8a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000d8e:	f080 808a 	bcs.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	f240 8087 	bls.w	8000ea6 <__udivmoddi4+0x2c6>
 8000d98:	3902      	subs	r1, #2
 8000d9a:	443d      	add	r5, r7
 8000d9c:	1aeb      	subs	r3, r5, r3
 8000d9e:	fa1f f588 	uxth.w	r5, r8
 8000da2:	fbb3 f0f2 	udiv	r0, r3, r2
 8000da6:	fb02 3310 	mls	r3, r2, r0, r3
 8000daa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000dae:	fb00 f30c 	mul.w	r3, r0, ip
 8000db2:	42ab      	cmp	r3, r5
 8000db4:	d907      	bls.n	8000dc6 <__udivmoddi4+0x1e6>
 8000db6:	19ed      	adds	r5, r5, r7
 8000db8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dbc:	d26f      	bcs.n	8000e9e <__udivmoddi4+0x2be>
 8000dbe:	42ab      	cmp	r3, r5
 8000dc0:	d96d      	bls.n	8000e9e <__udivmoddi4+0x2be>
 8000dc2:	3802      	subs	r0, #2
 8000dc4:	443d      	add	r5, r7
 8000dc6:	1aeb      	subs	r3, r5, r3
 8000dc8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dcc:	e78f      	b.n	8000cee <__udivmoddi4+0x10e>
 8000dce:	f1c1 0720 	rsb	r7, r1, #32
 8000dd2:	fa22 f807 	lsr.w	r8, r2, r7
 8000dd6:	408b      	lsls	r3, r1
 8000dd8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ddc:	ea48 0303 	orr.w	r3, r8, r3
 8000de0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000de4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000de8:	40fd      	lsrs	r5, r7
 8000dea:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dee:	fbb5 f9fc 	udiv	r9, r5, ip
 8000df2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000df6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000dfa:	fa1f f883 	uxth.w	r8, r3
 8000dfe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000e02:	fb09 f408 	mul.w	r4, r9, r8
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x244>
 8000e12:	18ed      	adds	r5, r5, r3
 8000e14:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e18:	d243      	bcs.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1a:	42ac      	cmp	r4, r5
 8000e1c:	d941      	bls.n	8000ea2 <__udivmoddi4+0x2c2>
 8000e1e:	f1a9 0902 	sub.w	r9, r9, #2
 8000e22:	441d      	add	r5, r3
 8000e24:	1b2d      	subs	r5, r5, r4
 8000e26:	fa1f fe8e 	uxth.w	lr, lr
 8000e2a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e2e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e32:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e36:	fb00 f808 	mul.w	r8, r0, r8
 8000e3a:	45a0      	cmp	r8, r4
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x26e>
 8000e3e:	18e4      	adds	r4, r4, r3
 8000e40:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000e44:	d229      	bcs.n	8000e9a <__udivmoddi4+0x2ba>
 8000e46:	45a0      	cmp	r8, r4
 8000e48:	d927      	bls.n	8000e9a <__udivmoddi4+0x2ba>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	441c      	add	r4, r3
 8000e4e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e52:	eba4 0408 	sub.w	r4, r4, r8
 8000e56:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5a:	454c      	cmp	r4, r9
 8000e5c:	46c6      	mov	lr, r8
 8000e5e:	464d      	mov	r5, r9
 8000e60:	d315      	bcc.n	8000e8e <__udivmoddi4+0x2ae>
 8000e62:	d012      	beq.n	8000e8a <__udivmoddi4+0x2aa>
 8000e64:	b156      	cbz	r6, 8000e7c <__udivmoddi4+0x29c>
 8000e66:	ebba 030e 	subs.w	r3, sl, lr
 8000e6a:	eb64 0405 	sbc.w	r4, r4, r5
 8000e6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000e72:	40cb      	lsrs	r3, r1
 8000e74:	431f      	orrs	r7, r3
 8000e76:	40cc      	lsrs	r4, r1
 8000e78:	6037      	str	r7, [r6, #0]
 8000e7a:	6074      	str	r4, [r6, #4]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e82:	4618      	mov	r0, r3
 8000e84:	e6f8      	b.n	8000c78 <__udivmoddi4+0x98>
 8000e86:	4690      	mov	r8, r2
 8000e88:	e6e0      	b.n	8000c4c <__udivmoddi4+0x6c>
 8000e8a:	45c2      	cmp	sl, r8
 8000e8c:	d2ea      	bcs.n	8000e64 <__udivmoddi4+0x284>
 8000e8e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e92:	eb69 0503 	sbc.w	r5, r9, r3
 8000e96:	3801      	subs	r0, #1
 8000e98:	e7e4      	b.n	8000e64 <__udivmoddi4+0x284>
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	e7d7      	b.n	8000e4e <__udivmoddi4+0x26e>
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	e791      	b.n	8000dc6 <__udivmoddi4+0x1e6>
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	e7be      	b.n	8000e24 <__udivmoddi4+0x244>
 8000ea6:	4601      	mov	r1, r0
 8000ea8:	e778      	b.n	8000d9c <__udivmoddi4+0x1bc>
 8000eaa:	3802      	subs	r0, #2
 8000eac:	443c      	add	r4, r7
 8000eae:	e745      	b.n	8000d3c <__udivmoddi4+0x15c>
 8000eb0:	4608      	mov	r0, r1
 8000eb2:	e708      	b.n	8000cc6 <__udivmoddi4+0xe6>
 8000eb4:	f1a8 0802 	sub.w	r8, r8, #2
 8000eb8:	443d      	add	r5, r7
 8000eba:	e72b      	b.n	8000d14 <__udivmoddi4+0x134>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <HAL_Init+0x40>)
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	; (8000f00 <HAL_Init+0x40>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ece:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ed0:	4a0b      	ldr	r2, [pc, #44]	; (8000f00 <HAL_Init+0x40>)
 8000ed2:	4b0b      	ldr	r3, [pc, #44]	; (8000f00 <HAL_Init+0x40>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000edc:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <HAL_Init+0x40>)
 8000ede:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <HAL_Init+0x40>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ee6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee8:	2003      	movs	r0, #3
 8000eea:	f000 f925 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f000 f808 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef4:	f002 fb18 	bl	8003528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40023c00 	.word	0x40023c00

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f93d 	bl	80011a2 <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f40:	f000 f905 	bl	800114e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000014 	.word	0x20000014
 8000f5c:	20000004 	.word	0x20000004
 8000f60:	20000000 	.word	0x20000000

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000004 	.word	0x20000004
 8000f88:	200009ac 	.word	0x200009ac

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	200009ac 	.word	0x200009ac

08000fa4 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f003 0307 	and.w	r3, r3, #7
 8000fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <NVIC_SetPriorityGrouping+0x44>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd6:	4a04      	ldr	r2, [pc, #16]	; (8000fe8 <NVIC_SetPriorityGrouping+0x44>)
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff0:	4b04      	ldr	r3, [pc, #16]	; (8001004 <NVIC_GetPriorityGrouping+0x18>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	f003 0307 	and.w	r3, r3, #7
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	4603      	mov	r3, r0
 8001010:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001012:	4909      	ldr	r1, [pc, #36]	; (8001038 <NVIC_EnableIRQ+0x30>)
 8001014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001018:	095b      	lsrs	r3, r3, #5
 800101a:	79fa      	ldrb	r2, [r7, #7]
 800101c:	f002 021f 	and.w	r2, r2, #31
 8001020:	2001      	movs	r0, #1
 8001022:	fa00 f202 	lsl.w	r2, r0, r2
 8001026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800102a:	bf00      	nop
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000e100 	.word	0xe000e100

0800103c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	6039      	str	r1, [r7, #0]
 8001046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	2b00      	cmp	r3, #0
 800104e:	da0b      	bge.n	8001068 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001050:	490d      	ldr	r1, [pc, #52]	; (8001088 <NVIC_SetPriority+0x4c>)
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	f003 030f 	and.w	r3, r3, #15
 8001058:	3b04      	subs	r3, #4
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	b2d2      	uxtb	r2, r2
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001066:	e009      	b.n	800107c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001068:	4908      	ldr	r1, [pc, #32]	; (800108c <NVIC_SetPriority+0x50>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	683a      	ldr	r2, [r7, #0]
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	0112      	lsls	r2, r2, #4
 8001074:	b2d2      	uxtb	r2, r2
 8001076:	440b      	add	r3, r1
 8001078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00
 800108c:	e000e100 	.word	0xe000e100

08001090 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001090:	b480      	push	{r7}
 8001092:	b089      	sub	sp, #36	; 0x24
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 0307 	and.w	r3, r3, #7
 80010a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a4:	69fb      	ldr	r3, [r7, #28]
 80010a6:	f1c3 0307 	rsb	r3, r3, #7
 80010aa:	2b04      	cmp	r3, #4
 80010ac:	bf28      	it	cs
 80010ae:	2304      	movcs	r3, #4
 80010b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b2:	69fb      	ldr	r3, [r7, #28]
 80010b4:	3304      	adds	r3, #4
 80010b6:	2b06      	cmp	r3, #6
 80010b8:	d902      	bls.n	80010c0 <NVIC_EncodePriority+0x30>
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	3b03      	subs	r3, #3
 80010be:	e000      	b.n	80010c2 <NVIC_EncodePriority+0x32>
 80010c0:	2300      	movs	r3, #0
 80010c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	2201      	movs	r2, #1
 80010c6:	69bb      	ldr	r3, [r7, #24]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	1e5a      	subs	r2, r3, #1
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	401a      	ands	r2, r3
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010d6:	2101      	movs	r1, #1
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	fa01 f303 	lsl.w	r3, r1, r3
 80010de:	1e59      	subs	r1, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e4:	4313      	orrs	r3, r2
         );
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3724      	adds	r7, #36	; 0x24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f0:	4770      	bx	lr
	...

080010f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3b01      	subs	r3, #1
 8001100:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001104:	d301      	bcc.n	800110a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001106:	2301      	movs	r3, #1
 8001108:	e00f      	b.n	800112a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800110a:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <SysTick_Config+0x40>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3b01      	subs	r3, #1
 8001110:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001112:	210f      	movs	r1, #15
 8001114:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001118:	f7ff ff90 	bl	800103c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800111c:	4b05      	ldr	r3, [pc, #20]	; (8001134 <SysTick_Config+0x40>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001122:	4b04      	ldr	r3, [pc, #16]	; (8001134 <SysTick_Config+0x40>)
 8001124:	2207      	movs	r2, #7
 8001126:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	e000e010 	.word	0xe000e010

08001138 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b082      	sub	sp, #8
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f7ff ff2f 	bl	8000fa4 <NVIC_SetPriorityGrouping>
}
 8001146:	bf00      	nop
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800114e:	b580      	push	{r7, lr}
 8001150:	b086      	sub	sp, #24
 8001152:	af00      	add	r7, sp, #0
 8001154:	4603      	mov	r3, r0
 8001156:	60b9      	str	r1, [r7, #8]
 8001158:	607a      	str	r2, [r7, #4]
 800115a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001160:	f7ff ff44 	bl	8000fec <NVIC_GetPriorityGrouping>
 8001164:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	68b9      	ldr	r1, [r7, #8]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff ff90 	bl	8001090 <NVIC_EncodePriority>
 8001170:	4602      	mov	r2, r0
 8001172:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f7ff ff5f 	bl	800103c <NVIC_SetPriority>
}
 800117e:	bf00      	nop
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001190:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff ff37 	bl	8001008 <NVIC_EnableIRQ>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff ffa2 	bl	80010f4 <SysTick_Config>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
	...

080011bc <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2b04      	cmp	r3, #4
 80011c8:	d106      	bne.n	80011d8 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80011ca:	4a09      	ldr	r2, [pc, #36]	; (80011f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80011d6:	e005      	b.n	80011e4 <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80011d8:	4a05      	ldr	r2, [pc, #20]	; (80011f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f023 0304 	bic.w	r3, r3, #4
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 80011f8:	f000 f802 	bl	8001200 <HAL_SYSTICK_Callback>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8001204:	bf00      	nop
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b086      	sub	sp, #24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800121c:	f7ff feb6 	bl	8000f8c <HAL_GetTick>
 8001220:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d101      	bne.n	800122c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e099      	b.n	8001360 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2200      	movs	r2, #0
 8001230:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2202      	movs	r2, #2
 8001238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	6812      	ldr	r2, [r2, #0]
 8001246:	f022 0201 	bic.w	r2, r2, #1
 800124a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800124c:	e00f      	b.n	800126e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800124e:	f7ff fe9d 	bl	8000f8c <HAL_GetTick>
 8001252:	4602      	mov	r2, r0
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b05      	cmp	r3, #5
 800125a:	d908      	bls.n	800126e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2220      	movs	r2, #32
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2203      	movs	r2, #3
 8001266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e078      	b.n	8001360 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1e8      	bne.n	800124e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001284:	697a      	ldr	r2, [r7, #20]
 8001286:	4b38      	ldr	r3, [pc, #224]	; (8001368 <HAL_DMA_Init+0x158>)
 8001288:	4013      	ands	r3, r2
 800128a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800129a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	6a1b      	ldr	r3, [r3, #32]
 80012b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4313      	orrs	r3, r2
 80012be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c4:	2b04      	cmp	r3, #4
 80012c6:	d107      	bne.n	80012d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d0:	4313      	orrs	r3, r2
 80012d2:	697a      	ldr	r2, [r7, #20]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	695b      	ldr	r3, [r3, #20]
 80012e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	f023 0307 	bic.w	r3, r3, #7
 80012ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d117      	bne.n	8001332 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	4313      	orrs	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	2b00      	cmp	r3, #0
 8001312:	d00e      	beq.n	8001332 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f000 fa77 	bl	8001808 <DMA_CheckFifoParam>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d008      	beq.n	8001332 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2240      	movs	r2, #64	; 0x40
 8001324:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800132e:	2301      	movs	r3, #1
 8001330:	e016      	b.n	8001360 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 fa2e 	bl	800179c <DMA_CalcBaseAndBitshift>
 8001340:	4603      	mov	r3, r0
 8001342:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001348:	223f      	movs	r2, #63	; 0x3f
 800134a:	409a      	lsls	r2, r3
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2200      	movs	r2, #0
 8001354:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2201      	movs	r2, #1
 800135a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3718      	adds	r7, #24
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}
 8001368:	f010803f 	.word	0xf010803f

0800136c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b086      	sub	sp, #24
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800137a:	2300      	movs	r3, #0
 800137c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001382:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800138a:	2b01      	cmp	r3, #1
 800138c:	d101      	bne.n	8001392 <HAL_DMA_Start_IT+0x26>
 800138e:	2302      	movs	r3, #2
 8001390:	e048      	b.n	8001424 <HAL_DMA_Start_IT+0xb8>
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2201      	movs	r2, #1
 8001396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d137      	bne.n	8001416 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2202      	movs	r2, #2
 80013aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	2200      	movs	r2, #0
 80013b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	68b9      	ldr	r1, [r7, #8]
 80013ba:	68f8      	ldr	r0, [r7, #12]
 80013bc:	f000 f9c0 	bl	8001740 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013c4:	223f      	movs	r2, #63	; 0x3f
 80013c6:	409a      	lsls	r2, r3
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	68fa      	ldr	r2, [r7, #12]
 80013d2:	6812      	ldr	r2, [r2, #0]
 80013d4:	6812      	ldr	r2, [r2, #0]
 80013d6:	f042 0216 	orr.w	r2, r2, #22
 80013da:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	6812      	ldr	r2, [r2, #0]
 80013e4:	6952      	ldr	r2, [r2, #20]
 80013e6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013ea:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d007      	beq.n	8001404 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	6812      	ldr	r2, [r2, #0]
 80013fe:	f042 0208 	orr.w	r2, r2, #8
 8001402:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	f042 0201 	orr.w	r2, r2, #1
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e005      	b.n	8001422 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800141e:	2302      	movs	r3, #2
 8001420:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001422:	7dfb      	ldrb	r3, [r7, #23]
}
 8001424:	4618      	mov	r0, r3
 8001426:	3718      	adds	r7, #24
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}

0800142c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001434:	2300      	movs	r3, #0
 8001436:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001438:	4b92      	ldr	r3, [pc, #584]	; (8001684 <HAL_DMA_IRQHandler+0x258>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a92      	ldr	r2, [pc, #584]	; (8001688 <HAL_DMA_IRQHandler+0x25c>)
 800143e:	fba2 2303 	umull	r2, r3, r2, r3
 8001442:	0a9b      	lsrs	r3, r3, #10
 8001444:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001456:	2208      	movs	r2, #8
 8001458:	409a      	lsls	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	4013      	ands	r3, r2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d01a      	beq.n	8001498 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	6812      	ldr	r2, [r2, #0]
 800147a:	f022 0204 	bic.w	r2, r2, #4
 800147e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001484:	2208      	movs	r2, #8
 8001486:	409a      	lsls	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001490:	f043 0201 	orr.w	r2, r3, #1
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800149c:	2201      	movs	r2, #1
 800149e:	409a      	lsls	r2, r3
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	4013      	ands	r3, r2
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d012      	beq.n	80014ce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	695b      	ldr	r3, [r3, #20]
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d00b      	beq.n	80014ce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ba:	2201      	movs	r2, #1
 80014bc:	409a      	lsls	r2, r3
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014c6:	f043 0202 	orr.w	r2, r3, #2
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d2:	2204      	movs	r2, #4
 80014d4:	409a      	lsls	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d012      	beq.n	8001504 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0302 	and.w	r3, r3, #2
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d00b      	beq.n	8001504 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f0:	2204      	movs	r2, #4
 80014f2:	409a      	lsls	r2, r3
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fc:	f043 0204 	orr.w	r2, r3, #4
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001508:	2210      	movs	r2, #16
 800150a:	409a      	lsls	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d043      	beq.n	800159c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d03c      	beq.n	800159c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	2210      	movs	r2, #16
 8001528:	409a      	lsls	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001538:	2b00      	cmp	r3, #0
 800153a:	d018      	beq.n	800156e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d108      	bne.n	800155c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	2b00      	cmp	r3, #0
 8001550:	d024      	beq.n	800159c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	4798      	blx	r3
 800155a:	e01f      	b.n	800159c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001560:	2b00      	cmp	r3, #0
 8001562:	d01b      	beq.n	800159c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	4798      	blx	r3
 800156c:	e016      	b.n	800159c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d107      	bne.n	800158c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	6812      	ldr	r2, [r2, #0]
 8001586:	f022 0208 	bic.w	r2, r2, #8
 800158a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015a0:	2220      	movs	r2, #32
 80015a2:	409a      	lsls	r2, r3
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4013      	ands	r3, r2
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 808e 	beq.w	80016ca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0310 	and.w	r3, r3, #16
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 8086 	beq.w	80016ca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c2:	2220      	movs	r2, #32
 80015c4:	409a      	lsls	r2, r3
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	2b05      	cmp	r3, #5
 80015d4:	d136      	bne.n	8001644 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	6812      	ldr	r2, [r2, #0]
 80015e0:	f022 0216 	bic.w	r2, r2, #22
 80015e4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	6812      	ldr	r2, [r2, #0]
 80015ee:	6952      	ldr	r2, [r2, #20]
 80015f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015f4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d103      	bne.n	8001606 <HAL_DMA_IRQHandler+0x1da>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001602:	2b00      	cmp	r3, #0
 8001604:	d007      	beq.n	8001616 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	6812      	ldr	r2, [r2, #0]
 800160e:	6812      	ldr	r2, [r2, #0]
 8001610:	f022 0208 	bic.w	r2, r2, #8
 8001614:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800161a:	223f      	movs	r2, #63	; 0x3f
 800161c:	409a      	lsls	r2, r3
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2201      	movs	r2, #1
 800162e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001636:	2b00      	cmp	r3, #0
 8001638:	d07d      	beq.n	8001736 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800163e:	6878      	ldr	r0, [r7, #4]
 8001640:	4798      	blx	r3
        }
        return;
 8001642:	e078      	b.n	8001736 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01c      	beq.n	800168c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d108      	bne.n	8001672 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001664:	2b00      	cmp	r3, #0
 8001666:	d030      	beq.n	80016ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	4798      	blx	r3
 8001670:	e02b      	b.n	80016ca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001676:	2b00      	cmp	r3, #0
 8001678:	d027      	beq.n	80016ca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	4798      	blx	r3
 8001682:	e022      	b.n	80016ca <HAL_DMA_IRQHandler+0x29e>
 8001684:	20000014 	.word	0x20000014
 8001688:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d10f      	bne.n	80016ba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	6812      	ldr	r2, [r2, #0]
 80016a4:	f022 0210 	bic.w	r2, r2, #16
 80016a8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d032      	beq.n	8001738 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d022      	beq.n	8001724 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2205      	movs	r2, #5
 80016e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6812      	ldr	r2, [r2, #0]
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	f022 0201 	bic.w	r2, r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016f6:	68bb      	ldr	r3, [r7, #8]
 80016f8:	3301      	adds	r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	697a      	ldr	r2, [r7, #20]
 80016fe:	4293      	cmp	r3, r2
 8001700:	d807      	bhi.n	8001712 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f003 0301 	and.w	r3, r3, #1
 800170c:	2b00      	cmp	r3, #0
 800170e:	d1f2      	bne.n	80016f6 <HAL_DMA_IRQHandler+0x2ca>
 8001710:	e000      	b.n	8001714 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001712:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2201      	movs	r2, #1
 8001720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	4798      	blx	r3
 8001734:	e000      	b.n	8001738 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001736:	bf00      	nop
    }
  }
}
 8001738:	3718      	adds	r7, #24
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop

08001740 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	6812      	ldr	r2, [r2, #0]
 8001758:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800175c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	683a      	ldr	r2, [r7, #0]
 8001764:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	2b40      	cmp	r3, #64	; 0x40
 800176c:	d108      	bne.n	8001780 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800177e:	e007      	b.n	8001790 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	687a      	ldr	r2, [r7, #4]
 800178e:	60da      	str	r2, [r3, #12]
}
 8001790:	bf00      	nop
 8001792:	3714      	adds	r7, #20
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800179c:	b480      	push	{r7}
 800179e:	b085      	sub	sp, #20
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	3b10      	subs	r3, #16
 80017ac:	4a14      	ldr	r2, [pc, #80]	; (8001800 <DMA_CalcBaseAndBitshift+0x64>)
 80017ae:	fba2 2303 	umull	r2, r3, r2, r3
 80017b2:	091b      	lsrs	r3, r3, #4
 80017b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017b6:	4a13      	ldr	r2, [pc, #76]	; (8001804 <DMA_CalcBaseAndBitshift+0x68>)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	4413      	add	r3, r2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d909      	bls.n	80017de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017d2:	f023 0303 	bic.w	r3, r3, #3
 80017d6:	1d1a      	adds	r2, r3, #4
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	659a      	str	r2, [r3, #88]	; 0x58
 80017dc:	e007      	b.n	80017ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017e6:	f023 0303 	bic.w	r3, r3, #3
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	aaaaaaab 	.word	0xaaaaaaab
 8001804:	08006cd4 	.word	0x08006cd4

08001808 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001818:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d11f      	bne.n	8001862 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d855      	bhi.n	80018d4 <DMA_CheckFifoParam+0xcc>
 8001828:	a201      	add	r2, pc, #4	; (adr r2, 8001830 <DMA_CheckFifoParam+0x28>)
 800182a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800182e:	bf00      	nop
 8001830:	08001841 	.word	0x08001841
 8001834:	08001853 	.word	0x08001853
 8001838:	08001841 	.word	0x08001841
 800183c:	080018d5 	.word	0x080018d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001844:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001848:	2b00      	cmp	r3, #0
 800184a:	d045      	beq.n	80018d8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001850:	e042      	b.n	80018d8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001856:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800185a:	d13f      	bne.n	80018dc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001860:	e03c      	b.n	80018dc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	699b      	ldr	r3, [r3, #24]
 8001866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800186a:	d121      	bne.n	80018b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	2b03      	cmp	r3, #3
 8001870:	d836      	bhi.n	80018e0 <DMA_CheckFifoParam+0xd8>
 8001872:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <DMA_CheckFifoParam+0x70>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	08001889 	.word	0x08001889
 800187c:	0800188f 	.word	0x0800188f
 8001880:	08001889 	.word	0x08001889
 8001884:	080018a1 	.word	0x080018a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
      break;
 800188c:	e02f      	b.n	80018ee <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d024      	beq.n	80018e4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800189e:	e021      	b.n	80018e4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018a8:	d11e      	bne.n	80018e8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018ae:	e01b      	b.n	80018e8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d902      	bls.n	80018bc <DMA_CheckFifoParam+0xb4>
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d003      	beq.n	80018c2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018ba:	e018      	b.n	80018ee <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	73fb      	strb	r3, [r7, #15]
      break;
 80018c0:	e015      	b.n	80018ee <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00e      	beq.n	80018ec <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
      break;
 80018d2:	e00b      	b.n	80018ec <DMA_CheckFifoParam+0xe4>
      break;
 80018d4:	bf00      	nop
 80018d6:	e00a      	b.n	80018ee <DMA_CheckFifoParam+0xe6>
      break;
 80018d8:	bf00      	nop
 80018da:	e008      	b.n	80018ee <DMA_CheckFifoParam+0xe6>
      break;
 80018dc:	bf00      	nop
 80018de:	e006      	b.n	80018ee <DMA_CheckFifoParam+0xe6>
      break;
 80018e0:	bf00      	nop
 80018e2:	e004      	b.n	80018ee <DMA_CheckFifoParam+0xe6>
      break;
 80018e4:	bf00      	nop
 80018e6:	e002      	b.n	80018ee <DMA_CheckFifoParam+0xe6>
      break;   
 80018e8:	bf00      	nop
 80018ea:	e000      	b.n	80018ee <DMA_CheckFifoParam+0xe6>
      break;
 80018ec:	bf00      	nop
    }
  } 
  
  return status; 
 80018ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3714      	adds	r7, #20
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b089      	sub	sp, #36	; 0x24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	e159      	b.n	8001bcc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001918:	2201      	movs	r2, #1
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	4013      	ands	r3, r2
 800192a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	429a      	cmp	r2, r3
 8001932:	f040 8148 	bne.w	8001bc6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b02      	cmp	r3, #2
 800193c:	d003      	beq.n	8001946 <HAL_GPIO_Init+0x4a>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	2b12      	cmp	r3, #18
 8001944:	d123      	bne.n	800198e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	08da      	lsrs	r2, r3, #3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	3208      	adds	r2, #8
 800194e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	220f      	movs	r2, #15
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43db      	mvns	r3, r3
 8001964:	69ba      	ldr	r2, [r7, #24]
 8001966:	4013      	ands	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	691a      	ldr	r2, [r3, #16]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	08da      	lsrs	r2, r3, #3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3208      	adds	r2, #8
 8001988:	69b9      	ldr	r1, [r7, #24]
 800198a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	2203      	movs	r2, #3
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	43db      	mvns	r3, r3
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	4013      	ands	r3, r2
 80019a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	f003 0203 	and.w	r2, r3, #3
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d00b      	beq.n	80019e2 <HAL_GPIO_Init+0xe6>
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d007      	beq.n	80019e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019d2:	683b      	ldr	r3, [r7, #0]
 80019d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80019d6:	2b11      	cmp	r3, #17
 80019d8:	d003      	beq.n	80019e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2b12      	cmp	r3, #18
 80019e0:	d130      	bne.n	8001a44 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a18:	2201      	movs	r2, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 0201 	and.w	r2, r3, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68db      	ldr	r3, [r3, #12]
 8001a48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	2203      	movs	r2, #3
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	fa02 f303 	lsl.w	r3, r2, r3
 8001a68:	69ba      	ldr	r2, [r7, #24]
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f000 80a2 	beq.w	8001bc6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
 8001a86:	4a56      	ldr	r2, [pc, #344]	; (8001be0 <HAL_GPIO_Init+0x2e4>)
 8001a88:	4b55      	ldr	r3, [pc, #340]	; (8001be0 <HAL_GPIO_Init+0x2e4>)
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a90:	6453      	str	r3, [r2, #68]	; 0x44
 8001a92:	4b53      	ldr	r3, [pc, #332]	; (8001be0 <HAL_GPIO_Init+0x2e4>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a9a:	60fb      	str	r3, [r7, #12]
 8001a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a9e:	4a51      	ldr	r2, [pc, #324]	; (8001be4 <HAL_GPIO_Init+0x2e8>)
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	089b      	lsrs	r3, r3, #2
 8001aa4:	3302      	adds	r3, #2
 8001aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f003 0303 	and.w	r3, r3, #3
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	220f      	movs	r2, #15
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a48      	ldr	r2, [pc, #288]	; (8001be8 <HAL_GPIO_Init+0x2ec>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d019      	beq.n	8001afe <HAL_GPIO_Init+0x202>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a47      	ldr	r2, [pc, #284]	; (8001bec <HAL_GPIO_Init+0x2f0>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d013      	beq.n	8001afa <HAL_GPIO_Init+0x1fe>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a46      	ldr	r2, [pc, #280]	; (8001bf0 <HAL_GPIO_Init+0x2f4>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00d      	beq.n	8001af6 <HAL_GPIO_Init+0x1fa>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a45      	ldr	r2, [pc, #276]	; (8001bf4 <HAL_GPIO_Init+0x2f8>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d007      	beq.n	8001af2 <HAL_GPIO_Init+0x1f6>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a44      	ldr	r2, [pc, #272]	; (8001bf8 <HAL_GPIO_Init+0x2fc>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d101      	bne.n	8001aee <HAL_GPIO_Init+0x1f2>
 8001aea:	2304      	movs	r3, #4
 8001aec:	e008      	b.n	8001b00 <HAL_GPIO_Init+0x204>
 8001aee:	2307      	movs	r3, #7
 8001af0:	e006      	b.n	8001b00 <HAL_GPIO_Init+0x204>
 8001af2:	2303      	movs	r3, #3
 8001af4:	e004      	b.n	8001b00 <HAL_GPIO_Init+0x204>
 8001af6:	2302      	movs	r3, #2
 8001af8:	e002      	b.n	8001b00 <HAL_GPIO_Init+0x204>
 8001afa:	2301      	movs	r3, #1
 8001afc:	e000      	b.n	8001b00 <HAL_GPIO_Init+0x204>
 8001afe:	2300      	movs	r3, #0
 8001b00:	69fa      	ldr	r2, [r7, #28]
 8001b02:	f002 0203 	and.w	r2, r2, #3
 8001b06:	0092      	lsls	r2, r2, #2
 8001b08:	4093      	lsls	r3, r2
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b10:	4934      	ldr	r1, [pc, #208]	; (8001be4 <HAL_GPIO_Init+0x2e8>)
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3302      	adds	r3, #2
 8001b18:	69ba      	ldr	r2, [r7, #24]
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b1e:	4b37      	ldr	r3, [pc, #220]	; (8001bfc <HAL_GPIO_Init+0x300>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b42:	4a2e      	ldr	r2, [pc, #184]	; (8001bfc <HAL_GPIO_Init+0x300>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b48:	4b2c      	ldr	r3, [pc, #176]	; (8001bfc <HAL_GPIO_Init+0x300>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b6c:	4a23      	ldr	r2, [pc, #140]	; (8001bfc <HAL_GPIO_Init+0x300>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b72:	4b22      	ldr	r3, [pc, #136]	; (8001bfc <HAL_GPIO_Init+0x300>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d003      	beq.n	8001b96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b8e:	69ba      	ldr	r2, [r7, #24]
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b96:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_GPIO_Init+0x300>)
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b9c:	4b17      	ldr	r3, [pc, #92]	; (8001bfc <HAL_GPIO_Init+0x300>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	69ba      	ldr	r2, [r7, #24]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bc0:	4a0e      	ldr	r2, [pc, #56]	; (8001bfc <HAL_GPIO_Init+0x300>)
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	3301      	adds	r3, #1
 8001bca:	61fb      	str	r3, [r7, #28]
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	2b0f      	cmp	r3, #15
 8001bd0:	f67f aea2 	bls.w	8001918 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bd4:	bf00      	nop
 8001bd6:	3724      	adds	r7, #36	; 0x24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40013800 	.word	0x40013800
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40020400 	.word	0x40020400
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	40020c00 	.word	0x40020c00
 8001bf8:	40021000 	.word	0x40021000
 8001bfc:	40013c00 	.word	0x40013c00

08001c00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	807b      	strh	r3, [r7, #2]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c10:	787b      	ldrb	r3, [r7, #1]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c16:	887a      	ldrh	r2, [r7, #2]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c1c:	e003      	b.n	8001c26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c1e:	887b      	ldrh	r3, [r7, #2]
 8001c20:	041a      	lsls	r2, r3, #16
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	619a      	str	r2, [r3, #24]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e22d      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d075      	beq.n	8001d3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c52:	4ba3      	ldr	r3, [pc, #652]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d00c      	beq.n	8001c78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c5e:	4ba0      	ldr	r3, [pc, #640]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001c60:	689b      	ldr	r3, [r3, #8]
 8001c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d112      	bne.n	8001c90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c6a:	4b9d      	ldr	r3, [pc, #628]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c76:	d10b      	bne.n	8001c90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	4b99      	ldr	r3, [pc, #612]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d05b      	beq.n	8001d3c <HAL_RCC_OscConfig+0x108>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d157      	bne.n	8001d3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e208      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c98:	d106      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x74>
 8001c9a:	4a91      	ldr	r2, [pc, #580]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	4b90      	ldr	r3, [pc, #576]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	e01d      	b.n	8001ce4 <HAL_RCC_OscConfig+0xb0>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb0:	d10c      	bne.n	8001ccc <HAL_RCC_OscConfig+0x98>
 8001cb2:	4a8b      	ldr	r2, [pc, #556]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	4b8a      	ldr	r3, [pc, #552]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cbc:	6013      	str	r3, [r2, #0]
 8001cbe:	4a88      	ldr	r2, [pc, #544]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	4b87      	ldr	r3, [pc, #540]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	e00b      	b.n	8001ce4 <HAL_RCC_OscConfig+0xb0>
 8001ccc:	4a84      	ldr	r2, [pc, #528]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001cce:	4b84      	ldr	r3, [pc, #528]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cd6:	6013      	str	r3, [r2, #0]
 8001cd8:	4a81      	ldr	r2, [pc, #516]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001cda:	4b81      	ldr	r3, [pc, #516]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ce2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d013      	beq.n	8001d14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cec:	f7ff f94e 	bl	8000f8c <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7ff f94a 	bl	8000f8c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	; 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e1cd      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d06:	4b76      	ldr	r3, [pc, #472]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0xc0>
 8001d12:	e014      	b.n	8001d3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff f93a 	bl	8000f8c <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f936 	bl	8000f8c <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e1b9      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d2e:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0xe8>
 8001d3a:	e000      	b.n	8001d3e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d063      	beq.n	8001e12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d4a:	4b65      	ldr	r3, [pc, #404]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	f003 030c 	and.w	r3, r3, #12
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d00b      	beq.n	8001d6e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d56:	4b62      	ldr	r3, [pc, #392]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d11c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d62:	4b5f      	ldr	r3, [pc, #380]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d116      	bne.n	8001d9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d6e:	4b5c      	ldr	r3, [pc, #368]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d005      	beq.n	8001d86 <HAL_RCC_OscConfig+0x152>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d001      	beq.n	8001d86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e18d      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d86:	4956      	ldr	r1, [pc, #344]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001d88:	4b55      	ldr	r3, [pc, #340]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	691b      	ldr	r3, [r3, #16]
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4313      	orrs	r3, r2
 8001d98:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9a:	e03a      	b.n	8001e12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d020      	beq.n	8001de6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da4:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001da6:	2201      	movs	r2, #1
 8001da8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001daa:	f7ff f8ef 	bl	8000f8c <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001db2:	f7ff f8eb 	bl	8000f8c <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e16e      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dc4:	4b46      	ldr	r3, [pc, #280]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d0f0      	beq.n	8001db2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd0:	4943      	ldr	r1, [pc, #268]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001dd2:	4b43      	ldr	r3, [pc, #268]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
 8001de4:	e015      	b.n	8001e12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de6:	4b3f      	ldr	r3, [pc, #252]	; (8001ee4 <HAL_RCC_OscConfig+0x2b0>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dec:	f7ff f8ce 	bl	8000f8c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001df4:	f7ff f8ca 	bl	8000f8c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e14d      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e06:	4b36      	ldr	r3, [pc, #216]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d030      	beq.n	8001e80 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d016      	beq.n	8001e54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e26:	4b30      	ldr	r3, [pc, #192]	; (8001ee8 <HAL_RCC_OscConfig+0x2b4>)
 8001e28:	2201      	movs	r2, #1
 8001e2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e2c:	f7ff f8ae 	bl	8000f8c <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e34:	f7ff f8aa 	bl	8000f8c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e12d      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e46:	4b26      	ldr	r3, [pc, #152]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001e48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0f0      	beq.n	8001e34 <HAL_RCC_OscConfig+0x200>
 8001e52:	e015      	b.n	8001e80 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e54:	4b24      	ldr	r3, [pc, #144]	; (8001ee8 <HAL_RCC_OscConfig+0x2b4>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e5a:	f7ff f897 	bl	8000f8c <HAL_GetTick>
 8001e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e60:	e008      	b.n	8001e74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e62:	f7ff f893 	bl	8000f8c <HAL_GetTick>
 8001e66:	4602      	mov	r2, r0
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	1ad3      	subs	r3, r2, r3
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	d901      	bls.n	8001e74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e116      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001e76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d1f0      	bne.n	8001e62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0304 	and.w	r3, r3, #4
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 80a0 	beq.w	8001fce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e92:	4b13      	ldr	r3, [pc, #76]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d10f      	bne.n	8001ebe <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4a0f      	ldr	r2, [pc, #60]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eac:	6413      	str	r3, [r2, #64]	; 0x40
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <HAL_RCC_OscConfig+0x2ac>)
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <HAL_RCC_OscConfig+0x2b8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d121      	bne.n	8001f0e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eca:	4a08      	ldr	r2, [pc, #32]	; (8001eec <HAL_RCC_OscConfig+0x2b8>)
 8001ecc:	4b07      	ldr	r3, [pc, #28]	; (8001eec <HAL_RCC_OscConfig+0x2b8>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ed6:	f7ff f859 	bl	8000f8c <HAL_GetTick>
 8001eda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001edc:	e011      	b.n	8001f02 <HAL_RCC_OscConfig+0x2ce>
 8001ede:	bf00      	nop
 8001ee0:	40023800 	.word	0x40023800
 8001ee4:	42470000 	.word	0x42470000
 8001ee8:	42470e80 	.word	0x42470e80
 8001eec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef0:	f7ff f84c 	bl	8000f8c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e0cf      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f02:	4b6a      	ldr	r3, [pc, #424]	; (80020ac <HAL_RCC_OscConfig+0x478>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d106      	bne.n	8001f24 <HAL_RCC_OscConfig+0x2f0>
 8001f16:	4a66      	ldr	r2, [pc, #408]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001f18:	4b65      	ldr	r3, [pc, #404]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6713      	str	r3, [r2, #112]	; 0x70
 8001f22:	e01c      	b.n	8001f5e <HAL_RCC_OscConfig+0x32a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	2b05      	cmp	r3, #5
 8001f2a:	d10c      	bne.n	8001f46 <HAL_RCC_OscConfig+0x312>
 8001f2c:	4a60      	ldr	r2, [pc, #384]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001f2e:	4b60      	ldr	r3, [pc, #384]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001f30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f32:	f043 0304 	orr.w	r3, r3, #4
 8001f36:	6713      	str	r3, [r2, #112]	; 0x70
 8001f38:	4a5d      	ldr	r2, [pc, #372]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001f3a:	4b5d      	ldr	r3, [pc, #372]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001f3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	6713      	str	r3, [r2, #112]	; 0x70
 8001f44:	e00b      	b.n	8001f5e <HAL_RCC_OscConfig+0x32a>
 8001f46:	4a5a      	ldr	r2, [pc, #360]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001f48:	4b59      	ldr	r3, [pc, #356]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4c:	f023 0301 	bic.w	r3, r3, #1
 8001f50:	6713      	str	r3, [r2, #112]	; 0x70
 8001f52:	4a57      	ldr	r2, [pc, #348]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001f54:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	f023 0304 	bic.w	r3, r3, #4
 8001f5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d015      	beq.n	8001f92 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f66:	f7ff f811 	bl	8000f8c <HAL_GetTick>
 8001f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f6c:	e00a      	b.n	8001f84 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f6e:	f7ff f80d 	bl	8000f8c <HAL_GetTick>
 8001f72:	4602      	mov	r2, r0
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e08e      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f84:	4b4a      	ldr	r3, [pc, #296]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0ee      	beq.n	8001f6e <HAL_RCC_OscConfig+0x33a>
 8001f90:	e014      	b.n	8001fbc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f92:	f7fe fffb 	bl	8000f8c <HAL_GetTick>
 8001f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f98:	e00a      	b.n	8001fb0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f9a:	f7fe fff7 	bl	8000f8c <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e078      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fb0:	4b3f      	ldr	r3, [pc, #252]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1ee      	bne.n	8001f9a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fbc:	7dfb      	ldrb	r3, [r7, #23]
 8001fbe:	2b01      	cmp	r3, #1
 8001fc0:	d105      	bne.n	8001fce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fc2:	4a3b      	ldr	r2, [pc, #236]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001fc4:	4b3a      	ldr	r3, [pc, #232]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	699b      	ldr	r3, [r3, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d064      	beq.n	80020a0 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fd6:	4b36      	ldr	r3, [pc, #216]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f003 030c 	and.w	r3, r3, #12
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d05c      	beq.n	800209c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d141      	bne.n	800206e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fea:	4b32      	ldr	r3, [pc, #200]	; (80020b4 <HAL_RCC_OscConfig+0x480>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7fe ffcc 	bl	8000f8c <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7fe ffc8 	bl	8000f8c <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e04b      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200a:	4b29      	ldr	r3, [pc, #164]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d1f0      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002016:	4926      	ldr	r1, [pc, #152]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69da      	ldr	r2, [r3, #28]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	431a      	orrs	r2, r3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	019b      	lsls	r3, r3, #6
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	085b      	lsrs	r3, r3, #1
 8002030:	3b01      	subs	r3, #1
 8002032:	041b      	lsls	r3, r3, #16
 8002034:	431a      	orrs	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	061b      	lsls	r3, r3, #24
 800203c:	4313      	orrs	r3, r2
 800203e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002040:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <HAL_RCC_OscConfig+0x480>)
 8002042:	2201      	movs	r2, #1
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7fe ffa1 	bl	8000f8c <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204e:	f7fe ff9d 	bl	8000f8c <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e020      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002060:	4b13      	ldr	r3, [pc, #76]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x41a>
 800206c:	e018      	b.n	80020a0 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <HAL_RCC_OscConfig+0x480>)
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002074:	f7fe ff8a 	bl	8000f8c <HAL_GetTick>
 8002078:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800207a:	e008      	b.n	800208e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800207c:	f7fe ff86 	bl	8000f8c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b02      	cmp	r3, #2
 8002088:	d901      	bls.n	800208e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800208a:	2303      	movs	r3, #3
 800208c:	e009      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800208e:	4b08      	ldr	r3, [pc, #32]	; (80020b0 <HAL_RCC_OscConfig+0x47c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d1f0      	bne.n	800207c <HAL_RCC_OscConfig+0x448>
 800209a:	e001      	b.n	80020a0 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e000      	b.n	80020a2 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3718      	adds	r7, #24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	40007000 	.word	0x40007000
 80020b0:	40023800 	.word	0x40023800
 80020b4:	42470060 	.word	0x42470060

080020b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e0ca      	b.n	8002262 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b67      	ldr	r3, [pc, #412]	; (800226c <HAL_RCC_ClockConfig+0x1b4>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 020f 	and.w	r2, r3, #15
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d20c      	bcs.n	80020f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b64      	ldr	r3, [pc, #400]	; (800226c <HAL_RCC_ClockConfig+0x1b4>)
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	b2d2      	uxtb	r2, r2
 80020e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e2:	4b62      	ldr	r3, [pc, #392]	; (800226c <HAL_RCC_ClockConfig+0x1b4>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 020f 	and.w	r2, r3, #15
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e0b6      	b.n	8002262 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0302 	and.w	r3, r3, #2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d020      	beq.n	8002142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0304 	and.w	r3, r3, #4
 8002108:	2b00      	cmp	r3, #0
 800210a:	d005      	beq.n	8002118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800210c:	4a58      	ldr	r2, [pc, #352]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 800210e:	4b58      	ldr	r3, [pc, #352]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	689b      	ldr	r3, [r3, #8]
 8002112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0308 	and.w	r3, r3, #8
 8002120:	2b00      	cmp	r3, #0
 8002122:	d005      	beq.n	8002130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002124:	4a52      	ldr	r2, [pc, #328]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 8002126:	4b52      	ldr	r3, [pc, #328]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800212e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002130:	494f      	ldr	r1, [pc, #316]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 8002132:	4b4f      	ldr	r3, [pc, #316]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	4313      	orrs	r3, r2
 8002140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f003 0301 	and.w	r3, r3, #1
 800214a:	2b00      	cmp	r3, #0
 800214c:	d044      	beq.n	80021d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d107      	bne.n	8002166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002156:	4b46      	ldr	r3, [pc, #280]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d119      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e07d      	b.n	8002262 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d003      	beq.n	8002176 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002172:	2b03      	cmp	r3, #3
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002176:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d109      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e06d      	b.n	8002262 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002186:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d101      	bne.n	8002196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e065      	b.n	8002262 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002196:	4936      	ldr	r1, [pc, #216]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 8002198:	4b35      	ldr	r3, [pc, #212]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f023 0203 	bic.w	r2, r3, #3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021a8:	f7fe fef0 	bl	8000f8c <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ae:	e00a      	b.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b0:	f7fe feec 	bl	8000f8c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e04d      	b.n	8002262 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	4b2a      	ldr	r3, [pc, #168]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 020c 	and.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d1eb      	bne.n	80021b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021d8:	4b24      	ldr	r3, [pc, #144]	; (800226c <HAL_RCC_ClockConfig+0x1b4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 020f 	and.w	r2, r3, #15
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d90c      	bls.n	8002200 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021e6:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_RCC_ClockConfig+0x1b4>)
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ee:	4b1f      	ldr	r3, [pc, #124]	; (800226c <HAL_RCC_ClockConfig+0x1b4>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 020f 	and.w	r2, r3, #15
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d001      	beq.n	8002200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e030      	b.n	8002262 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d008      	beq.n	800221e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800220c:	4918      	ldr	r1, [pc, #96]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d009      	beq.n	800223e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800222a:	4911      	ldr	r1, [pc, #68]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 800222e:	689b      	ldr	r3, [r3, #8]
 8002230:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	00db      	lsls	r3, r3, #3
 800223a:	4313      	orrs	r3, r2
 800223c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800223e:	f000 f81d 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8002242:	4601      	mov	r1, r0
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <HAL_RCC_ClockConfig+0x1b8>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	091b      	lsrs	r3, r3, #4
 800224a:	f003 030f 	and.w	r3, r3, #15
 800224e:	4a09      	ldr	r2, [pc, #36]	; (8002274 <HAL_RCC_ClockConfig+0x1bc>)
 8002250:	5cd3      	ldrb	r3, [r2, r3]
 8002252:	fa21 f303 	lsr.w	r3, r1, r3
 8002256:	4a08      	ldr	r2, [pc, #32]	; (8002278 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800225a:	2000      	movs	r0, #0
 800225c:	f7fe fe52 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	40023c00 	.word	0x40023c00
 8002270:	40023800 	.word	0x40023800
 8002274:	08006d7c 	.word	0x08006d7c
 8002278:	20000014 	.word	0x20000014

0800227c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002280:	b08f      	sub	sp, #60	; 0x3c
 8002282:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002284:	2300      	movs	r3, #0
 8002286:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002288:	2300      	movs	r3, #0
 800228a:	637b      	str	r3, [r7, #52]	; 0x34
 800228c:	2300      	movs	r3, #0
 800228e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002294:	4b62      	ldr	r3, [pc, #392]	; (8002420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	f003 030c 	and.w	r3, r3, #12
 800229c:	2b04      	cmp	r3, #4
 800229e:	d007      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x34>
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d008      	beq.n	80022b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f040 80b2 	bne.w	800240e <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022aa:	4b5e      	ldr	r3, [pc, #376]	; (8002424 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80022ac:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80022ae:	e0b1      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022b0:	4b5d      	ldr	r3, [pc, #372]	; (8002428 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80022b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022b4:	e0ae      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022b6:	4b5a      	ldr	r3, [pc, #360]	; (8002420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022be:	62fb      	str	r3, [r7, #44]	; 0x2c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c0:	4b57      	ldr	r3, [pc, #348]	; (8002420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d04e      	beq.n	800236a <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022cc:	4b54      	ldr	r3, [pc, #336]	; (8002420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	099b      	lsrs	r3, r3, #6
 80022d2:	f04f 0400 	mov.w	r4, #0
 80022d6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	ea01 0103 	and.w	r1, r1, r3
 80022e2:	ea02 0204 	and.w	r2, r2, r4
 80022e6:	460b      	mov	r3, r1
 80022e8:	4614      	mov	r4, r2
 80022ea:	0160      	lsls	r0, r4, #5
 80022ec:	6278      	str	r0, [r7, #36]	; 0x24
 80022ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022f0:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80022f4:	6278      	str	r0, [r7, #36]	; 0x24
 80022f6:	015b      	lsls	r3, r3, #5
 80022f8:	623b      	str	r3, [r7, #32]
 80022fa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80022fe:	1a5b      	subs	r3, r3, r1
 8002300:	eb64 0402 	sbc.w	r4, r4, r2
 8002304:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8002308:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 800230c:	ea4f 1883 	mov.w	r8, r3, lsl #6
 8002310:	ebb8 0803 	subs.w	r8, r8, r3
 8002314:	eb69 0904 	sbc.w	r9, r9, r4
 8002318:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800231c:	61fb      	str	r3, [r7, #28]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002330:	eb18 0801 	adds.w	r8, r8, r1
 8002334:	eb49 0902 	adc.w	r9, r9, r2
 8002338:	ea4f 2349 	mov.w	r3, r9, lsl #9
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	ea4f 2348 	mov.w	r3, r8, lsl #9
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002350:	4640      	mov	r0, r8
 8002352:	4649      	mov	r1, r9
 8002354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002356:	f04f 0400 	mov.w	r4, #0
 800235a:	461a      	mov	r2, r3
 800235c:	4623      	mov	r3, r4
 800235e:	f7fe fc27 	bl	8000bb0 <__aeabi_uldivmod>
 8002362:	4603      	mov	r3, r0
 8002364:	460c      	mov	r4, r1
 8002366:	637b      	str	r3, [r7, #52]	; 0x34
 8002368:	e043      	b.n	80023f2 <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800236a:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	099b      	lsrs	r3, r3, #6
 8002370:	f04f 0400 	mov.w	r4, #0
 8002374:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002378:	f04f 0200 	mov.w	r2, #0
 800237c:	ea01 0103 	and.w	r1, r1, r3
 8002380:	ea02 0204 	and.w	r2, r2, r4
 8002384:	460b      	mov	r3, r1
 8002386:	4614      	mov	r4, r2
 8002388:	0160      	lsls	r0, r4, #5
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	015b      	lsls	r3, r3, #5
 8002396:	60bb      	str	r3, [r7, #8]
 8002398:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800239c:	1a5b      	subs	r3, r3, r1
 800239e:	eb64 0402 	sbc.w	r4, r4, r2
 80023a2:	01a6      	lsls	r6, r4, #6
 80023a4:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80023a8:	019d      	lsls	r5, r3, #6
 80023aa:	1aed      	subs	r5, r5, r3
 80023ac:	eb66 0604 	sbc.w	r6, r6, r4
 80023b0:	00f3      	lsls	r3, r6, #3
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 80023ba:	607b      	str	r3, [r7, #4]
 80023bc:	00eb      	lsls	r3, r5, #3
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	e897 0060 	ldmia.w	r7, {r5, r6}
 80023c4:	186d      	adds	r5, r5, r1
 80023c6:	eb46 0602 	adc.w	r6, r6, r2
 80023ca:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 80023ce:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 80023d2:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 80023d6:	4655      	mov	r5, sl
 80023d8:	465e      	mov	r6, fp
 80023da:	4628      	mov	r0, r5
 80023dc:	4631      	mov	r1, r6
 80023de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023e0:	f04f 0400 	mov.w	r4, #0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4623      	mov	r3, r4
 80023e8:	f7fe fbe2 	bl	8000bb0 <__aeabi_uldivmod>
 80023ec:	4603      	mov	r3, r0
 80023ee:	460c      	mov	r4, r1
 80023f0:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023f2:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	0c1b      	lsrs	r3, r3, #16
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	3301      	adds	r3, #1
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 8002402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	fbb2 f3f3 	udiv	r3, r2, r3
 800240a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800240c:	e002      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800240e:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002410:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002412:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002416:	4618      	mov	r0, r3
 8002418:	373c      	adds	r7, #60	; 0x3c
 800241a:	46bd      	mov	sp, r7
 800241c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002420:	40023800 	.word	0x40023800
 8002424:	00f42400 	.word	0x00f42400
 8002428:	007a1200 	.word	0x007a1200

0800242c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002430:	4b03      	ldr	r3, [pc, #12]	; (8002440 <HAL_RCC_GetHCLKFreq+0x14>)
 8002432:	681b      	ldr	r3, [r3, #0]
}
 8002434:	4618      	mov	r0, r3
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000014 	.word	0x20000014

08002444 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002448:	f7ff fff0 	bl	800242c <HAL_RCC_GetHCLKFreq>
 800244c:	4601      	mov	r1, r0
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	0a9b      	lsrs	r3, r3, #10
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	4a03      	ldr	r2, [pc, #12]	; (8002468 <HAL_RCC_GetPCLK1Freq+0x24>)
 800245a:	5cd3      	ldrb	r3, [r2, r3]
 800245c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002460:	4618      	mov	r0, r3
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40023800 	.word	0x40023800
 8002468:	08006d8c 	.word	0x08006d8c

0800246c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002470:	f7ff ffdc 	bl	800242c <HAL_RCC_GetHCLKFreq>
 8002474:	4601      	mov	r1, r0
 8002476:	4b05      	ldr	r3, [pc, #20]	; (800248c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002478:	689b      	ldr	r3, [r3, #8]
 800247a:	0b5b      	lsrs	r3, r3, #13
 800247c:	f003 0307 	and.w	r3, r3, #7
 8002480:	4a03      	ldr	r2, [pc, #12]	; (8002490 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002482:	5cd3      	ldrb	r3, [r2, r3]
 8002484:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002488:	4618      	mov	r0, r3
 800248a:	bd80      	pop	{r7, pc}
 800248c:	40023800 	.word	0x40023800
 8002490:	08006d8c 	.word	0x08006d8c

08002494 <HAL_UART_Init>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e03f      	b.n	8002526 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
  
  if(huart->gState == HAL_UART_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d106      	bne.n	80024c0 <HAL_UART_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	2200      	movs	r2, #0
 80024b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_UART_MspInit(huart);
 80024ba:	6878      	ldr	r0, [r7, #4]
 80024bc:	f001 fa0c 	bl	80038d8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2224      	movs	r2, #36	; 0x24
 80024c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6812      	ldr	r2, [r2, #0]
 80024d0:	68d2      	ldr	r2, [r2, #12]
 80024d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024d6:	60da      	str	r2, [r3, #12]
  
  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f000 f987 	bl	80027ec <UART_SetConfig>
  
  /* In asynchronous mode, the following bits must be kept cleared: 
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	6912      	ldr	r2, [r2, #16]
 80024e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	6952      	ldr	r2, [r2, #20]
 80024f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024fc:	615a      	str	r2, [r3, #20]
  
  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	687a      	ldr	r2, [r7, #4]
 8002504:	6812      	ldr	r2, [r2, #0]
 8002506:	68d2      	ldr	r2, [r2, #12]
 8002508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800250c:	60da      	str	r2, [r3, #12]
  
  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2220      	movs	r2, #32
 8002520:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  
  return HAL_OK;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
	...

08002530 <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the data received contain the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{  
 8002530:	b580      	push	{r7, lr}
 8002532:	b086      	sub	sp, #24
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	4613      	mov	r3, r2
 800253c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;
  
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY) 
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002544:	b2db      	uxtb	r3, r3
 8002546:	2b20      	cmp	r3, #32
 8002548:	d166      	bne.n	8002618 <HAL_UART_Receive_DMA+0xe8>
  {
    if((pData == NULL ) || (Size == 0)) 
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d002      	beq.n	8002556 <HAL_UART_Receive_DMA+0x26>
 8002550:	88fb      	ldrh	r3, [r7, #6]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d101      	bne.n	800255a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002556:	2301      	movs	r3, #1
 8002558:	e05f      	b.n	800261a <HAL_UART_Receive_DMA+0xea>
    }
    
    /* Process Locked */
    __HAL_LOCK(huart);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002560:	2b01      	cmp	r3, #1
 8002562:	d101      	bne.n	8002568 <HAL_UART_Receive_DMA+0x38>
 8002564:	2302      	movs	r3, #2
 8002566:	e058      	b.n	800261a <HAL_UART_Receive_DMA+0xea>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2201      	movs	r2, #1
 800256c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    
    huart->pRxBuffPtr = pData;
 8002570:	68ba      	ldr	r2, [r7, #8]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	88fa      	ldrh	r2, [r7, #6]
 800257a:	859a      	strh	r2, [r3, #44]	; 0x2c
    
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2222      	movs	r2, #34	; 0x22
 8002586:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800258e:	4a25      	ldr	r2, [pc, #148]	; (8002624 <HAL_UART_Receive_DMA+0xf4>)
 8002590:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002596:	4a24      	ldr	r2, [pc, #144]	; (8002628 <HAL_UART_Receive_DMA+0xf8>)
 8002598:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800259e:	4a23      	ldr	r2, [pc, #140]	; (800262c <HAL_UART_Receive_DMA+0xfc>)
 80025a0:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	2200      	movs	r2, #0
 80025a8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA Stream */
    tmp = (uint32_t*)&pData;
 80025aa:	f107 0308 	add.w	r3, r7, #8
 80025ae:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t*)tmp, Size);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3304      	adds	r3, #4
 80025ba:	4619      	mov	r1, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	88fb      	ldrh	r3, [r7, #6]
 80025c2:	f7fe fed3 	bl	800136c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80025c6:	2300      	movs	r3, #0
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	613b      	str	r3, [r7, #16]
 80025da:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	68d2      	ldr	r2, [r2, #12]
 80025ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025f2:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	68fa      	ldr	r2, [r7, #12]
 80025fa:	6812      	ldr	r2, [r2, #0]
 80025fc:	6952      	ldr	r2, [r2, #20]
 80025fe:	f042 0201 	orr.w	r2, r2, #1
 8002602:	615a      	str	r2, [r3, #20]
    
    /* Enable the DMA transfer for the receiver request by setting the DMAR bit 
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68fa      	ldr	r2, [r7, #12]
 800260a:	6812      	ldr	r2, [r2, #0]
 800260c:	6952      	ldr	r2, [r2, #20]
 800260e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002612:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8002614:	2300      	movs	r3, #0
 8002616:	e000      	b.n	800261a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY; 
 8002618:	2302      	movs	r3, #2
  }
}
 800261a:	4618      	mov	r0, r3
 800261c:	3718      	adds	r7, #24
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	0800266d 	.word	0x0800266d
 8002628:	080026d5 	.word	0x080026d5
 800262c:	080026f1 	.word	0x080026f1

08002630 <HAL_UART_RxCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <HAL_UART_ErrorCallback>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
 __weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart); 
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */ 
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266a:	4770      	bx	lr

0800266c <UART_DMAReceiveCplt>:
  * @brief  DMA UART receive process complete callback. 
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002678:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002684:	2b00      	cmp	r3, #0
 8002686:	d11e      	bne.n	80026c6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2200      	movs	r2, #0
 800268c:	85da      	strh	r2, [r3, #46]	; 0x2e
  
    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	68d2      	ldr	r2, [r2, #12]
 8002698:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800269c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	6812      	ldr	r2, [r2, #0]
 80026a6:	6952      	ldr	r2, [r2, #20]
 80026a8:	f022 0201 	bic.w	r2, r2, #1
 80026ac:	615a      	str	r2, [r3, #20]
    
    /* Disable the DMA transfer for the receiver request by setting the DMAR bit 
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	6952      	ldr	r2, [r2, #20]
 80026b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026bc:	615a      	str	r2, [r3, #20]
	
    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
  }
  HAL_UART_RxCpltCallback(huart);
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f7ff ffb2 	bl	8002630 <HAL_UART_RxCpltCallback>
}
 80026cc:	bf00      	nop
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <UART_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	60fb      	str	r3, [r7, #12]

  HAL_UART_RxHalfCpltCallback(huart); 
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7ff ffae 	bl	8002644 <HAL_UART_RxHalfCpltCallback>
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <UART_DMAError>:
  * @brief  DMA UART communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef* huart = ( UART_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002700:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	695b      	ldr	r3, [r3, #20]
 8002708:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270c:	2b00      	cmp	r3, #0
 800270e:	bf14      	ite	ne
 8002710:	2301      	movne	r3, #1
 8002712:	2300      	moveq	r3, #0
 8002714:	b2db      	uxtb	r3, r3
 8002716:	60fb      	str	r3, [r7, #12]
  if((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b21      	cmp	r3, #33	; 0x21
 8002722:	d108      	bne.n	8002736 <UART_DMAError+0x46>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d005      	beq.n	8002736 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0U;
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	2200      	movs	r2, #0
 800272e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f000 f827 	bl	8002784 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR); 
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
 800273c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002740:	2b00      	cmp	r3, #0
 8002742:	bf14      	ite	ne
 8002744:	2301      	movne	r3, #1
 8002746:	2300      	moveq	r3, #0
 8002748:	b2db      	uxtb	r3, r3
 800274a:	60fb      	str	r3, [r7, #12]
  if((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002752:	b2db      	uxtb	r3, r3
 8002754:	2b22      	cmp	r3, #34	; 0x22
 8002756:	d108      	bne.n	800276a <UART_DMAError+0x7a>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d005      	beq.n	800276a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0U;
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2200      	movs	r2, #0
 8002762:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002764:	68b8      	ldr	r0, [r7, #8]
 8002766:	f000 f823 	bl	80027b0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	f043 0210 	orr.w	r2, r3, #16
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8002776:	68b8      	ldr	r0, [r7, #8]
 8002778:	f7ff ff6e 	bl	8002658 <HAL_UART_ErrorCallback>
}
 800277c:	bf00      	nop
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	68d2      	ldr	r2, [r2, #12]
 8002796:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800279a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2220      	movs	r2, #32
 80027a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr

080027b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6812      	ldr	r2, [r2, #0]
 80027c0:	68d2      	ldr	r2, [r2, #12]
 80027c2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80027c6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	6812      	ldr	r2, [r2, #0]
 80027d0:	6952      	ldr	r2, [r2, #20]
 80027d2:	f022 0201 	bic.w	r2, r2, #1
 80027d6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2220      	movs	r2, #32
 80027dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80027e0:	bf00      	nop
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr

080027ec <UART_SetConfig>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027ee:	b085      	sub	sp, #20
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002806:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4313      	orrs	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68db      	ldr	r3, [r3, #12]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002828:	f023 030c 	bic.w	r3, r3, #12
 800282c:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	691b      	ldr	r3, [r3, #16]
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	695b      	ldr	r3, [r3, #20]
 800283c:	431a      	orrs	r2, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69db      	ldr	r3, [r3, #28]
 8002842:	4313      	orrs	r3, r2
 8002844:	68fa      	ldr	r2, [r7, #12]
 8002846:	4313      	orrs	r3, r2
 8002848:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	68fa      	ldr	r2, [r7, #12]
 8002850:	60da      	str	r2, [r3, #12]
  
  /*-------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = huart->Instance->CR3;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	60fb      	str	r3, [r7, #12]
  
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002860:	60fb      	str	r3, [r7, #12]
  
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	68fa      	ldr	r2, [r7, #12]
 8002868:	4313      	orrs	r3, r2
 800286a:	60fb      	str	r3, [r7, #12]
  
  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	615a      	str	r2, [r3, #20]
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	69db      	ldr	r3, [r3, #28]
 8002878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800287c:	f040 80e4 	bne.w	8002a48 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6) 
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4aab      	ldr	r2, [pc, #684]	; (8002b34 <UART_SetConfig+0x348>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <UART_SetConfig+0xa8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4aaa      	ldr	r2, [pc, #680]	; (8002b38 <UART_SetConfig+0x34c>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d16c      	bne.n	800296e <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681c      	ldr	r4, [r3, #0]
 8002898:	f7ff fde8 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 800289c:	4602      	mov	r2, r0
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	009a      	lsls	r2, r3, #2
 80028a6:	441a      	add	r2, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b2:	4aa2      	ldr	r2, [pc, #648]	; (8002b3c <UART_SetConfig+0x350>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	011d      	lsls	r5, r3, #4
 80028bc:	f7ff fdd6 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 80028c0:	4602      	mov	r2, r0
 80028c2:	4613      	mov	r3, r2
 80028c4:	009b      	lsls	r3, r3, #2
 80028c6:	4413      	add	r3, r2
 80028c8:	009a      	lsls	r2, r3, #2
 80028ca:	441a      	add	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fbb2 f6f3 	udiv	r6, r2, r3
 80028d6:	f7ff fdc9 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 80028da:	4602      	mov	r2, r0
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	009a      	lsls	r2, r3, #2
 80028e4:	441a      	add	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	005b      	lsls	r3, r3, #1
 80028ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f0:	4a92      	ldr	r2, [pc, #584]	; (8002b3c <UART_SetConfig+0x350>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	095b      	lsrs	r3, r3, #5
 80028f8:	2264      	movs	r2, #100	; 0x64
 80028fa:	fb02 f303 	mul.w	r3, r2, r3
 80028fe:	1af3      	subs	r3, r6, r3
 8002900:	00db      	lsls	r3, r3, #3
 8002902:	3332      	adds	r3, #50	; 0x32
 8002904:	4a8d      	ldr	r2, [pc, #564]	; (8002b3c <UART_SetConfig+0x350>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	095b      	lsrs	r3, r3, #5
 800290c:	005b      	lsls	r3, r3, #1
 800290e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002912:	441d      	add	r5, r3
 8002914:	f7ff fdaa 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8002918:	4602      	mov	r2, r0
 800291a:	4613      	mov	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4413      	add	r3, r2
 8002920:	009a      	lsls	r2, r3, #2
 8002922:	441a      	add	r2, r3
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	fbb2 f6f3 	udiv	r6, r2, r3
 800292e:	f7ff fd9d 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8002932:	4602      	mov	r2, r0
 8002934:	4613      	mov	r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4413      	add	r3, r2
 800293a:	009a      	lsls	r2, r3, #2
 800293c:	441a      	add	r2, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	4a7c      	ldr	r2, [pc, #496]	; (8002b3c <UART_SetConfig+0x350>)
 800294a:	fba2 2303 	umull	r2, r3, r2, r3
 800294e:	095b      	lsrs	r3, r3, #5
 8002950:	2264      	movs	r2, #100	; 0x64
 8002952:	fb02 f303 	mul.w	r3, r2, r3
 8002956:	1af3      	subs	r3, r6, r3
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	3332      	adds	r3, #50	; 0x32
 800295c:	4a77      	ldr	r2, [pc, #476]	; (8002b3c <UART_SetConfig+0x350>)
 800295e:	fba2 2303 	umull	r2, r3, r2, r3
 8002962:	095b      	lsrs	r3, r3, #5
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	442b      	add	r3, r5
 800296a:	60a3      	str	r3, [r4, #8]
 800296c:	e154      	b.n	8002c18 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }	
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681c      	ldr	r4, [r3, #0]
 8002972:	f7ff fd67 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8002976:	4602      	mov	r2, r0
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	009a      	lsls	r2, r3, #2
 8002980:	441a      	add	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	005b      	lsls	r3, r3, #1
 8002988:	fbb2 f3f3 	udiv	r3, r2, r3
 800298c:	4a6b      	ldr	r2, [pc, #428]	; (8002b3c <UART_SetConfig+0x350>)
 800298e:	fba2 2303 	umull	r2, r3, r2, r3
 8002992:	095b      	lsrs	r3, r3, #5
 8002994:	011d      	lsls	r5, r3, #4
 8002996:	f7ff fd55 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 800299a:	4602      	mov	r2, r0
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	009a      	lsls	r2, r3, #2
 80029a4:	441a      	add	r2, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	005b      	lsls	r3, r3, #1
 80029ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80029b0:	f7ff fd48 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	009a      	lsls	r2, r3, #2
 80029be:	441a      	add	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	005b      	lsls	r3, r3, #1
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4a5c      	ldr	r2, [pc, #368]	; (8002b3c <UART_SetConfig+0x350>)
 80029cc:	fba2 2303 	umull	r2, r3, r2, r3
 80029d0:	095b      	lsrs	r3, r3, #5
 80029d2:	2264      	movs	r2, #100	; 0x64
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	1af3      	subs	r3, r6, r3
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	3332      	adds	r3, #50	; 0x32
 80029de:	4a57      	ldr	r2, [pc, #348]	; (8002b3c <UART_SetConfig+0x350>)
 80029e0:	fba2 2303 	umull	r2, r3, r2, r3
 80029e4:	095b      	lsrs	r3, r3, #5
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80029ec:	441d      	add	r5, r3
 80029ee:	f7ff fd29 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 80029f2:	4602      	mov	r2, r0
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009a      	lsls	r2, r3, #2
 80029fc:	441a      	add	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a08:	f7ff fd1c 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	4613      	mov	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	4413      	add	r3, r2
 8002a14:	009a      	lsls	r2, r3, #2
 8002a16:	441a      	add	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	005b      	lsls	r3, r3, #1
 8002a1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a22:	4a46      	ldr	r2, [pc, #280]	; (8002b3c <UART_SetConfig+0x350>)
 8002a24:	fba2 2303 	umull	r2, r3, r2, r3
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	2264      	movs	r2, #100	; 0x64
 8002a2c:	fb02 f303 	mul.w	r3, r2, r3
 8002a30:	1af3      	subs	r3, r6, r3
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	3332      	adds	r3, #50	; 0x32
 8002a36:	4a41      	ldr	r2, [pc, #260]	; (8002b3c <UART_SetConfig+0x350>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	f003 0307 	and.w	r3, r3, #7
 8002a42:	442b      	add	r3, r5
 8002a44:	60a3      	str	r3, [r4, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 8002a46:	e0e7      	b.n	8002c18 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a39      	ldr	r2, [pc, #228]	; (8002b34 <UART_SetConfig+0x348>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d004      	beq.n	8002a5c <UART_SetConfig+0x270>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a38      	ldr	r2, [pc, #224]	; (8002b38 <UART_SetConfig+0x34c>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d171      	bne.n	8002b40 <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681c      	ldr	r4, [r3, #0]
 8002a60:	f7ff fd04 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4613      	mov	r3, r2
 8002a68:	009b      	lsls	r3, r3, #2
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009a      	lsls	r2, r3, #2
 8002a6e:	441a      	add	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7a:	4a30      	ldr	r2, [pc, #192]	; (8002b3c <UART_SetConfig+0x350>)
 8002a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a80:	095b      	lsrs	r3, r3, #5
 8002a82:	011d      	lsls	r5, r3, #4
 8002a84:	f7ff fcf2 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	009a      	lsls	r2, r3, #2
 8002a92:	441a      	add	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	fbb2 f6f3 	udiv	r6, r2, r3
 8002a9e:	f7ff fce5 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009a      	lsls	r2, r3, #2
 8002aac:	441a      	add	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab8:	4a20      	ldr	r2, [pc, #128]	; (8002b3c <UART_SetConfig+0x350>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2264      	movs	r2, #100	; 0x64
 8002ac2:	fb02 f303 	mul.w	r3, r2, r3
 8002ac6:	1af3      	subs	r3, r6, r3
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	3332      	adds	r3, #50	; 0x32
 8002acc:	4a1b      	ldr	r2, [pc, #108]	; (8002b3c <UART_SetConfig+0x350>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	095b      	lsrs	r3, r3, #5
 8002ad4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ad8:	441d      	add	r5, r3
 8002ada:	f7ff fcc7 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009a      	lsls	r2, r3, #2
 8002ae8:	441a      	add	r2, r3
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	fbb2 f6f3 	udiv	r6, r2, r3
 8002af4:	f7ff fcba 	bl	800246c <HAL_RCC_GetPCLK2Freq>
 8002af8:	4602      	mov	r2, r0
 8002afa:	4613      	mov	r3, r2
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4413      	add	r3, r2
 8002b00:	009a      	lsls	r2, r3, #2
 8002b02:	441a      	add	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b0e:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <UART_SetConfig+0x350>)
 8002b10:	fba2 2303 	umull	r2, r3, r2, r3
 8002b14:	095b      	lsrs	r3, r3, #5
 8002b16:	2264      	movs	r2, #100	; 0x64
 8002b18:	fb02 f303 	mul.w	r3, r2, r3
 8002b1c:	1af3      	subs	r3, r6, r3
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	3332      	adds	r3, #50	; 0x32
 8002b22:	4a06      	ldr	r2, [pc, #24]	; (8002b3c <UART_SetConfig+0x350>)
 8002b24:	fba2 2303 	umull	r2, r3, r2, r3
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	f003 030f 	and.w	r3, r3, #15
 8002b2e:	442b      	add	r3, r5
 8002b30:	60a3      	str	r3, [r4, #8]
 8002b32:	e071      	b.n	8002c18 <UART_SetConfig+0x42c>
 8002b34:	40011000 	.word	0x40011000
 8002b38:	40011400 	.word	0x40011400
 8002b3c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681c      	ldr	r4, [r3, #0]
 8002b44:	f7ff fc7e 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	4413      	add	r3, r2
 8002b50:	009a      	lsls	r2, r3, #2
 8002b52:	441a      	add	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b5e:	4a30      	ldr	r2, [pc, #192]	; (8002c20 <UART_SetConfig+0x434>)
 8002b60:	fba2 2303 	umull	r2, r3, r2, r3
 8002b64:	095b      	lsrs	r3, r3, #5
 8002b66:	011d      	lsls	r5, r3, #4
 8002b68:	f7ff fc6c 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	009a      	lsls	r2, r3, #2
 8002b76:	441a      	add	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	fbb2 f6f3 	udiv	r6, r2, r3
 8002b82:	f7ff fc5f 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8002b86:	4602      	mov	r2, r0
 8002b88:	4613      	mov	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009a      	lsls	r2, r3, #2
 8002b90:	441a      	add	r2, r3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9c:	4a20      	ldr	r2, [pc, #128]	; (8002c20 <UART_SetConfig+0x434>)
 8002b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2264      	movs	r2, #100	; 0x64
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	1af3      	subs	r3, r6, r3
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	3332      	adds	r3, #50	; 0x32
 8002bb0:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <UART_SetConfig+0x434>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002bbc:	441d      	add	r5, r3
 8002bbe:	f7ff fc41 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	4413      	add	r3, r2
 8002bca:	009a      	lsls	r2, r3, #2
 8002bcc:	441a      	add	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	fbb2 f6f3 	udiv	r6, r2, r3
 8002bd8:	f7ff fc34 	bl	8002444 <HAL_RCC_GetPCLK1Freq>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	009a      	lsls	r2, r3, #2
 8002be6:	441a      	add	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	4a0b      	ldr	r2, [pc, #44]	; (8002c20 <UART_SetConfig+0x434>)
 8002bf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bf8:	095b      	lsrs	r3, r3, #5
 8002bfa:	2264      	movs	r2, #100	; 0x64
 8002bfc:	fb02 f303 	mul.w	r3, r2, r3
 8002c00:	1af3      	subs	r3, r6, r3
 8002c02:	011b      	lsls	r3, r3, #4
 8002c04:	3332      	adds	r3, #50	; 0x32
 8002c06:	4a06      	ldr	r2, [pc, #24]	; (8002c20 <UART_SetConfig+0x434>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	442b      	add	r3, r5
 8002c14:	60a3      	str	r3, [r4, #8]
}
 8002c16:	e7ff      	b.n	8002c18 <UART_SetConfig+0x42c>
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c20:	51eb851f 	.word	0x51eb851f

08002c24 <FreeRTOS_CLIRegisterCommand>:


/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIRegisterCommand(const CLI_Command_Definition_t * const pxCommandToRegister)
    {
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
    static CLI_Definition_List_Item_t *pxLastCommandInList =  &xRegisteredCommands;
    CLI_Definition_List_Item_t *pxNewListItem;
    BaseType_t xReturn = pdFAIL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	81fb      	strh	r3, [r7, #14]

    /* Check the parameter is not NULL. */

    /* Create a new list item that will reference the command being registered. */
    pxNewListItem = (CLI_Definition_List_Item_t *)malloc(sizeof(CLI_Definition_List_Item_t));
 8002c30:	2008      	movs	r0, #8
 8002c32:	f000 ff09 	bl	8003a48 <malloc>
 8002c36:	4603      	mov	r3, r0
 8002c38:	60bb      	str	r3, [r7, #8]

    if (pxNewListItem != NULL)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00e      	beq.n	8002c5e <FreeRTOS_CLIRegisterCommand+0x3a>
	{
	    {
	    /* Reference the command being registered from the newly created
	     list item. */
	    pxNewListItem->pxCommandLineDefinition = pxCommandToRegister;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	601a      	str	r2, [r3, #0]

	    /* The new list item will get added to the end of the list, so
	     pxNext has nowhere to point. */
	    pxNewListItem->pxNext = NULL;
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	605a      	str	r2, [r3, #4]

	    /* Add the newly created list item to the end of the already existing
	     list. */
	    pxLastCommandInList->pxNext = pxNewListItem;
 8002c4c:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <FreeRTOS_CLIRegisterCommand+0x44>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	605a      	str	r2, [r3, #4]

	    /* Set the end of list marker to the new list item. */
	    pxLastCommandInList = pxNewListItem;
 8002c54:	4a04      	ldr	r2, [pc, #16]	; (8002c68 <FreeRTOS_CLIRegisterCommand+0x44>)
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	6013      	str	r3, [r2, #0]
	    }

	xReturn = pdPASS;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	81fb      	strh	r3, [r7, #14]
	}

    return xReturn;
 8002c5e:	89fb      	ldrh	r3, [r7, #14]
    }
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	20000010 	.word	0x20000010

08002c6c <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput, char * pcWriteBuffer, size_t xWriteBufferLen  )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b088      	sub	sp, #32
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t *pxCommand = NULL;
BaseType_t xReturn = pdTRUE;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	83fb      	strh	r3, [r7, #30]
size_t xCommandStringLength;

	/* Note:  This function is not re-entrant.  It must not be called from more
	thank one task. */

	if( pxCommand == NULL )
 8002c7c:	4b3b      	ldr	r3, [pc, #236]	; (8002d6c <FreeRTOS_CLIProcessCommand+0x100>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d141      	bne.n	8002d08 <FreeRTOS_CLIProcessCommand+0x9c>
	{
		/* Search for the command string in the list of registered commands. */
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8002c84:	4b39      	ldr	r3, [pc, #228]	; (8002d6c <FreeRTOS_CLIProcessCommand+0x100>)
 8002c86:	4a3a      	ldr	r2, [pc, #232]	; (8002d70 <FreeRTOS_CLIProcessCommand+0x104>)
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	e037      	b.n	8002cfc <FreeRTOS_CLIProcessCommand+0x90>
		{
			pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8002c8c:	4b37      	ldr	r3, [pc, #220]	; (8002d6c <FreeRTOS_CLIProcessCommand+0x100>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	61bb      	str	r3, [r7, #24]
			xCommandStringLength = strlen( pcRegisteredCommandString );
 8002c96:	69b8      	ldr	r0, [r7, #24]
 8002c98:	f7fd faa2 	bl	80001e0 <strlen>
 8002c9c:	6178      	str	r0, [r7, #20]

			/* To ensure the string lengths match exactly, so as not to pick up
			a sub-string of a longer command, check the byte after the expected
			end of the string is either the end of the string or a space before
			a parameter. */
			if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	4413      	add	r3, r2
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b20      	cmp	r3, #32
 8002ca8:	d005      	beq.n	8002cb6 <FreeRTOS_CLIProcessCommand+0x4a>
 8002caa:	68fa      	ldr	r2, [r7, #12]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	4413      	add	r3, r2
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d11d      	bne.n	8002cf2 <FreeRTOS_CLIProcessCommand+0x86>
			{
				if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	69b9      	ldr	r1, [r7, #24]
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f001 f93e 	bl	8003f3c <strncmp>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d115      	bne.n	8002cf2 <FreeRTOS_CLIProcessCommand+0x86>
				{
					/* The command has been found.  Check it has the expected
					number of parameters.  If cExpectedNumberOfParameters is -1,
					then there could be a variable number of parameters and no
					check is made. */
					if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 8002cc6:	4b29      	ldr	r3, [pc, #164]	; (8002d6c <FreeRTOS_CLIProcessCommand+0x100>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	db18      	blt.n	8002d06 <FreeRTOS_CLIProcessCommand+0x9a>
					{
						if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f000 f8e5 	bl	8002ea4 <prvGetNumberOfParameters>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <FreeRTOS_CLIProcessCommand+0x100>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d00c      	beq.n	8002d06 <FreeRTOS_CLIProcessCommand+0x9a>
						{
							xReturn = pdFALSE;
 8002cec:	2300      	movs	r3, #0
 8002cee:	83fb      	strh	r3, [r7, #30]
						}
					}

					break;
 8002cf0:	e009      	b.n	8002d06 <FreeRTOS_CLIProcessCommand+0x9a>
		for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8002cf2:	4b1e      	ldr	r3, [pc, #120]	; (8002d6c <FreeRTOS_CLIProcessCommand+0x100>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	4a1c      	ldr	r2, [pc, #112]	; (8002d6c <FreeRTOS_CLIProcessCommand+0x100>)
 8002cfa:	6013      	str	r3, [r2, #0]
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <FreeRTOS_CLIProcessCommand+0x100>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d1c3      	bne.n	8002c8c <FreeRTOS_CLIProcessCommand+0x20>
 8002d04:	e000      	b.n	8002d08 <FreeRTOS_CLIProcessCommand+0x9c>
					break;
 8002d06:	bf00      	nop
				}
			}
		}
	}

	if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <FreeRTOS_CLIProcessCommand+0x100>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00b      	beq.n	8002d28 <FreeRTOS_CLIProcessCommand+0xbc>
 8002d10:	8bfb      	ldrh	r3, [r7, #30]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d108      	bne.n	8002d28 <FreeRTOS_CLIProcessCommand+0xbc>
	{
		/* The command was found, but the number of parameters with the command
		was incorrect. */
		strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n", xWriteBufferLen );
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	4916      	ldr	r1, [pc, #88]	; (8002d74 <FreeRTOS_CLIProcessCommand+0x108>)
 8002d1a:	68b8      	ldr	r0, [r7, #8]
 8002d1c:	f001 f920 	bl	8003f60 <strncpy>
		pxCommand = NULL;
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <FreeRTOS_CLIProcessCommand+0x100>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	601a      	str	r2, [r3, #0]
 8002d26:	e01b      	b.n	8002d60 <FreeRTOS_CLIProcessCommand+0xf4>
	}
	else if( pxCommand != NULL )
 8002d28:	4b10      	ldr	r3, [pc, #64]	; (8002d6c <FreeRTOS_CLIProcessCommand+0x100>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d010      	beq.n	8002d52 <FreeRTOS_CLIProcessCommand+0xe6>
	{
		/* Call the callback function that is registered to this command. */
		xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <FreeRTOS_CLIProcessCommand+0x100>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	68fa      	ldr	r2, [r7, #12]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	68b8      	ldr	r0, [r7, #8]
 8002d3e:	4798      	blx	r3
 8002d40:	4603      	mov	r3, r0
 8002d42:	83fb      	strh	r3, [r7, #30]

		/* If xReturn is pdFALSE, then no further strings will be returned
		after this one, and	pxCommand can be reset to NULL ready to search
		for the next entered command. */
		if( xReturn == pdFALSE )
 8002d44:	8bfb      	ldrh	r3, [r7, #30]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10a      	bne.n	8002d60 <FreeRTOS_CLIProcessCommand+0xf4>
		{
			pxCommand = NULL;
 8002d4a:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <FreeRTOS_CLIProcessCommand+0x100>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	e006      	b.n	8002d60 <FreeRTOS_CLIProcessCommand+0xf4>
		}
	}
	else
	{
		/* pxCommand was NULL, the command was not found. */
		strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n", xWriteBufferLen );
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4908      	ldr	r1, [pc, #32]	; (8002d78 <FreeRTOS_CLIProcessCommand+0x10c>)
 8002d56:	68b8      	ldr	r0, [r7, #8]
 8002d58:	f001 f902 	bl	8003f60 <strncpy>
		xReturn = pdFALSE;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	83fb      	strh	r3, [r7, #30]
	}

	return xReturn;
 8002d60:	8bfb      	ldrh	r3, [r7, #30]
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3720      	adds	r7, #32
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200008ac 	.word	0x200008ac
 8002d70:	20000008 	.word	0x20000008
 8002d74:	08006914 	.word	0x08006914
 8002d78:	0800696c 	.word	0x0800696c

08002d7c <FreeRTOS_CLIGetOutputBuffer>:
/*-----------------------------------------------------------*/

char *FreeRTOS_CLIGetOutputBuffer( void )
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
	return cOutputBuffer;
 8002d80:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <FreeRTOS_CLIGetOutputBuffer+0x10>)
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	200006ac 	.word	0x200006ac

08002d90 <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char *FreeRTOS_CLIGetParameter( const char *pcCommandString, UBaseType_t uxWantedParameter, BaseType_t *pxParameterStringLength )
{
 8002d90:	b480      	push	{r7}
 8002d92:	b087      	sub	sp, #28
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	460b      	mov	r3, r1
 8002d9a:	607a      	str	r2, [r7, #4]
 8002d9c:	817b      	strh	r3, [r7, #10]
UBaseType_t uxParametersFound = 0;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	82fb      	strh	r3, [r7, #22]
const char *pcReturn = NULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	613b      	str	r3, [r7, #16]

	*pxParameterStringLength = 0;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	801a      	strh	r2, [r3, #0]

	while( uxParametersFound < uxWantedParameter )
 8002dac:	e03c      	b.n	8002e28 <FreeRTOS_CLIGetParameter+0x98>
	{
		/* Index the character pointer past the current word.  If this is the start
		of the command string then the first word is the command itself. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
		{
			pcCommandString++;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	3301      	adds	r3, #1
 8002db2:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d007      	beq.n	8002dcc <FreeRTOS_CLIGetParameter+0x3c>
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b20      	cmp	r3, #32
 8002dc2:	d1f4      	bne.n	8002dae <FreeRTOS_CLIGetParameter+0x1e>
		}

		/* Find the start of the next string. */
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8002dc4:	e002      	b.n	8002dcc <FreeRTOS_CLIGetParameter+0x3c>
		{
			pcCommandString++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	3301      	adds	r3, #1
 8002dca:	60fb      	str	r3, [r7, #12]
		while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <FreeRTOS_CLIGetParameter+0x4c>
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	2b20      	cmp	r3, #32
 8002dda:	d0f4      	beq.n	8002dc6 <FreeRTOS_CLIGetParameter+0x36>
		}

		/* Was a string found? */
		if( *pcCommandString != 0x00 )
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d026      	beq.n	8002e32 <FreeRTOS_CLIGetParameter+0xa2>
		{
			/* Is this the start of the required parameter? */
			uxParametersFound++;
 8002de4:	8afb      	ldrh	r3, [r7, #22]
 8002de6:	3301      	adds	r3, #1
 8002de8:	82fb      	strh	r3, [r7, #22]

			if( uxParametersFound == uxWantedParameter )
 8002dea:	8afa      	ldrh	r2, [r7, #22]
 8002dec:	897b      	ldrh	r3, [r7, #10]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d11a      	bne.n	8002e28 <FreeRTOS_CLIGetParameter+0x98>
			{
				/* How long is the parameter? */
				pcReturn = pcCommandString;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	613b      	str	r3, [r7, #16]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8002df6:	e008      	b.n	8002e0a <FreeRTOS_CLIGetParameter+0x7a>
				{
					( *pxParameterStringLength )++;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	801a      	strh	r2, [r3, #0]
					pcCommandString++;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	3301      	adds	r3, #1
 8002e08:	60fb      	str	r3, [r7, #12]
				while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d003      	beq.n	8002e1a <FreeRTOS_CLIGetParameter+0x8a>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d1ee      	bne.n	8002df8 <FreeRTOS_CLIGetParameter+0x68>
				}

				if( *pxParameterStringLength == 0 )
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d109      	bne.n	8002e36 <FreeRTOS_CLIGetParameter+0xa6>
				{
					pcReturn = NULL;
 8002e22:	2300      	movs	r3, #0
 8002e24:	613b      	str	r3, [r7, #16]
				}

				break;
 8002e26:	e006      	b.n	8002e36 <FreeRTOS_CLIGetParameter+0xa6>
	while( uxParametersFound < uxWantedParameter )
 8002e28:	8afa      	ldrh	r2, [r7, #22]
 8002e2a:	897b      	ldrh	r3, [r7, #10]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d3c1      	bcc.n	8002db4 <FreeRTOS_CLIGetParameter+0x24>
 8002e30:	e002      	b.n	8002e38 <FreeRTOS_CLIGetParameter+0xa8>
			}
		}
		else
		{
			break;
 8002e32:	bf00      	nop
 8002e34:	e000      	b.n	8002e38 <FreeRTOS_CLIGetParameter+0xa8>
				break;
 8002e36:	bf00      	nop
		}
	}

	return pcReturn;
 8002e38:	693b      	ldr	r3, [r7, #16]
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	371c      	adds	r7, #28
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
	...

08002e48 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	607a      	str	r2, [r7, #4]
static const CLI_Definition_List_Item_t * pxCommand = NULL;
BaseType_t xReturn;

	( void ) pcCommandString;

	if( pxCommand == NULL )
 8002e54:	4b11      	ldr	r3, [pc, #68]	; (8002e9c <prvHelpCommand+0x54>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d102      	bne.n	8002e62 <prvHelpCommand+0x1a>
	{
		/* Reset the pxCommand pointer back to the start of the list. */
		pxCommand = &xRegisteredCommands;
 8002e5c:	4b0f      	ldr	r3, [pc, #60]	; (8002e9c <prvHelpCommand+0x54>)
 8002e5e:	4a10      	ldr	r2, [pc, #64]	; (8002ea0 <prvHelpCommand+0x58>)
 8002e60:	601a      	str	r2, [r3, #0]
	}

	/* Return the next command help string, before moving the pointer on to
	the next command in the list. */
	strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 8002e62:	4b0e      	ldr	r3, [pc, #56]	; (8002e9c <prvHelpCommand+0x54>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f001 f876 	bl	8003f60 <strncpy>
	pxCommand = pxCommand->pxNext;
 8002e74:	4b09      	ldr	r3, [pc, #36]	; (8002e9c <prvHelpCommand+0x54>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4a08      	ldr	r2, [pc, #32]	; (8002e9c <prvHelpCommand+0x54>)
 8002e7c:	6013      	str	r3, [r2, #0]

	if( pxCommand == NULL )
 8002e7e:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <prvHelpCommand+0x54>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d102      	bne.n	8002e8c <prvHelpCommand+0x44>
	{
		/* There are no more commands in the list, so there will be no more
		strings to return after this one and pdFALSE should be returned. */
		xReturn = pdFALSE;
 8002e86:	2300      	movs	r3, #0
 8002e88:	82fb      	strh	r3, [r7, #22]
 8002e8a:	e001      	b.n	8002e90 <prvHelpCommand+0x48>
	}
	else
	{
		xReturn = pdTRUE;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	82fb      	strh	r3, [r7, #22]
	}

	return xReturn;
 8002e90:	8afb      	ldrh	r3, [r7, #22]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	200008b0 	.word	0x200008b0
 8002ea0:	20000008 	.word	0x20000008

08002ea4 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char *pcCommandString )
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
int8_t cParameters = 0;
 8002eac:	2300      	movs	r3, #0
 8002eae:	73fb      	strb	r3, [r7, #15]
BaseType_t xLastCharacterWasSpace = pdFALSE;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	81bb      	strh	r3, [r7, #12]

	/* Count the number of space delimited words in pcCommandString. */
	while( *pcCommandString != 0x00 )
 8002eb4:	e014      	b.n	8002ee0 <prvGetNumberOfParameters+0x3c>
	{
		if( ( *pcCommandString ) == ' ' )
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	d10b      	bne.n	8002ed6 <prvGetNumberOfParameters+0x32>
		{
			if( xLastCharacterWasSpace != pdTRUE )
 8002ebe:	89bb      	ldrh	r3, [r7, #12]
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d00a      	beq.n	8002eda <prvGetNumberOfParameters+0x36>
			{
				cParameters++;
 8002ec4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	73fb      	strb	r3, [r7, #15]
				xLastCharacterWasSpace = pdTRUE;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	81bb      	strh	r3, [r7, #12]
 8002ed4:	e001      	b.n	8002eda <prvGetNumberOfParameters+0x36>
			}
		}
		else
		{
			xLastCharacterWasSpace = pdFALSE;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	81bb      	strh	r3, [r7, #12]
		}

		pcCommandString++;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3301      	adds	r3, #1
 8002ede:	607b      	str	r3, [r7, #4]
	while( *pcCommandString != 0x00 )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	781b      	ldrb	r3, [r3, #0]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e6      	bne.n	8002eb6 <prvGetNumberOfParameters+0x12>
	}

	/* If the command string ended with spaces, then there will have been too
	many parameters counted. */
	if( xLastCharacterWasSpace == pdTRUE )
 8002ee8:	89bb      	ldrh	r3, [r7, #12]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d105      	bne.n	8002efa <prvGetNumberOfParameters+0x56>
	{
		cParameters--;
 8002eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	73fb      	strb	r3, [r7, #15]
	}

	/* The value returned is one less than the number of space delimited words,
	as the first word should be the command itself. */
	return cParameters;
 8002efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3714      	adds	r7, #20
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
 8002f16:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <MX_DMA_Init+0x3c>)
 8002f18:	4b0b      	ldr	r3, [pc, #44]	; (8002f48 <MX_DMA_Init+0x3c>)
 8002f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f20:	6313      	str	r3, [r2, #48]	; 0x30
 8002f22:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <MX_DMA_Init+0x3c>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f2a:	607b      	str	r3, [r7, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2100      	movs	r1, #0
 8002f32:	2010      	movs	r0, #16
 8002f34:	f7fe f90b 	bl	800114e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002f38:	2010      	movs	r0, #16
 8002f3a:	f7fe f924 	bl	8001186 <HAL_NVIC_EnableIRQ>

}
 8002f3e:	bf00      	nop
 8002f40:	3708      	adds	r7, #8
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800

08002f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f52:	2300      	movs	r3, #0
 8002f54:	60bb      	str	r3, [r7, #8]
 8002f56:	4a1f      	ldr	r2, [pc, #124]	; (8002fd4 <MX_GPIO_Init+0x88>)
 8002f58:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <MX_GPIO_Init+0x88>)
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f5c:	f043 0304 	orr.w	r3, r3, #4
 8002f60:	6313      	str	r3, [r2, #48]	; 0x30
 8002f62:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <MX_GPIO_Init+0x88>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f6e:	2300      	movs	r3, #0
 8002f70:	607b      	str	r3, [r7, #4]
 8002f72:	4a18      	ldr	r2, [pc, #96]	; (8002fd4 <MX_GPIO_Init+0x88>)
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <MX_GPIO_Init+0x88>)
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	f043 0301 	orr.w	r3, r3, #1
 8002f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f7e:	4b15      	ldr	r3, [pc, #84]	; (8002fd4 <MX_GPIO_Init+0x88>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	607b      	str	r3, [r7, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	2120      	movs	r1, #32
 8002f8e:	4812      	ldr	r0, [pc, #72]	; (8002fd8 <MX_GPIO_Init+0x8c>)
 8002f90:	f7fe fe36 	bl	8001c00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002f94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f98:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <MX_GPIO_Init+0x90>)
 8002f9c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002fa2:	f107 030c 	add.w	r3, r7, #12
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	480d      	ldr	r0, [pc, #52]	; (8002fe0 <MX_GPIO_Init+0x94>)
 8002faa:	f7fe fca7 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002fae:	2320      	movs	r3, #32
 8002fb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002fbe:	f107 030c 	add.w	r3, r7, #12
 8002fc2:	4619      	mov	r1, r3
 8002fc4:	4804      	ldr	r0, [pc, #16]	; (8002fd8 <MX_GPIO_Init+0x8c>)
 8002fc6:	f7fe fc99 	bl	80018fc <HAL_GPIO_Init>

}
 8002fca:	bf00      	nop
 8002fcc:	3720      	adds	r7, #32
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40020000 	.word	0x40020000
 8002fdc:	10210000 	.word	0x10210000
 8002fe0:	40020800 	.word	0x40020800

08002fe4 <G28_callback>:


/*************************************************************************/
 BaseType_t G28_callback(char *pcWriteBuffer, size_t xWriteBufferLen,
	const char *pcCommandString)
    {
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
    strcpy( pcWriteBuffer, "G28 OK\r\n" );
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	4907      	ldr	r1, [pc, #28]	; (8003010 <G28_callback+0x2c>)
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	cb03      	ldmia	r3!, {r0, r1}
 8002ffa:	6010      	str	r0, [r2, #0]
 8002ffc:	6051      	str	r1, [r2, #4]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	7213      	strb	r3, [r2, #8]
    return pdFALSE;
 8003002:	2300      	movs	r3, #0
    }
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	080069bc 	.word	0x080069bc

08003014 <G1_callback>:

/*************************************************************************/

BaseType_t G1_callback(char *pcWriteBuffer, size_t xWriteBufferLen,
	const char *pcCommandString)
    {
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
    strcpy( pcWriteBuffer, "G1 OK\r\n" );
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4906      	ldr	r1, [pc, #24]	; (800303c <G1_callback+0x28>)
 8003024:	461a      	mov	r2, r3
 8003026:	460b      	mov	r3, r1
 8003028:	cb03      	ldmia	r3!, {r0, r1}
 800302a:	6010      	str	r0, [r2, #0]
 800302c:	6051      	str	r1, [r2, #4]
    return pdFALSE;
 800302e:	2300      	movs	r3, #0
    }
 8003030:	4618      	mov	r0, r3
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr
 800303c:	080069e0 	.word	0x080069e0

08003040 <G0_callback>:

/*************************************************************************/

BaseType_t G0_callback(char *pcWriteBuffer, size_t xWriteBufferLen,
	const char *pcCommandString)
    {
 8003040:	b480      	push	{r7}
 8003042:	b085      	sub	sp, #20
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
    strcpy( pcWriteBuffer, "G0 OK\r\n" );
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4906      	ldr	r1, [pc, #24]	; (8003068 <G0_callback+0x28>)
 8003050:	461a      	mov	r2, r3
 8003052:	460b      	mov	r3, r1
 8003054:	cb03      	ldmia	r3!, {r0, r1}
 8003056:	6010      	str	r0, [r2, #0]
 8003058:	6051      	str	r1, [r2, #4]
    return pdFALSE;
 800305a:	2300      	movs	r3, #0
    }
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	08006a00 	.word	0x08006a00

0800306c <mconfig_callback>:

/*************************************************************************/

BaseType_t mconfig_callback(char *pcWriteBuffer, size_t xWriteBufferLen,
	const char *pcCommandString)
    {
 800306c:	b490      	push	{r4, r7}
 800306e:	b084      	sub	sp, #16
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
    strcpy( pcWriteBuffer, "mconfig OK\r\n" );
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4a07      	ldr	r2, [pc, #28]	; (8003098 <mconfig_callback+0x2c>)
 800307c:	461c      	mov	r4, r3
 800307e:	4613      	mov	r3, r2
 8003080:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003082:	6020      	str	r0, [r4, #0]
 8003084:	6061      	str	r1, [r4, #4]
 8003086:	60a2      	str	r2, [r4, #8]
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	7323      	strb	r3, [r4, #12]
    return pdFALSE;
 800308c:	2300      	movs	r3, #0
    }
 800308e:	4618      	mov	r0, r3
 8003090:	3710      	adds	r7, #16
 8003092:	46bd      	mov	sp, r7
 8003094:	bc90      	pop	{r4, r7}
 8003096:	4770      	bx	lr
 8003098:	08006a20 	.word	0x08006a20

0800309c <yconfig_callback>:

/*************************************************************************/

BaseType_t yconfig_callback(char *pcWriteBuffer, size_t xWriteBufferLen,
	const char *pcCommandString)
    {
 800309c:	b490      	push	{r4, r7}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
    strcpy( pcWriteBuffer, "yconfig OK\r\n" );
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4a07      	ldr	r2, [pc, #28]	; (80030c8 <yconfig_callback+0x2c>)
 80030ac:	461c      	mov	r4, r3
 80030ae:	4613      	mov	r3, r2
 80030b0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80030b2:	6020      	str	r0, [r4, #0]
 80030b4:	6061      	str	r1, [r4, #4]
 80030b6:	60a2      	str	r2, [r4, #8]
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	7323      	strb	r3, [r4, #12]
    return pdFALSE;
 80030bc:	2300      	movs	r3, #0
    }
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bc90      	pop	{r4, r7}
 80030c6:	4770      	bx	lr
 80030c8:	08006a54 	.word	0x08006a54

080030cc <zconfig_callback>:

/*************************************************************************/

BaseType_t zconfig_callback(char *pcWriteBuffer, size_t xWriteBufferLen,
	const char *pcCommandString)
    {
 80030cc:	b490      	push	{r4, r7}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
    strcpy( pcWriteBuffer, "zconfig OK\r\n" );
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4a07      	ldr	r2, [pc, #28]	; (80030f8 <zconfig_callback+0x2c>)
 80030dc:	461c      	mov	r4, r3
 80030de:	4613      	mov	r3, r2
 80030e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80030e2:	6020      	str	r0, [r4, #0]
 80030e4:	6061      	str	r1, [r4, #4]
 80030e6:	60a2      	str	r2, [r4, #8]
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	7323      	strb	r3, [r4, #12]
    return pdFALSE;
 80030ec:	2300      	movs	r3, #0
    }
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc90      	pop	{r4, r7}
 80030f6:	4770      	bx	lr
 80030f8:	08006a88 	.word	0x08006a88

080030fc <prvThreeParameterEchoCommand>:


/*************************************************************************/

static BaseType_t prvThreeParameterEchoCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80030fc:	b5b0      	push	{r4, r5, r7, lr}
 80030fe:	b088      	sub	sp, #32
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	//configASSERT( pcWriteBuffer );

	if( uxParameterNumber == 0 )
 8003108:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <prvThreeParameterEchoCommand+0xbc>)
 800310a:	881b      	ldrh	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d114      	bne.n	800313a <prvThreeParameterEchoCommand+0x3e>
	{
		/* The first time the function is called after the command has been
		entered just a header string is returned. */
		sprintf( pcWriteBuffer, "The three parameters were:\r\n" );
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	4a2a      	ldr	r2, [pc, #168]	; (80031bc <prvThreeParameterEchoCommand+0xc0>)
 8003114:	461d      	mov	r5, r3
 8003116:	4614      	mov	r4, r2
 8003118:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800311a:	6028      	str	r0, [r5, #0]
 800311c:	6069      	str	r1, [r5, #4]
 800311e:	60aa      	str	r2, [r5, #8]
 8003120:	60eb      	str	r3, [r5, #12]
 8003122:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003124:	6128      	str	r0, [r5, #16]
 8003126:	6169      	str	r1, [r5, #20]
 8003128:	61aa      	str	r2, [r5, #24]
 800312a:	7823      	ldrb	r3, [r4, #0]
 800312c:	772b      	strb	r3, [r5, #28]

		/* Next time the function is called the first parameter will be echoed
		back. */
		uxParameterNumber = 1U;
 800312e:	4b22      	ldr	r3, [pc, #136]	; (80031b8 <prvThreeParameterEchoCommand+0xbc>)
 8003130:	2201      	movs	r2, #1
 8003132:	801a      	strh	r2, [r3, #0]

		/* There is more data to be returned as no parameters have been echoed
		back yet. */
		xReturn = pdPASS;
 8003134:	2301      	movs	r3, #1
 8003136:	83fb      	strh	r3, [r7, #30]
 8003138:	e038      	b.n	80031ac <prvThreeParameterEchoCommand+0xb0>
	}
	else
	{
		/* Obtain the parameter string. */
		pcParameter = FreeRTOS_CLIGetParameter
 800313a:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <prvThreeParameterEchoCommand+0xbc>)
 800313c:	881b      	ldrh	r3, [r3, #0]
 800313e:	f107 0216 	add.w	r2, r7, #22
 8003142:	4619      	mov	r1, r3
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f7ff fe23 	bl	8002d90 <FreeRTOS_CLIGetParameter>
 800314a:	61b8      	str	r0, [r7, #24]

		/* Sanity check something was returned. */
		//configASSERT( pcParameter );

		/* Return the parameter string. */
		memset( pcWriteBuffer, 0x00, xWriteBufferLen );
 800314c:	68ba      	ldr	r2, [r7, #8]
 800314e:	2100      	movs	r1, #0
 8003150:	68f8      	ldr	r0, [r7, #12]
 8003152:	f000 fe8f 	bl	8003e74 <memset>
		sprintf( pcWriteBuffer, "%d: ", ( int ) uxParameterNumber );
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <prvThreeParameterEchoCommand+0xbc>)
 8003158:	881b      	ldrh	r3, [r3, #0]
 800315a:	461a      	mov	r2, r3
 800315c:	4918      	ldr	r1, [pc, #96]	; (80031c0 <prvThreeParameterEchoCommand+0xc4>)
 800315e:	68f8      	ldr	r0, [r7, #12]
 8003160:	f000 feac 	bl	8003ebc <sprintf>
		strncat( pcWriteBuffer, pcParameter, ( size_t ) xParameterStringLength );
 8003164:	8afb      	ldrh	r3, [r7, #22]
 8003166:	461a      	mov	r2, r3
 8003168:	69b9      	ldr	r1, [r7, #24]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fed2 	bl	8003f14 <strncat>
		strncat( pcWriteBuffer, "\r\n", strlen( "\r\n" ) );
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f7fd f835 	bl	80001e0 <strlen>
 8003176:	4603      	mov	r3, r0
 8003178:	461a      	mov	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	4413      	add	r3, r2
 800317e:	4a11      	ldr	r2, [pc, #68]	; (80031c4 <prvThreeParameterEchoCommand+0xc8>)
 8003180:	8811      	ldrh	r1, [r2, #0]
 8003182:	7892      	ldrb	r2, [r2, #2]
 8003184:	8019      	strh	r1, [r3, #0]
 8003186:	709a      	strb	r2, [r3, #2]

		/* If this is the last of the three parameters then there are no more
		strings to return after this one. */
		if( uxParameterNumber == 3U )
 8003188:	4b0b      	ldr	r3, [pc, #44]	; (80031b8 <prvThreeParameterEchoCommand+0xbc>)
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d105      	bne.n	800319c <prvThreeParameterEchoCommand+0xa0>
		{
			/* If this is the last of the three parameters then there are no more
			strings to return after this one. */
			xReturn = pdFALSE;
 8003190:	2300      	movs	r3, #0
 8003192:	83fb      	strh	r3, [r7, #30]
			uxParameterNumber = 0;
 8003194:	4b08      	ldr	r3, [pc, #32]	; (80031b8 <prvThreeParameterEchoCommand+0xbc>)
 8003196:	2200      	movs	r2, #0
 8003198:	801a      	strh	r2, [r3, #0]
 800319a:	e007      	b.n	80031ac <prvThreeParameterEchoCommand+0xb0>
		}
		else
		{
			/* There are more parameters to return after this one. */
			xReturn = pdTRUE;
 800319c:	2301      	movs	r3, #1
 800319e:	83fb      	strh	r3, [r7, #30]
			uxParameterNumber++;
 80031a0:	4b05      	ldr	r3, [pc, #20]	; (80031b8 <prvThreeParameterEchoCommand+0xbc>)
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	3301      	adds	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	4b03      	ldr	r3, [pc, #12]	; (80031b8 <prvThreeParameterEchoCommand+0xbc>)
 80031aa:	801a      	strh	r2, [r3, #0]
		}
	}

	return xReturn;
 80031ac:	8bfb      	ldrh	r3, [r7, #30]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bdb0      	pop	{r4, r5, r7, pc}
 80031b6:	bf00      	nop
 80031b8:	200008b4 	.word	0x200008b4
 80031bc:	08006af0 	.word	0x08006af0
 80031c0:	08006b10 	.word	0x08006b10
 80031c4:	08006b18 	.word	0x08006b18

080031c8 <prvParameterEchoCommand>:


/*************************************************************************/

static BaseType_t prvParameterEchoCommand( char *pcWriteBuffer, size_t xWriteBufferLen, const char *pcCommandString )
{
 80031c8:	b5b0      	push	{r4, r5, r7, lr}
 80031ca:	b088      	sub	sp, #32
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]
	write buffer length is adequate, so does not check for buffer overflows. */
	( void ) pcCommandString;
	( void ) xWriteBufferLen;
	//configASSERT( pcWriteBuffer );

	if( uxParameterNumber == 0 )
 80031d4:	4b2c      	ldr	r3, [pc, #176]	; (8003288 <prvParameterEchoCommand+0xc0>)
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d115      	bne.n	8003208 <prvParameterEchoCommand+0x40>
	{
		/* The first time the function is called after the command has been
		entered just a header string is returned. */
		sprintf( pcWriteBuffer, "The parameters were:\r\n" );
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4a2b      	ldr	r2, [pc, #172]	; (800328c <prvParameterEchoCommand+0xc4>)
 80031e0:	461c      	mov	r4, r3
 80031e2:	4615      	mov	r5, r2
 80031e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80031e6:	6020      	str	r0, [r4, #0]
 80031e8:	6061      	str	r1, [r4, #4]
 80031ea:	60a2      	str	r2, [r4, #8]
 80031ec:	60e3      	str	r3, [r4, #12]
 80031ee:	6828      	ldr	r0, [r5, #0]
 80031f0:	6120      	str	r0, [r4, #16]
 80031f2:	88ab      	ldrh	r3, [r5, #4]
 80031f4:	79aa      	ldrb	r2, [r5, #6]
 80031f6:	82a3      	strh	r3, [r4, #20]
 80031f8:	4613      	mov	r3, r2
 80031fa:	75a3      	strb	r3, [r4, #22]

		/* Next time the function is called the first parameter will be echoed
		back. */
		uxParameterNumber = 1U;
 80031fc:	4b22      	ldr	r3, [pc, #136]	; (8003288 <prvParameterEchoCommand+0xc0>)
 80031fe:	2201      	movs	r2, #1
 8003200:	801a      	strh	r2, [r3, #0]

		/* There is more data to be returned as no parameters have been echoed
		back yet. */
		xReturn = pdPASS;
 8003202:	2301      	movs	r3, #1
 8003204:	83fb      	strh	r3, [r7, #30]
 8003206:	e03a      	b.n	800327e <prvParameterEchoCommand+0xb6>
	}
	else
	{
		/* Obtain the parameter string. */
		pcParameter = FreeRTOS_CLIGetParameter
 8003208:	4b1f      	ldr	r3, [pc, #124]	; (8003288 <prvParameterEchoCommand+0xc0>)
 800320a:	881b      	ldrh	r3, [r3, #0]
 800320c:	f107 0216 	add.w	r2, r7, #22
 8003210:	4619      	mov	r1, r3
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff fdbc 	bl	8002d90 <FreeRTOS_CLIGetParameter>
 8003218:	61b8      	str	r0, [r7, #24]
							pcCommandString,		/* The command string itself. */
							uxParameterNumber,		/* Return the next parameter. */
							&xParameterStringLength	/* Store the parameter string length. */
						);

		if( pcParameter != NULL )
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d026      	beq.n	800326e <prvParameterEchoCommand+0xa6>
		{
			/* Return the parameter string. */
			memset( pcWriteBuffer, 0x00, xWriteBufferLen );
 8003220:	68ba      	ldr	r2, [r7, #8]
 8003222:	2100      	movs	r1, #0
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fe25 	bl	8003e74 <memset>
			sprintf( pcWriteBuffer, "%d: ", ( int ) uxParameterNumber );
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <prvParameterEchoCommand+0xc0>)
 800322c:	881b      	ldrh	r3, [r3, #0]
 800322e:	461a      	mov	r2, r3
 8003230:	4917      	ldr	r1, [pc, #92]	; (8003290 <prvParameterEchoCommand+0xc8>)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 fe42 	bl	8003ebc <sprintf>
			strncat( pcWriteBuffer, ( char * ) pcParameter, ( size_t ) xParameterStringLength );
 8003238:	8afb      	ldrh	r3, [r7, #22]
 800323a:	461a      	mov	r2, r3
 800323c:	69b9      	ldr	r1, [r7, #24]
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 fe68 	bl	8003f14 <strncat>
			strncat( pcWriteBuffer, "\r\n", strlen( "\r\n" ) );
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f7fc ffcb 	bl	80001e0 <strlen>
 800324a:	4603      	mov	r3, r0
 800324c:	461a      	mov	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	4413      	add	r3, r2
 8003252:	4a10      	ldr	r2, [pc, #64]	; (8003294 <prvParameterEchoCommand+0xcc>)
 8003254:	8811      	ldrh	r1, [r2, #0]
 8003256:	7892      	ldrb	r2, [r2, #2]
 8003258:	8019      	strh	r1, [r3, #0]
 800325a:	709a      	strb	r2, [r3, #2]

			/* There might be more parameters to return after this one. */
			xReturn = pdTRUE;
 800325c:	2301      	movs	r3, #1
 800325e:	83fb      	strh	r3, [r7, #30]
			uxParameterNumber++;
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <prvParameterEchoCommand+0xc0>)
 8003262:	881b      	ldrh	r3, [r3, #0]
 8003264:	3301      	adds	r3, #1
 8003266:	b29a      	uxth	r2, r3
 8003268:	4b07      	ldr	r3, [pc, #28]	; (8003288 <prvParameterEchoCommand+0xc0>)
 800326a:	801a      	strh	r2, [r3, #0]
 800326c:	e007      	b.n	800327e <prvParameterEchoCommand+0xb6>
		}
		else
		{
			/* No more parameters were found.  Make sure the write buffer does
			not contain a valid string. */
			pcWriteBuffer[ 0 ] = 0x00;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	701a      	strb	r2, [r3, #0]

			/* No more data to return. */
			xReturn = pdFALSE;
 8003274:	2300      	movs	r3, #0
 8003276:	83fb      	strh	r3, [r7, #30]

			/* Start over the next time this command is executed. */
			uxParameterNumber = 0;
 8003278:	4b03      	ldr	r3, [pc, #12]	; (8003288 <prvParameterEchoCommand+0xc0>)
 800327a:	2200      	movs	r2, #0
 800327c:	801a      	strh	r2, [r3, #0]
		}
	}

	return xReturn;
 800327e:	8bfb      	ldrh	r3, [r7, #30]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3720      	adds	r7, #32
 8003284:	46bd      	mov	sp, r7
 8003286:	bdb0      	pop	{r4, r5, r7, pc}
 8003288:	200008b6 	.word	0x200008b6
 800328c:	08006b94 	.word	0x08006b94
 8003290:	08006b10 	.word	0x08006b10
 8003294:	08006b18 	.word	0x08006b18

08003298 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800329c:	f7fd fe10 	bl	8000ec0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032a0:	f000 f83c 	bl	800331c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032a4:	f7ff fe52 	bl	8002f4c <MX_GPIO_Init>
  MX_DMA_Init();
 80032a8:	f7ff fe30 	bl	8002f0c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80032ac:	f000 fae6 	bl	800387c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  Ring_Buffer_Init(&huart2);
 80032b0:	4810      	ldr	r0, [pc, #64]	; (80032f4 <main+0x5c>)
 80032b2:	f000 f8b1 	bl	8003418 <Ring_Buffer_Init>
  FreeRTOS_CLIRegisterCommand(&G28_defination);
 80032b6:	4810      	ldr	r0, [pc, #64]	; (80032f8 <main+0x60>)
 80032b8:	f7ff fcb4 	bl	8002c24 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand(&G1_defination);
 80032bc:	480f      	ldr	r0, [pc, #60]	; (80032fc <main+0x64>)
 80032be:	f7ff fcb1 	bl	8002c24 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand(&G0_defination);
 80032c2:	480f      	ldr	r0, [pc, #60]	; (8003300 <main+0x68>)
 80032c4:	f7ff fcae 	bl	8002c24 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand(&xconfig_defination);
 80032c8:	480e      	ldr	r0, [pc, #56]	; (8003304 <main+0x6c>)
 80032ca:	f7ff fcab 	bl	8002c24 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand(&yconfig_defination);
 80032ce:	480e      	ldr	r0, [pc, #56]	; (8003308 <main+0x70>)
 80032d0:	f7ff fca8 	bl	8002c24 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand(&zconfig_defination);
 80032d4:	480d      	ldr	r0, [pc, #52]	; (800330c <main+0x74>)
 80032d6:	f7ff fca5 	bl	8002c24 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand(&mconfig_defination);
 80032da:	480d      	ldr	r0, [pc, #52]	; (8003310 <main+0x78>)
 80032dc:	f7ff fca2 	bl	8002c24 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xThreeParameterEcho );
 80032e0:	480c      	ldr	r0, [pc, #48]	; (8003314 <main+0x7c>)
 80032e2:	f7ff fc9f 	bl	8002c24 <FreeRTOS_CLIRegisterCommand>
  FreeRTOS_CLIRegisterCommand( &xParameterEcho );
 80032e6:	480c      	ldr	r0, [pc, #48]	; (8003318 <main+0x80>)
 80032e8:	f7ff fc9c 	bl	8002c24 <FreeRTOS_CLIRegisterCommand>
  {

  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */
      UARTCommandConsoleLoop();
 80032ec:	f000 fa10 	bl	8003710 <UARTCommandConsoleLoop>
 80032f0:	e7fc      	b.n	80032ec <main+0x54>
 80032f2:	bf00      	nop
 80032f4:	20000a10 	.word	0x20000a10
 80032f8:	08006cec 	.word	0x08006cec
 80032fc:	08006cfc 	.word	0x08006cfc
 8003300:	08006d0c 	.word	0x08006d0c
 8003304:	08006d4c 	.word	0x08006d4c
 8003308:	08006d2c 	.word	0x08006d2c
 800330c:	08006d3c 	.word	0x08006d3c
 8003310:	08006d1c 	.word	0x08006d1c
 8003314:	08006d5c 	.word	0x08006d5c
 8003318:	08006d6c 	.word	0x08006d6c

0800331c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b094      	sub	sp, #80	; 0x50
 8003320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	4a35      	ldr	r2, [pc, #212]	; (80033fc <SystemClock_Config+0xe0>)
 8003328:	4b34      	ldr	r3, [pc, #208]	; (80033fc <SystemClock_Config+0xe0>)
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	; 0x40
 8003332:	4b32      	ldr	r3, [pc, #200]	; (80033fc <SystemClock_Config+0xe0>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333a:	60bb      	str	r3, [r7, #8]
 800333c:	68bb      	ldr	r3, [r7, #8]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800333e:	2300      	movs	r3, #0
 8003340:	607b      	str	r3, [r7, #4]
 8003342:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <SystemClock_Config+0xe4>)
 8003344:	4b2e      	ldr	r3, [pc, #184]	; (8003400 <SystemClock_Config+0xe4>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800334c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	4b2b      	ldr	r3, [pc, #172]	; (8003400 <SystemClock_Config+0xe4>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	687b      	ldr	r3, [r7, #4]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800335e:	2302      	movs	r3, #2
 8003360:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003362:	2301      	movs	r3, #1
 8003364:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8003366:	2310      	movs	r3, #16
 8003368:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800336a:	2302      	movs	r3, #2
 800336c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800336e:	2300      	movs	r3, #0
 8003370:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003372:	2308      	movs	r3, #8
 8003374:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8003376:	2354      	movs	r3, #84	; 0x54
 8003378:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800337a:	2302      	movs	r3, #2
 800337c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800337e:	2307      	movs	r3, #7
 8003380:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003382:	f107 0320 	add.w	r3, r7, #32
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fc54 	bl	8001c34 <HAL_RCC_OscConfig>
 800338c:	4603      	mov	r3, r0
 800338e:	2b00      	cmp	r3, #0
 8003390:	d004      	beq.n	800339c <SystemClock_Config+0x80>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003392:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8003396:	481b      	ldr	r0, [pc, #108]	; (8003404 <SystemClock_Config+0xe8>)
 8003398:	f000 f838 	bl	800340c <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800339c:	230f      	movs	r3, #15
 800339e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033a0:	2302      	movs	r3, #2
 80033a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033a4:	2300      	movs	r3, #0
 80033a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033b2:	f107 030c 	add.w	r3, r7, #12
 80033b6:	2102      	movs	r1, #2
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fe fe7d 	bl	80020b8 <HAL_RCC_ClockConfig>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d004      	beq.n	80033ce <SystemClock_Config+0xb2>
  {
    _Error_Handler(__FILE__, __LINE__);
 80033c4:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80033c8:	480e      	ldr	r0, [pc, #56]	; (8003404 <SystemClock_Config+0xe8>)
 80033ca:	f000 f81f 	bl	800340c <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80033ce:	f7ff f82d 	bl	800242c <HAL_RCC_GetHCLKFreq>
 80033d2:	4602      	mov	r2, r0
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <SystemClock_Config+0xec>)
 80033d6:	fba3 2302 	umull	r2, r3, r3, r2
 80033da:	099b      	lsrs	r3, r3, #6
 80033dc:	4618      	mov	r0, r3
 80033de:	f7fd fee0 	bl	80011a2 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80033e2:	2004      	movs	r0, #4
 80033e4:	f7fd feea 	bl	80011bc <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80033e8:	2200      	movs	r2, #0
 80033ea:	2100      	movs	r1, #0
 80033ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033f0:	f7fd fead 	bl	800114e <HAL_NVIC_SetPriority>
}
 80033f4:	bf00      	nop
 80033f6:	3750      	adds	r7, #80	; 0x50
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40023800 	.word	0x40023800
 8003400:	40007000 	.word	0x40007000
 8003404:	08006c10 	.word	0x08006c10
 8003408:	10624dd3 	.word	0x10624dd3

0800340c <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8003416:	e7fe      	b.n	8003416 <_Error_Handler+0xa>

08003418 <Ring_Buffer_Init>:
static uint32_t Read_PTR;

#define WRITE_PTR (uint32_t)( BUFFER_SIZE - (huart->hdmarx->Instance->NDTR))

void Ring_Buffer_Init(UART_HandleTypeDef *_huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
	huart = _huart;
 8003420:	4a0b      	ldr	r2, [pc, #44]	; (8003450 <Ring_Buffer_Init+0x38>)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6013      	str	r3, [r2, #0]
	huart->hdmarx->Instance->NDTR = BUFFER_SIZE;
 8003426:	4b0a      	ldr	r3, [pc, #40]	; (8003450 <Ring_Buffer_Init+0x38>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2240      	movs	r2, #64	; 0x40
 8003430:	605a      	str	r2, [r3, #4]
	Read_PTR = 0;
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <Ring_Buffer_Init+0x3c>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_DMA(huart, RX_DMA_Buffer, BUFFER_SIZE);
 8003438:	4b05      	ldr	r3, [pc, #20]	; (8003450 <Ring_Buffer_Init+0x38>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2240      	movs	r2, #64	; 0x40
 800343e:	4906      	ldr	r1, [pc, #24]	; (8003458 <Ring_Buffer_Init+0x40>)
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff f875 	bl	8002530 <HAL_UART_Receive_DMA>

}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	200008f8 	.word	0x200008f8
 8003454:	200008fc 	.word	0x200008fc
 8003458:	200008b8 	.word	0x200008b8

0800345c <Ring_Buffer_Get_Char>:

	return (Read_PTR == WRITE_PTR)?1:0;
}

uint8_t Ring_Buffer_Get_Char(uint8_t* data)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
	if (WRITE_PTR == Read_PTR)
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <Ring_Buffer_Get_Char+0x54>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 8003472:	4b10      	ldr	r3, [pc, #64]	; (80034b4 <Ring_Buffer_Get_Char+0x58>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d101      	bne.n	800347e <Ring_Buffer_Get_Char+0x22>
	{
		return 0;
 800347a:	2300      	movs	r3, #0
 800347c:	e012      	b.n	80034a4 <Ring_Buffer_Get_Char+0x48>
	}
	else
	{
		*data = RX_DMA_Buffer[Read_PTR];
 800347e:	4b0d      	ldr	r3, [pc, #52]	; (80034b4 <Ring_Buffer_Get_Char+0x58>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a0d      	ldr	r2, [pc, #52]	; (80034b8 <Ring_Buffer_Get_Char+0x5c>)
 8003484:	5cd2      	ldrb	r2, [r2, r3]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	701a      	strb	r2, [r3, #0]

		Read_PTR++;
 800348a:	4b0a      	ldr	r3, [pc, #40]	; (80034b4 <Ring_Buffer_Get_Char+0x58>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	3301      	adds	r3, #1
 8003490:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <Ring_Buffer_Get_Char+0x58>)
 8003492:	6013      	str	r3, [r2, #0]

		if (Read_PTR == BUFFER_SIZE)
 8003494:	4b07      	ldr	r3, [pc, #28]	; (80034b4 <Ring_Buffer_Get_Char+0x58>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2b40      	cmp	r3, #64	; 0x40
 800349a:	d102      	bne.n	80034a2 <Ring_Buffer_Get_Char+0x46>
		{
			Read_PTR = 0;
 800349c:	4b05      	ldr	r3, [pc, #20]	; (80034b4 <Ring_Buffer_Get_Char+0x58>)
 800349e:	2200      	movs	r2, #0
 80034a0:	601a      	str	r2, [r3, #0]
		}

		return 1;
 80034a2:	2301      	movs	r3, #1
	}
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	200008f8 	.word	0x200008f8
 80034b4:	200008fc 	.word	0x200008fc
 80034b8:	200008b8 	.word	0x200008b8

080034bc <Ring_Buffer_Get_Count>:

uint8_t Ring_Buffer_Get_Count(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
	if (WRITE_PTR >= Read_PTR)
 80034c0:	4b17      	ldr	r3, [pc, #92]	; (8003520 <Ring_Buffer_Get_Count+0x64>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <Ring_Buffer_Get_Count+0x68>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d30f      	bcc.n	80034f6 <Ring_Buffer_Get_Count+0x3a>
	{
		return (WRITE_PTR - Read_PTR);
 80034d6:	4b12      	ldr	r3, [pc, #72]	; (8003520 <Ring_Buffer_Get_Count+0x64>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	425b      	negs	r3, r3
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4b0f      	ldr	r3, [pc, #60]	; (8003524 <Ring_Buffer_Get_Count+0x68>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	3340      	adds	r3, #64	; 0x40
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	e00e      	b.n	8003514 <Ring_Buffer_Get_Count+0x58>
	}
	return (BUFFER_SIZE - (Read_PTR - WRITE_PTR));
 80034f6:	4b0a      	ldr	r3, [pc, #40]	; (8003520 <Ring_Buffer_Get_Count+0x64>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	b2da      	uxtb	r2, r3
 8003502:	4b08      	ldr	r3, [pc, #32]	; (8003524 <Ring_Buffer_Get_Count+0x68>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	4413      	add	r3, r2
 800350a:	b2da      	uxtb	r2, r3
 800350c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	b2db      	uxtb	r3, r3
}
 8003514:	4618      	mov	r0, r3
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
 800351e:	bf00      	nop
 8003520:	200008f8 	.word	0x200008f8
 8003524:	200008fc 	.word	0x200008fc

08003528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800352e:	2300      	movs	r3, #0
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <HAL_MspInit+0xa0>)
 8003534:	4b24      	ldr	r3, [pc, #144]	; (80035c8 <HAL_MspInit+0xa0>)
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800353c:	6453      	str	r3, [r2, #68]	; 0x44
 800353e:	4b22      	ldr	r3, [pc, #136]	; (80035c8 <HAL_MspInit+0xa0>)
 8003540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003542:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003546:	607b      	str	r3, [r7, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800354a:	2300      	movs	r3, #0
 800354c:	603b      	str	r3, [r7, #0]
 800354e:	4a1e      	ldr	r2, [pc, #120]	; (80035c8 <HAL_MspInit+0xa0>)
 8003550:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <HAL_MspInit+0xa0>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003558:	6413      	str	r3, [r2, #64]	; 0x40
 800355a:	4b1b      	ldr	r3, [pc, #108]	; (80035c8 <HAL_MspInit+0xa0>)
 800355c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003562:	603b      	str	r3, [r7, #0]
 8003564:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003566:	2007      	movs	r0, #7
 8003568:	f7fd fde6 	bl	8001138 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800356c:	2200      	movs	r2, #0
 800356e:	2100      	movs	r1, #0
 8003570:	f06f 000b 	mvn.w	r0, #11
 8003574:	f7fd fdeb 	bl	800114e <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003578:	2200      	movs	r2, #0
 800357a:	2100      	movs	r1, #0
 800357c:	f06f 000a 	mvn.w	r0, #10
 8003580:	f7fd fde5 	bl	800114e <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2100      	movs	r1, #0
 8003588:	f06f 0009 	mvn.w	r0, #9
 800358c:	f7fd fddf 	bl	800114e <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003590:	2200      	movs	r2, #0
 8003592:	2100      	movs	r1, #0
 8003594:	f06f 0004 	mvn.w	r0, #4
 8003598:	f7fd fdd9 	bl	800114e <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 800359c:	2200      	movs	r2, #0
 800359e:	2100      	movs	r1, #0
 80035a0:	f06f 0003 	mvn.w	r0, #3
 80035a4:	f7fd fdd3 	bl	800114e <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	f06f 0001 	mvn.w	r0, #1
 80035b0:	f7fd fdcd 	bl	800114e <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80035b4:	2200      	movs	r2, #0
 80035b6:	2100      	movs	r1, #0
 80035b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035bc:	f7fd fdc7 	bl	800114e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035c0:	bf00      	nop
 80035c2:	3708      	adds	r7, #8
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	40023800 	.word	0x40023800

080035cc <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80035da:	b480      	push	{r7}
 80035dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80035de:	e7fe      	b.n	80035de <HardFault_Handler+0x4>

080035e0 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80035e0:	b480      	push	{r7}
 80035e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035e4:	e7fe      	b.n	80035e4 <MemManage_Handler+0x4>

080035e6 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80035e6:	b480      	push	{r7}
 80035e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035ea:	e7fe      	b.n	80035ea <BusFault_Handler+0x4>

080035ec <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035f0:	e7fe      	b.n	80035f0 <UsageFault_Handler+0x4>

080035f2 <SVC_Handler>:

/**
* @brief This function handles System service call via SWI instruction.
*/
void SVC_Handler(void)
{
 80035f2:	b480      	push	{r7}
 80035f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035f6:	bf00      	nop
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003604:	bf00      	nop
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800360e:	b480      	push	{r7}
 8003610:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003620:	f7fd fca0 	bl	8000f64 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 8003624:	f7fd fde6 	bl	80011f4 <HAL_SYSTICK_IRQHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003628:	bf00      	nop
 800362a:	bd80      	pop	{r7, pc}

0800362c <DMA1_Stream5_IRQHandler>:

/**
* @brief This function handles DMA1 stream5 global interrupt.
*/
void DMA1_Stream5_IRQHandler(void)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003630:	4802      	ldr	r0, [pc, #8]	; (800363c <DMA1_Stream5_IRQHandler+0x10>)
 8003632:	f7fd fefb 	bl	800142c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	200009b0 	.word	0x200009b0

08003640 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003644:	4a16      	ldr	r2, [pc, #88]	; (80036a0 <SystemInit+0x60>)
 8003646:	4b16      	ldr	r3, [pc, #88]	; (80036a0 <SystemInit+0x60>)
 8003648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003650:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003654:	4a13      	ldr	r2, [pc, #76]	; (80036a4 <SystemInit+0x64>)
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <SystemInit+0x64>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003660:	4b10      	ldr	r3, [pc, #64]	; (80036a4 <SystemInit+0x64>)
 8003662:	2200      	movs	r2, #0
 8003664:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003666:	4a0f      	ldr	r2, [pc, #60]	; (80036a4 <SystemInit+0x64>)
 8003668:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <SystemInit+0x64>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003670:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8003676:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <SystemInit+0x64>)
 8003678:	4a0b      	ldr	r2, [pc, #44]	; (80036a8 <SystemInit+0x68>)
 800367a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800367c:	4a09      	ldr	r2, [pc, #36]	; (80036a4 <SystemInit+0x64>)
 800367e:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <SystemInit+0x64>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003686:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003688:	4b06      	ldr	r3, [pc, #24]	; (80036a4 <SystemInit+0x64>)
 800368a:	2200      	movs	r2, #0
 800368c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800368e:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <SystemInit+0x60>)
 8003690:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003694:	609a      	str	r2, [r3, #8]
#endif
}
 8003696:	bf00      	nop
 8003698:	46bd      	mov	sp, r7
 800369a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369e:	4770      	bx	lr
 80036a0:	e000ed00 	.word	0xe000ed00
 80036a4:	40023800 	.word	0x40023800
 80036a8:	24003010 	.word	0x24003010

080036ac <xSerialPutChar>:
/* DEL acts as a backspace. */
#define cmdASCII_DEL		( 0x7F )


void xSerialPutChar(UART_HandleTypeDef *huart, uint8_t pData)
    {
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	460b      	mov	r3, r1
 80036b6:	70fb      	strb	r3, [r7, #3]
    huart->Instance->DR = (pData);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	78fa      	ldrb	r2, [r7, #3]
 80036be:	605a      	str	r2, [r3, #4]
    while (__HAL_UART_GET_FLAG(huart,UART_FLAG_TC) == 0);
 80036c0:	bf00      	nop
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036cc:	2b40      	cmp	r3, #64	; 0x40
 80036ce:	d1f8      	bne.n	80036c2 <xSerialPutChar+0x16>
    }
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <vSerialPutString>:

void vSerialPutString(UART_HandleTypeDef *huart, uint8_t* pData, uint16_t Size)
    {
 80036dc:	b580      	push	{r7, lr}
 80036de:	b084      	sub	sp, #16
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	4613      	mov	r3, r2
 80036e8:	80fb      	strh	r3, [r7, #6]
    while (Size--)
 80036ea:	e007      	b.n	80036fc <vSerialPutString+0x20>
	{
	xSerialPutChar(huart, *pData++);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	60ba      	str	r2, [r7, #8]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	4619      	mov	r1, r3
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f7ff ffd8 	bl	80036ac <xSerialPutChar>
    while (Size--)
 80036fc:	88fb      	ldrh	r3, [r7, #6]
 80036fe:	1e5a      	subs	r2, r3, #1
 8003700:	80fa      	strh	r2, [r7, #6]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f2      	bne.n	80036ec <vSerialPutString+0x10>
	}
    }
 8003706:	bf00      	nop
 8003708:	3710      	adds	r7, #16
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <UARTCommandConsoleLoop>:

void UARTCommandConsoleLoop()
    {
 8003710:	b598      	push	{r3, r4, r7, lr}
 8003712:	af00      	add	r7, sp, #0
     exclusion on this buffer as it is assumed only one command console interface
     will be used at any one time. */

    /* Send the welcome message. */
    static uint8_t first_flag = 0;
    if (first_flag == 0)
 8003714:	4b4f      	ldr	r3, [pc, #316]	; (8003854 <UARTCommandConsoleLoop+0x144>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d115      	bne.n	8003748 <UARTCommandConsoleLoop+0x38>
	{
	pcOutputString = FreeRTOS_CLIGetOutputBuffer();
 800371c:	f7ff fb2e 	bl	8002d7c <FreeRTOS_CLIGetOutputBuffer>
 8003720:	4602      	mov	r2, r0
 8003722:	4b4d      	ldr	r3, [pc, #308]	; (8003858 <UARTCommandConsoleLoop+0x148>)
 8003724:	601a      	str	r2, [r3, #0]
	first_flag = 1;
 8003726:	4b4b      	ldr	r3, [pc, #300]	; (8003854 <UARTCommandConsoleLoop+0x144>)
 8003728:	2201      	movs	r2, #1
 800372a:	701a      	strb	r2, [r3, #0]
	vSerialPutString(&huart2, (uint8_t* ) pcWelcomeMessage,
 800372c:	4b4b      	ldr	r3, [pc, #300]	; (800385c <UARTCommandConsoleLoop+0x14c>)
 800372e:	681c      	ldr	r4, [r3, #0]
		(unsigned short ) strlen(pcWelcomeMessage));
 8003730:	4b4a      	ldr	r3, [pc, #296]	; (800385c <UARTCommandConsoleLoop+0x14c>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7fc fd53 	bl	80001e0 <strlen>
 800373a:	4603      	mov	r3, r0
	vSerialPutString(&huart2, (uint8_t* ) pcWelcomeMessage,
 800373c:	b29b      	uxth	r3, r3
 800373e:	461a      	mov	r2, r3
 8003740:	4621      	mov	r1, r4
 8003742:	4847      	ldr	r0, [pc, #284]	; (8003860 <UARTCommandConsoleLoop+0x150>)
 8003744:	f7ff ffca 	bl	80036dc <vSerialPutString>
	}

    if (Ring_Buffer_Get_Count() > 0)
 8003748:	f7ff feb8 	bl	80034bc <Ring_Buffer_Get_Count>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d07e      	beq.n	8003850 <UARTCommandConsoleLoop+0x140>
	{
	Ring_Buffer_Get_Char(&cRxedChar);
 8003752:	4844      	ldr	r0, [pc, #272]	; (8003864 <UARTCommandConsoleLoop+0x154>)
 8003754:	f7ff fe82 	bl	800345c <Ring_Buffer_Get_Char>
	/* Echo the character back. */
	   //xSerialPutChar(&huart2, cRxedChar);
	/* Was it the end of the line? */
	if (cRxedChar == '\n')
 8003758:	4b42      	ldr	r3, [pc, #264]	; (8003864 <UARTCommandConsoleLoop+0x154>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b0a      	cmp	r3, #10
 800375e:	d140      	bne.n	80037e2 <UARTCommandConsoleLoop+0xd2>
	    {
	    /* Just to space the output from the input. */
	    //vSerialPutString(&huart2, (uint8_t * ) pcNewLine, (unsigned short ) strlen(pcNewLine));
	    /* See if the command is empty, indicating that the last command
	     is to be executed again. */
	    if (ucInputIndex == 0)
 8003760:	4b41      	ldr	r3, [pc, #260]	; (8003868 <UARTCommandConsoleLoop+0x158>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d103      	bne.n	8003770 <UARTCommandConsoleLoop+0x60>
		{
		/* Copy the last command back into the input string. */
		strcpy(cInputString, cLastInputString);
 8003768:	4940      	ldr	r1, [pc, #256]	; (800386c <UARTCommandConsoleLoop+0x15c>)
 800376a:	4841      	ldr	r0, [pc, #260]	; (8003870 <UARTCommandConsoleLoop+0x160>)
 800376c:	f000 fbca 	bl	8003f04 <strcpy>
	     pdFALSE	(indicating there is no more output) as it might
	     generate more than one string. */
	    do
		{
		/* Get the next output string from the command interpreter. */
		xReturned = FreeRTOS_CLIProcessCommand(cInputString,
 8003770:	4b39      	ldr	r3, [pc, #228]	; (8003858 <UARTCommandConsoleLoop+0x148>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003778:	4619      	mov	r1, r3
 800377a:	483d      	ldr	r0, [pc, #244]	; (8003870 <UARTCommandConsoleLoop+0x160>)
 800377c:	f7ff fa76 	bl	8002c6c <FreeRTOS_CLIProcessCommand>
 8003780:	4603      	mov	r3, r0
 8003782:	461a      	mov	r2, r3
 8003784:	4b3b      	ldr	r3, [pc, #236]	; (8003874 <UARTCommandConsoleLoop+0x164>)
 8003786:	801a      	strh	r2, [r3, #0]
			pcOutputString, 256);

		/* Write the generated string to the UART. */
		vSerialPutString(&huart2, (uint8_t *) pcOutputString,
 8003788:	4b33      	ldr	r3, [pc, #204]	; (8003858 <UARTCommandConsoleLoop+0x148>)
 800378a:	681c      	ldr	r4, [r3, #0]
			(unsigned short) strlen(pcOutputString));
 800378c:	4b32      	ldr	r3, [pc, #200]	; (8003858 <UARTCommandConsoleLoop+0x148>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fc fd25 	bl	80001e0 <strlen>
 8003796:	4603      	mov	r3, r0
		vSerialPutString(&huart2, (uint8_t *) pcOutputString,
 8003798:	b29b      	uxth	r3, r3
 800379a:	461a      	mov	r2, r3
 800379c:	4621      	mov	r1, r4
 800379e:	4830      	ldr	r0, [pc, #192]	; (8003860 <UARTCommandConsoleLoop+0x150>)
 80037a0:	f7ff ff9c 	bl	80036dc <vSerialPutString>

		}
	    while (xReturned != pdFALSE);
 80037a4:	4b33      	ldr	r3, [pc, #204]	; (8003874 <UARTCommandConsoleLoop+0x164>)
 80037a6:	881b      	ldrh	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d1e1      	bne.n	8003770 <UARTCommandConsoleLoop+0x60>

	    /* All the strings generated by the input command have been
	     sent.  Clear the input string ready to receive the next command.
	     Remember the command that was just processed first in case it is
	     to be processed again. */
	    strcpy(cLastInputString, cInputString);
 80037ac:	4930      	ldr	r1, [pc, #192]	; (8003870 <UARTCommandConsoleLoop+0x160>)
 80037ae:	482f      	ldr	r0, [pc, #188]	; (800386c <UARTCommandConsoleLoop+0x15c>)
 80037b0:	f000 fba8 	bl	8003f04 <strcpy>
	    ucInputIndex = 0;
 80037b4:	4b2c      	ldr	r3, [pc, #176]	; (8003868 <UARTCommandConsoleLoop+0x158>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]
	    memset(cInputString, 0x00, cmdMAX_INPUT_SIZE);
 80037ba:	2232      	movs	r2, #50	; 0x32
 80037bc:	2100      	movs	r1, #0
 80037be:	482c      	ldr	r0, [pc, #176]	; (8003870 <UARTCommandConsoleLoop+0x160>)
 80037c0:	f000 fb58 	bl	8003e74 <memset>

	    vSerialPutString(&huart2, (uint8_t *) pcEndOfOutputMessage,
 80037c4:	4b2c      	ldr	r3, [pc, #176]	; (8003878 <UARTCommandConsoleLoop+0x168>)
 80037c6:	681c      	ldr	r4, [r3, #0]
		    (unsigned short) strlen(pcEndOfOutputMessage));
 80037c8:	4b2b      	ldr	r3, [pc, #172]	; (8003878 <UARTCommandConsoleLoop+0x168>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fc fd07 	bl	80001e0 <strlen>
 80037d2:	4603      	mov	r3, r0
	    vSerialPutString(&huart2, (uint8_t *) pcEndOfOutputMessage,
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	461a      	mov	r2, r3
 80037d8:	4621      	mov	r1, r4
 80037da:	4821      	ldr	r0, [pc, #132]	; (8003860 <UARTCommandConsoleLoop+0x150>)
 80037dc:	f7ff ff7e 	bl	80036dc <vSerialPutString>
		    }
		}
	    }

	}
    }
 80037e0:	e036      	b.n	8003850 <UARTCommandConsoleLoop+0x140>
	    if (cRxedChar == '\r')
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <UARTCommandConsoleLoop+0x154>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b0d      	cmp	r3, #13
 80037e8:	d032      	beq.n	8003850 <UARTCommandConsoleLoop+0x140>
	    else if ((cRxedChar == '\b') || (cRxedChar == cmdASCII_DEL))
 80037ea:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <UARTCommandConsoleLoop+0x154>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	d003      	beq.n	80037fa <UARTCommandConsoleLoop+0xea>
 80037f2:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <UARTCommandConsoleLoop+0x154>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b7f      	cmp	r3, #127	; 0x7f
 80037f8:	d110      	bne.n	800381c <UARTCommandConsoleLoop+0x10c>
		if (ucInputIndex > 0)
 80037fa:	4b1b      	ldr	r3, [pc, #108]	; (8003868 <UARTCommandConsoleLoop+0x158>)
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d026      	beq.n	8003850 <UARTCommandConsoleLoop+0x140>
		    ucInputIndex--;
 8003802:	4b19      	ldr	r3, [pc, #100]	; (8003868 <UARTCommandConsoleLoop+0x158>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	3b01      	subs	r3, #1
 8003808:	b2da      	uxtb	r2, r3
 800380a:	4b17      	ldr	r3, [pc, #92]	; (8003868 <UARTCommandConsoleLoop+0x158>)
 800380c:	701a      	strb	r2, [r3, #0]
		    cInputString[ucInputIndex] = '\0';
 800380e:	4b16      	ldr	r3, [pc, #88]	; (8003868 <UARTCommandConsoleLoop+0x158>)
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	461a      	mov	r2, r3
 8003814:	4b16      	ldr	r3, [pc, #88]	; (8003870 <UARTCommandConsoleLoop+0x160>)
 8003816:	2100      	movs	r1, #0
 8003818:	5499      	strb	r1, [r3, r2]
		if (ucInputIndex > 0)
 800381a:	e019      	b.n	8003850 <UARTCommandConsoleLoop+0x140>
		if ((cRxedChar >= ' ') && (cRxedChar <= '~'))
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <UARTCommandConsoleLoop+0x154>)
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b1f      	cmp	r3, #31
 8003822:	d915      	bls.n	8003850 <UARTCommandConsoleLoop+0x140>
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <UARTCommandConsoleLoop+0x154>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b7e      	cmp	r3, #126	; 0x7e
 800382a:	d811      	bhi.n	8003850 <UARTCommandConsoleLoop+0x140>
		    if (ucInputIndex < cmdMAX_INPUT_SIZE)
 800382c:	4b0e      	ldr	r3, [pc, #56]	; (8003868 <UARTCommandConsoleLoop+0x158>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b31      	cmp	r3, #49	; 0x31
 8003832:	d80d      	bhi.n	8003850 <UARTCommandConsoleLoop+0x140>
			cInputString[ucInputIndex] = cRxedChar;
 8003834:	4b0c      	ldr	r3, [pc, #48]	; (8003868 <UARTCommandConsoleLoop+0x158>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	4b0a      	ldr	r3, [pc, #40]	; (8003864 <UARTCommandConsoleLoop+0x154>)
 800383c:	7819      	ldrb	r1, [r3, #0]
 800383e:	4b0c      	ldr	r3, [pc, #48]	; (8003870 <UARTCommandConsoleLoop+0x160>)
 8003840:	5499      	strb	r1, [r3, r2]
			ucInputIndex++;
 8003842:	4b09      	ldr	r3, [pc, #36]	; (8003868 <UARTCommandConsoleLoop+0x158>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4b07      	ldr	r3, [pc, #28]	; (8003868 <UARTCommandConsoleLoop+0x158>)
 800384c:	701a      	strb	r2, [r3, #0]
    }
 800384e:	e7ff      	b.n	8003850 <UARTCommandConsoleLoop+0x140>
 8003850:	bf00      	nop
 8003852:	bd98      	pop	{r3, r4, r7, pc}
 8003854:	20000900 	.word	0x20000900
 8003858:	20000904 	.word	0x20000904
 800385c:	20000018 	.word	0x20000018
 8003860:	20000a10 	.word	0x20000a10
 8003864:	20000908 	.word	0x20000908
 8003868:	20000909 	.word	0x20000909
 800386c:	20000940 	.word	0x20000940
 8003870:	2000090c 	.word	0x2000090c
 8003874:	20000972 	.word	0x20000972
 8003878:	2000001c 	.word	0x2000001c

0800387c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <MX_USART2_UART_Init+0x50>)
 8003882:	4a13      	ldr	r2, [pc, #76]	; (80038d0 <MX_USART2_UART_Init+0x54>)
 8003884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003886:	4b11      	ldr	r3, [pc, #68]	; (80038cc <MX_USART2_UART_Init+0x50>)
 8003888:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800388c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800388e:	4b0f      	ldr	r3, [pc, #60]	; (80038cc <MX_USART2_UART_Init+0x50>)
 8003890:	2200      	movs	r2, #0
 8003892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003894:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <MX_USART2_UART_Init+0x50>)
 8003896:	2200      	movs	r2, #0
 8003898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800389a:	4b0c      	ldr	r3, [pc, #48]	; (80038cc <MX_USART2_UART_Init+0x50>)
 800389c:	2200      	movs	r2, #0
 800389e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038a0:	4b0a      	ldr	r3, [pc, #40]	; (80038cc <MX_USART2_UART_Init+0x50>)
 80038a2:	220c      	movs	r2, #12
 80038a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <MX_USART2_UART_Init+0x50>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038ac:	4b07      	ldr	r3, [pc, #28]	; (80038cc <MX_USART2_UART_Init+0x50>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038b2:	4806      	ldr	r0, [pc, #24]	; (80038cc <MX_USART2_UART_Init+0x50>)
 80038b4:	f7fe fdee 	bl	8002494 <HAL_UART_Init>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d003      	beq.n	80038c6 <MX_USART2_UART_Init+0x4a>
  {
    _Error_Handler(__FILE__, __LINE__);
 80038be:	2144      	movs	r1, #68	; 0x44
 80038c0:	4804      	ldr	r0, [pc, #16]	; (80038d4 <MX_USART2_UART_Init+0x58>)
 80038c2:	f7ff fda3 	bl	800340c <_Error_Handler>
  }

}
 80038c6:	bf00      	nop
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	20000a10 	.word	0x20000a10
 80038d0:	40004400 	.word	0x40004400
 80038d4:	08006cc4 	.word	0x08006cc4

080038d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b088      	sub	sp, #32
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(uartHandle->Instance==USART2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a2b      	ldr	r2, [pc, #172]	; (8003994 <HAL_UART_MspInit+0xbc>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d14f      	bne.n	800398a <HAL_UART_MspInit+0xb2>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	4a2a      	ldr	r2, [pc, #168]	; (8003998 <HAL_UART_MspInit+0xc0>)
 80038f0:	4b29      	ldr	r3, [pc, #164]	; (8003998 <HAL_UART_MspInit+0xc0>)
 80038f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f8:	6413      	str	r3, [r2, #64]	; 0x40
 80038fa:	4b27      	ldr	r3, [pc, #156]	; (8003998 <HAL_UART_MspInit+0xc0>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	60bb      	str	r3, [r7, #8]
 8003904:	68bb      	ldr	r3, [r7, #8]
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003906:	230c      	movs	r3, #12
 8003908:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800390a:	2302      	movs	r3, #2
 800390c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
 8003910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003912:	2300      	movs	r3, #0
 8003914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003916:	2307      	movs	r3, #7
 8003918:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391a:	f107 030c 	add.w	r3, r7, #12
 800391e:	4619      	mov	r1, r3
 8003920:	481e      	ldr	r0, [pc, #120]	; (800399c <HAL_UART_MspInit+0xc4>)
 8003922:	f7fd ffeb 	bl	80018fc <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003926:	4b1e      	ldr	r3, [pc, #120]	; (80039a0 <HAL_UART_MspInit+0xc8>)
 8003928:	4a1e      	ldr	r2, [pc, #120]	; (80039a4 <HAL_UART_MspInit+0xcc>)
 800392a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800392c:	4b1c      	ldr	r3, [pc, #112]	; (80039a0 <HAL_UART_MspInit+0xc8>)
 800392e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003932:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003934:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <HAL_UART_MspInit+0xc8>)
 8003936:	2200      	movs	r2, #0
 8003938:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800393a:	4b19      	ldr	r3, [pc, #100]	; (80039a0 <HAL_UART_MspInit+0xc8>)
 800393c:	2200      	movs	r2, #0
 800393e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003940:	4b17      	ldr	r3, [pc, #92]	; (80039a0 <HAL_UART_MspInit+0xc8>)
 8003942:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003946:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003948:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <HAL_UART_MspInit+0xc8>)
 800394a:	2200      	movs	r2, #0
 800394c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800394e:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <HAL_UART_MspInit+0xc8>)
 8003950:	2200      	movs	r2, #0
 8003952:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003954:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_UART_MspInit+0xc8>)
 8003956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800395a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800395c:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <HAL_UART_MspInit+0xc8>)
 800395e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003962:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_UART_MspInit+0xc8>)
 8003966:	2200      	movs	r2, #0
 8003968:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800396a:	480d      	ldr	r0, [pc, #52]	; (80039a0 <HAL_UART_MspInit+0xc8>)
 800396c:	f7fd fc50 	bl	8001210 <HAL_DMA_Init>
 8003970:	4603      	mov	r3, r0
 8003972:	2b00      	cmp	r3, #0
 8003974:	d003      	beq.n	800397e <HAL_UART_MspInit+0xa6>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003976:	216e      	movs	r1, #110	; 0x6e
 8003978:	480b      	ldr	r0, [pc, #44]	; (80039a8 <HAL_UART_MspInit+0xd0>)
 800397a:	f7ff fd47 	bl	800340c <_Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	4a07      	ldr	r2, [pc, #28]	; (80039a0 <HAL_UART_MspInit+0xc8>)
 8003982:	635a      	str	r2, [r3, #52]	; 0x34
 8003984:	4a06      	ldr	r2, [pc, #24]	; (80039a0 <HAL_UART_MspInit+0xc8>)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800398a:	bf00      	nop
 800398c:	3720      	adds	r7, #32
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40004400 	.word	0x40004400
 8003998:	40023800 	.word	0x40023800
 800399c:	40020000 	.word	0x40020000
 80039a0:	200009b0 	.word	0x200009b0
 80039a4:	40026088 	.word	0x40026088
 80039a8:	08006cc4 	.word	0x08006cc4

080039ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80039ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80039b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80039b2:	e003      	b.n	80039bc <LoopCopyDataInit>

080039b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80039b4:	4b0c      	ldr	r3, [pc, #48]	; (80039e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80039b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80039b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80039ba:	3104      	adds	r1, #4

080039bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80039bc:	480b      	ldr	r0, [pc, #44]	; (80039ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80039c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80039c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80039c4:	d3f6      	bcc.n	80039b4 <CopyDataInit>
  ldr  r2, =_sbss
 80039c6:	4a0b      	ldr	r2, [pc, #44]	; (80039f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80039c8:	e002      	b.n	80039d0 <LoopFillZerobss>

080039ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80039ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80039cc:	f842 3b04 	str.w	r3, [r2], #4

080039d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80039d0:	4b09      	ldr	r3, [pc, #36]	; (80039f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80039d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80039d4:	d3f9      	bcc.n	80039ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80039d6:	f7ff fe33 	bl	8003640 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039da:	f000 f811 	bl	8003a00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039de:	f7ff fc5b 	bl	8003298 <main>
  bx  lr    
 80039e2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80039e4:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80039e8:	08007010 	.word	0x08007010
  ldr  r0, =_sdata
 80039ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80039f0:	20000690 	.word	0x20000690
  ldr  r2, =_sbss
 80039f4:	20000690 	.word	0x20000690
  ldr  r3, = _ebss
 80039f8:	20000a60 	.word	0x20000a60

080039fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039fc:	e7fe      	b.n	80039fc <ADC_IRQHandler>
	...

08003a00 <__libc_init_array>:
 8003a00:	b570      	push	{r4, r5, r6, lr}
 8003a02:	4e0d      	ldr	r6, [pc, #52]	; (8003a38 <__libc_init_array+0x38>)
 8003a04:	4c0d      	ldr	r4, [pc, #52]	; (8003a3c <__libc_init_array+0x3c>)
 8003a06:	1ba4      	subs	r4, r4, r6
 8003a08:	10a4      	asrs	r4, r4, #2
 8003a0a:	2500      	movs	r5, #0
 8003a0c:	42a5      	cmp	r5, r4
 8003a0e:	d109      	bne.n	8003a24 <__libc_init_array+0x24>
 8003a10:	4e0b      	ldr	r6, [pc, #44]	; (8003a40 <__libc_init_array+0x40>)
 8003a12:	4c0c      	ldr	r4, [pc, #48]	; (8003a44 <__libc_init_array+0x44>)
 8003a14:	f002 ff58 	bl	80068c8 <_init>
 8003a18:	1ba4      	subs	r4, r4, r6
 8003a1a:	10a4      	asrs	r4, r4, #2
 8003a1c:	2500      	movs	r5, #0
 8003a1e:	42a5      	cmp	r5, r4
 8003a20:	d105      	bne.n	8003a2e <__libc_init_array+0x2e>
 8003a22:	bd70      	pop	{r4, r5, r6, pc}
 8003a24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a28:	4798      	blx	r3
 8003a2a:	3501      	adds	r5, #1
 8003a2c:	e7ee      	b.n	8003a0c <__libc_init_array+0xc>
 8003a2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a32:	4798      	blx	r3
 8003a34:	3501      	adds	r5, #1
 8003a36:	e7f2      	b.n	8003a1e <__libc_init_array+0x1e>
 8003a38:	08007008 	.word	0x08007008
 8003a3c:	08007008 	.word	0x08007008
 8003a40:	08007008 	.word	0x08007008
 8003a44:	0800700c 	.word	0x0800700c

08003a48 <malloc>:
 8003a48:	4b02      	ldr	r3, [pc, #8]	; (8003a54 <malloc+0xc>)
 8003a4a:	4601      	mov	r1, r0
 8003a4c:	6818      	ldr	r0, [r3, #0]
 8003a4e:	f000 b803 	b.w	8003a58 <_malloc_r>
 8003a52:	bf00      	nop
 8003a54:	20000430 	.word	0x20000430

08003a58 <_malloc_r>:
 8003a58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5c:	f101 040b 	add.w	r4, r1, #11
 8003a60:	2c16      	cmp	r4, #22
 8003a62:	4681      	mov	r9, r0
 8003a64:	d907      	bls.n	8003a76 <_malloc_r+0x1e>
 8003a66:	f034 0407 	bics.w	r4, r4, #7
 8003a6a:	d505      	bpl.n	8003a78 <_malloc_r+0x20>
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	f8c9 3000 	str.w	r3, [r9]
 8003a72:	2600      	movs	r6, #0
 8003a74:	e131      	b.n	8003cda <_malloc_r+0x282>
 8003a76:	2410      	movs	r4, #16
 8003a78:	428c      	cmp	r4, r1
 8003a7a:	d3f7      	bcc.n	8003a6c <_malloc_r+0x14>
 8003a7c:	4648      	mov	r0, r9
 8003a7e:	f000 fa01 	bl	8003e84 <__malloc_lock>
 8003a82:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8003a86:	4d9c      	ldr	r5, [pc, #624]	; (8003cf8 <_malloc_r+0x2a0>)
 8003a88:	d236      	bcs.n	8003af8 <_malloc_r+0xa0>
 8003a8a:	f104 0208 	add.w	r2, r4, #8
 8003a8e:	442a      	add	r2, r5
 8003a90:	f1a2 0108 	sub.w	r1, r2, #8
 8003a94:	6856      	ldr	r6, [r2, #4]
 8003a96:	428e      	cmp	r6, r1
 8003a98:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8003a9c:	d102      	bne.n	8003aa4 <_malloc_r+0x4c>
 8003a9e:	68d6      	ldr	r6, [r2, #12]
 8003aa0:	42b2      	cmp	r2, r6
 8003aa2:	d010      	beq.n	8003ac6 <_malloc_r+0x6e>
 8003aa4:	6873      	ldr	r3, [r6, #4]
 8003aa6:	68f2      	ldr	r2, [r6, #12]
 8003aa8:	68b1      	ldr	r1, [r6, #8]
 8003aaa:	f023 0303 	bic.w	r3, r3, #3
 8003aae:	60ca      	str	r2, [r1, #12]
 8003ab0:	4433      	add	r3, r6
 8003ab2:	6091      	str	r1, [r2, #8]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	f042 0201 	orr.w	r2, r2, #1
 8003aba:	605a      	str	r2, [r3, #4]
 8003abc:	4648      	mov	r0, r9
 8003abe:	f000 f9e7 	bl	8003e90 <__malloc_unlock>
 8003ac2:	3608      	adds	r6, #8
 8003ac4:	e109      	b.n	8003cda <_malloc_r+0x282>
 8003ac6:	3302      	adds	r3, #2
 8003ac8:	4a8c      	ldr	r2, [pc, #560]	; (8003cfc <_malloc_r+0x2a4>)
 8003aca:	692e      	ldr	r6, [r5, #16]
 8003acc:	4296      	cmp	r6, r2
 8003ace:	4611      	mov	r1, r2
 8003ad0:	d06d      	beq.n	8003bae <_malloc_r+0x156>
 8003ad2:	6870      	ldr	r0, [r6, #4]
 8003ad4:	f020 0003 	bic.w	r0, r0, #3
 8003ad8:	1b07      	subs	r7, r0, r4
 8003ada:	2f0f      	cmp	r7, #15
 8003adc:	dd47      	ble.n	8003b6e <_malloc_r+0x116>
 8003ade:	1933      	adds	r3, r6, r4
 8003ae0:	f044 0401 	orr.w	r4, r4, #1
 8003ae4:	6074      	str	r4, [r6, #4]
 8003ae6:	616b      	str	r3, [r5, #20]
 8003ae8:	612b      	str	r3, [r5, #16]
 8003aea:	60da      	str	r2, [r3, #12]
 8003aec:	609a      	str	r2, [r3, #8]
 8003aee:	f047 0201 	orr.w	r2, r7, #1
 8003af2:	605a      	str	r2, [r3, #4]
 8003af4:	5037      	str	r7, [r6, r0]
 8003af6:	e7e1      	b.n	8003abc <_malloc_r+0x64>
 8003af8:	0a63      	lsrs	r3, r4, #9
 8003afa:	d02a      	beq.n	8003b52 <_malloc_r+0xfa>
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d812      	bhi.n	8003b26 <_malloc_r+0xce>
 8003b00:	09a3      	lsrs	r3, r4, #6
 8003b02:	3338      	adds	r3, #56	; 0x38
 8003b04:	1c5a      	adds	r2, r3, #1
 8003b06:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8003b0a:	f1a2 0008 	sub.w	r0, r2, #8
 8003b0e:	6856      	ldr	r6, [r2, #4]
 8003b10:	4286      	cmp	r6, r0
 8003b12:	d006      	beq.n	8003b22 <_malloc_r+0xca>
 8003b14:	6872      	ldr	r2, [r6, #4]
 8003b16:	f022 0203 	bic.w	r2, r2, #3
 8003b1a:	1b11      	subs	r1, r2, r4
 8003b1c:	290f      	cmp	r1, #15
 8003b1e:	dd1c      	ble.n	8003b5a <_malloc_r+0x102>
 8003b20:	3b01      	subs	r3, #1
 8003b22:	3301      	adds	r3, #1
 8003b24:	e7d0      	b.n	8003ac8 <_malloc_r+0x70>
 8003b26:	2b14      	cmp	r3, #20
 8003b28:	d801      	bhi.n	8003b2e <_malloc_r+0xd6>
 8003b2a:	335b      	adds	r3, #91	; 0x5b
 8003b2c:	e7ea      	b.n	8003b04 <_malloc_r+0xac>
 8003b2e:	2b54      	cmp	r3, #84	; 0x54
 8003b30:	d802      	bhi.n	8003b38 <_malloc_r+0xe0>
 8003b32:	0b23      	lsrs	r3, r4, #12
 8003b34:	336e      	adds	r3, #110	; 0x6e
 8003b36:	e7e5      	b.n	8003b04 <_malloc_r+0xac>
 8003b38:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8003b3c:	d802      	bhi.n	8003b44 <_malloc_r+0xec>
 8003b3e:	0be3      	lsrs	r3, r4, #15
 8003b40:	3377      	adds	r3, #119	; 0x77
 8003b42:	e7df      	b.n	8003b04 <_malloc_r+0xac>
 8003b44:	f240 5254 	movw	r2, #1364	; 0x554
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d804      	bhi.n	8003b56 <_malloc_r+0xfe>
 8003b4c:	0ca3      	lsrs	r3, r4, #18
 8003b4e:	337c      	adds	r3, #124	; 0x7c
 8003b50:	e7d8      	b.n	8003b04 <_malloc_r+0xac>
 8003b52:	233f      	movs	r3, #63	; 0x3f
 8003b54:	e7d6      	b.n	8003b04 <_malloc_r+0xac>
 8003b56:	237e      	movs	r3, #126	; 0x7e
 8003b58:	e7d4      	b.n	8003b04 <_malloc_r+0xac>
 8003b5a:	2900      	cmp	r1, #0
 8003b5c:	68f1      	ldr	r1, [r6, #12]
 8003b5e:	db04      	blt.n	8003b6a <_malloc_r+0x112>
 8003b60:	68b3      	ldr	r3, [r6, #8]
 8003b62:	60d9      	str	r1, [r3, #12]
 8003b64:	608b      	str	r3, [r1, #8]
 8003b66:	18b3      	adds	r3, r6, r2
 8003b68:	e7a4      	b.n	8003ab4 <_malloc_r+0x5c>
 8003b6a:	460e      	mov	r6, r1
 8003b6c:	e7d0      	b.n	8003b10 <_malloc_r+0xb8>
 8003b6e:	2f00      	cmp	r7, #0
 8003b70:	616a      	str	r2, [r5, #20]
 8003b72:	612a      	str	r2, [r5, #16]
 8003b74:	db05      	blt.n	8003b82 <_malloc_r+0x12a>
 8003b76:	4430      	add	r0, r6
 8003b78:	6843      	ldr	r3, [r0, #4]
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	6043      	str	r3, [r0, #4]
 8003b80:	e79c      	b.n	8003abc <_malloc_r+0x64>
 8003b82:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8003b86:	d244      	bcs.n	8003c12 <_malloc_r+0x1ba>
 8003b88:	08c0      	lsrs	r0, r0, #3
 8003b8a:	1087      	asrs	r7, r0, #2
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	fa02 f707 	lsl.w	r7, r2, r7
 8003b92:	686a      	ldr	r2, [r5, #4]
 8003b94:	3001      	adds	r0, #1
 8003b96:	433a      	orrs	r2, r7
 8003b98:	606a      	str	r2, [r5, #4]
 8003b9a:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8003b9e:	f855 7030 	ldr.w	r7, [r5, r0, lsl #3]
 8003ba2:	60b7      	str	r7, [r6, #8]
 8003ba4:	3a08      	subs	r2, #8
 8003ba6:	60f2      	str	r2, [r6, #12]
 8003ba8:	f845 6030 	str.w	r6, [r5, r0, lsl #3]
 8003bac:	60fe      	str	r6, [r7, #12]
 8003bae:	2001      	movs	r0, #1
 8003bb0:	109a      	asrs	r2, r3, #2
 8003bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003bb6:	6868      	ldr	r0, [r5, #4]
 8003bb8:	4282      	cmp	r2, r0
 8003bba:	f200 80a1 	bhi.w	8003d00 <_malloc_r+0x2a8>
 8003bbe:	4202      	tst	r2, r0
 8003bc0:	d106      	bne.n	8003bd0 <_malloc_r+0x178>
 8003bc2:	f023 0303 	bic.w	r3, r3, #3
 8003bc6:	0052      	lsls	r2, r2, #1
 8003bc8:	4202      	tst	r2, r0
 8003bca:	f103 0304 	add.w	r3, r3, #4
 8003bce:	d0fa      	beq.n	8003bc6 <_malloc_r+0x16e>
 8003bd0:	eb05 0cc3 	add.w	ip, r5, r3, lsl #3
 8003bd4:	46e0      	mov	r8, ip
 8003bd6:	469e      	mov	lr, r3
 8003bd8:	f8d8 600c 	ldr.w	r6, [r8, #12]
 8003bdc:	4546      	cmp	r6, r8
 8003bde:	d153      	bne.n	8003c88 <_malloc_r+0x230>
 8003be0:	f10e 0e01 	add.w	lr, lr, #1
 8003be4:	f01e 0f03 	tst.w	lr, #3
 8003be8:	f108 0808 	add.w	r8, r8, #8
 8003bec:	d1f4      	bne.n	8003bd8 <_malloc_r+0x180>
 8003bee:	0798      	lsls	r0, r3, #30
 8003bf0:	d179      	bne.n	8003ce6 <_malloc_r+0x28e>
 8003bf2:	686b      	ldr	r3, [r5, #4]
 8003bf4:	ea23 0302 	bic.w	r3, r3, r2
 8003bf8:	606b      	str	r3, [r5, #4]
 8003bfa:	6868      	ldr	r0, [r5, #4]
 8003bfc:	0052      	lsls	r2, r2, #1
 8003bfe:	4282      	cmp	r2, r0
 8003c00:	d87e      	bhi.n	8003d00 <_malloc_r+0x2a8>
 8003c02:	2a00      	cmp	r2, #0
 8003c04:	d07c      	beq.n	8003d00 <_malloc_r+0x2a8>
 8003c06:	4673      	mov	r3, lr
 8003c08:	4202      	tst	r2, r0
 8003c0a:	d1e1      	bne.n	8003bd0 <_malloc_r+0x178>
 8003c0c:	3304      	adds	r3, #4
 8003c0e:	0052      	lsls	r2, r2, #1
 8003c10:	e7fa      	b.n	8003c08 <_malloc_r+0x1b0>
 8003c12:	0a42      	lsrs	r2, r0, #9
 8003c14:	2a04      	cmp	r2, #4
 8003c16:	d815      	bhi.n	8003c44 <_malloc_r+0x1ec>
 8003c18:	0982      	lsrs	r2, r0, #6
 8003c1a:	3238      	adds	r2, #56	; 0x38
 8003c1c:	1c57      	adds	r7, r2, #1
 8003c1e:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8003c22:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8003c26:	45be      	cmp	lr, r7
 8003c28:	d126      	bne.n	8003c78 <_malloc_r+0x220>
 8003c2a:	2001      	movs	r0, #1
 8003c2c:	1092      	asrs	r2, r2, #2
 8003c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003c32:	6868      	ldr	r0, [r5, #4]
 8003c34:	4310      	orrs	r0, r2
 8003c36:	6068      	str	r0, [r5, #4]
 8003c38:	f8c6 e00c 	str.w	lr, [r6, #12]
 8003c3c:	60b7      	str	r7, [r6, #8]
 8003c3e:	f8ce 6008 	str.w	r6, [lr, #8]
 8003c42:	e7b3      	b.n	8003bac <_malloc_r+0x154>
 8003c44:	2a14      	cmp	r2, #20
 8003c46:	d801      	bhi.n	8003c4c <_malloc_r+0x1f4>
 8003c48:	325b      	adds	r2, #91	; 0x5b
 8003c4a:	e7e7      	b.n	8003c1c <_malloc_r+0x1c4>
 8003c4c:	2a54      	cmp	r2, #84	; 0x54
 8003c4e:	d802      	bhi.n	8003c56 <_malloc_r+0x1fe>
 8003c50:	0b02      	lsrs	r2, r0, #12
 8003c52:	326e      	adds	r2, #110	; 0x6e
 8003c54:	e7e2      	b.n	8003c1c <_malloc_r+0x1c4>
 8003c56:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8003c5a:	d802      	bhi.n	8003c62 <_malloc_r+0x20a>
 8003c5c:	0bc2      	lsrs	r2, r0, #15
 8003c5e:	3277      	adds	r2, #119	; 0x77
 8003c60:	e7dc      	b.n	8003c1c <_malloc_r+0x1c4>
 8003c62:	f240 5754 	movw	r7, #1364	; 0x554
 8003c66:	42ba      	cmp	r2, r7
 8003c68:	bf9a      	itte	ls
 8003c6a:	0c82      	lsrls	r2, r0, #18
 8003c6c:	327c      	addls	r2, #124	; 0x7c
 8003c6e:	227e      	movhi	r2, #126	; 0x7e
 8003c70:	e7d4      	b.n	8003c1c <_malloc_r+0x1c4>
 8003c72:	68bf      	ldr	r7, [r7, #8]
 8003c74:	45be      	cmp	lr, r7
 8003c76:	d004      	beq.n	8003c82 <_malloc_r+0x22a>
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	f022 0203 	bic.w	r2, r2, #3
 8003c7e:	4290      	cmp	r0, r2
 8003c80:	d3f7      	bcc.n	8003c72 <_malloc_r+0x21a>
 8003c82:	f8d7 e00c 	ldr.w	lr, [r7, #12]
 8003c86:	e7d7      	b.n	8003c38 <_malloc_r+0x1e0>
 8003c88:	6870      	ldr	r0, [r6, #4]
 8003c8a:	68f7      	ldr	r7, [r6, #12]
 8003c8c:	f020 0003 	bic.w	r0, r0, #3
 8003c90:	eba0 0a04 	sub.w	sl, r0, r4
 8003c94:	f1ba 0f0f 	cmp.w	sl, #15
 8003c98:	dd10      	ble.n	8003cbc <_malloc_r+0x264>
 8003c9a:	68b2      	ldr	r2, [r6, #8]
 8003c9c:	1933      	adds	r3, r6, r4
 8003c9e:	f044 0401 	orr.w	r4, r4, #1
 8003ca2:	6074      	str	r4, [r6, #4]
 8003ca4:	60d7      	str	r7, [r2, #12]
 8003ca6:	60ba      	str	r2, [r7, #8]
 8003ca8:	f04a 0201 	orr.w	r2, sl, #1
 8003cac:	616b      	str	r3, [r5, #20]
 8003cae:	612b      	str	r3, [r5, #16]
 8003cb0:	60d9      	str	r1, [r3, #12]
 8003cb2:	6099      	str	r1, [r3, #8]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	f846 a000 	str.w	sl, [r6, r0]
 8003cba:	e6ff      	b.n	8003abc <_malloc_r+0x64>
 8003cbc:	f1ba 0f00 	cmp.w	sl, #0
 8003cc0:	db0f      	blt.n	8003ce2 <_malloc_r+0x28a>
 8003cc2:	4430      	add	r0, r6
 8003cc4:	6843      	ldr	r3, [r0, #4]
 8003cc6:	f043 0301 	orr.w	r3, r3, #1
 8003cca:	6043      	str	r3, [r0, #4]
 8003ccc:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8003cd0:	4648      	mov	r0, r9
 8003cd2:	60df      	str	r7, [r3, #12]
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	f000 f8db 	bl	8003e90 <__malloc_unlock>
 8003cda:	4630      	mov	r0, r6
 8003cdc:	b003      	add	sp, #12
 8003cde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ce2:	463e      	mov	r6, r7
 8003ce4:	e77a      	b.n	8003bdc <_malloc_r+0x184>
 8003ce6:	f85c 0908 	ldr.w	r0, [ip], #-8
 8003cea:	4584      	cmp	ip, r0
 8003cec:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8003cf0:	f43f af7d 	beq.w	8003bee <_malloc_r+0x196>
 8003cf4:	e781      	b.n	8003bfa <_malloc_r+0x1a2>
 8003cf6:	bf00      	nop
 8003cf8:	20000020 	.word	0x20000020
 8003cfc:	20000028 	.word	0x20000028
 8003d00:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8003d04:	f8db 6004 	ldr.w	r6, [fp, #4]
 8003d08:	f026 0603 	bic.w	r6, r6, #3
 8003d0c:	42b4      	cmp	r4, r6
 8003d0e:	d803      	bhi.n	8003d18 <_malloc_r+0x2c0>
 8003d10:	1b33      	subs	r3, r6, r4
 8003d12:	2b0f      	cmp	r3, #15
 8003d14:	f300 8096 	bgt.w	8003e44 <_malloc_r+0x3ec>
 8003d18:	4a4f      	ldr	r2, [pc, #316]	; (8003e58 <_malloc_r+0x400>)
 8003d1a:	6817      	ldr	r7, [r2, #0]
 8003d1c:	4a4f      	ldr	r2, [pc, #316]	; (8003e5c <_malloc_r+0x404>)
 8003d1e:	6811      	ldr	r1, [r2, #0]
 8003d20:	3710      	adds	r7, #16
 8003d22:	3101      	adds	r1, #1
 8003d24:	eb0b 0306 	add.w	r3, fp, r6
 8003d28:	4427      	add	r7, r4
 8003d2a:	d005      	beq.n	8003d38 <_malloc_r+0x2e0>
 8003d2c:	494c      	ldr	r1, [pc, #304]	; (8003e60 <_malloc_r+0x408>)
 8003d2e:	3901      	subs	r1, #1
 8003d30:	440f      	add	r7, r1
 8003d32:	3101      	adds	r1, #1
 8003d34:	4249      	negs	r1, r1
 8003d36:	400f      	ands	r7, r1
 8003d38:	4639      	mov	r1, r7
 8003d3a:	4648      	mov	r0, r9
 8003d3c:	9201      	str	r2, [sp, #4]
 8003d3e:	9300      	str	r3, [sp, #0]
 8003d40:	f000 f8ac 	bl	8003e9c <_sbrk_r>
 8003d44:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003d48:	4680      	mov	r8, r0
 8003d4a:	d056      	beq.n	8003dfa <_malloc_r+0x3a2>
 8003d4c:	9b00      	ldr	r3, [sp, #0]
 8003d4e:	9a01      	ldr	r2, [sp, #4]
 8003d50:	4283      	cmp	r3, r0
 8003d52:	d901      	bls.n	8003d58 <_malloc_r+0x300>
 8003d54:	45ab      	cmp	fp, r5
 8003d56:	d150      	bne.n	8003dfa <_malloc_r+0x3a2>
 8003d58:	4842      	ldr	r0, [pc, #264]	; (8003e64 <_malloc_r+0x40c>)
 8003d5a:	6801      	ldr	r1, [r0, #0]
 8003d5c:	4543      	cmp	r3, r8
 8003d5e:	eb07 0e01 	add.w	lr, r7, r1
 8003d62:	f8c0 e000 	str.w	lr, [r0]
 8003d66:	4940      	ldr	r1, [pc, #256]	; (8003e68 <_malloc_r+0x410>)
 8003d68:	4682      	mov	sl, r0
 8003d6a:	d113      	bne.n	8003d94 <_malloc_r+0x33c>
 8003d6c:	420b      	tst	r3, r1
 8003d6e:	d111      	bne.n	8003d94 <_malloc_r+0x33c>
 8003d70:	68ab      	ldr	r3, [r5, #8]
 8003d72:	443e      	add	r6, r7
 8003d74:	f046 0601 	orr.w	r6, r6, #1
 8003d78:	605e      	str	r6, [r3, #4]
 8003d7a:	4a3c      	ldr	r2, [pc, #240]	; (8003e6c <_malloc_r+0x414>)
 8003d7c:	f8da 3000 	ldr.w	r3, [sl]
 8003d80:	6811      	ldr	r1, [r2, #0]
 8003d82:	428b      	cmp	r3, r1
 8003d84:	bf88      	it	hi
 8003d86:	6013      	strhi	r3, [r2, #0]
 8003d88:	4a39      	ldr	r2, [pc, #228]	; (8003e70 <_malloc_r+0x418>)
 8003d8a:	6811      	ldr	r1, [r2, #0]
 8003d8c:	428b      	cmp	r3, r1
 8003d8e:	bf88      	it	hi
 8003d90:	6013      	strhi	r3, [r2, #0]
 8003d92:	e032      	b.n	8003dfa <_malloc_r+0x3a2>
 8003d94:	6810      	ldr	r0, [r2, #0]
 8003d96:	3001      	adds	r0, #1
 8003d98:	bf1b      	ittet	ne
 8003d9a:	eba8 0303 	subne.w	r3, r8, r3
 8003d9e:	4473      	addne	r3, lr
 8003da0:	f8c2 8000 	streq.w	r8, [r2]
 8003da4:	f8ca 3000 	strne.w	r3, [sl]
 8003da8:	f018 0007 	ands.w	r0, r8, #7
 8003dac:	bf1c      	itt	ne
 8003dae:	f1c0 0008 	rsbne	r0, r0, #8
 8003db2:	4480      	addne	r8, r0
 8003db4:	4b2a      	ldr	r3, [pc, #168]	; (8003e60 <_malloc_r+0x408>)
 8003db6:	4447      	add	r7, r8
 8003db8:	4418      	add	r0, r3
 8003dba:	400f      	ands	r7, r1
 8003dbc:	1bc7      	subs	r7, r0, r7
 8003dbe:	4639      	mov	r1, r7
 8003dc0:	4648      	mov	r0, r9
 8003dc2:	f000 f86b 	bl	8003e9c <_sbrk_r>
 8003dc6:	1c43      	adds	r3, r0, #1
 8003dc8:	bf08      	it	eq
 8003dca:	4640      	moveq	r0, r8
 8003dcc:	f8da 3000 	ldr.w	r3, [sl]
 8003dd0:	f8c5 8008 	str.w	r8, [r5, #8]
 8003dd4:	bf08      	it	eq
 8003dd6:	2700      	moveq	r7, #0
 8003dd8:	eba0 0008 	sub.w	r0, r0, r8
 8003ddc:	443b      	add	r3, r7
 8003dde:	4407      	add	r7, r0
 8003de0:	f047 0701 	orr.w	r7, r7, #1
 8003de4:	45ab      	cmp	fp, r5
 8003de6:	f8ca 3000 	str.w	r3, [sl]
 8003dea:	f8c8 7004 	str.w	r7, [r8, #4]
 8003dee:	d0c4      	beq.n	8003d7a <_malloc_r+0x322>
 8003df0:	2e0f      	cmp	r6, #15
 8003df2:	d810      	bhi.n	8003e16 <_malloc_r+0x3be>
 8003df4:	2301      	movs	r3, #1
 8003df6:	f8c8 3004 	str.w	r3, [r8, #4]
 8003dfa:	68ab      	ldr	r3, [r5, #8]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	f022 0203 	bic.w	r2, r2, #3
 8003e02:	4294      	cmp	r4, r2
 8003e04:	eba2 0304 	sub.w	r3, r2, r4
 8003e08:	d801      	bhi.n	8003e0e <_malloc_r+0x3b6>
 8003e0a:	2b0f      	cmp	r3, #15
 8003e0c:	dc1a      	bgt.n	8003e44 <_malloc_r+0x3ec>
 8003e0e:	4648      	mov	r0, r9
 8003e10:	f000 f83e 	bl	8003e90 <__malloc_unlock>
 8003e14:	e62d      	b.n	8003a72 <_malloc_r+0x1a>
 8003e16:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003e1a:	3e0c      	subs	r6, #12
 8003e1c:	f026 0607 	bic.w	r6, r6, #7
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	4333      	orrs	r3, r6
 8003e26:	f8cb 3004 	str.w	r3, [fp, #4]
 8003e2a:	eb0b 0306 	add.w	r3, fp, r6
 8003e2e:	2205      	movs	r2, #5
 8003e30:	2e0f      	cmp	r6, #15
 8003e32:	605a      	str	r2, [r3, #4]
 8003e34:	609a      	str	r2, [r3, #8]
 8003e36:	d9a0      	bls.n	8003d7a <_malloc_r+0x322>
 8003e38:	f10b 0108 	add.w	r1, fp, #8
 8003e3c:	4648      	mov	r0, r9
 8003e3e:	f001 ff2b 	bl	8005c98 <_free_r>
 8003e42:	e79a      	b.n	8003d7a <_malloc_r+0x322>
 8003e44:	68ae      	ldr	r6, [r5, #8]
 8003e46:	f044 0201 	orr.w	r2, r4, #1
 8003e4a:	4434      	add	r4, r6
 8003e4c:	f043 0301 	orr.w	r3, r3, #1
 8003e50:	6072      	str	r2, [r6, #4]
 8003e52:	60ac      	str	r4, [r5, #8]
 8003e54:	6063      	str	r3, [r4, #4]
 8003e56:	e631      	b.n	8003abc <_malloc_r+0x64>
 8003e58:	200009a4 	.word	0x200009a4
 8003e5c:	20000428 	.word	0x20000428
 8003e60:	00000080 	.word	0x00000080
 8003e64:	20000974 	.word	0x20000974
 8003e68:	0000007f 	.word	0x0000007f
 8003e6c:	2000099c 	.word	0x2000099c
 8003e70:	200009a0 	.word	0x200009a0

08003e74 <memset>:
 8003e74:	4402      	add	r2, r0
 8003e76:	4603      	mov	r3, r0
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d100      	bne.n	8003e7e <memset+0xa>
 8003e7c:	4770      	bx	lr
 8003e7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e82:	e7f9      	b.n	8003e78 <memset+0x4>

08003e84 <__malloc_lock>:
 8003e84:	4801      	ldr	r0, [pc, #4]	; (8003e8c <__malloc_lock+0x8>)
 8003e86:	f001 bfd1 	b.w	8005e2c <__retarget_lock_acquire_recursive>
 8003e8a:	bf00      	nop
 8003e8c:	20000a54 	.word	0x20000a54

08003e90 <__malloc_unlock>:
 8003e90:	4801      	ldr	r0, [pc, #4]	; (8003e98 <__malloc_unlock+0x8>)
 8003e92:	f001 bfcc 	b.w	8005e2e <__retarget_lock_release_recursive>
 8003e96:	bf00      	nop
 8003e98:	20000a54 	.word	0x20000a54

08003e9c <_sbrk_r>:
 8003e9c:	b538      	push	{r3, r4, r5, lr}
 8003e9e:	4c06      	ldr	r4, [pc, #24]	; (8003eb8 <_sbrk_r+0x1c>)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	4608      	mov	r0, r1
 8003ea6:	6023      	str	r3, [r4, #0]
 8003ea8:	f002 fd00 	bl	80068ac <_sbrk>
 8003eac:	1c43      	adds	r3, r0, #1
 8003eae:	d102      	bne.n	8003eb6 <_sbrk_r+0x1a>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	b103      	cbz	r3, 8003eb6 <_sbrk_r+0x1a>
 8003eb4:	602b      	str	r3, [r5, #0]
 8003eb6:	bd38      	pop	{r3, r4, r5, pc}
 8003eb8:	20000a5c 	.word	0x20000a5c

08003ebc <sprintf>:
 8003ebc:	b40e      	push	{r1, r2, r3}
 8003ebe:	b500      	push	{lr}
 8003ec0:	b09c      	sub	sp, #112	; 0x70
 8003ec2:	f44f 7102 	mov.w	r1, #520	; 0x208
 8003ec6:	ab1d      	add	r3, sp, #116	; 0x74
 8003ec8:	f8ad 1014 	strh.w	r1, [sp, #20]
 8003ecc:	9002      	str	r0, [sp, #8]
 8003ece:	9006      	str	r0, [sp, #24]
 8003ed0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003ed4:	480a      	ldr	r0, [pc, #40]	; (8003f00 <sprintf+0x44>)
 8003ed6:	9104      	str	r1, [sp, #16]
 8003ed8:	9107      	str	r1, [sp, #28]
 8003eda:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003ede:	f853 2b04 	ldr.w	r2, [r3], #4
 8003ee2:	f8ad 1016 	strh.w	r1, [sp, #22]
 8003ee6:	6800      	ldr	r0, [r0, #0]
 8003ee8:	9301      	str	r3, [sp, #4]
 8003eea:	a902      	add	r1, sp, #8
 8003eec:	f000 f850 	bl	8003f90 <_svfprintf_r>
 8003ef0:	9b02      	ldr	r3, [sp, #8]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	701a      	strb	r2, [r3, #0]
 8003ef6:	b01c      	add	sp, #112	; 0x70
 8003ef8:	f85d eb04 	ldr.w	lr, [sp], #4
 8003efc:	b003      	add	sp, #12
 8003efe:	4770      	bx	lr
 8003f00:	20000430 	.word	0x20000430

08003f04 <strcpy>:
 8003f04:	4603      	mov	r3, r0
 8003f06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003f0a:	f803 2b01 	strb.w	r2, [r3], #1
 8003f0e:	2a00      	cmp	r2, #0
 8003f10:	d1f9      	bne.n	8003f06 <strcpy+0x2>
 8003f12:	4770      	bx	lr

08003f14 <strncat>:
 8003f14:	b530      	push	{r4, r5, lr}
 8003f16:	4603      	mov	r3, r0
 8003f18:	781c      	ldrb	r4, [r3, #0]
 8003f1a:	1c5d      	adds	r5, r3, #1
 8003f1c:	b944      	cbnz	r4, 8003f30 <strncat+0x1c>
 8003f1e:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
 8003f22:	d304      	bcc.n	8003f2e <strncat+0x1a>
 8003f24:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003f28:	f803 4b01 	strb.w	r4, [r3], #1
 8003f2c:	b914      	cbnz	r4, 8003f34 <strncat+0x20>
 8003f2e:	bd30      	pop	{r4, r5, pc}
 8003f30:	462b      	mov	r3, r5
 8003f32:	e7f1      	b.n	8003f18 <strncat+0x4>
 8003f34:	2a00      	cmp	r2, #0
 8003f36:	d1f2      	bne.n	8003f1e <strncat+0xa>
 8003f38:	701a      	strb	r2, [r3, #0]
 8003f3a:	e7f0      	b.n	8003f1e <strncat+0xa>

08003f3c <strncmp>:
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	b16a      	cbz	r2, 8003f5c <strncmp+0x20>
 8003f40:	3901      	subs	r1, #1
 8003f42:	1884      	adds	r4, r0, r2
 8003f44:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003f48:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d103      	bne.n	8003f58 <strncmp+0x1c>
 8003f50:	42a0      	cmp	r0, r4
 8003f52:	d001      	beq.n	8003f58 <strncmp+0x1c>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f5      	bne.n	8003f44 <strncmp+0x8>
 8003f58:	1a98      	subs	r0, r3, r2
 8003f5a:	bd10      	pop	{r4, pc}
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	bd10      	pop	{r4, pc}

08003f60 <strncpy>:
 8003f60:	b570      	push	{r4, r5, r6, lr}
 8003f62:	4604      	mov	r4, r0
 8003f64:	b902      	cbnz	r2, 8003f68 <strncpy+0x8>
 8003f66:	bd70      	pop	{r4, r5, r6, pc}
 8003f68:	4623      	mov	r3, r4
 8003f6a:	f811 5b01 	ldrb.w	r5, [r1], #1
 8003f6e:	f803 5b01 	strb.w	r5, [r3], #1
 8003f72:	1e56      	subs	r6, r2, #1
 8003f74:	b91d      	cbnz	r5, 8003f7e <strncpy+0x1e>
 8003f76:	4414      	add	r4, r2
 8003f78:	42a3      	cmp	r3, r4
 8003f7a:	d103      	bne.n	8003f84 <strncpy+0x24>
 8003f7c:	bd70      	pop	{r4, r5, r6, pc}
 8003f7e:	461c      	mov	r4, r3
 8003f80:	4632      	mov	r2, r6
 8003f82:	e7ef      	b.n	8003f64 <strncpy+0x4>
 8003f84:	f803 5b01 	strb.w	r5, [r3], #1
 8003f88:	e7f6      	b.n	8003f78 <strncpy+0x18>
 8003f8a:	0000      	movs	r0, r0
 8003f8c:	0000      	movs	r0, r0
	...

08003f90 <_svfprintf_r>:
 8003f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f94:	b0bd      	sub	sp, #244	; 0xf4
 8003f96:	468a      	mov	sl, r1
 8003f98:	4615      	mov	r5, r2
 8003f9a:	461f      	mov	r7, r3
 8003f9c:	4683      	mov	fp, r0
 8003f9e:	f001 ff37 	bl	8005e10 <_localeconv_r>
 8003fa2:	6803      	ldr	r3, [r0, #0]
 8003fa4:	930d      	str	r3, [sp, #52]	; 0x34
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fc f91a 	bl	80001e0 <strlen>
 8003fac:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8003fb0:	9008      	str	r0, [sp, #32]
 8003fb2:	061b      	lsls	r3, r3, #24
 8003fb4:	d518      	bpl.n	8003fe8 <_svfprintf_r+0x58>
 8003fb6:	f8da 3010 	ldr.w	r3, [sl, #16]
 8003fba:	b9ab      	cbnz	r3, 8003fe8 <_svfprintf_r+0x58>
 8003fbc:	2140      	movs	r1, #64	; 0x40
 8003fbe:	4658      	mov	r0, fp
 8003fc0:	f7ff fd4a 	bl	8003a58 <_malloc_r>
 8003fc4:	f8ca 0000 	str.w	r0, [sl]
 8003fc8:	f8ca 0010 	str.w	r0, [sl, #16]
 8003fcc:	b948      	cbnz	r0, 8003fe2 <_svfprintf_r+0x52>
 8003fce:	230c      	movs	r3, #12
 8003fd0:	f8cb 3000 	str.w	r3, [fp]
 8003fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8003fda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003fdc:	b03d      	add	sp, #244	; 0xf4
 8003fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fe2:	2340      	movs	r3, #64	; 0x40
 8003fe4:	f8ca 3014 	str.w	r3, [sl, #20]
 8003fe8:	ed9f 7b99 	vldr	d7, [pc, #612]	; 8004250 <_svfprintf_r+0x2c0>
 8003fec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	ac2c      	add	r4, sp, #176	; 0xb0
 8003ff4:	941f      	str	r4, [sp, #124]	; 0x7c
 8003ff6:	9321      	str	r3, [sp, #132]	; 0x84
 8003ff8:	9320      	str	r3, [sp, #128]	; 0x80
 8003ffa:	9505      	str	r5, [sp, #20]
 8003ffc:	9303      	str	r3, [sp, #12]
 8003ffe:	9311      	str	r3, [sp, #68]	; 0x44
 8004000:	9310      	str	r3, [sp, #64]	; 0x40
 8004002:	9309      	str	r3, [sp, #36]	; 0x24
 8004004:	9d05      	ldr	r5, [sp, #20]
 8004006:	462b      	mov	r3, r5
 8004008:	f813 2b01 	ldrb.w	r2, [r3], #1
 800400c:	b112      	cbz	r2, 8004014 <_svfprintf_r+0x84>
 800400e:	2a25      	cmp	r2, #37	; 0x25
 8004010:	f040 8083 	bne.w	800411a <_svfprintf_r+0x18a>
 8004014:	9b05      	ldr	r3, [sp, #20]
 8004016:	1aee      	subs	r6, r5, r3
 8004018:	d00d      	beq.n	8004036 <_svfprintf_r+0xa6>
 800401a:	e884 0048 	stmia.w	r4, {r3, r6}
 800401e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004020:	4433      	add	r3, r6
 8004022:	9321      	str	r3, [sp, #132]	; 0x84
 8004024:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004026:	3301      	adds	r3, #1
 8004028:	2b07      	cmp	r3, #7
 800402a:	9320      	str	r3, [sp, #128]	; 0x80
 800402c:	dc77      	bgt.n	800411e <_svfprintf_r+0x18e>
 800402e:	3408      	adds	r4, #8
 8004030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004032:	4433      	add	r3, r6
 8004034:	9309      	str	r3, [sp, #36]	; 0x24
 8004036:	782b      	ldrb	r3, [r5, #0]
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 8729 	beq.w	8004e90 <_svfprintf_r+0xf00>
 800403e:	2300      	movs	r3, #0
 8004040:	1c69      	adds	r1, r5, #1
 8004042:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004046:	461a      	mov	r2, r3
 8004048:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 800404c:	930a      	str	r3, [sp, #40]	; 0x28
 800404e:	461d      	mov	r5, r3
 8004050:	200a      	movs	r0, #10
 8004052:	1c4e      	adds	r6, r1, #1
 8004054:	7809      	ldrb	r1, [r1, #0]
 8004056:	9605      	str	r6, [sp, #20]
 8004058:	9102      	str	r1, [sp, #8]
 800405a:	9902      	ldr	r1, [sp, #8]
 800405c:	3920      	subs	r1, #32
 800405e:	2958      	cmp	r1, #88	; 0x58
 8004060:	f200 8418 	bhi.w	8004894 <_svfprintf_r+0x904>
 8004064:	e8df f011 	tbh	[pc, r1, lsl #1]
 8004068:	041600a6 	.word	0x041600a6
 800406c:	00ab0416 	.word	0x00ab0416
 8004070:	04160416 	.word	0x04160416
 8004074:	04160416 	.word	0x04160416
 8004078:	04160416 	.word	0x04160416
 800407c:	006500ae 	.word	0x006500ae
 8004080:	00b70416 	.word	0x00b70416
 8004084:	041600ba 	.word	0x041600ba
 8004088:	00da00d7 	.word	0x00da00d7
 800408c:	00da00da 	.word	0x00da00da
 8004090:	00da00da 	.word	0x00da00da
 8004094:	00da00da 	.word	0x00da00da
 8004098:	00da00da 	.word	0x00da00da
 800409c:	04160416 	.word	0x04160416
 80040a0:	04160416 	.word	0x04160416
 80040a4:	04160416 	.word	0x04160416
 80040a8:	04160416 	.word	0x04160416
 80040ac:	04160416 	.word	0x04160416
 80040b0:	012b0115 	.word	0x012b0115
 80040b4:	012b0416 	.word	0x012b0416
 80040b8:	04160416 	.word	0x04160416
 80040bc:	04160416 	.word	0x04160416
 80040c0:	041600ed 	.word	0x041600ed
 80040c4:	03400416 	.word	0x03400416
 80040c8:	04160416 	.word	0x04160416
 80040cc:	04160416 	.word	0x04160416
 80040d0:	03a80416 	.word	0x03a80416
 80040d4:	04160416 	.word	0x04160416
 80040d8:	04160086 	.word	0x04160086
 80040dc:	04160416 	.word	0x04160416
 80040e0:	04160416 	.word	0x04160416
 80040e4:	04160416 	.word	0x04160416
 80040e8:	04160416 	.word	0x04160416
 80040ec:	01070416 	.word	0x01070416
 80040f0:	012b006b 	.word	0x012b006b
 80040f4:	012b012b 	.word	0x012b012b
 80040f8:	006b00f0 	.word	0x006b00f0
 80040fc:	04160416 	.word	0x04160416
 8004100:	041600fa 	.word	0x041600fa
 8004104:	03420322 	.word	0x03420322
 8004108:	01010376 	.word	0x01010376
 800410c:	03870416 	.word	0x03870416
 8004110:	03aa0416 	.word	0x03aa0416
 8004114:	04160416 	.word	0x04160416
 8004118:	03c2      	.short	0x03c2
 800411a:	461d      	mov	r5, r3
 800411c:	e773      	b.n	8004006 <_svfprintf_r+0x76>
 800411e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004120:	4651      	mov	r1, sl
 8004122:	4658      	mov	r0, fp
 8004124:	f002 f960 	bl	80063e8 <__ssprint_r>
 8004128:	2800      	cmp	r0, #0
 800412a:	f040 8692 	bne.w	8004e52 <_svfprintf_r+0xec2>
 800412e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004130:	e77e      	b.n	8004030 <_svfprintf_r+0xa0>
 8004132:	2301      	movs	r3, #1
 8004134:	222b      	movs	r2, #43	; 0x2b
 8004136:	9905      	ldr	r1, [sp, #20]
 8004138:	e78b      	b.n	8004052 <_svfprintf_r+0xc2>
 800413a:	460f      	mov	r7, r1
 800413c:	e7fb      	b.n	8004136 <_svfprintf_r+0x1a6>
 800413e:	b10b      	cbz	r3, 8004144 <_svfprintf_r+0x1b4>
 8004140:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004144:	06ae      	lsls	r6, r5, #26
 8004146:	f140 80aa 	bpl.w	800429e <_svfprintf_r+0x30e>
 800414a:	3707      	adds	r7, #7
 800414c:	f027 0707 	bic.w	r7, r7, #7
 8004150:	f107 0308 	add.w	r3, r7, #8
 8004154:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004158:	9304      	str	r3, [sp, #16]
 800415a:	2e00      	cmp	r6, #0
 800415c:	f177 0300 	sbcs.w	r3, r7, #0
 8004160:	da06      	bge.n	8004170 <_svfprintf_r+0x1e0>
 8004162:	4276      	negs	r6, r6
 8004164:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8004168:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800416c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004170:	2301      	movs	r3, #1
 8004172:	e2ca      	b.n	800470a <_svfprintf_r+0x77a>
 8004174:	b10b      	cbz	r3, 800417a <_svfprintf_r+0x1ea>
 8004176:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800417a:	4b37      	ldr	r3, [pc, #220]	; (8004258 <_svfprintf_r+0x2c8>)
 800417c:	9311      	str	r3, [sp, #68]	; 0x44
 800417e:	06ab      	lsls	r3, r5, #26
 8004180:	f140 8339 	bpl.w	80047f6 <_svfprintf_r+0x866>
 8004184:	3707      	adds	r7, #7
 8004186:	f027 0707 	bic.w	r7, r7, #7
 800418a:	f107 0308 	add.w	r3, r7, #8
 800418e:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004192:	9304      	str	r3, [sp, #16]
 8004194:	07e8      	lsls	r0, r5, #31
 8004196:	d50b      	bpl.n	80041b0 <_svfprintf_r+0x220>
 8004198:	ea56 0307 	orrs.w	r3, r6, r7
 800419c:	d008      	beq.n	80041b0 <_svfprintf_r+0x220>
 800419e:	2330      	movs	r3, #48	; 0x30
 80041a0:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 80041a4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80041a8:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 80041ac:	f045 0502 	orr.w	r5, r5, #2
 80041b0:	2302      	movs	r3, #2
 80041b2:	e2a7      	b.n	8004704 <_svfprintf_r+0x774>
 80041b4:	2a00      	cmp	r2, #0
 80041b6:	d1be      	bne.n	8004136 <_svfprintf_r+0x1a6>
 80041b8:	2301      	movs	r3, #1
 80041ba:	2220      	movs	r2, #32
 80041bc:	e7bb      	b.n	8004136 <_svfprintf_r+0x1a6>
 80041be:	f045 0501 	orr.w	r5, r5, #1
 80041c2:	e7b8      	b.n	8004136 <_svfprintf_r+0x1a6>
 80041c4:	683e      	ldr	r6, [r7, #0]
 80041c6:	960a      	str	r6, [sp, #40]	; 0x28
 80041c8:	2e00      	cmp	r6, #0
 80041ca:	f107 0104 	add.w	r1, r7, #4
 80041ce:	dab4      	bge.n	800413a <_svfprintf_r+0x1aa>
 80041d0:	4276      	negs	r6, r6
 80041d2:	960a      	str	r6, [sp, #40]	; 0x28
 80041d4:	460f      	mov	r7, r1
 80041d6:	f045 0504 	orr.w	r5, r5, #4
 80041da:	e7ac      	b.n	8004136 <_svfprintf_r+0x1a6>
 80041dc:	9905      	ldr	r1, [sp, #20]
 80041de:	1c4e      	adds	r6, r1, #1
 80041e0:	7809      	ldrb	r1, [r1, #0]
 80041e2:	9102      	str	r1, [sp, #8]
 80041e4:	292a      	cmp	r1, #42	; 0x2a
 80041e6:	d010      	beq.n	800420a <_svfprintf_r+0x27a>
 80041e8:	f04f 0900 	mov.w	r9, #0
 80041ec:	9605      	str	r6, [sp, #20]
 80041ee:	9902      	ldr	r1, [sp, #8]
 80041f0:	3930      	subs	r1, #48	; 0x30
 80041f2:	2909      	cmp	r1, #9
 80041f4:	f63f af31 	bhi.w	800405a <_svfprintf_r+0xca>
 80041f8:	fb00 1909 	mla	r9, r0, r9, r1
 80041fc:	9905      	ldr	r1, [sp, #20]
 80041fe:	460e      	mov	r6, r1
 8004200:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004204:	9102      	str	r1, [sp, #8]
 8004206:	9605      	str	r6, [sp, #20]
 8004208:	e7f1      	b.n	80041ee <_svfprintf_r+0x25e>
 800420a:	6839      	ldr	r1, [r7, #0]
 800420c:	9605      	str	r6, [sp, #20]
 800420e:	ea41 79e1 	orr.w	r9, r1, r1, asr #31
 8004212:	3704      	adds	r7, #4
 8004214:	e78f      	b.n	8004136 <_svfprintf_r+0x1a6>
 8004216:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 800421a:	e78c      	b.n	8004136 <_svfprintf_r+0x1a6>
 800421c:	2100      	movs	r1, #0
 800421e:	910a      	str	r1, [sp, #40]	; 0x28
 8004220:	9902      	ldr	r1, [sp, #8]
 8004222:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8004224:	3930      	subs	r1, #48	; 0x30
 8004226:	fb00 1106 	mla	r1, r0, r6, r1
 800422a:	910a      	str	r1, [sp, #40]	; 0x28
 800422c:	9905      	ldr	r1, [sp, #20]
 800422e:	460e      	mov	r6, r1
 8004230:	f816 1b01 	ldrb.w	r1, [r6], #1
 8004234:	9102      	str	r1, [sp, #8]
 8004236:	9902      	ldr	r1, [sp, #8]
 8004238:	9605      	str	r6, [sp, #20]
 800423a:	3930      	subs	r1, #48	; 0x30
 800423c:	2909      	cmp	r1, #9
 800423e:	d9ef      	bls.n	8004220 <_svfprintf_r+0x290>
 8004240:	e70b      	b.n	800405a <_svfprintf_r+0xca>
 8004242:	f045 0508 	orr.w	r5, r5, #8
 8004246:	e776      	b.n	8004136 <_svfprintf_r+0x1a6>
 8004248:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 800424c:	e773      	b.n	8004136 <_svfprintf_r+0x1a6>
 800424e:	bf00      	nop
	...
 8004258:	08006da4 	.word	0x08006da4
 800425c:	9905      	ldr	r1, [sp, #20]
 800425e:	7809      	ldrb	r1, [r1, #0]
 8004260:	296c      	cmp	r1, #108	; 0x6c
 8004262:	d105      	bne.n	8004270 <_svfprintf_r+0x2e0>
 8004264:	9905      	ldr	r1, [sp, #20]
 8004266:	3101      	adds	r1, #1
 8004268:	9105      	str	r1, [sp, #20]
 800426a:	f045 0520 	orr.w	r5, r5, #32
 800426e:	e762      	b.n	8004136 <_svfprintf_r+0x1a6>
 8004270:	f045 0510 	orr.w	r5, r5, #16
 8004274:	e75f      	b.n	8004136 <_svfprintf_r+0x1a6>
 8004276:	1d3b      	adds	r3, r7, #4
 8004278:	9304      	str	r3, [sp, #16]
 800427a:	2600      	movs	r6, #0
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8004282:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004286:	f04f 0901 	mov.w	r9, #1
 800428a:	4637      	mov	r7, r6
 800428c:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8004290:	e11b      	b.n	80044ca <_svfprintf_r+0x53a>
 8004292:	b10b      	cbz	r3, 8004298 <_svfprintf_r+0x308>
 8004294:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8004298:	f045 0510 	orr.w	r5, r5, #16
 800429c:	e752      	b.n	8004144 <_svfprintf_r+0x1b4>
 800429e:	f015 0f10 	tst.w	r5, #16
 80042a2:	f107 0304 	add.w	r3, r7, #4
 80042a6:	d003      	beq.n	80042b0 <_svfprintf_r+0x320>
 80042a8:	683e      	ldr	r6, [r7, #0]
 80042aa:	9304      	str	r3, [sp, #16]
 80042ac:	17f7      	asrs	r7, r6, #31
 80042ae:	e754      	b.n	800415a <_svfprintf_r+0x1ca>
 80042b0:	683e      	ldr	r6, [r7, #0]
 80042b2:	9304      	str	r3, [sp, #16]
 80042b4:	f015 0f40 	tst.w	r5, #64	; 0x40
 80042b8:	bf18      	it	ne
 80042ba:	b236      	sxthne	r6, r6
 80042bc:	e7f6      	b.n	80042ac <_svfprintf_r+0x31c>
 80042be:	b10b      	cbz	r3, 80042c4 <_svfprintf_r+0x334>
 80042c0:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80042c4:	3707      	adds	r7, #7
 80042c6:	f027 0707 	bic.w	r7, r7, #7
 80042ca:	f107 0308 	add.w	r3, r7, #8
 80042ce:	9304      	str	r3, [sp, #16]
 80042d0:	ed97 7b00 	vldr	d7, [r7]
 80042d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80042d8:	9b06      	ldr	r3, [sp, #24]
 80042da:	9312      	str	r3, [sp, #72]	; 0x48
 80042dc:	9b07      	ldr	r3, [sp, #28]
 80042de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80042e2:	9313      	str	r3, [sp, #76]	; 0x4c
 80042e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042e8:	4b4a      	ldr	r3, [pc, #296]	; (8004414 <_svfprintf_r+0x484>)
 80042ea:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80042ee:	f7fc fc21 	bl	8000b34 <__aeabi_dcmpun>
 80042f2:	2800      	cmp	r0, #0
 80042f4:	f040 85d5 	bne.w	8004ea2 <_svfprintf_r+0xf12>
 80042f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80042fc:	4b45      	ldr	r3, [pc, #276]	; (8004414 <_svfprintf_r+0x484>)
 80042fe:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004302:	f7fc fbf9 	bl	8000af8 <__aeabi_dcmple>
 8004306:	2800      	cmp	r0, #0
 8004308:	f040 85cb 	bne.w	8004ea2 <_svfprintf_r+0xf12>
 800430c:	2200      	movs	r2, #0
 800430e:	2300      	movs	r3, #0
 8004310:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004314:	f7fc fbe6 	bl	8000ae4 <__aeabi_dcmplt>
 8004318:	b110      	cbz	r0, 8004320 <_svfprintf_r+0x390>
 800431a:	232d      	movs	r3, #45	; 0x2d
 800431c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8004320:	4b3d      	ldr	r3, [pc, #244]	; (8004418 <_svfprintf_r+0x488>)
 8004322:	4a3e      	ldr	r2, [pc, #248]	; (800441c <_svfprintf_r+0x48c>)
 8004324:	9902      	ldr	r1, [sp, #8]
 8004326:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800432a:	2947      	cmp	r1, #71	; 0x47
 800432c:	bfcc      	ite	gt
 800432e:	4690      	movgt	r8, r2
 8004330:	4698      	movle	r8, r3
 8004332:	f04f 0903 	mov.w	r9, #3
 8004336:	2600      	movs	r6, #0
 8004338:	4637      	mov	r7, r6
 800433a:	e0c6      	b.n	80044ca <_svfprintf_r+0x53a>
 800433c:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8004340:	d022      	beq.n	8004388 <_svfprintf_r+0x3f8>
 8004342:	9b02      	ldr	r3, [sp, #8]
 8004344:	f023 0320 	bic.w	r3, r3, #32
 8004348:	2b47      	cmp	r3, #71	; 0x47
 800434a:	d104      	bne.n	8004356 <_svfprintf_r+0x3c6>
 800434c:	f1b9 0f00 	cmp.w	r9, #0
 8004350:	bf08      	it	eq
 8004352:	f04f 0901 	moveq.w	r9, #1
 8004356:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 800435a:	930c      	str	r3, [sp, #48]	; 0x30
 800435c:	9b07      	ldr	r3, [sp, #28]
 800435e:	2b00      	cmp	r3, #0
 8004360:	da15      	bge.n	800438e <_svfprintf_r+0x3fe>
 8004362:	9b06      	ldr	r3, [sp, #24]
 8004364:	930e      	str	r3, [sp, #56]	; 0x38
 8004366:	9b07      	ldr	r3, [sp, #28]
 8004368:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800436c:	930f      	str	r3, [sp, #60]	; 0x3c
 800436e:	232d      	movs	r3, #45	; 0x2d
 8004370:	930b      	str	r3, [sp, #44]	; 0x2c
 8004372:	9b02      	ldr	r3, [sp, #8]
 8004374:	f023 0720 	bic.w	r7, r3, #32
 8004378:	2f46      	cmp	r7, #70	; 0x46
 800437a:	d00e      	beq.n	800439a <_svfprintf_r+0x40a>
 800437c:	2f45      	cmp	r7, #69	; 0x45
 800437e:	d146      	bne.n	800440e <_svfprintf_r+0x47e>
 8004380:	f109 0601 	add.w	r6, r9, #1
 8004384:	2102      	movs	r1, #2
 8004386:	e00a      	b.n	800439e <_svfprintf_r+0x40e>
 8004388:	f04f 0906 	mov.w	r9, #6
 800438c:	e7e3      	b.n	8004356 <_svfprintf_r+0x3c6>
 800438e:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004392:	2300      	movs	r3, #0
 8004394:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004398:	e7ea      	b.n	8004370 <_svfprintf_r+0x3e0>
 800439a:	464e      	mov	r6, r9
 800439c:	2103      	movs	r1, #3
 800439e:	ab1d      	add	r3, sp, #116	; 0x74
 80043a0:	9301      	str	r3, [sp, #4]
 80043a2:	ab1a      	add	r3, sp, #104	; 0x68
 80043a4:	9300      	str	r3, [sp, #0]
 80043a6:	4632      	mov	r2, r6
 80043a8:	ab19      	add	r3, sp, #100	; 0x64
 80043aa:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80043ae:	4658      	mov	r0, fp
 80043b0:	f000 fe4e 	bl	8005050 <_dtoa_r>
 80043b4:	2f47      	cmp	r7, #71	; 0x47
 80043b6:	4680      	mov	r8, r0
 80043b8:	d102      	bne.n	80043c0 <_svfprintf_r+0x430>
 80043ba:	07e8      	lsls	r0, r5, #31
 80043bc:	f140 857e 	bpl.w	8004ebc <_svfprintf_r+0xf2c>
 80043c0:	eb08 0306 	add.w	r3, r8, r6
 80043c4:	2f46      	cmp	r7, #70	; 0x46
 80043c6:	9303      	str	r3, [sp, #12]
 80043c8:	d111      	bne.n	80043ee <_svfprintf_r+0x45e>
 80043ca:	f898 3000 	ldrb.w	r3, [r8]
 80043ce:	2b30      	cmp	r3, #48	; 0x30
 80043d0:	d109      	bne.n	80043e6 <_svfprintf_r+0x456>
 80043d2:	2200      	movs	r2, #0
 80043d4:	2300      	movs	r3, #0
 80043d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80043da:	f7fc fb79 	bl	8000ad0 <__aeabi_dcmpeq>
 80043de:	b910      	cbnz	r0, 80043e6 <_svfprintf_r+0x456>
 80043e0:	f1c6 0601 	rsb	r6, r6, #1
 80043e4:	9619      	str	r6, [sp, #100]	; 0x64
 80043e6:	9a03      	ldr	r2, [sp, #12]
 80043e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043ea:	441a      	add	r2, r3
 80043ec:	9203      	str	r2, [sp, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	2300      	movs	r3, #0
 80043f2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80043f6:	f7fc fb6b 	bl	8000ad0 <__aeabi_dcmpeq>
 80043fa:	b988      	cbnz	r0, 8004420 <_svfprintf_r+0x490>
 80043fc:	2230      	movs	r2, #48	; 0x30
 80043fe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004400:	9903      	ldr	r1, [sp, #12]
 8004402:	4299      	cmp	r1, r3
 8004404:	d90e      	bls.n	8004424 <_svfprintf_r+0x494>
 8004406:	1c59      	adds	r1, r3, #1
 8004408:	911d      	str	r1, [sp, #116]	; 0x74
 800440a:	701a      	strb	r2, [r3, #0]
 800440c:	e7f7      	b.n	80043fe <_svfprintf_r+0x46e>
 800440e:	464e      	mov	r6, r9
 8004410:	e7b8      	b.n	8004384 <_svfprintf_r+0x3f4>
 8004412:	bf00      	nop
 8004414:	7fefffff 	.word	0x7fefffff
 8004418:	08006d94 	.word	0x08006d94
 800441c:	08006d98 	.word	0x08006d98
 8004420:	9b03      	ldr	r3, [sp, #12]
 8004422:	931d      	str	r3, [sp, #116]	; 0x74
 8004424:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004426:	2f47      	cmp	r7, #71	; 0x47
 8004428:	eba3 0308 	sub.w	r3, r3, r8
 800442c:	9303      	str	r3, [sp, #12]
 800442e:	f040 80fa 	bne.w	8004626 <_svfprintf_r+0x696>
 8004432:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004434:	1cd9      	adds	r1, r3, #3
 8004436:	db02      	blt.n	800443e <_svfprintf_r+0x4ae>
 8004438:	4599      	cmp	r9, r3
 800443a:	f280 8120 	bge.w	800467e <_svfprintf_r+0x6ee>
 800443e:	9b02      	ldr	r3, [sp, #8]
 8004440:	3b02      	subs	r3, #2
 8004442:	9302      	str	r3, [sp, #8]
 8004444:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004446:	f89d 1008 	ldrb.w	r1, [sp, #8]
 800444a:	f88d 106c 	strb.w	r1, [sp, #108]	; 0x6c
 800444e:	1e53      	subs	r3, r2, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	9319      	str	r3, [sp, #100]	; 0x64
 8004454:	bfb6      	itet	lt
 8004456:	f1c2 0301 	rsblt	r3, r2, #1
 800445a:	222b      	movge	r2, #43	; 0x2b
 800445c:	222d      	movlt	r2, #45	; 0x2d
 800445e:	2b09      	cmp	r3, #9
 8004460:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 8004464:	f340 80fb 	ble.w	800465e <_svfprintf_r+0x6ce>
 8004468:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800446c:	260a      	movs	r6, #10
 800446e:	fb93 f0f6 	sdiv	r0, r3, r6
 8004472:	fb06 3310 	mls	r3, r6, r0, r3
 8004476:	3330      	adds	r3, #48	; 0x30
 8004478:	2809      	cmp	r0, #9
 800447a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800447e:	f102 31ff 	add.w	r1, r2, #4294967295	; 0xffffffff
 8004482:	4603      	mov	r3, r0
 8004484:	f300 80e4 	bgt.w	8004650 <_svfprintf_r+0x6c0>
 8004488:	3330      	adds	r3, #48	; 0x30
 800448a:	f801 3c01 	strb.w	r3, [r1, #-1]
 800448e:	3a02      	subs	r2, #2
 8004490:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8004494:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 8004498:	4282      	cmp	r2, r0
 800449a:	4619      	mov	r1, r3
 800449c:	f0c0 80da 	bcc.w	8004654 <_svfprintf_r+0x6c4>
 80044a0:	9a03      	ldr	r2, [sp, #12]
 80044a2:	ab1b      	add	r3, sp, #108	; 0x6c
 80044a4:	1acb      	subs	r3, r1, r3
 80044a6:	2a01      	cmp	r2, #1
 80044a8:	9310      	str	r3, [sp, #64]	; 0x40
 80044aa:	eb03 0902 	add.w	r9, r3, r2
 80044ae:	dc02      	bgt.n	80044b6 <_svfprintf_r+0x526>
 80044b0:	f015 0701 	ands.w	r7, r5, #1
 80044b4:	d002      	beq.n	80044bc <_svfprintf_r+0x52c>
 80044b6:	9b08      	ldr	r3, [sp, #32]
 80044b8:	2700      	movs	r7, #0
 80044ba:	4499      	add	r9, r3
 80044bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044be:	b113      	cbz	r3, 80044c6 <_svfprintf_r+0x536>
 80044c0:	232d      	movs	r3, #45	; 0x2d
 80044c2:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80044c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044c8:	2600      	movs	r6, #0
 80044ca:	454e      	cmp	r6, r9
 80044cc:	4633      	mov	r3, r6
 80044ce:	bfb8      	it	lt
 80044d0:	464b      	movlt	r3, r9
 80044d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80044d4:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80044d8:	b113      	cbz	r3, 80044e0 <_svfprintf_r+0x550>
 80044da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044dc:	3301      	adds	r3, #1
 80044de:	930b      	str	r3, [sp, #44]	; 0x2c
 80044e0:	f015 0302 	ands.w	r3, r5, #2
 80044e4:	9314      	str	r3, [sp, #80]	; 0x50
 80044e6:	bf1e      	ittt	ne
 80044e8:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 80044ea:	3302      	addne	r3, #2
 80044ec:	930b      	strne	r3, [sp, #44]	; 0x2c
 80044ee:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 80044f2:	9315      	str	r3, [sp, #84]	; 0x54
 80044f4:	d118      	bne.n	8004528 <_svfprintf_r+0x598>
 80044f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80044fa:	1a9b      	subs	r3, r3, r2
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	930c      	str	r3, [sp, #48]	; 0x30
 8004500:	dd12      	ble.n	8004528 <_svfprintf_r+0x598>
 8004502:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004504:	2b10      	cmp	r3, #16
 8004506:	4ba9      	ldr	r3, [pc, #676]	; (80047ac <_svfprintf_r+0x81c>)
 8004508:	6023      	str	r3, [r4, #0]
 800450a:	f300 81d5 	bgt.w	80048b8 <_svfprintf_r+0x928>
 800450e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004510:	6063      	str	r3, [r4, #4]
 8004512:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004514:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004516:	4413      	add	r3, r2
 8004518:	9321      	str	r3, [sp, #132]	; 0x84
 800451a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800451c:	3301      	adds	r3, #1
 800451e:	2b07      	cmp	r3, #7
 8004520:	9320      	str	r3, [sp, #128]	; 0x80
 8004522:	f300 81e2 	bgt.w	80048ea <_svfprintf_r+0x95a>
 8004526:	3408      	adds	r4, #8
 8004528:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800452c:	b173      	cbz	r3, 800454c <_svfprintf_r+0x5bc>
 800452e:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8004532:	6023      	str	r3, [r4, #0]
 8004534:	2301      	movs	r3, #1
 8004536:	6063      	str	r3, [r4, #4]
 8004538:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800453a:	3301      	adds	r3, #1
 800453c:	9321      	str	r3, [sp, #132]	; 0x84
 800453e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004540:	3301      	adds	r3, #1
 8004542:	2b07      	cmp	r3, #7
 8004544:	9320      	str	r3, [sp, #128]	; 0x80
 8004546:	f300 81da 	bgt.w	80048fe <_svfprintf_r+0x96e>
 800454a:	3408      	adds	r4, #8
 800454c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800454e:	b16b      	cbz	r3, 800456c <_svfprintf_r+0x5dc>
 8004550:	ab18      	add	r3, sp, #96	; 0x60
 8004552:	6023      	str	r3, [r4, #0]
 8004554:	2302      	movs	r3, #2
 8004556:	6063      	str	r3, [r4, #4]
 8004558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800455a:	3302      	adds	r3, #2
 800455c:	9321      	str	r3, [sp, #132]	; 0x84
 800455e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004560:	3301      	adds	r3, #1
 8004562:	2b07      	cmp	r3, #7
 8004564:	9320      	str	r3, [sp, #128]	; 0x80
 8004566:	f300 81d4 	bgt.w	8004912 <_svfprintf_r+0x982>
 800456a:	3408      	adds	r4, #8
 800456c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800456e:	2b80      	cmp	r3, #128	; 0x80
 8004570:	d114      	bne.n	800459c <_svfprintf_r+0x60c>
 8004572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004574:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	2b00      	cmp	r3, #0
 800457a:	dd0f      	ble.n	800459c <_svfprintf_r+0x60c>
 800457c:	4a8c      	ldr	r2, [pc, #560]	; (80047b0 <_svfprintf_r+0x820>)
 800457e:	6022      	str	r2, [r4, #0]
 8004580:	2b10      	cmp	r3, #16
 8004582:	f300 81d0 	bgt.w	8004926 <_svfprintf_r+0x996>
 8004586:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004588:	6063      	str	r3, [r4, #4]
 800458a:	4413      	add	r3, r2
 800458c:	9321      	str	r3, [sp, #132]	; 0x84
 800458e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004590:	3301      	adds	r3, #1
 8004592:	2b07      	cmp	r3, #7
 8004594:	9320      	str	r3, [sp, #128]	; 0x80
 8004596:	f300 81df 	bgt.w	8004958 <_svfprintf_r+0x9c8>
 800459a:	3408      	adds	r4, #8
 800459c:	eba6 0609 	sub.w	r6, r6, r9
 80045a0:	2e00      	cmp	r6, #0
 80045a2:	dd0f      	ble.n	80045c4 <_svfprintf_r+0x634>
 80045a4:	4b82      	ldr	r3, [pc, #520]	; (80047b0 <_svfprintf_r+0x820>)
 80045a6:	6023      	str	r3, [r4, #0]
 80045a8:	2e10      	cmp	r6, #16
 80045aa:	f300 81df 	bgt.w	800496c <_svfprintf_r+0x9dc>
 80045ae:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045b0:	9821      	ldr	r0, [sp, #132]	; 0x84
 80045b2:	6066      	str	r6, [r4, #4]
 80045b4:	3301      	adds	r3, #1
 80045b6:	4406      	add	r6, r0
 80045b8:	2b07      	cmp	r3, #7
 80045ba:	9621      	str	r6, [sp, #132]	; 0x84
 80045bc:	9320      	str	r3, [sp, #128]	; 0x80
 80045be:	f300 81ec 	bgt.w	800499a <_svfprintf_r+0xa0a>
 80045c2:	3408      	adds	r4, #8
 80045c4:	05eb      	lsls	r3, r5, #23
 80045c6:	f100 81f2 	bmi.w	80049ae <_svfprintf_r+0xa1e>
 80045ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80045cc:	e884 0300 	stmia.w	r4, {r8, r9}
 80045d0:	444b      	add	r3, r9
 80045d2:	9321      	str	r3, [sp, #132]	; 0x84
 80045d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80045d6:	3301      	adds	r3, #1
 80045d8:	2b07      	cmp	r3, #7
 80045da:	9320      	str	r3, [sp, #128]	; 0x80
 80045dc:	f340 8419 	ble.w	8004e12 <_svfprintf_r+0xe82>
 80045e0:	aa1f      	add	r2, sp, #124	; 0x7c
 80045e2:	4651      	mov	r1, sl
 80045e4:	4658      	mov	r0, fp
 80045e6:	f001 feff 	bl	80063e8 <__ssprint_r>
 80045ea:	2800      	cmp	r0, #0
 80045ec:	f040 8431 	bne.w	8004e52 <_svfprintf_r+0xec2>
 80045f0:	ac2c      	add	r4, sp, #176	; 0xb0
 80045f2:	076b      	lsls	r3, r5, #29
 80045f4:	f100 8410 	bmi.w	8004e18 <_svfprintf_r+0xe88>
 80045f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80045fc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80045fe:	428a      	cmp	r2, r1
 8004600:	bfac      	ite	ge
 8004602:	189b      	addge	r3, r3, r2
 8004604:	185b      	addlt	r3, r3, r1
 8004606:	9309      	str	r3, [sp, #36]	; 0x24
 8004608:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800460a:	b13b      	cbz	r3, 800461c <_svfprintf_r+0x68c>
 800460c:	aa1f      	add	r2, sp, #124	; 0x7c
 800460e:	4651      	mov	r1, sl
 8004610:	4658      	mov	r0, fp
 8004612:	f001 fee9 	bl	80063e8 <__ssprint_r>
 8004616:	2800      	cmp	r0, #0
 8004618:	f040 841b 	bne.w	8004e52 <_svfprintf_r+0xec2>
 800461c:	2300      	movs	r3, #0
 800461e:	9320      	str	r3, [sp, #128]	; 0x80
 8004620:	9f04      	ldr	r7, [sp, #16]
 8004622:	ac2c      	add	r4, sp, #176	; 0xb0
 8004624:	e4ee      	b.n	8004004 <_svfprintf_r+0x74>
 8004626:	9b02      	ldr	r3, [sp, #8]
 8004628:	2b65      	cmp	r3, #101	; 0x65
 800462a:	f77f af0b 	ble.w	8004444 <_svfprintf_r+0x4b4>
 800462e:	9b02      	ldr	r3, [sp, #8]
 8004630:	2b66      	cmp	r3, #102	; 0x66
 8004632:	d124      	bne.n	800467e <_svfprintf_r+0x6ee>
 8004634:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004636:	2b00      	cmp	r3, #0
 8004638:	dd19      	ble.n	800466e <_svfprintf_r+0x6de>
 800463a:	f1b9 0f00 	cmp.w	r9, #0
 800463e:	d101      	bne.n	8004644 <_svfprintf_r+0x6b4>
 8004640:	07ea      	lsls	r2, r5, #31
 8004642:	d502      	bpl.n	800464a <_svfprintf_r+0x6ba>
 8004644:	9a08      	ldr	r2, [sp, #32]
 8004646:	4413      	add	r3, r2
 8004648:	444b      	add	r3, r9
 800464a:	9f19      	ldr	r7, [sp, #100]	; 0x64
 800464c:	4699      	mov	r9, r3
 800464e:	e735      	b.n	80044bc <_svfprintf_r+0x52c>
 8004650:	460a      	mov	r2, r1
 8004652:	e70c      	b.n	800446e <_svfprintf_r+0x4de>
 8004654:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004658:	f803 1b01 	strb.w	r1, [r3], #1
 800465c:	e71c      	b.n	8004498 <_svfprintf_r+0x508>
 800465e:	2230      	movs	r2, #48	; 0x30
 8004660:	4413      	add	r3, r2
 8004662:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8004666:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 800466a:	a91c      	add	r1, sp, #112	; 0x70
 800466c:	e718      	b.n	80044a0 <_svfprintf_r+0x510>
 800466e:	f1b9 0f00 	cmp.w	r9, #0
 8004672:	d101      	bne.n	8004678 <_svfprintf_r+0x6e8>
 8004674:	07eb      	lsls	r3, r5, #31
 8004676:	d515      	bpl.n	80046a4 <_svfprintf_r+0x714>
 8004678:	9b08      	ldr	r3, [sp, #32]
 800467a:	3301      	adds	r3, #1
 800467c:	e7e4      	b.n	8004648 <_svfprintf_r+0x6b8>
 800467e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004680:	9b03      	ldr	r3, [sp, #12]
 8004682:	429a      	cmp	r2, r3
 8004684:	db06      	blt.n	8004694 <_svfprintf_r+0x704>
 8004686:	07ef      	lsls	r7, r5, #31
 8004688:	d50e      	bpl.n	80046a8 <_svfprintf_r+0x718>
 800468a:	9b08      	ldr	r3, [sp, #32]
 800468c:	4413      	add	r3, r2
 800468e:	2267      	movs	r2, #103	; 0x67
 8004690:	9202      	str	r2, [sp, #8]
 8004692:	e7da      	b.n	800464a <_svfprintf_r+0x6ba>
 8004694:	9b03      	ldr	r3, [sp, #12]
 8004696:	9908      	ldr	r1, [sp, #32]
 8004698:	2a00      	cmp	r2, #0
 800469a:	440b      	add	r3, r1
 800469c:	dcf7      	bgt.n	800468e <_svfprintf_r+0x6fe>
 800469e:	f1c2 0201 	rsb	r2, r2, #1
 80046a2:	e7f3      	b.n	800468c <_svfprintf_r+0x6fc>
 80046a4:	2301      	movs	r3, #1
 80046a6:	e7d0      	b.n	800464a <_svfprintf_r+0x6ba>
 80046a8:	4613      	mov	r3, r2
 80046aa:	e7f0      	b.n	800468e <_svfprintf_r+0x6fe>
 80046ac:	b10b      	cbz	r3, 80046b2 <_svfprintf_r+0x722>
 80046ae:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80046b2:	f015 0f20 	tst.w	r5, #32
 80046b6:	f107 0304 	add.w	r3, r7, #4
 80046ba:	d008      	beq.n	80046ce <_svfprintf_r+0x73e>
 80046bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	17ce      	asrs	r6, r1, #31
 80046c2:	4608      	mov	r0, r1
 80046c4:	4631      	mov	r1, r6
 80046c6:	e9c2 0100 	strd	r0, r1, [r2]
 80046ca:	461f      	mov	r7, r3
 80046cc:	e49a      	b.n	8004004 <_svfprintf_r+0x74>
 80046ce:	06ee      	lsls	r6, r5, #27
 80046d0:	d503      	bpl.n	80046da <_svfprintf_r+0x74a>
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80046d6:	6011      	str	r1, [r2, #0]
 80046d8:	e7f7      	b.n	80046ca <_svfprintf_r+0x73a>
 80046da:	0668      	lsls	r0, r5, #25
 80046dc:	d5f9      	bpl.n	80046d2 <_svfprintf_r+0x742>
 80046de:	683a      	ldr	r2, [r7, #0]
 80046e0:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80046e4:	8011      	strh	r1, [r2, #0]
 80046e6:	e7f0      	b.n	80046ca <_svfprintf_r+0x73a>
 80046e8:	f045 0510 	orr.w	r5, r5, #16
 80046ec:	f015 0320 	ands.w	r3, r5, #32
 80046f0:	d022      	beq.n	8004738 <_svfprintf_r+0x7a8>
 80046f2:	3707      	adds	r7, #7
 80046f4:	f027 0707 	bic.w	r7, r7, #7
 80046f8:	f107 0308 	add.w	r3, r7, #8
 80046fc:	e9d7 6700 	ldrd	r6, r7, [r7]
 8004700:	9304      	str	r3, [sp, #16]
 8004702:	2300      	movs	r3, #0
 8004704:	2200      	movs	r2, #0
 8004706:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800470a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800470e:	f000 83db 	beq.w	8004ec8 <_svfprintf_r+0xf38>
 8004712:	f025 0280 	bic.w	r2, r5, #128	; 0x80
 8004716:	920b      	str	r2, [sp, #44]	; 0x2c
 8004718:	ea56 0207 	orrs.w	r2, r6, r7
 800471c:	f040 83d9 	bne.w	8004ed2 <_svfprintf_r+0xf42>
 8004720:	f1b9 0f00 	cmp.w	r9, #0
 8004724:	f000 80aa 	beq.w	800487c <_svfprintf_r+0x8ec>
 8004728:	2b01      	cmp	r3, #1
 800472a:	d076      	beq.n	800481a <_svfprintf_r+0x88a>
 800472c:	2b02      	cmp	r3, #2
 800472e:	f000 8091 	beq.w	8004854 <_svfprintf_r+0x8c4>
 8004732:	2600      	movs	r6, #0
 8004734:	2700      	movs	r7, #0
 8004736:	e3d2      	b.n	8004ede <_svfprintf_r+0xf4e>
 8004738:	1d3a      	adds	r2, r7, #4
 800473a:	f015 0110 	ands.w	r1, r5, #16
 800473e:	9204      	str	r2, [sp, #16]
 8004740:	d002      	beq.n	8004748 <_svfprintf_r+0x7b8>
 8004742:	683e      	ldr	r6, [r7, #0]
 8004744:	2700      	movs	r7, #0
 8004746:	e7dd      	b.n	8004704 <_svfprintf_r+0x774>
 8004748:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 800474c:	d0f9      	beq.n	8004742 <_svfprintf_r+0x7b2>
 800474e:	883e      	ldrh	r6, [r7, #0]
 8004750:	2700      	movs	r7, #0
 8004752:	e7d6      	b.n	8004702 <_svfprintf_r+0x772>
 8004754:	1d3b      	adds	r3, r7, #4
 8004756:	9304      	str	r3, [sp, #16]
 8004758:	2330      	movs	r3, #48	; 0x30
 800475a:	2278      	movs	r2, #120	; 0x78
 800475c:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8004760:	4b14      	ldr	r3, [pc, #80]	; (80047b4 <_svfprintf_r+0x824>)
 8004762:	683e      	ldr	r6, [r7, #0]
 8004764:	9311      	str	r3, [sp, #68]	; 0x44
 8004766:	2700      	movs	r7, #0
 8004768:	f045 0502 	orr.w	r5, r5, #2
 800476c:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8004770:	2302      	movs	r3, #2
 8004772:	9202      	str	r2, [sp, #8]
 8004774:	e7c6      	b.n	8004704 <_svfprintf_r+0x774>
 8004776:	1d3b      	adds	r3, r7, #4
 8004778:	2600      	movs	r6, #0
 800477a:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 800477e:	9304      	str	r3, [sp, #16]
 8004780:	f8d7 8000 	ldr.w	r8, [r7]
 8004784:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8004788:	d00a      	beq.n	80047a0 <_svfprintf_r+0x810>
 800478a:	464a      	mov	r2, r9
 800478c:	4631      	mov	r1, r6
 800478e:	4640      	mov	r0, r8
 8004790:	f7fb fd2e 	bl	80001f0 <memchr>
 8004794:	2800      	cmp	r0, #0
 8004796:	f000 808d 	beq.w	80048b4 <_svfprintf_r+0x924>
 800479a:	eba0 0908 	sub.w	r9, r0, r8
 800479e:	e5cb      	b.n	8004338 <_svfprintf_r+0x3a8>
 80047a0:	4640      	mov	r0, r8
 80047a2:	f7fb fd1d 	bl	80001e0 <strlen>
 80047a6:	4681      	mov	r9, r0
 80047a8:	e5c6      	b.n	8004338 <_svfprintf_r+0x3a8>
 80047aa:	bf00      	nop
 80047ac:	08006dc8 	.word	0x08006dc8
 80047b0:	08006dd8 	.word	0x08006dd8
 80047b4:	08006db5 	.word	0x08006db5
 80047b8:	f045 0510 	orr.w	r5, r5, #16
 80047bc:	06a9      	lsls	r1, r5, #26
 80047be:	d509      	bpl.n	80047d4 <_svfprintf_r+0x844>
 80047c0:	3707      	adds	r7, #7
 80047c2:	f027 0707 	bic.w	r7, r7, #7
 80047c6:	f107 0308 	add.w	r3, r7, #8
 80047ca:	e9d7 6700 	ldrd	r6, r7, [r7]
 80047ce:	9304      	str	r3, [sp, #16]
 80047d0:	2301      	movs	r3, #1
 80047d2:	e797      	b.n	8004704 <_svfprintf_r+0x774>
 80047d4:	1d3b      	adds	r3, r7, #4
 80047d6:	f015 0f10 	tst.w	r5, #16
 80047da:	9304      	str	r3, [sp, #16]
 80047dc:	d001      	beq.n	80047e2 <_svfprintf_r+0x852>
 80047de:	683e      	ldr	r6, [r7, #0]
 80047e0:	e002      	b.n	80047e8 <_svfprintf_r+0x858>
 80047e2:	066a      	lsls	r2, r5, #25
 80047e4:	d5fb      	bpl.n	80047de <_svfprintf_r+0x84e>
 80047e6:	883e      	ldrh	r6, [r7, #0]
 80047e8:	2700      	movs	r7, #0
 80047ea:	e7f1      	b.n	80047d0 <_svfprintf_r+0x840>
 80047ec:	b10b      	cbz	r3, 80047f2 <_svfprintf_r+0x862>
 80047ee:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 80047f2:	4ba3      	ldr	r3, [pc, #652]	; (8004a80 <_svfprintf_r+0xaf0>)
 80047f4:	e4c2      	b.n	800417c <_svfprintf_r+0x1ec>
 80047f6:	1d3b      	adds	r3, r7, #4
 80047f8:	f015 0f10 	tst.w	r5, #16
 80047fc:	9304      	str	r3, [sp, #16]
 80047fe:	d001      	beq.n	8004804 <_svfprintf_r+0x874>
 8004800:	683e      	ldr	r6, [r7, #0]
 8004802:	e002      	b.n	800480a <_svfprintf_r+0x87a>
 8004804:	066e      	lsls	r6, r5, #25
 8004806:	d5fb      	bpl.n	8004800 <_svfprintf_r+0x870>
 8004808:	883e      	ldrh	r6, [r7, #0]
 800480a:	2700      	movs	r7, #0
 800480c:	e4c2      	b.n	8004194 <_svfprintf_r+0x204>
 800480e:	4643      	mov	r3, r8
 8004810:	e366      	b.n	8004ee0 <_svfprintf_r+0xf50>
 8004812:	2f00      	cmp	r7, #0
 8004814:	bf08      	it	eq
 8004816:	2e0a      	cmpeq	r6, #10
 8004818:	d205      	bcs.n	8004826 <_svfprintf_r+0x896>
 800481a:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 800481e:	3630      	adds	r6, #48	; 0x30
 8004820:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8004824:	e377      	b.n	8004f16 <_svfprintf_r+0xf86>
 8004826:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800482a:	4630      	mov	r0, r6
 800482c:	4639      	mov	r1, r7
 800482e:	220a      	movs	r2, #10
 8004830:	2300      	movs	r3, #0
 8004832:	f7fc f9bd 	bl	8000bb0 <__aeabi_uldivmod>
 8004836:	3230      	adds	r2, #48	; 0x30
 8004838:	f808 2d01 	strb.w	r2, [r8, #-1]!
 800483c:	2300      	movs	r3, #0
 800483e:	4630      	mov	r0, r6
 8004840:	4639      	mov	r1, r7
 8004842:	220a      	movs	r2, #10
 8004844:	f7fc f9b4 	bl	8000bb0 <__aeabi_uldivmod>
 8004848:	4606      	mov	r6, r0
 800484a:	460f      	mov	r7, r1
 800484c:	ea56 0307 	orrs.w	r3, r6, r7
 8004850:	d1eb      	bne.n	800482a <_svfprintf_r+0x89a>
 8004852:	e360      	b.n	8004f16 <_svfprintf_r+0xf86>
 8004854:	2600      	movs	r6, #0
 8004856:	2700      	movs	r7, #0
 8004858:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 800485c:	f006 030f 	and.w	r3, r6, #15
 8004860:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004862:	5cd3      	ldrb	r3, [r2, r3]
 8004864:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8004868:	0933      	lsrs	r3, r6, #4
 800486a:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800486e:	093a      	lsrs	r2, r7, #4
 8004870:	461e      	mov	r6, r3
 8004872:	4617      	mov	r7, r2
 8004874:	ea56 0307 	orrs.w	r3, r6, r7
 8004878:	d1f0      	bne.n	800485c <_svfprintf_r+0x8cc>
 800487a:	e34c      	b.n	8004f16 <_svfprintf_r+0xf86>
 800487c:	b93b      	cbnz	r3, 800488e <_svfprintf_r+0x8fe>
 800487e:	07ea      	lsls	r2, r5, #31
 8004880:	d505      	bpl.n	800488e <_svfprintf_r+0x8fe>
 8004882:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8004886:	2330      	movs	r3, #48	; 0x30
 8004888:	f808 3d41 	strb.w	r3, [r8, #-65]!
 800488c:	e343      	b.n	8004f16 <_svfprintf_r+0xf86>
 800488e:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8004892:	e340      	b.n	8004f16 <_svfprintf_r+0xf86>
 8004894:	b10b      	cbz	r3, 800489a <_svfprintf_r+0x90a>
 8004896:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800489a:	9b02      	ldr	r3, [sp, #8]
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 82f7 	beq.w	8004e90 <_svfprintf_r+0xf00>
 80048a2:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80048a6:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 80048aa:	2600      	movs	r6, #0
 80048ac:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 80048b0:	9704      	str	r7, [sp, #16]
 80048b2:	e4e8      	b.n	8004286 <_svfprintf_r+0x2f6>
 80048b4:	4606      	mov	r6, r0
 80048b6:	e53f      	b.n	8004338 <_svfprintf_r+0x3a8>
 80048b8:	2310      	movs	r3, #16
 80048ba:	6063      	str	r3, [r4, #4]
 80048bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80048be:	3310      	adds	r3, #16
 80048c0:	9321      	str	r3, [sp, #132]	; 0x84
 80048c2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80048c4:	3301      	adds	r3, #1
 80048c6:	2b07      	cmp	r3, #7
 80048c8:	9320      	str	r3, [sp, #128]	; 0x80
 80048ca:	dc04      	bgt.n	80048d6 <_svfprintf_r+0x946>
 80048cc:	3408      	adds	r4, #8
 80048ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80048d0:	3b10      	subs	r3, #16
 80048d2:	930c      	str	r3, [sp, #48]	; 0x30
 80048d4:	e615      	b.n	8004502 <_svfprintf_r+0x572>
 80048d6:	aa1f      	add	r2, sp, #124	; 0x7c
 80048d8:	4651      	mov	r1, sl
 80048da:	4658      	mov	r0, fp
 80048dc:	f001 fd84 	bl	80063e8 <__ssprint_r>
 80048e0:	2800      	cmp	r0, #0
 80048e2:	f040 82b6 	bne.w	8004e52 <_svfprintf_r+0xec2>
 80048e6:	ac2c      	add	r4, sp, #176	; 0xb0
 80048e8:	e7f1      	b.n	80048ce <_svfprintf_r+0x93e>
 80048ea:	aa1f      	add	r2, sp, #124	; 0x7c
 80048ec:	4651      	mov	r1, sl
 80048ee:	4658      	mov	r0, fp
 80048f0:	f001 fd7a 	bl	80063e8 <__ssprint_r>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	f040 82ac 	bne.w	8004e52 <_svfprintf_r+0xec2>
 80048fa:	ac2c      	add	r4, sp, #176	; 0xb0
 80048fc:	e614      	b.n	8004528 <_svfprintf_r+0x598>
 80048fe:	aa1f      	add	r2, sp, #124	; 0x7c
 8004900:	4651      	mov	r1, sl
 8004902:	4658      	mov	r0, fp
 8004904:	f001 fd70 	bl	80063e8 <__ssprint_r>
 8004908:	2800      	cmp	r0, #0
 800490a:	f040 82a2 	bne.w	8004e52 <_svfprintf_r+0xec2>
 800490e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004910:	e61c      	b.n	800454c <_svfprintf_r+0x5bc>
 8004912:	aa1f      	add	r2, sp, #124	; 0x7c
 8004914:	4651      	mov	r1, sl
 8004916:	4658      	mov	r0, fp
 8004918:	f001 fd66 	bl	80063e8 <__ssprint_r>
 800491c:	2800      	cmp	r0, #0
 800491e:	f040 8298 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004922:	ac2c      	add	r4, sp, #176	; 0xb0
 8004924:	e622      	b.n	800456c <_svfprintf_r+0x5dc>
 8004926:	2210      	movs	r2, #16
 8004928:	6062      	str	r2, [r4, #4]
 800492a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800492c:	3210      	adds	r2, #16
 800492e:	9221      	str	r2, [sp, #132]	; 0x84
 8004930:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004932:	3201      	adds	r2, #1
 8004934:	2a07      	cmp	r2, #7
 8004936:	9220      	str	r2, [sp, #128]	; 0x80
 8004938:	dc02      	bgt.n	8004940 <_svfprintf_r+0x9b0>
 800493a:	3408      	adds	r4, #8
 800493c:	3b10      	subs	r3, #16
 800493e:	e61d      	b.n	800457c <_svfprintf_r+0x5ec>
 8004940:	aa1f      	add	r2, sp, #124	; 0x7c
 8004942:	4651      	mov	r1, sl
 8004944:	4658      	mov	r0, fp
 8004946:	930c      	str	r3, [sp, #48]	; 0x30
 8004948:	f001 fd4e 	bl	80063e8 <__ssprint_r>
 800494c:	2800      	cmp	r0, #0
 800494e:	f040 8280 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004952:	ac2c      	add	r4, sp, #176	; 0xb0
 8004954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004956:	e7f1      	b.n	800493c <_svfprintf_r+0x9ac>
 8004958:	aa1f      	add	r2, sp, #124	; 0x7c
 800495a:	4651      	mov	r1, sl
 800495c:	4658      	mov	r0, fp
 800495e:	f001 fd43 	bl	80063e8 <__ssprint_r>
 8004962:	2800      	cmp	r0, #0
 8004964:	f040 8275 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004968:	ac2c      	add	r4, sp, #176	; 0xb0
 800496a:	e617      	b.n	800459c <_svfprintf_r+0x60c>
 800496c:	2310      	movs	r3, #16
 800496e:	6063      	str	r3, [r4, #4]
 8004970:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004972:	3310      	adds	r3, #16
 8004974:	9321      	str	r3, [sp, #132]	; 0x84
 8004976:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004978:	3301      	adds	r3, #1
 800497a:	2b07      	cmp	r3, #7
 800497c:	9320      	str	r3, [sp, #128]	; 0x80
 800497e:	dc02      	bgt.n	8004986 <_svfprintf_r+0x9f6>
 8004980:	3408      	adds	r4, #8
 8004982:	3e10      	subs	r6, #16
 8004984:	e60e      	b.n	80045a4 <_svfprintf_r+0x614>
 8004986:	aa1f      	add	r2, sp, #124	; 0x7c
 8004988:	4651      	mov	r1, sl
 800498a:	4658      	mov	r0, fp
 800498c:	f001 fd2c 	bl	80063e8 <__ssprint_r>
 8004990:	2800      	cmp	r0, #0
 8004992:	f040 825e 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004996:	ac2c      	add	r4, sp, #176	; 0xb0
 8004998:	e7f3      	b.n	8004982 <_svfprintf_r+0x9f2>
 800499a:	aa1f      	add	r2, sp, #124	; 0x7c
 800499c:	4651      	mov	r1, sl
 800499e:	4658      	mov	r0, fp
 80049a0:	f001 fd22 	bl	80063e8 <__ssprint_r>
 80049a4:	2800      	cmp	r0, #0
 80049a6:	f040 8254 	bne.w	8004e52 <_svfprintf_r+0xec2>
 80049aa:	ac2c      	add	r4, sp, #176	; 0xb0
 80049ac:	e60a      	b.n	80045c4 <_svfprintf_r+0x634>
 80049ae:	9b02      	ldr	r3, [sp, #8]
 80049b0:	2b65      	cmp	r3, #101	; 0x65
 80049b2:	f340 81a9 	ble.w	8004d08 <_svfprintf_r+0xd78>
 80049b6:	2200      	movs	r2, #0
 80049b8:	2300      	movs	r3, #0
 80049ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049be:	f7fc f887 	bl	8000ad0 <__aeabi_dcmpeq>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	d062      	beq.n	8004a8c <_svfprintf_r+0xafc>
 80049c6:	4b2f      	ldr	r3, [pc, #188]	; (8004a84 <_svfprintf_r+0xaf4>)
 80049c8:	6023      	str	r3, [r4, #0]
 80049ca:	2301      	movs	r3, #1
 80049cc:	6063      	str	r3, [r4, #4]
 80049ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049d0:	3301      	adds	r3, #1
 80049d2:	9321      	str	r3, [sp, #132]	; 0x84
 80049d4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80049d6:	3301      	adds	r3, #1
 80049d8:	2b07      	cmp	r3, #7
 80049da:	9320      	str	r3, [sp, #128]	; 0x80
 80049dc:	dc25      	bgt.n	8004a2a <_svfprintf_r+0xa9a>
 80049de:	3408      	adds	r4, #8
 80049e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80049e2:	9a03      	ldr	r2, [sp, #12]
 80049e4:	4293      	cmp	r3, r2
 80049e6:	db02      	blt.n	80049ee <_svfprintf_r+0xa5e>
 80049e8:	07ee      	lsls	r6, r5, #31
 80049ea:	f57f ae02 	bpl.w	80045f2 <_svfprintf_r+0x662>
 80049ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80049f0:	6023      	str	r3, [r4, #0]
 80049f2:	9b08      	ldr	r3, [sp, #32]
 80049f4:	6063      	str	r3, [r4, #4]
 80049f6:	9a08      	ldr	r2, [sp, #32]
 80049f8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80049fa:	4413      	add	r3, r2
 80049fc:	9321      	str	r3, [sp, #132]	; 0x84
 80049fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a00:	3301      	adds	r3, #1
 8004a02:	2b07      	cmp	r3, #7
 8004a04:	9320      	str	r3, [sp, #128]	; 0x80
 8004a06:	dc1a      	bgt.n	8004a3e <_svfprintf_r+0xaae>
 8004a08:	3408      	adds	r4, #8
 8004a0a:	9b03      	ldr	r3, [sp, #12]
 8004a0c:	1e5e      	subs	r6, r3, #1
 8004a0e:	2e00      	cmp	r6, #0
 8004a10:	f77f adef 	ble.w	80045f2 <_svfprintf_r+0x662>
 8004a14:	4f1c      	ldr	r7, [pc, #112]	; (8004a88 <_svfprintf_r+0xaf8>)
 8004a16:	f04f 0810 	mov.w	r8, #16
 8004a1a:	2e10      	cmp	r6, #16
 8004a1c:	6027      	str	r7, [r4, #0]
 8004a1e:	dc18      	bgt.n	8004a52 <_svfprintf_r+0xac2>
 8004a20:	6066      	str	r6, [r4, #4]
 8004a22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a24:	441e      	add	r6, r3
 8004a26:	9621      	str	r6, [sp, #132]	; 0x84
 8004a28:	e5d4      	b.n	80045d4 <_svfprintf_r+0x644>
 8004a2a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a2c:	4651      	mov	r1, sl
 8004a2e:	4658      	mov	r0, fp
 8004a30:	f001 fcda 	bl	80063e8 <__ssprint_r>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	f040 820c 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004a3a:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a3c:	e7d0      	b.n	80049e0 <_svfprintf_r+0xa50>
 8004a3e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a40:	4651      	mov	r1, sl
 8004a42:	4658      	mov	r0, fp
 8004a44:	f001 fcd0 	bl	80063e8 <__ssprint_r>
 8004a48:	2800      	cmp	r0, #0
 8004a4a:	f040 8202 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004a4e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a50:	e7db      	b.n	8004a0a <_svfprintf_r+0xa7a>
 8004a52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a54:	f8c4 8004 	str.w	r8, [r4, #4]
 8004a58:	3310      	adds	r3, #16
 8004a5a:	9321      	str	r3, [sp, #132]	; 0x84
 8004a5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004a5e:	3301      	adds	r3, #1
 8004a60:	2b07      	cmp	r3, #7
 8004a62:	9320      	str	r3, [sp, #128]	; 0x80
 8004a64:	dc02      	bgt.n	8004a6c <_svfprintf_r+0xadc>
 8004a66:	3408      	adds	r4, #8
 8004a68:	3e10      	subs	r6, #16
 8004a6a:	e7d6      	b.n	8004a1a <_svfprintf_r+0xa8a>
 8004a6c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004a6e:	4651      	mov	r1, sl
 8004a70:	4658      	mov	r0, fp
 8004a72:	f001 fcb9 	bl	80063e8 <__ssprint_r>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	f040 81eb 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004a7c:	ac2c      	add	r4, sp, #176	; 0xb0
 8004a7e:	e7f3      	b.n	8004a68 <_svfprintf_r+0xad8>
 8004a80:	08006db5 	.word	0x08006db5
 8004a84:	08006dc6 	.word	0x08006dc6
 8004a88:	08006dd8 	.word	0x08006dd8
 8004a8c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	dc7a      	bgt.n	8004b88 <_svfprintf_r+0xbf8>
 8004a92:	4b9b      	ldr	r3, [pc, #620]	; (8004d00 <_svfprintf_r+0xd70>)
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	2301      	movs	r3, #1
 8004a98:	6063      	str	r3, [r4, #4]
 8004a9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	9321      	str	r3, [sp, #132]	; 0x84
 8004aa0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	2b07      	cmp	r3, #7
 8004aa6:	9320      	str	r3, [sp, #128]	; 0x80
 8004aa8:	dc44      	bgt.n	8004b34 <_svfprintf_r+0xba4>
 8004aaa:	3408      	adds	r4, #8
 8004aac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004aae:	b923      	cbnz	r3, 8004aba <_svfprintf_r+0xb2a>
 8004ab0:	9b03      	ldr	r3, [sp, #12]
 8004ab2:	b913      	cbnz	r3, 8004aba <_svfprintf_r+0xb2a>
 8004ab4:	07e8      	lsls	r0, r5, #31
 8004ab6:	f57f ad9c 	bpl.w	80045f2 <_svfprintf_r+0x662>
 8004aba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004abc:	6023      	str	r3, [r4, #0]
 8004abe:	9b08      	ldr	r3, [sp, #32]
 8004ac0:	6063      	str	r3, [r4, #4]
 8004ac2:	9a08      	ldr	r2, [sp, #32]
 8004ac4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004ac6:	4413      	add	r3, r2
 8004ac8:	9321      	str	r3, [sp, #132]	; 0x84
 8004aca:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004acc:	3301      	adds	r3, #1
 8004ace:	2b07      	cmp	r3, #7
 8004ad0:	9320      	str	r3, [sp, #128]	; 0x80
 8004ad2:	dc39      	bgt.n	8004b48 <_svfprintf_r+0xbb8>
 8004ad4:	f104 0308 	add.w	r3, r4, #8
 8004ad8:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004ada:	2e00      	cmp	r6, #0
 8004adc:	da19      	bge.n	8004b12 <_svfprintf_r+0xb82>
 8004ade:	4f89      	ldr	r7, [pc, #548]	; (8004d04 <_svfprintf_r+0xd74>)
 8004ae0:	4276      	negs	r6, r6
 8004ae2:	2410      	movs	r4, #16
 8004ae4:	2e10      	cmp	r6, #16
 8004ae6:	601f      	str	r7, [r3, #0]
 8004ae8:	dc38      	bgt.n	8004b5c <_svfprintf_r+0xbcc>
 8004aea:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004aec:	605e      	str	r6, [r3, #4]
 8004aee:	4416      	add	r6, r2
 8004af0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004af2:	9621      	str	r6, [sp, #132]	; 0x84
 8004af4:	3201      	adds	r2, #1
 8004af6:	2a07      	cmp	r2, #7
 8004af8:	f103 0308 	add.w	r3, r3, #8
 8004afc:	9220      	str	r2, [sp, #128]	; 0x80
 8004afe:	dd08      	ble.n	8004b12 <_svfprintf_r+0xb82>
 8004b00:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b02:	4651      	mov	r1, sl
 8004b04:	4658      	mov	r0, fp
 8004b06:	f001 fc6f 	bl	80063e8 <__ssprint_r>
 8004b0a:	2800      	cmp	r0, #0
 8004b0c:	f040 81a1 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004b10:	ab2c      	add	r3, sp, #176	; 0xb0
 8004b12:	9a03      	ldr	r2, [sp, #12]
 8004b14:	605a      	str	r2, [r3, #4]
 8004b16:	9903      	ldr	r1, [sp, #12]
 8004b18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b1a:	f8c3 8000 	str.w	r8, [r3]
 8004b1e:	440a      	add	r2, r1
 8004b20:	9221      	str	r2, [sp, #132]	; 0x84
 8004b22:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b24:	3201      	adds	r2, #1
 8004b26:	2a07      	cmp	r2, #7
 8004b28:	9220      	str	r2, [sp, #128]	; 0x80
 8004b2a:	f73f ad59 	bgt.w	80045e0 <_svfprintf_r+0x650>
 8004b2e:	f103 0408 	add.w	r4, r3, #8
 8004b32:	e55e      	b.n	80045f2 <_svfprintf_r+0x662>
 8004b34:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b36:	4651      	mov	r1, sl
 8004b38:	4658      	mov	r0, fp
 8004b3a:	f001 fc55 	bl	80063e8 <__ssprint_r>
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	f040 8187 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004b44:	ac2c      	add	r4, sp, #176	; 0xb0
 8004b46:	e7b1      	b.n	8004aac <_svfprintf_r+0xb1c>
 8004b48:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b4a:	4651      	mov	r1, sl
 8004b4c:	4658      	mov	r0, fp
 8004b4e:	f001 fc4b 	bl	80063e8 <__ssprint_r>
 8004b52:	2800      	cmp	r0, #0
 8004b54:	f040 817d 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004b58:	ab2c      	add	r3, sp, #176	; 0xb0
 8004b5a:	e7bd      	b.n	8004ad8 <_svfprintf_r+0xb48>
 8004b5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b5e:	605c      	str	r4, [r3, #4]
 8004b60:	3210      	adds	r2, #16
 8004b62:	9221      	str	r2, [sp, #132]	; 0x84
 8004b64:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004b66:	3201      	adds	r2, #1
 8004b68:	2a07      	cmp	r2, #7
 8004b6a:	9220      	str	r2, [sp, #128]	; 0x80
 8004b6c:	dc02      	bgt.n	8004b74 <_svfprintf_r+0xbe4>
 8004b6e:	3308      	adds	r3, #8
 8004b70:	3e10      	subs	r6, #16
 8004b72:	e7b7      	b.n	8004ae4 <_svfprintf_r+0xb54>
 8004b74:	aa1f      	add	r2, sp, #124	; 0x7c
 8004b76:	4651      	mov	r1, sl
 8004b78:	4658      	mov	r0, fp
 8004b7a:	f001 fc35 	bl	80063e8 <__ssprint_r>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	f040 8167 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004b84:	ab2c      	add	r3, sp, #176	; 0xb0
 8004b86:	e7f3      	b.n	8004b70 <_svfprintf_r+0xbe0>
 8004b88:	9b03      	ldr	r3, [sp, #12]
 8004b8a:	42bb      	cmp	r3, r7
 8004b8c:	bfa8      	it	ge
 8004b8e:	463b      	movge	r3, r7
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	461e      	mov	r6, r3
 8004b94:	dd0b      	ble.n	8004bae <_svfprintf_r+0xc1e>
 8004b96:	6063      	str	r3, [r4, #4]
 8004b98:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b9a:	f8c4 8000 	str.w	r8, [r4]
 8004b9e:	4433      	add	r3, r6
 8004ba0:	9321      	str	r3, [sp, #132]	; 0x84
 8004ba2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	2b07      	cmp	r3, #7
 8004ba8:	9320      	str	r3, [sp, #128]	; 0x80
 8004baa:	dc5f      	bgt.n	8004c6c <_svfprintf_r+0xcdc>
 8004bac:	3408      	adds	r4, #8
 8004bae:	2e00      	cmp	r6, #0
 8004bb0:	bfac      	ite	ge
 8004bb2:	1bbe      	subge	r6, r7, r6
 8004bb4:	463e      	movlt	r6, r7
 8004bb6:	2e00      	cmp	r6, #0
 8004bb8:	dd0f      	ble.n	8004bda <_svfprintf_r+0xc4a>
 8004bba:	f8df 9148 	ldr.w	r9, [pc, #328]	; 8004d04 <_svfprintf_r+0xd74>
 8004bbe:	f8c4 9000 	str.w	r9, [r4]
 8004bc2:	2e10      	cmp	r6, #16
 8004bc4:	dc5c      	bgt.n	8004c80 <_svfprintf_r+0xcf0>
 8004bc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bc8:	6066      	str	r6, [r4, #4]
 8004bca:	441e      	add	r6, r3
 8004bcc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004bce:	9621      	str	r6, [sp, #132]	; 0x84
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	2b07      	cmp	r3, #7
 8004bd4:	9320      	str	r3, [sp, #128]	; 0x80
 8004bd6:	dc6a      	bgt.n	8004cae <_svfprintf_r+0xd1e>
 8004bd8:	3408      	adds	r4, #8
 8004bda:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004bdc:	9a03      	ldr	r2, [sp, #12]
 8004bde:	4293      	cmp	r3, r2
 8004be0:	db01      	blt.n	8004be6 <_svfprintf_r+0xc56>
 8004be2:	07e9      	lsls	r1, r5, #31
 8004be4:	d50d      	bpl.n	8004c02 <_svfprintf_r+0xc72>
 8004be6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004be8:	6023      	str	r3, [r4, #0]
 8004bea:	9b08      	ldr	r3, [sp, #32]
 8004bec:	6063      	str	r3, [r4, #4]
 8004bee:	9a08      	ldr	r2, [sp, #32]
 8004bf0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004bf2:	4413      	add	r3, r2
 8004bf4:	9321      	str	r3, [sp, #132]	; 0x84
 8004bf6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	2b07      	cmp	r3, #7
 8004bfc:	9320      	str	r3, [sp, #128]	; 0x80
 8004bfe:	dc60      	bgt.n	8004cc2 <_svfprintf_r+0xd32>
 8004c00:	3408      	adds	r4, #8
 8004c02:	9b03      	ldr	r3, [sp, #12]
 8004c04:	9a03      	ldr	r2, [sp, #12]
 8004c06:	1bde      	subs	r6, r3, r7
 8004c08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	429e      	cmp	r6, r3
 8004c0e:	bfa8      	it	ge
 8004c10:	461e      	movge	r6, r3
 8004c12:	2e00      	cmp	r6, #0
 8004c14:	dd0b      	ble.n	8004c2e <_svfprintf_r+0xc9e>
 8004c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c18:	6066      	str	r6, [r4, #4]
 8004c1a:	4433      	add	r3, r6
 8004c1c:	9321      	str	r3, [sp, #132]	; 0x84
 8004c1e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c20:	3301      	adds	r3, #1
 8004c22:	4447      	add	r7, r8
 8004c24:	2b07      	cmp	r3, #7
 8004c26:	6027      	str	r7, [r4, #0]
 8004c28:	9320      	str	r3, [sp, #128]	; 0x80
 8004c2a:	dc54      	bgt.n	8004cd6 <_svfprintf_r+0xd46>
 8004c2c:	3408      	adds	r4, #8
 8004c2e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004c30:	9a03      	ldr	r2, [sp, #12]
 8004c32:	2e00      	cmp	r6, #0
 8004c34:	eba2 0303 	sub.w	r3, r2, r3
 8004c38:	bfac      	ite	ge
 8004c3a:	1b9e      	subge	r6, r3, r6
 8004c3c:	461e      	movlt	r6, r3
 8004c3e:	2e00      	cmp	r6, #0
 8004c40:	f77f acd7 	ble.w	80045f2 <_svfprintf_r+0x662>
 8004c44:	4f2f      	ldr	r7, [pc, #188]	; (8004d04 <_svfprintf_r+0xd74>)
 8004c46:	f04f 0810 	mov.w	r8, #16
 8004c4a:	2e10      	cmp	r6, #16
 8004c4c:	6027      	str	r7, [r4, #0]
 8004c4e:	f77f aee7 	ble.w	8004a20 <_svfprintf_r+0xa90>
 8004c52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c54:	f8c4 8004 	str.w	r8, [r4, #4]
 8004c58:	3310      	adds	r3, #16
 8004c5a:	9321      	str	r3, [sp, #132]	; 0x84
 8004c5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c5e:	3301      	adds	r3, #1
 8004c60:	2b07      	cmp	r3, #7
 8004c62:	9320      	str	r3, [sp, #128]	; 0x80
 8004c64:	dc41      	bgt.n	8004cea <_svfprintf_r+0xd5a>
 8004c66:	3408      	adds	r4, #8
 8004c68:	3e10      	subs	r6, #16
 8004c6a:	e7ee      	b.n	8004c4a <_svfprintf_r+0xcba>
 8004c6c:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c6e:	4651      	mov	r1, sl
 8004c70:	4658      	mov	r0, fp
 8004c72:	f001 fbb9 	bl	80063e8 <__ssprint_r>
 8004c76:	2800      	cmp	r0, #0
 8004c78:	f040 80eb 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004c7c:	ac2c      	add	r4, sp, #176	; 0xb0
 8004c7e:	e796      	b.n	8004bae <_svfprintf_r+0xc1e>
 8004c80:	2310      	movs	r3, #16
 8004c82:	6063      	str	r3, [r4, #4]
 8004c84:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004c86:	3310      	adds	r3, #16
 8004c88:	9321      	str	r3, [sp, #132]	; 0x84
 8004c8a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	2b07      	cmp	r3, #7
 8004c90:	9320      	str	r3, [sp, #128]	; 0x80
 8004c92:	dc02      	bgt.n	8004c9a <_svfprintf_r+0xd0a>
 8004c94:	3408      	adds	r4, #8
 8004c96:	3e10      	subs	r6, #16
 8004c98:	e791      	b.n	8004bbe <_svfprintf_r+0xc2e>
 8004c9a:	aa1f      	add	r2, sp, #124	; 0x7c
 8004c9c:	4651      	mov	r1, sl
 8004c9e:	4658      	mov	r0, fp
 8004ca0:	f001 fba2 	bl	80063e8 <__ssprint_r>
 8004ca4:	2800      	cmp	r0, #0
 8004ca6:	f040 80d4 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004caa:	ac2c      	add	r4, sp, #176	; 0xb0
 8004cac:	e7f3      	b.n	8004c96 <_svfprintf_r+0xd06>
 8004cae:	aa1f      	add	r2, sp, #124	; 0x7c
 8004cb0:	4651      	mov	r1, sl
 8004cb2:	4658      	mov	r0, fp
 8004cb4:	f001 fb98 	bl	80063e8 <__ssprint_r>
 8004cb8:	2800      	cmp	r0, #0
 8004cba:	f040 80ca 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004cbe:	ac2c      	add	r4, sp, #176	; 0xb0
 8004cc0:	e78b      	b.n	8004bda <_svfprintf_r+0xc4a>
 8004cc2:	aa1f      	add	r2, sp, #124	; 0x7c
 8004cc4:	4651      	mov	r1, sl
 8004cc6:	4658      	mov	r0, fp
 8004cc8:	f001 fb8e 	bl	80063e8 <__ssprint_r>
 8004ccc:	2800      	cmp	r0, #0
 8004cce:	f040 80c0 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004cd2:	ac2c      	add	r4, sp, #176	; 0xb0
 8004cd4:	e795      	b.n	8004c02 <_svfprintf_r+0xc72>
 8004cd6:	aa1f      	add	r2, sp, #124	; 0x7c
 8004cd8:	4651      	mov	r1, sl
 8004cda:	4658      	mov	r0, fp
 8004cdc:	f001 fb84 	bl	80063e8 <__ssprint_r>
 8004ce0:	2800      	cmp	r0, #0
 8004ce2:	f040 80b6 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004ce6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004ce8:	e7a1      	b.n	8004c2e <_svfprintf_r+0xc9e>
 8004cea:	aa1f      	add	r2, sp, #124	; 0x7c
 8004cec:	4651      	mov	r1, sl
 8004cee:	4658      	mov	r0, fp
 8004cf0:	f001 fb7a 	bl	80063e8 <__ssprint_r>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	f040 80ac 	bne.w	8004e52 <_svfprintf_r+0xec2>
 8004cfa:	ac2c      	add	r4, sp, #176	; 0xb0
 8004cfc:	e7b4      	b.n	8004c68 <_svfprintf_r+0xcd8>
 8004cfe:	bf00      	nop
 8004d00:	08006dc6 	.word	0x08006dc6
 8004d04:	08006dd8 	.word	0x08006dd8
 8004d08:	9b03      	ldr	r3, [sp, #12]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	dc01      	bgt.n	8004d12 <_svfprintf_r+0xd82>
 8004d0e:	07ea      	lsls	r2, r5, #31
 8004d10:	d576      	bpl.n	8004e00 <_svfprintf_r+0xe70>
 8004d12:	2301      	movs	r3, #1
 8004d14:	6063      	str	r3, [r4, #4]
 8004d16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d18:	f8c4 8000 	str.w	r8, [r4]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	9321      	str	r3, [sp, #132]	; 0x84
 8004d20:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d22:	3301      	adds	r3, #1
 8004d24:	2b07      	cmp	r3, #7
 8004d26:	9320      	str	r3, [sp, #128]	; 0x80
 8004d28:	dc36      	bgt.n	8004d98 <_svfprintf_r+0xe08>
 8004d2a:	3408      	adds	r4, #8
 8004d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d2e:	6023      	str	r3, [r4, #0]
 8004d30:	9b08      	ldr	r3, [sp, #32]
 8004d32:	6063      	str	r3, [r4, #4]
 8004d34:	9a08      	ldr	r2, [sp, #32]
 8004d36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d38:	4413      	add	r3, r2
 8004d3a:	9321      	str	r3, [sp, #132]	; 0x84
 8004d3c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d3e:	3301      	adds	r3, #1
 8004d40:	2b07      	cmp	r3, #7
 8004d42:	9320      	str	r3, [sp, #128]	; 0x80
 8004d44:	dc31      	bgt.n	8004daa <_svfprintf_r+0xe1a>
 8004d46:	3408      	adds	r4, #8
 8004d48:	2300      	movs	r3, #0
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d50:	f7fb febe 	bl	8000ad0 <__aeabi_dcmpeq>
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	1e5e      	subs	r6, r3, #1
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	d12f      	bne.n	8004dbc <_svfprintf_r+0xe2c>
 8004d5c:	f108 0301 	add.w	r3, r8, #1
 8004d60:	e884 0048 	stmia.w	r4, {r3, r6}
 8004d64:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d66:	9a03      	ldr	r2, [sp, #12]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	4413      	add	r3, r2
 8004d6c:	9321      	str	r3, [sp, #132]	; 0x84
 8004d6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004d70:	3301      	adds	r3, #1
 8004d72:	2b07      	cmp	r3, #7
 8004d74:	9320      	str	r3, [sp, #128]	; 0x80
 8004d76:	dd4a      	ble.n	8004e0e <_svfprintf_r+0xe7e>
 8004d78:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d7a:	4651      	mov	r1, sl
 8004d7c:	4658      	mov	r0, fp
 8004d7e:	f001 fb33 	bl	80063e8 <__ssprint_r>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d165      	bne.n	8004e52 <_svfprintf_r+0xec2>
 8004d86:	ac2c      	add	r4, sp, #176	; 0xb0
 8004d88:	ab1b      	add	r3, sp, #108	; 0x6c
 8004d8a:	6023      	str	r3, [r4, #0]
 8004d8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d8e:	6063      	str	r3, [r4, #4]
 8004d90:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004d94:	4413      	add	r3, r2
 8004d96:	e41c      	b.n	80045d2 <_svfprintf_r+0x642>
 8004d98:	aa1f      	add	r2, sp, #124	; 0x7c
 8004d9a:	4651      	mov	r1, sl
 8004d9c:	4658      	mov	r0, fp
 8004d9e:	f001 fb23 	bl	80063e8 <__ssprint_r>
 8004da2:	2800      	cmp	r0, #0
 8004da4:	d155      	bne.n	8004e52 <_svfprintf_r+0xec2>
 8004da6:	ac2c      	add	r4, sp, #176	; 0xb0
 8004da8:	e7c0      	b.n	8004d2c <_svfprintf_r+0xd9c>
 8004daa:	aa1f      	add	r2, sp, #124	; 0x7c
 8004dac:	4651      	mov	r1, sl
 8004dae:	4658      	mov	r0, fp
 8004db0:	f001 fb1a 	bl	80063e8 <__ssprint_r>
 8004db4:	2800      	cmp	r0, #0
 8004db6:	d14c      	bne.n	8004e52 <_svfprintf_r+0xec2>
 8004db8:	ac2c      	add	r4, sp, #176	; 0xb0
 8004dba:	e7c5      	b.n	8004d48 <_svfprintf_r+0xdb8>
 8004dbc:	2e00      	cmp	r6, #0
 8004dbe:	dde3      	ble.n	8004d88 <_svfprintf_r+0xdf8>
 8004dc0:	4f59      	ldr	r7, [pc, #356]	; (8004f28 <_svfprintf_r+0xf98>)
 8004dc2:	f04f 0810 	mov.w	r8, #16
 8004dc6:	2e10      	cmp	r6, #16
 8004dc8:	6027      	str	r7, [r4, #0]
 8004dca:	dc04      	bgt.n	8004dd6 <_svfprintf_r+0xe46>
 8004dcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dce:	6066      	str	r6, [r4, #4]
 8004dd0:	441e      	add	r6, r3
 8004dd2:	9621      	str	r6, [sp, #132]	; 0x84
 8004dd4:	e7cb      	b.n	8004d6e <_svfprintf_r+0xdde>
 8004dd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004dd8:	f8c4 8004 	str.w	r8, [r4, #4]
 8004ddc:	3310      	adds	r3, #16
 8004dde:	9321      	str	r3, [sp, #132]	; 0x84
 8004de0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004de2:	3301      	adds	r3, #1
 8004de4:	2b07      	cmp	r3, #7
 8004de6:	9320      	str	r3, [sp, #128]	; 0x80
 8004de8:	dc02      	bgt.n	8004df0 <_svfprintf_r+0xe60>
 8004dea:	3408      	adds	r4, #8
 8004dec:	3e10      	subs	r6, #16
 8004dee:	e7ea      	b.n	8004dc6 <_svfprintf_r+0xe36>
 8004df0:	aa1f      	add	r2, sp, #124	; 0x7c
 8004df2:	4651      	mov	r1, sl
 8004df4:	4658      	mov	r0, fp
 8004df6:	f001 faf7 	bl	80063e8 <__ssprint_r>
 8004dfa:	bb50      	cbnz	r0, 8004e52 <_svfprintf_r+0xec2>
 8004dfc:	ac2c      	add	r4, sp, #176	; 0xb0
 8004dfe:	e7f5      	b.n	8004dec <_svfprintf_r+0xe5c>
 8004e00:	2301      	movs	r3, #1
 8004e02:	6063      	str	r3, [r4, #4]
 8004e04:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e06:	f8c4 8000 	str.w	r8, [r4]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	e7ae      	b.n	8004d6c <_svfprintf_r+0xddc>
 8004e0e:	3408      	adds	r4, #8
 8004e10:	e7ba      	b.n	8004d88 <_svfprintf_r+0xdf8>
 8004e12:	3408      	adds	r4, #8
 8004e14:	f7ff bbed 	b.w	80045f2 <_svfprintf_r+0x662>
 8004e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004e1c:	1a9d      	subs	r5, r3, r2
 8004e1e:	2d00      	cmp	r5, #0
 8004e20:	f77f abea 	ble.w	80045f8 <_svfprintf_r+0x668>
 8004e24:	2610      	movs	r6, #16
 8004e26:	4b41      	ldr	r3, [pc, #260]	; (8004f2c <_svfprintf_r+0xf9c>)
 8004e28:	6023      	str	r3, [r4, #0]
 8004e2a:	2d10      	cmp	r5, #16
 8004e2c:	dc1b      	bgt.n	8004e66 <_svfprintf_r+0xed6>
 8004e2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e30:	6065      	str	r5, [r4, #4]
 8004e32:	441d      	add	r5, r3
 8004e34:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e36:	9521      	str	r5, [sp, #132]	; 0x84
 8004e38:	3301      	adds	r3, #1
 8004e3a:	2b07      	cmp	r3, #7
 8004e3c:	9320      	str	r3, [sp, #128]	; 0x80
 8004e3e:	f77f abdb 	ble.w	80045f8 <_svfprintf_r+0x668>
 8004e42:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e44:	4651      	mov	r1, sl
 8004e46:	4658      	mov	r0, fp
 8004e48:	f001 face 	bl	80063e8 <__ssprint_r>
 8004e4c:	2800      	cmp	r0, #0
 8004e4e:	f43f abd3 	beq.w	80045f8 <_svfprintf_r+0x668>
 8004e52:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004e56:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e5c:	bf18      	it	ne
 8004e5e:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
 8004e62:	f7ff b8b9 	b.w	8003fd8 <_svfprintf_r+0x48>
 8004e66:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e68:	6066      	str	r6, [r4, #4]
 8004e6a:	3310      	adds	r3, #16
 8004e6c:	9321      	str	r3, [sp, #132]	; 0x84
 8004e6e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004e70:	3301      	adds	r3, #1
 8004e72:	2b07      	cmp	r3, #7
 8004e74:	9320      	str	r3, [sp, #128]	; 0x80
 8004e76:	dc02      	bgt.n	8004e7e <_svfprintf_r+0xeee>
 8004e78:	3408      	adds	r4, #8
 8004e7a:	3d10      	subs	r5, #16
 8004e7c:	e7d3      	b.n	8004e26 <_svfprintf_r+0xe96>
 8004e7e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e80:	4651      	mov	r1, sl
 8004e82:	4658      	mov	r0, fp
 8004e84:	f001 fab0 	bl	80063e8 <__ssprint_r>
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d1e2      	bne.n	8004e52 <_svfprintf_r+0xec2>
 8004e8c:	ac2c      	add	r4, sp, #176	; 0xb0
 8004e8e:	e7f4      	b.n	8004e7a <_svfprintf_r+0xeea>
 8004e90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d0dd      	beq.n	8004e52 <_svfprintf_r+0xec2>
 8004e96:	aa1f      	add	r2, sp, #124	; 0x7c
 8004e98:	4651      	mov	r1, sl
 8004e9a:	4658      	mov	r0, fp
 8004e9c:	f001 faa4 	bl	80063e8 <__ssprint_r>
 8004ea0:	e7d7      	b.n	8004e52 <_svfprintf_r+0xec2>
 8004ea2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	f7fb fe43 	bl	8000b34 <__aeabi_dcmpun>
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	f43f aa44 	beq.w	800433c <_svfprintf_r+0x3ac>
 8004eb4:	4b1e      	ldr	r3, [pc, #120]	; (8004f30 <_svfprintf_r+0xfa0>)
 8004eb6:	4a1f      	ldr	r2, [pc, #124]	; (8004f34 <_svfprintf_r+0xfa4>)
 8004eb8:	f7ff ba34 	b.w	8004324 <_svfprintf_r+0x394>
 8004ebc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004ebe:	eba3 0308 	sub.w	r3, r3, r8
 8004ec2:	9303      	str	r3, [sp, #12]
 8004ec4:	f7ff bab5 	b.w	8004432 <_svfprintf_r+0x4a2>
 8004ec8:	ea56 0207 	orrs.w	r2, r6, r7
 8004ecc:	950b      	str	r5, [sp, #44]	; 0x2c
 8004ece:	f43f ac2b 	beq.w	8004728 <_svfprintf_r+0x798>
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	f43f ac9d 	beq.w	8004812 <_svfprintf_r+0x882>
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	f43f acbd 	beq.w	8004858 <_svfprintf_r+0x8c8>
 8004ede:	ab2c      	add	r3, sp, #176	; 0xb0
 8004ee0:	08f1      	lsrs	r1, r6, #3
 8004ee2:	ea41 7147 	orr.w	r1, r1, r7, lsl #29
 8004ee6:	08f8      	lsrs	r0, r7, #3
 8004ee8:	f006 0207 	and.w	r2, r6, #7
 8004eec:	4607      	mov	r7, r0
 8004eee:	460e      	mov	r6, r1
 8004ef0:	3230      	adds	r2, #48	; 0x30
 8004ef2:	ea56 0107 	orrs.w	r1, r6, r7
 8004ef6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8004efa:	f803 2c01 	strb.w	r2, [r3, #-1]
 8004efe:	f47f ac86 	bne.w	800480e <_svfprintf_r+0x87e>
 8004f02:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004f04:	07c9      	lsls	r1, r1, #31
 8004f06:	d506      	bpl.n	8004f16 <_svfprintf_r+0xf86>
 8004f08:	2a30      	cmp	r2, #48	; 0x30
 8004f0a:	d004      	beq.n	8004f16 <_svfprintf_r+0xf86>
 8004f0c:	2230      	movs	r2, #48	; 0x30
 8004f0e:	f808 2c01 	strb.w	r2, [r8, #-1]
 8004f12:	f1a3 0802 	sub.w	r8, r3, #2
 8004f16:	464e      	mov	r6, r9
 8004f18:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8004f1c:	eba9 0908 	sub.w	r9, r9, r8
 8004f20:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8004f22:	2700      	movs	r7, #0
 8004f24:	f7ff bad1 	b.w	80044ca <_svfprintf_r+0x53a>
 8004f28:	08006dd8 	.word	0x08006dd8
 8004f2c:	08006dc8 	.word	0x08006dc8
 8004f30:	08006d9c 	.word	0x08006d9c
 8004f34:	08006da0 	.word	0x08006da0

08004f38 <quorem>:
 8004f38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3c:	6903      	ldr	r3, [r0, #16]
 8004f3e:	690c      	ldr	r4, [r1, #16]
 8004f40:	429c      	cmp	r4, r3
 8004f42:	4680      	mov	r8, r0
 8004f44:	f300 8082 	bgt.w	800504c <quorem+0x114>
 8004f48:	3c01      	subs	r4, #1
 8004f4a:	f101 0714 	add.w	r7, r1, #20
 8004f4e:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004f52:	f100 0614 	add.w	r6, r0, #20
 8004f56:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8004f5a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8004f5e:	eb06 030e 	add.w	r3, r6, lr
 8004f62:	3501      	adds	r5, #1
 8004f64:	eb07 090e 	add.w	r9, r7, lr
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	fbb0 f5f5 	udiv	r5, r0, r5
 8004f6e:	b395      	cbz	r5, 8004fd6 <quorem+0x9e>
 8004f70:	f04f 0a00 	mov.w	sl, #0
 8004f74:	4638      	mov	r0, r7
 8004f76:	46b4      	mov	ip, r6
 8004f78:	46d3      	mov	fp, sl
 8004f7a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f7e:	b293      	uxth	r3, r2
 8004f80:	fb05 a303 	mla	r3, r5, r3, sl
 8004f84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	ebab 0303 	sub.w	r3, fp, r3
 8004f8e:	0c12      	lsrs	r2, r2, #16
 8004f90:	f8bc b000 	ldrh.w	fp, [ip]
 8004f94:	fb05 a202 	mla	r2, r5, r2, sl
 8004f98:	fa13 f38b 	uxtah	r3, r3, fp
 8004f9c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8004fa0:	fa1f fb82 	uxth.w	fp, r2
 8004fa4:	f8dc 2000 	ldr.w	r2, [ip]
 8004fa8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004fac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fb6:	4581      	cmp	r9, r0
 8004fb8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004fbc:	f84c 3b04 	str.w	r3, [ip], #4
 8004fc0:	d2db      	bcs.n	8004f7a <quorem+0x42>
 8004fc2:	f856 300e 	ldr.w	r3, [r6, lr]
 8004fc6:	b933      	cbnz	r3, 8004fd6 <quorem+0x9e>
 8004fc8:	9b01      	ldr	r3, [sp, #4]
 8004fca:	3b04      	subs	r3, #4
 8004fcc:	429e      	cmp	r6, r3
 8004fce:	461a      	mov	r2, r3
 8004fd0:	d330      	bcc.n	8005034 <quorem+0xfc>
 8004fd2:	f8c8 4010 	str.w	r4, [r8, #16]
 8004fd6:	4640      	mov	r0, r8
 8004fd8:	f001 f93f 	bl	800625a <__mcmp>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	db25      	blt.n	800502c <quorem+0xf4>
 8004fe0:	3501      	adds	r5, #1
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	f04f 0e00 	mov.w	lr, #0
 8004fe8:	f857 2b04 	ldr.w	r2, [r7], #4
 8004fec:	f8d0 c000 	ldr.w	ip, [r0]
 8004ff0:	b293      	uxth	r3, r2
 8004ff2:	ebae 0303 	sub.w	r3, lr, r3
 8004ff6:	0c12      	lsrs	r2, r2, #16
 8004ff8:	fa13 f38c 	uxtah	r3, r3, ip
 8004ffc:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8005000:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005004:	b29b      	uxth	r3, r3
 8005006:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800500a:	45b9      	cmp	r9, r7
 800500c:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8005010:	f840 3b04 	str.w	r3, [r0], #4
 8005014:	d2e8      	bcs.n	8004fe8 <quorem+0xb0>
 8005016:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800501a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800501e:	b92a      	cbnz	r2, 800502c <quorem+0xf4>
 8005020:	3b04      	subs	r3, #4
 8005022:	429e      	cmp	r6, r3
 8005024:	461a      	mov	r2, r3
 8005026:	d30b      	bcc.n	8005040 <quorem+0x108>
 8005028:	f8c8 4010 	str.w	r4, [r8, #16]
 800502c:	4628      	mov	r0, r5
 800502e:	b003      	add	sp, #12
 8005030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	3b04      	subs	r3, #4
 8005038:	2a00      	cmp	r2, #0
 800503a:	d1ca      	bne.n	8004fd2 <quorem+0x9a>
 800503c:	3c01      	subs	r4, #1
 800503e:	e7c5      	b.n	8004fcc <quorem+0x94>
 8005040:	6812      	ldr	r2, [r2, #0]
 8005042:	3b04      	subs	r3, #4
 8005044:	2a00      	cmp	r2, #0
 8005046:	d1ef      	bne.n	8005028 <quorem+0xf0>
 8005048:	3c01      	subs	r4, #1
 800504a:	e7ea      	b.n	8005022 <quorem+0xea>
 800504c:	2000      	movs	r0, #0
 800504e:	e7ee      	b.n	800502e <quorem+0xf6>

08005050 <_dtoa_r>:
 8005050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005054:	ec57 6b10 	vmov	r6, r7, d0
 8005058:	b097      	sub	sp, #92	; 0x5c
 800505a:	e9cd 6700 	strd	r6, r7, [sp]
 800505e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005060:	9107      	str	r1, [sp, #28]
 8005062:	4604      	mov	r4, r0
 8005064:	920a      	str	r2, [sp, #40]	; 0x28
 8005066:	930f      	str	r3, [sp, #60]	; 0x3c
 8005068:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800506a:	b93e      	cbnz	r6, 800507c <_dtoa_r+0x2c>
 800506c:	2010      	movs	r0, #16
 800506e:	f7fe fceb 	bl	8003a48 <malloc>
 8005072:	6260      	str	r0, [r4, #36]	; 0x24
 8005074:	6046      	str	r6, [r0, #4]
 8005076:	6086      	str	r6, [r0, #8]
 8005078:	6006      	str	r6, [r0, #0]
 800507a:	60c6      	str	r6, [r0, #12]
 800507c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800507e:	6819      	ldr	r1, [r3, #0]
 8005080:	b151      	cbz	r1, 8005098 <_dtoa_r+0x48>
 8005082:	685a      	ldr	r2, [r3, #4]
 8005084:	604a      	str	r2, [r1, #4]
 8005086:	2301      	movs	r3, #1
 8005088:	4093      	lsls	r3, r2
 800508a:	608b      	str	r3, [r1, #8]
 800508c:	4620      	mov	r0, r4
 800508e:	f000 ff0e 	bl	8005eae <_Bfree>
 8005092:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005094:	2200      	movs	r2, #0
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	9b01      	ldr	r3, [sp, #4]
 800509a:	2b00      	cmp	r3, #0
 800509c:	bfbf      	itttt	lt
 800509e:	2301      	movlt	r3, #1
 80050a0:	602b      	strlt	r3, [r5, #0]
 80050a2:	9b01      	ldrlt	r3, [sp, #4]
 80050a4:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80050a8:	bfb2      	itee	lt
 80050aa:	9301      	strlt	r3, [sp, #4]
 80050ac:	2300      	movge	r3, #0
 80050ae:	602b      	strge	r3, [r5, #0]
 80050b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80050b4:	4ba8      	ldr	r3, [pc, #672]	; (8005358 <_dtoa_r+0x308>)
 80050b6:	ea33 0308 	bics.w	r3, r3, r8
 80050ba:	d11b      	bne.n	80050f4 <_dtoa_r+0xa4>
 80050bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80050be:	f242 730f 	movw	r3, #9999	; 0x270f
 80050c2:	6013      	str	r3, [r2, #0]
 80050c4:	9b00      	ldr	r3, [sp, #0]
 80050c6:	b923      	cbnz	r3, 80050d2 <_dtoa_r+0x82>
 80050c8:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80050cc:	2800      	cmp	r0, #0
 80050ce:	f000 8578 	beq.w	8005bc2 <_dtoa_r+0xb72>
 80050d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80050d4:	b953      	cbnz	r3, 80050ec <_dtoa_r+0x9c>
 80050d6:	4ba1      	ldr	r3, [pc, #644]	; (800535c <_dtoa_r+0x30c>)
 80050d8:	e021      	b.n	800511e <_dtoa_r+0xce>
 80050da:	4ba1      	ldr	r3, [pc, #644]	; (8005360 <_dtoa_r+0x310>)
 80050dc:	9302      	str	r3, [sp, #8]
 80050de:	3308      	adds	r3, #8
 80050e0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80050e2:	6013      	str	r3, [r2, #0]
 80050e4:	9802      	ldr	r0, [sp, #8]
 80050e6:	b017      	add	sp, #92	; 0x5c
 80050e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ec:	4b9b      	ldr	r3, [pc, #620]	; (800535c <_dtoa_r+0x30c>)
 80050ee:	9302      	str	r3, [sp, #8]
 80050f0:	3303      	adds	r3, #3
 80050f2:	e7f5      	b.n	80050e0 <_dtoa_r+0x90>
 80050f4:	e9dd 6700 	ldrd	r6, r7, [sp]
 80050f8:	2200      	movs	r2, #0
 80050fa:	2300      	movs	r3, #0
 80050fc:	4630      	mov	r0, r6
 80050fe:	4639      	mov	r1, r7
 8005100:	f7fb fce6 	bl	8000ad0 <__aeabi_dcmpeq>
 8005104:	4681      	mov	r9, r0
 8005106:	b160      	cbz	r0, 8005122 <_dtoa_r+0xd2>
 8005108:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800510a:	2301      	movs	r3, #1
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 8553 	beq.w	8005bbc <_dtoa_r+0xb6c>
 8005116:	4b93      	ldr	r3, [pc, #588]	; (8005364 <_dtoa_r+0x314>)
 8005118:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	3b01      	subs	r3, #1
 800511e:	9302      	str	r3, [sp, #8]
 8005120:	e7e0      	b.n	80050e4 <_dtoa_r+0x94>
 8005122:	aa14      	add	r2, sp, #80	; 0x50
 8005124:	a915      	add	r1, sp, #84	; 0x54
 8005126:	ec47 6b10 	vmov	d0, r6, r7
 800512a:	4620      	mov	r0, r4
 800512c:	f001 f90d 	bl	800634a <__d2b>
 8005130:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005134:	4682      	mov	sl, r0
 8005136:	2d00      	cmp	r5, #0
 8005138:	d07e      	beq.n	8005238 <_dtoa_r+0x1e8>
 800513a:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800513e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005142:	4630      	mov	r0, r6
 8005144:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005148:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800514c:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
 8005150:	2200      	movs	r2, #0
 8005152:	4b85      	ldr	r3, [pc, #532]	; (8005368 <_dtoa_r+0x318>)
 8005154:	f7fb f8a0 	bl	8000298 <__aeabi_dsub>
 8005158:	a379      	add	r3, pc, #484	; (adr r3, 8005340 <_dtoa_r+0x2f0>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fb fa4f 	bl	8000600 <__aeabi_dmul>
 8005162:	a379      	add	r3, pc, #484	; (adr r3, 8005348 <_dtoa_r+0x2f8>)
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	f7fb f898 	bl	800029c <__adddf3>
 800516c:	4606      	mov	r6, r0
 800516e:	4628      	mov	r0, r5
 8005170:	460f      	mov	r7, r1
 8005172:	f7fb f9df 	bl	8000534 <__aeabi_i2d>
 8005176:	a376      	add	r3, pc, #472	; (adr r3, 8005350 <_dtoa_r+0x300>)
 8005178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800517c:	f7fb fa40 	bl	8000600 <__aeabi_dmul>
 8005180:	4602      	mov	r2, r0
 8005182:	460b      	mov	r3, r1
 8005184:	4630      	mov	r0, r6
 8005186:	4639      	mov	r1, r7
 8005188:	f7fb f888 	bl	800029c <__adddf3>
 800518c:	4606      	mov	r6, r0
 800518e:	460f      	mov	r7, r1
 8005190:	f7fb fce6 	bl	8000b60 <__aeabi_d2iz>
 8005194:	2200      	movs	r2, #0
 8005196:	4683      	mov	fp, r0
 8005198:	2300      	movs	r3, #0
 800519a:	4630      	mov	r0, r6
 800519c:	4639      	mov	r1, r7
 800519e:	f7fb fca1 	bl	8000ae4 <__aeabi_dcmplt>
 80051a2:	b158      	cbz	r0, 80051bc <_dtoa_r+0x16c>
 80051a4:	4658      	mov	r0, fp
 80051a6:	f7fb f9c5 	bl	8000534 <__aeabi_i2d>
 80051aa:	4602      	mov	r2, r0
 80051ac:	460b      	mov	r3, r1
 80051ae:	4630      	mov	r0, r6
 80051b0:	4639      	mov	r1, r7
 80051b2:	f7fb fc8d 	bl	8000ad0 <__aeabi_dcmpeq>
 80051b6:	b908      	cbnz	r0, 80051bc <_dtoa_r+0x16c>
 80051b8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80051bc:	f1bb 0f16 	cmp.w	fp, #22
 80051c0:	d859      	bhi.n	8005276 <_dtoa_r+0x226>
 80051c2:	496a      	ldr	r1, [pc, #424]	; (800536c <_dtoa_r+0x31c>)
 80051c4:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80051c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80051d0:	f7fb fca6 	bl	8000b20 <__aeabi_dcmpgt>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d050      	beq.n	800527a <_dtoa_r+0x22a>
 80051d8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80051dc:	2300      	movs	r3, #0
 80051de:	930e      	str	r3, [sp, #56]	; 0x38
 80051e0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051e2:	1b5d      	subs	r5, r3, r5
 80051e4:	1e6b      	subs	r3, r5, #1
 80051e6:	9306      	str	r3, [sp, #24]
 80051e8:	bf45      	ittet	mi
 80051ea:	f1c5 0301 	rsbmi	r3, r5, #1
 80051ee:	9305      	strmi	r3, [sp, #20]
 80051f0:	2300      	movpl	r3, #0
 80051f2:	2300      	movmi	r3, #0
 80051f4:	bf4c      	ite	mi
 80051f6:	9306      	strmi	r3, [sp, #24]
 80051f8:	9305      	strpl	r3, [sp, #20]
 80051fa:	f1bb 0f00 	cmp.w	fp, #0
 80051fe:	db3e      	blt.n	800527e <_dtoa_r+0x22e>
 8005200:	9b06      	ldr	r3, [sp, #24]
 8005202:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005206:	445b      	add	r3, fp
 8005208:	9306      	str	r3, [sp, #24]
 800520a:	2300      	movs	r3, #0
 800520c:	9308      	str	r3, [sp, #32]
 800520e:	9b07      	ldr	r3, [sp, #28]
 8005210:	2b09      	cmp	r3, #9
 8005212:	f200 80af 	bhi.w	8005374 <_dtoa_r+0x324>
 8005216:	2b05      	cmp	r3, #5
 8005218:	bfc4      	itt	gt
 800521a:	3b04      	subgt	r3, #4
 800521c:	9307      	strgt	r3, [sp, #28]
 800521e:	9b07      	ldr	r3, [sp, #28]
 8005220:	f1a3 0302 	sub.w	r3, r3, #2
 8005224:	bfcc      	ite	gt
 8005226:	2600      	movgt	r6, #0
 8005228:	2601      	movle	r6, #1
 800522a:	2b03      	cmp	r3, #3
 800522c:	f200 80ae 	bhi.w	800538c <_dtoa_r+0x33c>
 8005230:	e8df f003 	tbb	[pc, r3]
 8005234:	772f8482 	.word	0x772f8482
 8005238:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800523a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800523c:	441d      	add	r5, r3
 800523e:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005242:	2b20      	cmp	r3, #32
 8005244:	dd11      	ble.n	800526a <_dtoa_r+0x21a>
 8005246:	9a00      	ldr	r2, [sp, #0]
 8005248:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800524c:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8005250:	fa22 f000 	lsr.w	r0, r2, r0
 8005254:	fa08 f303 	lsl.w	r3, r8, r3
 8005258:	4318      	orrs	r0, r3
 800525a:	f7fb f95b 	bl	8000514 <__aeabi_ui2d>
 800525e:	2301      	movs	r3, #1
 8005260:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005264:	3d01      	subs	r5, #1
 8005266:	9312      	str	r3, [sp, #72]	; 0x48
 8005268:	e772      	b.n	8005150 <_dtoa_r+0x100>
 800526a:	f1c3 0020 	rsb	r0, r3, #32
 800526e:	9b00      	ldr	r3, [sp, #0]
 8005270:	fa03 f000 	lsl.w	r0, r3, r0
 8005274:	e7f1      	b.n	800525a <_dtoa_r+0x20a>
 8005276:	2301      	movs	r3, #1
 8005278:	e7b1      	b.n	80051de <_dtoa_r+0x18e>
 800527a:	900e      	str	r0, [sp, #56]	; 0x38
 800527c:	e7b0      	b.n	80051e0 <_dtoa_r+0x190>
 800527e:	9b05      	ldr	r3, [sp, #20]
 8005280:	eba3 030b 	sub.w	r3, r3, fp
 8005284:	9305      	str	r3, [sp, #20]
 8005286:	f1cb 0300 	rsb	r3, fp, #0
 800528a:	9308      	str	r3, [sp, #32]
 800528c:	2300      	movs	r3, #0
 800528e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005290:	e7bd      	b.n	800520e <_dtoa_r+0x1be>
 8005292:	2301      	movs	r3, #1
 8005294:	9309      	str	r3, [sp, #36]	; 0x24
 8005296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005298:	2b00      	cmp	r3, #0
 800529a:	dd7a      	ble.n	8005392 <_dtoa_r+0x342>
 800529c:	9304      	str	r3, [sp, #16]
 800529e:	9303      	str	r3, [sp, #12]
 80052a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80052a2:	2200      	movs	r2, #0
 80052a4:	606a      	str	r2, [r5, #4]
 80052a6:	2104      	movs	r1, #4
 80052a8:	f101 0214 	add.w	r2, r1, #20
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d975      	bls.n	800539c <_dtoa_r+0x34c>
 80052b0:	6869      	ldr	r1, [r5, #4]
 80052b2:	4620      	mov	r0, r4
 80052b4:	f000 fdc7 	bl	8005e46 <_Balloc>
 80052b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80052ba:	6028      	str	r0, [r5, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	9302      	str	r3, [sp, #8]
 80052c0:	9b03      	ldr	r3, [sp, #12]
 80052c2:	2b0e      	cmp	r3, #14
 80052c4:	f200 80e5 	bhi.w	8005492 <_dtoa_r+0x442>
 80052c8:	2e00      	cmp	r6, #0
 80052ca:	f000 80e2 	beq.w	8005492 <_dtoa_r+0x442>
 80052ce:	ed9d 7b00 	vldr	d7, [sp]
 80052d2:	f1bb 0f00 	cmp.w	fp, #0
 80052d6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80052da:	dd74      	ble.n	80053c6 <_dtoa_r+0x376>
 80052dc:	4a23      	ldr	r2, [pc, #140]	; (800536c <_dtoa_r+0x31c>)
 80052de:	f00b 030f 	and.w	r3, fp, #15
 80052e2:	ea4f 162b 	mov.w	r6, fp, asr #4
 80052e6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80052ea:	06f0      	lsls	r0, r6, #27
 80052ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80052f0:	d559      	bpl.n	80053a6 <_dtoa_r+0x356>
 80052f2:	4b1f      	ldr	r3, [pc, #124]	; (8005370 <_dtoa_r+0x320>)
 80052f4:	ec51 0b17 	vmov	r0, r1, d7
 80052f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80052fc:	f7fb faaa 	bl	8000854 <__aeabi_ddiv>
 8005300:	e9cd 0100 	strd	r0, r1, [sp]
 8005304:	f006 060f 	and.w	r6, r6, #15
 8005308:	2503      	movs	r5, #3
 800530a:	4f19      	ldr	r7, [pc, #100]	; (8005370 <_dtoa_r+0x320>)
 800530c:	2e00      	cmp	r6, #0
 800530e:	d14c      	bne.n	80053aa <_dtoa_r+0x35a>
 8005310:	4642      	mov	r2, r8
 8005312:	464b      	mov	r3, r9
 8005314:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005318:	f7fb fa9c 	bl	8000854 <__aeabi_ddiv>
 800531c:	e9cd 0100 	strd	r0, r1, [sp]
 8005320:	e06a      	b.n	80053f8 <_dtoa_r+0x3a8>
 8005322:	2301      	movs	r3, #1
 8005324:	9309      	str	r3, [sp, #36]	; 0x24
 8005326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005328:	445b      	add	r3, fp
 800532a:	9304      	str	r3, [sp, #16]
 800532c:	3301      	adds	r3, #1
 800532e:	2b01      	cmp	r3, #1
 8005330:	9303      	str	r3, [sp, #12]
 8005332:	bfb8      	it	lt
 8005334:	2301      	movlt	r3, #1
 8005336:	e7b3      	b.n	80052a0 <_dtoa_r+0x250>
 8005338:	2300      	movs	r3, #0
 800533a:	e7ab      	b.n	8005294 <_dtoa_r+0x244>
 800533c:	2300      	movs	r3, #0
 800533e:	e7f1      	b.n	8005324 <_dtoa_r+0x2d4>
 8005340:	636f4361 	.word	0x636f4361
 8005344:	3fd287a7 	.word	0x3fd287a7
 8005348:	8b60c8b3 	.word	0x8b60c8b3
 800534c:	3fc68a28 	.word	0x3fc68a28
 8005350:	509f79fb 	.word	0x509f79fb
 8005354:	3fd34413 	.word	0x3fd34413
 8005358:	7ff00000 	.word	0x7ff00000
 800535c:	08006df1 	.word	0x08006df1
 8005360:	08006de8 	.word	0x08006de8
 8005364:	08006dc7 	.word	0x08006dc7
 8005368:	3ff80000 	.word	0x3ff80000
 800536c:	08006e20 	.word	0x08006e20
 8005370:	08006df8 	.word	0x08006df8
 8005374:	2601      	movs	r6, #1
 8005376:	2300      	movs	r3, #0
 8005378:	9307      	str	r3, [sp, #28]
 800537a:	9609      	str	r6, [sp, #36]	; 0x24
 800537c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005380:	9304      	str	r3, [sp, #16]
 8005382:	9303      	str	r3, [sp, #12]
 8005384:	2200      	movs	r2, #0
 8005386:	2312      	movs	r3, #18
 8005388:	920a      	str	r2, [sp, #40]	; 0x28
 800538a:	e789      	b.n	80052a0 <_dtoa_r+0x250>
 800538c:	2301      	movs	r3, #1
 800538e:	9309      	str	r3, [sp, #36]	; 0x24
 8005390:	e7f4      	b.n	800537c <_dtoa_r+0x32c>
 8005392:	2301      	movs	r3, #1
 8005394:	9304      	str	r3, [sp, #16]
 8005396:	9303      	str	r3, [sp, #12]
 8005398:	461a      	mov	r2, r3
 800539a:	e7f5      	b.n	8005388 <_dtoa_r+0x338>
 800539c:	686a      	ldr	r2, [r5, #4]
 800539e:	3201      	adds	r2, #1
 80053a0:	606a      	str	r2, [r5, #4]
 80053a2:	0049      	lsls	r1, r1, #1
 80053a4:	e780      	b.n	80052a8 <_dtoa_r+0x258>
 80053a6:	2502      	movs	r5, #2
 80053a8:	e7af      	b.n	800530a <_dtoa_r+0x2ba>
 80053aa:	07f1      	lsls	r1, r6, #31
 80053ac:	d508      	bpl.n	80053c0 <_dtoa_r+0x370>
 80053ae:	4640      	mov	r0, r8
 80053b0:	4649      	mov	r1, r9
 80053b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053b6:	f7fb f923 	bl	8000600 <__aeabi_dmul>
 80053ba:	3501      	adds	r5, #1
 80053bc:	4680      	mov	r8, r0
 80053be:	4689      	mov	r9, r1
 80053c0:	1076      	asrs	r6, r6, #1
 80053c2:	3708      	adds	r7, #8
 80053c4:	e7a2      	b.n	800530c <_dtoa_r+0x2bc>
 80053c6:	f000 809d 	beq.w	8005504 <_dtoa_r+0x4b4>
 80053ca:	f1cb 0600 	rsb	r6, fp, #0
 80053ce:	4b9f      	ldr	r3, [pc, #636]	; (800564c <_dtoa_r+0x5fc>)
 80053d0:	4f9f      	ldr	r7, [pc, #636]	; (8005650 <_dtoa_r+0x600>)
 80053d2:	f006 020f 	and.w	r2, r6, #15
 80053d6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053e2:	f7fb f90d 	bl	8000600 <__aeabi_dmul>
 80053e6:	e9cd 0100 	strd	r0, r1, [sp]
 80053ea:	1136      	asrs	r6, r6, #4
 80053ec:	2300      	movs	r3, #0
 80053ee:	2502      	movs	r5, #2
 80053f0:	2e00      	cmp	r6, #0
 80053f2:	d17c      	bne.n	80054ee <_dtoa_r+0x49e>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d191      	bne.n	800531c <_dtoa_r+0x2cc>
 80053f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	f000 8084 	beq.w	8005508 <_dtoa_r+0x4b8>
 8005400:	e9dd 8900 	ldrd	r8, r9, [sp]
 8005404:	2200      	movs	r2, #0
 8005406:	4b93      	ldr	r3, [pc, #588]	; (8005654 <_dtoa_r+0x604>)
 8005408:	4640      	mov	r0, r8
 800540a:	4649      	mov	r1, r9
 800540c:	f7fb fb6a 	bl	8000ae4 <__aeabi_dcmplt>
 8005410:	2800      	cmp	r0, #0
 8005412:	d079      	beq.n	8005508 <_dtoa_r+0x4b8>
 8005414:	9b03      	ldr	r3, [sp, #12]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d076      	beq.n	8005508 <_dtoa_r+0x4b8>
 800541a:	9b04      	ldr	r3, [sp, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	dd34      	ble.n	800548a <_dtoa_r+0x43a>
 8005420:	2200      	movs	r2, #0
 8005422:	4b8d      	ldr	r3, [pc, #564]	; (8005658 <_dtoa_r+0x608>)
 8005424:	4640      	mov	r0, r8
 8005426:	4649      	mov	r1, r9
 8005428:	f7fb f8ea 	bl	8000600 <__aeabi_dmul>
 800542c:	e9cd 0100 	strd	r0, r1, [sp]
 8005430:	9e04      	ldr	r6, [sp, #16]
 8005432:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8005436:	3501      	adds	r5, #1
 8005438:	4628      	mov	r0, r5
 800543a:	f7fb f87b 	bl	8000534 <__aeabi_i2d>
 800543e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005442:	f7fb f8dd 	bl	8000600 <__aeabi_dmul>
 8005446:	2200      	movs	r2, #0
 8005448:	4b84      	ldr	r3, [pc, #528]	; (800565c <_dtoa_r+0x60c>)
 800544a:	f7fa ff27 	bl	800029c <__adddf3>
 800544e:	4680      	mov	r8, r0
 8005450:	f1a1 7950 	sub.w	r9, r1, #54525952	; 0x3400000
 8005454:	2e00      	cmp	r6, #0
 8005456:	d15a      	bne.n	800550e <_dtoa_r+0x4be>
 8005458:	2200      	movs	r2, #0
 800545a:	4b81      	ldr	r3, [pc, #516]	; (8005660 <_dtoa_r+0x610>)
 800545c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005460:	f7fa ff1a 	bl	8000298 <__aeabi_dsub>
 8005464:	4642      	mov	r2, r8
 8005466:	464b      	mov	r3, r9
 8005468:	e9cd 0100 	strd	r0, r1, [sp]
 800546c:	f7fb fb58 	bl	8000b20 <__aeabi_dcmpgt>
 8005470:	2800      	cmp	r0, #0
 8005472:	f040 829b 	bne.w	80059ac <_dtoa_r+0x95c>
 8005476:	4642      	mov	r2, r8
 8005478:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800547c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005480:	f7fb fb30 	bl	8000ae4 <__aeabi_dcmplt>
 8005484:	2800      	cmp	r0, #0
 8005486:	f040 828f 	bne.w	80059a8 <_dtoa_r+0x958>
 800548a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800548e:	e9cd 2300 	strd	r2, r3, [sp]
 8005492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005494:	2b00      	cmp	r3, #0
 8005496:	f2c0 8150 	blt.w	800573a <_dtoa_r+0x6ea>
 800549a:	f1bb 0f0e 	cmp.w	fp, #14
 800549e:	f300 814c 	bgt.w	800573a <_dtoa_r+0x6ea>
 80054a2:	4b6a      	ldr	r3, [pc, #424]	; (800564c <_dtoa_r+0x5fc>)
 80054a4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80054a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f280 80da 	bge.w	8005668 <_dtoa_r+0x618>
 80054b4:	9b03      	ldr	r3, [sp, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f300 80d6 	bgt.w	8005668 <_dtoa_r+0x618>
 80054bc:	f040 8273 	bne.w	80059a6 <_dtoa_r+0x956>
 80054c0:	2200      	movs	r2, #0
 80054c2:	4b67      	ldr	r3, [pc, #412]	; (8005660 <_dtoa_r+0x610>)
 80054c4:	4640      	mov	r0, r8
 80054c6:	4649      	mov	r1, r9
 80054c8:	f7fb f89a 	bl	8000600 <__aeabi_dmul>
 80054cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054d0:	f7fb fb1c 	bl	8000b0c <__aeabi_dcmpge>
 80054d4:	9e03      	ldr	r6, [sp, #12]
 80054d6:	4637      	mov	r7, r6
 80054d8:	2800      	cmp	r0, #0
 80054da:	f040 824a 	bne.w	8005972 <_dtoa_r+0x922>
 80054de:	9b02      	ldr	r3, [sp, #8]
 80054e0:	9a02      	ldr	r2, [sp, #8]
 80054e2:	1c5d      	adds	r5, r3, #1
 80054e4:	2331      	movs	r3, #49	; 0x31
 80054e6:	7013      	strb	r3, [r2, #0]
 80054e8:	f10b 0b01 	add.w	fp, fp, #1
 80054ec:	e245      	b.n	800597a <_dtoa_r+0x92a>
 80054ee:	07f2      	lsls	r2, r6, #31
 80054f0:	d505      	bpl.n	80054fe <_dtoa_r+0x4ae>
 80054f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054f6:	f7fb f883 	bl	8000600 <__aeabi_dmul>
 80054fa:	3501      	adds	r5, #1
 80054fc:	2301      	movs	r3, #1
 80054fe:	1076      	asrs	r6, r6, #1
 8005500:	3708      	adds	r7, #8
 8005502:	e775      	b.n	80053f0 <_dtoa_r+0x3a0>
 8005504:	2502      	movs	r5, #2
 8005506:	e777      	b.n	80053f8 <_dtoa_r+0x3a8>
 8005508:	465f      	mov	r7, fp
 800550a:	9e03      	ldr	r6, [sp, #12]
 800550c:	e794      	b.n	8005438 <_dtoa_r+0x3e8>
 800550e:	9a02      	ldr	r2, [sp, #8]
 8005510:	4b4e      	ldr	r3, [pc, #312]	; (800564c <_dtoa_r+0x5fc>)
 8005512:	4432      	add	r2, r6
 8005514:	9213      	str	r2, [sp, #76]	; 0x4c
 8005516:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005518:	1e71      	subs	r1, r6, #1
 800551a:	2a00      	cmp	r2, #0
 800551c:	d048      	beq.n	80055b0 <_dtoa_r+0x560>
 800551e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	2000      	movs	r0, #0
 8005528:	494e      	ldr	r1, [pc, #312]	; (8005664 <_dtoa_r+0x614>)
 800552a:	f7fb f993 	bl	8000854 <__aeabi_ddiv>
 800552e:	4642      	mov	r2, r8
 8005530:	464b      	mov	r3, r9
 8005532:	f7fa feb1 	bl	8000298 <__aeabi_dsub>
 8005536:	9d02      	ldr	r5, [sp, #8]
 8005538:	4680      	mov	r8, r0
 800553a:	4689      	mov	r9, r1
 800553c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005540:	f7fb fb0e 	bl	8000b60 <__aeabi_d2iz>
 8005544:	4606      	mov	r6, r0
 8005546:	f7fa fff5 	bl	8000534 <__aeabi_i2d>
 800554a:	4602      	mov	r2, r0
 800554c:	460b      	mov	r3, r1
 800554e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005552:	f7fa fea1 	bl	8000298 <__aeabi_dsub>
 8005556:	3630      	adds	r6, #48	; 0x30
 8005558:	f805 6b01 	strb.w	r6, [r5], #1
 800555c:	4642      	mov	r2, r8
 800555e:	464b      	mov	r3, r9
 8005560:	e9cd 0100 	strd	r0, r1, [sp]
 8005564:	f7fb fabe 	bl	8000ae4 <__aeabi_dcmplt>
 8005568:	2800      	cmp	r0, #0
 800556a:	d165      	bne.n	8005638 <_dtoa_r+0x5e8>
 800556c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005570:	2000      	movs	r0, #0
 8005572:	4938      	ldr	r1, [pc, #224]	; (8005654 <_dtoa_r+0x604>)
 8005574:	f7fa fe90 	bl	8000298 <__aeabi_dsub>
 8005578:	4642      	mov	r2, r8
 800557a:	464b      	mov	r3, r9
 800557c:	f7fb fab2 	bl	8000ae4 <__aeabi_dcmplt>
 8005580:	2800      	cmp	r0, #0
 8005582:	f040 80ba 	bne.w	80056fa <_dtoa_r+0x6aa>
 8005586:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005588:	429d      	cmp	r5, r3
 800558a:	f43f af7e 	beq.w	800548a <_dtoa_r+0x43a>
 800558e:	2200      	movs	r2, #0
 8005590:	4b31      	ldr	r3, [pc, #196]	; (8005658 <_dtoa_r+0x608>)
 8005592:	4640      	mov	r0, r8
 8005594:	4649      	mov	r1, r9
 8005596:	f7fb f833 	bl	8000600 <__aeabi_dmul>
 800559a:	2200      	movs	r2, #0
 800559c:	4680      	mov	r8, r0
 800559e:	4689      	mov	r9, r1
 80055a0:	4b2d      	ldr	r3, [pc, #180]	; (8005658 <_dtoa_r+0x608>)
 80055a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055a6:	f7fb f82b 	bl	8000600 <__aeabi_dmul>
 80055aa:	e9cd 0100 	strd	r0, r1, [sp]
 80055ae:	e7c5      	b.n	800553c <_dtoa_r+0x4ec>
 80055b0:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80055b4:	4642      	mov	r2, r8
 80055b6:	464b      	mov	r3, r9
 80055b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80055bc:	f7fb f820 	bl	8000600 <__aeabi_dmul>
 80055c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055c4:	9d02      	ldr	r5, [sp, #8]
 80055c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055ca:	f7fb fac9 	bl	8000b60 <__aeabi_d2iz>
 80055ce:	4606      	mov	r6, r0
 80055d0:	f7fa ffb0 	bl	8000534 <__aeabi_i2d>
 80055d4:	3630      	adds	r6, #48	; 0x30
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055de:	f7fa fe5b 	bl	8000298 <__aeabi_dsub>
 80055e2:	f805 6b01 	strb.w	r6, [r5], #1
 80055e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80055e8:	42ab      	cmp	r3, r5
 80055ea:	4680      	mov	r8, r0
 80055ec:	4689      	mov	r9, r1
 80055ee:	f04f 0200 	mov.w	r2, #0
 80055f2:	d125      	bne.n	8005640 <_dtoa_r+0x5f0>
 80055f4:	4b1b      	ldr	r3, [pc, #108]	; (8005664 <_dtoa_r+0x614>)
 80055f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055fa:	f7fa fe4f 	bl	800029c <__adddf3>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4640      	mov	r0, r8
 8005604:	4649      	mov	r1, r9
 8005606:	f7fb fa8b 	bl	8000b20 <__aeabi_dcmpgt>
 800560a:	2800      	cmp	r0, #0
 800560c:	d175      	bne.n	80056fa <_dtoa_r+0x6aa>
 800560e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005612:	2000      	movs	r0, #0
 8005614:	4913      	ldr	r1, [pc, #76]	; (8005664 <_dtoa_r+0x614>)
 8005616:	f7fa fe3f 	bl	8000298 <__aeabi_dsub>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4640      	mov	r0, r8
 8005620:	4649      	mov	r1, r9
 8005622:	f7fb fa5f 	bl	8000ae4 <__aeabi_dcmplt>
 8005626:	2800      	cmp	r0, #0
 8005628:	f43f af2f 	beq.w	800548a <_dtoa_r+0x43a>
 800562c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005630:	2b30      	cmp	r3, #48	; 0x30
 8005632:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005636:	d001      	beq.n	800563c <_dtoa_r+0x5ec>
 8005638:	46bb      	mov	fp, r7
 800563a:	e04d      	b.n	80056d8 <_dtoa_r+0x688>
 800563c:	4615      	mov	r5, r2
 800563e:	e7f5      	b.n	800562c <_dtoa_r+0x5dc>
 8005640:	4b05      	ldr	r3, [pc, #20]	; (8005658 <_dtoa_r+0x608>)
 8005642:	f7fa ffdd 	bl	8000600 <__aeabi_dmul>
 8005646:	e9cd 0100 	strd	r0, r1, [sp]
 800564a:	e7bc      	b.n	80055c6 <_dtoa_r+0x576>
 800564c:	08006e20 	.word	0x08006e20
 8005650:	08006df8 	.word	0x08006df8
 8005654:	3ff00000 	.word	0x3ff00000
 8005658:	40240000 	.word	0x40240000
 800565c:	401c0000 	.word	0x401c0000
 8005660:	40140000 	.word	0x40140000
 8005664:	3fe00000 	.word	0x3fe00000
 8005668:	e9dd 6700 	ldrd	r6, r7, [sp]
 800566c:	9d02      	ldr	r5, [sp, #8]
 800566e:	4642      	mov	r2, r8
 8005670:	464b      	mov	r3, r9
 8005672:	4630      	mov	r0, r6
 8005674:	4639      	mov	r1, r7
 8005676:	f7fb f8ed 	bl	8000854 <__aeabi_ddiv>
 800567a:	f7fb fa71 	bl	8000b60 <__aeabi_d2iz>
 800567e:	9000      	str	r0, [sp, #0]
 8005680:	f7fa ff58 	bl	8000534 <__aeabi_i2d>
 8005684:	4642      	mov	r2, r8
 8005686:	464b      	mov	r3, r9
 8005688:	f7fa ffba 	bl	8000600 <__aeabi_dmul>
 800568c:	4602      	mov	r2, r0
 800568e:	460b      	mov	r3, r1
 8005690:	4630      	mov	r0, r6
 8005692:	4639      	mov	r1, r7
 8005694:	f7fa fe00 	bl	8000298 <__aeabi_dsub>
 8005698:	9e00      	ldr	r6, [sp, #0]
 800569a:	9f03      	ldr	r7, [sp, #12]
 800569c:	3630      	adds	r6, #48	; 0x30
 800569e:	f805 6b01 	strb.w	r6, [r5], #1
 80056a2:	9e02      	ldr	r6, [sp, #8]
 80056a4:	1bae      	subs	r6, r5, r6
 80056a6:	42b7      	cmp	r7, r6
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	d138      	bne.n	8005720 <_dtoa_r+0x6d0>
 80056ae:	f7fa fdf5 	bl	800029c <__adddf3>
 80056b2:	4606      	mov	r6, r0
 80056b4:	460f      	mov	r7, r1
 80056b6:	4602      	mov	r2, r0
 80056b8:	460b      	mov	r3, r1
 80056ba:	4640      	mov	r0, r8
 80056bc:	4649      	mov	r1, r9
 80056be:	f7fb fa11 	bl	8000ae4 <__aeabi_dcmplt>
 80056c2:	b9c8      	cbnz	r0, 80056f8 <_dtoa_r+0x6a8>
 80056c4:	4632      	mov	r2, r6
 80056c6:	463b      	mov	r3, r7
 80056c8:	4640      	mov	r0, r8
 80056ca:	4649      	mov	r1, r9
 80056cc:	f7fb fa00 	bl	8000ad0 <__aeabi_dcmpeq>
 80056d0:	b110      	cbz	r0, 80056d8 <_dtoa_r+0x688>
 80056d2:	9b00      	ldr	r3, [sp, #0]
 80056d4:	07db      	lsls	r3, r3, #31
 80056d6:	d40f      	bmi.n	80056f8 <_dtoa_r+0x6a8>
 80056d8:	4651      	mov	r1, sl
 80056da:	4620      	mov	r0, r4
 80056dc:	f000 fbe7 	bl	8005eae <_Bfree>
 80056e0:	2300      	movs	r3, #0
 80056e2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80056e4:	702b      	strb	r3, [r5, #0]
 80056e6:	f10b 0301 	add.w	r3, fp, #1
 80056ea:	6013      	str	r3, [r2, #0]
 80056ec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f43f acf8 	beq.w	80050e4 <_dtoa_r+0x94>
 80056f4:	601d      	str	r5, [r3, #0]
 80056f6:	e4f5      	b.n	80050e4 <_dtoa_r+0x94>
 80056f8:	465f      	mov	r7, fp
 80056fa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80056fe:	2a39      	cmp	r2, #57	; 0x39
 8005700:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8005704:	d106      	bne.n	8005714 <_dtoa_r+0x6c4>
 8005706:	9a02      	ldr	r2, [sp, #8]
 8005708:	429a      	cmp	r2, r3
 800570a:	d107      	bne.n	800571c <_dtoa_r+0x6cc>
 800570c:	2330      	movs	r3, #48	; 0x30
 800570e:	7013      	strb	r3, [r2, #0]
 8005710:	3701      	adds	r7, #1
 8005712:	4613      	mov	r3, r2
 8005714:	781a      	ldrb	r2, [r3, #0]
 8005716:	3201      	adds	r2, #1
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	e78d      	b.n	8005638 <_dtoa_r+0x5e8>
 800571c:	461d      	mov	r5, r3
 800571e:	e7ec      	b.n	80056fa <_dtoa_r+0x6aa>
 8005720:	2200      	movs	r2, #0
 8005722:	4ba4      	ldr	r3, [pc, #656]	; (80059b4 <_dtoa_r+0x964>)
 8005724:	f7fa ff6c 	bl	8000600 <__aeabi_dmul>
 8005728:	2200      	movs	r2, #0
 800572a:	2300      	movs	r3, #0
 800572c:	4606      	mov	r6, r0
 800572e:	460f      	mov	r7, r1
 8005730:	f7fb f9ce 	bl	8000ad0 <__aeabi_dcmpeq>
 8005734:	2800      	cmp	r0, #0
 8005736:	d09a      	beq.n	800566e <_dtoa_r+0x61e>
 8005738:	e7ce      	b.n	80056d8 <_dtoa_r+0x688>
 800573a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800573c:	2a00      	cmp	r2, #0
 800573e:	f000 80cd 	beq.w	80058dc <_dtoa_r+0x88c>
 8005742:	9a07      	ldr	r2, [sp, #28]
 8005744:	2a01      	cmp	r2, #1
 8005746:	f300 80af 	bgt.w	80058a8 <_dtoa_r+0x858>
 800574a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800574c:	2a00      	cmp	r2, #0
 800574e:	f000 80a7 	beq.w	80058a0 <_dtoa_r+0x850>
 8005752:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005756:	9e08      	ldr	r6, [sp, #32]
 8005758:	9d05      	ldr	r5, [sp, #20]
 800575a:	9a05      	ldr	r2, [sp, #20]
 800575c:	441a      	add	r2, r3
 800575e:	9205      	str	r2, [sp, #20]
 8005760:	9a06      	ldr	r2, [sp, #24]
 8005762:	2101      	movs	r1, #1
 8005764:	441a      	add	r2, r3
 8005766:	4620      	mov	r0, r4
 8005768:	9206      	str	r2, [sp, #24]
 800576a:	f000 fc40 	bl	8005fee <__i2b>
 800576e:	4607      	mov	r7, r0
 8005770:	2d00      	cmp	r5, #0
 8005772:	dd0c      	ble.n	800578e <_dtoa_r+0x73e>
 8005774:	9b06      	ldr	r3, [sp, #24]
 8005776:	2b00      	cmp	r3, #0
 8005778:	dd09      	ble.n	800578e <_dtoa_r+0x73e>
 800577a:	42ab      	cmp	r3, r5
 800577c:	9a05      	ldr	r2, [sp, #20]
 800577e:	bfa8      	it	ge
 8005780:	462b      	movge	r3, r5
 8005782:	1ad2      	subs	r2, r2, r3
 8005784:	9205      	str	r2, [sp, #20]
 8005786:	9a06      	ldr	r2, [sp, #24]
 8005788:	1aed      	subs	r5, r5, r3
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	9306      	str	r3, [sp, #24]
 800578e:	9b08      	ldr	r3, [sp, #32]
 8005790:	b1f3      	cbz	r3, 80057d0 <_dtoa_r+0x780>
 8005792:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80a5 	beq.w	80058e4 <_dtoa_r+0x894>
 800579a:	2e00      	cmp	r6, #0
 800579c:	dd10      	ble.n	80057c0 <_dtoa_r+0x770>
 800579e:	4639      	mov	r1, r7
 80057a0:	4632      	mov	r2, r6
 80057a2:	4620      	mov	r0, r4
 80057a4:	f000 fcba 	bl	800611c <__pow5mult>
 80057a8:	4652      	mov	r2, sl
 80057aa:	4601      	mov	r1, r0
 80057ac:	4607      	mov	r7, r0
 80057ae:	4620      	mov	r0, r4
 80057b0:	f000 fc26 	bl	8006000 <__multiply>
 80057b4:	4651      	mov	r1, sl
 80057b6:	4680      	mov	r8, r0
 80057b8:	4620      	mov	r0, r4
 80057ba:	f000 fb78 	bl	8005eae <_Bfree>
 80057be:	46c2      	mov	sl, r8
 80057c0:	9b08      	ldr	r3, [sp, #32]
 80057c2:	1b9a      	subs	r2, r3, r6
 80057c4:	d004      	beq.n	80057d0 <_dtoa_r+0x780>
 80057c6:	4651      	mov	r1, sl
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 fca7 	bl	800611c <__pow5mult>
 80057ce:	4682      	mov	sl, r0
 80057d0:	2101      	movs	r1, #1
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 fc0b 	bl	8005fee <__i2b>
 80057d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	4606      	mov	r6, r0
 80057de:	f340 8083 	ble.w	80058e8 <_dtoa_r+0x898>
 80057e2:	461a      	mov	r2, r3
 80057e4:	4601      	mov	r1, r0
 80057e6:	4620      	mov	r0, r4
 80057e8:	f000 fc98 	bl	800611c <__pow5mult>
 80057ec:	9b07      	ldr	r3, [sp, #28]
 80057ee:	2b01      	cmp	r3, #1
 80057f0:	4606      	mov	r6, r0
 80057f2:	dd7c      	ble.n	80058ee <_dtoa_r+0x89e>
 80057f4:	f04f 0800 	mov.w	r8, #0
 80057f8:	6933      	ldr	r3, [r6, #16]
 80057fa:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80057fe:	6918      	ldr	r0, [r3, #16]
 8005800:	f000 fba7 	bl	8005f52 <__hi0bits>
 8005804:	f1c0 0020 	rsb	r0, r0, #32
 8005808:	9b06      	ldr	r3, [sp, #24]
 800580a:	4418      	add	r0, r3
 800580c:	f010 001f 	ands.w	r0, r0, #31
 8005810:	f000 8096 	beq.w	8005940 <_dtoa_r+0x8f0>
 8005814:	f1c0 0320 	rsb	r3, r0, #32
 8005818:	2b04      	cmp	r3, #4
 800581a:	f340 8087 	ble.w	800592c <_dtoa_r+0x8dc>
 800581e:	9b05      	ldr	r3, [sp, #20]
 8005820:	f1c0 001c 	rsb	r0, r0, #28
 8005824:	4403      	add	r3, r0
 8005826:	9305      	str	r3, [sp, #20]
 8005828:	9b06      	ldr	r3, [sp, #24]
 800582a:	4405      	add	r5, r0
 800582c:	4403      	add	r3, r0
 800582e:	9306      	str	r3, [sp, #24]
 8005830:	9b05      	ldr	r3, [sp, #20]
 8005832:	2b00      	cmp	r3, #0
 8005834:	dd05      	ble.n	8005842 <_dtoa_r+0x7f2>
 8005836:	4651      	mov	r1, sl
 8005838:	461a      	mov	r2, r3
 800583a:	4620      	mov	r0, r4
 800583c:	f000 fcbc 	bl	80061b8 <__lshift>
 8005840:	4682      	mov	sl, r0
 8005842:	9b06      	ldr	r3, [sp, #24]
 8005844:	2b00      	cmp	r3, #0
 8005846:	dd05      	ble.n	8005854 <_dtoa_r+0x804>
 8005848:	4631      	mov	r1, r6
 800584a:	461a      	mov	r2, r3
 800584c:	4620      	mov	r0, r4
 800584e:	f000 fcb3 	bl	80061b8 <__lshift>
 8005852:	4606      	mov	r6, r0
 8005854:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005856:	2b00      	cmp	r3, #0
 8005858:	d074      	beq.n	8005944 <_dtoa_r+0x8f4>
 800585a:	4631      	mov	r1, r6
 800585c:	4650      	mov	r0, sl
 800585e:	f000 fcfc 	bl	800625a <__mcmp>
 8005862:	2800      	cmp	r0, #0
 8005864:	da6e      	bge.n	8005944 <_dtoa_r+0x8f4>
 8005866:	2300      	movs	r3, #0
 8005868:	4651      	mov	r1, sl
 800586a:	220a      	movs	r2, #10
 800586c:	4620      	mov	r0, r4
 800586e:	f000 fb35 	bl	8005edc <__multadd>
 8005872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005874:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8005878:	4682      	mov	sl, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	f000 81a8 	beq.w	8005bd0 <_dtoa_r+0xb80>
 8005880:	2300      	movs	r3, #0
 8005882:	4639      	mov	r1, r7
 8005884:	220a      	movs	r2, #10
 8005886:	4620      	mov	r0, r4
 8005888:	f000 fb28 	bl	8005edc <__multadd>
 800588c:	9b04      	ldr	r3, [sp, #16]
 800588e:	2b00      	cmp	r3, #0
 8005890:	4607      	mov	r7, r0
 8005892:	f300 80c8 	bgt.w	8005a26 <_dtoa_r+0x9d6>
 8005896:	9b07      	ldr	r3, [sp, #28]
 8005898:	2b02      	cmp	r3, #2
 800589a:	f340 80c4 	ble.w	8005a26 <_dtoa_r+0x9d6>
 800589e:	e059      	b.n	8005954 <_dtoa_r+0x904>
 80058a0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80058a2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80058a6:	e756      	b.n	8005756 <_dtoa_r+0x706>
 80058a8:	9b03      	ldr	r3, [sp, #12]
 80058aa:	1e5e      	subs	r6, r3, #1
 80058ac:	9b08      	ldr	r3, [sp, #32]
 80058ae:	42b3      	cmp	r3, r6
 80058b0:	bfbf      	itttt	lt
 80058b2:	9b08      	ldrlt	r3, [sp, #32]
 80058b4:	9608      	strlt	r6, [sp, #32]
 80058b6:	1af2      	sublt	r2, r6, r3
 80058b8:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 80058ba:	bfb6      	itet	lt
 80058bc:	189b      	addlt	r3, r3, r2
 80058be:	1b9e      	subge	r6, r3, r6
 80058c0:	930b      	strlt	r3, [sp, #44]	; 0x2c
 80058c2:	9b03      	ldr	r3, [sp, #12]
 80058c4:	bfb8      	it	lt
 80058c6:	2600      	movlt	r6, #0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bfb9      	ittee	lt
 80058cc:	9b05      	ldrlt	r3, [sp, #20]
 80058ce:	9a03      	ldrlt	r2, [sp, #12]
 80058d0:	9d05      	ldrge	r5, [sp, #20]
 80058d2:	9b03      	ldrge	r3, [sp, #12]
 80058d4:	bfbc      	itt	lt
 80058d6:	1a9d      	sublt	r5, r3, r2
 80058d8:	2300      	movlt	r3, #0
 80058da:	e73e      	b.n	800575a <_dtoa_r+0x70a>
 80058dc:	9e08      	ldr	r6, [sp, #32]
 80058de:	9d05      	ldr	r5, [sp, #20]
 80058e0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80058e2:	e745      	b.n	8005770 <_dtoa_r+0x720>
 80058e4:	9a08      	ldr	r2, [sp, #32]
 80058e6:	e76e      	b.n	80057c6 <_dtoa_r+0x776>
 80058e8:	9b07      	ldr	r3, [sp, #28]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	dc19      	bgt.n	8005922 <_dtoa_r+0x8d2>
 80058ee:	9b00      	ldr	r3, [sp, #0]
 80058f0:	b9bb      	cbnz	r3, 8005922 <_dtoa_r+0x8d2>
 80058f2:	9b01      	ldr	r3, [sp, #4]
 80058f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058f8:	b99b      	cbnz	r3, 8005922 <_dtoa_r+0x8d2>
 80058fa:	9b01      	ldr	r3, [sp, #4]
 80058fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005900:	0d1b      	lsrs	r3, r3, #20
 8005902:	051b      	lsls	r3, r3, #20
 8005904:	b183      	cbz	r3, 8005928 <_dtoa_r+0x8d8>
 8005906:	9b05      	ldr	r3, [sp, #20]
 8005908:	3301      	adds	r3, #1
 800590a:	9305      	str	r3, [sp, #20]
 800590c:	9b06      	ldr	r3, [sp, #24]
 800590e:	3301      	adds	r3, #1
 8005910:	9306      	str	r3, [sp, #24]
 8005912:	f04f 0801 	mov.w	r8, #1
 8005916:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005918:	2b00      	cmp	r3, #0
 800591a:	f47f af6d 	bne.w	80057f8 <_dtoa_r+0x7a8>
 800591e:	2001      	movs	r0, #1
 8005920:	e772      	b.n	8005808 <_dtoa_r+0x7b8>
 8005922:	f04f 0800 	mov.w	r8, #0
 8005926:	e7f6      	b.n	8005916 <_dtoa_r+0x8c6>
 8005928:	4698      	mov	r8, r3
 800592a:	e7f4      	b.n	8005916 <_dtoa_r+0x8c6>
 800592c:	d080      	beq.n	8005830 <_dtoa_r+0x7e0>
 800592e:	9a05      	ldr	r2, [sp, #20]
 8005930:	331c      	adds	r3, #28
 8005932:	441a      	add	r2, r3
 8005934:	9205      	str	r2, [sp, #20]
 8005936:	9a06      	ldr	r2, [sp, #24]
 8005938:	441a      	add	r2, r3
 800593a:	441d      	add	r5, r3
 800593c:	4613      	mov	r3, r2
 800593e:	e776      	b.n	800582e <_dtoa_r+0x7de>
 8005940:	4603      	mov	r3, r0
 8005942:	e7f4      	b.n	800592e <_dtoa_r+0x8de>
 8005944:	9b03      	ldr	r3, [sp, #12]
 8005946:	2b00      	cmp	r3, #0
 8005948:	dc36      	bgt.n	80059b8 <_dtoa_r+0x968>
 800594a:	9b07      	ldr	r3, [sp, #28]
 800594c:	2b02      	cmp	r3, #2
 800594e:	dd33      	ble.n	80059b8 <_dtoa_r+0x968>
 8005950:	9b03      	ldr	r3, [sp, #12]
 8005952:	9304      	str	r3, [sp, #16]
 8005954:	9b04      	ldr	r3, [sp, #16]
 8005956:	b963      	cbnz	r3, 8005972 <_dtoa_r+0x922>
 8005958:	4631      	mov	r1, r6
 800595a:	2205      	movs	r2, #5
 800595c:	4620      	mov	r0, r4
 800595e:	f000 fabd 	bl	8005edc <__multadd>
 8005962:	4601      	mov	r1, r0
 8005964:	4606      	mov	r6, r0
 8005966:	4650      	mov	r0, sl
 8005968:	f000 fc77 	bl	800625a <__mcmp>
 800596c:	2800      	cmp	r0, #0
 800596e:	f73f adb6 	bgt.w	80054de <_dtoa_r+0x48e>
 8005972:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005974:	9d02      	ldr	r5, [sp, #8]
 8005976:	ea6f 0b03 	mvn.w	fp, r3
 800597a:	2300      	movs	r3, #0
 800597c:	9303      	str	r3, [sp, #12]
 800597e:	4631      	mov	r1, r6
 8005980:	4620      	mov	r0, r4
 8005982:	f000 fa94 	bl	8005eae <_Bfree>
 8005986:	2f00      	cmp	r7, #0
 8005988:	f43f aea6 	beq.w	80056d8 <_dtoa_r+0x688>
 800598c:	9b03      	ldr	r3, [sp, #12]
 800598e:	b12b      	cbz	r3, 800599c <_dtoa_r+0x94c>
 8005990:	42bb      	cmp	r3, r7
 8005992:	d003      	beq.n	800599c <_dtoa_r+0x94c>
 8005994:	4619      	mov	r1, r3
 8005996:	4620      	mov	r0, r4
 8005998:	f000 fa89 	bl	8005eae <_Bfree>
 800599c:	4639      	mov	r1, r7
 800599e:	4620      	mov	r0, r4
 80059a0:	f000 fa85 	bl	8005eae <_Bfree>
 80059a4:	e698      	b.n	80056d8 <_dtoa_r+0x688>
 80059a6:	2600      	movs	r6, #0
 80059a8:	4637      	mov	r7, r6
 80059aa:	e7e2      	b.n	8005972 <_dtoa_r+0x922>
 80059ac:	46bb      	mov	fp, r7
 80059ae:	4637      	mov	r7, r6
 80059b0:	e595      	b.n	80054de <_dtoa_r+0x48e>
 80059b2:	bf00      	nop
 80059b4:	40240000 	.word	0x40240000
 80059b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ba:	bb93      	cbnz	r3, 8005a22 <_dtoa_r+0x9d2>
 80059bc:	9b03      	ldr	r3, [sp, #12]
 80059be:	9304      	str	r3, [sp, #16]
 80059c0:	9d02      	ldr	r5, [sp, #8]
 80059c2:	4631      	mov	r1, r6
 80059c4:	4650      	mov	r0, sl
 80059c6:	f7ff fab7 	bl	8004f38 <quorem>
 80059ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80059ce:	f805 9b01 	strb.w	r9, [r5], #1
 80059d2:	9b02      	ldr	r3, [sp, #8]
 80059d4:	9a04      	ldr	r2, [sp, #16]
 80059d6:	1aeb      	subs	r3, r5, r3
 80059d8:	429a      	cmp	r2, r3
 80059da:	f300 80dc 	bgt.w	8005b96 <_dtoa_r+0xb46>
 80059de:	9b02      	ldr	r3, [sp, #8]
 80059e0:	2a01      	cmp	r2, #1
 80059e2:	bfac      	ite	ge
 80059e4:	189b      	addge	r3, r3, r2
 80059e6:	3301      	addlt	r3, #1
 80059e8:	4698      	mov	r8, r3
 80059ea:	2300      	movs	r3, #0
 80059ec:	9303      	str	r3, [sp, #12]
 80059ee:	4651      	mov	r1, sl
 80059f0:	2201      	movs	r2, #1
 80059f2:	4620      	mov	r0, r4
 80059f4:	f000 fbe0 	bl	80061b8 <__lshift>
 80059f8:	4631      	mov	r1, r6
 80059fa:	4682      	mov	sl, r0
 80059fc:	f000 fc2d 	bl	800625a <__mcmp>
 8005a00:	2800      	cmp	r0, #0
 8005a02:	f300 808d 	bgt.w	8005b20 <_dtoa_r+0xad0>
 8005a06:	d103      	bne.n	8005a10 <_dtoa_r+0x9c0>
 8005a08:	f019 0f01 	tst.w	r9, #1
 8005a0c:	f040 8088 	bne.w	8005b20 <_dtoa_r+0xad0>
 8005a10:	4645      	mov	r5, r8
 8005a12:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005a16:	2b30      	cmp	r3, #48	; 0x30
 8005a18:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005a1c:	d1af      	bne.n	800597e <_dtoa_r+0x92e>
 8005a1e:	4615      	mov	r5, r2
 8005a20:	e7f7      	b.n	8005a12 <_dtoa_r+0x9c2>
 8005a22:	9b03      	ldr	r3, [sp, #12]
 8005a24:	9304      	str	r3, [sp, #16]
 8005a26:	2d00      	cmp	r5, #0
 8005a28:	dd05      	ble.n	8005a36 <_dtoa_r+0x9e6>
 8005a2a:	4639      	mov	r1, r7
 8005a2c:	462a      	mov	r2, r5
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f000 fbc2 	bl	80061b8 <__lshift>
 8005a34:	4607      	mov	r7, r0
 8005a36:	f1b8 0f00 	cmp.w	r8, #0
 8005a3a:	d04c      	beq.n	8005ad6 <_dtoa_r+0xa86>
 8005a3c:	6879      	ldr	r1, [r7, #4]
 8005a3e:	4620      	mov	r0, r4
 8005a40:	f000 fa01 	bl	8005e46 <_Balloc>
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	3202      	adds	r2, #2
 8005a48:	4605      	mov	r5, r0
 8005a4a:	0092      	lsls	r2, r2, #2
 8005a4c:	f107 010c 	add.w	r1, r7, #12
 8005a50:	300c      	adds	r0, #12
 8005a52:	f000 f9ed 	bl	8005e30 <memcpy>
 8005a56:	2201      	movs	r2, #1
 8005a58:	4629      	mov	r1, r5
 8005a5a:	4620      	mov	r0, r4
 8005a5c:	f000 fbac 	bl	80061b8 <__lshift>
 8005a60:	9b00      	ldr	r3, [sp, #0]
 8005a62:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005a66:	9703      	str	r7, [sp, #12]
 8005a68:	f003 0301 	and.w	r3, r3, #1
 8005a6c:	4607      	mov	r7, r0
 8005a6e:	9305      	str	r3, [sp, #20]
 8005a70:	4631      	mov	r1, r6
 8005a72:	4650      	mov	r0, sl
 8005a74:	f7ff fa60 	bl	8004f38 <quorem>
 8005a78:	9903      	ldr	r1, [sp, #12]
 8005a7a:	4605      	mov	r5, r0
 8005a7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005a80:	4650      	mov	r0, sl
 8005a82:	f000 fbea 	bl	800625a <__mcmp>
 8005a86:	463a      	mov	r2, r7
 8005a88:	9000      	str	r0, [sp, #0]
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	f000 fbfe 	bl	800628e <__mdiff>
 8005a92:	68c3      	ldr	r3, [r0, #12]
 8005a94:	4602      	mov	r2, r0
 8005a96:	bb03      	cbnz	r3, 8005ada <_dtoa_r+0xa8a>
 8005a98:	4601      	mov	r1, r0
 8005a9a:	9006      	str	r0, [sp, #24]
 8005a9c:	4650      	mov	r0, sl
 8005a9e:	f000 fbdc 	bl	800625a <__mcmp>
 8005aa2:	9a06      	ldr	r2, [sp, #24]
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	9306      	str	r3, [sp, #24]
 8005aac:	f000 f9ff 	bl	8005eae <_Bfree>
 8005ab0:	9b06      	ldr	r3, [sp, #24]
 8005ab2:	b9a3      	cbnz	r3, 8005ade <_dtoa_r+0xa8e>
 8005ab4:	9a07      	ldr	r2, [sp, #28]
 8005ab6:	b992      	cbnz	r2, 8005ade <_dtoa_r+0xa8e>
 8005ab8:	9a05      	ldr	r2, [sp, #20]
 8005aba:	b982      	cbnz	r2, 8005ade <_dtoa_r+0xa8e>
 8005abc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005ac0:	d029      	beq.n	8005b16 <_dtoa_r+0xac6>
 8005ac2:	9b00      	ldr	r3, [sp, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	dd01      	ble.n	8005acc <_dtoa_r+0xa7c>
 8005ac8:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8005acc:	f108 0501 	add.w	r5, r8, #1
 8005ad0:	f888 9000 	strb.w	r9, [r8]
 8005ad4:	e753      	b.n	800597e <_dtoa_r+0x92e>
 8005ad6:	4638      	mov	r0, r7
 8005ad8:	e7c2      	b.n	8005a60 <_dtoa_r+0xa10>
 8005ada:	2301      	movs	r3, #1
 8005adc:	e7e3      	b.n	8005aa6 <_dtoa_r+0xa56>
 8005ade:	9a00      	ldr	r2, [sp, #0]
 8005ae0:	2a00      	cmp	r2, #0
 8005ae2:	db04      	blt.n	8005aee <_dtoa_r+0xa9e>
 8005ae4:	d125      	bne.n	8005b32 <_dtoa_r+0xae2>
 8005ae6:	9a07      	ldr	r2, [sp, #28]
 8005ae8:	bb1a      	cbnz	r2, 8005b32 <_dtoa_r+0xae2>
 8005aea:	9a05      	ldr	r2, [sp, #20]
 8005aec:	bb0a      	cbnz	r2, 8005b32 <_dtoa_r+0xae2>
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	ddec      	ble.n	8005acc <_dtoa_r+0xa7c>
 8005af2:	4651      	mov	r1, sl
 8005af4:	2201      	movs	r2, #1
 8005af6:	4620      	mov	r0, r4
 8005af8:	f000 fb5e 	bl	80061b8 <__lshift>
 8005afc:	4631      	mov	r1, r6
 8005afe:	4682      	mov	sl, r0
 8005b00:	f000 fbab 	bl	800625a <__mcmp>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	dc03      	bgt.n	8005b10 <_dtoa_r+0xac0>
 8005b08:	d1e0      	bne.n	8005acc <_dtoa_r+0xa7c>
 8005b0a:	f019 0f01 	tst.w	r9, #1
 8005b0e:	d0dd      	beq.n	8005acc <_dtoa_r+0xa7c>
 8005b10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b14:	d1d8      	bne.n	8005ac8 <_dtoa_r+0xa78>
 8005b16:	2339      	movs	r3, #57	; 0x39
 8005b18:	f888 3000 	strb.w	r3, [r8]
 8005b1c:	f108 0801 	add.w	r8, r8, #1
 8005b20:	4645      	mov	r5, r8
 8005b22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005b26:	2b39      	cmp	r3, #57	; 0x39
 8005b28:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8005b2c:	d03b      	beq.n	8005ba6 <_dtoa_r+0xb56>
 8005b2e:	3301      	adds	r3, #1
 8005b30:	e040      	b.n	8005bb4 <_dtoa_r+0xb64>
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f108 0501 	add.w	r5, r8, #1
 8005b38:	dd05      	ble.n	8005b46 <_dtoa_r+0xaf6>
 8005b3a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005b3e:	d0ea      	beq.n	8005b16 <_dtoa_r+0xac6>
 8005b40:	f109 0901 	add.w	r9, r9, #1
 8005b44:	e7c4      	b.n	8005ad0 <_dtoa_r+0xa80>
 8005b46:	9b02      	ldr	r3, [sp, #8]
 8005b48:	9a04      	ldr	r2, [sp, #16]
 8005b4a:	f805 9c01 	strb.w	r9, [r5, #-1]
 8005b4e:	1aeb      	subs	r3, r5, r3
 8005b50:	4293      	cmp	r3, r2
 8005b52:	46a8      	mov	r8, r5
 8005b54:	f43f af4b 	beq.w	80059ee <_dtoa_r+0x99e>
 8005b58:	4651      	mov	r1, sl
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	220a      	movs	r2, #10
 8005b5e:	4620      	mov	r0, r4
 8005b60:	f000 f9bc 	bl	8005edc <__multadd>
 8005b64:	9b03      	ldr	r3, [sp, #12]
 8005b66:	9903      	ldr	r1, [sp, #12]
 8005b68:	42bb      	cmp	r3, r7
 8005b6a:	4682      	mov	sl, r0
 8005b6c:	f04f 0300 	mov.w	r3, #0
 8005b70:	f04f 020a 	mov.w	r2, #10
 8005b74:	4620      	mov	r0, r4
 8005b76:	d104      	bne.n	8005b82 <_dtoa_r+0xb32>
 8005b78:	f000 f9b0 	bl	8005edc <__multadd>
 8005b7c:	9003      	str	r0, [sp, #12]
 8005b7e:	4607      	mov	r7, r0
 8005b80:	e776      	b.n	8005a70 <_dtoa_r+0xa20>
 8005b82:	f000 f9ab 	bl	8005edc <__multadd>
 8005b86:	2300      	movs	r3, #0
 8005b88:	9003      	str	r0, [sp, #12]
 8005b8a:	220a      	movs	r2, #10
 8005b8c:	4639      	mov	r1, r7
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f000 f9a4 	bl	8005edc <__multadd>
 8005b94:	e7f3      	b.n	8005b7e <_dtoa_r+0xb2e>
 8005b96:	4651      	mov	r1, sl
 8005b98:	2300      	movs	r3, #0
 8005b9a:	220a      	movs	r2, #10
 8005b9c:	4620      	mov	r0, r4
 8005b9e:	f000 f99d 	bl	8005edc <__multadd>
 8005ba2:	4682      	mov	sl, r0
 8005ba4:	e70d      	b.n	80059c2 <_dtoa_r+0x972>
 8005ba6:	9b02      	ldr	r3, [sp, #8]
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d105      	bne.n	8005bb8 <_dtoa_r+0xb68>
 8005bac:	9a02      	ldr	r2, [sp, #8]
 8005bae:	f10b 0b01 	add.w	fp, fp, #1
 8005bb2:	2331      	movs	r3, #49	; 0x31
 8005bb4:	7013      	strb	r3, [r2, #0]
 8005bb6:	e6e2      	b.n	800597e <_dtoa_r+0x92e>
 8005bb8:	4615      	mov	r5, r2
 8005bba:	e7b2      	b.n	8005b22 <_dtoa_r+0xad2>
 8005bbc:	4b09      	ldr	r3, [pc, #36]	; (8005be4 <_dtoa_r+0xb94>)
 8005bbe:	f7ff baae 	b.w	800511e <_dtoa_r+0xce>
 8005bc2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f47f aa88 	bne.w	80050da <_dtoa_r+0x8a>
 8005bca:	4b07      	ldr	r3, [pc, #28]	; (8005be8 <_dtoa_r+0xb98>)
 8005bcc:	f7ff baa7 	b.w	800511e <_dtoa_r+0xce>
 8005bd0:	9b04      	ldr	r3, [sp, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f73f aef4 	bgt.w	80059c0 <_dtoa_r+0x970>
 8005bd8:	9b07      	ldr	r3, [sp, #28]
 8005bda:	2b02      	cmp	r3, #2
 8005bdc:	f77f aef0 	ble.w	80059c0 <_dtoa_r+0x970>
 8005be0:	e6b8      	b.n	8005954 <_dtoa_r+0x904>
 8005be2:	bf00      	nop
 8005be4:	08006dc6 	.word	0x08006dc6
 8005be8:	08006de8 	.word	0x08006de8

08005bec <_malloc_trim_r>:
 8005bec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bf0:	4f25      	ldr	r7, [pc, #148]	; (8005c88 <_malloc_trim_r+0x9c>)
 8005bf2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005c94 <_malloc_trim_r+0xa8>
 8005bf6:	4689      	mov	r9, r1
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	f7fe f943 	bl	8003e84 <__malloc_lock>
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	685d      	ldr	r5, [r3, #4]
 8005c02:	f1a8 0411 	sub.w	r4, r8, #17
 8005c06:	f025 0503 	bic.w	r5, r5, #3
 8005c0a:	eba4 0409 	sub.w	r4, r4, r9
 8005c0e:	442c      	add	r4, r5
 8005c10:	fbb4 f4f8 	udiv	r4, r4, r8
 8005c14:	3c01      	subs	r4, #1
 8005c16:	fb08 f404 	mul.w	r4, r8, r4
 8005c1a:	4544      	cmp	r4, r8
 8005c1c:	da05      	bge.n	8005c2a <_malloc_trim_r+0x3e>
 8005c1e:	4630      	mov	r0, r6
 8005c20:	f7fe f936 	bl	8003e90 <__malloc_unlock>
 8005c24:	2000      	movs	r0, #0
 8005c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4630      	mov	r0, r6
 8005c2e:	f7fe f935 	bl	8003e9c <_sbrk_r>
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	442b      	add	r3, r5
 8005c36:	4298      	cmp	r0, r3
 8005c38:	d1f1      	bne.n	8005c1e <_malloc_trim_r+0x32>
 8005c3a:	4261      	negs	r1, r4
 8005c3c:	4630      	mov	r0, r6
 8005c3e:	f7fe f92d 	bl	8003e9c <_sbrk_r>
 8005c42:	3001      	adds	r0, #1
 8005c44:	d110      	bne.n	8005c68 <_malloc_trim_r+0x7c>
 8005c46:	2100      	movs	r1, #0
 8005c48:	4630      	mov	r0, r6
 8005c4a:	f7fe f927 	bl	8003e9c <_sbrk_r>
 8005c4e:	68ba      	ldr	r2, [r7, #8]
 8005c50:	1a83      	subs	r3, r0, r2
 8005c52:	2b0f      	cmp	r3, #15
 8005c54:	dde3      	ble.n	8005c1e <_malloc_trim_r+0x32>
 8005c56:	490d      	ldr	r1, [pc, #52]	; (8005c8c <_malloc_trim_r+0xa0>)
 8005c58:	6809      	ldr	r1, [r1, #0]
 8005c5a:	1a40      	subs	r0, r0, r1
 8005c5c:	490c      	ldr	r1, [pc, #48]	; (8005c90 <_malloc_trim_r+0xa4>)
 8005c5e:	f043 0301 	orr.w	r3, r3, #1
 8005c62:	6008      	str	r0, [r1, #0]
 8005c64:	6053      	str	r3, [r2, #4]
 8005c66:	e7da      	b.n	8005c1e <_malloc_trim_r+0x32>
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	4a09      	ldr	r2, [pc, #36]	; (8005c90 <_malloc_trim_r+0xa4>)
 8005c6c:	1b2d      	subs	r5, r5, r4
 8005c6e:	f045 0501 	orr.w	r5, r5, #1
 8005c72:	605d      	str	r5, [r3, #4]
 8005c74:	6813      	ldr	r3, [r2, #0]
 8005c76:	4630      	mov	r0, r6
 8005c78:	1b1c      	subs	r4, r3, r4
 8005c7a:	6014      	str	r4, [r2, #0]
 8005c7c:	f7fe f908 	bl	8003e90 <__malloc_unlock>
 8005c80:	2001      	movs	r0, #1
 8005c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c86:	bf00      	nop
 8005c88:	20000020 	.word	0x20000020
 8005c8c:	20000428 	.word	0x20000428
 8005c90:	20000974 	.word	0x20000974
 8005c94:	00000080 	.word	0x00000080

08005c98 <_free_r>:
 8005c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c9c:	4604      	mov	r4, r0
 8005c9e:	4688      	mov	r8, r1
 8005ca0:	2900      	cmp	r1, #0
 8005ca2:	f000 80ab 	beq.w	8005dfc <_free_r+0x164>
 8005ca6:	f7fe f8ed 	bl	8003e84 <__malloc_lock>
 8005caa:	f858 2c04 	ldr.w	r2, [r8, #-4]
 8005cae:	4d54      	ldr	r5, [pc, #336]	; (8005e00 <_free_r+0x168>)
 8005cb0:	f022 0001 	bic.w	r0, r2, #1
 8005cb4:	f1a8 0308 	sub.w	r3, r8, #8
 8005cb8:	181f      	adds	r7, r3, r0
 8005cba:	68a9      	ldr	r1, [r5, #8]
 8005cbc:	687e      	ldr	r6, [r7, #4]
 8005cbe:	428f      	cmp	r7, r1
 8005cc0:	f026 0603 	bic.w	r6, r6, #3
 8005cc4:	f002 0201 	and.w	r2, r2, #1
 8005cc8:	d11b      	bne.n	8005d02 <_free_r+0x6a>
 8005cca:	4430      	add	r0, r6
 8005ccc:	b93a      	cbnz	r2, 8005cde <_free_r+0x46>
 8005cce:	f858 2c08 	ldr.w	r2, [r8, #-8]
 8005cd2:	1a9b      	subs	r3, r3, r2
 8005cd4:	4410      	add	r0, r2
 8005cd6:	6899      	ldr	r1, [r3, #8]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	60ca      	str	r2, [r1, #12]
 8005cdc:	6091      	str	r1, [r2, #8]
 8005cde:	f040 0201 	orr.w	r2, r0, #1
 8005ce2:	605a      	str	r2, [r3, #4]
 8005ce4:	60ab      	str	r3, [r5, #8]
 8005ce6:	4b47      	ldr	r3, [pc, #284]	; (8005e04 <_free_r+0x16c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4298      	cmp	r0, r3
 8005cec:	d304      	bcc.n	8005cf8 <_free_r+0x60>
 8005cee:	4b46      	ldr	r3, [pc, #280]	; (8005e08 <_free_r+0x170>)
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	6819      	ldr	r1, [r3, #0]
 8005cf4:	f7ff ff7a 	bl	8005bec <_malloc_trim_r>
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cfe:	f7fe b8c7 	b.w	8003e90 <__malloc_unlock>
 8005d02:	607e      	str	r6, [r7, #4]
 8005d04:	2a00      	cmp	r2, #0
 8005d06:	d139      	bne.n	8005d7c <_free_r+0xe4>
 8005d08:	f858 1c08 	ldr.w	r1, [r8, #-8]
 8005d0c:	1a5b      	subs	r3, r3, r1
 8005d0e:	4408      	add	r0, r1
 8005d10:	6899      	ldr	r1, [r3, #8]
 8005d12:	f105 0e08 	add.w	lr, r5, #8
 8005d16:	4571      	cmp	r1, lr
 8005d18:	d032      	beq.n	8005d80 <_free_r+0xe8>
 8005d1a:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8005d1e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8005d22:	f8ce 1008 	str.w	r1, [lr, #8]
 8005d26:	19b9      	adds	r1, r7, r6
 8005d28:	6849      	ldr	r1, [r1, #4]
 8005d2a:	07c9      	lsls	r1, r1, #31
 8005d2c:	d40a      	bmi.n	8005d44 <_free_r+0xac>
 8005d2e:	4430      	add	r0, r6
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	bb3a      	cbnz	r2, 8005d84 <_free_r+0xec>
 8005d34:	4e35      	ldr	r6, [pc, #212]	; (8005e0c <_free_r+0x174>)
 8005d36:	42b1      	cmp	r1, r6
 8005d38:	d124      	bne.n	8005d84 <_free_r+0xec>
 8005d3a:	616b      	str	r3, [r5, #20]
 8005d3c:	612b      	str	r3, [r5, #16]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	60d9      	str	r1, [r3, #12]
 8005d42:	6099      	str	r1, [r3, #8]
 8005d44:	f040 0101 	orr.w	r1, r0, #1
 8005d48:	6059      	str	r1, [r3, #4]
 8005d4a:	5018      	str	r0, [r3, r0]
 8005d4c:	2a00      	cmp	r2, #0
 8005d4e:	d1d3      	bne.n	8005cf8 <_free_r+0x60>
 8005d50:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005d54:	d21a      	bcs.n	8005d8c <_free_r+0xf4>
 8005d56:	08c0      	lsrs	r0, r0, #3
 8005d58:	1081      	asrs	r1, r0, #2
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	408a      	lsls	r2, r1
 8005d5e:	6869      	ldr	r1, [r5, #4]
 8005d60:	3001      	adds	r0, #1
 8005d62:	430a      	orrs	r2, r1
 8005d64:	606a      	str	r2, [r5, #4]
 8005d66:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005d6a:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005d6e:	6099      	str	r1, [r3, #8]
 8005d70:	3a08      	subs	r2, #8
 8005d72:	60da      	str	r2, [r3, #12]
 8005d74:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005d78:	60cb      	str	r3, [r1, #12]
 8005d7a:	e7bd      	b.n	8005cf8 <_free_r+0x60>
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	e7d2      	b.n	8005d26 <_free_r+0x8e>
 8005d80:	2201      	movs	r2, #1
 8005d82:	e7d0      	b.n	8005d26 <_free_r+0x8e>
 8005d84:	68fe      	ldr	r6, [r7, #12]
 8005d86:	60ce      	str	r6, [r1, #12]
 8005d88:	60b1      	str	r1, [r6, #8]
 8005d8a:	e7db      	b.n	8005d44 <_free_r+0xac>
 8005d8c:	0a42      	lsrs	r2, r0, #9
 8005d8e:	2a04      	cmp	r2, #4
 8005d90:	d813      	bhi.n	8005dba <_free_r+0x122>
 8005d92:	0982      	lsrs	r2, r0, #6
 8005d94:	3238      	adds	r2, #56	; 0x38
 8005d96:	1c51      	adds	r1, r2, #1
 8005d98:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005d9c:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005da0:	428e      	cmp	r6, r1
 8005da2:	d124      	bne.n	8005dee <_free_r+0x156>
 8005da4:	2001      	movs	r0, #1
 8005da6:	1092      	asrs	r2, r2, #2
 8005da8:	fa00 f202 	lsl.w	r2, r0, r2
 8005dac:	6868      	ldr	r0, [r5, #4]
 8005dae:	4302      	orrs	r2, r0
 8005db0:	606a      	str	r2, [r5, #4]
 8005db2:	60de      	str	r6, [r3, #12]
 8005db4:	6099      	str	r1, [r3, #8]
 8005db6:	60b3      	str	r3, [r6, #8]
 8005db8:	e7de      	b.n	8005d78 <_free_r+0xe0>
 8005dba:	2a14      	cmp	r2, #20
 8005dbc:	d801      	bhi.n	8005dc2 <_free_r+0x12a>
 8005dbe:	325b      	adds	r2, #91	; 0x5b
 8005dc0:	e7e9      	b.n	8005d96 <_free_r+0xfe>
 8005dc2:	2a54      	cmp	r2, #84	; 0x54
 8005dc4:	d802      	bhi.n	8005dcc <_free_r+0x134>
 8005dc6:	0b02      	lsrs	r2, r0, #12
 8005dc8:	326e      	adds	r2, #110	; 0x6e
 8005dca:	e7e4      	b.n	8005d96 <_free_r+0xfe>
 8005dcc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005dd0:	d802      	bhi.n	8005dd8 <_free_r+0x140>
 8005dd2:	0bc2      	lsrs	r2, r0, #15
 8005dd4:	3277      	adds	r2, #119	; 0x77
 8005dd6:	e7de      	b.n	8005d96 <_free_r+0xfe>
 8005dd8:	f240 5154 	movw	r1, #1364	; 0x554
 8005ddc:	428a      	cmp	r2, r1
 8005dde:	bf9a      	itte	ls
 8005de0:	0c82      	lsrls	r2, r0, #18
 8005de2:	327c      	addls	r2, #124	; 0x7c
 8005de4:	227e      	movhi	r2, #126	; 0x7e
 8005de6:	e7d6      	b.n	8005d96 <_free_r+0xfe>
 8005de8:	6889      	ldr	r1, [r1, #8]
 8005dea:	428e      	cmp	r6, r1
 8005dec:	d004      	beq.n	8005df8 <_free_r+0x160>
 8005dee:	684a      	ldr	r2, [r1, #4]
 8005df0:	f022 0203 	bic.w	r2, r2, #3
 8005df4:	4290      	cmp	r0, r2
 8005df6:	d3f7      	bcc.n	8005de8 <_free_r+0x150>
 8005df8:	68ce      	ldr	r6, [r1, #12]
 8005dfa:	e7da      	b.n	8005db2 <_free_r+0x11a>
 8005dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e00:	20000020 	.word	0x20000020
 8005e04:	2000042c 	.word	0x2000042c
 8005e08:	200009a4 	.word	0x200009a4
 8005e0c:	20000028 	.word	0x20000028

08005e10 <_localeconv_r>:
 8005e10:	4b04      	ldr	r3, [pc, #16]	; (8005e24 <_localeconv_r+0x14>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	6a18      	ldr	r0, [r3, #32]
 8005e16:	4b04      	ldr	r3, [pc, #16]	; (8005e28 <_localeconv_r+0x18>)
 8005e18:	2800      	cmp	r0, #0
 8005e1a:	bf08      	it	eq
 8005e1c:	4618      	moveq	r0, r3
 8005e1e:	30f0      	adds	r0, #240	; 0xf0
 8005e20:	4770      	bx	lr
 8005e22:	bf00      	nop
 8005e24:	20000430 	.word	0x20000430
 8005e28:	20000524 	.word	0x20000524

08005e2c <__retarget_lock_acquire_recursive>:
 8005e2c:	4770      	bx	lr

08005e2e <__retarget_lock_release_recursive>:
 8005e2e:	4770      	bx	lr

08005e30 <memcpy>:
 8005e30:	b510      	push	{r4, lr}
 8005e32:	1e43      	subs	r3, r0, #1
 8005e34:	440a      	add	r2, r1
 8005e36:	4291      	cmp	r1, r2
 8005e38:	d100      	bne.n	8005e3c <memcpy+0xc>
 8005e3a:	bd10      	pop	{r4, pc}
 8005e3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005e40:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005e44:	e7f7      	b.n	8005e36 <memcpy+0x6>

08005e46 <_Balloc>:
 8005e46:	b570      	push	{r4, r5, r6, lr}
 8005e48:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	460e      	mov	r6, r1
 8005e4e:	b93d      	cbnz	r5, 8005e60 <_Balloc+0x1a>
 8005e50:	2010      	movs	r0, #16
 8005e52:	f7fd fdf9 	bl	8003a48 <malloc>
 8005e56:	6260      	str	r0, [r4, #36]	; 0x24
 8005e58:	6045      	str	r5, [r0, #4]
 8005e5a:	6085      	str	r5, [r0, #8]
 8005e5c:	6005      	str	r5, [r0, #0]
 8005e5e:	60c5      	str	r5, [r0, #12]
 8005e60:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005e62:	68eb      	ldr	r3, [r5, #12]
 8005e64:	b183      	cbz	r3, 8005e88 <_Balloc+0x42>
 8005e66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005e6e:	b9b8      	cbnz	r0, 8005ea0 <_Balloc+0x5a>
 8005e70:	2101      	movs	r1, #1
 8005e72:	fa01 f506 	lsl.w	r5, r1, r6
 8005e76:	1d6a      	adds	r2, r5, #5
 8005e78:	0092      	lsls	r2, r2, #2
 8005e7a:	4620      	mov	r0, r4
 8005e7c:	f000 fb2e 	bl	80064dc <_calloc_r>
 8005e80:	b160      	cbz	r0, 8005e9c <_Balloc+0x56>
 8005e82:	6046      	str	r6, [r0, #4]
 8005e84:	6085      	str	r5, [r0, #8]
 8005e86:	e00e      	b.n	8005ea6 <_Balloc+0x60>
 8005e88:	2221      	movs	r2, #33	; 0x21
 8005e8a:	2104      	movs	r1, #4
 8005e8c:	4620      	mov	r0, r4
 8005e8e:	f000 fb25 	bl	80064dc <_calloc_r>
 8005e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e94:	60e8      	str	r0, [r5, #12]
 8005e96:	68db      	ldr	r3, [r3, #12]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e4      	bne.n	8005e66 <_Balloc+0x20>
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ea0:	6802      	ldr	r2, [r0, #0]
 8005ea2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	6103      	str	r3, [r0, #16]
 8005eaa:	60c3      	str	r3, [r0, #12]
 8005eac:	bd70      	pop	{r4, r5, r6, pc}

08005eae <_Bfree>:
 8005eae:	b570      	push	{r4, r5, r6, lr}
 8005eb0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005eb2:	4606      	mov	r6, r0
 8005eb4:	460d      	mov	r5, r1
 8005eb6:	b93c      	cbnz	r4, 8005ec8 <_Bfree+0x1a>
 8005eb8:	2010      	movs	r0, #16
 8005eba:	f7fd fdc5 	bl	8003a48 <malloc>
 8005ebe:	6270      	str	r0, [r6, #36]	; 0x24
 8005ec0:	6044      	str	r4, [r0, #4]
 8005ec2:	6084      	str	r4, [r0, #8]
 8005ec4:	6004      	str	r4, [r0, #0]
 8005ec6:	60c4      	str	r4, [r0, #12]
 8005ec8:	b13d      	cbz	r5, 8005eda <_Bfree+0x2c>
 8005eca:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005ecc:	686a      	ldr	r2, [r5, #4]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005ed4:	6029      	str	r1, [r5, #0]
 8005ed6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8005eda:	bd70      	pop	{r4, r5, r6, pc}

08005edc <__multadd>:
 8005edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ee0:	690d      	ldr	r5, [r1, #16]
 8005ee2:	461f      	mov	r7, r3
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	460c      	mov	r4, r1
 8005ee8:	f101 0e14 	add.w	lr, r1, #20
 8005eec:	2300      	movs	r3, #0
 8005eee:	f8de 0000 	ldr.w	r0, [lr]
 8005ef2:	b281      	uxth	r1, r0
 8005ef4:	fb02 7101 	mla	r1, r2, r1, r7
 8005ef8:	0c0f      	lsrs	r7, r1, #16
 8005efa:	0c00      	lsrs	r0, r0, #16
 8005efc:	fb02 7000 	mla	r0, r2, r0, r7
 8005f00:	b289      	uxth	r1, r1
 8005f02:	3301      	adds	r3, #1
 8005f04:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8005f08:	429d      	cmp	r5, r3
 8005f0a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005f0e:	f84e 1b04 	str.w	r1, [lr], #4
 8005f12:	dcec      	bgt.n	8005eee <__multadd+0x12>
 8005f14:	b1d7      	cbz	r7, 8005f4c <__multadd+0x70>
 8005f16:	68a3      	ldr	r3, [r4, #8]
 8005f18:	429d      	cmp	r5, r3
 8005f1a:	db12      	blt.n	8005f42 <__multadd+0x66>
 8005f1c:	6861      	ldr	r1, [r4, #4]
 8005f1e:	4630      	mov	r0, r6
 8005f20:	3101      	adds	r1, #1
 8005f22:	f7ff ff90 	bl	8005e46 <_Balloc>
 8005f26:	6922      	ldr	r2, [r4, #16]
 8005f28:	3202      	adds	r2, #2
 8005f2a:	f104 010c 	add.w	r1, r4, #12
 8005f2e:	4680      	mov	r8, r0
 8005f30:	0092      	lsls	r2, r2, #2
 8005f32:	300c      	adds	r0, #12
 8005f34:	f7ff ff7c 	bl	8005e30 <memcpy>
 8005f38:	4621      	mov	r1, r4
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f7ff ffb7 	bl	8005eae <_Bfree>
 8005f40:	4644      	mov	r4, r8
 8005f42:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005f46:	3501      	adds	r5, #1
 8005f48:	615f      	str	r7, [r3, #20]
 8005f4a:	6125      	str	r5, [r4, #16]
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005f52 <__hi0bits>:
 8005f52:	0c02      	lsrs	r2, r0, #16
 8005f54:	0412      	lsls	r2, r2, #16
 8005f56:	4603      	mov	r3, r0
 8005f58:	b9b2      	cbnz	r2, 8005f88 <__hi0bits+0x36>
 8005f5a:	0403      	lsls	r3, r0, #16
 8005f5c:	2010      	movs	r0, #16
 8005f5e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005f62:	bf04      	itt	eq
 8005f64:	021b      	lsleq	r3, r3, #8
 8005f66:	3008      	addeq	r0, #8
 8005f68:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005f6c:	bf04      	itt	eq
 8005f6e:	011b      	lsleq	r3, r3, #4
 8005f70:	3004      	addeq	r0, #4
 8005f72:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f76:	bf04      	itt	eq
 8005f78:	009b      	lsleq	r3, r3, #2
 8005f7a:	3002      	addeq	r0, #2
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	db06      	blt.n	8005f8e <__hi0bits+0x3c>
 8005f80:	005b      	lsls	r3, r3, #1
 8005f82:	d503      	bpl.n	8005f8c <__hi0bits+0x3a>
 8005f84:	3001      	adds	r0, #1
 8005f86:	4770      	bx	lr
 8005f88:	2000      	movs	r0, #0
 8005f8a:	e7e8      	b.n	8005f5e <__hi0bits+0xc>
 8005f8c:	2020      	movs	r0, #32
 8005f8e:	4770      	bx	lr

08005f90 <__lo0bits>:
 8005f90:	6803      	ldr	r3, [r0, #0]
 8005f92:	f013 0207 	ands.w	r2, r3, #7
 8005f96:	4601      	mov	r1, r0
 8005f98:	d00b      	beq.n	8005fb2 <__lo0bits+0x22>
 8005f9a:	07da      	lsls	r2, r3, #31
 8005f9c:	d423      	bmi.n	8005fe6 <__lo0bits+0x56>
 8005f9e:	0798      	lsls	r0, r3, #30
 8005fa0:	bf49      	itett	mi
 8005fa2:	085b      	lsrmi	r3, r3, #1
 8005fa4:	089b      	lsrpl	r3, r3, #2
 8005fa6:	2001      	movmi	r0, #1
 8005fa8:	600b      	strmi	r3, [r1, #0]
 8005faa:	bf5c      	itt	pl
 8005fac:	600b      	strpl	r3, [r1, #0]
 8005fae:	2002      	movpl	r0, #2
 8005fb0:	4770      	bx	lr
 8005fb2:	b298      	uxth	r0, r3
 8005fb4:	b9a8      	cbnz	r0, 8005fe2 <__lo0bits+0x52>
 8005fb6:	0c1b      	lsrs	r3, r3, #16
 8005fb8:	2010      	movs	r0, #16
 8005fba:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005fbe:	bf04      	itt	eq
 8005fc0:	0a1b      	lsreq	r3, r3, #8
 8005fc2:	3008      	addeq	r0, #8
 8005fc4:	071a      	lsls	r2, r3, #28
 8005fc6:	bf04      	itt	eq
 8005fc8:	091b      	lsreq	r3, r3, #4
 8005fca:	3004      	addeq	r0, #4
 8005fcc:	079a      	lsls	r2, r3, #30
 8005fce:	bf04      	itt	eq
 8005fd0:	089b      	lsreq	r3, r3, #2
 8005fd2:	3002      	addeq	r0, #2
 8005fd4:	07da      	lsls	r2, r3, #31
 8005fd6:	d402      	bmi.n	8005fde <__lo0bits+0x4e>
 8005fd8:	085b      	lsrs	r3, r3, #1
 8005fda:	d006      	beq.n	8005fea <__lo0bits+0x5a>
 8005fdc:	3001      	adds	r0, #1
 8005fde:	600b      	str	r3, [r1, #0]
 8005fe0:	4770      	bx	lr
 8005fe2:	4610      	mov	r0, r2
 8005fe4:	e7e9      	b.n	8005fba <__lo0bits+0x2a>
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	4770      	bx	lr
 8005fea:	2020      	movs	r0, #32
 8005fec:	4770      	bx	lr

08005fee <__i2b>:
 8005fee:	b510      	push	{r4, lr}
 8005ff0:	460c      	mov	r4, r1
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	f7ff ff27 	bl	8005e46 <_Balloc>
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	6144      	str	r4, [r0, #20]
 8005ffc:	6102      	str	r2, [r0, #16]
 8005ffe:	bd10      	pop	{r4, pc}

08006000 <__multiply>:
 8006000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006004:	4614      	mov	r4, r2
 8006006:	690a      	ldr	r2, [r1, #16]
 8006008:	6923      	ldr	r3, [r4, #16]
 800600a:	429a      	cmp	r2, r3
 800600c:	bfb8      	it	lt
 800600e:	460b      	movlt	r3, r1
 8006010:	4689      	mov	r9, r1
 8006012:	bfbc      	itt	lt
 8006014:	46a1      	movlt	r9, r4
 8006016:	461c      	movlt	r4, r3
 8006018:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800601c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006020:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8006024:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006028:	eb07 060a 	add.w	r6, r7, sl
 800602c:	429e      	cmp	r6, r3
 800602e:	bfc8      	it	gt
 8006030:	3101      	addgt	r1, #1
 8006032:	f7ff ff08 	bl	8005e46 <_Balloc>
 8006036:	f100 0514 	add.w	r5, r0, #20
 800603a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800603e:	462b      	mov	r3, r5
 8006040:	2200      	movs	r2, #0
 8006042:	4543      	cmp	r3, r8
 8006044:	d316      	bcc.n	8006074 <__multiply+0x74>
 8006046:	f104 0214 	add.w	r2, r4, #20
 800604a:	f109 0114 	add.w	r1, r9, #20
 800604e:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006052:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006056:	9301      	str	r3, [sp, #4]
 8006058:	9c01      	ldr	r4, [sp, #4]
 800605a:	4294      	cmp	r4, r2
 800605c:	4613      	mov	r3, r2
 800605e:	d80c      	bhi.n	800607a <__multiply+0x7a>
 8006060:	2e00      	cmp	r6, #0
 8006062:	dd03      	ble.n	800606c <__multiply+0x6c>
 8006064:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006068:	2b00      	cmp	r3, #0
 800606a:	d054      	beq.n	8006116 <__multiply+0x116>
 800606c:	6106      	str	r6, [r0, #16]
 800606e:	b003      	add	sp, #12
 8006070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006074:	f843 2b04 	str.w	r2, [r3], #4
 8006078:	e7e3      	b.n	8006042 <__multiply+0x42>
 800607a:	f8b3 a000 	ldrh.w	sl, [r3]
 800607e:	3204      	adds	r2, #4
 8006080:	f1ba 0f00 	cmp.w	sl, #0
 8006084:	d020      	beq.n	80060c8 <__multiply+0xc8>
 8006086:	46ae      	mov	lr, r5
 8006088:	4689      	mov	r9, r1
 800608a:	f04f 0c00 	mov.w	ip, #0
 800608e:	f859 4b04 	ldr.w	r4, [r9], #4
 8006092:	f8be b000 	ldrh.w	fp, [lr]
 8006096:	b2a3      	uxth	r3, r4
 8006098:	fb0a b303 	mla	r3, sl, r3, fp
 800609c:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 80060a0:	f8de 4000 	ldr.w	r4, [lr]
 80060a4:	4463      	add	r3, ip
 80060a6:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80060aa:	fb0a c40b 	mla	r4, sl, fp, ip
 80060ae:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80060b8:	454f      	cmp	r7, r9
 80060ba:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80060be:	f84e 3b04 	str.w	r3, [lr], #4
 80060c2:	d8e4      	bhi.n	800608e <__multiply+0x8e>
 80060c4:	f8ce c000 	str.w	ip, [lr]
 80060c8:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80060cc:	f1b9 0f00 	cmp.w	r9, #0
 80060d0:	d01f      	beq.n	8006112 <__multiply+0x112>
 80060d2:	682b      	ldr	r3, [r5, #0]
 80060d4:	46ae      	mov	lr, r5
 80060d6:	468c      	mov	ip, r1
 80060d8:	f04f 0a00 	mov.w	sl, #0
 80060dc:	f8bc 4000 	ldrh.w	r4, [ip]
 80060e0:	f8be b002 	ldrh.w	fp, [lr, #2]
 80060e4:	fb09 b404 	mla	r4, r9, r4, fp
 80060e8:	44a2      	add	sl, r4
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80060f0:	f84e 3b04 	str.w	r3, [lr], #4
 80060f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80060f8:	f8be 4000 	ldrh.w	r4, [lr]
 80060fc:	0c1b      	lsrs	r3, r3, #16
 80060fe:	fb09 4303 	mla	r3, r9, r3, r4
 8006102:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8006106:	4567      	cmp	r7, ip
 8006108:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800610c:	d8e6      	bhi.n	80060dc <__multiply+0xdc>
 800610e:	f8ce 3000 	str.w	r3, [lr]
 8006112:	3504      	adds	r5, #4
 8006114:	e7a0      	b.n	8006058 <__multiply+0x58>
 8006116:	3e01      	subs	r6, #1
 8006118:	e7a2      	b.n	8006060 <__multiply+0x60>
	...

0800611c <__pow5mult>:
 800611c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006120:	4615      	mov	r5, r2
 8006122:	f012 0203 	ands.w	r2, r2, #3
 8006126:	4606      	mov	r6, r0
 8006128:	460f      	mov	r7, r1
 800612a:	d007      	beq.n	800613c <__pow5mult+0x20>
 800612c:	3a01      	subs	r2, #1
 800612e:	4c21      	ldr	r4, [pc, #132]	; (80061b4 <__pow5mult+0x98>)
 8006130:	2300      	movs	r3, #0
 8006132:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006136:	f7ff fed1 	bl	8005edc <__multadd>
 800613a:	4607      	mov	r7, r0
 800613c:	10ad      	asrs	r5, r5, #2
 800613e:	d035      	beq.n	80061ac <__pow5mult+0x90>
 8006140:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006142:	b93c      	cbnz	r4, 8006154 <__pow5mult+0x38>
 8006144:	2010      	movs	r0, #16
 8006146:	f7fd fc7f 	bl	8003a48 <malloc>
 800614a:	6270      	str	r0, [r6, #36]	; 0x24
 800614c:	6044      	str	r4, [r0, #4]
 800614e:	6084      	str	r4, [r0, #8]
 8006150:	6004      	str	r4, [r0, #0]
 8006152:	60c4      	str	r4, [r0, #12]
 8006154:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006158:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800615c:	b94c      	cbnz	r4, 8006172 <__pow5mult+0x56>
 800615e:	f240 2171 	movw	r1, #625	; 0x271
 8006162:	4630      	mov	r0, r6
 8006164:	f7ff ff43 	bl	8005fee <__i2b>
 8006168:	2300      	movs	r3, #0
 800616a:	f8c8 0008 	str.w	r0, [r8, #8]
 800616e:	4604      	mov	r4, r0
 8006170:	6003      	str	r3, [r0, #0]
 8006172:	f04f 0800 	mov.w	r8, #0
 8006176:	07eb      	lsls	r3, r5, #31
 8006178:	d50a      	bpl.n	8006190 <__pow5mult+0x74>
 800617a:	4639      	mov	r1, r7
 800617c:	4622      	mov	r2, r4
 800617e:	4630      	mov	r0, r6
 8006180:	f7ff ff3e 	bl	8006000 <__multiply>
 8006184:	4639      	mov	r1, r7
 8006186:	4681      	mov	r9, r0
 8006188:	4630      	mov	r0, r6
 800618a:	f7ff fe90 	bl	8005eae <_Bfree>
 800618e:	464f      	mov	r7, r9
 8006190:	106d      	asrs	r5, r5, #1
 8006192:	d00b      	beq.n	80061ac <__pow5mult+0x90>
 8006194:	6820      	ldr	r0, [r4, #0]
 8006196:	b938      	cbnz	r0, 80061a8 <__pow5mult+0x8c>
 8006198:	4622      	mov	r2, r4
 800619a:	4621      	mov	r1, r4
 800619c:	4630      	mov	r0, r6
 800619e:	f7ff ff2f 	bl	8006000 <__multiply>
 80061a2:	6020      	str	r0, [r4, #0]
 80061a4:	f8c0 8000 	str.w	r8, [r0]
 80061a8:	4604      	mov	r4, r0
 80061aa:	e7e4      	b.n	8006176 <__pow5mult+0x5a>
 80061ac:	4638      	mov	r0, r7
 80061ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061b2:	bf00      	nop
 80061b4:	08006ee8 	.word	0x08006ee8

080061b8 <__lshift>:
 80061b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061bc:	460c      	mov	r4, r1
 80061be:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	6849      	ldr	r1, [r1, #4]
 80061c6:	eb0a 0903 	add.w	r9, sl, r3
 80061ca:	68a3      	ldr	r3, [r4, #8]
 80061cc:	4607      	mov	r7, r0
 80061ce:	4616      	mov	r6, r2
 80061d0:	f109 0501 	add.w	r5, r9, #1
 80061d4:	42ab      	cmp	r3, r5
 80061d6:	db31      	blt.n	800623c <__lshift+0x84>
 80061d8:	4638      	mov	r0, r7
 80061da:	f7ff fe34 	bl	8005e46 <_Balloc>
 80061de:	2200      	movs	r2, #0
 80061e0:	4680      	mov	r8, r0
 80061e2:	f100 0314 	add.w	r3, r0, #20
 80061e6:	4611      	mov	r1, r2
 80061e8:	4552      	cmp	r2, sl
 80061ea:	db2a      	blt.n	8006242 <__lshift+0x8a>
 80061ec:	6920      	ldr	r0, [r4, #16]
 80061ee:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80061f2:	f104 0114 	add.w	r1, r4, #20
 80061f6:	f016 021f 	ands.w	r2, r6, #31
 80061fa:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80061fe:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006202:	d022      	beq.n	800624a <__lshift+0x92>
 8006204:	f1c2 0c20 	rsb	ip, r2, #32
 8006208:	2000      	movs	r0, #0
 800620a:	680e      	ldr	r6, [r1, #0]
 800620c:	4096      	lsls	r6, r2
 800620e:	4330      	orrs	r0, r6
 8006210:	f843 0b04 	str.w	r0, [r3], #4
 8006214:	f851 0b04 	ldr.w	r0, [r1], #4
 8006218:	458e      	cmp	lr, r1
 800621a:	fa20 f00c 	lsr.w	r0, r0, ip
 800621e:	d8f4      	bhi.n	800620a <__lshift+0x52>
 8006220:	6018      	str	r0, [r3, #0]
 8006222:	b108      	cbz	r0, 8006228 <__lshift+0x70>
 8006224:	f109 0502 	add.w	r5, r9, #2
 8006228:	3d01      	subs	r5, #1
 800622a:	4638      	mov	r0, r7
 800622c:	f8c8 5010 	str.w	r5, [r8, #16]
 8006230:	4621      	mov	r1, r4
 8006232:	f7ff fe3c 	bl	8005eae <_Bfree>
 8006236:	4640      	mov	r0, r8
 8006238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800623c:	3101      	adds	r1, #1
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	e7c8      	b.n	80061d4 <__lshift+0x1c>
 8006242:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006246:	3201      	adds	r2, #1
 8006248:	e7ce      	b.n	80061e8 <__lshift+0x30>
 800624a:	3b04      	subs	r3, #4
 800624c:	f851 2b04 	ldr.w	r2, [r1], #4
 8006250:	f843 2f04 	str.w	r2, [r3, #4]!
 8006254:	458e      	cmp	lr, r1
 8006256:	d8f9      	bhi.n	800624c <__lshift+0x94>
 8006258:	e7e6      	b.n	8006228 <__lshift+0x70>

0800625a <__mcmp>:
 800625a:	6903      	ldr	r3, [r0, #16]
 800625c:	690a      	ldr	r2, [r1, #16]
 800625e:	1a9b      	subs	r3, r3, r2
 8006260:	b530      	push	{r4, r5, lr}
 8006262:	d10c      	bne.n	800627e <__mcmp+0x24>
 8006264:	0092      	lsls	r2, r2, #2
 8006266:	3014      	adds	r0, #20
 8006268:	3114      	adds	r1, #20
 800626a:	1884      	adds	r4, r0, r2
 800626c:	4411      	add	r1, r2
 800626e:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006272:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006276:	4295      	cmp	r5, r2
 8006278:	d003      	beq.n	8006282 <__mcmp+0x28>
 800627a:	d305      	bcc.n	8006288 <__mcmp+0x2e>
 800627c:	2301      	movs	r3, #1
 800627e:	4618      	mov	r0, r3
 8006280:	bd30      	pop	{r4, r5, pc}
 8006282:	42a0      	cmp	r0, r4
 8006284:	d3f3      	bcc.n	800626e <__mcmp+0x14>
 8006286:	e7fa      	b.n	800627e <__mcmp+0x24>
 8006288:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800628c:	e7f7      	b.n	800627e <__mcmp+0x24>

0800628e <__mdiff>:
 800628e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006292:	460d      	mov	r5, r1
 8006294:	4607      	mov	r7, r0
 8006296:	4611      	mov	r1, r2
 8006298:	4628      	mov	r0, r5
 800629a:	4614      	mov	r4, r2
 800629c:	f7ff ffdd 	bl	800625a <__mcmp>
 80062a0:	1e06      	subs	r6, r0, #0
 80062a2:	d108      	bne.n	80062b6 <__mdiff+0x28>
 80062a4:	4631      	mov	r1, r6
 80062a6:	4638      	mov	r0, r7
 80062a8:	f7ff fdcd 	bl	8005e46 <_Balloc>
 80062ac:	2301      	movs	r3, #1
 80062ae:	6103      	str	r3, [r0, #16]
 80062b0:	6146      	str	r6, [r0, #20]
 80062b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062b6:	bfa4      	itt	ge
 80062b8:	4623      	movge	r3, r4
 80062ba:	462c      	movge	r4, r5
 80062bc:	4638      	mov	r0, r7
 80062be:	6861      	ldr	r1, [r4, #4]
 80062c0:	bfa6      	itte	ge
 80062c2:	461d      	movge	r5, r3
 80062c4:	2600      	movge	r6, #0
 80062c6:	2601      	movlt	r6, #1
 80062c8:	f7ff fdbd 	bl	8005e46 <_Balloc>
 80062cc:	692b      	ldr	r3, [r5, #16]
 80062ce:	60c6      	str	r6, [r0, #12]
 80062d0:	6926      	ldr	r6, [r4, #16]
 80062d2:	f105 0914 	add.w	r9, r5, #20
 80062d6:	f104 0214 	add.w	r2, r4, #20
 80062da:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80062de:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80062e2:	f100 0514 	add.w	r5, r0, #20
 80062e6:	f04f 0c00 	mov.w	ip, #0
 80062ea:	f852 ab04 	ldr.w	sl, [r2], #4
 80062ee:	f859 4b04 	ldr.w	r4, [r9], #4
 80062f2:	fa1c f18a 	uxtah	r1, ip, sl
 80062f6:	b2a3      	uxth	r3, r4
 80062f8:	1ac9      	subs	r1, r1, r3
 80062fa:	0c23      	lsrs	r3, r4, #16
 80062fc:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006300:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006304:	b289      	uxth	r1, r1
 8006306:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800630a:	45c8      	cmp	r8, r9
 800630c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006310:	4696      	mov	lr, r2
 8006312:	f845 3b04 	str.w	r3, [r5], #4
 8006316:	d8e8      	bhi.n	80062ea <__mdiff+0x5c>
 8006318:	45be      	cmp	lr, r7
 800631a:	d305      	bcc.n	8006328 <__mdiff+0x9a>
 800631c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006320:	b18b      	cbz	r3, 8006346 <__mdiff+0xb8>
 8006322:	6106      	str	r6, [r0, #16]
 8006324:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006328:	f85e 1b04 	ldr.w	r1, [lr], #4
 800632c:	fa1c f381 	uxtah	r3, ip, r1
 8006330:	141a      	asrs	r2, r3, #16
 8006332:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006336:	b29b      	uxth	r3, r3
 8006338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800633c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006340:	f845 3b04 	str.w	r3, [r5], #4
 8006344:	e7e8      	b.n	8006318 <__mdiff+0x8a>
 8006346:	3e01      	subs	r6, #1
 8006348:	e7e8      	b.n	800631c <__mdiff+0x8e>

0800634a <__d2b>:
 800634a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800634e:	460e      	mov	r6, r1
 8006350:	2101      	movs	r1, #1
 8006352:	ec59 8b10 	vmov	r8, r9, d0
 8006356:	4615      	mov	r5, r2
 8006358:	f7ff fd75 	bl	8005e46 <_Balloc>
 800635c:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006360:	4607      	mov	r7, r0
 8006362:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006366:	bb34      	cbnz	r4, 80063b6 <__d2b+0x6c>
 8006368:	9301      	str	r3, [sp, #4]
 800636a:	f1b8 0f00 	cmp.w	r8, #0
 800636e:	d027      	beq.n	80063c0 <__d2b+0x76>
 8006370:	a802      	add	r0, sp, #8
 8006372:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006376:	f7ff fe0b 	bl	8005f90 <__lo0bits>
 800637a:	9900      	ldr	r1, [sp, #0]
 800637c:	b1f0      	cbz	r0, 80063bc <__d2b+0x72>
 800637e:	9a01      	ldr	r2, [sp, #4]
 8006380:	f1c0 0320 	rsb	r3, r0, #32
 8006384:	fa02 f303 	lsl.w	r3, r2, r3
 8006388:	430b      	orrs	r3, r1
 800638a:	40c2      	lsrs	r2, r0
 800638c:	617b      	str	r3, [r7, #20]
 800638e:	9201      	str	r2, [sp, #4]
 8006390:	9b01      	ldr	r3, [sp, #4]
 8006392:	61bb      	str	r3, [r7, #24]
 8006394:	2b00      	cmp	r3, #0
 8006396:	bf14      	ite	ne
 8006398:	2102      	movne	r1, #2
 800639a:	2101      	moveq	r1, #1
 800639c:	6139      	str	r1, [r7, #16]
 800639e:	b1c4      	cbz	r4, 80063d2 <__d2b+0x88>
 80063a0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80063a4:	4404      	add	r4, r0
 80063a6:	6034      	str	r4, [r6, #0]
 80063a8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80063ac:	6028      	str	r0, [r5, #0]
 80063ae:	4638      	mov	r0, r7
 80063b0:	b003      	add	sp, #12
 80063b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80063b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80063ba:	e7d5      	b.n	8006368 <__d2b+0x1e>
 80063bc:	6179      	str	r1, [r7, #20]
 80063be:	e7e7      	b.n	8006390 <__d2b+0x46>
 80063c0:	a801      	add	r0, sp, #4
 80063c2:	f7ff fde5 	bl	8005f90 <__lo0bits>
 80063c6:	9b01      	ldr	r3, [sp, #4]
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	2101      	movs	r1, #1
 80063cc:	6139      	str	r1, [r7, #16]
 80063ce:	3020      	adds	r0, #32
 80063d0:	e7e5      	b.n	800639e <__d2b+0x54>
 80063d2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80063d6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80063da:	6030      	str	r0, [r6, #0]
 80063dc:	6918      	ldr	r0, [r3, #16]
 80063de:	f7ff fdb8 	bl	8005f52 <__hi0bits>
 80063e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80063e6:	e7e1      	b.n	80063ac <__d2b+0x62>

080063e8 <__ssprint_r>:
 80063e8:	6893      	ldr	r3, [r2, #8]
 80063ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063ee:	4681      	mov	r9, r0
 80063f0:	460c      	mov	r4, r1
 80063f2:	4617      	mov	r7, r2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d060      	beq.n	80064ba <__ssprint_r+0xd2>
 80063f8:	f04f 0b00 	mov.w	fp, #0
 80063fc:	f8d2 a000 	ldr.w	sl, [r2]
 8006400:	465e      	mov	r6, fp
 8006402:	b356      	cbz	r6, 800645a <__ssprint_r+0x72>
 8006404:	68a3      	ldr	r3, [r4, #8]
 8006406:	429e      	cmp	r6, r3
 8006408:	d344      	bcc.n	8006494 <__ssprint_r+0xac>
 800640a:	89a2      	ldrh	r2, [r4, #12]
 800640c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006410:	d03e      	beq.n	8006490 <__ssprint_r+0xa8>
 8006412:	6825      	ldr	r5, [r4, #0]
 8006414:	6921      	ldr	r1, [r4, #16]
 8006416:	eba5 0801 	sub.w	r8, r5, r1
 800641a:	6965      	ldr	r5, [r4, #20]
 800641c:	2302      	movs	r3, #2
 800641e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006422:	fb95 f5f3 	sdiv	r5, r5, r3
 8006426:	f108 0301 	add.w	r3, r8, #1
 800642a:	4433      	add	r3, r6
 800642c:	429d      	cmp	r5, r3
 800642e:	bf38      	it	cc
 8006430:	461d      	movcc	r5, r3
 8006432:	0553      	lsls	r3, r2, #21
 8006434:	d546      	bpl.n	80064c4 <__ssprint_r+0xdc>
 8006436:	4629      	mov	r1, r5
 8006438:	4648      	mov	r0, r9
 800643a:	f7fd fb0d 	bl	8003a58 <_malloc_r>
 800643e:	b998      	cbnz	r0, 8006468 <__ssprint_r+0x80>
 8006440:	230c      	movs	r3, #12
 8006442:	f8c9 3000 	str.w	r3, [r9]
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800644c:	81a3      	strh	r3, [r4, #12]
 800644e:	2300      	movs	r3, #0
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	607b      	str	r3, [r7, #4]
 8006454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006458:	e031      	b.n	80064be <__ssprint_r+0xd6>
 800645a:	f8da b000 	ldr.w	fp, [sl]
 800645e:	f8da 6004 	ldr.w	r6, [sl, #4]
 8006462:	f10a 0a08 	add.w	sl, sl, #8
 8006466:	e7cc      	b.n	8006402 <__ssprint_r+0x1a>
 8006468:	4642      	mov	r2, r8
 800646a:	6921      	ldr	r1, [r4, #16]
 800646c:	9001      	str	r0, [sp, #4]
 800646e:	f7ff fcdf 	bl	8005e30 <memcpy>
 8006472:	89a2      	ldrh	r2, [r4, #12]
 8006474:	9b01      	ldr	r3, [sp, #4]
 8006476:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800647a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800647e:	81a2      	strh	r2, [r4, #12]
 8006480:	6123      	str	r3, [r4, #16]
 8006482:	6165      	str	r5, [r4, #20]
 8006484:	4443      	add	r3, r8
 8006486:	eba5 0508 	sub.w	r5, r5, r8
 800648a:	6023      	str	r3, [r4, #0]
 800648c:	60a5      	str	r5, [r4, #8]
 800648e:	4633      	mov	r3, r6
 8006490:	429e      	cmp	r6, r3
 8006492:	d200      	bcs.n	8006496 <__ssprint_r+0xae>
 8006494:	4633      	mov	r3, r6
 8006496:	461a      	mov	r2, r3
 8006498:	4659      	mov	r1, fp
 800649a:	6820      	ldr	r0, [r4, #0]
 800649c:	9301      	str	r3, [sp, #4]
 800649e:	f000 f85c 	bl	800655a <memmove>
 80064a2:	68a2      	ldr	r2, [r4, #8]
 80064a4:	9b01      	ldr	r3, [sp, #4]
 80064a6:	1ad2      	subs	r2, r2, r3
 80064a8:	60a2      	str	r2, [r4, #8]
 80064aa:	6822      	ldr	r2, [r4, #0]
 80064ac:	4413      	add	r3, r2
 80064ae:	6023      	str	r3, [r4, #0]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	1b9e      	subs	r6, r3, r6
 80064b4:	60be      	str	r6, [r7, #8]
 80064b6:	2e00      	cmp	r6, #0
 80064b8:	d1cf      	bne.n	800645a <__ssprint_r+0x72>
 80064ba:	2000      	movs	r0, #0
 80064bc:	6078      	str	r0, [r7, #4]
 80064be:	b003      	add	sp, #12
 80064c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c4:	462a      	mov	r2, r5
 80064c6:	4648      	mov	r0, r9
 80064c8:	f000 f862 	bl	8006590 <_realloc_r>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2800      	cmp	r0, #0
 80064d0:	d1d6      	bne.n	8006480 <__ssprint_r+0x98>
 80064d2:	6921      	ldr	r1, [r4, #16]
 80064d4:	4648      	mov	r0, r9
 80064d6:	f7ff fbdf 	bl	8005c98 <_free_r>
 80064da:	e7b1      	b.n	8006440 <__ssprint_r+0x58>

080064dc <_calloc_r>:
 80064dc:	b510      	push	{r4, lr}
 80064de:	4351      	muls	r1, r2
 80064e0:	f7fd faba 	bl	8003a58 <_malloc_r>
 80064e4:	4604      	mov	r4, r0
 80064e6:	b198      	cbz	r0, 8006510 <_calloc_r+0x34>
 80064e8:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80064ec:	f022 0203 	bic.w	r2, r2, #3
 80064f0:	3a04      	subs	r2, #4
 80064f2:	2a24      	cmp	r2, #36	; 0x24
 80064f4:	d81b      	bhi.n	800652e <_calloc_r+0x52>
 80064f6:	2a13      	cmp	r2, #19
 80064f8:	d917      	bls.n	800652a <_calloc_r+0x4e>
 80064fa:	2100      	movs	r1, #0
 80064fc:	2a1b      	cmp	r2, #27
 80064fe:	6001      	str	r1, [r0, #0]
 8006500:	6041      	str	r1, [r0, #4]
 8006502:	d807      	bhi.n	8006514 <_calloc_r+0x38>
 8006504:	f100 0308 	add.w	r3, r0, #8
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
 800650c:	605a      	str	r2, [r3, #4]
 800650e:	609a      	str	r2, [r3, #8]
 8006510:	4620      	mov	r0, r4
 8006512:	bd10      	pop	{r4, pc}
 8006514:	2a24      	cmp	r2, #36	; 0x24
 8006516:	6081      	str	r1, [r0, #8]
 8006518:	60c1      	str	r1, [r0, #12]
 800651a:	bf11      	iteee	ne
 800651c:	f100 0310 	addne.w	r3, r0, #16
 8006520:	6101      	streq	r1, [r0, #16]
 8006522:	f100 0318 	addeq.w	r3, r0, #24
 8006526:	6141      	streq	r1, [r0, #20]
 8006528:	e7ee      	b.n	8006508 <_calloc_r+0x2c>
 800652a:	4603      	mov	r3, r0
 800652c:	e7ec      	b.n	8006508 <_calloc_r+0x2c>
 800652e:	2100      	movs	r1, #0
 8006530:	f7fd fca0 	bl	8003e74 <memset>
 8006534:	e7ec      	b.n	8006510 <_calloc_r+0x34>

08006536 <__ascii_mbtowc>:
 8006536:	b082      	sub	sp, #8
 8006538:	b901      	cbnz	r1, 800653c <__ascii_mbtowc+0x6>
 800653a:	a901      	add	r1, sp, #4
 800653c:	b142      	cbz	r2, 8006550 <__ascii_mbtowc+0x1a>
 800653e:	b14b      	cbz	r3, 8006554 <__ascii_mbtowc+0x1e>
 8006540:	7813      	ldrb	r3, [r2, #0]
 8006542:	600b      	str	r3, [r1, #0]
 8006544:	7812      	ldrb	r2, [r2, #0]
 8006546:	1c10      	adds	r0, r2, #0
 8006548:	bf18      	it	ne
 800654a:	2001      	movne	r0, #1
 800654c:	b002      	add	sp, #8
 800654e:	4770      	bx	lr
 8006550:	4610      	mov	r0, r2
 8006552:	e7fb      	b.n	800654c <__ascii_mbtowc+0x16>
 8006554:	f06f 0001 	mvn.w	r0, #1
 8006558:	e7f8      	b.n	800654c <__ascii_mbtowc+0x16>

0800655a <memmove>:
 800655a:	4288      	cmp	r0, r1
 800655c:	b510      	push	{r4, lr}
 800655e:	eb01 0302 	add.w	r3, r1, r2
 8006562:	d803      	bhi.n	800656c <memmove+0x12>
 8006564:	1e42      	subs	r2, r0, #1
 8006566:	4299      	cmp	r1, r3
 8006568:	d10c      	bne.n	8006584 <memmove+0x2a>
 800656a:	bd10      	pop	{r4, pc}
 800656c:	4298      	cmp	r0, r3
 800656e:	d2f9      	bcs.n	8006564 <memmove+0xa>
 8006570:	1881      	adds	r1, r0, r2
 8006572:	1ad2      	subs	r2, r2, r3
 8006574:	42d3      	cmn	r3, r2
 8006576:	d100      	bne.n	800657a <memmove+0x20>
 8006578:	bd10      	pop	{r4, pc}
 800657a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800657e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006582:	e7f7      	b.n	8006574 <memmove+0x1a>
 8006584:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006588:	f802 4f01 	strb.w	r4, [r2, #1]!
 800658c:	e7eb      	b.n	8006566 <memmove+0xc>
	...

08006590 <_realloc_r>:
 8006590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006594:	4682      	mov	sl, r0
 8006596:	460c      	mov	r4, r1
 8006598:	b929      	cbnz	r1, 80065a6 <_realloc_r+0x16>
 800659a:	4611      	mov	r1, r2
 800659c:	b003      	add	sp, #12
 800659e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065a2:	f7fd ba59 	b.w	8003a58 <_malloc_r>
 80065a6:	9201      	str	r2, [sp, #4]
 80065a8:	f7fd fc6c 	bl	8003e84 <__malloc_lock>
 80065ac:	9a01      	ldr	r2, [sp, #4]
 80065ae:	f854 5c04 	ldr.w	r5, [r4, #-4]
 80065b2:	f102 080b 	add.w	r8, r2, #11
 80065b6:	f1b8 0f16 	cmp.w	r8, #22
 80065ba:	f1a4 0908 	sub.w	r9, r4, #8
 80065be:	f025 0603 	bic.w	r6, r5, #3
 80065c2:	d90a      	bls.n	80065da <_realloc_r+0x4a>
 80065c4:	f038 0807 	bics.w	r8, r8, #7
 80065c8:	d509      	bpl.n	80065de <_realloc_r+0x4e>
 80065ca:	230c      	movs	r3, #12
 80065cc:	f8ca 3000 	str.w	r3, [sl]
 80065d0:	2700      	movs	r7, #0
 80065d2:	4638      	mov	r0, r7
 80065d4:	b003      	add	sp, #12
 80065d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065da:	f04f 0810 	mov.w	r8, #16
 80065de:	4590      	cmp	r8, r2
 80065e0:	d3f3      	bcc.n	80065ca <_realloc_r+0x3a>
 80065e2:	45b0      	cmp	r8, r6
 80065e4:	f340 8145 	ble.w	8006872 <_realloc_r+0x2e2>
 80065e8:	4ba8      	ldr	r3, [pc, #672]	; (800688c <_realloc_r+0x2fc>)
 80065ea:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80065ee:	eb09 0106 	add.w	r1, r9, r6
 80065f2:	4571      	cmp	r1, lr
 80065f4:	469b      	mov	fp, r3
 80065f6:	684b      	ldr	r3, [r1, #4]
 80065f8:	d005      	beq.n	8006606 <_realloc_r+0x76>
 80065fa:	f023 0001 	bic.w	r0, r3, #1
 80065fe:	4408      	add	r0, r1
 8006600:	6840      	ldr	r0, [r0, #4]
 8006602:	07c7      	lsls	r7, r0, #31
 8006604:	d447      	bmi.n	8006696 <_realloc_r+0x106>
 8006606:	f023 0303 	bic.w	r3, r3, #3
 800660a:	4571      	cmp	r1, lr
 800660c:	eb06 0703 	add.w	r7, r6, r3
 8006610:	d119      	bne.n	8006646 <_realloc_r+0xb6>
 8006612:	f108 0010 	add.w	r0, r8, #16
 8006616:	4287      	cmp	r7, r0
 8006618:	db3f      	blt.n	800669a <_realloc_r+0x10a>
 800661a:	eb09 0308 	add.w	r3, r9, r8
 800661e:	eba7 0708 	sub.w	r7, r7, r8
 8006622:	f047 0701 	orr.w	r7, r7, #1
 8006626:	f8cb 3008 	str.w	r3, [fp, #8]
 800662a:	605f      	str	r7, [r3, #4]
 800662c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	ea43 0308 	orr.w	r3, r3, r8
 8006638:	f844 3c04 	str.w	r3, [r4, #-4]
 800663c:	4650      	mov	r0, sl
 800663e:	f7fd fc27 	bl	8003e90 <__malloc_unlock>
 8006642:	4627      	mov	r7, r4
 8006644:	e7c5      	b.n	80065d2 <_realloc_r+0x42>
 8006646:	45b8      	cmp	r8, r7
 8006648:	dc27      	bgt.n	800669a <_realloc_r+0x10a>
 800664a:	68cb      	ldr	r3, [r1, #12]
 800664c:	688a      	ldr	r2, [r1, #8]
 800664e:	60d3      	str	r3, [r2, #12]
 8006650:	609a      	str	r2, [r3, #8]
 8006652:	eba7 0008 	sub.w	r0, r7, r8
 8006656:	280f      	cmp	r0, #15
 8006658:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800665c:	eb09 0207 	add.w	r2, r9, r7
 8006660:	f240 8109 	bls.w	8006876 <_realloc_r+0x2e6>
 8006664:	eb09 0108 	add.w	r1, r9, r8
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	ea43 0308 	orr.w	r3, r3, r8
 8006670:	f040 0001 	orr.w	r0, r0, #1
 8006674:	f8c9 3004 	str.w	r3, [r9, #4]
 8006678:	6048      	str	r0, [r1, #4]
 800667a:	6853      	ldr	r3, [r2, #4]
 800667c:	f043 0301 	orr.w	r3, r3, #1
 8006680:	6053      	str	r3, [r2, #4]
 8006682:	3108      	adds	r1, #8
 8006684:	4650      	mov	r0, sl
 8006686:	f7ff fb07 	bl	8005c98 <_free_r>
 800668a:	4650      	mov	r0, sl
 800668c:	f7fd fc00 	bl	8003e90 <__malloc_unlock>
 8006690:	f109 0708 	add.w	r7, r9, #8
 8006694:	e79d      	b.n	80065d2 <_realloc_r+0x42>
 8006696:	2300      	movs	r3, #0
 8006698:	4619      	mov	r1, r3
 800669a:	07e8      	lsls	r0, r5, #31
 800669c:	f100 8084 	bmi.w	80067a8 <_realloc_r+0x218>
 80066a0:	f854 5c08 	ldr.w	r5, [r4, #-8]
 80066a4:	eba9 0505 	sub.w	r5, r9, r5
 80066a8:	6868      	ldr	r0, [r5, #4]
 80066aa:	f020 0003 	bic.w	r0, r0, #3
 80066ae:	4430      	add	r0, r6
 80066b0:	2900      	cmp	r1, #0
 80066b2:	d076      	beq.n	80067a2 <_realloc_r+0x212>
 80066b4:	4571      	cmp	r1, lr
 80066b6:	d150      	bne.n	800675a <_realloc_r+0x1ca>
 80066b8:	4403      	add	r3, r0
 80066ba:	f108 0110 	add.w	r1, r8, #16
 80066be:	428b      	cmp	r3, r1
 80066c0:	db6f      	blt.n	80067a2 <_realloc_r+0x212>
 80066c2:	462f      	mov	r7, r5
 80066c4:	68ea      	ldr	r2, [r5, #12]
 80066c6:	f857 1f08 	ldr.w	r1, [r7, #8]!
 80066ca:	60ca      	str	r2, [r1, #12]
 80066cc:	6091      	str	r1, [r2, #8]
 80066ce:	1f32      	subs	r2, r6, #4
 80066d0:	2a24      	cmp	r2, #36	; 0x24
 80066d2:	d83b      	bhi.n	800674c <_realloc_r+0x1bc>
 80066d4:	2a13      	cmp	r2, #19
 80066d6:	d936      	bls.n	8006746 <_realloc_r+0x1b6>
 80066d8:	6821      	ldr	r1, [r4, #0]
 80066da:	60a9      	str	r1, [r5, #8]
 80066dc:	6861      	ldr	r1, [r4, #4]
 80066de:	60e9      	str	r1, [r5, #12]
 80066e0:	2a1b      	cmp	r2, #27
 80066e2:	d81c      	bhi.n	800671e <_realloc_r+0x18e>
 80066e4:	f105 0210 	add.w	r2, r5, #16
 80066e8:	f104 0108 	add.w	r1, r4, #8
 80066ec:	6808      	ldr	r0, [r1, #0]
 80066ee:	6010      	str	r0, [r2, #0]
 80066f0:	6848      	ldr	r0, [r1, #4]
 80066f2:	6050      	str	r0, [r2, #4]
 80066f4:	6889      	ldr	r1, [r1, #8]
 80066f6:	6091      	str	r1, [r2, #8]
 80066f8:	eb05 0208 	add.w	r2, r5, r8
 80066fc:	eba3 0308 	sub.w	r3, r3, r8
 8006700:	f043 0301 	orr.w	r3, r3, #1
 8006704:	f8cb 2008 	str.w	r2, [fp, #8]
 8006708:	6053      	str	r3, [r2, #4]
 800670a:	686b      	ldr	r3, [r5, #4]
 800670c:	f003 0301 	and.w	r3, r3, #1
 8006710:	ea43 0308 	orr.w	r3, r3, r8
 8006714:	606b      	str	r3, [r5, #4]
 8006716:	4650      	mov	r0, sl
 8006718:	f7fd fbba 	bl	8003e90 <__malloc_unlock>
 800671c:	e759      	b.n	80065d2 <_realloc_r+0x42>
 800671e:	68a1      	ldr	r1, [r4, #8]
 8006720:	6129      	str	r1, [r5, #16]
 8006722:	68e1      	ldr	r1, [r4, #12]
 8006724:	6169      	str	r1, [r5, #20]
 8006726:	2a24      	cmp	r2, #36	; 0x24
 8006728:	bf01      	itttt	eq
 800672a:	6922      	ldreq	r2, [r4, #16]
 800672c:	61aa      	streq	r2, [r5, #24]
 800672e:	6960      	ldreq	r0, [r4, #20]
 8006730:	61e8      	streq	r0, [r5, #28]
 8006732:	bf19      	ittee	ne
 8006734:	f105 0218 	addne.w	r2, r5, #24
 8006738:	f104 0110 	addne.w	r1, r4, #16
 800673c:	f105 0220 	addeq.w	r2, r5, #32
 8006740:	f104 0118 	addeq.w	r1, r4, #24
 8006744:	e7d2      	b.n	80066ec <_realloc_r+0x15c>
 8006746:	463a      	mov	r2, r7
 8006748:	4621      	mov	r1, r4
 800674a:	e7cf      	b.n	80066ec <_realloc_r+0x15c>
 800674c:	4621      	mov	r1, r4
 800674e:	4638      	mov	r0, r7
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	f7ff ff02 	bl	800655a <memmove>
 8006756:	9b01      	ldr	r3, [sp, #4]
 8006758:	e7ce      	b.n	80066f8 <_realloc_r+0x168>
 800675a:	18c7      	adds	r7, r0, r3
 800675c:	45b8      	cmp	r8, r7
 800675e:	dc20      	bgt.n	80067a2 <_realloc_r+0x212>
 8006760:	68cb      	ldr	r3, [r1, #12]
 8006762:	688a      	ldr	r2, [r1, #8]
 8006764:	60d3      	str	r3, [r2, #12]
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	4628      	mov	r0, r5
 800676a:	68eb      	ldr	r3, [r5, #12]
 800676c:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006770:	60d3      	str	r3, [r2, #12]
 8006772:	609a      	str	r2, [r3, #8]
 8006774:	1f32      	subs	r2, r6, #4
 8006776:	2a24      	cmp	r2, #36	; 0x24
 8006778:	d842      	bhi.n	8006800 <_realloc_r+0x270>
 800677a:	2a13      	cmp	r2, #19
 800677c:	d93e      	bls.n	80067fc <_realloc_r+0x26c>
 800677e:	6823      	ldr	r3, [r4, #0]
 8006780:	60ab      	str	r3, [r5, #8]
 8006782:	6863      	ldr	r3, [r4, #4]
 8006784:	60eb      	str	r3, [r5, #12]
 8006786:	2a1b      	cmp	r2, #27
 8006788:	d824      	bhi.n	80067d4 <_realloc_r+0x244>
 800678a:	f105 0010 	add.w	r0, r5, #16
 800678e:	f104 0308 	add.w	r3, r4, #8
 8006792:	681a      	ldr	r2, [r3, #0]
 8006794:	6002      	str	r2, [r0, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	6042      	str	r2, [r0, #4]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	6083      	str	r3, [r0, #8]
 800679e:	46a9      	mov	r9, r5
 80067a0:	e757      	b.n	8006652 <_realloc_r+0xc2>
 80067a2:	4580      	cmp	r8, r0
 80067a4:	4607      	mov	r7, r0
 80067a6:	dddf      	ble.n	8006768 <_realloc_r+0x1d8>
 80067a8:	4611      	mov	r1, r2
 80067aa:	4650      	mov	r0, sl
 80067ac:	f7fd f954 	bl	8003a58 <_malloc_r>
 80067b0:	4607      	mov	r7, r0
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d0af      	beq.n	8006716 <_realloc_r+0x186>
 80067b6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80067ba:	f023 0301 	bic.w	r3, r3, #1
 80067be:	f1a0 0208 	sub.w	r2, r0, #8
 80067c2:	444b      	add	r3, r9
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d11f      	bne.n	8006808 <_realloc_r+0x278>
 80067c8:	f850 7c04 	ldr.w	r7, [r0, #-4]
 80067cc:	f027 0703 	bic.w	r7, r7, #3
 80067d0:	4437      	add	r7, r6
 80067d2:	e73e      	b.n	8006652 <_realloc_r+0xc2>
 80067d4:	68a3      	ldr	r3, [r4, #8]
 80067d6:	612b      	str	r3, [r5, #16]
 80067d8:	68e3      	ldr	r3, [r4, #12]
 80067da:	616b      	str	r3, [r5, #20]
 80067dc:	2a24      	cmp	r2, #36	; 0x24
 80067de:	bf01      	itttt	eq
 80067e0:	6923      	ldreq	r3, [r4, #16]
 80067e2:	61ab      	streq	r3, [r5, #24]
 80067e4:	6962      	ldreq	r2, [r4, #20]
 80067e6:	61ea      	streq	r2, [r5, #28]
 80067e8:	bf19      	ittee	ne
 80067ea:	f105 0018 	addne.w	r0, r5, #24
 80067ee:	f104 0310 	addne.w	r3, r4, #16
 80067f2:	f105 0020 	addeq.w	r0, r5, #32
 80067f6:	f104 0318 	addeq.w	r3, r4, #24
 80067fa:	e7ca      	b.n	8006792 <_realloc_r+0x202>
 80067fc:	4623      	mov	r3, r4
 80067fe:	e7c8      	b.n	8006792 <_realloc_r+0x202>
 8006800:	4621      	mov	r1, r4
 8006802:	f7ff feaa 	bl	800655a <memmove>
 8006806:	e7ca      	b.n	800679e <_realloc_r+0x20e>
 8006808:	1f32      	subs	r2, r6, #4
 800680a:	2a24      	cmp	r2, #36	; 0x24
 800680c:	d82d      	bhi.n	800686a <_realloc_r+0x2da>
 800680e:	2a13      	cmp	r2, #19
 8006810:	d928      	bls.n	8006864 <_realloc_r+0x2d4>
 8006812:	6823      	ldr	r3, [r4, #0]
 8006814:	6003      	str	r3, [r0, #0]
 8006816:	6863      	ldr	r3, [r4, #4]
 8006818:	6043      	str	r3, [r0, #4]
 800681a:	2a1b      	cmp	r2, #27
 800681c:	d80e      	bhi.n	800683c <_realloc_r+0x2ac>
 800681e:	f100 0308 	add.w	r3, r0, #8
 8006822:	f104 0208 	add.w	r2, r4, #8
 8006826:	6811      	ldr	r1, [r2, #0]
 8006828:	6019      	str	r1, [r3, #0]
 800682a:	6851      	ldr	r1, [r2, #4]
 800682c:	6059      	str	r1, [r3, #4]
 800682e:	6892      	ldr	r2, [r2, #8]
 8006830:	609a      	str	r2, [r3, #8]
 8006832:	4621      	mov	r1, r4
 8006834:	4650      	mov	r0, sl
 8006836:	f7ff fa2f 	bl	8005c98 <_free_r>
 800683a:	e76c      	b.n	8006716 <_realloc_r+0x186>
 800683c:	68a3      	ldr	r3, [r4, #8]
 800683e:	6083      	str	r3, [r0, #8]
 8006840:	68e3      	ldr	r3, [r4, #12]
 8006842:	60c3      	str	r3, [r0, #12]
 8006844:	2a24      	cmp	r2, #36	; 0x24
 8006846:	bf01      	itttt	eq
 8006848:	6923      	ldreq	r3, [r4, #16]
 800684a:	6103      	streq	r3, [r0, #16]
 800684c:	6961      	ldreq	r1, [r4, #20]
 800684e:	6141      	streq	r1, [r0, #20]
 8006850:	bf19      	ittee	ne
 8006852:	f100 0310 	addne.w	r3, r0, #16
 8006856:	f104 0210 	addne.w	r2, r4, #16
 800685a:	f100 0318 	addeq.w	r3, r0, #24
 800685e:	f104 0218 	addeq.w	r2, r4, #24
 8006862:	e7e0      	b.n	8006826 <_realloc_r+0x296>
 8006864:	4603      	mov	r3, r0
 8006866:	4622      	mov	r2, r4
 8006868:	e7dd      	b.n	8006826 <_realloc_r+0x296>
 800686a:	4621      	mov	r1, r4
 800686c:	f7ff fe75 	bl	800655a <memmove>
 8006870:	e7df      	b.n	8006832 <_realloc_r+0x2a2>
 8006872:	4637      	mov	r7, r6
 8006874:	e6ed      	b.n	8006652 <_realloc_r+0xc2>
 8006876:	f003 0301 	and.w	r3, r3, #1
 800687a:	431f      	orrs	r7, r3
 800687c:	f8c9 7004 	str.w	r7, [r9, #4]
 8006880:	6853      	ldr	r3, [r2, #4]
 8006882:	f043 0301 	orr.w	r3, r3, #1
 8006886:	6053      	str	r3, [r2, #4]
 8006888:	e6ff      	b.n	800668a <_realloc_r+0xfa>
 800688a:	bf00      	nop
 800688c:	20000020 	.word	0x20000020

08006890 <__ascii_wctomb>:
 8006890:	b149      	cbz	r1, 80068a6 <__ascii_wctomb+0x16>
 8006892:	2aff      	cmp	r2, #255	; 0xff
 8006894:	bf85      	ittet	hi
 8006896:	238a      	movhi	r3, #138	; 0x8a
 8006898:	6003      	strhi	r3, [r0, #0]
 800689a:	700a      	strbls	r2, [r1, #0]
 800689c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80068a0:	bf98      	it	ls
 80068a2:	2001      	movls	r0, #1
 80068a4:	4770      	bx	lr
 80068a6:	4608      	mov	r0, r1
 80068a8:	4770      	bx	lr
	...

080068ac <_sbrk>:
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <_sbrk+0x14>)
 80068ae:	6819      	ldr	r1, [r3, #0]
 80068b0:	4602      	mov	r2, r0
 80068b2:	b909      	cbnz	r1, 80068b8 <_sbrk+0xc>
 80068b4:	4903      	ldr	r1, [pc, #12]	; (80068c4 <_sbrk+0x18>)
 80068b6:	6019      	str	r1, [r3, #0]
 80068b8:	6818      	ldr	r0, [r3, #0]
 80068ba:	4402      	add	r2, r0
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	4770      	bx	lr
 80068c0:	200009a8 	.word	0x200009a8
 80068c4:	20000a60 	.word	0x20000a60

080068c8 <_init>:
 80068c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ca:	bf00      	nop
 80068cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ce:	bc08      	pop	{r3}
 80068d0:	469e      	mov	lr, r3
 80068d2:	4770      	bx	lr

080068d4 <_fini>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	bf00      	nop
 80068d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068da:	bc08      	pop	{r3}
 80068dc:	469e      	mov	lr, r3
 80068de:	4770      	bx	lr
